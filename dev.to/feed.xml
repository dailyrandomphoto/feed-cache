<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The State of Copy-Pasting in JavaScript</title>
      <author>Slava Knyazev</author>
      <pubDate>Sat, 15 Jan 2022 22:55:34 +0000</pubDate>
      <link>https://dev.to/knyzorg/the-state-of-copy-pasting-in-javascript-bnp</link>
      <guid>https://dev.to/knyzorg/the-state-of-copy-pasting-in-javascript-bnp</guid>
      <description>&lt;p&gt;I recently did some work on &lt;a href="https://github.com/telesoho/vscode-markdown-paste-image"&gt;a VS Code extension&lt;/a&gt; whose purpose is to handle rich pastes. It prompted me to survey different copy-pasting libraries and the state of the NPM ecosystem as a whole.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-clipboards-work"&gt;
  &lt;/a&gt;
  How do clipboards work?
&lt;/h2&gt;

&lt;p&gt;Clipboards across different operating systems work essentially the same. For this reason, we will stick to looking at a single one -- Windows.&lt;/p&gt;

&lt;p&gt;A common misconception about how clipboards work is that they contain a single piece of data, such as text or an image. In reality, clipboards hold all the ways target software can represent the data.&lt;/p&gt;

&lt;p&gt;Consider if I copy the following &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_headers"&gt;webpage&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBKpbGQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/headings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBKpbGQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/headings.png" alt="Headings" width="248" height="275"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;HTML headings as rendered by Firefox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When pasting it into Microsoft Word, it appears formatted as rich content:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VAIqBY51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/rich-word.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAIqBY51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/rich-word.png" alt="Microsoft Word" width="349" height="391"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Microsoft Word displays rich content exactly as Firefox does&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When pasting it into Notepad++, it appears as plain text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLKO-g9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/notepad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLKO-g9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bbss.dev/images/copy-pasting-javascript/notepad.png" alt="Notepad++" width="287" height="167"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Notepad++ does not handle rich content&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pasting different content types depending on the software is possible because Firefox provides multiple representations of the rendered content to the clipboard.&lt;/p&gt;

&lt;p&gt;Let's see what types the clipboard is holding using Powershell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$dataObj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.Clipboard&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;GetDataObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kr"&gt;foreach&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fmt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$dataObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetFormats&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fmt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;## Output: ##&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;System.String&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;UnicodeText&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;Chromium&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Custom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MIME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Locale&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;OEMText&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can look inside some of the clipboard types using Powershell, mainly &lt;code&gt;HTML Format&lt;/code&gt; and &lt;code&gt;Text&lt;/code&gt; with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Get Text&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.Clipboard&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;GetText&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.TextDataFormat&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;## Output: ##&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;3&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;5&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;6&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Get HTML Format&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.Clipboard&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;GetText&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;System.Windows.Forms.TextDataFormat&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;## Output: ##&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Version:0.9&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;StartHTML:00000174&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;EndHTML:00000410&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;StartFragment:00000208&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;EndFragment:00000374&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nx"&gt;SourceURL:https://www.w3schools.com/tags/tryit.asp&lt;/span&gt;&lt;span class="nf"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;tryhtml_headers&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--StartFragment&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;2&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;3&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h5&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;5&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h5&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h6&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;6&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;/h6&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--EndFragment&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;/html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way to approach clipboards as a consumer is to consume the clipboard formats you know how to, prioritizing some over others. For example, Microsoft Word will prioritize pasting &lt;code&gt;HTML Format&lt;/code&gt; formats over &lt;code&gt;Text&lt;/code&gt; formats by default.&lt;/p&gt;

&lt;p&gt;While Powershell has some built-in parsers, implementing the format specification for every type of content is a lot of work. Are there libraries that can help us with this?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copypasting-in-the-npm-ecosystem"&gt;
  &lt;/a&gt;
  Copy-Pasting in the NPM Ecosystem
&lt;/h2&gt;

&lt;p&gt;The simplest clipboard library would let us query the clipboard directly for binary data. This approach would require us to a parser per format per operating system. While such libraries deserve a place in this world, they are not helpful for most applications. Most applications want to handle copying and pasting only for text, rich text, images, and sometimes files. Let's go through the different clipboard management libraries and see how they fare.&lt;/p&gt;

&lt;p&gt;We are looking for a library that has the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pure JS, with native bindings&lt;/li&gt;
&lt;li&gt;Cross-Platform Support

&lt;ul&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;MacOS&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Copy to clipboard

&lt;ul&gt;
&lt;li&gt;Plain Text&lt;/li&gt;
&lt;li&gt;Rich Text&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Paste from clipboard

&lt;ul&gt;
&lt;li&gt;Plain Text&lt;/li&gt;
&lt;li&gt;Rich Text&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a table I made from the collected NPM packages, featuring the most popular clipboard-related libraries on NPM:&lt;/p&gt;

&lt;p&gt;Note: This table does not include browser-based copy-paste.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;
  Features / Libraries
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://www.npmjs.com/package/clipboardy"&gt;clipboardy&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://www.npmjs.com/package/copy-paste"&gt;copy-paste&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://www.npmjs.com/package/clipboard-cli"&gt;clipboard-cli&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a href="https://www.npmjs.com/package/node-clipboard-wd"&gt;node-clipboard-wd&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://www.electronjs.org/docs/latest/api/clipboard"&gt;Electron&lt;/a&gt; (Not a library)
  &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Pure JS
  &lt;/th&gt;
  &lt;td&gt;
  Uses system utilties
  &lt;/td&gt;
  &lt;td&gt;
  Uses system utilties
  &lt;/td&gt;
  &lt;td&gt;
  Uses system utilties
  &lt;/td&gt;
  &lt;td&gt;
  Chromium binary
  &lt;/td&gt;
  &lt;td&gt;
  Uses native bindings
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Cross-Platform Support
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Windows
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Linux
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  MacOS
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Copy to Clipboard
  &lt;/th&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Plain Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Rich Text
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Images
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Files
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Exposes binary API
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Paste from Clipboard
  &lt;/th&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Plain Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Rich Text
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Images
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Files
  &lt;/th&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Exposes binary API
  &lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Honorable mention: &lt;a href="https://www.npmjs.com/package/save-clipboard-image"&gt;save-clipboard-image&lt;/a&gt;, uses AppleScript to save an image from clipboard to a file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Before writing this post, I was unaware that the result would be this. It appears that all of NPM's clipboard libraries work the same way: they call built-in executables on their host operating system and return the data. Interestingly, none of them handle images, rich text, or files despite no reason they couldn't deal with them the same way.&lt;/p&gt;

&lt;p&gt;The only exceptions to this pattern are Electron and &lt;a href="https://github.com/knyzorg/node-clipboard-wd"&gt;&lt;code&gt;node-clipboard-wd&lt;/code&gt;&lt;/a&gt;. The former is a framework unsuitable for usage as a library. The latter was written by myself last week as an experiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-do-we-go-from-here"&gt;
  &lt;/a&gt;
  Where do we go from here?
&lt;/h2&gt;

&lt;p&gt;Software developers have crossed the clipboard bridge in other environments before. In fact, NodeJS developers have &lt;em&gt;already&lt;/em&gt; crossed it in Electron, which uses native bindings under the hood. There is no reason we couldn't do the same using a more lightweight C++ library.&lt;/p&gt;

&lt;p&gt;I find &lt;a href="https://github.com/dacap/clip"&gt;clip&lt;/a&gt; particularly promising in this regard, and I've been looking into writing a NodeJS wrapper around it. For posterity, here is a table of possible native libraries that I have found so far:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;
  Features / Libraries
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://github.com/dacap/clip"&gt;clip&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a rel="nofollow" href="https://crates.io/crates/arboard"&gt;arboard&lt;/a&gt;
  &lt;/th&gt;
  &lt;th&gt;
    &lt;a href="https://github.com/golang-design/clipboard" rel="nofollow"&gt;clipboard&lt;/a&gt;
  &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Cross-Platform Support
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Windows
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Linux
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  MacOS
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Copy to Clipboard
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Plain Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Rich Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Images
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Files
  &lt;/th&gt;
  &lt;td&gt;
  Exposes binary API
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Paste from Clipboard
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
  &lt;td&gt;
  Partial
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Plain Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;  
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Rich Text
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;  
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Images
  &lt;/th&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt; 
  &lt;td&gt;
  Yes
  &lt;/td&gt;
  &lt;td&gt;
  Yes
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;
  Files
  &lt;/th&gt;
  &lt;td&gt;
  Exposes binary API
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
  &lt;td&gt;
  No
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Linux üzerinde Intel 6. nesil işlemcilerdeki titreme sorunu</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Sat, 15 Jan 2022 22:48:18 +0000</pubDate>
      <link>https://dev.to/aciklab/linux-uzerinde-intel-6-nesil-islemcilerdeki-titreme-sorunu-1fjf</link>
      <guid>https://dev.to/aciklab/linux-uzerinde-intel-6-nesil-islemcilerdeki-titreme-sorunu-1fjf</guid>
      <description>&lt;p&gt;Intel 6. nesil işlemcilerin (Skylake) entegre ekran kartlarında "Screen Flickering" adı verilen ekranda hafif bir titreme sorunu bulunmakta. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sorun-%C3%A7%C3%B6z%C3%BCm%C3%BC"&gt;
  &lt;/a&gt;
  Sorun çözümü
&lt;/h1&gt;

&lt;p&gt;Bu sorunu gidermenin en önemli yollarından birisi X11 üzerinde ekran kartı ayarlarının düzenlenmesi olarak görülmekte.&lt;/p&gt;

&lt;p&gt;Sisteminizde yetkili kullanıcı olarak &lt;strong&gt;/usr/share/X11/xorg.conf.d/20-intel.conf&lt;/strong&gt; dosyası oluşturup içeriğini aşağıdaki gibi yapabilirsiniz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Section "Device"
    Identifier "Intel Graphics"
    Driver "intel"
    Option "AccelMethod" "sna"
    Option "TearFree" "true"
    Option "DRI" "3"
EndSection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha sonrasında X11 servisini yeniden başlatmak veya daha doğrusu olarak sistemi yeniden başlatmak gerekecektir.&lt;/p&gt;

</description>
      <category>intel</category>
      <category>skylake</category>
      <category>flickering</category>
      <category>titreme</category>
    </item>
    <item>
      <title>An Innovative Idea for Holding State in CSS</title>
      <author>Jane Ori</author>
      <pubDate>Sat, 15 Jan 2022 21:16:03 +0000</pubDate>
      <link>https://dev.to/janeori/an-innovative-idea-for-holding-state-in-css-23gh</link>
      <guid>https://dev.to/janeori/an-innovative-idea-for-holding-state-in-css-23gh</guid>
      <description>&lt;p&gt;When it comes to CSS and HTML, application state falls into these categories:&lt;br&gt;
&lt;strong&gt;cascade state&lt;/strong&gt;: classes/checkbox state/other dom&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DI-6Q2Nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggpsz9m92dc5p3gk43az.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DI-6Q2Nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggpsz9m92dc5p3gk43az.png" alt="screenshot of html and css producing a static state" width="880" height="195"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;pseudo state&lt;/strong&gt;: based on current user interaction&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDFC_NfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh0ighr17we4ykcgrc19.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDFC_NfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh0ighr17we4ykcgrc19.gif" alt="gif showing HTML and CSS with a user interacting to trigger a temporary hover state" width="880" height="204"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;animation state&lt;/strong&gt;: pre-determined series, triggered by cascade and/or pseudo state&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkOR7rXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hf7ek1sq3prnn86ltgs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkOR7rXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hf7ek1sq3prnn86ltgs.gif" alt="gif showing a CSS animation triggered by clicking a checkbox" width="880" height="301"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;transition state&lt;/strong&gt;: easing between the cascade and/or pseudo states when they change&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9aI4vczR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64f3a40mgxrbrt3wnnzl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9aI4vczR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64f3a40mgxrbrt3wnnzl.gif" alt="gif showing CSS transition triggered by hover" width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the building blocks for all UX that can be combined in an infinite number of ways&lt;sup&gt;[1]&lt;/sup&gt;. These are all intertwined of course, and we can split hairs on how I've referred to them, but ultimately though; Either our state is &lt;em&gt;static&lt;/em&gt; - derived from the current DOM, or it's &lt;em&gt;temporary&lt;/em&gt; - derived from the user's current interaction.&lt;/p&gt;

&lt;p&gt;[1] except that animation state cannot be combined with animation state due to &lt;a href="https://www.w3.org/TR/css-variables-1/#animation-tainted"&gt;animation-tainting&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"But wait, there's more!"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;- &lt;a class="mentioned-user" href="https://dev.to/rockstarwind"&gt;@rockstarwind&lt;/a&gt;, probably&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-new-static-state-stored-in-css-not-dom"&gt;
  &lt;/a&gt;
  The new static state, stored in CSS (not DOM!)
&lt;/h2&gt;

&lt;p&gt;Earlier this week, &lt;a class="mentioned-user" href="https://dev.to/rockstarwind"&gt;@rockstarwind&lt;/a&gt; posted an idea on their twitter that &lt;a href="https://twitter.com/RockStarwind/status/1481565710350524416"&gt;demonstrates a new technique for remembering temporary interactions&lt;/a&gt; without DOM needing to be the source of that memory (like it is with the :checked state of a checkbox).&lt;br&gt;
They go on to show a reduced example in a codepen with excellent comments to learn from:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/RockStarwind/embed/YzrROPP?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Neat!&lt;/p&gt;

&lt;p&gt;Let's break down the idea and play with it a bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#register-the-onebit-memory-cell"&gt;
  &lt;/a&gt;
  Register the one-bit memory cell
&lt;/h3&gt;

&lt;p&gt;Following their work, this is what we have to do first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this &lt;code&gt;memory&lt;/code&gt; animation sets the custom property &lt;code&gt;--cell&lt;/code&gt; as a &lt;a href="https://github.com/propjockey/css-sweeper#css-is-a-programming-language-thanks-to-the-space-toggle-trick"&gt;Space Toggle&lt;/a&gt; which has two states, off 'initial' and on ' '.&lt;/p&gt;




&lt;p&gt;
  The TL;DR of Space Toggles
  &lt;p&gt;You can concatenate CSS custom properties like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--val1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--val2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--val1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--val2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--result&lt;/code&gt; is effectively &lt;code&gt;2px solid red&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you concatenate a space:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--toggle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--result&lt;/code&gt; is effectively just &lt;code&gt;green&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you concatenate initial:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--toggle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--toggle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;cyan&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;--result&lt;/code&gt; is invalidated and var(--result, fallback) will use the fallback instead. (color is set to cyan in this example)&lt;/p&gt;

&lt;p&gt;So in effect, a space toggle is is a one bit variable we can use to derive two completely different states from reading it with &lt;code&gt;var()&lt;/code&gt; wherever and as often as we want.&lt;/p&gt;



&lt;br&gt;
&lt;/p&gt;




&lt;p&gt;Note: Animating custom properties is part of the Houdini spec, so this &lt;a href="https://ishoudinireadyyet.com/"&gt;may not work in firefox&lt;/a&gt; for a while.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initialize-the-memory"&gt;
  &lt;/a&gt;
  Initialize the memory
&lt;/h3&gt;

&lt;p&gt;All we have to do here is apply the keyframes to an element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* keyframes reference */&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-fill-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-play-state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* must be paused at first */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the shorthand animation property, that looks more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="m"&gt;1ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="n"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;.demo&lt;/code&gt; elements have a &lt;code&gt;--cell&lt;/code&gt; property explicitly set to &lt;code&gt;initial&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-properties-to-use-the-space-toggle"&gt;
  &lt;/a&gt;
  Set up properties to use the space toggle
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--bg-if-cell-is-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rebeccapurple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-if-cell-is-on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="py"&gt;--color-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color-on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In English, if the cell is off, the background is &lt;code&gt;hotpink&lt;/code&gt; and color is &lt;code&gt;black&lt;/code&gt;. If the cell is on, the background is &lt;code&gt;rebeccapurple&lt;/code&gt; and color is &lt;code&gt;white&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flipping-the-bit"&gt;
  &lt;/a&gt;
  Flipping the bit
&lt;/h3&gt;

&lt;p&gt;Next, they use the &lt;code&gt;:active&lt;/code&gt; pseudo state from a &lt;code&gt;button&lt;/code&gt; to un-pause the animation. Theoretically we could use any pseudo state, like :hover.&lt;/p&gt;

&lt;p&gt;Let's test&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/propjockey/embed/b01b6646ba7d22e501fb3513f9a5cf1e?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;click 'rerun' in the bottom right corner if needed!&lt;/p&gt;

&lt;p&gt;Great! If the user's pointer enters the document, CSS flips state and the background becomes rebeccapurple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unflipping-the-bit"&gt;
  &lt;/a&gt;
  Un-flipping the bit
&lt;/h3&gt;

&lt;p&gt;To return to the initial state, the easiest way is what they've shown, set &lt;code&gt;animation: none;&lt;/code&gt; on our element when a selector matches.&lt;br&gt;
This changes &lt;code&gt;--cell&lt;/code&gt; back to &lt;code&gt;initial&lt;/code&gt; &lt;em&gt;implicitly&lt;/em&gt; because when a custom property is not set (nor &lt;a href="https://drafts.css-houdini.org/css-properties-values-api/#supported-names"&gt;registered with a specific syntax&lt;/a&gt;), it is initial.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-rest-of-the-owl"&gt;
  &lt;/a&gt;
  The rest of the owl
&lt;/h2&gt;

&lt;p&gt;We can use this technique to do something fun like 100% CSS etch-a-sketch:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/propjockey/embed/mdBvjgg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Delightful!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remembering-is-so-much-more-a-psychotic-activity-than-forgetting"&gt;
  &lt;/a&gt;
  "Remembering is so much more a psychotic activity than forgetting"
&lt;/h2&gt;

&lt;p&gt;I've only been friends with RockStarwind for a couple years but they are continually sharing innovative ideas and awesome demos in the CSS space. Definitely give them a &lt;a href="https://twitter.com/RockStarwind"&gt;follow on Twitter&lt;/a&gt; so you don't have to remember to check manually. ;)&lt;/p&gt;

&lt;p&gt;If you enjoyed my first article, please consider following me here and &lt;a href="https://twitter.com/Jane0ri"&gt;on twitter&lt;/a&gt; as well!&lt;/p&gt;

&lt;p&gt;💜&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prior-art"&gt;
  &lt;/a&gt;
  Prior art!
&lt;/h2&gt;

&lt;p&gt;After tweeting, I learned about someone already using this idea in a really really interesting way! Check it out!&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LJCyCmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1429627823019409414/4ZvRwzPt_normal.jpg" alt="Lillian Kodi profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lillian Kodi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @lilliankodi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/Jane0ri"&gt;@Jane0ri&lt;/a&gt; &lt;a href="https://twitter.com/RockStarwind"&gt;@RockStarwind&lt;/a&gt; This is major aspect of how my morse code translator works, but instead of being an instantaneous state change, the main animation of each layer records how long the previous sibling was :active&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/QUlTVPp2Eq"&gt;twitter.com/LillianKodi/st…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:37 PM - 15 Jan 2022
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Lillian Kodi
          &lt;/span&gt;
          @LillianKodi
        &lt;/div&gt;
        Translate Morse Code with HTML &amp;amp; CSS

@CodePen #HTML #CSS

https://t.co/WCM6F4Pdy8
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1482467007798951939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1482467007798951939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1482467007798951939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
and her demo:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/lillian-kodi/embed/NWgWQKR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
HOW COOL IS THAT?!

</description>
      <category>css</category>
      <category>statemachines</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Sunnyside Landing Page using HTML CSS JS</title>
      <author>Sadee</author>
      <pubDate>Sat, 15 Jan 2022 21:14:54 +0000</pubDate>
      <link>https://dev.to/codewithsadee/sunnyside-landing-page-using-html-css-js-26aa</link>
      <guid>https://dev.to/codewithsadee/sunnyside-landing-page-using-html-css-js-26aa</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZATT0Gbfz0c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to make sunnyside landing page using html css and javascript&lt;/p&gt;

&lt;p&gt;In this video, I will show you how to create (mobile-first responsive) sunnyside landing page using html css and javascript.&lt;/p&gt;




&lt;p&gt;HI 👋&lt;br&gt;
I'm Sadee (webdev)&lt;br&gt;
In this channel I make videos about Complete Responsive website.&lt;br&gt;
You can checkout my channel 👇&lt;/p&gt;

&lt;p&gt;📺 My Channel : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
🔔 Subscribe : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g?sub_confirmation=1"&gt;subscribe now&lt;/a&gt;&lt;br&gt;
🕐 New Videos Every Week&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1jm3UHodIVONbOiUkGqc38TDPoXLipqUm/view?usp=sharing"&gt;All Images&lt;/a&gt;&lt;br&gt;
&lt;a href="https://drive.google.com/file/d/1slD2cPRLpp7SeO7RLzmfEILYLnlh_2CT/view?usp=sharing"&gt;Text&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Barlow?query=barlow"&gt;Font - Barlow&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Fraunces?query=fraun"&gt;Font - Fraunces&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ionic.io/ionicons"&gt;Ionicon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/source-code-page-61209046?utm_medium=clipboard_copy&amp;amp;utm_source=copy_to_clipboard&amp;amp;utm_campaign=postshare"&gt;Source Code&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#timestamps"&gt;
  &lt;/a&gt;
  ⏱️ Timestamps
&lt;/h2&gt;

&lt;p&gt;0:00 - Demo&lt;br&gt;
2:13 - File structure&lt;br&gt;
2:37 - Html initial&lt;br&gt;
2:54 - Css variable &amp;amp; reset&lt;br&gt;
4:38 - Header section&lt;br&gt;
10:58 - Home section&lt;br&gt;
14:38 - About section&lt;br&gt;
19:44 - Service section&lt;br&gt;
24:06 - Testimonials section&lt;br&gt;
28:20 - Projects section&lt;br&gt;
30:40 - Footer&lt;br&gt;
34:17 - Media queries&lt;br&gt;
42:21 - Javascript&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  💜 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;https://www.buymeacoffee.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>class_eval vs. instance_eval in Ruby</title>
      <author>Akshay Khot</author>
      <pubDate>Sat, 15 Jan 2022 20:19:49 +0000</pubDate>
      <link>https://dev.to/software_writer/classeval-vs-instanceeval-in-ruby-2i35</link>
      <guid>https://dev.to/software_writer/classeval-vs-instanceeval-in-ruby-2i35</guid>
      <description>&lt;p&gt;This post explains the difference between &lt;code&gt;class_eval&lt;/code&gt; and &lt;code&gt;instance_eval&lt;/code&gt; methods in Ruby. If you keep getting confused between them when reading or writing Ruby code, it should clarify things a little. &lt;/p&gt;

&lt;p&gt;Consider the &lt;code&gt;Greeting&lt;/code&gt; class, which forms the basis of other examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ukeg0_Pn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o2pjo8jrib0tcfyh0yb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ukeg0_Pn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o2pjo8jrib0tcfyh0yb.png" alt="Greeting Class" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#classeval"&gt;
  &lt;/a&gt;
  class_eval
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;class_eval&lt;/code&gt; evaluates the string or block in the context of the class, allowing you to reopen the class and define additional behavior on it.&lt;/p&gt;

&lt;p&gt;Creating a method inside the block defines an instance method on the class. All &lt;code&gt;Greeting&lt;/code&gt; instances can call &lt;code&gt;greet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKI2J7AJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xragij0uzt7omvi2eaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKI2J7AJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xragij0uzt7omvi2eaz.png" alt="Class class_eval" width="880" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the same as explicitly defining the &lt;code&gt;greet&lt;/code&gt; method in the &lt;code&gt;Greeting&lt;/code&gt; class. The above code is equivalent to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqlQAxlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy5euaineszckns41qm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqlQAxlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy5euaineszckns41qm3.png" alt="Greeting instance" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first benefit of &lt;code&gt;class_eval&lt;/code&gt; is that you can call it on a variable pointing to a class, allowing you to add behavior to a class dynamically.&lt;/li&gt;
&lt;li&gt;When using &lt;code&gt;class_eval&lt;/code&gt;, the code will fail immediately, if the class doesn't exist (or if you misspelled the class name). So you can't &lt;strong&gt;&lt;em&gt;accidentally&lt;/em&gt;&lt;/strong&gt; add code to a class that doesn't exist. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;class_eval&lt;/code&gt; method is only available on classes (modules, to be precise). You can't call it on instances, i.e. &lt;code&gt;instance_name.class_eval&lt;/code&gt; doesn't exist. Ruby throws the error &lt;code&gt;undefined_method class_eval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0e5-24DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsbsf89i3x87hger8ovc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0e5-24DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsbsf89i3x87hger8ovc.png" alt="Instance class_eval" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instanceeval"&gt;
  &lt;/a&gt;
  instance_eval
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;instance_eval&lt;/code&gt; evaluates the code in the context of the receiving object. When you call it on a class, e.g. &lt;code&gt;ClassName.instance_eval&lt;/code&gt;, the receiving object is the class, which is an instance of &lt;code&gt;Class&lt;/code&gt;.  For example, &lt;code&gt;Greeting&lt;/code&gt; is an instance of &lt;code&gt;Class&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;043&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you create a method inside the block, it defines a class method. It's associated with the class object but not visible to instances of that class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0iKTqLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urnmxmyzsprjkcwau05q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0iKTqLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urnmxmyzsprjkcwau05q.png" alt="Class instance_eval" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When the code is executing, the variable &lt;code&gt;self&lt;/code&gt; is set to the receiving object to set the context, giving the code access to the object's instance variables and private methods. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similarly, calling &lt;code&gt;instance_eval&lt;/code&gt; on an instance, e.g. &lt;code&gt;instance_name.instance_eval&lt;/code&gt; defines a method on that specific instance. No other instances of the class can access that method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1G5v0KPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1dowkh5rbcbd6ejtvbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1G5v0KPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1dowkh5rbcbd6ejtvbx.png" alt="Instance instance_eval" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;class_eval&lt;/code&gt;  evaluates the string or block in the context of the class, allowing you to reopen the class and define additional behavior on it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;instance_eval&lt;/code&gt; evaluates the string or block in the context of the receiver object, allowing you to run code as if we were inside a method of this object, giving access to its private methods. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQzzSkZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p1hai1bjeq40fhmq8qr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQzzSkZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p1hai1bjeq40fhmq8qr.png" alt="Difference in class_eval vs. instance_eval" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>metaprogramming</category>
    </item>
    <item>
      <title>SQL Basics (Zero to Hero)- Part 01</title>
      <author>Suresh Ayyanna</author>
      <pubDate>Sat, 15 Jan 2022 19:24:52 +0000</pubDate>
      <link>https://dev.to/sureshayyanna/sql-basics-zero-to-hero-part-01-53mi</link>
      <guid>https://dev.to/sureshayyanna/sql-basics-zero-to-hero-part-01-53mi</guid>
      <description>&lt;p&gt;&lt;strong&gt;SQL - Structured Query Language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A table is a collection of related data entries and it consists of columns and rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Eg: SELECT * FROM Customers;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt; It will retrieve all records data from customer table.&lt;/p&gt;

&lt;p&gt;Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most Important SQL Commands&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL SELECT Statement&lt;/strong&gt;&lt;br&gt;
The SELECT statement is used to select data from a database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--&amp;gt; SELECT column1, column2,...  FROM table_name;
--&amp;gt; SELECT * FROM table_name;
--&amp;gt; SELECT DISTINCT column1 FROM table_name        #Unique values
--&amp;gt; SELECT COUNT(DISTINCT Country) FROM Customers;  #Gives count

SELECT column1, column2, ...
FROM table_name
WHERE condition;

SELECT * FROM Customers
WHERE Country='India' OR Country='USA';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL ORDER BY Keyword&lt;/strong&gt;&lt;br&gt;
ORDER BY keyword is used to sort the result-set in ascending or descending order.&lt;br&gt;
The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Syntax:
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

Example:
SELECT * FROM Customers
ORDER BY Country DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL INSERT INTO Statement&lt;/strong&gt;&lt;br&gt;
The INSERT INTO statement is used to insert new records in a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);
Example:
INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Suresh', 'Bengaluru', 'India');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A field with a NULL value is a field with no value.&lt;/p&gt;

&lt;p&gt;If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_names
FROM table_name
WHERE column_name IS NULL;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL UPDATE Statement&lt;/strong&gt;&lt;br&gt;
The UPDATE statement is used to modify the existing records in a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Here, WHERE clause that determines how many records will be updated.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL DELETE Statement&lt;/strong&gt;&lt;br&gt;
The DELETE statement is used to delete existing records in a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM table_name WHERE condition;

DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM table_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL MIN() and MAX() Functions&lt;/strong&gt;&lt;br&gt;
The MIN() function returns the smallest value of the selected column.&lt;/p&gt;

&lt;p&gt;The MAX() function returns the largest value of the selected column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT MIN(column_name) FROM table_name WHERE condition;

SELECT MAX(column_name) FROM table_nameWHERE condition;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL COUNT(), AVG() and SUM() Functions&lt;/strong&gt;&lt;br&gt;
The COUNT() function returns the number of rows that matches a specified criterion.&lt;br&gt;
The AVG() function returns the average value of a numeric column. &lt;br&gt;
The SUM() function returns the total sum of a numeric column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT COUNT(column_name) FROM table_name WHERE condition;
SELECT AVG(column_name)   FROM table_name WHERE condition;
SELECT SUM(column_name)   FROM table_name WHERE condition;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL LIKE Operator&lt;/strong&gt;&lt;br&gt;
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.&lt;/p&gt;

&lt;p&gt;There are two wildcards often used in conjunction with the LIKE operator:&lt;/p&gt;

&lt;p&gt;The percent sign (%) represents zero, one, or multiple characters&lt;br&gt;
 The underscore sign (_) represents one, single character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column1, column2 FROM table_name
WHERE columnN LIKE pattern;

Example:
WHERE CustomerName LIKE 'a%'--&amp;gt;Finds any values that start with "a"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL IN Operator&lt;/strong&gt;&lt;br&gt;
The IN operator allows you to specify multiple values in a WHERE clause.&lt;/p&gt;

&lt;p&gt;The IN operator is a shorthand for multiple OR conditions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL BETWEEN Operator&lt;/strong&gt;&lt;br&gt;
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.&lt;/p&gt;

&lt;p&gt;The BETWEEN operator is inclusive: begin and end values are included.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

Example:
SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL GROUP BY Statement&lt;/strong&gt;&lt;br&gt;
The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".&lt;/p&gt;

&lt;p&gt;The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SQL HAVING Clause&lt;/strong&gt;&lt;br&gt;
The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**Comments**
Single line comments start with --.
Multi-line comments start with /* and end with */.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>sql</category>
      <category>testing</category>
      <category>database</category>
      <category>programming</category>
    </item>
    <item>
      <title>Component Communication in Angular (Parent to Child &amp; Child to Parent)</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sat, 15 Jan 2022 19:18:05 +0000</pubDate>
      <link>https://dev.to/this-is-angular/component-communication-parent-to-child-child-to-parent-5800</link>
      <guid>https://dev.to/this-is-angular/component-communication-parent-to-child-child-to-parent-5800</guid>
      <description>&lt;p&gt;Today we will learn one of the most important topic in Angular - how to communicate between two components when they have a parent child relationship. &lt;br&gt;
🔴 &lt;strong&gt;Prerequisite&lt;/strong&gt; 🔴&lt;br&gt;
You need to know (if not please follow the link associated)-&lt;br&gt;
🔵 What is a &lt;a href="https://dev.to/anubhab5/understanding-angular-component-2bpa"&gt;component&lt;/a&gt; in Angular&lt;br&gt;
🔵 How to create a &lt;a href="https://dev.to/anubhab5/creating-angular-component-129e"&gt;component&lt;/a&gt; in Angular&lt;/p&gt;

&lt;p&gt;Before we begin we need to understand what is the meaning of parent-child relation. Suppose you have a component called &lt;code&gt;P&lt;/code&gt;. In the template of the &lt;code&gt;P&lt;/code&gt; component you write selector of another component say &lt;code&gt;C&lt;/code&gt;. In this case the component &lt;code&gt;C&lt;/code&gt; is the child of the &lt;code&gt;P&lt;/code&gt; component or &lt;code&gt;P&lt;/code&gt; is the parent of &lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So now we know the theory so lets quickly setup our playground. &lt;/p&gt;

&lt;p&gt;We create two components, lets name the parent component as &lt;br&gt;
&lt;code&gt;movie-dashboard&lt;/code&gt; or easier way I would say &lt;code&gt;movie-dashboard&lt;/code&gt; component will act as the parent and &lt;code&gt;movie-table&lt;/code&gt; (our second component) will act as the child component. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The CLI commands&lt;/em&gt;:&lt;br&gt;
&lt;code&gt;ng g c movie-dashboard&lt;/code&gt;&lt;br&gt;
&lt;code&gt;ng g c movie-table&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EryjYb0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31n71uf6n8bpif5lq3we.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EryjYb0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31n71uf6n8bpif5lq3we.PNG" alt="Image description" width="798" height="351"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Project Folder Structure&lt;/em&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTY39Bhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt1yd9zwpl1qs6m3ofny.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTY39Bhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gt1yd9zwpl1qs6m3ofny.PNG" alt="Image description" width="422" height="439"&gt;&lt;/a&gt;&lt;br&gt;
Parent marked with yellow arrow 🟡&lt;br&gt;
Child marked with green arrow 🟢&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;app.component.html&lt;/code&gt; we paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;app-movie-dashboard&amp;gt;&amp;lt;/app-movie-dashboard&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;movie-dashboard.component.html&lt;/code&gt; file lets paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;movie-dashboard works!&amp;lt;/p&amp;gt;
&amp;lt;app-movie-table&amp;gt;&amp;lt;/app-movie-table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you start the application you should see the following output in the browser's localhost:4200&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b6lJkAR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c73804uy6rj7yuxlm6i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6lJkAR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c73804uy6rj7yuxlm6i.PNG" alt="Image description" width="307" height="176"&gt;&lt;/a&gt;&lt;br&gt;
So now our playground is ready. &lt;/p&gt;



&lt;p&gt;❔❔❔ Next big question what are we building ❔❔❔&lt;/p&gt;

&lt;p&gt;We will be building a simple flow where the parent component will be holding some movie names/ movie array (I will refer to as movie list from now on...). We will be &lt;strong&gt;passing&lt;/strong&gt; the movieList to the child component where we will be displaying the list in a tabular format. &lt;br&gt;
From the table the user can select a movie by clicking the button (&lt;em&gt;some user action&lt;/em&gt;)  which will be passed back to the parent (may be for some processing).&lt;/p&gt;

&lt;p&gt;So now the context is set. &lt;br&gt;
Lets see how we can pass data from parent to child. &lt;br&gt;
We pass data from parent to child using an &lt;strong&gt;Input decorator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Decorator&lt;/strong&gt;&lt;/em&gt; we already have come across when we defined a component, directive, pipe, module remember??? (&lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Directive&lt;/code&gt;, &lt;code&gt;@Pipe&lt;/code&gt;, &lt;code&gt;@NgModule&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;All the above decorators are placed on the top of a class. They are also called &lt;code&gt;Class Decorator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Input decorator is a property decorator. What does that mean???&lt;br&gt;
What ever variables you create directly inside a class (not inside a method) are all properties.&lt;br&gt;
And this Input decorator can be put only on the top of a property. So that is the reason it is called Property decorator (and a decorator always starts with @ so &lt;code&gt;@Input&lt;/code&gt;)&lt;br&gt;
Once you put a decorator it gets some special power like a super hero.&lt;br&gt;
So where should we put this decorator. Easy way I will tell you which will always stick to your mind -&lt;/p&gt;

&lt;p&gt;Which ever component will &lt;strong&gt;receive&lt;/strong&gt; the data should have the property decorated with &lt;code&gt;@Input&lt;/code&gt;. So in our case the &lt;code&gt;movie-table&lt;/code&gt; component will receive the data. So we need to create a property and mark it with the decorator by now you know which decorator we will use.&lt;br&gt;
So lets open the &lt;code&gt;movie-table.component.ts&lt;/code&gt; file and paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @Input()
  movieList: Array&amp;lt;string&amp;gt; = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---RBI7RZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dw4jekd8o0wghfg24p2v.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---RBI7RZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dw4jekd8o0wghfg24p2v.PNG" alt="Image description" width="667" height="407"&gt;&lt;/a&gt;&lt;br&gt;
You can see line number 11 is the &lt;code&gt;movieList&lt;/code&gt; property. We have put the &lt;code&gt;@Input()&lt;/code&gt; on the line number 10. &lt;br&gt;
Although you can put in front of the property as well like below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @Input() movieList: Array&amp;lt;string&amp;gt; = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So once we use this decorator on a property the property is able to hold the data we pass from parent.&lt;/p&gt;

&lt;p&gt;By now we got some one who will hold the data in the child. But how to pass the data from parent. For that lets go to the &lt;code&gt;movie-dashboard.component.ts&lt;/code&gt; file and paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  myFavoriteMovies = [
    {
      movieName: 'Encanto',
      genre: 'Animation'
    },
    {
      movieName: 'Spider-Man: No Way Home',
      genre: 'Action'
    },
    {
      movieName: "Harry Potter and the Sorcerer's Stone",
      genre: 'Fantasy'
    }
  ];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now come to the corresponding template file the &lt;code&gt;movie-dashboard.component.html&lt;/code&gt; and paste in the below code (by removing the old code present) -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;movie-dashboard works!&amp;lt;/p&amp;gt;
&amp;lt;app-movie-table [movieList]="myFavoriteMovies"&amp;gt;&amp;lt;/app-movie-table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have 2 points to note-&lt;br&gt;
1️⃣ The input decorator property we created in the child component is placed inside the square bracket []. Here &lt;code&gt;movieList&lt;/code&gt; is present inside the square bracket.&lt;br&gt;
2️⃣ The data which we want to pass to the child should be assigned to the above property. We use equal operator and the variable which contains the data. Here &lt;code&gt;myFavoriteMovies&lt;/code&gt; property contains the data which we have assigned.&lt;/p&gt;

&lt;p&gt;That's it now its ready &amp;amp; we learnt how to pass the data from parent to child. &lt;br&gt;
But wait I need to show it to you also right?&lt;br&gt;
So for that lets paste in the below code in the &lt;code&gt;movie-table.component.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Movie Name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr *ngFor="let movie of movieList"&amp;gt;
      &amp;lt;td&amp;gt;{{movie}}&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;input type="button" value="Select"&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see the output as -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0p_rQWqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ljqbupklkfw0kmidmnu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0p_rQWqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ljqbupklkfw0kmidmnu.PNG" alt="Image description" width="375" height="276"&gt;&lt;/a&gt;&lt;br&gt;
Wow! We are receiving the data in the child component.&lt;br&gt;
As I said earlier &lt;code&gt;movieList&lt;/code&gt; property will receive the data from the parent. Since we are passing an array we are just looping through it using &lt;a href="https://dev.to/anubhab5/understanding-built-in-angular-directives-part-5-gli"&gt;ngFor&lt;/a&gt; (If you are not aware of please have a look).&lt;/p&gt;

&lt;p&gt;Our First step is done - Passing data from parent to child.&lt;br&gt;
Now comes the second part. The user clicks the select button and the selected movie will be passed to the parent component.&lt;/p&gt;

&lt;p&gt;For that we will learn yet another new property decorator the&lt;br&gt;
Output decorator.&lt;/p&gt;

&lt;p&gt;So lets paste in the below code in the &lt;code&gt;movie-table.component.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @Output()
  movieSelectedEventEmitter =  new EventEmitter();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACqhlIyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri5leqwthc8pmxqwxk4k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACqhlIyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri5leqwthc8pmxqwxk4k.PNG" alt="Image description" width="880" height="509"&gt;&lt;/a&gt;&lt;br&gt;
So here we are adding a property &lt;code&gt;movieSelectedEventEmitter&lt;/code&gt; and decorating with Output decorator. And now what is the remaining part?&lt;br&gt;
When ever the user clicks a button it actually raises an event which will emitted back to the parent. We are actually creating an object of it. So the property becomes super powerful (like our action hero) and can emit/ send the data to the parent component.&lt;/p&gt;

&lt;p&gt;But we also need to capture the click event when the user clicks the button. So lets create a method which will be called when the user clicks the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  movieSelected(selectedMovie: string) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing in the body yet. We will fill it soon!&lt;/p&gt;

&lt;p&gt;In the corresponding template file lets paste the below code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;td&amp;gt;&amp;lt;input type="button" value="Select" 
(click)="movieSelected(movie)"&amp;gt;&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GOrZIOGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xo0kn4s15rb3rmv638cj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GOrZIOGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xo0kn4s15rb3rmv638cj.PNG" alt="Image description" width="880" height="293"&gt;&lt;/a&gt;&lt;br&gt;
All events we write inside a round bracket &lt;code&gt;()&lt;/code&gt;. &lt;br&gt;
Here &lt;code&gt;click&lt;/code&gt; is an inbuilt event.&lt;br&gt;
And once that event is fired/ triggered the function we pass just after the equal operator will be called.&lt;br&gt;
Now lets come back to the method which we just now created. And paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.movieSelectedEventEmitter.emit(selectedMovie);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkBQdKNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xejffysooao85ls3d1l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkBQdKNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xejffysooao85ls3d1l.PNG" alt="Image description" width="648" height="114"&gt;&lt;/a&gt;&lt;br&gt;
So what are we doing?&lt;br&gt;
On the Output property we created we are calling the emit (remember we assigned an EventEmitter object) and passing the data, in this case the selected movie name.&lt;/p&gt;

&lt;p&gt;But the job is still half done. In order to get the data in the parent we need to add few extra lines of code.&lt;br&gt;
So lets open the &lt;code&gt;movie-dashboard.component.html&lt;/code&gt; file and paste in the below code (and you can remove the old one)-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;movie-dashboard works!&amp;lt;/p&amp;gt;
&amp;lt;app-movie-table 
(movieSelectedEventEmitter)="selectedMovieToWatch($event)" 
[movieList]="myFavoriteMovies"&amp;gt;
&amp;lt;/app-movie-table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0xD40Kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/964ro26hyvk1t2md0age.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0xD40Kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/964ro26hyvk1t2md0age.PNG" alt="Image description" width="880" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are using the event emitter we created &lt;code&gt;movieSelectedEventEmitter&lt;/code&gt; (or the Output property inside a round bracket since its an event, same formula as the click we used few steps back) and assigning it to a method which will be called when the event is triggered (exactly same concept/ way as the click event, the only difference is click is an inbuilt one and this is a custom/ user-defined one)&lt;/p&gt;

&lt;p&gt;So lets define the &lt;code&gt;selectedMovieToWatch&lt;/code&gt; method.&lt;br&gt;
In the movie-dashboard.component file lets paste the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  selectedMovieToWatch(data: string) {
    debugger;
    alert(data);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here data will receive the value which we passed from the child.&lt;br&gt;
That's it. Now lets look at the output -&lt;br&gt;
I clicked the second item (trust me)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2I_XAG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od2bhgxw3709d0lqyr6q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2I_XAG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od2bhgxw3709d0lqyr6q.PNG" alt="Image description" width="586" height="271"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVkyM40l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1vmsdla6jr0hw81hyht.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVkyM40l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1vmsdla6jr0hw81hyht.PNG" alt="Image description" width="880" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this brings to the end!!! I know it was a long post.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#highlights"&gt;
  &lt;/a&gt;
  Highlights
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Input&lt;/code&gt;&lt;br&gt;
1️⃣ Need to decorate a property in the &lt;strong&gt;child component&lt;/strong&gt; as @Input()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @Input()
  movieList: Array&amp;lt;string&amp;gt; = [];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2️⃣ In the Parent component where the child selector is used need to add the same input property in Square Bracket [] and assign the value to be passed&lt;br&gt;
&lt;code&gt;[movieList]="myFavoriteMovies"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Output&lt;/code&gt;&lt;br&gt;
1️⃣ Need to mark a property in the child component with the Output decorator and assign an EventEmitter Object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @Output()
  movieSelectedEventEmitter = new EventEmitter();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2️⃣ In the parent we need to add the event and assign to a method&lt;br&gt;
&lt;code&gt;(movieSelectedEventEmitter)="selectedMovieToWatch($event)"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading the post&lt;/p&gt;

&lt;p&gt;If you liked it please do &lt;em&gt;like&lt;/em&gt; ❤️ &lt;em&gt;share&lt;/em&gt; 💞 and &lt;em&gt;comment&lt;/em&gt; 🧡.&lt;/p&gt;

&lt;p&gt;Coming up more topics on Angular.&lt;br&gt;
So stay tuned.&lt;/p&gt;

&lt;p&gt;I will be &lt;a href="https://twitter.com/Anubhab_0905"&gt;tweeting&lt;/a&gt; more on &lt;code&gt;Angular&lt;/code&gt; &lt;code&gt;JavaScript&lt;/code&gt; &lt;code&gt;TypeScript&lt;/code&gt; &lt;code&gt;CSS&lt;/code&gt;&lt;br&gt;
So hope to see you there too 😃&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>components</category>
      <category>programming</category>
    </item>
    <item>
      <title>Let's talk about Docker</title>
      <author>JTK</author>
      <pubDate>Sat, 15 Jan 2022 19:14:20 +0000</pubDate>
      <link>https://dev.to/heyjtk/lets-talk-about-docker-1fad</link>
      <guid>https://dev.to/heyjtk/lets-talk-about-docker-1fad</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is equal parts actually about Docker, and the hilarity of being a woman on the internet in tech.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-knew-anyone-read-my-tweets"&gt;
  &lt;/a&gt;
  Who knew anyone read my tweets
&lt;/h2&gt;

&lt;p&gt;It is funny to me that I would get any kind of attention on Twitter, I don't post for engagement, I barely write about tech, and I'm otherwise barely on social media at all. I post on FB every six or so months so my out of state relatives know I'm alive and that's about it.&lt;/p&gt;

&lt;p&gt;So I was certainly not expecting an offhand tweet complaining about Docker to get any kind of attention. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ro5YUfbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1380942316832182277/0bAV1sy3_normal.jpg" alt="JTK profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        JTK
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/heyjtk"&gt;@heyjtk&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The longer I use Docker, the more I think it is lowkey terrible and we are all lemmings for going along with it becoming this popular
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:42 PM - 13 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1481652902913458184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1481652902913458184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1481652902913458184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
 
&lt;h2&gt;
  &lt;a href="#what-are-my-qualifications-to-hate-docker"&gt;
  &lt;/a&gt;
  What are my qualifications to hate Docker
&lt;/h2&gt;

&lt;p&gt;I never knew that in order to have opinions about Docker I would need to announce my pedigree, but apparently I do. &lt;/p&gt;

&lt;p&gt;To my utter astonishment, someone on the Docker team found their way to my thread to call me a junior without the background to appreciate the problem set Docker addresses. And then asked to be unsubscribed like a &lt;em&gt;heeeelllllla&lt;/em&gt; boomer. That part made me laaaaaugh. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--aN3HRMKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1481072550570381315/hMBPQ9K-_normal.jpg" alt="Solomon Hykes profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Solomon Hykes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @solomonstre
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/celkamada"&gt;@celkamada&lt;/a&gt; &lt;a href="https://twitter.com/h3techdev"&gt;@h3techdev&lt;/a&gt; &lt;a href="https://twitter.com/dswersky"&gt;@dswersky&lt;/a&gt; &lt;a href="https://twitter.com/heyJTK"&gt;@heyJTK&lt;/a&gt; Look I get it. When I was a baby programmer I also thought the tools written by my elders 10 years before, to solve problems I had never experienced, were trash. So you know what I did? I wrote better tools. You should go do that… after unsubscribing me from this dumb thread. 🙏
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:39 AM - 14 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1481893730684526592" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1481893730684526592" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1481893730684526592" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Anyway here are my qualifications: Have been in this field for many years, made senior in two and a half, have worked on giant gnarly legacy code bases and alternately built multiple products out of nothing to be hugely successful. &lt;/p&gt;

&lt;p&gt;I am a code mentor and have volunteered teaching code, I am (as of recently) a paid guest writer for a database company, and managed to get straight As in senior year of a Software Engineering &amp;amp; Security degree while also working full time. My GPA was something like 3.8 and my major GPA was 3.9. &lt;/p&gt;

&lt;p&gt;In one past role, I was so brutally effective that I received an off-cycle promotion from Software Engineer, not to Senior Software Engineer but directly to Dev Lead. &lt;/p&gt;

&lt;p&gt;So...yeah. I am both educated and experienced, and as entitled to my opinion on Docker as anyone. (Although hot take, anyone can hate Docker for any time and for any reason, who cares lol). &lt;/p&gt;

&lt;p&gt;Most notably, I actually had to spend somewhat extensive time using a dockerized development environment when at a past job, we had dependencies with no good MacPorts option that did not run on Mac period. In that role, I was also responsible for software that dealt with tracing vulnerabilities through containerized environments which introduces a special, interesting set of challenges. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-actually-think-of-docker"&gt;
  &lt;/a&gt;
  What I actually think of Docker
&lt;/h2&gt;

&lt;p&gt;Surprise surprise, twitter is not a tool of nuance. There were more to my comments than "Docker is terrible", naturally. &lt;/p&gt;

&lt;p&gt;I made the mistake of wondering why this hit such a nerve with people and googled latest Docker tweets period, thinking surely I wasn't the only one with these issues. (Bad idea). Aaaaaaand that's when I found the subtweets. They centered on a few themes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everyone in the discussion were junior engineers 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wy70c3Q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqr4fnlyvlamr9nluoij.png" alt="Someone suggesting everyone in the discussion is junior" width="466" height="207"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ctupJccZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx9zre9s046ekh7lo1fd.png" alt="Guy erroneously concludes I'm a young engineer who doesn't know what it was like before Docker" width="484" height="154"&gt;
&lt;/li&gt;
&lt;li&gt;No one was providing any concrete reasons for disliking it (spoiler, I did and will again) &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VumWCuXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0513brnw7ti3tstwhd4t.png" alt="Guy demands real reasons" width="467" height="62"&gt;
&lt;/li&gt;
&lt;li&gt;If you aren't using Docker in x way/on y OS its your fault it is miserable (ok lol) &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fu9tSiZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwxcbwk95cj96xe9ed6b.png" alt="Man asks if I'm using Docker directly" width="505" height="144"&gt;
&lt;/li&gt;
&lt;li&gt;People goading me "what's your alternative then"
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUTrraS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nus0844mk1ckfr8lm1lx.png" alt="Guy asks what my alternative is" width="429" height="50"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The internet is a wild place lol. Imagine me tweeting "I don't like broccoli" and a bunch of nerds demanding I explain why or can't make that comment. Or saying I can only dislike broccoli if I mention that cauliflower is a valid alternative. Or say "it is your fault you don't like broccoli you should have been cooking it with this technique, DUH!" &lt;/p&gt;

&lt;p&gt;But as explained before, &lt;em&gt;I AM ACTUALLY PERFECTLY QUALIFIED TO HAVE BOTH THE OPINION, AND A RATIONALE BEHIND IT&lt;/em&gt;. The internet neckbeards I'm sure will be so relieved to hear it (not).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For starters, junior developers finding Docker un-intuitive and with iffy docs is also my problem, since what junior developers struggle with rolls downhill to me as their senior&lt;/li&gt;
&lt;li&gt;I have consistently found the cli poor, things I need to do regularly are not prefab commands or require large numbers of fiddly flags, I need to wind up making aliases for tasks I find common enough that they warrant a built-in command and it seems like something so easy to fix if you care about dx at all&lt;/li&gt;
&lt;li&gt;Resource consumption and old volumes hanging around remains annoying&lt;/li&gt;
&lt;li&gt;I find the docs very sparse, my particular criticism with them could probably be addressed by a 1-2 liner in various sections just showing one vanilla example of cli options. My experience in the docs is being redirected around like a pinball and eventually finding what I need outside of the official docs. If the rest of the internet is better than you are at explaining your product, imo that's an issue &lt;/li&gt;
&lt;li&gt;In light of I think, two Docker team members finding their way into my thread and being obnoxious, I now have a personal animus that I didn't even have originally so thanks guys lmao &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also have a criticism much more meta than Docker, and hate this opinion all you want but oh well:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software is bad. Computers were a mistake&lt;/strong&gt;, (To quote an old coworker). The less software my app depends on, the happier I am - and that includes Docker.&lt;/p&gt;

&lt;p&gt;Particularly for my local dev setup, I tend to find that Docker wastes much more of my time than it saves. Tending to this tool and its various needs takes time I don't have. I'm busy, I'm sure if I had time to plumb the depths of the Docker documentation I could come up with a super cool setup that addresses every little thing about it that I don't like. For me personally, I have NEVER liked the "f@#$ you figure it out or you don't deserve the tool" mindset. &lt;/p&gt;

&lt;p&gt;Give me things that work seamlessly. I have s@#$ to do. &lt;/p&gt;

&lt;p&gt;I don't want to toil away customizing a linux box, give me an already usable computer. If you like that, great, but not everyone does. With more hours in the day I'm sure I could sit down with Docker and get into the weeds but I don't have time and for a tool so popular I don't feel like I should need to. Containerization is an area I have experience but not one I wish to specialize in, I'm hardly the best person around to come up with a complex Docker setup and feeling like I have to know it to do what used to be just running a flask app on localhost seems &lt;em&gt;extremely&lt;/em&gt; overwrought.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-criticisms-ill-address"&gt;
  &lt;/a&gt;
  Other criticisms I'll address
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;If you like Docker&lt;/strong&gt;, from the bottom of my heart I think that's awesome. My least favorite use case (local dev) emerged in the comments that equally frustrated and delighted people. I think its great that we all are so different and have different likes and I'm happy Docker works for some people &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Things were bad before Docker&lt;/strong&gt; - perhaps they were, some of it I wound up liking better for whatever reason. I've worked with Vagrant, VirtualBox, deploying to vms up on GCP, and whatever else. Maybe my preference just settled on those. I certainly miss local dev without Docker to mess with. It doesn't need to be how everyone feels &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Docker has its place&lt;/strong&gt; - I agree with you! Yeah, Twitter is not great for nuance but sometimes I have really enjoyed Docker being in the mix&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Come up with something better then&lt;/strong&gt; - well that's ridiculous. Returning to broccoli, clearly I can't invent a better vegetable. It is beyond absurd to imagine I can only have an opinion on Docker if I have a competing container solution's software ready to go. News flash, there are plenty of things made by people smarter than you or I that we still won't like for whatever reason &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-hilarious-thing-about-this-experience"&gt;
  &lt;/a&gt;
  The hilarious thing about this experience
&lt;/h2&gt;

&lt;p&gt;No one expects the internet to be nice to them, let's be real. But in the negative commentary I will say, themes certainly emerged. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZTPXYR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FJFk6XJXoAwPnDS.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ro5YUfbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1380942316832182277/0bAV1sy3_normal.jpg" alt="JTK profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        JTK
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/heyjtk"&gt;@heyjtk&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Funny to me that I would be expected to have what, only agreeable opinions on tools I use in my profession? &lt;br&gt;&lt;br&gt;Feels like the tech equivalent of being catcalled to smile more &lt;br&gt;&lt;br&gt;Also as someone with software out in the world, yes there are things wrong with it that annoy ppl 1/ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:46 PM - 14 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1482076709927141380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1482076709927141380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1482076709927141380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I'd love to never have to talk about this again, but it was hard not to see a sexist tilt to the replies. For starters, seemed supremely random that so many people wanted to discredit me by calling me a junior and implying that that could completely explain me not liking Docker.&lt;/p&gt;

&lt;p&gt;It is not difficult to find the podcasts I've appeared on, my long held Senior or higher title has remained in my bio for years. Disagree with me all you want but you do not have a leg to stand on if you want to come at my seniority. Which is fortunate, because honestly as a newer and less secure dev maybe a zillion dudes telling me I have no idea what I'm doing would have bothered me. &lt;/p&gt;

&lt;p&gt;That critique is even sillier if you unpack it: if I were junior would I not have permission to dislike technology? The software I admire makes complex things simple, so the highest compliment I could give Docker would be that its a good tool for junior devs. Some of y'all really have it twisted on the topic of juniors not understanding software and how that reflects on the software. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways-and-positives"&gt;
  &lt;/a&gt;
  Takeaways and positives
&lt;/h2&gt;

&lt;p&gt;Despite some annoying replies (admittedly tame for the internet at the end of the day) I actually got some cool takeaways from this experience.&lt;/p&gt;

&lt;p&gt;I had three people reach out to me about container tooling they want me to try, I'm going to set up three meetings next week for things I'd previously never heard of - considering my work uses Docker if any of them seem good I'd be thrilled to introduce them to our tech stack if they make Docker less of a headache. &lt;/p&gt;

&lt;p&gt;A ton of people also responded in earnest with cases they love Docker for, which made me happy! Trust me, no one is happier than I am that fewer people feel how I do on Docker. &lt;/p&gt;

&lt;p&gt;A lot of people just seemed relieved that anyone else struggled with this supremely popular tool that they hadn't gelled with. &lt;/p&gt;

&lt;p&gt;And finally, there were some good-faith replies by people who really like Docker that had suggestions on things to make the experience better, or with alternatives - many I'd never heard of and sound &lt;strong&gt;extremely&lt;/strong&gt; interesting and I'm really stoked to get into further. &lt;/p&gt;

&lt;p&gt;At the end of the day, willing to write it off as a funny fluke and move along. But did teach me a valuable lesson that sometimes when you yell into the void, the void yells back. &lt;/p&gt;

</description>
      <category>softwareengineering</category>
      <category>docker</category>
    </item>
    <item>
      <title>Cephadm(containerized) ile Ceph(Pacific) Storage Kurulumu on Linux</title>
      <author>Fatih ASLAN</author>
      <pubDate>Sat, 15 Jan 2022 18:56:41 +0000</pubDate>
      <link>https://dev.to/aslanfatih/cephadmcontainerized-ile-cephpacific-storage-kurulumu-on-linux-2dam</link>
      <guid>https://dev.to/aslanfatih/cephadmcontainerized-ile-cephpacific-storage-kurulumu-on-linux-2dam</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bt-AMUA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1043s4ieikgv6yfaq5kc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bt-AMUA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1043s4ieikgv6yfaq5kc.png" alt="Image description" width="880" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cephadm octopus&lt;/strong&gt; versiyonu ile gelmiş olup tamamen &lt;strong&gt;container&lt;/strong&gt; yapıda &lt;strong&gt;cluster&lt;/strong&gt; ayağa kaldrımaktadır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ceph is the future of storage&lt;/strong&gt; : Açık kaynak kodlu, dağıtık, yazılım tabanlı &lt;strong&gt;storage&lt;/strong&gt; sistemidir. &lt;strong&gt;Object&lt;/strong&gt;, &lt;strong&gt;block&lt;/strong&gt; ve &lt;strong&gt;file-level storage&lt;/strong&gt; desteklemektedir. Geleneksel depolama sistemlerinin kısıtlarına karşın &lt;strong&gt;Ceph&lt;/strong&gt; ölçeklenebilir, esnek ve donanım bağımsızlığı sayesinde ekonomikliliğide beraberinde getirir. Ayrıca dağıtık yapıda çalışması sayesinde olası bir arızayı karşın otomatik onarım işlemlerini başlatması, &lt;strong&gt;exabyte&lt;/strong&gt; seviyelerine kadar çıkabilmesi ve &lt;strong&gt;3-in-1&lt;/strong&gt; protokol desteği &lt;strong&gt;Ceph&lt;/strong&gt;’i popüler hale getirmiştir.&lt;/p&gt;

&lt;p&gt;Yapımız kısaca aşağıdaki gibi; &lt;strong&gt;1 node Ceph&lt;/strong&gt; servisleri(&lt;strong&gt;Monitör&lt;/strong&gt;, &lt;strong&gt;Management&lt;/strong&gt;, &lt;strong&gt;Rados Gateway&lt;/strong&gt;, &lt;strong&gt;Admin client&lt;/strong&gt;) + &lt;strong&gt;3 OSD&lt;/strong&gt; node toplam &lt;strong&gt;4 node&lt;/strong&gt;. Her &lt;strong&gt;OSD node&lt;/strong&gt;’sinde &lt;strong&gt;storage cluster&lt;/strong&gt; için 3’er ayrı disk(&lt;strong&gt;/dev/sdb&lt;/strong&gt;, &lt;strong&gt;dev/sdc&lt;/strong&gt;, &lt;strong&gt;dev/sdd&lt;/strong&gt; gibi). Siz kendi yapınız için yatayda &lt;strong&gt;OSD&lt;/strong&gt; ve dikeyde disk yapınızı çoğaltabilirsiniz.&lt;/p&gt;

&lt;p&gt;İlk olarak &lt;strong&gt;docker&lt;/strong&gt; dahil gerekli paketleri indirip, kuralım. Bütün &lt;strong&gt;Node&lt;/strong&gt;‘lerde çalıştırılmalıdır.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;fsSL&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg&lt;/span&gt;
&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;tee&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/dev/&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;apt&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;apt&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;chrony&lt;/span&gt; &lt;span class="nx"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pip&lt;/span&gt; &lt;span class="nx"&gt;python3&lt;/span&gt; &lt;span class="nx"&gt;ca&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;certificates&lt;/span&gt; &lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="nx"&gt;gnupg&lt;/span&gt; &lt;span class="nx"&gt;lsb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt; &lt;span class="nx"&gt;lvm2&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ce&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ce&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt; &lt;span class="nx"&gt;containerd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;vi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;chrony&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;chrony&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="nx"&gt;ntp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;        &lt;span class="nx"&gt;iburst&lt;/span&gt; &lt;span class="nx"&gt;maxsources&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ntp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt; &lt;span class="nx"&gt;iburst&lt;/span&gt; &lt;span class="nx"&gt;maxsources&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ntp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt; &lt;span class="nx"&gt;iburst&lt;/span&gt; &lt;span class="nx"&gt;maxsources&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ntp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt; &lt;span class="nx"&gt;iburst&lt;/span&gt; &lt;span class="nx"&gt;maxsources&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="nx"&gt;$NTP_SERVER&lt;/span&gt; &lt;span class="nx"&gt;iburst&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;systemctl&lt;/span&gt; &lt;span class="nx"&gt;restart&lt;/span&gt; &lt;span class="nx"&gt;chrony&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;
&lt;span class="nx"&gt;chronyc&lt;/span&gt; &lt;span class="nx"&gt;sources&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$USER ALL = (root) NOPASSWD:ALL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;tee&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;sudoers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$USER&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;chmod&lt;/span&gt; &lt;span class="mi"&gt;0440&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;sudoers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;vi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;hosts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.144&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt;
&lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.145&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt;
&lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.146&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdy&lt;/span&gt;
&lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.147&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Admin Node&lt;/strong&gt;‘de çalıştırılır(&lt;strong&gt;ceph-yonetici&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;keygen&lt;/span&gt;
&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt;
&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt;
&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdy&lt;/span&gt;
&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;vi&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.ssh/&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;$USER&lt;/strong&gt; parametresi anlık kullanıcı ile değiştirin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt;
   &lt;span class="nx"&gt;Hostname&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt;
   &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;
&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt;
   &lt;span class="nx"&gt;Hostname&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt;
   &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;
&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdy&lt;/span&gt;
   &lt;span class="nx"&gt;Hostname&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdy&lt;/span&gt;
   &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;
&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdz&lt;/span&gt;
   &lt;span class="nx"&gt;Hostname&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdz&lt;/span&gt;
   &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;cephadm&lt;/strong&gt;‘yi kuralım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;silent&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//download.ceph.com/keys/release.asc | sudo apt-key add -&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//download.ceph.com/debian-pacific&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;apt&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="nx"&gt;cephadm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;$USER&lt;/strong&gt; parametresini anlık kullanıcı(şifresiz &lt;strong&gt;root&lt;/strong&gt; yetkisine sahip olan bir kullanıcı) ile değiştirin, &lt;strong&gt;--mon-ip&lt;/strong&gt; ceph-yonetici &lt;strong&gt;ip&lt;/strong&gt;‘si olmalıdır.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;cephadm&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;mon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt; &lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.144&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;initial&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dashboard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;initial&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dashboard&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="mi"&gt;1234&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;network&lt;/span&gt; &lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;parametre&lt;/strong&gt; değerlerini anlamak adına &lt;a href="https://docs.ceph.com/en/latest/cephadm/install/"&gt;https://docs.ceph.com/en/latest/cephadm/install/&lt;/a&gt; linkini kontrol edebilirsiniz.&lt;/p&gt;

&lt;p&gt;Servisleri gözlemleyebilirsiniz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;systemctl&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pager&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Ceph&lt;/strong&gt; komutlarını yürütmek için yukarıdaki &lt;strong&gt;bootstrap&lt;/strong&gt; çıktısında verilen “&lt;strong&gt;You can access the Ceph CLI with:&lt;/strong&gt;” satırını kullanabilirsiniz. İlgili komut sizi direk admin &lt;strong&gt;container&lt;/strong&gt;‘a bağlayacaktır.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;sbin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cephadm&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;fsid&lt;/span&gt; &lt;span class="nx"&gt;d0232fa8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d5b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nx"&gt;fba&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="nx"&gt;b487996ad5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyring&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ama biz direk &lt;strong&gt;host&lt;/strong&gt; üzerinden de komutları yürütebilmek için aşağıdaki yöntem/leri izleyebiliriz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sudo &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cephadm shell -- ceph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="nx"&gt;radosgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cephadm shell -- radosgw-admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alias sudo='sudo '&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.bashr&lt;/span&gt;&lt;span class="err"&gt;c
&lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alias ceph='cephadm shell -- ceph'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.bashr&lt;/span&gt;&lt;span class="err"&gt;c
&lt;/span&gt;&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alias radosgw-admin='cephadm shell -- radosgw-admin'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.bashr&lt;/span&gt;&lt;span class="err"&gt;c
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ya da&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cephadm&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt; &lt;span class="nx"&gt;pacific&lt;/span&gt;
&lt;span class="nx"&gt;cephadm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ya da&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;apt&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ceph-yonetici host&lt;/strong&gt;‘unu &lt;strong&gt;_admin&lt;/strong&gt;‘e ek olarak &lt;strong&gt;mon&lt;/strong&gt; ve &lt;strong&gt;mgr&lt;/strong&gt; olarak ta etiketleyelim çünkü servisler o &lt;strong&gt;host&lt;/strong&gt; üzerinde ayağa kalktı.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt; &lt;span class="nx"&gt;mon&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ya&lt;/span&gt; &lt;span class="nx"&gt;da&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cephadm&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt; &lt;span class="nx"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt; &lt;span class="nx"&gt;mgr&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ya&lt;/span&gt; &lt;span class="nx"&gt;da&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cephadm&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt; &lt;span class="nx"&gt;mgr&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aşağıdaki komutlar ile &lt;strong&gt;cluster&lt;/strong&gt;‘ın durumunu inceleyebilirsiniz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;device&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;ps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi diğer &lt;strong&gt;host&lt;/strong&gt;‘ları(&lt;strong&gt;OSD&lt;/strong&gt;) &lt;strong&gt;cluster&lt;/strong&gt;‘a dahil edeceğiz ama öncesinde &lt;strong&gt;public key&lt;/strong&gt;‘i dağıtalım. $&lt;strong&gt;USER&lt;/strong&gt; parametresi anlık kullanıcı ile değiştirin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pub&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt;
&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pub&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdy&lt;/span&gt;
&lt;span class="nx"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pub&lt;/span&gt; &lt;span class="nx"&gt;$USER&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;‘ları dahil edelim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt; &lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.145&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdy&lt;/span&gt; &lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.146&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdz&lt;/span&gt; &lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.147&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi tekrar &lt;strong&gt;cluster&lt;/strong&gt;‘ın durumunu inceleyin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;device&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;ps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi ise &lt;strong&gt;device ls&lt;/strong&gt; ile &lt;strong&gt;OSD node&lt;/strong&gt;‘lerinde listelediğimiz diskleri &lt;strong&gt;OSD&lt;/strong&gt; olarak aynı anada ekleyelim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;devices&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ya da özellikle işaret ederek de ekleyebiliriz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;daemon&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Object storage&lt;/strong&gt; kullanımı için &lt;strong&gt;Rados GW&lt;/strong&gt;‘yi aktif edelim. &lt;strong&gt;rgw default port&lt;/strong&gt;’u &lt;strong&gt;80&lt;/strong&gt;’dir ve yine &lt;strong&gt;default&lt;/strong&gt;’ta &lt;strong&gt;2 daemon up&lt;/strong&gt; eder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;rgw&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ya&lt;/span&gt; &lt;span class="nx"&gt;da&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;rgw&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--placement=label:rgw count-per-host:1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7480&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt; &lt;span class="nx"&gt;rgw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ek olarak &lt;strong&gt;monitor&lt;/strong&gt;, &lt;strong&gt;manager&lt;/strong&gt; ve &lt;strong&gt;radosgw daemon&lt;/strong&gt; eklemek isterseniz,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;mon&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;placement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ceph-yonetici,ceph-osdx,ceph-osdy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;mgr&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;placement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ceph-yonetici,ceph-osdx,ceph-osdy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;rgw&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;placement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ceph-yonetici,ceph-osdx,ceph-osdy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Daemon&lt;/strong&gt; - &lt;strong&gt;Servis&lt;/strong&gt; silmek isterseniz,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="nx"&gt;rgw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;orch&lt;/span&gt; &lt;span class="nx"&gt;daemon&lt;/span&gt; &lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="nx"&gt;rgw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Ceph Dashboard&lt;/strong&gt;‘dan ve &lt;strong&gt;API&lt;/strong&gt;‘den &lt;strong&gt;radosgw&lt;/strong&gt;‘ye erişebilmek için kullanıcı oluşturabilirsiniz fakat &lt;strong&gt;default&lt;/strong&gt;‘ta var olarak gelir. &lt;strong&gt;Changed $ACCESS_KEY&lt;/strong&gt; and &lt;strong&gt;$SECRET_KEY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;dashboard&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;radosgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cephdash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ceph DashBoard2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;sbin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cephadm&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;fsid&lt;/span&gt; &lt;span class="nx"&gt;d0232fa8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d5b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nx"&gt;fba&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="nx"&gt;b487996ad5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyring&lt;/span&gt;
&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;$ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/tmp/&lt;/span&gt;&lt;span class="nx"&gt;access_key&lt;/span&gt;
&lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;$SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/tmp/&lt;/span&gt;&lt;span class="nx"&gt;secret_key&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;dashboard&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;access_key&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;dashboard&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;secret_key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Pool&lt;/strong&gt;‘umuzu oluşturalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt; &lt;span class="nx"&gt;crush&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rgw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="nx"&gt;replicated&lt;/span&gt; &lt;span class="nx"&gt;replicated_rule&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt; &lt;span class="nx"&gt;enable&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rgw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="nx"&gt;rgw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Swift user&lt;/strong&gt; oluşturuyorum, siz isterseniz &lt;strong&gt;s3 user&lt;/strong&gt; oluşturabilirsiniz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;radosgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ceph-demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ceph Demo Kurulum Kullanıcısı&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;subuser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;swift&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;swift&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="nx"&gt;full&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;radosgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ceph-demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;modify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uygulama bağlantısı için kullanılabilecek bilgiler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;swift&lt;/span&gt;
&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$SECRET_KEY&lt;/span&gt;
&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//10.10.10.144:7480/swift/v1&lt;/span&gt;
&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//10.10.10.144:7480/auth/1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kullanışlı komutlar,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;df&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;osd&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="nx"&gt;health&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;radosgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;
&lt;span class="nx"&gt;sudo&lt;/span&gt; &lt;span class="nx"&gt;radosgw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nx"&gt;d0232fa8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;d5b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nx"&gt;fba&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="nx"&gt;b487996ad5&lt;/span&gt;
    &lt;span class="nx"&gt;health&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HEALTH_OK&lt;/span&gt;

  &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;daemons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quorum&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdz&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;mgr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;yonetici&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uwijtu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;since&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;standbys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ceph&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;osdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;znrgdv&lt;/span&gt;
    &lt;span class="nx"&gt;osd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="nx"&gt;osds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;since&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;since&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;rgw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;daemons&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;zones&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nx"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;137&lt;/span&gt; &lt;span class="nx"&gt;pgs&lt;/span&gt;
    &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.1&lt;/span&gt; &lt;span class="nx"&gt;KiB&lt;/span&gt;
    &lt;span class="nx"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;892&lt;/span&gt; &lt;span class="nx"&gt;MiB&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="nx"&gt;GiB&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="nx"&gt;GiB&lt;/span&gt; &lt;span class="nx"&gt;avail&lt;/span&gt;
    &lt;span class="nx"&gt;pgs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="mi"&gt;137&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;clean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ref: &lt;br&gt;
&lt;a href="https://docs.ceph.com/en/pacific/cephadm/install/#enable-ceph-cli"&gt;https://docs.ceph.com/en/pacific/cephadm/install/#enable-ceph-cli&lt;/a&gt;&lt;br&gt;
&lt;a href="https://chowdera.com/2021/04/20210411052419702x.html"&gt;https://chowdera.com/2021/04/20210411052419702x.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/akhal3d96/exploring-ceph-in-a-multi-node-setup-3c8h"&gt;https://dev.to/akhal3d96/exploring-ceph-in-a-multi-node-setup-3c8h&lt;/a&gt;&lt;br&gt;
&lt;a href="https://achchusnulchikam2.medium.com/deploy-ceph-cluster-with-cephadm-on-centos-8-257b300e7b42"&gt;https://achchusnulchikam2.medium.com/deploy-ceph-cluster-with-cephadm-on-centos-8-257b300e7b42&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cephadm</category>
      <category>linux</category>
      <category>container</category>
      <category>ceph</category>
    </item>
    <item>
      <title>Rails Setup Script Improvements</title>
      <author>Steve Polito</author>
      <pubDate>Sat, 15 Jan 2022 18:43:09 +0000</pubDate>
      <link>https://dev.to/stevepolitodesign/rails-setup-script-improvements-3ck3</link>
      <guid>https://dev.to/stevepolitodesign/rails-setup-script-improvements-3ck3</guid>
      <description>&lt;p&gt;Rails ships with a &lt;a href="https://github.com/rails/rails/pull/15189"&gt;setup script&lt;/a&gt; that automates bootstrapping a new application, but did you know that you're free to edit this script? In this quick tutorial, I'll show you how you can improve the default Rails setup script to create a more consistent and helpful onboarding experience for folks on your team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;Simply clone this repo and run &lt;code&gt;./bin/setup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2asYF4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/stevepolitodesign/rails-setup-script-improvements/main/public/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2asYF4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/stevepolitodesign/rails-setup-script-improvements/main/public/demo.gif" alt="Demo" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-update-the-command-that-prepares-the-database"&gt;
  &lt;/a&gt;
  Step 1. Update the Command That Prepares the Database
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;--- a/bin/setup
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/bin/setup
&lt;/span&gt;&lt;span class="p"&gt;@@ -23,7 +23,7 @@&lt;/span&gt; FileUtils.chdir APP_ROOT do
   # end

   puts "\n== Preparing database =="
&lt;span class="gd"&gt;-  system! "bin/rails db:prepare"
&lt;/span&gt;&lt;span class="gi"&gt;+  system! "bin/rails db:reset"
&lt;/span&gt;
   puts "\n== Removing old logs and tempfiles =="
   system! "bin/rails log:clear tmp:clear"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running &lt;a href="https://edgeguides.rubyonrails.org/active_record_migrations.html#resetting-the-database"&gt;bin/rails db:reset&lt;/a&gt; will do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;bin/rails db:drop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;bin/rails db:setup&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://edgeguides.rubyonrails.org/active_record_migrations.html#setup-the-database"&gt;bin/rails db:setup&lt;/a&gt; command will do the following:&lt;/li&gt;
&lt;li&gt;Create the database.&lt;/li&gt;
&lt;li&gt;Load the schema.&lt;/li&gt;
&lt;li&gt;Seed the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;This ensures the database will always be in the same state after running &lt;code&gt;./bin/setup&lt;/code&gt;. This is because &lt;code&gt;bin/rails db:prepare&lt;/code&gt; will not seed the database if the database already exists which could result in inconsistent outcomes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-a-job-to-seed-the-database"&gt;
  &lt;/a&gt;
  Step 2. Create a Job to Seed the Database
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/jobs/database_seeder_job.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DatabaseSeederJob&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationJob&lt;/span&gt;
  &lt;span class="n"&gt;queue_as&lt;/span&gt; &lt;span class="ss"&gt;:default&lt;/span&gt;

  &lt;span class="no"&gt;DEFAULT_USER_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"user@example.com"&lt;/span&gt;
  &lt;span class="no"&gt;DEFAULT_USER_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;
    &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;create_default_user&lt;/span&gt;
      &lt;span class="n"&gt;create_users&lt;/span&gt;
      &lt;span class="n"&gt;create_posts&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_default_user&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="no"&gt;DEFAULT_USER_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="no"&gt;DEFAULT_USER_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;password_confirmation: &lt;/span&gt;&lt;span class="no"&gt;DEFAULT_USER_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_users&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="s2"&gt;"user-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="no"&gt;DEFAULT_USER_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;password_confirmation: &lt;/span&gt;&lt;span class="no"&gt;DEFAULT_USER_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_posts&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Title for post &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,"&lt;/span&gt;
        &lt;span class="ss"&gt;body: &lt;/span&gt;&lt;span class="s2"&gt;"Body for post &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# db/seeds.rb&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;== Seeding database =="&lt;/span&gt;
&lt;span class="no"&gt;DatabaseSeederJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We could run all the commands from each method inline in &lt;code&gt;db/seeds.rb&lt;/code&gt;, but that script is run in isolation. By abstracting this into a job, we can call it anywhere within our application. This is important because we'll need access to those constants when we print the instructions to the console.&lt;/li&gt;
&lt;li&gt;Note that we call &lt;code&gt;puts&lt;/code&gt; so that we'll know when this part of the setup script is being called.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-3-print-instructions-when-setup-is-complete"&gt;
  &lt;/a&gt;
  Step 3. Print Instructions When Setup is Complete
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/jobs/post_setup_instructions_job.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostSetupInstructionsJob&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationJob&lt;/span&gt;
  &lt;span class="n"&gt;queue_as&lt;/span&gt; &lt;span class="ss"&gt;:default&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;== Setup complete! 🎉  =="&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;👉  Run &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;rails s&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; to start the development server."&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;== You can login with the following account  =="&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;🔗  &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url_helpers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_user_session_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;host: &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;port: &lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\📧&lt;/span&gt;&lt;span class="s2"&gt;  Email: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;DatabaseSeederJob&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_USER_EMAIL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\🔐&lt;/span&gt;&lt;span class="s2"&gt;  Password: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;DatabaseSeederJob&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_USER_PASSWORD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/post_setup_instructions.rake&lt;/span&gt;
&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:post_setup_instructions&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"Prints instructions once setup is complete."&lt;/span&gt;
  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;perform: :environment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;PostSetupInstructionsJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_now&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;--- a/bin/setup
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/bin/setup
&lt;/span&gt;&lt;span class="p"&gt;@@ -30,4 +30,6 @@&lt;/span&gt; FileUtils.chdir APP_ROOT do

   puts "\n== Restarting application server =="
   system! "bin/rails restart"
&lt;span class="gi"&gt;+
+  system! "bin/rails post_setup_instructions:perform"
&lt;/span&gt; end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We create &lt;code&gt;PostSetupInstructionsJob&lt;/code&gt; to print out the instructions for accessing our application. This allows us to access the constants we created in step 2. 

&lt;ul&gt;
&lt;li&gt;Note that we have to call &lt;code&gt;Rails.application.routes.url_helpers&lt;/code&gt; to gain access to the &lt;a href="https://api.rubyonrails.org//classes/ActionDispatch/Routing/UrlFor.html#method-i-url_for"&gt;url_for&lt;/a&gt; method.&lt;/li&gt;
&lt;li&gt;You'll also note that we pass in a &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; as options to avoid raising a &lt;code&gt;Missing host to link to!&lt;/code&gt; error.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We create a &lt;code&gt;post_setup_instructions&lt;/code&gt; &lt;a href="https://guides.rubyonrails.org/command_line.html#custom-rake-tasks"&gt;task&lt;/a&gt; the calls the &lt;code&gt;PostSetupInstructionsJob&lt;/code&gt;. This is so we can call it from &lt;code&gt;./bin/setup&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

</description>
      <category>tutorial</category>
      <category>rails</category>
    </item>
    <item>
      <title>Hangman Project | Day 11</title>
      <author>Web.Developer.io</author>
      <pubDate>Sat, 15 Jan 2022 18:25:53 +0000</pubDate>
      <link>https://dev.to/developerioweb/hangman-project-day-11-278k</link>
      <guid>https://dev.to/developerioweb/hangman-project-day-11-278k</guid>
      <description>&lt;p&gt;Today I have Made and Small React Project 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAtrOKm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cfxzhka2oja5jyqqqsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAtrOKm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cfxzhka2oja5jyqqqsy.png" alt="Hangman Exercise React Project" width="629" height="872"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Developer-io-web/React-Hangman"&gt;https://github.com/Developer-io-web/React-Hangman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding ☺️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Are the codes written/read left to right ?! (a misconception among beginners)</title>
      <author>Hooman Talakian</author>
      <pubDate>Sat, 15 Jan 2022 18:19:43 +0000</pubDate>
      <link>https://dev.to/hoomantalakian/are-the-codes-written-left-to-right-a-misconception-among-beginners-20n5</link>
      <guid>https://dev.to/hoomantalakian/are-the-codes-written-left-to-right-a-misconception-among-beginners-20n5</guid>
      <description>&lt;p&gt;Before we begin, we would like to mention that if you are a professional programmer, this article will most probably be a repeat for you, But if you think you are just starting out, or even as an experienced programmer, you are looking to rethink this concept, reading this article is not a waste.&lt;br&gt;
In this article, we are not going to talk about the direction or order of code execution in a programming language (that is &lt;strong&gt;the way a computer looks at and interprets code&lt;/strong&gt;, which of course has a different architecture in different programming languages), But what we mean here is something else, and that is our mental path in writing code, "&lt;strong&gt;the way we look at code&lt;/strong&gt;"! at first, these sentences may be a little vague or even clear, but let us explain further; Consider the following example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A car designer receives an order from a company to design a vehicle specifically for a crowded city. Probably the first thing that comes to the designer's mind is to visualize the crowded city space and the image of a small and light car (possibly low-consumption) with a good design to reduce traffic. Let's pause here for a moment. Has the designer ever thought about technical issues such as "Engine Type" or "Body Material"? No! Because at this stage, it is better to just look at the data carefully and think about them very simply. After all the aspects have been considered, the designer will probably start drawing his own designs according to the company's budget and taste and will enter a more technical phase. Probably after a lot of trial and error in the design and arguing with the company, the final design will be approved and the car will be ready to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#lets-get-to-the-point"&gt;
  &lt;/a&gt;
  Let's get to the point
&lt;/h2&gt;

&lt;p&gt;Why did we use this example at all? Let's go back to the beginning of the example. If you were asked to design this car, wouldn't you have started "Designing the Car" directly in the first place? (I.e. the opposite of the above steps). This means that our minds may confuse and don't distinguish the order of the stages of "Production of something", with the order of the stages of "Thinking" about the Production of that thing! Programming is very similar to this example! Just because a code is written/read from left to right (in most cases) does not mean that you should think the same way! Take a look at the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11_eI4a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0prc457576wfrgtllw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11_eI4a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0prc457576wfrgtllw0.png" alt='Save a "name" to the MongoDB database' width="793" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code is part of a JavaScript file that stores a "name" in the MongoDB database; in a simple word, by writing this code, a name (for example: "Hooman") is stored in the server storage. now pay close attention. If we want to read this code "from left to right", This is how it is analyzed :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const result
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this part of the code, the whole storing process is assigned to a variable called "result" (so that it can be used with the same name and its result can be used and processed as needed).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this part of the code, the program is commanded to wait for the storing process (and not go to the next line until the result of the storing operation is known).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and In this part of the code, the program is commanded to save the "name"!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-now-with-a-fresh-new-look"&gt;
  &lt;/a&gt;
  And now with a fresh new look...
&lt;/h2&gt;

&lt;p&gt;Now let's look at it differently and as we said at the beginning of the article, see how it is better for us as a programmers to "look at the code", that is like the same car designer, in order to achieve our desired goal. So let's forget the left-to-right order and look at the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ovq1XMdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrfywqdh5z7g2d5sxxve.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ovq1XMdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrfywqdh5z7g2d5sxxve.jpeg" alt='How we should think about storing a "name" in the MongoDB database' width="793" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now think again with new fresh look. if our goal is to "save a name in the database", what is the first code that comes to mind?! Yes ... the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What was the explanation of this part of the code?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this part of code, the program is commanded to save the "name"!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So far, we have met our first need. the next step, like the car designer, is for us to see what our next need is. We want to "make sure that our data is stored in the database" and this is exactly where we write the await code &lt;strong&gt;on the left&lt;/strong&gt; instead of the left-to-right view. (Note that this code only makes sense for this example, and based on your programming language and work environment, you should make your own interpretation of this example).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await name.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we mentioned above:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this part of code, the program is commanded to wait for the storing process (and not go to the next line until the result of the storing operation is determined).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And now we decide in our minds to "save this process somewhere", so we can use it in the next lines. what should we do? Yes, the answer appears! Now on the left side of the code, we add &lt;strong&gt;const result&lt;/strong&gt; to save it under the name "result":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const result = await name.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I hope instead of simplifying this, I didn't make it more difficult to understand, but considering all we have discussed, I would reach the following conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't think about the Order or Direction of code execution first when you are writing code. instead, write down what is on your mind, without thinking about the final complicated rules, and then, each code will find its place!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My name is "Hooman Talakian" and you can &lt;a href="https://www.linkedin.com/in/hoomantalakian/"&gt;follow me on LinkedIn&lt;/a&gt; if you liked this article.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>help</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
