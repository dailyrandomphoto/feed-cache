<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Design patterns in Javascript: Publish-Subscribe or PubSub</title>
      <author>Anish Kumar</author>
      <pubDate>Tue, 14 Sep 2021 02:40:42 +0000</pubDate>
      <link>https://dev.to/anishkumar/design-patterns-in-javascript-publish-subscribe-or-pubsub-20gf</link>
      <guid>https://dev.to/anishkumar/design-patterns-in-javascript-publish-subscribe-or-pubsub-20gf</guid>
      <description>&lt;p&gt;What's a design pattern in software engineering? It's a &lt;strong&gt;general repeatable solution&lt;/strong&gt; to a commonly occurring problem in software design. In this article, we'll be looking at one of such common design patterns and see how it can be put to use in real world applications.&lt;/p&gt;

&lt;p&gt;This pattern is referred to as Publish-Subscribe or PubSub. Let's start with the overall notion behind this pattern before writing some code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vyXhT7Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631540738187/qmkcqTo2D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vyXhT7Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631540738187/qmkcqTo2D.png" alt="pubsub.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image above describes the general idea behind this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have a PubSub 'container' that maintains a list of &lt;code&gt;subscribers&lt;/code&gt; (a subscriber is just a function)&lt;/li&gt;
&lt;li&gt;A new subscription can be created by using the &lt;code&gt;subscribe(subscriber)&lt;/code&gt; method, which essentially adds the &lt;code&gt;subscriber&lt;/code&gt; into our PubSub container&lt;/li&gt;
&lt;li&gt;We can use &lt;code&gt;publish(payload)&lt;/code&gt; to call all the existing &lt;code&gt;subscribers&lt;/code&gt; in the PubSub container with &lt;code&gt;payload&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Any specific &lt;code&gt;subscriber&lt;/code&gt; can be removed from the container, at any point in time, using the &lt;code&gt;unsubscribe(subscriber)&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Looking at the points above it's pretty straightforward to come up with a simple implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pubsub.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// this is where we maintain list of subscribers for our PubSub&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// add the subscriber to existing list&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// remove the subscriber from existing list&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// publish payload to existing subscribers by invoking them&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a bit of error handling to this implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pubsub.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not a valid argument for subscribe method, expected a function instead`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not a valid argument for unsubscribe method, expected a function instead`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;We can use this implementation as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PubSub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, elsewhere in the application, we can publish and subscribe using this instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something here&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// home.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hola!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#is-it-useful-in-real-applications"&gt;
  &lt;/a&gt;
  Is it useful in real applications?
&lt;/h2&gt;

&lt;p&gt;Yes. In fact, there are many libraries that use it under the hood and you may not have realized it so far.  Let's take the example of the popular state management library for ReactJS - &lt;strong&gt;Redux&lt;/strong&gt;. Of course, its implementation is not as simple as ours, since it's been implemented to handle many other nuances and use-cases. Nevertheless, the underlying concept remains the same.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href="http://redux.js.org/docs/api/Store.html#store-methods"&gt;methods offered by Redux&lt;/a&gt;, You would see &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;subscribe()&lt;/code&gt; methods which are equivalent to &lt;code&gt;publish()&lt;/code&gt; and &lt;code&gt;subscribe()&lt;/code&gt; methods we implemented above. You usually won't see &lt;code&gt;subscribe()&lt;/code&gt; method getting used directly, this part is abstracted away behind &lt;code&gt;connect()&lt;/code&gt; method offered by react-redux library. You can follow the implementation details &lt;a href="https://github.com/reduxjs/react-redux/blob/4.x/src/components/connect.js#L199"&gt;here&lt;/a&gt; if that interests you. &lt;/p&gt;

&lt;p&gt;In summary, all react components using &lt;code&gt;connect()&lt;/code&gt; method act as subscribers. Any component using &lt;code&gt;dispatch()&lt;/code&gt; acts as the publisher. And that explains why dispatching an action from any component causes all &lt;code&gt;connected&lt;/code&gt; components to rerender. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We'll see how the idea behind PubSub can be extended further to build a state management library like redux from scratch.&lt;/li&gt;
&lt;li&gt;We'll also see how an Event Emitter can be built from scratch, using similar notion as PubSub&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This article has been originally published at &lt;a href="https://stackfull.dev/design-patterns-in-javascript-publish-subscribe-or-pubsub-1"&gt;StackFull.dev&lt;/a&gt;. If you enjoyed reading this, you may want to opt for my &lt;a href="https://stackfull.dev"&gt;newsletter&lt;/a&gt;. It would let me reach out to you whenever I publish a new thought!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>redux</category>
      <category>pubsub</category>
      <category>designpatterns</category>
    </item>
    <item>
      <title>Don't make these DevOps MISTAKES! We made them for you so you don't have to</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Tue, 14 Sep 2021 02:00:30 +0000</pubDate>
      <link>https://dev.to/n3wt0n/don-t-make-this-devops-mistakes-we-made-them-for-you-2ih7</link>
      <guid>https://dev.to/n3wt0n/don-t-make-this-devops-mistakes-we-made-them-for-you-2ih7</guid>
      <description>&lt;p&gt;&lt;strong&gt;DevOps is Hard&lt;/strong&gt;! And there are many common DevOps mistakes new engineers make. &lt;/p&gt;

&lt;p&gt;What if we have a way for you to &lt;strong&gt;avoid those most common mistakes&lt;/strong&gt;?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;One question that I get over and over again is: &lt;strong&gt;&lt;em&gt;How can I get better at DevOps&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;And so I've teamed up with a group of &lt;strong&gt;awesome DevOps experts&lt;/strong&gt; and content creators, and in this video we are gonna be going through some things you need to think about when starting your DevOps career, or even if you're already into DevOps.&lt;/p&gt;

&lt;p&gt;And we are also going through &lt;strong&gt;our mistakes we made&lt;/strong&gt; starting out &lt;strong&gt;so you don't make the same mistakes&lt;/strong&gt; on your DevOps journey.&lt;/p&gt;

&lt;p&gt;🦉We made these devops mistakes in our early career stages, and if you follow our advice you won't make them too.&lt;/p&gt;

&lt;p&gt;🤩This video is the biggest collaboration on CoderDave's channel yet! You will find below all the links to these experts profiles and channels, make sure you check them out after you have finished here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-video"&gt;
  &lt;/a&gt;
  The Video
&lt;/h3&gt;

&lt;p&gt;Alright, let's get into some of the biggest mistakes we made.&lt;/p&gt;

&lt;p&gt;Enjoy the watch!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VaEFosTY7FU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/VaEFosTY7FU"&gt;Link to the video: https://youtu.be/VaEFosTY7FU&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;I hope us talking about our mistakes was valuable for you. We've tried to &lt;strong&gt;share those mistakes&lt;/strong&gt; we made and how to avoid them &lt;strong&gt;so you don't have to make them as well&lt;/strong&gt;, and you can jump start your DevOps career.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below if you have any questions about the points we have covered and go check out the awesome people that contributed to this video, you can find all of their info below.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/LrQRpiPjIwc"&gt;this video here&lt;/a&gt;, in which I've teamed up with another group of DevOps experts and shared their mistakes and how to avoid them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#experts-profiles"&gt;
  &lt;/a&gt;
  Experts profiles
&lt;/h3&gt;

&lt;p&gt;👲🏻 DevOps Experts in this video (appearance order):&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sid-palas-devops-directive"&gt;
  &lt;/a&gt;
  Sid Palas - DevOps Directive
&lt;/h4&gt;

&lt;p&gt;► YouTube: &lt;a href="https://www.youtube.com/c/DevOpsDirective/"&gt;https://www.youtube.com/c/DevOpsDirective/&lt;/a&gt;&lt;br&gt;
► Twitter: &lt;a href="https://twitter.com/sidpalas"&gt;https://twitter.com/sidpalas&lt;/a&gt;&lt;br&gt;
► Website: &lt;a href="https://devopsdirective.com/"&gt;https://devopsdirective.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#viktor-farcic-devops-toolkit"&gt;
  &lt;/a&gt;
  Viktor Farcic - DevOps Toolkit
&lt;/h4&gt;

&lt;p&gt;► YouTube: &lt;a href="https://youtube.com/c/devopstoolkit"&gt;https://youtube.com/c/devopstoolkit&lt;/a&gt;&lt;br&gt;
► Twitter: &lt;a href="https://twitter.com/vfarcic"&gt;https://twitter.com/vfarcic&lt;/a&gt;&lt;br&gt;
► LinkedIn: &lt;a href="https://www.linkedin.com/in/viktorfarcic/"&gt;https://www.linkedin.com/in/viktorfarcic/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#anais-urlichs"&gt;
  &lt;/a&gt;
  Anais Urlichs
&lt;/h4&gt;

&lt;p&gt;► YouTube: &lt;a href="https://www.youtube.com/c/AnaisUrlichs"&gt;https://www.youtube.com/c/AnaisUrlichs&lt;/a&gt;&lt;br&gt;
► Twitter: &lt;a href="https://twitter.com/urlichsanais"&gt;https://twitter.com/urlichsanais&lt;/a&gt;&lt;br&gt;
► Newsletter: &lt;a href="https://anaisurl.com/"&gt;https://anaisurl.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#christian-lempa-the-digital-life"&gt;
  &lt;/a&gt;
  Christian Lempa - The Digital Life
&lt;/h4&gt;

&lt;p&gt;► YouTube: &lt;a href="https://www.youtube.com/thedigitallifetech"&gt;https://www.youtube.com/thedigitallifetech&lt;/a&gt;&lt;br&gt;
► Twitter: &lt;a href="https://twitter.com/christian_tdl"&gt;https://twitter.com/christian_tdl&lt;/a&gt;&lt;br&gt;
► Instagram: &lt;a href="https://www.instagram.com/christian_tdl/"&gt;https://www.instagram.com/christian_tdl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VaEFosTY7FU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>codenewbie</category>
      <category>tips</category>
      <category>experts</category>
    </item>
    <item>
      <title>Testing Library and why I use React Testing Library.</title>
      <author>Tony Kharioki</author>
      <pubDate>Tue, 14 Sep 2021 01:02:23 +0000</pubDate>
      <link>https://dev.to/kharioki/testing-library-and-why-i-use-react-testing-library-9d5</link>
      <guid>https://dev.to/kharioki/testing-library-and-why-i-use-react-testing-library-9d5</guid>
      <description>&lt;p&gt;The testing library is a family of packages that help you test UI components in a user-centric way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The more your test resembles the way your software is used, the more confidence they can give you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-does-testing-library-solve"&gt;
  &lt;/a&gt;
  What problems does Testing Library solve?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You want to write tests that tell you your components are working for users.&lt;/li&gt;
&lt;li&gt;You want your tests to avoid including implementation details so changes on components do not break your tests or slow down the team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#so-why-pick-testing-library"&gt;
  &lt;/a&gt;
  So why pick Testing Library?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The core library &lt;strong&gt;Dom Testing Library&lt;/strong&gt; is a lightweight solution for testing pages by querying and interacting with DOM nodes.&lt;/li&gt;
&lt;li&gt;The main utilities it provides include querying the DOM for nodes in a way that's similar to how the user finds elements on the page.&lt;/li&gt;
&lt;li&gt;The core library has been wrapped to provide ergonomic APIs for several frameworks including React, Angular, Vue and also for React Native.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;DOM Testing Library works with any environment that provides DOM APIs such as Jest, Mocha + JSDOM or a real browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-this-library-is-not-"&gt;
  &lt;/a&gt;
  What this library is not :(
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A test runner or framework - RTL is different from Jest(I'll explain later)&lt;/li&gt;
&lt;li&gt;Specific to a testing framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-should-you-avoid-with-testing-library"&gt;
  &lt;/a&gt;
  What should you avoid with Testing Library?
&lt;/h3&gt;

&lt;p&gt;Avoid testing implementation details like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Internal state of a component&lt;/li&gt;
&lt;li&gt;Internal methods of a component&lt;/li&gt;
&lt;li&gt;Lifecycle methods of a component&lt;/li&gt;
&lt;li&gt;Child components&lt;/li&gt;
&lt;/ol&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;for the sake of this write up, I'll introduce React Testing Library&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#react-testing-libraryrtl"&gt;
  &lt;/a&gt;
  React Testing Library(RTL)
&lt;/h2&gt;

&lt;p&gt;React Testing Library builds on top of DOM Testing Library by adding APIs for working with React components&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CRA projects have out-of-the-box support for RTL.&lt;br&gt;
You can also install it via &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;npm install --save -dev @testing-library/react&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-tests-with-react-testing-library"&gt;
  &lt;/a&gt;
  Why do tests with React Testing Library?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Catch bugs&lt;/strong&gt; - allows you to catch bugs easily.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Increases confidence in application&lt;/strong&gt; - if all your tests pass, means all the parts of your applications are working correctly hence increasing the confidence in your application. This also translates to an increase customer satisfaction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Speeds up QA time&lt;/strong&gt; - if we were running a huge application and we implement a new feature, we'd have to manually test. If we write tests then all we have to do is run tests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tests can serve as documentation&lt;/strong&gt; - if you're working with larger teams, sometimes code can be very confusing especially to new developers and by looking at tests, new devs can easily understand what the team is trying to accomplish.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#types-of-tests"&gt;
  &lt;/a&gt;
  Types of Tests
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Before we continue, lets understand the different types of tests that there are.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Static tests&lt;/em&gt;&lt;/strong&gt; - catch typos and type errors as you write code. Usually how a linter works e.g ESlint, TSlint&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Unit tests&lt;/em&gt;&lt;/strong&gt; - they test a piece of code/component in complete isolation. Basically testing a single unit works as expected.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Integration tests&lt;/em&gt;&lt;/strong&gt; - test how different units/components interact.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;E2E(End to End) tests&lt;/em&gt;&lt;/strong&gt; - They simulate what the user flow would be like. It tests beginning to end.
&amp;gt; RTL does not test end to end. For that you can use &lt;strong&gt;Puppeteer&lt;/strong&gt; or &lt;strong&gt;Cypress&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#structure-of-tests"&gt;
  &lt;/a&gt;
  Structure of Tests
&lt;/h3&gt;

&lt;p&gt;To better understand tests, we need to know what goes into a test; &lt;em&gt;describe blocks&lt;/em&gt;, &lt;em&gt;test blocks&lt;/em&gt;, and &lt;em&gt;assertions&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;describe block&lt;/strong&gt; - is a test suite that specifies a larger component or function. A test suite can have multiple test cases.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdtKmpvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jv6qsgujaruawmja6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdtKmpvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jv6qsgujaruawmja6.png" alt="describe block"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;test block&lt;/strong&gt; - (also called &lt;em&gt;it block&lt;/em&gt; since its defined by an &lt;code&gt;it&lt;/code&gt; function) is a test case.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K0lFa_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/424k6zt6z39yjfd3vhur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K0lFa_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/424k6zt6z39yjfd3vhur.png" alt="it block"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertions&lt;/strong&gt; - assertions are basically what we put in the test block. They can be successful or erroneous. In the above example we use the &lt;code&gt;expect&lt;/code&gt; function.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;before we continue, lets see how we run tests and how RTL works alongside jest&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're using create-react-app, React Testing Library and Jest come installed out-of-the-box. However if you're using another react framework or you've built your app with custom react and webpack configuration, you'll need to install jest and react testing library yourself.&lt;/p&gt;

&lt;p&gt;Under the hood, jest test-runner will match all files with suffix &lt;code&gt;test.js&lt;/code&gt; or &lt;code&gt;spec.js&lt;/code&gt; or as per your own configuration.Jest then runs the tests in these files once you run the command &lt;code&gt;npm run test&lt;/code&gt; or &lt;code&gt;yarn test&lt;/code&gt; (again, or whatever test script you may have in your package.json)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Like I mentioned earlier, &lt;strong&gt;Jest&lt;/strong&gt; is a test-runner, which gives you ability to run tests with Jest in the command line. On the other hand &lt;strong&gt;React Testing Library&lt;/strong&gt; is a testing library to test react components, just like &lt;em&gt;Enzyme&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While Jest provides us with a whole lot of functions; test suites, test cases and assertions, RTL provides more functionality that is geared towards DOM testing for react components e.g render, screen, query methods, assertion methods, and many more.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;To better understand this, lets use some of my code and see a real-life example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JM1m_qO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apil3qim0g2u7bux3d7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JM1m_qO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apil3qim0g2u7bux3d7v.png" alt="sample code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets dive into the above test suite;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;render&lt;/strong&gt; - inside the test suite we first render the component we want to test. We use &lt;code&gt;{ render }&lt;/code&gt; method from &lt;code&gt;@testing-library/react&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;screen&lt;/strong&gt; - then we find the elements we want to interact with. Again we use &lt;code&gt;{ screen }&lt;/code&gt; method from &lt;code&gt;@testing-library/react&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the next step is to interact with these elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;assert&lt;/strong&gt; -  then we assert the results as expected. we use &lt;code&gt;expect()&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Query methods&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;okay now, lets look at some of those Query methods I mentioned earlier, some of which I have used in the figure above&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;getBy&lt;/th&gt;
&lt;th&gt;findBy&lt;/th&gt;
&lt;th&gt;queryBy&lt;/th&gt;
&lt;th&gt;getAllBy&lt;/th&gt;
&lt;th&gt;findAllBy&lt;/th&gt;
&lt;th&gt;queryAllBy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0 match&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 match&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1+ match&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Await&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;getBy&lt;/em&gt;, &lt;em&gt;findBy&lt;/em&gt;, and &lt;em&gt;queryBy&lt;/em&gt;&lt;/strong&gt; - these methods get only one element. If they get more than one element, they throw an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;getAllBy&lt;/em&gt;, &lt;em&gt;findAllBy&lt;/em&gt;, and &lt;em&gt;queryAllBy&lt;/em&gt;&lt;/strong&gt; - Always return an array if they get multiple elements they return all elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;findBy&lt;/em&gt;, &lt;em&gt;findAllBy&lt;/em&gt;&lt;/strong&gt; - we can use these methods if we are rendering items asynchronously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;queryBy&lt;/em&gt;&lt;/strong&gt; - does not work with async, returns only one element and if no match it still passes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prioritising attributes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In react-testing library, we want to mimic the user interactions as much as possible inside of our tests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;so we utilize the attributes that follow that e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Attributes accessible by everyone&lt;/strong&gt; - &lt;em&gt;getByRole&lt;/em&gt; (e.g. button, heading), &lt;em&gt;getByLabelText&lt;/em&gt;, &lt;em&gt;getByPlaceholderText&lt;/em&gt;, &lt;em&gt;getByText&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic Queries attributes&lt;/strong&gt; - these are for when we have implemented certain a11y accessibility rules  - &lt;em&gt;getByAltText&lt;/em&gt;, &lt;em&gt;getByTitle&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using TestID&lt;/strong&gt; - in react sometimes we may need to test a specific component that has a unique testId. in such instances we use &lt;em&gt;getByTestId&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is already getting too long. I'll stop it here for now. I'll attach some links to certain articles that helped me prepare and improve my testing skills. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.robinwieruch.de/react-testing-library"&gt;This cool article&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/static-vs-unit-vs-integration-vs-e2e-tests"&gt;This other article&lt;/a&gt;&lt;br&gt;
&lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;These official docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/playlist?list=PL4cUxeGkcC9gm4_-5UsNmLqMosM-dzuvQ"&gt;This youtube playlist&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;That's all for now, till next time, have a great time testing your applications. One more thing before I go, here's a sample implementation of how I use Testing Library with react-native.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2GjAH4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fasx1v9962bqjd6bmokd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2GjAH4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fasx1v9962bqjd6bmokd.png" alt="rn code"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tdd</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Looking for a Forestry alternative?</title>
      <author>David Large</author>
      <pubDate>Tue, 14 Sep 2021 00:27:51 +0000</pubDate>
      <link>https://dev.to/cloudcannon/looking-for-a-forestry-alternative-4c3o</link>
      <guid>https://dev.to/cloudcannon/looking-for-a-forestry-alternative-4c3o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#your-cms-for-jekyll-hugo-and-eleventy"&gt;
  &lt;/a&gt;
  Your CMS for Jekyll, Hugo, and Eleventy
&lt;/h2&gt;

&lt;p&gt;Forestry announced in April 2021 that they'd be &lt;a href="https://forestry.io/blog/tina-cloud-the-next-forestry/"&gt;sunsetting their CMS&lt;/a&gt; in favour of TinaCMS and Tina Cloud, which is currently limited to React-based sites. If you've been looking for an alternative to Forestry for your Jekyll, Hugo, and Eleventy static sites, CloudCannon is here to help.&lt;/p&gt;

&lt;p&gt;So how does CloudCannon compare?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-editing"&gt;
  &lt;/a&gt;
  Visual editing
&lt;/h3&gt;

&lt;p&gt;CMSs exist to help editing teams manage a website's contents. The simpler the editing experience, the more your editing team will be empowered to make updates without the help of a developer. CloudCannon puts the editor's experience first and foremost, with a fully-featured visual editor that developers can configure for optimal editing.&lt;/p&gt;

&lt;p&gt;With CloudCannon, content writers can write and update content directly on the website — what could be more intuitive than that?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JSPmUOoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdyd766xp1y82kzou7ob.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JSPmUOoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdyd766xp1y82kzou7ob.gif" alt="Editable regions in CloudCannon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-page-building"&gt;
  &lt;/a&gt;
  Component page building
&lt;/h3&gt;

&lt;p&gt;Markdown is fantastic, but it's too restrictive for complex marketing content, especially when content editors prefer a visual approach. That's where using components — which can be pieced together to build a page — are a great idea. On CloudCannon, components are called &lt;a href="https://cloudcannon.com/documentation/edit/editing/configuration/#array-structures"&gt;array structures&lt;/a&gt;. You start by defining a label and the data fields in your component, and you're free to use the &lt;a href="https://cloudcannon.com/documentation/edit/interfaces/inputs/#inputs"&gt;full range of field types&lt;/a&gt; available on CloudCannon; you can even nest array structures! Once configured, editors can use these components to piece together content on a page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ5pQUwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vyr9m69o28r2cs4pcsw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ5pQUwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vyr9m69o28r2cs4pcsw.gif" alt="Page building process in CloudCannon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitbased"&gt;
  &lt;/a&gt;
  Git-based
&lt;/h3&gt;

&lt;p&gt;CloudCannon is a Git-based CMS. All changes in your repository automatically sync to CloudCannon, and all changes editors make will commit back to the repository. We're working towards providing editors access to the full power of Git; currently editors can create a branch or copy of a site to make large-scale changes that can be merged in through a branch merge or pull request at a later date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYv2YiJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tzw4d6ivc9sm7cnxr34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYv2YiJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tzw4d6ivc9sm7cnxr34.png" alt="The Git sync/save process in CloudCannon's CMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-included"&gt;
  &lt;/a&gt;
  Hosting included
&lt;/h3&gt;

&lt;p&gt;All sites on CloudCannon have access to reliable, high-performance hosting through our partner CloudFlare. Configure your custom domain and host your production site directly on CloudCannon, or use our hosting just for your staging environment and host production on your own hosting provider — the choice is yours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-on-the-roadmap"&gt;
  &lt;/a&gt;
  What's on the roadmap?
&lt;/h2&gt;

&lt;p&gt;We believe simple, elegant, and performant SSGs such as Jekyll, Hugo, and Eleventy are the best way to build most marketing and brand websites. We're constantly refining our support for these SSGs and iterating on the editing and publishing experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-intuitive-visual-editing"&gt;
  &lt;/a&gt;
  More intuitive visual editing
&lt;/h3&gt;

&lt;p&gt;Visual editing is at the core of CloudCannon. We're working on making more functionality available in the visual editor to provide an even more intuitive editing experience. Our ultimate goal is twofold: first, to give the developer the complete flexibility to model content however they'd like — using front matter, collections, markdown, or HTML. For non-technical editors, our aim is to abstract how a site's content is stored and managed, allowing them to create and maintain complex content structures in a SSG &lt;em&gt;without&lt;/em&gt; needing to know everything about how it all works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-components"&gt;
  &lt;/a&gt;
  Managing components
&lt;/h3&gt;

&lt;p&gt;Later this month we'll be announcing a new open-source framework for managing HTML components. (Think &lt;a href="https://github.com/storybookjs/storybook"&gt;Storybook&lt;/a&gt;, but made especially for HTML-based SSGs.) This new framework will have a tight integration into CloudCannon, giving developers a clear structure for creating components, and giving editors the ability to add, rearrange and update components with a live preview. Stay tuned for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-for-all"&gt;
  &lt;/a&gt;
  Git for all
&lt;/h3&gt;

&lt;p&gt;The final piece of the puzzle is Git workflows. Git has changed how web developers collaborate on content. We want to bring the power and flexibility of these workflows to content editors, and we're well on the way there. Our plan is to see just how far we can push this without content editors needing to know anything about Git.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-started"&gt;
  &lt;/a&gt;
  How do I get started?
&lt;/h2&gt;

&lt;p&gt;You can start transferring your sites in a few minutes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://app.cloudcannon.com/register"&gt;Create a free account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a site&lt;/li&gt;
&lt;li&gt;Connect your Git repository to your site — we support GitHub, Bitbucket and GitLab.&lt;/li&gt;
&lt;li&gt;Configure your &lt;a href="https://cloudcannon.com/documentation/build/setup/configuration/#configuration"&gt;build options&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! CloudCannon will automatically build your site every time your repository changes.&lt;/p&gt;

&lt;p&gt;CloudCannon provides a basic level of editing by default. To configure more intuitive editing for your content editors you can look at the following configurable options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/html/#editable-regions"&gt;Editable regions&lt;/a&gt; — Add inline editing to HTML content.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/html/#editable-regions"&gt;Editor links&lt;/a&gt; — Add buttons and links to the visual editing interface to link to data in the front matter, collections or data files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/interfaces/inputs/#inputs"&gt;Inputs&lt;/a&gt; — Configure the editing interface for different content types.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/configuration/#array-structures"&gt;Array structures&lt;/a&gt; — Create your own components, which editors can use to build their own pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#haere-mai-welcome"&gt;
  &lt;/a&gt;
  Haere mai! Welcome!
&lt;/h2&gt;

&lt;p&gt;We'd love to hear from you! If you're interested in trying out CloudCannon, &lt;a href="https://cloudcannon.com/contact/"&gt;reach out and say hello&lt;/a&gt;! We're here to help and we're always ready to listen.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>cms</category>
      <category>git</category>
    </item>
    <item>
      <title>The Collab Lab TCL-28: The Road to Lettuce Know</title>
      <author>Luis Augusto</author>
      <pubDate>Tue, 14 Sep 2021 00:11:24 +0000</pubDate>
      <link>https://dev.to/the-collab-lab/the-collab-lab-tcl-28-the-road-to-lettuce-know-4nj6</link>
      <guid>https://dev.to/the-collab-lab/the-collab-lab-tcl-28-the-road-to-lettuce-know-4nj6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;For 8 weeks, TCL 28 cohort members worked together with the guidance of their mentors to create Lettuce Know, a smart shopping list application with a friendly UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#who-are-the-tcl-28-collabies-and-mentors"&gt;
  &lt;/a&gt;
  Who are the &lt;a href="https://the-collab-lab.codes/who-we-are/"&gt;TCL 28 Collabies&lt;/a&gt; and Mentors?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Developers a.k.a. Collabies&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/kelsey-siman/"&gt;Kelsey Siman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/isa-abutaa/"&gt;Isa Abutaa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/hulya-karakaya/"&gt;Hulya Karakaya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/sandydaii/"&gt;Sandy Dai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Mentors&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/meganesu/"&gt;Megan Sullivan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/luisbaugusto/"&gt;Luis Augusto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/scottdreu/"&gt;Scott Reu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-they-do"&gt;
  &lt;/a&gt;
  What did they do?
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/the-collab-lab"&gt;
        the-collab-lab
      &lt;/a&gt; / &lt;a href="https://github.com/the-collab-lab/tcl-28-smart-shopping-list"&gt;
        tcl-28-smart-shopping-list
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Overview&lt;/h1&gt;
&lt;h2&gt;
What is this project?&lt;/h2&gt;
&lt;p&gt;The goal of this project is to collaborate with your Collab Lab team to create a “smart” shopping list app that learns your buying habits and helps you remember what you’re likely to need to buy on your next trip to the store.&lt;/p&gt;
&lt;h2&gt;
How does it work?&lt;/h2&gt;
&lt;p&gt;As a user, you will enter items (e.g., “Greek yogurt” or “Paper towels”) into your list. Each time you buy the item, you mark it as purchased in the list. Over time, the app comes to understand the intervals at which you buy different items. If an item is likely to be due to be bought soon, it rises to the top of the shopping list.&lt;/p&gt;
&lt;h2&gt;
Check out an example&lt;/h2&gt;
&lt;p&gt;The app will work in many of the same ways as &lt;a href="https://app.ineedtobuy.xyz/" rel="nofollow"&gt;iNeedToBuy.xyz&lt;/a&gt; (on which our project is based) with the exception that we will not be implementing barcode…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/the-collab-lab/tcl-28-smart-shopping-list"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Over the span of 8 weeks, TCL 28 collaborated together remotely to create &lt;a href="https://lettuce-know.web.app/"&gt;Lettuce Know&lt;/a&gt;, a smart shopping list which learns the user’s shopping habits and predicts when items are due for the next purchase using React, Firebase &amp;amp; Material UI.&lt;/p&gt;

&lt;p&gt;What did that collaboration look like, exactly? Well, each week the Collabies would pair off in twos so they could work together on an assigned issue or story. They would be responsible for working through that story, asking for help from their fellow Collabies or mentors if needed, creating a descriptive pull request on GitHub which outlines what changes were made, completing code reviews, and then finally, merging the pull requests to the main branch.&lt;/p&gt;

&lt;p&gt;Here are a sample of the various tickets that the Collabies worked on together:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generated a new, unique token for users, and stored it inside Firebase Firestore. Also, users can share their tokens with their friends and make changes to their shopping lists.&lt;/li&gt;
&lt;li&gt;Implemented a feature to mark an item on the shopping list as purchased so the app can learn how often the user buys different items. When a purchase is recorded, the estimated number of days until the next purchase date is calculated and recorded in the database.&lt;/li&gt;
&lt;li&gt;Created a feature for sorting shopping list items in order of how soon the user is likely to need to buy each of them again so that it’s clear what the user needs to buy soon.&lt;/li&gt;
&lt;li&gt;Created items schema and stored the item information and connected to user tokens.&lt;/li&gt;
&lt;li&gt;Created a feature for preventing the user from typing a duplicate item, duplicate items are not added to Firestore.&lt;/li&gt;
&lt;li&gt;Added a feature to filter the user's shopping list to make it easier to locate an item in the list.&lt;/li&gt;
&lt;li&gt;Used accessibility tests (a11y) to make sure the app is accessible to all users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-they-learn"&gt;
  &lt;/a&gt;
  What did they learn?
&lt;/h2&gt;

&lt;p&gt;Before participating in The Collab Lab, our Collabies all had experience with frontend and backend development with varying technologies, however, they all shared experience with HTML, CSS, JavaScript, and React. In addition to using those skills to build their app, they also used some new technologies — Cloud Firestore, a NoSQL document-oriented online database,  Material-UI, and SweetAlert.&lt;/p&gt;

&lt;p&gt;But aside from learning to use Cloud Firestore and query documents in the database, the most important skills that the Collabies learned were communication and remote collaboration. With everyone living in various time zones and having different responsibilities during the week, communication was essential to being successful as a team. The Collabies utilized Slack and GitHub to schedule pair-programming sessions and communicate what changes were being made to the codebase at any given time. When one pair had a question on the story they were working on, they communicated that to the group and received the feedback they needed to continue solving the problem. &lt;/p&gt;

&lt;p&gt;It wasn’t only essential to communicate progress on the project, but also to communicate our successes. Every two weeks, the Collabies and mentors participated in a retrospective, where everyone had the opportunity to share their appreciation for each other, what they thought went well, and what they thought could be better. There was always a lot of love that was shared during those meetings.&lt;/p&gt;

&lt;p&gt;Week after week, the quality of code reviews, pull requests, merges, and communication skills improved. Pair-programming helped them talk through their code and articulate their thought processes verbally. By the time the cohort was just about wrapped, the group was getting weekly requirements knocked out early and started opening their own issues and making tickets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collabie-experience-highlight"&gt;
  &lt;/a&gt;
  Collabie Experience Highlight
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;During our first day, I immediately felt welcomed by both Andrew and Stacie’s positive radiance. I soon was introduced to the rest of my fellow Collabies and mentors. Ever since I met them, everyone has been super respectful, helpful, and supportive from start to finish. Throughout our pair programming sessions, our office hours on the weekdays, and our code reviews on Saturday, I soon fell in love with the routine I had for 8 weeks. Working together felt adventurous, as we tackled different issues together and admired our accomplishments at the end of each session. From their working style to their coding knowledge, I learned so much from each one of my talented teammates. Even though there may be times we do run into a bug, the other pair and mentors were there for guidance. Our mentors were super responsive, patient, and insightful, I am still shocked how they were able to do all this while balancing a job. Looking back, I really do think this is one of the best teams I have ever been on, and I am so thankful for this experience. :) — &lt;em&gt;Sandy Dai&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lettuce-know-project-demo"&gt;
  &lt;/a&gt;
  Lettuce Know Project Demo
&lt;/h2&gt;

&lt;p&gt;You can check out our project demo here!&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5ALvZ9s8Y0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>react</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Python tutorial básico: Programando un registro.</title>
      <author>Ricardo Aguilar</author>
      <pubDate>Mon, 13 Sep 2021 23:47:07 +0000</pubDate>
      <link>https://dev.to/ricardorien/python-tutorial-basico-programando-un-registro-3d4o</link>
      <guid>https://dev.to/ricardorien/python-tutorial-basico-programando-un-registro-3d4o</guid>
      <description>&lt;p&gt;Escribiremos un programa que nos permita hacer un registro de animales, con su nombre científico&lt;br&gt;
y su nombre común, estos enlazados por un ID único. Usando ese ID podremos eliminar al animal del registro,&lt;br&gt;
o simplemente modificar los nombres ya escritos. Así como una opción de ver la lista de los animales ya&lt;br&gt;
registrados y una opción que nos permita salir del programa. &lt;/p&gt;

&lt;p&gt;La meta es generar e imprimir una lista que se pueda modificar como esta:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Animal Registry&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Scientific Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Common Name&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3Y99&lt;/td&gt;
&lt;td&gt;Canis Lupus Familiaris&lt;/td&gt;
&lt;td&gt;Siberian Husky&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT5R&lt;/td&gt;
&lt;td&gt;Cebinae&lt;/td&gt;
&lt;td&gt;Capuchin Monkey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8D6U&lt;/td&gt;
&lt;td&gt;Octopoda&lt;/td&gt;
&lt;td&gt;Octopus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YG0E&lt;/td&gt;
&lt;td&gt;Anthophila&lt;/td&gt;
&lt;td&gt;Bee&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JN14&lt;/td&gt;
&lt;td&gt;Dinastinae&lt;/td&gt;
&lt;td&gt;Rhinoceros Beetle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WVTA&lt;/td&gt;
&lt;td&gt;Python Regius&lt;/td&gt;
&lt;td&gt;Ball Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAZP&lt;/td&gt;
&lt;td&gt;Gorilla&lt;/td&gt;
&lt;td&gt;Gorilla&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Trabajaremos con:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El modulo PrettyTable.&lt;/li&gt;
&lt;li&gt;Diccionarios anidados.&lt;/li&gt;
&lt;li&gt;Control del flujo.&lt;/li&gt;
&lt;li&gt;Funciones.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Debes instalar PrettyTable mediante Pip.&lt;br&gt;
Intenta, en la consola, con:&lt;br&gt;
pip install prettytable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Primero, importaremos los módulos necesarios:&lt;br&gt;
PrettyTable para la creación de la tabla en donde registraremos a los animales, random y string para &lt;br&gt;
generar un ID al azar con el cual identificaremos la fila en el registo y sys para salir del programa.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prettytable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PrettyTable&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora crearemos un diccionario vacío en donde almacenaremos los animales que vayamos a registrar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;animal_dic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Escribiremos la condicional "if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;"" para evitar errores de importación y por buenas practicas.&lt;br&gt;
y llamamos a nuestra función &lt;em&gt;main()&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;La explicación de como &lt;em&gt;if&lt;/em&gt; _&lt;em&gt;name&lt;/em&gt;_ == "_&lt;em&gt;main&lt;/em&gt;_" funciona está fuera del alcance de este articulo.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#funciones"&gt;
  &lt;/a&gt;
  Funciones:
&lt;/h2&gt;

&lt;p&gt;Ahora bien, escribamos las funciones que harán andar nuestro programa, estas, irán &lt;strong&gt;ANTES&lt;/strong&gt; de la condicional "&lt;em&gt;if _&lt;em&gt;name&lt;/em&gt;_ == "_&lt;em&gt;main&lt;/em&gt;_"&lt;/em&gt;" anteriormente descrito. De lo contrario Python intentaría ejecutar la función &lt;em&gt;main()&lt;/em&gt; cuando esta &lt;strong&gt;no&lt;/strong&gt; han sido definida, por lo tanto dispararía un error.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#funci%C3%B3n-pricipal-main"&gt;
  &lt;/a&gt;
  Función pricipal main:
&lt;/h2&gt;

&lt;p&gt;Dentro de &lt;em&gt;main()&lt;/em&gt; obligaremos a que se ejecute este  &lt;em&gt;loop&lt;/em&gt; con un &lt;em&gt;while True&lt;/em&gt;, &lt;br&gt;
imprimirá las instrucciones de añadir, borrar, actualizar, chequear y salir del programa.&lt;br&gt;
También tenemos un &lt;em&gt;input()&lt;/em&gt; que será la opción que elija el usuario y esta será almacenada en&lt;br&gt;
la variable &lt;em&gt;user_input&lt;/em&gt;. &lt;strong&gt;Atento&lt;/strong&gt; al método &lt;em&gt;.lower()&lt;/em&gt;, este convierte en minúsculas lo que ingrese el usuario, así evitamos errores de tipeo por parte de este. Finalmente, las condicionales. Dependiendo de lo que elija el usuario se llamará a una función.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~~~~~~~~~~~~~~~~~~ Functions(): ~~~~~~~~~~~~~~~~~~~
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ~~~~~~~~~~~~~~ User's choise ~~~~~~~~~~~~~~~
&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;instrucctions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;What do you want to do? "&lt;/span&gt;
                           &lt;span class="s"&gt;"(a, d, u, l, e): "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;add_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delete_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"u"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;update_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;print_register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;exit_program&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"please, enter something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#instrucciones"&gt;
  &lt;/a&gt;
  Instrucciones:
&lt;/h3&gt;

&lt;p&gt;Crearemos una función para que el usuario vea las opciones de nuestro programa junto a una tecla a presionar  para que se ejecute esa opción, y para que el usuario sepa que hacer. Las opciones son: agregar animal, borrar animal, actualizar animal, mirar lista y salir del programa.&lt;br&gt;
Por lo tanto, sería así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;instrucctions&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Animal registry program:'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;1: Enter A or a to add new animal.'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;2: Enter D or d to delete a animal'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;3: Enter U or u to update animal.'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;4: Enter L or l to check list of animals. '&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;5: Enter E or e to exit the program.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imprimimos las opciones. &lt;em&gt;'/n'&lt;/em&gt; significa un salto de linea.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#imprimir-registro"&gt;
  &lt;/a&gt;
  Imprimir registro:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_registry&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PrettyTable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Scientific Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Common Name"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal_data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Animal registry"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Atento a lo que sucede aquí:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para darles nombres a los encabezados de las columnas los escribimos en formato de lista, y la pasamos 
como parámetro de &lt;em&gt;PrettyTable&lt;/em&gt; y la almacenamos en la variable "&lt;em&gt;x&lt;/em&gt;".&lt;/li&gt;
&lt;li&gt;Antes de hablar del &lt;em&gt;ciclo for&lt;/em&gt;, debemos recordar y tener muy claro de que estamos intentando 
acceder a un diccionario &lt;strong&gt;dentro&lt;/strong&gt; de otro diccionario. Solo para tenerlo claro, comparemos un 
diccionario &lt;em&gt;común&lt;/em&gt;, a uno &lt;em&gt;anidado&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#diccionario"&gt;
  &lt;/a&gt;
  Diccionario:
&lt;/h4&gt;

&lt;p&gt;Donde tenemos una colección de elementos almacenados en pares de &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;value&lt;/strong&gt; (&lt;strong&gt;clave&lt;/strong&gt;/&lt;strong&gt;valor&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'&lt;em&gt;name&lt;/em&gt;' es la &lt;strong&gt;key&lt;/strong&gt; (&lt;strong&gt;clave&lt;/strong&gt;) y '&lt;em&gt;Adam&lt;/em&gt;' el &lt;strong&gt;value&lt;/strong&gt; (&lt;strong&gt;valor&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'last'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Smith'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Podemos tener &lt;strong&gt;más&lt;/strong&gt; de un &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;value&lt;/strong&gt; en &lt;strong&gt;UN&lt;/strong&gt; diccionario. '&lt;em&gt;name&lt;/em&gt;' y '&lt;em&gt;last&lt;/em&gt;' son las &lt;strong&gt;keys&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#diccionario-anidado"&gt;
  &lt;/a&gt;
  Diccionario anidado:
&lt;/h4&gt;

&lt;p&gt;Los valores al exterior del diccionario, también son diccionarios.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Wealth of Nations'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam Smith'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Economic Sophisms'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;' author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Frédéric Bastiat'&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt; es la &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;clave&lt;/strong&gt; del diccionario externo, y '&lt;strong&gt;book&lt;/strong&gt;' y '&lt;strong&gt;author&lt;/strong&gt;' claves del diccionario interno.&lt;/p&gt;

&lt;p&gt;Entendido esto, volvamos al código &lt;em&gt;anterior&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal_data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo que ocurre aquí es que accedemos al &lt;strong&gt;key externo&lt;/strong&gt; (Es decir, el &lt;em&gt;ID&lt;/em&gt;), mediante &lt;em&gt;animal_date&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ya que accedemos al &lt;strong&gt;key&lt;/strong&gt; externo, tendremos acceso a los valores internos. Ocurre de &lt;br&gt;
la siguiente manera:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;animal_dic = ID del animal&lt;/li&gt;
&lt;li&gt;animal_dic[animal_data]["scientific_name"] = nombre científico&lt;/li&gt;
&lt;li&gt;animal_dic[animal_data]["common_name"] = nombre común&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces, pues:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ingresamos los valores de nuestro diccionario a la &lt;strong&gt;fila&lt;/strong&gt; de PrettyTable como &lt;strong&gt;una lista&lt;/strong&gt;, mediante el &lt;br&gt;
método &lt;em&gt;add_row()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente le damos un encabezado a nuestra tabla:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Animal registry"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora puedes imprimir la lista iniciando el programa y presionando &lt;em&gt;"l" o "L".&lt;/em&gt; Obviamente, ahora nuestro diccionario está vacío. Más adelante veremos como ingresarle datos.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#random-id"&gt;
  &lt;/a&gt;
  Random ID:
&lt;/h3&gt;

&lt;p&gt;Necesitamos un ID para identificar la columna y al animal registrado, este ID servirá como &lt;em&gt;enlace&lt;/em&gt;, siendo la &lt;strong&gt;key&lt;/strong&gt; externa de nuestros diccionarios anidados. &lt;br&gt;
Es necesario para un futuro poder actualizar uno o ambos nombres del animal, o borrarlo definitivamente.&lt;br&gt;
Para facilitarle la tarea al usuario, y evitar que cree duplicados, crearemos una función que retorne &lt;br&gt;
un string al azar. Lo haremos con el siguiente código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;random_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;
                                           &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random_string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Donde "&lt;em&gt;k&lt;/em&gt;" es el largo del string.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;La explicación de como funciona esta función está fuera del alcance de este articulo.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#agregar"&gt;
  &lt;/a&gt;
  Agregar:
&lt;/h3&gt;

&lt;p&gt;Ahora hagamos la función que se encargará de tomar los valores que escriba el usuario e ingresarlos en el diccionario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Please enter the scientific name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;common_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Please enter the common name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must write something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Lo primero que notarás es que llamamos a la función &lt;em&gt;random_id&lt;/em&gt; que devuelve un string y lo 
almacenamos en la variable &lt;em&gt;animal_id&lt;/em&gt;. Como su nombre lo indica, identifica al animal y su 
fila dentro del registro.&lt;/li&gt;
&lt;li&gt;Mediante el método &lt;em&gt;input()&lt;/em&gt; le pedimos al usuario que escriba el nombre común y científico. 
y los almacenamos en variables. Usamos el método &lt;em&gt;.title()&lt;/em&gt; por  estética.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hagamos una pausa y miremos otra vez esta parte del código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Actualizamos nuestro diccionario anidado y lo almacenamos en una variable llamada "&lt;em&gt;data&lt;/em&gt;". De modo que:&lt;br&gt;
&lt;em&gt;animal_id&lt;/em&gt; = Es el &lt;em&gt;random ID&lt;/em&gt; que retorna nuestra función. Es la &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;clave&lt;/strong&gt; externa de este &lt;br&gt;
diccionario anidado.&lt;br&gt;
'&lt;em&gt;scientific_name&lt;/em&gt;': que está entre comillas, es la key/llave interna.&lt;br&gt;
&lt;em&gt;scientific_name&lt;/em&gt;: que una variable, es la value/valor interno. Ingresado por el usuario.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;El siguiente bloque de código establece una condición donde si el usuario &lt;strong&gt;no&lt;/strong&gt; ingresa &lt;br&gt;
ni un nombre científico ni un nombre común, imprima un mensaje de que debe hacerlo.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Por ultimo, en el '&lt;em&gt;else&lt;/em&gt;': si se han ingresados al menos uno de los dos &lt;em&gt;input()&lt;/em&gt; &lt;br&gt;
actualizaremos el "&lt;em&gt;animal_dic&lt;/em&gt;" con los datos escritos por el usuario.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#eliminar-fila"&gt;
  &lt;/a&gt;
  Eliminar fila:
&lt;/h3&gt;

&lt;p&gt;Ahora escribamos la función para borrar la fila que el usuario elija, mediante el &lt;em&gt;ID único&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the animal ID you want delete: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Delete (y/n)"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; registry has been deleted!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ID not found. Check list pressing 'L'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Le pedimos al usuario que ingrese el ID de la fila. Usamos &lt;em&gt;upper()&lt;/em&gt; para que este no tenga
que escribir mayúsculas.&lt;/li&gt;
&lt;li&gt;Creamos un '&lt;em&gt;if&lt;/em&gt;': que chequea si el &lt;em&gt;ID ingresado&lt;/em&gt; por el usuario está en el diccionario le de
la elección de querer borrarlo con un sí o no. Si escribe si se borrara con un 
"del animal_dic[animal_id]" que busca el ID (&lt;strong&gt;key externo&lt;/strong&gt;) y borra todos sus &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;values&lt;/strong&gt; 
internos .&lt;/li&gt;
&lt;li&gt;Con el &lt;em&gt;else&lt;/em&gt; declaramos de que, si no se ha encontrado el &lt;em&gt;ID&lt;/em&gt;, imprime un "ID not found"&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#actualizaci%C3%B3n"&gt;
  &lt;/a&gt;
  Actualización:
&lt;/h3&gt;

&lt;p&gt;Tal vez el usuario ha cometido un error de tipeo, y desea cambiar los campos de una fila en especifico&lt;br&gt;
Ahí la necesidad de una función que los actualice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the animal ID you want update: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# If external key in dictionary, if key is equal to ID (animal_id)
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Update registry &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;? (y/n): "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Changing names
&lt;/span&gt;                &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write a new scientific name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;common_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write a new common name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must write something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Updating
&lt;/span&gt;                    &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;
                    &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"registry updated!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;print_registry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ID not found. Check list pressing 'L'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;El usuario ingresa el ID mediante un &lt;em&gt;input()&lt;/em&gt; y es almacenado en una &lt;em&gt;variable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Sí el ID (&lt;strong&gt;key externo&lt;/strong&gt;) existe en nuestro diccionario avanzará a recorrerlo mediante un &lt;em&gt;for loop&lt;/em&gt;,
de lo contrario, imprimirá un "&lt;em&gt;ID not found&lt;/em&gt;".&lt;/li&gt;
&lt;li&gt;Preguntamos si el usuario realmente quiere borrar la &lt;strong&gt;fila&lt;/strong&gt; y almacenamos su respuesta en una 
&lt;em&gt;variable&lt;/em&gt;. Si es afirmativo, procedemos. Contrario se detiene el flujo.&lt;/li&gt;
&lt;li&gt;Pedimos al usuario, mediante un &lt;em&gt;input()&lt;/em&gt;, que escriba los nuevos nombres y los almacenamos en
&lt;em&gt;variables&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Si el usuario ha dejado en blanco &lt;strong&gt;ambos&lt;/strong&gt; campos se imprimirá "&lt;em&gt;You must write something!&lt;/em&gt;" de lo 
contrario accederemos al diccionario, a su llave externa y almacenaremos los nuevos valores. &lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#salir-del-programa"&gt;
  &lt;/a&gt;
  Salir del programa:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exit_program&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Goodbye!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usamos el método &lt;em&gt;exit()&lt;/em&gt; del modulo &lt;em&gt;built-in&lt;/em&gt; &lt;strong&gt;sys&lt;/strong&gt; para salirnos del programa e imprimiremos un &lt;br&gt;
  mensaje.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Python Beginners Tutorial: Animal registry</title>
      <author>Ricardo Aguilar</author>
      <pubDate>Mon, 13 Sep 2021 23:34:27 +0000</pubDate>
      <link>https://dev.to/ricardorien/python-beginners-tutorial-animal-registry-19g4</link>
      <guid>https://dev.to/ricardorien/python-beginners-tutorial-animal-registry-19g4</guid>
      <description>&lt;p&gt;We will write a program that will allow us to make a register of animals, with their scientific name and common name, binded by a unique ID. Using that ID we will be able to remove the animal from the register, or simply modify the names already written. Also an option to view the list of animals already registered and an option to exit the program.&lt;/p&gt;

&lt;p&gt;The goal is to generate and print a list that can be modified like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Animal Registry&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Scientific Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Common Name&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3Y99&lt;/td&gt;
&lt;td&gt;Canis Lupus Familiaris&lt;/td&gt;
&lt;td&gt;Siberian Husky&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT5R&lt;/td&gt;
&lt;td&gt;Cebinae&lt;/td&gt;
&lt;td&gt;Capuchin Monkey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8D6U&lt;/td&gt;
&lt;td&gt;Octopoda&lt;/td&gt;
&lt;td&gt;Octopus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YG0E&lt;/td&gt;
&lt;td&gt;Anthophila&lt;/td&gt;
&lt;td&gt;Bee&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JN14&lt;/td&gt;
&lt;td&gt;Dinastinae&lt;/td&gt;
&lt;td&gt;Rhinoceros Beetle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WVTA&lt;/td&gt;
&lt;td&gt;Python Regius&lt;/td&gt;
&lt;td&gt;Ball Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAZP&lt;/td&gt;
&lt;td&gt;Gorilla&lt;/td&gt;
&lt;td&gt;Gorilla&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We will work with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The PrettyTable module.&lt;/li&gt;
&lt;li&gt;Nested dictionaries.&lt;/li&gt;
&lt;li&gt;Flow control.&lt;/li&gt;
&lt;li&gt;Functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You must install PrettyTable via Pip.&lt;br&gt;
Try with:&lt;br&gt;
pip install prettytable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, we will import the necessary modules:&lt;br&gt;
&lt;em&gt;PrettyTable&lt;/em&gt; for the creation of the table where we will register the animals, &lt;em&gt;random&lt;/em&gt; and &lt;em&gt;string&lt;/em&gt; to &lt;br&gt;
generate a random ID with which we will identify the row in the record and &lt;em&gt;sys&lt;/em&gt; to exit the program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prettytable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PrettyTable&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will create an empty dictionary where we will store the animals that we are going to register.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;animal_dic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will write the conditional "if name == "main"" to avoid import errors and for good practice.&lt;br&gt;
and call our main() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;An explanation of how &lt;em&gt;if&lt;/em&gt; _&lt;em&gt;name&lt;/em&gt;_ == "_&lt;em&gt;main&lt;/em&gt;_" works is beyond the scope of this article.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions:
&lt;/h2&gt;

&lt;p&gt;Now, let's write the functions that will run our program, these will go &lt;strong&gt;BEFORE&lt;/strong&gt; the conditional "&lt;em&gt;if&lt;/em&gt; _&lt;em&gt;name&lt;/em&gt;_ == "_&lt;em&gt;main&lt;/em&gt;_"" described above. Otherwise Python would try to execute the &lt;em&gt;main()&lt;/em&gt; function when it &lt;strong&gt;has not&lt;/strong&gt; been defined, thus triggering an error.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#main-function"&gt;
  &lt;/a&gt;
  Main function:
&lt;/h3&gt;

&lt;p&gt;Now, we must bind the option chosen by the user to the functions of our program.&lt;/p&gt;

&lt;p&gt;The next step is straightforward: inside &lt;em&gt;main()&lt;/em&gt; we will force this &lt;em&gt;loop&lt;/em&gt; to run, with a &lt;em&gt;while True&lt;/em&gt;, &lt;br&gt;
it will print the instructions to &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;delete&lt;/em&gt;, &lt;em&gt;update&lt;/em&gt;, &lt;em&gt;check&lt;/em&gt; and &lt;em&gt;exit&lt;/em&gt; the program.&lt;br&gt;
We also have an &lt;em&gt;input()&lt;/em&gt; that will be the option that the user chooses and this will be stored in&lt;br&gt;
the variable &lt;em&gt;user_input&lt;/em&gt;. Pay attention to the &lt;em&gt;.lower()&lt;/em&gt; method, transform what the user enters into lower case, so we avoid typing errors. &lt;br&gt;
Finally, the conditionals. Depending on what the user chooses, a function will be called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~~~~~~~~~~~~~~~~~~ Functions(): ~~~~~~~~~~~~~~~~~~~
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ~~~~~~~~~~~~~~ User's choise ~~~~~~~~~~~~~~~
&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;instrucctions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;What do you want to do? "&lt;/span&gt;
                           &lt;span class="s"&gt;"(a, d, u, l, e): "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;add_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delete_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"u"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;update_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;print_register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;exit_program&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"please, enter something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#instructions"&gt;
  &lt;/a&gt;
  Instructions:
&lt;/h3&gt;

&lt;p&gt;We will create a function so that the user can see the options of our program along with a key to press to execute that option, and so that the user knows what to do. The options are: add animal, delete animal, update animal, check list and exit the program.&lt;br&gt;
So, it would be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;instrucctions&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Animal registry program:'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;1: Enter A or a to add new animal.'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;2: Enter D or d to delete a animal'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;3: Enter U or u to update animal.'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;4: Enter L or l to check list of animals. '&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;5: Enter E or e to exit the program.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We print the options. &lt;em&gt;'/n'&lt;/em&gt; means a line break.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#print-the-list"&gt;
  &lt;/a&gt;
  Print the list:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_registry&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PrettyTable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Scientific Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Common Name"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal_data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Animal registry"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pay attention to what happens here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To give names to the column headers we write them in &lt;strong&gt;list&lt;/strong&gt; format, and we pass it as parameter of &lt;em&gt;PrettyTable&lt;/em&gt; and store it in the variable "&lt;em&gt;x&lt;/em&gt;".&lt;/li&gt;
&lt;li&gt;Before we talk about the &lt;em&gt;for&lt;/em&gt; cycle, we must remember and be aware that we are trying to access a dictionary *&lt;em&gt;within a dictionary&lt;/em&gt;. Just to lining things up, let's compare a common* dictionary, to a &lt;em&gt;nested&lt;/em&gt; one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#dictionary"&gt;
  &lt;/a&gt;
  Dictionary:
&lt;/h4&gt;

&lt;p&gt;Where we have a collection of items stored in &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;value&lt;/strong&gt; pairs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'&lt;em&gt;name&lt;/em&gt;' is the &lt;strong&gt;key&lt;/strong&gt; and '&lt;em&gt;Adam&lt;/em&gt;' is the &lt;strong&gt;value&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'last'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Smith'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can have &lt;strong&gt;more&lt;/strong&gt; than one pair of &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;value&lt;/strong&gt; in just &lt;strong&gt;ONE&lt;/strong&gt; dictionary. '&lt;em&gt;name&lt;/em&gt;' and '&lt;em&gt;last&lt;/em&gt;' are &lt;em&gt;both&lt;/em&gt; &lt;strong&gt;keys&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nested-dictionary"&gt;
  &lt;/a&gt;
  Nested dictionary:
&lt;/h4&gt;

&lt;p&gt;The values to the outside of the dictionary, are also dictionaries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Wealth of Nations'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam Smith'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Economic Sophisms'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;' author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Frédéric Bastiat'&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt; is the &lt;strong&gt;key&lt;/strong&gt; of the &lt;em&gt;external&lt;/em&gt; dictionary, and '&lt;strong&gt;book&lt;/strong&gt;' and '&lt;strong&gt;author&lt;/strong&gt; are &lt;strong&gt;keys&lt;/strong&gt; of the &lt;em&gt;internal&lt;/em&gt; dictionary.&lt;/p&gt;

&lt;p&gt;With that in mind, let's go back to the &lt;em&gt;previous&lt;/em&gt; code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal_data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here is that we access the &lt;strong&gt;external key&lt;/strong&gt;, through &lt;em&gt;animal_data&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we access the external &lt;strong&gt;key&lt;/strong&gt;, we will have access to the internal values. It happens as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;animal_dic = Animal ID&lt;/li&gt;
&lt;li&gt;animal_dic[animal_data]["scientific_name"] = scientific name&lt;/li&gt;
&lt;li&gt;animal_dic[animal_data]["common_name"] = common name &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We enter the values of our dictionary into the &lt;strong&gt;row&lt;/strong&gt; of PrettyTable as &lt;strong&gt;a list&lt;/strong&gt;, by means of the &lt;br&gt;
method &lt;em&gt;add_row()&lt;/em&gt;. Look carefully, everything is between braces [].&lt;/p&gt;

&lt;p&gt;Finally we give a header to our table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Animal registry"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can print the list by starting the program and pressing &lt;em&gt;"l" or "L".&lt;/em&gt; Obviously, in this moment our dictionary is empty. We will see later how to enter data into it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#random-id"&gt;
  &lt;/a&gt;
  Random ID:
&lt;/h3&gt;

&lt;p&gt;We need an ID to identify our rows, this ID will serve as a &lt;em&gt;binding&lt;/em&gt;, being the external &lt;strong&gt;key&lt;/strong&gt; of our nested dictionaries. &lt;br&gt;
It is necessary, in the future, to be able to update one or both names of the animal, or to delete it definitively.&lt;br&gt;
To make it easier for the user, and to avoid creating duplicates, we will create a function that returns &lt;br&gt;
a random string. We will do it with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;random_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;
                                           &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random_string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where "&lt;em&gt;k&lt;/em&gt;" is the length of the string.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An explanation of how this function works is beyond the scope of this article.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#add"&gt;
  &lt;/a&gt;
  Add:
&lt;/h3&gt;

&lt;p&gt;Now let's make the function that will take the values typed by the user and enter them into the dictionary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Please enter the scientific name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;common_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Please enter the common name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must write something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first thing you'll notice is that we call the &lt;em&gt;random_id&lt;/em&gt; function which returns a string and store it in the &lt;em&gt;animal_id&lt;/em&gt; variable. As the name implies, it identifies the animal and the row within the record. &lt;/li&gt;
&lt;li&gt;Using the &lt;em&gt;input()&lt;/em&gt; method we ask the user to type the common and scientific name. 
and store them in variables. We use the &lt;em&gt;.title()&lt;/em&gt; method for aesthetics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's pause and look at this part of the code again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We update our nested dictionary and store it in a variable called "&lt;em&gt;data&lt;/em&gt;". So:&lt;br&gt;
&lt;em&gt;animal_id&lt;/em&gt; is the &lt;em&gt;random ID&lt;/em&gt; that our function returns. It is the external &lt;strong&gt;key&lt;/strong&gt; of this &lt;br&gt;
nested dictionary.&lt;br&gt;
'&lt;em&gt;scientific_name&lt;/em&gt;': which is in quotation marks, is the internal key.&lt;br&gt;
&lt;em&gt;scientific_name&lt;/em&gt;: which is a variable, is the internal value. Entered by the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The next block of code sets a condition where if the user &lt;strong&gt;does not&lt;/strong&gt; enter either a scientific name or a common name, print a message that he/she must do so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, in the '&lt;em&gt;else&lt;/em&gt;': if at least one of the two &lt;em&gt;input()&lt;/em&gt; have been entered, we will update the "&lt;em&gt;animal_dic&lt;/em&gt;" with the data entered by the user. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#delete-row"&gt;
  &lt;/a&gt;
  Delete row:
&lt;/h3&gt;

&lt;p&gt;Now let's write the function to delete the row of the user's choice, using the &lt;em&gt;unique ID&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the animal ID you want delete: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Delete (y/n)"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; registry has been deleted!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ID not found. Check list pressing 'L'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We ask the user to enter the ID of the row. We use the * upper () * method so that the user does not have to type in all capital letters.&lt;/li&gt;
&lt;li&gt;We create an '&lt;em&gt;if&lt;/em&gt;' that checks if the &lt;em&gt;ID entered&lt;/em&gt; by the user is in the dictionary, then give him the choice to delete it with a yes or no. If user types yes it will be deleted with a 
"&lt;strong&gt;del&lt;/strong&gt; animal_dic[animal_id]" which looks for the ID (external &lt;strong&gt;key&lt;/strong&gt;) and deletes all its internal &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;values&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;With the &lt;em&gt;else&lt;/em&gt; we declare that, if the &lt;em&gt;ID&lt;/em&gt; has not been found, it prints "ID not found"&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update:
&lt;/h3&gt;

&lt;p&gt;Perhaps the user has made a typo, and wants to change the fields in a specific row.&lt;br&gt;
There is a need for a function to update them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the animal ID you want update: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# If external key in dictionary, if key is equal to ID (animal_id)
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Update registry &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;? (y/n): "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Changing names
&lt;/span&gt;                &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write a new scientific name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;common_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write a new common name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must write something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Updating
&lt;/span&gt;                    &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;
                    &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"registry updated!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;print_registry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ID not found. Check list pressing 'L'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The user enters the ID via an &lt;em&gt;input()&lt;/em&gt; and it is stored in a &lt;em&gt;variable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If the ID (&lt;strong&gt;external key&lt;/strong&gt;) exists in our dictionary it will step through it with a &lt;em&gt;for loop&lt;/em&gt;,
otherwise, it will print an "&lt;em&gt;ID not found&lt;/em&gt;".&lt;/li&gt;
&lt;li&gt;We ask if the user really wants to delete the &lt;strong&gt;row&lt;/strong&gt; and store their answer in a 
*variable. If yes, we proceed. Otherwise the flow stops.&lt;/li&gt;
&lt;li&gt;We ask the user, using an &lt;em&gt;input()&lt;/em&gt;, to type the new names and we store them in
&lt;em&gt;variables&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If the user has left &lt;strong&gt;both&lt;/strong&gt; fields blank, it will print "&lt;em&gt;You must write something!&lt;/em&gt;" otherwise we will access the dictionary, its foreign key and store the new values. &lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#exit-the-program"&gt;
  &lt;/a&gt;
  Exit the program:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exit_program&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Goodbye!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;em&gt;exit()&lt;/em&gt; method of the &lt;em&gt;built-in&lt;/em&gt; &lt;strong&gt;sys&lt;/strong&gt; module to exit the program and print a message. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full code:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/RicardoRien/animal_registry"&gt;https://github.com/RicardoRien/animal_registry&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>React controlled props pattern</title>
      <author>Azeez Lukman</author>
      <pubDate>Mon, 13 Sep 2021 22:10:53 +0000</pubDate>
      <link>https://dev.to/robogeek95/react-controlled-props-pattern-3ej1</link>
      <guid>https://dev.to/robogeek95/react-controlled-props-pattern-3ej1</guid>
      <description>&lt;p&gt;State management is an important factor when developing applications that scale, that's why react existed in the first place.&lt;/p&gt;

&lt;p&gt;Normally, you would control the state of a component from within its internal state. But there are a few instances where you want to be able to override the internal state of a component and control the state from the parent component such as updating content when something happens outside the component. This is easily achieved with the controlled props pattern. For example, you have a dropdown that keeps track of its own &lt;code&gt;open&lt;/code&gt; state internally. But we want the parent component to be able to update the state of the component based on some other logic.&lt;/p&gt;

&lt;p&gt;This article walks you through a pattern to create Controlled React Components with Control Props.&lt;/p&gt;

&lt;p&gt;Controlled Components&lt;/p&gt;

&lt;p&gt;Form Elements like &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, and &lt;code&gt;select&lt;/code&gt; that takes input from the user, by default, maintain state (values) within the DOM layer. Components that delegate their state to the browser are known as uncontrolled components.&lt;br&gt;
But more often you want to be in charge of these values and probably control the presentation. This arises the need for controlled components. Controlled components instead keep that state inside of React either in the component rendering the input, or a parent component somewhere in the Virtual DOM.&lt;br&gt;
Passing in value and an onChange handler to the form element changes it from an uncontrolled component to a controlled one since you now manage the state within the react app&lt;br&gt;
React documentation covers controlled components perfectly fine, so there's no need to go over it here.&lt;/p&gt;

&lt;p&gt;Applying controlled components to manage UI state&lt;/p&gt;

&lt;p&gt;You have seen how you can delegate form element state to the browser or take charge of it within your react application. Similarly, people want to manage the internal state of our components from the parent components. We can apply the concept of controlled components, this is known as the controlled props pattern.&lt;br&gt;
The concept of controlled props is basically the same as controlled form elements in React that you’ve probably come across many times.&lt;/p&gt;

&lt;p&gt;I would be presenting the code examples in it's barebones so you get to focus on just what you need&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-uncontrolled-props-pattern"&gt;
  &lt;/a&gt;
  The uncontrolled props pattern
&lt;/h2&gt;

&lt;p&gt;The component does not need to be externally controlled and the state can be local to the component. Basically, an uncontrolled component manages its own state internally.&lt;br&gt;
To create an uncontrolled component, instantiate your component with the default state, it will begin with the value of that property and will manage its own local state over the lifetime of the component (making calls to &lt;code&gt;setState()&lt;/code&gt; in response to user interaction).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Robogeek95/embed/BaZzgoz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-controlled-props-pattern"&gt;
  &lt;/a&gt;
  The controlled props pattern
&lt;/h2&gt;

&lt;p&gt;This pattern enables you to control a component UI state from the parent component.&lt;br&gt;
This is done by handling the callback and managing the state within the parent component. The state and the method for updating the state are passed as props to the component. The component then becomes a controlled component.&lt;br&gt;
To create a controlled component, you declare the state and function to update it in the parent component, these are then passed into the controlled component as props. The component is initialized with the prop state and when the state needs to be updated, the callback function prop for updating the state is triggered. After that update propagates, the containing component should end up re-rendering and sending a new state prop to the controlled component.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Robogeek95/embed/mdwEZbb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#control-state-both-ways"&gt;
  &lt;/a&gt;
  Control state both ways
&lt;/h2&gt;

&lt;p&gt;You can make your component more flexible by letting the component use its internal state and also be overridden by a parent's state!&lt;br&gt;
The component can then be either a controlled component when you declare your state value and the function to update it in the parent component then pass it to the component. Or an uncontrolled component these props are not passed in, allowing your component to manage its state internally. You just think of this as a switch mechanism between both patterns.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Robogeek95/embed/gORMJqY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You have learned a pattern that allows you to bring the concept of controlled form components to manage state UI known as controlled props pattern in contrast to the uncontrolled props pattern which is the regular way of managing state internally and how to use the two patterns together for even more superpowers.&lt;br&gt;
This pattern gives users of your component a whole lot of control over how your component interacts with the user. This is just its basic usage, there are a lot more ways to implement the control props pattern.&lt;br&gt;
Thank you for reading, I hope you learned as much as I did.&lt;/p&gt;

</description>
      <category>advanced</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building a culture of trust — with Metrics — at Slack </title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 13 Sep 2021 21:58:26 +0000</pubDate>
      <link>https://dev.to/linearb/building-a-culture-of-trust-with-metrics-at-slack-2egc</link>
      <guid>https://dev.to/linearb/building-a-culture-of-trust-with-metrics-at-slack-2egc</guid>
      <description>&lt;p&gt;Rukmini Reddy, VP of Engineering at Slack, has a truly inspiring origin story. As a student growing up in India, she hated that all of the girls in her class were forced to learn sewing. When she was offered the chance to go to her school’s computer lab instead, she never looked back.&lt;/p&gt;

&lt;p&gt;She joins the &lt;a href="https://open.spotify.com/episode/3SZul4mXqjZ0uAYpU9aksi?si=3dCuthEGQMqkmyOoQHIfLA&amp;amp;dl_branch=1"&gt;Dev Interrupted podcast&lt;/a&gt; to talk about her journey into software engineering, how she transitioned to a leadership role and what it was like to onboard at Slack during the pandemic. Her and Dan also have a lively discussion on engineering metrics and how data can provide a “shared view of reality” when it comes to making tough decisions as a leader.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3SZul4mXqjZ0uAYpU9aksi"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Her journey into software engineering&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conquering self-doubt and imposter syndrome as a woman of color&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slack’s culture and core values&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How high trust enables hypergrowth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data as a way to provide a shared view of reality&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT&lt;/strong&gt;: An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;If you haven’t already joined the best developer discord out there, WYD?&lt;/p&gt;

&lt;p&gt;Look, I know we talk about it a lot but we love our developer discord community. With over 1600 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No salespeople allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghKqRKWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79p55zb3q4hh0drifmdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghKqRKWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79p55zb3q4hh0drifmdu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/building-a-culture-of-trust-with-metrics-at-slack/"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>techtalks</category>
      <category>podcast</category>
      <category>culture</category>
    </item>
    <item>
      <title>ASP.NET Core 6: Multi-tenant Single Database (Parte 2)</title>
      <author>Isaac Ojeda</author>
      <pubDate>Mon, 13 Sep 2021 21:50:18 +0000</pubDate>
      <link>https://dev.to/isaacojeda/asp-net-core-6-multi-tenant-single-database-parte-2-4cbh</link>
      <guid>https://dev.to/isaacojeda/asp-net-core-6-multi-tenant-single-database-parte-2-4cbh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introducci%C3%B3n"&gt;
  &lt;/a&gt;
  Introducción
&lt;/h1&gt;

&lt;p&gt;Seguimos con la continuación de esta serie de posts sobre aplicaciones multi-tenant con asp.net core. &lt;/p&gt;

&lt;p&gt;En este post veremos como implementar una aplicación multi-tenant con una base de datos que contenga todos los tenants.&lt;/p&gt;

&lt;p&gt;Veremos las ventajas y desventajas y la razón de porque podríamos utilizar este approach.&lt;/p&gt;

&lt;p&gt;Te vuelvo a recordar que esta serie de posts viene con muchos code snippets, es mejor que lo leas siguiendo el repositorio en &lt;a href="https://github.com/isaacOjeda/DevToPosts/tree/main/MultiTenantSingleDatabase"&gt;Github con el ejemplo final.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esta serie de posts se dividen en 3 partes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/isaacojeda/asp-net-core-6-creando-una-app-multi-tenant-parte-1-3df5"&gt;ASP.NET Core 6: Creando una app Multi-tenant (Parte 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ASP.NET Core 6: Multi-tenant Single Database (Parte 2) (este post)&lt;/li&gt;
&lt;li&gt;ASP.NET Core 6: Multi-tenant Multi-Database (Parte 3) (próximamente)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#tipos-de-multitenancy-single-database"&gt;
  &lt;/a&gt;
  Tipos de multi-tenancy single database
&lt;/h1&gt;

&lt;p&gt;Como vimos en el post pasado, podemos tener distintas arquitecturas al crear aplicaciones SaaS. En este caso vamos a hablar sobre como tener múltiples tenants en una misma base de datos.&lt;/p&gt;

&lt;p&gt;Cabe mencionar que es importante analizar si nos conviene esta modalidad ya que tiene sus desventajas pero en ciertos escenarios, sus ventajas.&lt;/p&gt;

&lt;p&gt;Siempre debemos de analizar que necesitamos, porque al guardar información de nuestros usuarios, debemos considerar siempre la seguridad, mantenibilidad y escalabilidad.&lt;/p&gt;

&lt;p&gt;Una base de datos lenta hace un sistema lento. Una base de datos insegura, filtra información. Una base de datos inmantenible, no dará soluciones a futuro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schemabased"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Schema-based.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Una sola base de datos para todos los tenants y cada tenant tiene su propio esquema en la base de datos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raVGik-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7sve0t748xg10zgy3gp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raVGik-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7sve0t748xg10zgy3gp.png" alt="Untitled"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seguridad"&gt;
  &lt;/a&gt;
  Seguridad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;✔️ La información entre tenants se mantiene aislada, ya que cada uno tendrá su propio esquema.&lt;/li&gt;
&lt;li&gt;✔️ Filtrar información entre tenants tiene un riesgo bajo, ya que no necesitas de un WHERE para limitar la información entre Tenants.&lt;/li&gt;
&lt;li&gt;❌ Aun así, puedes hacer queries al esquema equivocado y consultar un tenant totalmente diferente.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mantenibilidad"&gt;
  &lt;/a&gt;
  Mantenibilidad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;✔️ Manejar una base de datos sigue siendo una ventaja al darle mantenimiento.&lt;/li&gt;
&lt;li&gt;✔️ También, al tener esquemas diferentes podemos tener un &lt;strong&gt;scope&lt;/strong&gt; de cada tenant.&lt;/li&gt;
&lt;li&gt;❌ Actualizar los esquemas será doloroso, más si se tienen muchos tenants&lt;/li&gt;
&lt;li&gt;❌ No se puede restaurar un solo tenant, ya que sigue siendo una sola base de datos&lt;/li&gt;
&lt;li&gt;❌ Agregar nuevos tenants involucra agregar un esquema totalmente nuevo, una BD con muchas tablas será problema&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#escalabilidad"&gt;
  &lt;/a&gt;
  Escalabilidad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;✔️ La información está particionada en tablas pequeñas&lt;/li&gt;
&lt;li&gt;✔️ Optimizar tablas se podría hacer por tenant&lt;/li&gt;
&lt;li&gt;❌ Al ser una sola base de datos y un servidor, se limita la escalabilidad a un solo hardware&lt;/li&gt;
&lt;li&gt;❌ Riesgo de "noisy neighbors" — Un tenant puede impactar el rendimiento de otros tenants&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tablebased%E2%80%8E"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table-based.&lt;/strong&gt;‎
&lt;/h2&gt;

&lt;p&gt;De igual forma, una base de datos para todos los tenants y todos comparten el mismo esquema. La forma de aislar los tenants se realiza por medio de un Identificador en todas las tablas.&lt;/p&gt;

&lt;p&gt;Personalmente prefiero esta modalidad si usamos Single database, y en este post haremos un ejemplo usando esta modalidad.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kyXlYw5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afrp6u98prs1njbs81s7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kyXlYw5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afrp6u98prs1njbs81s7.png" alt="Untitled 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seguridad"&gt;
  &lt;/a&gt;
  Seguridad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;❌ Existe un riesgo alto de exponer información entre tenants pero existen varias mitigaciones para eliminar este riesgo.

&lt;ul&gt;
&lt;li&gt;✔️ El ejemplo que haremos en este post, será configurar Entity Framework para que haga Queries de forma automática según el tenant actual, reduciendo a 0 el riesgo de filtración a nivel aplicación.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;❌ No existe aislamiento entre tenants&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mantenibilidad"&gt;
  &lt;/a&gt;
  Mantenibilidad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;✔️ Fácil de mantener por ser una sola base de datos con un solo esquema&lt;/li&gt;
&lt;li&gt;✔️ Fácil de recuperar en caso de un desastre o caídas prolongadas&lt;/li&gt;
&lt;li&gt;✔️ Agregar tenants nuevos es fácil, no hay que hacer ninguna modificación al esquema.&lt;/li&gt;
&lt;li&gt;❌ Queries pueden ser riesgosos de modificar Tenants no deseados

&lt;ul&gt;
&lt;li&gt;Mitigación: Row-Level Security puede ser usado para controlar el acceso de los rows en las tablas&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;❌ Si usamos RLS, se debe de actualizar en cada tabla nueva que agregamos&lt;/li&gt;
&lt;li&gt;❌ Sería difícil restaurar información de un solo tenant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#escalabilidad"&gt;
  &lt;/a&gt;
  Escalabilidad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;❌ Solo se podría hacer scale-up (agregar más hardware) y no distribuirlo de forma horizontal (scale-out)&lt;/li&gt;
&lt;li&gt;❌ Mismo problema de "Noisy neighbors"&lt;/li&gt;
&lt;li&gt;❌ Si la base de datos crece (cada tenant tiene mucha información) las actividades de mantenimiento tardarán más y potencialmente afectará a otros tenants&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#por-qu%C3%A9-la-modalidad-tablebased"&gt;
  &lt;/a&gt;
  ¿Por qué la modalidad &lt;strong&gt;table-based&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;Realmente por experiencias que he tenido en microservicios, me gusta esta modalidad.&lt;/p&gt;

&lt;p&gt;Sí debemos de tener en cuenta los factores mencionados arriba, una base de datos grande y con mucha información por tenant, definitivamente &lt;strong&gt;ninguna de estas será la solución&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para estos casos, el siguiente post con multi-database será una solución muy buena. Pero para bases de datos relativamente pequeñas, sí es una buena opción.&lt;/p&gt;

&lt;p&gt;Un microservicio usualmente tiene esquemas pequeños, eso lo hace fácil de manejar. Podría ser que las tablas sí crezcan mucho, pero al ser pocas tablas de manejar, podría ser viable alguna de estas dos opciones.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#multitenant-dbcontext-una-db-para-todos-"&gt;
  &lt;/a&gt;
  MultiTenant DbContext (una DB para todos 🧙🏽‍♂️)
&lt;/h1&gt;

&lt;p&gt;Para continuar con este ejemplo en ASP.NET Core, tenemos que seguir utilizando la solución del &lt;a href="https://dev.to/isaacojeda/asp-net-core-6-creando-una-app-multi-tenant-parte-1-3df5"&gt;ejemplo anterior&lt;/a&gt; (la dejamos preparada para lo mismo).&lt;/p&gt;

&lt;p&gt;Para comenzar, crearemos un nuevo &lt;code&gt;DbContext&lt;/code&gt; en la solución con una tabla de ejemplo &lt;code&gt;Product&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AuditableEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ProductId&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La clase padre &lt;code&gt;AuditableEntity&lt;/code&gt; nos servirá para obligar que todos los Entities tengan ciertas propiedades y eso nos ayudará a crear un aislamiento y manejo de nuestros Entities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuditableEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;TenantId&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;ModifiedAt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aquí simplemente estamos agregando el campo &lt;code&gt;TenantId&lt;/code&gt; (es obligatorio para todos los entities) y además unas propiedades adicionales para control de ellas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aquí podemos agregar Ids de usuarios que crearon/modificaron los registros para que realmente sea un Entity Auditable.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Z.EntityFramework.Plus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultiTenantDbContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;_tenantId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MultiTenantDbContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;DbContextOptions&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MultiTenantDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IHttpContextAccessor&lt;/span&gt; &lt;span class="n"&gt;contextAccessor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;currentTenant&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contextAccessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;GetTenant&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;_tenantId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentTenant&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AuditableEntity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TenantId&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;_tenantId&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Products&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;SaveChangesAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CancellationToken&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ChangeTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AuditableEntity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;EntityState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Added&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TenantId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_tenantId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UtcNow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;EntityState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModifiedAt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UtcNow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChangesAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aquí se complicaron un poco las cosas. Pero antes de explicarlo, necesitamos una librería que nos ayude con este truco de EF Core.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Z.EntityFramework.Plus.EFCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.0-preview.7.21378.4-4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo que está sucediendo aquí realmente es sencillo:&lt;/p&gt;

&lt;p&gt;Primero que nada, utilizando &lt;code&gt;IHttpContextAccessor&lt;/code&gt; estamos accediendo al &lt;code&gt;HttpContext&lt;/code&gt; de la solicitud actual y a su vez nos da el Tenant que se quiere acceder.&lt;/p&gt;

&lt;p&gt;Si no existe ningún &lt;code&gt;HttpContext&lt;/code&gt; (puede ser alguna inicialización o similar) de entrada no se podrán hacer Queries ya que es requisito saber que Tenant se está accediendo para poder mostrar información.&lt;/p&gt;

&lt;p&gt;Tal vez aquí no es lo más optimo, talvez podemos crear un &lt;code&gt;ITenantAccessor&lt;/code&gt; y llenarlo de formas personalizadas (y no siempre de un HttpContext) pero por ahora, el ejemplo será así.&lt;/p&gt;

&lt;p&gt;En el mismo constructor de &lt;code&gt;MultiTenantDbContext&lt;/code&gt; se está configurando para que siempre agregue una cláusula &lt;strong&gt;WHERE&lt;/strong&gt; a cualquier query que se haga en el contexto, esto utilizando la librería &lt;strong&gt;Z.EntityFramework.Plus.EFCore&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esta es la parte donde nos aseguramos que exista un aislamiento (al menos uno lógico) y se puedan realizar Queries de forma segura.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ Nota: &lt;em&gt;Cabe mencionar, que esta medida de seguridad solo funciona si se usa el &lt;code&gt;DbContext&lt;/code&gt;directamente, cualquier raw SQL está potencialmente propenso a fugas de información.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;El método &lt;code&gt;SaveChangesAsync&lt;/code&gt; simplemente es para actualizar cualquier Entity que se haya creado o modificado. Esto no tiene mucho que ver con la BD multi-tenant, pero es buena idea que las operaciones sean auditables.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#integraci%C3%B3n-con-aspnet"&gt;
  &lt;/a&gt;
  Integración con ASP.NET
&lt;/h1&gt;

&lt;p&gt;Para poder crear la base de datos y empezar a hacer pruebas, tenemos que registrar este nuevo &lt;code&gt;DbContext&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MultiTenantDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSqlServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MultiTenant"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Teniendo ya las siguientes connection strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"ConnectionStrings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"TenantAdmin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Server=(localdb)&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;mssqllocaldb;Database=MultiTenant_Admin;Trusted_Connection=True;MultipleActiveResultSets=true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"MultiTenant"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Server=(localdb)&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;mssqllocaldb;Database=MultiTenantSingleDb;Trusted_Connection=True;MultipleActiveResultSets=true"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como en el post anterior, ejecutamos los siguientes comandos para crear la primera migración y crear la base de datos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet ef database add FirstMigration &lt;span class="nt"&gt;--context&lt;/span&gt; MultiTenantDbContext &lt;span class="nt"&gt;-o&lt;/span&gt; Persistence/Migrations/MultiTenant
dotnet ef database update &lt;span class="nt"&gt;--context&lt;/span&gt; MultiTenantDbContext
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como ya contamos con dos &lt;code&gt;DbContext&lt;/code&gt; en el proyecto, cada comando &lt;code&gt;ef&lt;/code&gt; que hagamos, debemos especificar a que contexto nos estamos refiriendo.&lt;/p&gt;

&lt;p&gt;Y nos creará lo siguiente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sFncQXTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b4c1njicih2mz111e1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sFncQXTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b4c1njicih2mz111e1s.png" alt="Untitled 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iArk4Nzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qtijbxomnrttb01qvum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iArk4Nzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qtijbxomnrttb01qvum.png" alt="Untitled 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Es por eso que desde el post pasado, especificamos el &lt;strong&gt;output&lt;/strong&gt; de la migración.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#por-qu%C3%A9-dos-bases-de-datos"&gt;
  &lt;/a&gt;
  ¿Por qué dos bases de datos?
&lt;/h2&gt;

&lt;p&gt;Es recomendable tener una Base de datos "compartida" o "principal" para que en esta podamos guardar meta-data. Es decir, información que describan nuestros tenants, catálogos compartidos y entre otras cosas.&lt;/p&gt;

&lt;p&gt;En multi-database esta base de datos compartida será de vital importancia.&lt;/p&gt;

&lt;p&gt;Además, para agregar tenants nuevos, solo tendríamos que agregar un registro a la tabla &lt;strong&gt;Tenants&lt;/strong&gt; dentro del contexto &lt;code&gt;TenantAdminDbContext&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h1&gt;

&lt;p&gt;Para hacer pruebas, agregaremos datos de prueba.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--llckNzXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4volwzfrqalnwj7b0u7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--llckNzXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4volwzfrqalnwj7b0u7t.png" alt="Untitled 4"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Desde el post anterior estamos utilizando Razor Pages, por lo que haremos una consulta directamente en nuestro &lt;code&gt;PageModel&lt;/code&gt; (en este caso, uno llamado &lt;strong&gt;Products.cshtml&lt;/strong&gt;) y así comprobar que cuando estamos en &lt;strong&gt;localhost&lt;/strong&gt;, solo nos debe de regresar &lt;strong&gt;Product 1&lt;/strong&gt; y &lt;strong&gt;Product 2&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.RazorPages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductsModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PageModel&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;MultiTenantDbContext&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ProductsModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MultiTenantDbContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Products&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;OnGet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Products&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToListAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como pueden ver aquí, simplemente estamos enlistando todos los productos de la tabla, aquí se encuentran mezclados entre tenants, pero el Filter base que pusimos &lt;strong&gt;hará que estén aislados&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@page
@model MultiTenantSingleDatabase.Pages.ProductsModel
@{
}

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Productos&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"table"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Product Id&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Description&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
        @foreach (var product in Model.Products)
        {
            &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;@product.ProductId&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;@product.Description&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        }
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como resultado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0sqKJWyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ku4zf1caznsty2rc615.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0sqKJWyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ku4zf1caznsty2rc615.png" alt="Untitled 5"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Si visitamos otro tenant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sch_gnPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd50ydmv07yvqjkf4w9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sch_gnPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd50ydmv07yvqjkf4w9x.png" alt="Untitled 6"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h1&gt;

&lt;p&gt;Podríamos pensar que esta modalidad de hacer aplicaciones multi-tenants tiene más desventajas que ventajas. Pero si analizamos la situación correctamente, podría ser nuestro proyecto candidato para hacer un multi-tenancy con single database y funcionar perfectamente.&lt;/p&gt;

&lt;p&gt;Cuéntame ¿Cómo ves está opción? yo soy totalmente C# Developer y manejar todo desde C# siempre es lo que hago, crear Raw SQL queries es algo que no hago muy seguido.&lt;/p&gt;

&lt;p&gt;Y recuerda,&lt;/p&gt;

&lt;p&gt;Code4Fun 👍🏽.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#referencias"&gt;
  &lt;/a&gt;
  Referencias
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://blakebhowe.medium.com/multi-tenant-application-database-design-e4c2d161f3dd"&gt;Multi-tenant Application Database Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sentryone.com/blog/multi-tenancy-with-sql-server-part-2-approaches"&gt;Multi-Tenancy with SQL Server, Part 2: Database Design Approaches&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-sql/database/saas-tenancy-app-design-patterns"&gt;Multi-tenant SaaS patterns - Azure SQL Database&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>aspnetcore</category>
      <category>csharp</category>
      <category>multitenant</category>
    </item>
    <item>
      <title>7 Golden Tips While Redesigning Your Website</title>
      <author>bruceaustin04</author>
      <pubDate>Mon, 13 Sep 2021 21:37:12 +0000</pubDate>
      <link>https://dev.to/bruceaustin04/7-golden-tips-while-redesigning-your-website-406e</link>
      <guid>https://dev.to/bruceaustin04/7-golden-tips-while-redesigning-your-website-406e</guid>
      <description>&lt;p&gt;The process of redesigning a website can be stressful, confusing, and time-consuming. It's understandable if you feel overwhelmed by the amount of information you need to know in order to create a new, fresh design. But, you can avoid making mistakes, and you can achieve your goals if you take the time to educate yourself and get hands-on experience. To help you get started, here are seven golden tips for redesigning your website:&lt;/p&gt;

&lt;p&gt;When you think of redesigning your website, you probably think big and bold. It's a perfect time to create a powerful and dramatic new look to your website. But the world is a little different than what you might expect.&lt;/p&gt;

&lt;p&gt;A great way to start is by considering the importance of a visitors' first impression. Sometimes we jump to our websites with the goal of looking at our work and moving forward. But there are many times when a visitor has no idea what they are looking at.So, take a few minutes to develop a strategy on how you want to present yourself to visitors.&lt;/p&gt;

&lt;p&gt;When redesigning a website, there's no better way to make sure you &lt;a href="https://psdtowpservice.com/wordpress-customization-service/"&gt;get the job done from professionals&lt;/a&gt;. If you can't find a designer or developer that's up to speed, but you want to learn, it's time to expand your network and use the power of social media to help.&lt;/p&gt;

&lt;h2&gt;1. Don't use the same layout as your old site.&lt;/h2&gt;

&lt;p&gt;Nothing makes life more difficult than an old site that looks the same as before. If you’re planning on redesigning your website, do it right. Start by identifying the look and feel of your old site and what it does.&lt;/p&gt;

&lt;p&gt;Then, create a style guide that shows the direction of your new site.We recently redesigned our website from the ground up with a new logo, new colors, and a better overall feel. This means we have updated our old site to match, so we can share the same layout as before. We also wanted to make sure our blog was still as helpful as possible.&lt;/p&gt;

&lt;p&gt;A lot of people are stuck with a layout they don't like and don't know how to change it. A lot of times it's not easy to change and, in some cases, it's not even possible because you don't have an HTML template. And, because you don't have an HTML template, you have to create that layout from scratch. And, this is where things get complicated for a lot of people.&lt;/p&gt;

&lt;p&gt;For years, site publishers have been forced to use the same layout for the same website. The reason for this is that they were able to choose from a few designs that were already perfected by designers. Now, with rapid changes in design trends, you are expected to come up with a fresh design. Since you are not able to follow the same process as earlier, design your new layout with a different approach.&lt;/p&gt;

&lt;h2&gt;2. Use a responsive design when building your site&lt;/h2&gt;

&lt;p&gt;Responsive design has become increasingly important in web design lately. To understand why, let's take a look at a site that doesn't &lt;a href="https://psdtowpservice.com/4-ways-to-convert-your-psd-sketch-into-a-responsive-website/"&gt;use responsive design&lt;/a&gt;—let's say, a newspaper or magazine site. When you visit that site, you'll notice that it has a fixed layout. That means it has a fixed width and fixed height. If you did a Google search for that site, you'll notice that your results will be returned in a fixed width, fixed height view of the site. That means that your browser will have to "remember" the width and height of the site each time you visit it. This can be very frustrating.&lt;/p&gt;

&lt;p&gt;When building a website, the possibilities are endless, but when you split your time between multiple projects, the next thing you know, you’re overworked, underpaid, and exhausted. If the idea of having multiple projects at any given time doesn’t scare you away. Responsive design has become increasingly important in web design lately.&lt;/p&gt;

&lt;p&gt;To understand why, let's take a look at a site that doesn't use responsive design—let's say, a newspaper or magazine site. When you visit that site, you'll notice that it has a fixed layout. That means it has a fixed width and fixed height.&lt;/p&gt;

&lt;p&gt;If you did a Google search for that site, you'll notice that your results will be returned in a fixed width, fixed height view of the site. That means that your browser will have to "remember" the width and height of the site each time you visit it. This can be very frustrating.&lt;/p&gt;

&lt;h2&gt;3. Be honest about your experience and skills&lt;/h2&gt;

&lt;p&gt;What your competitors have done and what features you should keep. But instead of following their example blindly, ask yourself what makes your website special. It's important to keep in mind that your visitors won't want to spend time on your website if they don't have anything to use. Make sure you provide them with something concrete and useful.&lt;/p&gt;

&lt;p&gt;There are a lot of people out there who have a website. But they all seem to be doing something different. They write, sell, offer help, or have a blog. It seems as though there is no one-size-fits-all approach to landing search traffic and &lt;a href="https://www.business2community.com/content-marketing/techniques-to-warm-up-your-cold-traffic-and-build-connections-02262097"&gt;converting visitors into customers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having a stable professional background on the internet is a great thing for your resume, but it doesn't mean it's enough. In the eyes of a potential employer, chronicling how awful your old job was might not be the best way to get the job. So can you talk about your old job without getting into the dirt?&lt;/p&gt;

&lt;p&gt;Yes you can, and it's not about lying or exaggerating. Being honest is a great thing for your resume, but it doesn't mean it's enough. In the eyes of a potential employer, chronicling how awful your old job was might not be the best way to get the job. So can you talk about your old job without getting into the dirt? Yes you can, and it's not about lying&lt;/p&gt;

&lt;h2&gt;4. Don't use pop ups&lt;/h2&gt;

&lt;p&gt;You've seen them, a popup ad or blinking banner that has suddenly appeared in the middle of your website. No matter what the popup says, they all have one thing in common: they're annoying. So, why would you want to have one of these annoying ads on your site?&lt;/p&gt;

&lt;p&gt;Well, maybe you're getting a lot of clicks from your visitors right now. Or, maybe you want to try some analytics to see where your visitors are coming from. Either way, you want to find out what your visitors do after they get to your site so that you can improve on your conversion rates.&lt;/p&gt;

&lt;p&gt;Most of us have used a pop up in the past. The idea was to get some attention for something we deemed important. Unfortunately the bad stuff was what people remembered. A pop up is a form that works quickly. No one will read it, no one will click it, and no one will even see it until it is too late.&lt;/p&gt;

&lt;h2&gt;5. Use Google Fonts to redesign your website &lt;/h2&gt;

&lt;p&gt;Google Fonts are one of the many tools that Google provides to web designers to help them design their websites with a variety of different fonts and styles. You can use Google Fonts by going to Google Fonts, creating a custom font and then uploading it to your website.&lt;/p&gt;

&lt;p&gt;While not everyone has the budget to &lt;a href="https://psdtowpservice.com/wordpress-expert/"&gt;hire a full-time designer&lt;/a&gt;, everyone can benefit from incorporating some of the typefaces Google offers into their website. Google Fonts is a free library of fonts that are available to download by anyone. These fonts are easily added to a website's HTML code by adding them directly to the &amp;lt;head&amp;gt; section.&lt;/p&gt;

&lt;p&gt;The possibilities for typeface combinations are endless, and you can see some of the results below.Google Fonts are a great way to make your website more beautiful and unique. You can change the colors, sizes, and the styles of fonts, and you don't have to worry about the compatibility issues with older browsers.&lt;/p&gt;

&lt;h2&gt;6. Keep your website updated&lt;/h2&gt;

&lt;p&gt;Make sure your website is updated and your subscribers are always up to date. Make sure you read your emails and respond to them immediately. Don't let your subscribers have to keep contacting you for answers. &lt;/p&gt;

&lt;p&gt;Always try to keep your subscribers up to date on the latest news, events, and so on. If you're interested in finding out more about anything, your subscribers will be interested in it too. When you decide to redesign a website, you may be fairly confident in your choice, but have you considered all the things you can do to keep your site updated?&lt;/p&gt;

&lt;h2&gt;7. Consider having a pre-launch page&lt;/h2&gt;

&lt;p&gt;There are many people out there who have a website that is well past its usefulness; and they want to redesign it so they can make it more user friendly and to &lt;a href="https://christianmarketingexperts.com/seo/"&gt;get better search engine rankings&lt;/a&gt;. Additionally, they want to create a new website that is going to serve all their future needs. The problem is they have never built a website before. So what can they do?&lt;/p&gt;

&lt;p&gt;Most website owners know that having a pre-launch page can help to get more traffic to your new design, but what about those that don't yet know your new design? You can help them out by "pre-launching" your new design.&lt;/p&gt;

&lt;p&gt;What this means is publishing a page on your website that will look exactly the same as your new design, but will serve as a placeholder when visitors to your website land on it. That way, when you do publish your new design, visitors will be able to immediately see your new design.&lt;/p&gt;

</description>
      <category>website</category>
      <category>design</category>
    </item>
    <item>
      <title>VueJS - Componente Reutilizável de Carregamento de Dados</title>
      <author>Pablo Veiga</author>
      <pubDate>Mon, 13 Sep 2021 21:13:13 +0000</pubDate>
      <link>https://dev.to/vcpablo/vuejs-componente-reutilizavel-de-carregamento-de-dados-226f</link>
      <guid>https://dev.to/vcpablo/vuejs-componente-reutilizavel-de-carregamento-de-dados-226f</guid>
      <description>&lt;p&gt;É possível contar com os dedos de uma mão as aplicações web ao redor do mundo que não precisam realizar carregamento de dados remotos e exibi-los aos usuários.&lt;/p&gt;

&lt;p&gt;Então, assumindo que a sua próxima &lt;em&gt;Single Page Application&lt;/em&gt; (construída usando VueJS, logicamente 😍) vai precisar obter dados de um servidor remoto, eu gostaria de te ensinar a construir um componente reutilizável que vai ser responsável por gerenciar a visualização de estado de outros componentes que dependem de carregamento de dados e prover, facilmente, feedback para seus usuários.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#come%C3%A7ando-pelo-come%C3%A7o"&gt;
  &lt;/a&gt;
  Começando pelo começo
&lt;/h2&gt;

&lt;p&gt;Inicialmente, é preciso ter em mente o quão importante é a exibição correta do estado atual da aplicação para que os usuários saibam o que está acontecendo e o que esperar dela.&lt;br&gt;
Isso vai fazer com que eles não fiquem em dúvida se a interface travou enquanto esperam informações serem carregadas e também informá-los caso ocorra algum erro para que possam entrar em contato com o suporte imediatamente, se necessário.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#padr%C3%A3o-loading-error-data-carregamento-erro-dado"&gt;
  &lt;/a&gt;
  Padrão Loading / Error / Data (Carregamento / Erro / Dado)
&lt;/h3&gt;

&lt;p&gt;Eu não tenho certeza se é um padrão "oficial" (me mande uma mensagem caso você saiba algo a respeito) mas esta é uma forma muito fácil de implementar e que vai ajudar você a organizar a exibição do estado da sua aplicação de forma bastante simples.&lt;/p&gt;

&lt;p&gt;Considere o objeto abaixo. Ele representa o estado inicial de uma lista de &lt;code&gt;users&lt;/code&gt; (usuários):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ao construir objetos neste formato, você poderá alterar o valor de cada atributo de acordo com o que está acontecendo na sua aplicação e utilizá-los para exibir na tela qualquer coisa de acordo com cada estado por vez. Portanto, quando a aplicação estiver carregando os dados, basta setar &lt;code&gt;loading&lt;/code&gt; para &lt;code&gt;true&lt;/code&gt; e quando o carregamento for concluído, setar para &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De forma similar, &lt;code&gt;error&lt;/code&gt; e &lt;code&gt;data&lt;/code&gt; também devem ser atualizados de acordo com o resultado da chamada ao back end: se algum erro ocorreu, você pode atribuir a mensagem ao atributo &lt;code&gt;error&lt;/code&gt; e, caso a requisição tenha sido concluída e o dado entregue com sucesso, basta atribuí-lo ao atributo &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#especializando"&gt;
  &lt;/a&gt;
  Especializando
&lt;/h2&gt;

&lt;p&gt;Um objeto de estado, como explicado acima, ainda é muito genérico. Vamos inseri-lo no contexto de uma aplicação VueJS.&lt;br&gt;
Faremos isso implementando um componente utilizando &lt;a href="https://br.vuejs.org/v2/guide/components-slots.html"&gt;&lt;code&gt;slots&lt;/code&gt;&lt;/a&gt;, o que vai nos permitir passar o dado recebido pelo componente Fetcher para os componentes filho. &lt;/p&gt;

&lt;p&gt;De acordo com a documentação do VueJS:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vue implementa uma API de distribuição de conteúdo que é modelada após o atual detalhamento da especificação dos componentes da Web, usando o elemento &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; para servir como saída de distribuição de conteúdos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para iniciar, crie uma estrutura básica de um componente Vue e implemente o objeto &lt;code&gt;users&lt;/code&gt; como variável reativa dentro de &lt;code&gt;data&lt;/code&gt; conforme o exemplo abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, crie o método responsável por fazer o request, carregar os dados e atualizar a variável de estado. Perceba que fazemos a chamada ao método que carrega os dados no hook &lt;code&gt;created&lt;/code&gt; para que seja executado assim que o componente for criado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/services/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nl"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O próximo passo é implementar o &lt;code&gt;template&lt;/code&gt; que irá exibir elementos diferentes de acordo com os estados de &lt;em&gt;Loading&lt;/em&gt; (carregando), &lt;em&gt;Error&lt;/em&gt; (erro) e &lt;em&gt;Data&lt;/em&gt; (dados) usando &lt;code&gt;slots&lt;/code&gt; para passar o valor de &lt;code&gt;data&lt;/code&gt; para componentes filhos, caso esteja definido.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"users.loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Loading...
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-else-if=&lt;/span&gt;&lt;span class="s"&gt;"users.error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {{ users.error }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt; &lt;span class="na"&gt;:data=&lt;/span&gt;&lt;span class="s"&gt;"users.data"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;    
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com o componente &lt;code&gt;Fetcher&lt;/code&gt; construído, vamos utilizá-lo em outro componente chamado &lt;code&gt;UsersList&lt;/code&gt;, que irá representar nossa lista de usuários.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;UsersFetcher&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#default&lt;/span&gt;&lt;span class="err"&gt;="{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="err"&gt;}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;ID&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"user in data"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"user.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ user.id }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ user.name }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ user.age }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/UsersFetcher&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UsersFetcher&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/UsersFetcher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UsersList&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;UsersFetcher&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tornando-o-componente-reutiliz%C3%A1vel"&gt;
  &lt;/a&gt;
  Tornando o componente reutilizável
&lt;/h2&gt;

&lt;p&gt;Esta foi uma forma muito simples de se implementar o padrão &lt;em&gt;Loading / Error / Data&lt;/em&gt; a fim de capturar e exibir feedback correto para os usuários quando a aplicação precisa buscar dados remotos. Porém, a implementação acima não é muito reutilizável já que está carregando e manipulando, estritamente, usuários.&lt;/p&gt;

&lt;p&gt;Para tornar o componente mais genérico, basta implementarmos algumas pequenas mudanças e assim será possível utilizá-lo em qualquer lugar onde nossa aplicação precise buscar e exibir dados.&lt;/p&gt;

&lt;p&gt;Primeiro, vamos tornar o componente &lt;code&gt;Fetcher&lt;/code&gt; mais dinâmico visto que, em uma aplicação real, teremos que carregar diversos tipos de dados que, por sua vez, requerem métodos de serviço e nomes de variáveis específicos.&lt;br&gt;
Vamos utilizar &lt;a href="https://br.vuejs.org/v2/api/index.html#props"&gt;props&lt;/a&gt; para passar valores dinâmicos para dentro do componente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Loading...
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-else-if=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {{ error }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt; &lt;span class="na"&gt;:data=&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;    
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fetcher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;apiMethod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Analisando cada uma das &lt;code&gt;props&lt;/code&gt; definidas acima:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apiMethod [obrigatória]&lt;/code&gt;: a função responsável por realizar a chamada à API para carregar dados externos&lt;/p&gt;

&lt;p&gt;&lt;code&gt;params [opcional]&lt;/code&gt;: os parâmetros enviados na chamada do método de serviço (&lt;em&gt;apiMethod&lt;/em&gt;), quando necessários. Ex.: quando precisamos carregar dados usando filtros.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;updater [opcional]&lt;/code&gt;: função que irá transformar os dados recebidos.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;initialValue [opcional]&lt;/code&gt;: o valor inicial do atributo &lt;code&gt;data&lt;/code&gt; do objeto de estado.&lt;/p&gt;

&lt;p&gt;Após implementar estas &lt;code&gt;props&lt;/code&gt;, vamos criar agora o mecanismo principal que irá permitir que o componente seja reutilizado.&lt;br&gt;
Utilizando as &lt;code&gt;props&lt;/code&gt; definidas, podemos agora definir as operações e controlar o estado do componente de acordo com o resultado da requisição.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Loading...
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-else-if=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {{ error }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt; &lt;span class="na"&gt;:data=&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;    
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fetcher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;apiMethod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após implementar estas mudanças, assim ficará o nosso componente &lt;code&gt;Fetcher&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Fetcher&lt;/span&gt; &lt;span class="na"&gt;:apiMethod=&lt;/span&gt;&lt;span class="s"&gt;"fetchUsers"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#default&lt;/span&gt;&lt;span class="err"&gt;="{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="err"&gt;}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;ID&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"user in data"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"user.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ user.id }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ user.name }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ user.age }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Fetcher&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Fetcher&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Fetcher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/services/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UsersList&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Fetcher&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;E é isso! :)&lt;br&gt;
Utilizando apenas conceitos básicos de VueJS como &lt;code&gt;props&lt;/code&gt; e &lt;code&gt;slots&lt;/code&gt; podemos criar um componente de carregamento de dados reutilizável que será responsável por carregar e exibir os dados e prover feedback apropriado conforme o estado da aplicação.&lt;br&gt;
Além disso, você pode utilizá-lo em qualquer página ou componente que precise carregar dados, independentemente do tipo.&lt;/p&gt;

&lt;p&gt;Você encontra um exemplo 100% funcional desta implementação &lt;a href="https://github.com/vcpablo/vuejs-fetcher"&gt;neste repositório&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Espero que tenha gostado. Por favor, comente e compartilhe!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gostaria de agradecer especialmente a &lt;a href="https://dev.to/scpnm"&gt;Neil Merton&lt;/a&gt; por ter me ajudado a corrigir partes do código utilizado neste artigo.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Imagem de capa por &lt;a href="https://unsplash.com/@nordwood"&gt;nordwood&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>braziliandevs</category>
    </item>
  </channel>
</rss>
