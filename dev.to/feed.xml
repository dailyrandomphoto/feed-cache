<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>GIT Quick Course</title>
      <author>Walter Nascimento</author>
      <pubDate>Tue, 20 Apr 2021 20:48:21 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/git-quick-course-1kbj</link>
      <guid>https://dev.to/walternascimentobarroso/git-quick-course-1kbj</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/curso-r%C3%A1pido-de-git-3647058d2776"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is"&gt;
  &lt;/a&gt;
  What is?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://pt.wikipedia.org/wiki/Git"&gt;Git&lt;/a&gt; is a free and open source distributed version control system, designed to handle everything from small to large projects, with speed and efficiency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-advantage"&gt;
  &lt;/a&gt;
  What is the advantage?
&lt;/h1&gt;

&lt;p&gt;Imagine being able to discover changes made to a project, when they were made and who made them? Imagine you can use CTRL + Z in your entire project from the beginning.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h1&gt;

&lt;p&gt;Torvalds wanted a distributed system that he could use similarly to BitKeeper (BK), but none of the free systems available met his needs, particularly with regard to performance.&lt;/p&gt;

&lt;p&gt;Created in 2005 by Linus Torvalds, development started on April 3, 2005. The project was announced on April 6, and became a self-host on April 7.&lt;/p&gt;

&lt;p&gt;more information &lt;a href="https://pt.wikipedia.org/wiki/Git"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h1&gt;

&lt;p&gt;Go to the git &lt;a href="https://git-scm.com/downloads"&gt;official website page&lt;/a&gt; and choose your distribution.&lt;br&gt;
the installation is very easy to do, for windows systems it is just download and next, next and finalize, for linux it is just an &lt;code&gt;apt install git&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#setting"&gt;
  &lt;/a&gt;
  Setting
&lt;/h1&gt;

&lt;p&gt;When starting to work with git, the first step is to configure it with your defaults, such as email, editor, username and others.&lt;/p&gt;

&lt;p&gt;1 — Configuring via the terminal, to configure your git type the commands below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; color.status auto
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; color.branch auto
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; color.diff auto
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; color.ui always
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; core.editor vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"meunome"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s2"&gt;"eu@example.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2 — After the configuration is made, a file called .gitignore will be created and it contains all the settings made, if you need to edit it directly, and you can also back it up so that in future installations it is not necessary to reinstall.&lt;/p&gt;

&lt;p&gt;follows my configuration file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;LOCAL:&lt;/strong&gt; To use git locally, no extra installation is needed, just use git init and ready local server is already working&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GITHUB:&lt;/strong&gt; GitHub is a Shared Web Hosting Service for projects that use Git versioning control, it has features of a social network such as feeds, followers, wiki and a graph that shows how developers work on the versions of their repositories. &lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bitbucket:&lt;/strong&gt; Service similar to Github. &lt;a href="https://bitbucket.org/"&gt;https://bitbucket.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Gitlab:&lt;/strong&gt; Similar to Github. &lt;a href="https://about.gitlab.com/"&gt;https://about.gitlab.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#ssh"&gt;
  &lt;/a&gt;
  SSH
&lt;/h1&gt;

&lt;p&gt;To make the communication between machines and servers, it is best to add an ssh key, thus avoiding the need to enter login and password every time to send a new change, if you use linux you can follow the steps below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ // go to home
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;ssh
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen
// file name &lt;span class="o"&gt;(&lt;/span&gt;enter&lt;span class="o"&gt;)&lt;/span&gt;
// password
// re-password
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub &lt;span class="o"&gt;(&lt;/span&gt;send the contents of the file to the owner of the project add you&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#adding-public-key-on-the-server"&gt;
  &lt;/a&gt;
  Adding public key on the server
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;github:&lt;/strong&gt; to add the key on the github server just access the configuration link and then click on keys &lt;a href="https://github.com/settings/keys"&gt;https://github.com/settings/keys&lt;/a&gt;, now just click on the ‘add new key’ button and paste the content of id_rsa.pub here.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bitbucket:&lt;/strong&gt; To add to bitbucket just access your user’s configuration page after the link ssh keys, &lt;a href="https://bitbucket.org/account/settings/ssh-keys/"&gt;https://bitbucket.org/account/settings/ssh-keys/&lt;/a&gt;, now just click on the ‘add key’ button and paste the contents of id_rsa.pub here&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;gitlab:&lt;/strong&gt; To add the key in gitlab, just enter the profile settings (Profile Settings) then ssh keys option (ssh keys). now just click on the Add SSH key button;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#starting-project"&gt;
  &lt;/a&gt;
  Starting Project
&lt;/h1&gt;

&lt;p&gt;To start a project with git just follow the steps below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creating repository:&lt;/strong&gt; To create the project locally type git init
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git init &amp;lt;directory&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cloning a Repository:&lt;/strong&gt; To download (clone) a project from some server type git clone
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone &amp;lt;&lt;span class="nb"&gt;link&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;directoryCreated&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#commit"&gt;
  &lt;/a&gt;
  Commit
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#what-is-it-for"&gt;
  &lt;/a&gt;
  What is it for?
&lt;/h2&gt;

&lt;p&gt;A commit serves as a turning point in the project. Git has tools that make it possible to access the project exactly as it was when each commit was made. This has several advantages, such as providing more security to make modifications to the system (after all, if the change is incorrect, it is possible to revert the commit and return the project code to how it was before the commit was made) or facilitate bug fixing. , as it is possible to execute the project locally in a commit prior to the introduction of a specific bug in the code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-make-a-commit"&gt;
  &lt;/a&gt;
  How to make a commit?
&lt;/h2&gt;

&lt;p&gt;To make a commit, you choose the items you want and then add a message&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status // Checks the items you want to send
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &amp;lt;file_name&amp;gt; // Add the file
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Commit message title"&lt;/span&gt; // Write the commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#creating-gitignore"&gt;
  &lt;/a&gt;
  Creating GitIgnore
&lt;/h1&gt;

&lt;p&gt;When we use git we can define files that we do not want to send to the server, for example log files, third party folders or configuration files, for these cases we can create a file called &lt;code&gt;.gitignore&lt;/code&gt; and add the files or directors that we do not want to send.&lt;/p&gt;

&lt;p&gt;in this link we can create the default directories to include in &lt;code&gt;.gitignore&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.toptal.com/developers/gitignore"&gt;https://www.toptal.com/developers/gitignore&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#commit-with-emoji"&gt;
  &lt;/a&gt;
  Commit with emoji
&lt;/h1&gt;

&lt;p&gt;If you want to make the commit more ‘elegant’ it is possible to add emoji both in the title and in the body of the message, however it is necessary to check if the server is supported.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cooperka/emoji-commit-messages"&gt;https://github.com/cooperka/emoji-commit-messages&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.webfx.com/tools/emoji-cheat-sheet/"&gt;https://www.webfx.com/tools/emoji-cheat-sheet/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/dannyfritz/commit-message-emoji"&gt;https://github.com/dannyfritz/commit-message-emoji&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#coding-standard"&gt;
  &lt;/a&gt;
  Coding Standard
&lt;/h1&gt;

&lt;p&gt;Some small tips on how to write a commit, but that help to maintain a good history in a project.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h1&gt;

&lt;p&gt;If you need to read ask questions we have the official website&lt;br&gt;
&lt;a href="https://git-scm.com/doc"&gt;https://git-scm.com/doc&lt;/a&gt;&lt;br&gt;
But if you want something more direct we have git explorer&lt;br&gt;
&lt;a href="https://gitexplorer.com/"&gt;https://gitexplorer.com/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#quick-courses"&gt;
  &lt;/a&gt;
  Quick courses
&lt;/h1&gt;

&lt;p&gt;If you need to have an overview with a practical course you can try the links:&lt;br&gt;
&lt;a href="https://learngitbranching.js.org/"&gt;https://learngitbranching.js.org/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://try.github.io/"&gt;http://try.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#command-list"&gt;
  &lt;/a&gt;
  Command List
&lt;/h1&gt;

&lt;p&gt;List of commands for GIT.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you! 😊😊&lt;/p&gt;

</description>
      <category>git</category>
      <category>settings</category>
      <category>tutorial</category>
      <category>curse</category>
    </item>
    <item>
      <title>How Does Git Work?</title>
      <author>Honeybadger Staff</author>
      <pubDate>Tue, 20 Apr 2021 19:57:13 +0000</pubDate>
      <link>https://dev.to/honeybadger/how-does-git-work-576c</link>
      <guid>https://dev.to/honeybadger/how-does-git-work-576c</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally written by &lt;a href="https://www.honeybadger.io/blog/how-does-git-work/#authorDetails"&gt;Julie Kent&lt;/a&gt; on the &lt;a href="https://www.honeybadger.io/blog/how-does-git-work/"&gt;Honeybadger Developer Blog&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;If you're like me and have less than fifteen years of software engineering experience, the thought of a world without Git doesn't seem possible. When I started to research for this post, I almost fell out of my chair when I read that Git was created in 2005. It doesn't seem &lt;em&gt;that&lt;/em&gt; long ago ... either that, or I'm simply getting old. :) Regardless, I often find myself being scared of certain Git commands. Do I &lt;code&gt;rebase&lt;/code&gt;, or do I &lt;code&gt;merge&lt;/code&gt;? What is the use case for a &lt;code&gt;force push&lt;/code&gt;? There have definitely been a few occasions when a wrong Git command turned into a &lt;em&gt;big deal&lt;/em&gt;. So, I decided to bite the bullet and learn what is going on under that magical hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-brief-history"&gt;
  &lt;/a&gt;
  A brief history
&lt;/h2&gt;

&lt;p&gt;Git is a version control system that is distributed, which means that it uses multiple local repositories, including a centralized repo and server. Before distributed systems, subversion (SVN) was a popular way to manage code version control. Unlike Git, it is centralized rather than distributed. With SVN, your data is stored on a central server, and any time you check it out, you're checking out a single version of the repository.&lt;/p&gt;

&lt;p&gt;While most of us remember Git as the first distributed version control system, before Git, there was BitKeeper, a proprietary source control management system. Created in 1998, BitKeeper was spun up to solve some of the growing pains of Linux. It offered a free license for open-source projects, with the stipulation that developers could not create a competing tool while using BitKeeper plus one additional year. I'm sure you can guess what happened. In the early-to-mid 2000s, there were a plethora of license complaints, and in 2005, the free version of BitKeeper was removed. This prompted Linus Torvalds to create Git, which he named after a British slang word that means "unpleasant person." Linus Torvalds turned the project over to Junio Hamano (a major contributor) after its original v0.99 release, and Junio remains the core maintainer of the project. Fun Fact: The most recent version of Git was released on July 27th, 2020, and is version 2.28.&lt;/p&gt;

&lt;p&gt;If you want to read more about BitKeeper, check out the Wikipedia page &lt;a href="https://en.wikipedia.org/wiki/BitKeeper"&gt;here&lt;/a&gt; -- it is no longer being developed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-git-really"&gt;
  &lt;/a&gt;
  What is Git, really?
&lt;/h2&gt;

&lt;p&gt;While Git has morphed into a full-fledged version control management system, this wasn't the original intent. Linus Torvalds said the following on this topic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In many ways, you can just see Git as a filesystem -- it's content-addressable, and it has a notion of versioning, but I really designed it coming at the problem from the viewpoint of a &lt;em&gt;filesystem&lt;/em&gt; person (hey, kernels is what I do), and I actually have &lt;em&gt;zero&lt;/em&gt; interest in creating a traditional SCM (source control management) system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Side note: In case you're wondering what "content-addressable" means, it is a way to store information, so it can be retrieved based on content rather than location. Most traditional local and networked storage devices are location addressed.&lt;/p&gt;

&lt;p&gt;Git has two data structures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a mutable index (i.e., a connection point between the object database and the working tree) and&lt;/li&gt;
&lt;li&gt;an immutable, append-only object database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are five types of objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blob: this is the content of a file.&lt;/li&gt;
&lt;li&gt;tree: this is the equivalent of a directory&lt;/li&gt;
&lt;li&gt;commit: this links tree objects together to form a history&lt;/li&gt;
&lt;li&gt;tag: this is a container that contains a ref to another object, as well as other metadata&lt;/li&gt;
&lt;li&gt;packfile: zlib version compressed of various other objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each object has a unique name, which is a SHA-1 hash of its contents.&lt;/p&gt;

&lt;p&gt;To better understand how all of this fits together, let's create a dummy project directory and run &lt;code&gt;git init&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trying-it-out"&gt;
  &lt;/a&gt;
  Trying it out
&lt;/h2&gt;

&lt;p&gt;Open your terminal, and create a new directory. Then, run &lt;code&gt;git init&lt;/code&gt;. You should then see something similar to the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  Documents mkdir understanding-git
➜  understanding-git git init
Initialized empty Git repository in /Users/juliekent/Documents/understanding-git/.git/
➜  understanding-git git:(master)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am sure you have done this many times but may not have really cared to know what was actually in the newly created &lt;code&gt;.git&lt;/code&gt; directory. Let's check it out. If you run &lt;code&gt;ls -a&lt;/code&gt; via your terminal, you will see the &lt;code&gt;.git&lt;/code&gt; directory. By default, it is a hidden directory, which is why you need the &lt;code&gt;-a&lt;/code&gt; flag. Place &lt;code&gt;cd .git&lt;/code&gt; into the directory, and then run &lt;code&gt;ls&lt;/code&gt;. You should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  .git git:(master) ls
HEAD        config      description hooks       info        objects     refs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be focusing on &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;objects&lt;/code&gt;, and &lt;code&gt;refs&lt;/code&gt; directories. We will also run some commands so that we have &lt;code&gt;index&lt;/code&gt; files, but this will come later. The &lt;code&gt;description&lt;/code&gt; file is only used by the GitWeb program. The &lt;code&gt;config&lt;/code&gt; file is pretty straight forward, as it contains project configuration options. The the &lt;code&gt;info&lt;/code&gt; directory keeps a global exclude file for ignored patterns you don't want to track, which is based on the &lt;code&gt;.gitignore&lt;/code&gt; file; I'm sure most of you are familiar with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-objects-directory"&gt;
  &lt;/a&gt;
  The objects directory
&lt;/h2&gt;

&lt;p&gt;Let's start with the &lt;code&gt;objects&lt;/code&gt; directory. To see what is created, run &lt;code&gt;find .git/objects&lt;/code&gt;. You should see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  understanding-git git:(master) find .git/objects
.git/objects
.git/objects/pack
.git/objects/info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's create a file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo 'this is me' &amp;gt; myfile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates a file named &lt;code&gt;myfile.txt&lt;/code&gt; containing &lt;code&gt;this is me&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let's run the command &lt;code&gt;git hash-object -w myfile.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your output should be a random mix of numbers and letters -- this is a SHA-1 checksum hash. If you're not familiar with SHA-1, you can read more &lt;a href="https://www.lifewire.com/what-is-sha-1-2626011"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, copy your SHA-1, and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git cat-file -p (insert your SHA here)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see "this is me", the contents of your file that was created. Cool! This is how content-addressable Git objects work; you can think of it as a key-value store where the key is the SHA-1, and the value is the contents.&lt;/p&gt;

&lt;p&gt;Let's write some new content to our original file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo 'this is not me' &amp;gt; myfile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, run the &lt;code&gt;hash-object&lt;/code&gt; command again:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git hash-object -w myfile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You now have two unique SHA-1s for both versions of this file. If you want further proof, run &lt;code&gt;find .git/objects -type f&lt;/code&gt;, and you should see both via your terminal window.&lt;/p&gt;

&lt;p&gt;If you'd like to learn more about how other objects in Git work, I recommend following this &lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-refs-directory"&gt;
  &lt;/a&gt;
  The refs directory
&lt;/h2&gt;

&lt;p&gt;Let's move onto refs. When running &lt;code&gt;find .git/refs&lt;/code&gt;, you should see the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  understanding-git git:(master) ✗ find .git/refs
.git/refs
.git/refs/heads
.git/refs/tags
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we saw in the previous section about objects, we know that Git creates unique SHA-1 hashes for each one. Of course, we could run all of our Git commands utilizing each object's hash. For example, &lt;code&gt;git show 123abcd&lt;/code&gt;, but this is unreasonable and would require us to remember the hash of every object.&lt;/p&gt;

&lt;p&gt;Refs to the rescue! A reference is simply a file stored in &lt;code&gt;.git/refs&lt;/code&gt; containing the hash of a commit object. Let's go ahead and commit our &lt;code&gt;myfile.txt&lt;/code&gt;, so we can better understand how refs work. Go ahead and run &lt;code&gt;git add myfile.txt&lt;/code&gt; and &lt;code&gt;git commit -m 'first commit'&lt;/code&gt;. You should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  understanding-git git:(master) ✗ git add myfile.txt
➜  understanding-git git:(master) ✗ git commit -m 'first commit'
[master (root-commit) 40235ba] first commit
 1 file changed, 1 insertion(+)
 create mode 100644 myfile.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's navigate to the &lt;code&gt;.git/refs/heads&lt;/code&gt; directory by running &lt;code&gt;cd .git/refs/heads&lt;/code&gt;. From there, run &lt;code&gt;cat master&lt;/code&gt;. You should see the SHA-1. Finally, run &lt;code&gt;git log -1 master&lt;/code&gt; which should output something similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;commit Unique SHA-1 (HEAD -&amp;gt; master)
Author: Julie &amp;lt;jkent2910@gmail.com&amp;gt;
Date:   Mon Aug 3 15:59:59 2020 -0500

   first commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool! As you can see, branches are simply just references. When we change the location of the master branch, all Git has to do is change the contents of the &lt;code&gt;refs/heads/master&lt;/code&gt; file. Likewise, creating a new branch creates a new reference file with the commit hash.&lt;/p&gt;

&lt;p&gt;Helpful hint: If you ever want to see &lt;em&gt;all&lt;/em&gt; references, run &lt;code&gt;git show-ref&lt;/code&gt;, which will list all references.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sooooo-what-is-head"&gt;
  &lt;/a&gt;
  Sooooo, what is HEAD?!
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; is a symbolic reference. You might wonder, when running &lt;code&gt;git branch &amp;lt;branch&amp;gt;&lt;/code&gt;, how Git knows the SHA-1 of the last commit. Well, the HEAD file is usually a symbolic reference to your current branch. You might be thinking to yourself, "You keep saying &lt;em&gt;symbolic&lt;/em&gt;; what does that mean?" Great question! &lt;em&gt;Symbolic&lt;/em&gt; means that it contains a &lt;em&gt;pointer&lt;/em&gt; to another reference. If your head is spinning, I'm with you. It took me quite a bit of Googling and reading to finally understand what exactly &lt;code&gt;HEAD&lt;/code&gt; is. Here is a great analogy, pulled from &lt;a href="https://www.educba.com/what-is-head-in-git/"&gt;this website&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A good analogy would be a record player and the playback and record keys on it as the HEAD. As the audio starts recording, the tape moves ahead, moving past the head by recording onto it. The stop button stops the recording while still pointing to the point it last recorded, and the point that record head stopped is where it will continue to record again when Record is pressed again. If we move around, the head pointer moves to different places; however, when Record is pressed again, it starts recording from the point the head was pointing to when Record was pressed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go ahead and run: &lt;code&gt;cat .git/HEAD&lt;/code&gt;, and you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  understanding-git git:(master) cat .git/HEAD
ref: refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes sense because we are on the master branch. HEAD is, essentially, always going to be the reference to the last commit in the currently checked-out branch.&lt;/p&gt;

&lt;p&gt;Helpful Tip: You can run &lt;code&gt;git diff HEAD&lt;/code&gt; to view the difference between HEAD and the working directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;We have covered a lot in this post! We've learned a bit of fun history regarding how Git came about and examined the main plumbing that makes all of the magic happen! If you want to continue to dive deeper into Git, as well as better understand how some of the common commands work, I highly recommend the book titled "Pro Git", which is available for free &lt;a href="https://git-scm.com/book/en/v2"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>github</category>
    </item>
    <item>
      <title>To use Context for state correctly use it like recoil</title>
      <author>Ivan Jeremic</author>
      <pubDate>Tue, 20 Apr 2021 19:23:57 +0000</pubDate>
      <link>https://dev.to/ivanjeremic/to-use-context-for-state-correctly-use-it-like-recoil-14pg</link>
      <guid>https://dev.to/ivanjeremic/to-use-context-for-state-correctly-use-it-like-recoil-14pg</guid>
      <description>&lt;p&gt;One of the biggest problems in managing state with Context is that react re-renders all children if a value in the provider changes, So having multiple states that have nothing to do with one another will make your applications do unmercenary re-renders all the time and this is not manageable stop this!&lt;/p&gt;

&lt;p&gt;Imagine having a counter state and a modal state and both are provided to the app in the same Context that means when you open/close the modal all components of the counter will rerender to.&lt;/p&gt;

&lt;p&gt;So how to solve this problem? For people who are familiar with Recoil js, they know that the so-called &lt;code&gt;atoms&lt;/code&gt; are only one piece of state and not a store for having all kinds of state in it, they hold really only one piece. So let's do the same in Context, we will create for each state of our application a separate Context file that will hold only one piece of state maximum, Our Provider will provide only the &lt;code&gt;state&lt;/code&gt; and the &lt;code&gt;setter&lt;/code&gt; for this one piece of state.&lt;/p&gt;

&lt;p&gt;Here an example with &lt;code&gt;counter&lt;/code&gt; &amp;amp; &lt;code&gt;modal&lt;/code&gt; state&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/contexts/CounterContext.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const CounterContext = createContext();

export function CounterContextProvider({ children }) {
  const [count, setCount] = useState(0);

  return (
    &amp;lt;CounterContext.Provider value={[count, setCount]}&amp;gt;
      {children}
    &amp;lt;/CounterContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the modal in a separate file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/contexts/ModalContext.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const ModalContext = createContext();

export function ModalContextProvider({ children }) {
  const [open, setOpen] = useState(false);

  return (
    &amp;lt;ModalContext.Provider value={[open, setOpen]}&amp;gt;
      {children}
    &amp;lt;/ModalContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I recommend using a folder "contexts" that holds all your state if you are used to "stores" look at you contexts folder as store :)&lt;/p&gt;

&lt;p&gt;Now you use the state where you need it as you develop, important here is never wrap the whole App in the providers, if a button in the Header component needs the counter state only wrap the parts one level above in the provider or even more cleaner create a wapper folder and create a wrapper for each component that needs state, this way only the parts re-render that need to change.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/wrappers/CounterButtonWrapper.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function CounterButton() {
  const [count, setCount] = useContext(CounterContext);

  const increment = () =&amp;gt; {
    setCount((prevState) =&amp;gt; {
      return prevState + 1
    })
  }

  return (
    &amp;lt;button onClick={increment}&amp;gt;Increment&amp;lt;/Button&amp;gt;
  );
}

// use this in your Header
export default function CounterButtonWrapper() {
  return (
   &amp;lt;CounterContext.Provider&amp;gt;
     &amp;lt;CounterButton /&amp;gt;
   &amp;lt;/CounterContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, it is more boilerplate than recoil but not everyone wants to use libraries and if you really want to manage client state with Context then this method with separate contexts for each piece of state and wrappers will scale and is the best way if you ask me.&lt;/p&gt;

</description>
      <category>react</category>
      <category>recoiljs</category>
      <category>recoil</category>
      <category>redux</category>
    </item>
    <item>
      <title>What are fun projects to do when you're feeling exhausted?</title>
      <author>Holden</author>
      <pubDate>Tue, 20 Apr 2021 18:18:04 +0000</pubDate>
      <link>https://dev.to/holdenmad/what-are-fun-projects-to-do-when-you-re-feeling-exhausted-3jbf</link>
      <guid>https://dev.to/holdenmad/what-are-fun-projects-to-do-when-you-re-feeling-exhausted-3jbf</guid>
      <description>&lt;p&gt;I've been struggling a lot to find the energy to do personal projects since I started my first programming job. I like my job, and I'm learning a lot, but when I'm done with work I feel so exhausted that I don't have any brain power left to do personal projects. The pandemic of course doesn't help with the exhaustion either. Everything takes a lot more effort than it normally does, and it's all I can do to do basic tasks. &lt;/p&gt;

&lt;p&gt;Do you have any advice for doing personal projects when you're feeling burnt out and exhausted? &lt;/p&gt;

</description>
      <category>burnout</category>
      <category>personalprojects</category>
      <category>projects</category>
      <category>programming</category>
    </item>
    <item>
      <title>tmux: 13 Cool Tweaks to Make It Personal and Powerful</title>
      <author>Balamurugan Krishnamoorthy (Bala)</author>
      <pubDate>Tue, 20 Apr 2021 18:07:20 +0000</pubDate>
      <link>https://dev.to/krishnam/tmux-13-cool-tweaks-to-make-it-personal-and-powerful-487p</link>
      <guid>https://dev.to/krishnam/tmux-13-cool-tweaks-to-make-it-personal-and-powerful-487p</guid>
      <description>&lt;p&gt;&lt;strong&gt;Intended Audience:&lt;/strong&gt; tmux users (beginner) or who read &lt;a href="https://dev.to/krishnam/dev-productivity-command-line-happiness-with-terminal-multiplexing-5067"&gt;the part one&lt;/a&gt; of my "Command Line Happiness" post. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do you want to tweak the default setup ?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keyboard shortcuts in tmux are a bit of &lt;strong&gt;a stretch, both physically and sometimes mentally&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;tmux has a lot of &lt;strong&gt;less-than-stellar default&lt;/strong&gt; setting&lt;/li&gt;
&lt;li&gt;Moreover, the configuration is fun, especially when you personalize it to &lt;strong&gt;suit your needs&lt;/strong&gt;; after all, that's what it's for!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, I prefer using the default setting with any tech/tools that I use as long as it serves its purpose well. However, tmux is different. It is designed to be customizable. On top of that, these are my reasons why you should tweak it.&lt;/p&gt;

&lt;p&gt;Follow along, and let's make your tmux friendly. Along the way, do not forget to put more comments in your configuration file; they'll jog your memory later. Treat your tmux config as a living document; Learn, practice, and update.&lt;/p&gt;

&lt;p&gt;Here is your ready-to-use valuable tmux tips-&amp;amp;-tweaks. Try these to improve your day-to-day development while using tmux. Let's start with the biggie ! [prefix]&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-prefix-should-be-simple"&gt;
  &lt;/a&gt;
  1. Prefix Should be Simple
&lt;/h4&gt;

&lt;p&gt;By default, all key bindings will demand a "prefix" key before they are active. It is similar to a [leader] key in vim. The default is &lt;code&gt;Ctrl-b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The default is a little hard to trigger as the keyboard button is pretty far. Most prefer the &lt;code&gt;Ctrl-a&lt;/code&gt; as prefix key:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It puts your prefix in the home row.&lt;/li&gt;
&lt;li&gt;CapsLock can be remapped with a Ctr key, and A sits just next to it.&lt;/li&gt;
&lt;li&gt;If you have already used the GNU screen, &lt;code&gt;Ctrl-a&lt;/code&gt; is already the standard key for you.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind-key C-b              # free the original bind-key key
set-option -g prefix C-a    # setting the prefix from C-b to C-a
bind-key C-a send-prefix    # ensure that we can send Ctrl-A to other apps or the shell that your interacting
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-just-reload-the-config"&gt;
  &lt;/a&gt;
  2. Just Reload the Config
&lt;/h4&gt;

&lt;p&gt;Considering you will be doing config tweaks and testing often, it is good to introduce the shortcut here.&lt;/p&gt;

&lt;p&gt;By default, there are two ways of reloading&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;shutting down all tmux sessions and start them&lt;/li&gt;
&lt;li&gt;executing 'source-file ~/.tmux.conf' on all the sessions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Who on earth want to follow the above approaches all the time! let's create the shortcut - &lt;code&gt;Ctr+r&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key C-r source-file ~/.tmux.conf \; display "Config Reloaded !"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-this-is-how-i-want-to-start"&gt;
  &lt;/a&gt;
  3. This is How I Want to Start
&lt;/h4&gt;

&lt;p&gt;If you do not want to use your default shell and prefer something else, it is easy to set in tmux.&lt;/p&gt;

&lt;p&gt;Let me set my default to my fav shell - zsh. Macs now use zsh as the default login shell across the operating system. It is for a reason. Give it a try if you don't already use zsh as your default shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g default-shell /usr/bin/zsh        # login shell for new windows/pane
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-i-cant-see-enough-"&gt;
  &lt;/a&gt;
  4. I Can't See Enough !
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;By default, the message that comes in the status bar disappears in the blink of an eye and the pane number display time also too short to notice. Tweak the time as you wish.&lt;/li&gt;
&lt;li&gt;If you feel your default history limit is not good enough for your case, crank that up too.&lt;/li&gt;
&lt;li&gt;Lock the session after x mins of inactivity. Sometimes, it is good to protect your screen to make sure other's should not see enough.&lt;/li&gt;
&lt;li&gt;Default names given to the window are based on what runs in the pane. Hi tmux, let me name it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g display-time 2000            # By default, status msg disappears in the blink of an eye (750ms)
set-option -g display-panes-time 2000      # By default, pane number disappears in 1 s
set-option -g history-limit 50000          # maximum number of lines held in window history - crank it up from 2k default
set-option -g lock-after-time 3600         # lock the session after 60 mins of inactivity. Sometimes, it is good to protect your screen to make sure other's can't see enough.
set-option -wg automatic-rename off        # default names are too vague to see. Let me name it.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-count-like-human"&gt;
  &lt;/a&gt;
  5. Count like Human
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;By default, the windows or panes start with index 0 (silly programmers!). Though tmux is one of those "created by and for programmers", this indexing makes it challenging to do switching windows; window 0 will be all the way to left in the status bar and the 0 in keyboard is all way to the right, then 1 key comes in the left...it messes with you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's imagine you have three windows. If we removed the second window, the default result would be two remaining windows, numbered 1 and 3. but, tmux could automatically renumber the windows to 1 and 2 with the right setting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, Let's make tmux a human for a bit,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g base-index 1                # window index will start with 1
set-window-option -g pane-base-index 1    # pane index will start with 1
set-option -g renumber-windows on         
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#6-kill-it-with-xforce-"&gt;
  &lt;/a&gt;
  6. Kill it with X-Force !
&lt;/h4&gt;

&lt;p&gt;By default, if you press  x, tmux will ask if you're sure you want to kill a pane before it does it. That's nice and all, but what if you'd rather just kill it? Let's do that. And, while we’re at it, let’s create a custom key combo for killing the entire session too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind-key x               # unbind-key “x” from it’s current job of “ask and then close”
bind-key x kill-pane       # rebind-key it to just “close”
bind-key X kill-session    # key combo for killing the entire session - &amp;lt;prefix&amp;gt; + shift + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#7-make-splitting-panes-intuitive"&gt;
  &lt;/a&gt;
  7. Make Splitting Panes Intuitive
&lt;/h4&gt;

&lt;p&gt;Splitting a window in panes are currently bound to  % and  ”&amp;gt;, which are hard to remember. It is much easier to remember if you use &lt;code&gt;|&lt;/code&gt; for vertical splits and &lt;code&gt;_&lt;/code&gt; for horizontal splits. For now, I will leave the default binding as it is since I don’t have any other use for these weird key commands.&lt;/p&gt;

&lt;p&gt;Additionally, you could also mention the directory to open in the new pane when you split.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key | split-window -h -c "#{pane_current_path}" # let's open pane with current directory with -c option
bind-key _ split-window -v -c "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#8-make-movements-quick"&gt;
  &lt;/a&gt;
  8. Make Movements Quick
&lt;/h4&gt;

&lt;p&gt;One of the main reasons for using tmux is because it’s keyboard-centric and plays well with Vim, another my favourite keyboard-centric tool. If you use Vim, you’re probably familiar with its use of h, j, k, and l for movement keys. This way, you do not have to take your fingers off the home row to move to anywhere else.&lt;/p&gt;

&lt;p&gt;Let's make movements in pane, window, &amp;amp; command prompt much familiar and faster,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Pane: Vim Style Movements
bind-key -r h select-pane -L              # go left
bind-key -r j select-pane -D              # go down
bind-key -r l select-pane -R              # go right
bind-key -r k select-pane -U              # go up

# Pane: Arrow Movements
bind-key Up select-pane -U
bind-key Down select-pane -D
bind-key Left select-pane -L
bind-key Right select-pane -R

# Window: Movements
bind-key L last-window
bind-key -r C-h select-window -t :-              # cycle through the windows for quick window selection
bind-key -r C-l select-window -t :+

# word separators for automatic word selection
set-window-option -g word-separators ' @"=()[]'  # default =&amp;gt; ‘ -_@’.

# tmux adds a short, almost imperceptible delay between the commands that can cause funny behavior when running vim inside tmux.
set-option -s escape-time 0

# Command Prompt Movements:  within the tmux command prompt and the command prompt is accessed using &amp;lt;P&amp;gt;: (in the status line)
set-option -g status-keys vi                 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#9-resizing-panes"&gt;
  &lt;/a&gt;
  9. Resizing Panes
&lt;/h4&gt;

&lt;p&gt;The default key binding are &lt;code&gt;Ctr+ Up/Down/Left/Right&lt;/code&gt; for one row movements , &lt;code&gt;Alt + Up/Down/Left/Right&lt;/code&gt; for five row movements.&lt;/p&gt;

&lt;p&gt;Let's add one more to the set (Vim way)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Vim Style
bind-key -r H resize-pane -L 2         # resize a pane two rows at a time.
bind-key -r J resize-pane -D 2
bind-key -r K resize-pane -U 2
bind-key -r L resize-pane -R 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#10-copying-and-pasting-text"&gt;
  &lt;/a&gt;
  10. Copying and Pasting Text
&lt;/h4&gt;

&lt;p&gt;We will do multiple custom setting here. This tweak can be a real productivity boost if you happen to do a lot of copying and pasting between windows.&lt;/p&gt;

&lt;p&gt;We will do these;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigating through output in a quick way like vi&lt;/li&gt;
&lt;li&gt;Vim Style in Copy-Mode&lt;/li&gt;
&lt;li&gt;Setup keys (install xclip if you don't already have it)

&lt;ul&gt;
&lt;li&gt;To copy from the current buffer to the sys clipboard &lt;code&gt;Alt+c&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To paste text from sys clipboard into current buffer &lt;code&gt;Alt+v&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To copy to the sys clipboard directly from the selection &lt;code&gt;Ctr+c&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To paste text from sys clipboard into the view &lt;code&gt;Ctr+v&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Take a screenshot of the pane and store it with timestamp &lt;code&gt;Alt+s&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To navigating through output in quick way, enable vim navigation keys
set-window-option -g mode-keys vi

# Vim Style in Copy-Mode "&amp;lt;prefix&amp;gt; ["
# Interacting with Paste Buffer
bind-key Escape copy-mode
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection            -N "start visual mode for selection"
bind-key -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel  -N "yank text into the buffer"
bind-key C-b choose-buffer # view the buffer stack
unbind-key p
bind-key p paste-buffer # default "&amp;lt;prefix&amp;gt; ]"

# Alt+C: To copy from the current buffer to the sys clipboard .
bind-key M-c run "tmux save-buffer - | xclip -i -sel clipboard"

# Alt+V: To paste text from sys clipboard into current buffer
bind-key M-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\""

# Ctr+C: Make it even better -just one step to move from sys-&amp;gt;buffer-&amp;gt;editor vice versa
bind-key -Tcopy-mode-vi C-c send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c" \; display-message "copied to system clipboard"

# Ctr+V: To paste text from sys clipboard into the view
bind-key C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\";tmux paste-buffer"

# To take ASCII screenshots (tmux-resurrect uses C-s for saving, here binding to Alt-s ) .
# create the dir for storing screenshots
bind-key M-s run "tmux capture-pane; tmux save-buffer ~/.mytmux/pane_screenshots/\"$(date +%FT%T)\".screenshots"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#11-visual-styling-configuring-colors"&gt;
  &lt;/a&gt;
  11. Visual Styling: Configuring Colors
&lt;/h4&gt;

&lt;p&gt;Once the proper colour mode is set, you'll find it much easier to use Vim, Emacs, and other full-colour programs from within tmux, especially when you are using more complex colour schemes shell or syntax highlighting.&lt;/p&gt;

&lt;p&gt;What you can do here is up to your preference. It goes beyond just colour to your eyes. Let me demo with a few of my tricks;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's dim out any pane that's not active. It is a lot easier to see the active pane this way than looking for * in the status bar.&lt;/li&gt;
&lt;li&gt;Customize pane divider to make it subtle but distinct.&lt;/li&gt;
&lt;li&gt;Make the message colour not harmful to your eyes
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Set the default terminal mode to 256color mode
set -g default-terminal "screen-256color"

# Pane divider
set-window-option -g pane-border-style fg=colour11,bg=colour234
set-window-option -g pane-active-border-style fg=colour118,bg=colour234

# Cool trick: Let's dim out any pane that's not active.
set-window-option -g window-style fg=white,bg=colour236
set-window-option -g window-active-style fg=white,bg=colour235

# Command / Message line
set-window-option -g message-style fg=black,bold,bg=colour11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#12-dress-up-the-status-line"&gt;
  &lt;/a&gt;
  12. Dress Up the Status Line
&lt;/h4&gt;

&lt;p&gt;This is how you tailor up the dress for your status line  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update Status bar colour and window indicator colour&lt;/li&gt;
&lt;li&gt;Update What do you want to see on the left side &amp;amp; right side of the status line &lt;/li&gt;
&lt;li&gt;Setup soft activity alerts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of going fancy here, I just focused on what can help me during my work and less resource-intensive operation. Below is my status bar config;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Status Bar
set-option -g status-style fg=white,bg=colour04
set-option -g status-justify centre
set-window-option -g window-status-style fg=colour118,bg=colour04
set-window-option -g window-status-current-style fg=black,bold,bg=colour011
set-window-option -g window-status-last-style fg=black,bold,bg=colour011
set-window-option -g window-status-separator |

# Left Side
# Show my active session, window, pane name or id  
set-option -g status-left-length 50   # default 10
set-option -g status-left "[#[fg=white]S: #S, #[fg=colour11]W #I-#W, #[fg=colour3]P: #P #[fg=white]]"
# set-option -g status-left-style

# Right Side
set-option -g status-right-length 50   # default 50
set-option -g status-right "#[fg=grey,dim,bg=default] uptime: #(uptime | cut -f 4-5 -d\" \" | cut -f 1 -d\",\")"

# Enable Activity Alerts
set-option -g status-interval 60           # Update the status line every 60 seconds (15 is default)
set-window-option -g monitor-activity on   # highlights the window name in the status line
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#13-extending-tmux-with-plugins"&gt;
  &lt;/a&gt;
  13. Extending tmux with Plugins
&lt;/h4&gt;

&lt;p&gt;There are many tmux &lt;a href="https://github.com/tmux-plugins?q=&amp;amp;type=&amp;amp;language=&amp;amp;sort=stargazers"&gt;plugins&lt;/a&gt; available. If I have to choose one, that would be 'tmux-resurrect'.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This plugin restores the tmux environment after system restart. This plugin goes to great lengths to save and restore all the details from your tmux environment. See &lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;doc&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;If you setup resurrect, then the next logical thing to do is set up 'continuum' to make the saving and restoring as an automatic step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the step to setup tmux plugin management;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Last saved environment is automatically restored when tmux is started.
set -g @continuum-boot 'on'  

# terminal window will go fullscreen
set -g @continuum-boot-options 'fullscreen' 

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run-shell "mkdir -p ~/.tmux/plugins/"
# run-shell "git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm"

run '~/.tmux/plugins/tpm/tpm'

# Hit prefix + I to install plugins for the first time. 
# It takes few seconds. So, wait before panic.
# 
# resurrect key bindings:
#   prefix + Ctrl-s - save
#   prefix + Ctrl-r - restore
# 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: All of these tweaks are tested and working in Ubuntu.20.10 and tmux3.1b&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You could access my tmux config &lt;a href="https://github.com/krishnam-eng/ohmy-linux/tree/main/tmux"&gt;here&lt;/a&gt; &lt;/p&gt;

</description>
      <category>linux</category>
      <category>productivity</category>
      <category>tmux</category>
      <category>developer</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 20 Apr 2021 18:06:50 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-16fl</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-16fl</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-hours-of-manual-typing"&gt;
  &lt;/a&gt;
  Save hours of manual typing
&lt;/h2&gt;

&lt;p&gt;A super handy list from &lt;a class="mentioned-user" href="https://dev.to/simonpaix"&gt;@simonpaix&lt;/a&gt;
! If you're just starting your coding journey, these tips might just save you a significant amount of time.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/simonpaix" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wLng5_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--x2GWJPj---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/592016/ac52b742-ede9-4335-9692-80b246d53ce7.png" alt="simonpaix image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/simonpaix/10-useful-vs-code-shortcuts-you-should-know-42m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 useful VS Code shortcuts you should know  ()&lt;/h2&gt;
      &lt;h3&gt;Mariana Simon Paixao ・ Apr 14 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-only-way-out-is-through"&gt;
  &lt;/a&gt;
  The only way out is through...
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/alexlsalt"&gt;@alexlsalt&lt;/a&gt;
 shows us that we truly have so much to learn &lt;em&gt;from&lt;/em&gt; early-career developers.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alexlsalt" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY85lbma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rbWwRtco--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/284014/36cbe4fd-2ae3-4651-a2fd-ea65ef3b6cb9.jpg" alt="alexlsalt image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexlsalt/10-things-i-ve-learned-after-3-months-as-a-junior-software-engineer-2m89" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Things I've Learned After 3 Months as a Junior Software Engineer&lt;/h2&gt;
      &lt;h3&gt;Alex Morton ・ Apr 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firstyearincode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#never-underestimate-the-power-of-simplicity"&gt;
  &lt;/a&gt;
  Never underestimate the power of simplicity
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/commentme"&gt;@commentme&lt;/a&gt;
 shares some examples of the libraries that make Vanilla JS "somewhat impeccable".&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/commentme" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O0ky6rhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6NRkV1iH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/429862/46d4537e-4efc-4333-b743-d0f67136bb57.png" alt="commentme image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/commentme/some-vanilla-js-libraries-you-must-try-17a3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Some Vanilla JS libraries you must try&lt;/h2&gt;
      &lt;h3&gt;Unnati Bamania ・ Apr 18 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#rest-for-the-weary"&gt;
  &lt;/a&gt;
  REST for the weary
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/lucasnevespereira"&gt;@lucasnevespereira&lt;/a&gt;
 breaks down the process of writing a REST API using Golang. Best practices, galore!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lucasnevespereira" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EtKO_Mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WDzM03Oe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/252716/759d6de0-45ea-4f79-9d8d-312e23b00e58.jpeg" alt="lucasnevespereira image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucasnevespereira/write-a-rest-api-in-golang-following-best-practices-pe9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Write a REST API in Golang following best practices&lt;/h2&gt;
      &lt;h3&gt;Lucas Neves Pereira ・ Apr 13 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#postgres&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#restapi&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#thisissocool"&gt;
  &lt;/a&gt;
  👏This👏Is👏So👏Cool
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt;
 thought it would be fun to toggle dark mode on and off by clapping your hands, just like those classic &lt;a href="https://www.youtube.com/watch?v=Ny8-G8EoWOw&amp;amp;ab_channel=JosephEnterprises"&gt;Clapper&lt;/a&gt; commercials. So, they built a way to do just that. What a great idea!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devdevcharlie" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3wdbKXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SAqR9xjx--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/22924/38d877c9-2f04-4b6e-8d55-b6a9c9f14f3e.jpeg" alt="devdevcharlie image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devdevcharlie/toggle-dark-light-mode-by-clapping-your-hands-li7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Toggle dark/light mode by clapping your hands&lt;/h2&gt;
      &lt;h3&gt;Charlie Gerard ・ Apr 14 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tensorflowjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#dont-let-js-drive-you-nuts"&gt;
  &lt;/a&gt;
  Don't let JS drive you nuts
&lt;/h2&gt;

&lt;p&gt;As this post explains, JavaScript is accessible for newcomers, and a lot of what you'll use it for doesn't require an in-depth understanding of the mechanics. But this phenomenon can "trap" you if you're not careful. Good looking out, &lt;a class="mentioned-user" href="https://dev.to/jesuisundev"&gt;@jesuisundev&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jesuisundev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57qnjZFZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iAeIhQmp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/8016/c141c542-c6eb-4c0b-8224-591bd801277f.jpg" alt="jesuisundev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jesuisundev/javascript-what-i-didn-t-understand-14hl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Javascript: what I didn't understand&lt;/h2&gt;
      &lt;h3&gt;Mehdi Zed ・ Apr 17 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#running-your-containerized-workloads-on-aws"&gt;
  &lt;/a&gt;
  Running your containerized workloads on AWS
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/aditmodi"&gt;@aditmodi&lt;/a&gt;
's post compares the three most important ways to run Docker on AWS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Amazon Elastic Container Service (ECS) with AWS Fargate&lt;/li&gt;
&lt;li&gt;Amazon Elastic Container Service for Kubernetes (EKS)&lt;/li&gt;
&lt;li&gt;AWS Elastic Beanstalk (EB) with Single Container Docker&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Helpful!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aditmodi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/introduction-to-containers-with-aws-og4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introduction to Containers with AWS&lt;/h2&gt;
      &lt;h3&gt;Adit Modi ・ Apr 16 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Apple AirTag announced</title>
      <author>Anthony Bouvier</author>
      <pubDate>Tue, 20 Apr 2021 17:54:24 +0000</pubDate>
      <link>https://dev.to/thebouv/apple-airtag-announced-3a04</link>
      <guid>https://dev.to/thebouv/apple-airtag-announced-3a04</guid>
      <description>&lt;p&gt;The AirTag has been &lt;a href="https://www.apple.com/newsroom/2021/04/apple-introduces-airtag/"&gt;announced&lt;/a&gt; by Apple.&lt;/p&gt;

&lt;p&gt;"Apple today introduced AirTag, a small and elegantly designed accessory that helps keep track of and find the items that matter most with Apple’s Find My app. Whether attached to a handbag, keys, backpack, or other items, AirTag taps into the vast, global Find My network1 and can help locate a lost item, all while keeping location data private and anonymous with end-to-end encryption. AirTag can be purchased in one and four packs for just $29 and $99, respectively, and will be available beginning Friday, April 30. "&lt;/p&gt;

&lt;p&gt;And I think the real key element here is the use of Find My App / Find My Network.&lt;/p&gt;

&lt;p&gt;Apparently this leverages the vast, mostly unknown, network that Apple has where every device from them with Bluetooth on contributes to the Find My network. Meaning, even if you don't own a AirTag, but you happen to have Bluetooth on and are near an AirTag, your phone will send and receive data to share the location with the network.&lt;/p&gt;

&lt;p&gt;No opt-in. No opt-out besides leaving Bluetooth off.&lt;/p&gt;

&lt;p&gt;Though I've definitely been one to lose my keys or backpack and wish I had something like an AirTag or its predecessor called &lt;a href="https://www.thetileapp.com/"&gt;Tile&lt;/a&gt; I am wholly uncomfortable that they are using my device to communicate with other people's devices creating a large mesh network with no knowledge of my participation.&lt;/p&gt;

&lt;p&gt;This is being discussed on Hacker News right now and other sites too. The benefit seems cool and huge, but much like Amazon's announcement several months ago about its &lt;a href="https://www.forbes.com/sites/paullamkin/2020/11/27/what-is-amazon-sidewalk-and-why-is-it-on-your-echo-smart-speaker/?sh=34f46e19acfd"&gt;Sidewalk&lt;/a&gt; feature, I feel like there will be a &lt;a href="https://www.businessinsider.com/amazon-sidewalk-privacy-neighborhood-wifi-networks-us-2020-11?op=1"&gt;backlash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'd love to hear what others think because my initial reaction is revulsion. And I'm seeing mixed thoughts on articles concerning it. To me it is without my consent and if it weren't for a single device in my home I use Bluetooth for from my iPhone I would definitely have it turned off all the time.&lt;/p&gt;

&lt;p&gt;Why isn't there active, positive consent to participate in this?&lt;/p&gt;

&lt;p&gt;Why isn't this theft of resources, although minimal, to participate in this?&lt;/p&gt;

&lt;p&gt;Do we really want to participate more in the already egregious tracking done by just participating in having a smart phone?&lt;/p&gt;

</description>
      <category>apple</category>
      <category>iot</category>
      <category>privacy</category>
      <category>ios</category>
    </item>
    <item>
      <title>5 CSS Techniques That I Use The Most..!</title>
      <author>Pawan Bhayde</author>
      <pubDate>Tue, 20 Apr 2021 17:45:07 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/5-css-techniques-that-i-use-the-most-13oa</link>
      <guid>https://dev.to/pawanbhayde/5-css-techniques-that-i-use-the-most-13oa</guid>
      <description>&lt;p&gt;What is up everybody today i have 5 unique css techniques that i use most of the time, some techniques you already know and some don't know hopefully you enjoy's this 5 css techniques.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Centering Div&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWvPFLnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp1njhq4zaqgqvspa9u7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWvPFLnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp1njhq4zaqgqvspa9u7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am talk about centering div most of the new developers didn't know how to center child div&lt;/p&gt;

&lt;p&gt;i have one div in white color and i want to move this div in center of the blue color parent div, How i Do..? Basically we can do this in tow methods &lt;/p&gt;

&lt;p&gt;&lt;em&gt;method 1&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="parent"&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.parent{
    display: grid;
    place-content: center;
    height: 100vh;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;method 2&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="parent"&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.parent{
    display:flex;
    text-align: center;
    justify-content: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;2. Little Graphics Line On Headline&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3rlrdBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bitcc856dhc5z4d7e9xb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3rlrdBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bitcc856dhc5z4d7e9xb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lat's talk about this one its not necessary to add this line on your headline but its look batter how we add this?&lt;/p&gt;

&lt;p&gt;This method is helpful you for create this small graphics line&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;This Is Heading&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1{
    position: relative;
}
h1:before{
    content: "";
    position: absolute;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;its very very handy i use all the time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Adding … when text is too long&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-C5UCwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxxma2ik24xsonivdwgd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-C5UCwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxxma2ik24xsonivdwgd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's look at this in 1st image product title its too lenthy and 2ed image you can see title is absolutely perfect how to fix it using css&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="shopping-item"&amp;gt;
  &amp;lt;img var="img" src="https://i5.walmartimages.com/asr/57f89337-45de-4cd4-9f05-e26a107b2644_1.5db5139ea852e09b168744041199fc59.jpeg?odnHeight=100&amp;amp;amp;odnWidth=100&amp;amp;amp;odnBg=FFFFFF"&amp;gt;
  &amp;lt;div var="title"&amp;gt;Keurig K-Select Single Serve, K-Cup Pod Coffee Maker, Matte White&amp;lt;/div&amp;gt; &amp;lt;i var="price"&amp;gt;$99.00&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.shopping-item {
  width: 300px;
  position: relative;
  background-color: #fff;
  height: 110px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  border-radius: 7px;
  margin: 5px;
  box-sizing: border-box;
  padding-left: 110px;
  padding-right: 10px;
  font-family: Arial, sans-serif;
}

.shopping-item&amp;gt;div {
  line-height: 17px;
  font-size: 12px;
  padding-top: 10px;
  color: #017ADB;
  font-weight: bold;
  cursor: pointer;
  max-height: 68px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.shopping-item img {
  width: 90px;
  height: 90px;
  position: absolute;
  top: 10px;
  left: 10px;
  border-radius: 3px;
  overflow: hidden;
}

.shopping-item i {
  color: #FFC94A;
  font-style: normal;
  font-size: 14px;
  line-height: 32px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;4. Styling Button&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edS-vTab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hjax3uwtqva4w5zumpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edS-vTab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hjax3uwtqva4w5zumpi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Styling Button Its Difficult Job for as new developer but its vary easy let's do it&lt;/p&gt;

&lt;p&gt;Buttons are one of the elements which are used over almost every single page. In some cases, they even contain the purpose of the page e.g. buying an item, subscribing to an email list, answering a survey.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button&amp;gt;
Add to Cart
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button {
  margin: 20px;
  line-height: 50px;
  min-width: 150px;
  text-align: center;
  font-family: Arial, sans-serif;
  background-color: #FD310F;
  border-radius: 5px;
  color: #fff;
  border: 0;
  cursor: pointer;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  transition: background-color 0.3s ease-in-out;
}

button:hover {
  background-color: #FE712A;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;5. Tooltips&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W_nBWsDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tlajv3kte1567l1seok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W_nBWsDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tlajv3kte1567l1seok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tooltips is a simple way to giving more info. after they hover it&lt;/p&gt;

&lt;p&gt;its actually goods pretty lets do is fast its very simple one off the biggest issue about tooltips is positioning developer want to resize according to content.So we need something that is flexible and which position it is depending on the position of the element you want to place the tooltip over.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="instagram"&amp;gt;
  &amp;lt;b&amp;gt;
    &amp;lt;svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="heart" class="svg-inline--fa fa-heart fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&amp;gt;&amp;lt;path fill="currentColor" d="M462.3 62.6C407.5 15.9 326 24.3 275.7 76.2L256 96.5l-19.7-20.3C186.1 24.3 104.5 15.9 49.7 62.6c-62.8 53.6-66.1 149.8-9.9 207.9l193.5 199.8c12.5 12.9 32.8 12.9 45.3 0l193.5-199.8c56.3-58.1 53-154.3-9.8-207.9z"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;span class="tooltip"&amp;gt;
      &amp;lt;i&amp;gt;
          &amp;lt;svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="heart" class="svg-inline--fa fa-heart fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&amp;gt;&amp;lt;path fill="currentColor" d="M462.3 62.6C407.5 15.9 326 24.3 275.7 76.2L256 96.5l-19.7-20.3C186.1 24.3 104.5 15.9 49.7 62.6c-62.8 53.6-66.1 149.8-9.9 207.9l193.5 199.8c12.5 12.9 32.8 12.9 45.3 0l193.5-199.8c56.3-58.1 53-154.3-9.8-207.9z"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;30&amp;lt;/i&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/b&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  background-color: #000;
}
.instagram{
  margin-top: 100px;
  height: 50px;
  position: relative;
  border: 1px solid #ccc;
  background-color: #fff;
}
.instagram &amp;gt; b{
  position: absolute;
  left: 75%;
  width: 50px;
  height: 50px;
  display: inline-block;
  top: 0;
  margin-left: -25px;
}
.instagram &amp;gt; b &amp;gt; svg{
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  height: 16px;
}
.instagram &amp;gt; b .tooltip{
  position: absolute;
  left: 50%;
  bottom: 60px;
  line-height: 30px;
  border-radius: 5px;
  padding: 0 5px;
  color: #fff;
  transform:translateX(-50%);
  background-color: #F44456;
  font-size: 12px;
}
.instagram &amp;gt; b .tooltip:after{
  width: 0;
  height: 0;
  display: block;
  content: '';
  bottom: -8px;
  left: 50%;
  position: absolute;
  margin-left: -8px;
  border-left: 8px solid transparent;
  border-right: 8px solid transparent;
  border-top: 8px solid #F44456;
}
.instagram &amp;gt; b .tooltip i{
  padding-left: 24px;
  position: relative;
  display: inline-block;
  font-style: normal;
  padding-right: 5px;
}
.instagram &amp;gt; b .tooltip i svg{
  position: absolute;
  top: 50%;
  left: 12px;
  transform: translate(-50%, -50%);
  height: 16px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note:- visit my youtube channel for frontend tutorials&lt;br&gt;
&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zic_2tNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--C-k5zhb8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616392/67585460-1ef8-429f-9da3-98339a4e0449.jpg" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/react-vs-angular-comparison-which-is-better-for-your-project-in-2021-4o5a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React vs Angular comparison: Which is better for your project in 2021?&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde ・ Apr 20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#angular&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Fastify and PostgreSQL REST API</title>
      <author>Kenwanjohi</author>
      <pubDate>Tue, 20 Apr 2021 17:23:48 +0000</pubDate>
      <link>https://dev.to/kenwanjohi/fastify-and-postgresql-rest-api-2f9l</link>
      <guid>https://dev.to/kenwanjohi/fastify-and-postgresql-rest-api-2f9l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#enter-the-speed-force"&gt;
  &lt;/a&gt;
  Enter the 'speed force'
&lt;/h2&gt;

&lt;p&gt;From the &lt;a href="https://www.fastify.io/"&gt;documentation&lt;/a&gt;,  fastify is a fast and low overhead web framework for Node.js.&lt;/p&gt;

&lt;p&gt;So, I decided to explore some of the awesome features that fastify offers including but not limited to, speed, extensibility via plugins and decorators, schema validation, and serialization and logging. I dived into their &lt;a href="https://www.fastify.io/docs/latest/"&gt;documentation&lt;/a&gt;, which is excellent by the way, with the help of some GitHub repositories and decided to build some REST API endpoints powered by fastify and a PostgreSQL database.&lt;/p&gt;

&lt;p&gt;You can check out the &lt;a href="https://github.com/Kenwanjohi/fastify"&gt;source code&lt;/a&gt; or follow along in this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h3&gt;

&lt;p&gt;Navigate to the root folder of your project and run &lt;code&gt;npm init&lt;/code&gt; to initialize your project. Create an &lt;code&gt;src&lt;/code&gt; folder for your project source code and create an &lt;code&gt;index.js&lt;/code&gt; file as the entry point.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing dependencies
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Installing nodemon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/nodemon"&gt;nodemon&lt;/a&gt; is a dev dependency that'll monitor your file changes and restart your server automatically.&lt;/p&gt;

&lt;p&gt;You can install nodemon locally with npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install nodemon --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this npm script to the scripts in the &lt;code&gt;package.json&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon src/index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Installing Fastify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install with npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i fastify --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hello-world-starting-and-running-your-server"&gt;
  &lt;/a&gt;
  Hello World: Starting and running your server
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;index.js&lt;/code&gt; file add this block of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the first line, we create a fastify instance and enable logging, fastify uses &lt;a href="https://getpino.io/#/"&gt;pino&lt;/a&gt; as its logger. We then define a &lt;code&gt;GET&lt;/code&gt; route method, specify a homepage endpoint &lt;code&gt;'/'&lt;/code&gt; and pass in the route handler function which responds with the object &lt;code&gt;{hello: 'world'}&lt;/code&gt; when we make a get request to the homepage.&lt;/p&gt;

&lt;p&gt;We instantiate our fastify server instance (wrapped in our &lt;code&gt;start&lt;/code&gt; function)  and listen for requests on port 3000. To start the server, run &lt;code&gt;npm start&lt;/code&gt; on your terminal in the root folder. You Server should now be running and the following will be logged in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"level":30,"time":1618477680757,"pid":5800,"hostname":"x","msg":"Server listening at http://127.0.0.1:3000"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you visit the homepage you should see the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl http://localhost:3000/ 
{"hello":"world"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great we have our server!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h2&gt;

&lt;p&gt;We can extend fastify's functionality with plugins.&lt;br&gt;
From the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A plugin can be a set of routes, a server decorator, or whatever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can refactor our route into a plugin and put it in a separate file i.e &lt;code&gt;routes.js&lt;/code&gt;, then require it in our root file and use the &lt;code&gt;register&lt;/code&gt; API to add the route or other plugins.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;routes.js&lt;/code&gt; file and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; 
    &lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then require our module in &lt;code&gt;index.js&lt;/code&gt; and register it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A request on the homepage should still work. Great, we have our first plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-database"&gt;
  &lt;/a&gt;
  Creating our database
&lt;/h2&gt;

&lt;p&gt;To create a database we first need to connect to &lt;code&gt;psql&lt;/code&gt;, an interactive terminal for working with Postgres.&lt;/p&gt;

&lt;p&gt;To connect to &lt;code&gt;psql&lt;/code&gt; run the command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;psql -h localhost -U postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter your password in the prompt to connect to &lt;code&gt;psql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CREATE DATABASE databaseName&lt;/code&gt; statement creates a database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To connect to the created database run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create our table run the statement&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nv"&gt;"createdAt"&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="nb"&gt;BOOLEAN&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nv"&gt;"dueDate"&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="nb"&gt;BOOLEAN&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; 
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#connecting-our%C2%A0-database"&gt;
  &lt;/a&gt;
  Connecting our  database
&lt;/h2&gt;

&lt;p&gt;To interface with postgreSQL database we need &lt;a href="https://node-postgres.com/"&gt;node-postgres&lt;/a&gt; or the &lt;code&gt;pg&lt;/code&gt; driver.&lt;/p&gt;

&lt;p&gt;To install &lt;code&gt;node-postgres&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install pg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Database connection plugin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's create a plugin to connect to our database. Create a &lt;code&gt;db.js&lt;/code&gt; file and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastifyPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5432&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DATABASE&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dbconnector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db connected succesfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fastifyPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbconnector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's skip the &lt;code&gt;fastifyPlugin&lt;/code&gt; part first.&lt;/p&gt;

&lt;p&gt;We require &lt;code&gt;Client&lt;/code&gt; module from &lt;code&gt;node-postgres&lt;/code&gt; and create a &lt;code&gt;client&lt;/code&gt; instance, passing in the object with the various fields.&lt;/p&gt;

&lt;p&gt;Make sure to create a &lt;code&gt;.env&lt;/code&gt; file and add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PASSWORD='yourpassword'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install and require the &lt;code&gt;dotenv&lt;/code&gt; module to load the environment variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then create our &lt;code&gt;dbconnector&lt;/code&gt; plugin and inside the try block, we connect to our postgres database.&lt;/p&gt;

&lt;p&gt;Inside the block you can also see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What is the decorate function?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fastify, to add functionality to the fastify instance, you use &lt;a href="https://www.fastify.io/docs/latest/Decorators/"&gt;decorators&lt;/a&gt;. We use the &lt;code&gt;decorate&lt;/code&gt; API, pass the property name &lt;code&gt;'db'&lt;/code&gt; as the first argument and the value of our &lt;code&gt;client&lt;/code&gt; instance (&lt;code&gt;{client}&lt;/code&gt;) as the second argument. The value could also be a function or a string.&lt;br&gt;
We export the plugin wrapped in a &lt;code&gt;fastifyPlugin&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Require the module in the &lt;code&gt;index.js&lt;/code&gt; file and register it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbconnector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbconnector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now access our client instance in other parts of the application for instance in our routes to query data using  &lt;code&gt;fastify.db.client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a step back to the &lt;code&gt;fastifyPlugin&lt;/code&gt; module. Why wrap our plugin with fastifyPlugin? When we register a plugin, we create a fastify context (encapsulation), which means access to the data outside our registered plugin is restricted. In this case, we can't access our database &lt;code&gt;client&lt;/code&gt; instance using &lt;code&gt;fastify.db.client&lt;/code&gt; anywhere in our application.&lt;/p&gt;

&lt;p&gt;To share context, we wrap our plugin in a &lt;code&gt;fastifyPlugin&lt;/code&gt; module. We can now access our database &lt;code&gt;client&lt;/code&gt; instance anywhere in our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serialization"&gt;
  &lt;/a&gt;
  Serialization
&lt;/h2&gt;

&lt;p&gt;Lets refactor our homepage route to return information from our database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="c1"&gt;//Access our client instance value from our decorator&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;allTodos&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * FROM todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We First access our database &lt;code&gt;client&lt;/code&gt; instance and assign it to a &lt;code&gt;client&lt;/code&gt; variable.&lt;br&gt;
Inside our routes we query all columns from our database using the shorthand &lt;code&gt;*&lt;/code&gt; and send the returned todos using &lt;code&gt;reply.send(rows)&lt;/code&gt; - you could also use &lt;code&gt;return rows&lt;/code&gt;.&lt;br&gt;
Make sure you add some todos in your database first in the &lt;code&gt;psql&lt;/code&gt; terminal i.e:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"createdAt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"dueDate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'54e694ce-6003-46e6-9cfd-b1cf0fe9d332'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'learn fastify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2021-04-20T12:39:25Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2021-04-22T15:22:20Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"createdAt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"dueDate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'d595655e-9691-4d1a-9a6b-9fbba046ae36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'learn REST APIs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2021-04-18T07:24:07Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If an error occurs, trying to query our database, we throw the error.&lt;/p&gt;

&lt;p&gt;When you look closer at our get route method, you can see have an object as our second argument with a &lt;code&gt;schema&lt;/code&gt; key and &lt;code&gt;allTodos&lt;/code&gt; as the value.&lt;/p&gt;

&lt;p&gt;Fastify uses  &lt;a href="https://www.npmjs.com/package/fast-json-stringify"&gt;fast-json-stringify&lt;/a&gt; to serialize your response body when a schema is provided in the route options.&lt;/p&gt;

&lt;p&gt;To add the schema create a &lt;code&gt;schemas.js&lt;/code&gt; file and add the &lt;code&gt;allTodos schema&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;createdAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;important&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dueDate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;                                                              
                    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;                                           
                    &lt;span class="na"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;                  
                    &lt;span class="na"&gt;important&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fastify recommends using &lt;a href="https://json-schema.org/"&gt;JSON Schema&lt;/a&gt; to serialize your outputs, you can read how to write JSON schema &lt;a href="https://json-schema.org/understanding-json-schema/index.html"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We're specifying the &lt;code&gt;response&lt;/code&gt;, the response &lt;code&gt;status code&lt;/code&gt;, and the entity which is an &lt;code&gt;array&lt;/code&gt; type. The &lt;code&gt;items&lt;/code&gt; specify each entry in the array as an object with the required keys and the properties with the various fields and types.&lt;/p&gt;

&lt;p&gt;Remember to require the module in the &lt;code&gt;routes.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;routes.js&lt;/code&gt; file, let's add a &lt;code&gt;POST&lt;/code&gt; method route inside our route plugin to add todos to our database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="nx"&gt;createdAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`INSERT INTO todos (id, name, "createdAt", important, "dueDate", done)
                                    VALUES($1, $2, $3, $4, $5, $6 ) RETURNING *`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We allow the client to send a JSON object in the body with &lt;code&gt;name&lt;/code&gt; of the todo, &lt;code&gt;important&lt;/code&gt;, and &lt;code&gt;dueDate&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;We then generate a unique &lt;code&gt;id&lt;/code&gt;, assign false to &lt;code&gt;done&lt;/code&gt; and a timestamp assigned to &lt;code&gt;createdAt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To generate the unique id install &lt;code&gt;uuid&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install uuid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Require the module in the &lt;code&gt;routes.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then construct a query object with a &lt;code&gt;text&lt;/code&gt; property with the SQL statement to insert the todos in the database and the &lt;code&gt;values&lt;/code&gt; property containing the values to be inserted into the respective columns.&lt;/p&gt;

&lt;p&gt;After a successful insert we send a &lt;code&gt;201 Created&lt;/code&gt; status code back to the client.&lt;br&gt;
In the &lt;code&gt;schemas.js&lt;/code&gt; file, let's add the validation schema for our todos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt;
            &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;important&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fastify uses &lt;a href="https://ajv.js.org/"&gt;Ajv&lt;/a&gt; to validate requests.&lt;br&gt;
We expect the client to always send the &lt;code&gt;name&lt;/code&gt; of the todo by adding it in the required property array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dueDate&lt;/code&gt; property can be omitted by the client whereby it will be &lt;code&gt;null&lt;/code&gt; by default. This is made possible by setting the &lt;code&gt;nullable&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; which allows a data instance to be JSON null. When provided it has to be of the format 'date-time'.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;client&lt;/code&gt; can optionally indicate whether a todo is important or it falls back to the default.&lt;/p&gt;

&lt;p&gt;If the above conditions are not satisfied, fastify will automatically send an error object with the error message.&lt;/p&gt;

&lt;p&gt;For instance, if you omit a name, you should see an error like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"statusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bad Request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"body should have required property 'name'"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Our validation is working&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-other-rest-endpoints"&gt;
  &lt;/a&gt;
  Adding other REST endpoints
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Update todo&lt;/strong&gt;&lt;br&gt;
Let's allow users to set their todo as done or importance of the todo or change dueDate. To do that let's add a &lt;code&gt;PATCH&lt;/code&gt; method route to our routes plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;`UPDATE todos SET 
                                important = COALESCE($1, important), 
                                "dueDate" = COALESCE($2, "dueDate"), 
                                done = COALESCE($3, done) 
                                WHERE id = $4 RETURNING *`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;values&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;204&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're extracting the &lt;code&gt;id&lt;/code&gt; of the todo we want to update from the parameter and the values from the request body.&lt;/p&gt;

&lt;p&gt;We then create our query statement, updating the columns provided optionally using the &lt;code&gt;COALESCE&lt;/code&gt; function. That is, if the clients omit some properties in the JSON body, we update only the provided properties and leave the rest as they are in the todo row.&lt;/p&gt;

&lt;p&gt;We then respond with a &lt;code&gt;204 No Content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets add a  validation schema for our route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;important&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;params validates the params object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete todo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To delete a todo, we just need the &lt;code&gt;id&lt;/code&gt; sent in the URL parameter.&lt;br&gt;
Add a &lt;code&gt;DELETE&lt;/code&gt; method route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE FROM todos
                    WHERE id = $1 RETURNING *&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;204&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets add a  validation schema for our &lt;code&gt;DELETE&lt;/code&gt; route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Give fastify a try and "take your HTTP server to ludicrous speed" ~ &lt;a href="https://twitter.com/matteocollina"&gt;Matteo Collina&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check out the project source code &lt;a href="https://github.com/Kenwanjohi"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fastify.io/docs/latest/"&gt;Fastify Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://json-schema.org/understanding-json-schema/index.html"&gt;Understanding JSON schema&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fastify examples; GitHub repos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/delvedor/fastify-example"&gt;fastify-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fastify/fastify-example-todo"&gt;fastify-example-todo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>New Bash Alias: Git Out</title>
      <author>Parth Agarwal</author>
      <pubDate>Tue, 20 Apr 2021 16:59:55 +0000</pubDate>
      <link>https://dev.to/ra101/new-bash-alias-git-out-2603</link>
      <guid>https://dev.to/ra101/new-bash-alias-git-out-2603</guid>
      <description>&lt;p&gt;Up until now, we only had &lt;code&gt;git commit&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt;. But what about &lt;code&gt;git out&lt;/code&gt;? If you know what it feels like to be left out, you should empathize with this command. Even though it is a part of this legendary trio, it is never actually used.&lt;/p&gt;

&lt;p&gt;But not today, Not anymore!&lt;br&gt;
Let's right the wrongs of this society!&lt;br&gt;
So, if you are with me!&lt;/p&gt;

&lt;p&gt;Open Your &lt;code&gt;.bashrc&lt;/code&gt; File!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nano ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Add This Line! &amp;amp; Save it! (ctrl+x, y, return)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"out"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s2"&gt;"exit"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else &lt;/span&gt;&lt;span class="nb"&gt;command &lt;/span&gt;git &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;And Finally! Source it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Good job! Be Proud! Because of you, there is one less lonely command!&lt;/p&gt;

&lt;p&gt;PS: Feel free to share any meme command out there.&lt;/p&gt;

</description>
      <category>git</category>
      <category>bash</category>
      <category>github</category>
    </item>
    <item>
      <title>Ruby Tutorial for Python Programmers: how to make the switch</title>
      <author>Amanda Fawcett</author>
      <pubDate>Tue, 20 Apr 2021 16:52:40 +0000</pubDate>
      <link>https://dev.to/educative/ruby-tutorial-for-python-programmers-how-to-make-the-switch-305n</link>
      <guid>https://dev.to/educative/ruby-tutorial-for-python-programmers-how-to-make-the-switch-305n</guid>
      <description>&lt;p&gt;Ruby is a general-purpose, dynamic, open source programming language that focuses on &lt;strong&gt;simplicity and productivity&lt;/strong&gt;. The Ruby programming language is frequently compared to Python for their similarities. Many developers say that learning Ruby is easier if you know Python due to their similarities. However, these two languages differ in major ways.&lt;/p&gt;

&lt;p&gt;We've created this basic introduction to help you make the transition from Python to Ruby. We'll go over their main differences and then take a dive into Ruby's syntax so you can get hands-on with Ruby code quickly. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's what we'll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#vs"&gt;Ruby vs Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#differences"&gt;Summary of Main Code Differences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hello"&gt;Hello World with Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#syntax"&gt;Ruby Syntax Quick Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next"&gt;What to learn next with Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ruby-vs-python"&gt;
  &lt;/a&gt;
  Ruby vs Python
&lt;/h2&gt;

&lt;p&gt;Ruby and Python are both popular programming languages known for their speed, simplicity, and user-friendly syntax. Both languages are flexible, object-oriented , dynamic, and have a lot of useful frameworks and libraries to use, particularly for web applications and web development &lt;em&gt;(&lt;a href="https://www.educative.io/blog/ruby-on-rails"&gt;Ruby on Rails&lt;/a&gt; for Ruby or &lt;a href="https://www.educative.io/blog"&gt;Django&lt;/a&gt; for Python)&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; is a high-level, interpreted programming language, created in 1995 by Yukihiro Matsumoto. His goal was to make an object-oriented scripting language that improved on other scripting languages of the time. &lt;/p&gt;

&lt;p&gt;Ruby also allows for &lt;a href="https://www.educative.io/blog/what-is-functional-programming-python-js-java"&gt;functional programming&lt;/a&gt; and is known for being very similar to written human languages, making it easy to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; is an interpreted, high-level general-purpose language, created by Guido van Rossum with the goal of code readability. Python is know well-loved for its robust standard library.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;No primitive data types. Everything is an object.&lt;/td&gt;
&lt;td&gt;Has primitive types and objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mixins can be used&lt;/td&gt;
&lt;td&gt;Mixins cannot be used&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Less available functions. Relies mostly on methods.&lt;/td&gt;
&lt;td&gt;Lots of available functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cannot modify built-in classes&lt;/td&gt;
&lt;td&gt;Can modify built-in classes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Supports Tuples with Rinda. Other collections include Arrays, Hash, Set, and Struct.&lt;/td&gt;
&lt;td&gt;Supports Tuples, Sets, Dictionary (Hash), and Lists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iterators less common&lt;/td&gt;
&lt;td&gt;Iterators are very common&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#career"&gt;
  &lt;/a&gt;
  Career
&lt;/h4&gt;

&lt;p&gt;Both languages are used by big companies. Companies that use Python include YouTube, Instagram, Spotify, Reddit, Dropbox, while Ruby is used at Hulu, Basecamp, GitHub, and Airbnb. Ruby developers also tend to make higher salaries than Python developers. StackOverflow's 2020 survey lists Ruby's global average salary at $71k and Python's at $59k. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Both Ruby and Python offer higher annual salaries than other software development languages, including PHP, JavaScript, and Java.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#machine-learning"&gt;
  &lt;/a&gt;
  Machine Learning
&lt;/h4&gt;

&lt;p&gt;Python is currently the go-to language for machine learning (ML) and artificial intelligence (AI) due to its extensive libraries and visualization tools. Ruby does offer some competitive options, but there is a long way to go before it will hold a torch to Python. So, if you are looking to work in data science, Python is the winner.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#web-frameworks"&gt;
  &lt;/a&gt;
  Web Frameworks
&lt;/h4&gt;

&lt;p&gt;The main web frameworks for both Ruby and Python, Django and Ruby on Rails, are rather similar. Both are based on the classic &lt;a href="https://www.educative.io/blog/mvc-tutorial"&gt;model-view-controller (MVC)&lt;/a&gt; pattern, and they both provide similar  repositories (PyPi for Python and RubyGems for Ruby). Both frameworks perform well and are easy to learn.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#testing-environment"&gt;
  &lt;/a&gt;
  Testing Environment
&lt;/h4&gt;

&lt;p&gt;Test-driven development (TDD) is pretty standard for both Ruby and Python, but Ruby does offer &lt;strong&gt;behavior-driven development (BDD)&lt;/strong&gt; while Python does not, which may be useful in some cases&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h4&gt;

&lt;p&gt;Both languages have large, active communities, which Python's community being a bit larger, namely because Ruby is most popular for its development tool Ruby on Rails. Both communities seem to be equally active and supportive. &lt;/p&gt;

&lt;p&gt;One benefit to Ruby is that there are unique Ruby forums and job boards since the language is more specialized in some regards.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-of-main-code-differences"&gt;
  &lt;/a&gt;
  Summary of Main Code Differences
&lt;/h2&gt;

&lt;p&gt;Now that we understand the difference between Ruby and Python at a high level, let's dive into the main code differences between the two. We've compiled the main things that differ from Python below. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the Ruby programming language:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strings are mutable&lt;/li&gt;
&lt;li&gt;You can make constants &lt;/li&gt;
&lt;li&gt;Parentheses for most method calls are optional&lt;/li&gt;
&lt;li&gt;There’s only one mutable list container (Array)&lt;/li&gt;
&lt;li&gt;There are no “new style” or “old style” classes &lt;/li&gt;
&lt;li&gt;Only &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; evaluate to false, and everything else is &lt;code&gt;true&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You never directly access attributes. Instead, we use method calls.&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;elsif&lt;/code&gt; instead of &lt;code&gt;elif&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We use mixins instead of multiple inheritance&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yield&lt;/code&gt; executes another function that is passed as the final argument, then it resumes&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, and &lt;code&gt;protected&lt;/code&gt; for access &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world-with-ruby"&gt;
  &lt;/a&gt;
  Hello World with Ruby
&lt;/h2&gt;

&lt;p&gt;Now that we understand how Ruby and Python differ at the code level, let's look at some actual Ruby code, starting with the classic Hello World program.  Take a look below and note how simply Ruby's syntax is here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;puts&lt;/code&gt; keyword is used to print. Remember: Ruby's code is very readable, designed to emulate spoken English language. &lt;/p&gt;

&lt;p&gt;There's even a simpler way to do this. Ruby comes with a built-in program that will show the results of any statements you feed it, called &lt;strong&gt;Interactive Ruby (IRB)&lt;/strong&gt;. This is the best way to learn Ruby. First, open IRB:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;macOS:&lt;/strong&gt; open Terminal and type &lt;code&gt;irb&lt;/code&gt;. Hit enter.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Linux:&lt;/strong&gt; open up a shel, type &lt;code&gt;irb&lt;/code&gt;, and hit enter.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Windows:&lt;/strong&gt; open Interactive Ruby from the Start Menu (see the Ruby section)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;001&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second line tells us the result of the last expression. We can print this using the &lt;code&gt;puts&lt;/code&gt; command we learned before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="no"&gt;World&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here,  &lt;code&gt;=&amp;gt; nil&lt;/code&gt; is the result of the expression, since &lt;code&gt;puts&lt;/code&gt; always returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ruby-syntax-quick-guide"&gt;
  &lt;/a&gt;
  Ruby Syntax Quick Guide
&lt;/h2&gt;

&lt;p&gt;Let's now quickly go over the basics of Ruby's syntax that may be different from what you're used to in Python. Note how Ruby differs and how it is similar as you read.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#variable-assignment"&gt;
  &lt;/a&gt;
  Variable Assignment
&lt;/h3&gt;

&lt;p&gt;In Ruby, you assign a name to a variable using the assignment operator &lt;code&gt;=&lt;/code&gt;, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a list of the different kinds of variables in Ruby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local variables (&lt;code&gt;something&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Instance variables (&lt;code&gt;@something&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Constants (&lt;code&gt;Something&lt;/code&gt; or &lt;code&gt;SOMETHING&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Global variables (&lt;code&gt;$something&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#identifiers-and-keywords"&gt;
  &lt;/a&gt;
  Identifiers and Keywords
&lt;/h3&gt;

&lt;p&gt;Keywords and identifiers are similar to Python. Identifiers are case sensitive, and they may consist of alphanumeric characters and underscore &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ruby's reserved keywords include the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcAna9lU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeeemt0x8roiywvf03u6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcAna9lU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeeemt0x8roiywvf03u6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;In Ruby, a string is a sequence of characters inside quotation marks &lt;code&gt;" "&lt;/code&gt;. We can also use single quotation marks. &lt;/p&gt;

&lt;p&gt;You can concatenate strings with the plus sign &lt;code&gt;+&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"snow"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"ball"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; snowball&lt;/p&gt;

&lt;p&gt;In Ruby, multiplying a String by a number will repeat a String that many times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Ruby"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; RubyRubyRuby&lt;/p&gt;

&lt;p&gt;Some important methods for Ruby strings include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gsub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; Ruby's percentage sign &lt;code&gt;%&lt;/code&gt; shortcut can be used with strings and arrays&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%w&lt;/code&gt; will create an array of strings&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%i&lt;/code&gt; with create an array of symbols&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%q&lt;/code&gt; will create a string without quotation marks&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#hashes"&gt;
  &lt;/a&gt;
  Hashes
&lt;/h3&gt;

&lt;p&gt;In Ruby, you can create a Hash by assigning a key to a value with &lt;code&gt;=&amp;gt;&lt;/code&gt;. We separate these key/value pairs with commas and enclose the whole thing with curly braces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"eins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"two"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"zwei"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"three"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"drei"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This defines a Hash with three key/value pairs, so we can look up three values (the strings &lt;code&gt;"eins"&lt;/code&gt;, &lt;code&gt;"zwei"&lt;/code&gt;, and &lt;code&gt;"drei"&lt;/code&gt;) using three different keys (the strings &lt;code&gt;"one"&lt;/code&gt;, &lt;code&gt;"two"&lt;/code&gt;, and &lt;code&gt;"three"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Some important methods for Ruby hashes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;new&lt;/code&gt; &lt;em&gt;(for default values)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h3&gt;

&lt;p&gt;In Ruby, we create an Array by separating values with commas and enclosing this list with square brackets, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ruby Arrays always keep their order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like in Python, there are all sorts of things you can do with Arrays. The most important methods being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;push&lt;/code&gt; / &lt;code&gt;pop&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatten&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of the intersection operator &lt;code&gt;&amp;amp;&lt;/code&gt;, which finds the intersecting parts of our arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 2 3&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#parenthesis"&gt;
  &lt;/a&gt;
  Parenthesis
&lt;/h3&gt;

&lt;p&gt;In Ruby, parenthesis and semicolons are not required, but we can use them. However, we follow these basic rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do use parenthesis with method arguments: &lt;code&gt;def foo(a, b, c)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Do use parenthesis to change the priority of an operation: &lt;code&gt;(a.size + b.size) * 2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Don't use parenthesis when defining a method that has no arguments: &lt;code&gt;def foo&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;
  &lt;a href="#commenting"&gt;
  &lt;/a&gt;
  Commenting
&lt;/h4&gt;

&lt;p&gt;There are three main ways we can add comments to a Ruby program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Single line comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Multiple&lt;/span&gt;
&lt;span class="c1"&gt;# Lines&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="cm"&gt;=begin
Block fashion
Commenting
=end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h3&gt;

&lt;p&gt;In Ruby, we define methods using the &lt;code&gt;def&lt;/code&gt; keyword followed by &lt;code&gt;method_name&lt;/code&gt;. IT ends with the &lt;code&gt;end&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_name&lt;/span&gt;
&lt;span class="c1"&gt;# Statement &lt;/span&gt;
&lt;span class="c1"&gt;# Statement &lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pass parameters to our methods in parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Statement &lt;/span&gt;
&lt;span class="c1"&gt;# Statement &lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;In Ruby, we create classes using the &lt;code&gt;class&lt;/code&gt; keyword followed by the name of the class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class_name&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The first letter of your class names should be a capital letter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Ruby, objects are created with the &lt;code&gt;new&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Class_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#conditionals"&gt;
  &lt;/a&gt;
  Conditionals
&lt;/h3&gt;

&lt;p&gt;Conditional statements are similar to most other languages with a few slight differences. Take a look at the examples below to get at sense of how they look in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;between?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is between 1 and 10"&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;between?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is between 11 and 20"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is bigger than 20"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; The number is between 1 and 10&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;elsif&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; statements are optional. You can have an &lt;code&gt;if&lt;/code&gt; statement without &lt;code&gt;elsif&lt;/code&gt; or &lt;code&gt;else&lt;/code&gt; branches, an &lt;code&gt;if&lt;/code&gt; statement only with an &lt;code&gt;else&lt;/code&gt;, or you could have an &lt;code&gt;if&lt;/code&gt; statement with one or more &lt;code&gt;elsif&lt;/code&gt; statements. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ruby also has a shorthand for working with conditional statements. So, we could write this bit of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is odd."&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is odd."&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next-with-ruby"&gt;
  &lt;/a&gt;
  What to learn next with Ruby
&lt;/h2&gt;

&lt;p&gt;Now that you know the basics of Ruby and know how it differs from Python, you're ready to cover more advanced topics. We recommended studying the following concepts next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby inheritance&lt;/li&gt;
&lt;li&gt;Using Ruby libraries&lt;/li&gt;
&lt;li&gt;Nested arrays &lt;/li&gt;
&lt;li&gt;Ruby blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started with these concepts and get hands-on with Ruby, check out Educative's course &lt;strong&gt;&lt;a href="https://www.educative.io/courses/learn-ruby-from-scratch"&gt;Learn Ruby from Scratch.&lt;/a&gt;&lt;/strong&gt; This introductory course offers tons of hands-on practice on all the need-to-know topics, including variables, built-in classes, objects, conditionals, blocks and much more!&lt;/p&gt;

&lt;p&gt;By the end, you'll be a confident Ruby developer, ready to take on complex projects!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-reading-about-ruby"&gt;
  &lt;/a&gt;
  Continue reading about Ruby
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/ruby-best-practices"&gt;8 tricks and best practices for improving your Ruby code
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/ruby-on-rails"&gt;Getting Started with Ruby on Rails: build a web app with Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/docker-with-rails"&gt;Docker with Rails: Benefits and Top Use Cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>python</category>
      <category>languages</category>
      <category>functional</category>
    </item>
    <item>
      <title>Challenge 1: Create a simple app in Lambda + DynamoDB + Serverless Framework</title>
      <author>Raphael Jambalos</author>
      <pubDate>Tue, 20 Apr 2021 16:42:23 +0000</pubDate>
      <link>https://dev.to/raphael_jambalos/challenge-1-create-a-simple-app-in-lambda-dynamodb-serverless-framework-of6</link>
      <guid>https://dev.to/raphael_jambalos/challenge-1-create-a-simple-app-in-lambda-dynamodb-serverless-framework-of6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-the-challenge"&gt;
  &lt;/a&gt;
  About the challenge
&lt;/h2&gt;

&lt;p&gt;A few of my developer friends and colleagues at work asked me how they can learn more about AWS. I told them that the best way to learn is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To do hands-on experience&lt;/li&gt;
&lt;li&gt;Learn something that has close parallels to what you're doing&lt;/li&gt;
&lt;li&gt;Solve a well-defined problem that you have to research the answer for instead of handing it to you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, the serverless challenge was born. The challenge is best suited for people who have some experience in development but have not necessarily touched up on the latest trend of serverless computing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#situation"&gt;
  &lt;/a&gt;
  Situation
&lt;/h2&gt;

&lt;p&gt;You are the dev lead (aka 'the only dev') of a chain of restaurants. To increase sales, your boss wants you to create a simple loyalty application. He has heard of the Serverless Framework and how it allows your team to use serverless technologies like Lambda to deploy your application. Your boss is particularly sensitive to cost. Since Lambda only charges you when the code is run (when someone uses your app), your boss is thrilled to introduce the technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#specifications"&gt;
  &lt;/a&gt;
  Specifications
&lt;/h2&gt;

&lt;p&gt;Create 3 Lambda functions for each endpoint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST /loyalty-cards: create a loyalty card&lt;/li&gt;
&lt;li&gt;GET /loyalty-cards/10: display the loyalty card you just created using the id&lt;/li&gt;
&lt;li&gt;GET /loyalty-cards: display all loyalty cards&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You must follow the guidelines below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Lambda function must be deployed using the Serverless Framework (SF). SF is a tool that makes deploying Lambda functions easier. You no longer have to package dependencies and upload code to Lambda manually. All you need to do is run "serverless deploy".&lt;/li&gt;
&lt;li&gt;Your data must persist, and your database must be DynamoDB. DynamoDB is a NoSQL database service by AWS. Unlike traditional relational databases, DynamoDB does not maintain a schema. Except for the primary key attributes (which have to be unique for each record), you can add different attributes for different items in the table.

&lt;ul&gt;
&lt;li&gt;NodeJS - &lt;a href="https://aws.amazon.com/sdk-for-javascript/"&gt;https://aws.amazon.com/sdk-for-javascript/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;The resources here will certainly help you get started with this challenge. But it won't be the only ones you'll use. You will have to research some answers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#set-up-your-aws-cli"&gt;
  &lt;/a&gt;
  Set up your AWS CLI
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create your own AWS account (if you don't have access to one). See the &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;AWS Tutorial&lt;/a&gt; on how to do this.&lt;/li&gt;
&lt;li&gt;Setup AWS CLI in your local:  &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html"&gt;https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#serverless-in-aws"&gt;
  &lt;/a&gt;
  Serverless in AWS
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Hello World in Lambda - your first Lambda function deployed using Serverless Framework

&lt;ul&gt;
&lt;li&gt;NodeJS: &lt;a href="https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/node/"&gt;https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/node/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Python: &lt;a href="https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/python/"&gt;https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/python/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Creating Rest APIs

&lt;ul&gt;
&lt;li&gt;NodeJS: &lt;a href="https://www.serverless.com/blog/node-rest-api-with-serverless-lambda-and-dynamodb"&gt;https://www.serverless.com/blog/node-rest-api-with-serverless-lambda-and-dynamodb&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Python: &lt;a href="https://www.serverless.com/examples/aws-python-rest-api-with-dynamodb/"&gt;https://www.serverless.com/examples/aws-python-rest-api-with-dynamodb/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#show-off-your-work"&gt;
  &lt;/a&gt;
  Show off your work!
&lt;/h2&gt;

&lt;p&gt;Comment a screencap of your work below. Or better yet, create a blog post here in dev.to explaining how you did it. &lt;/p&gt;

&lt;p&gt;If you have any questions or are stuck somewhere, comment below or send me a pm, and I'd be happy to help you.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@avirichards?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Avi Richards&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/computer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>serverless</category>
    </item>
  </channel>
</rss>
