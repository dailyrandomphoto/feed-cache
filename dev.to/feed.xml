<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Free API Servers - Open-source REST products: Django, Node JS, Flask </title>
      <author>Sm0ke</author>
      <pubDate>Mon, 26 Jul 2021 19:39:21 +0000</pubDate>
      <link>https://dev.to/sm0ke/free-api-servers-open-source-rest-products-3nfm</link>
      <guid>https://dev.to/sm0ke/free-api-servers-open-source-rest-products-3nfm</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents a collection with simple REST Servers built with a unified API definition across multiple frameworks: Django, Node JS/ Express, Flask, and FastAPI (coming soon). The good part is the usability of any of these servers with React and Vue UI Kits with less effort. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;(free) &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/django"&gt;API Server Django&lt;/a&gt; - built with &lt;strong&gt;Django REST Framework&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;(free) &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/flask"&gt;API Server Flask&lt;/a&gt; - the API uses &lt;strong&gt;flask_restx&lt;/strong&gt; to manage nodes&lt;/li&gt;
&lt;li&gt;(free) &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/node-js"&gt;API Server NodeJS&lt;/a&gt; - built with Typescript/Express/TypeORM&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/api-server-nodejs-pro"&gt;API Node JS PRO&lt;/a&gt; - built with Typescript/MongoDB/Mongoose&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;React products&lt;/strong&gt; enhanced with JWT authentication compatible with mentioned API Servers:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/react-berry-admin-template"&gt;React Berry Dashboard&lt;/a&gt; - open-source sample&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/react-datta-able-dashboard"&gt;React Datta Dashboard&lt;/a&gt; - open-source sample&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/react-node-js-datta-able-pro"&gt;React Datta PRO&lt;/a&gt; - commercial fullstack React dashboard&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wI7Dsa5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utbaynmzqri9rt32x3fx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wI7Dsa5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utbaynmzqri9rt32x3fx.png" alt="React Datta PRO - Fullstack React Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-using-a-unified-api-interface"&gt;
  &lt;/a&gt;
  Why Using a &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/api-unified-definition"&gt;Unified API Interface&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A while ago, based on our community feedback, we decided to implement a unified API definition across all supported servers (Flask, Django, Node JS) and let users decide the preferred backend framework without changing the UI once a backend migration occurs from Flask to Django or from Django to Node JS for instance. Using a common definition, basically all frontend products, despite the technology,  can be used without extra efforts with currently provided backends and stay compliant with the future ones: FastAPI, Koa, etc.&lt;/p&gt;

&lt;p&gt;The current definition covers only a simple JWT authentication that manages users via the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/api/users/register&lt;/code&gt;: create a new user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/login&lt;/code&gt;: authenticate an existing user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/logout&lt;/code&gt;: delete the associated JWT token&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/checkSession&lt;/code&gt;: check an existing JWT Token for validity&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/edit&lt;/code&gt; - edit the information associated with a registered user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All provided methods use a simple I/O interface and intuitive, beginner-friendly structures.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;API Register&lt;/strong&gt; I/O Sample&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;POST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;api/users/register&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;application/json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"pass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"test@appseed.us"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;API Login&lt;/strong&gt; I/O Sample&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;POST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/api/users/login&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;Content-Type:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;application/json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"pass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"test@appseed.us"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information related to this concept, feel free to access the official documentation: &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/api-unified-definition"&gt;API Unified Definition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, back to our API servers, the next sections will present each server starting with the open-source ones.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#api-server-django"&gt;
  &lt;/a&gt;
  API Server Django
&lt;/h2&gt;

&lt;p&gt;Simple starter built with Python / Django Rest / Sqlite3 and JWT Auth. The authentication flow is based on json web tokens. The product comes with a simple, intuitive codebase, DRF integration, SQLite for persistence JWT Authentication API, Docker, and unitary tests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/django"&gt;API Server Django&lt;/a&gt; - official documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/api-server-django"&gt;API Server Django&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ub5hStFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opkmnxacxyl0gk7o2ded.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ub5hStFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opkmnxacxyl0gk7o2ded.jpg" alt="API Server Django - Free REST server provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#api-server-flask"&gt;
  &lt;/a&gt;
  API Server Flask
&lt;/h2&gt;

&lt;p&gt;Simple Flask API Starter with JWT authentication, and SQLite persistence that provides "out-of-the-box" all the ready-to-use bare minimum essentials - Built on top of &lt;strong&gt;flask_rextx&lt;/strong&gt; and &lt;strong&gt;flask_jwt_extended&lt;/strong&gt; libraries.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/flask"&gt;API Server Flask&lt;/a&gt; - official documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/api-server-flask"&gt;API Server Flask&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru1HBUY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v81ieuxhxc62wvz6kj7z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru1HBUY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v81ieuxhxc62wvz6kj7z.jpg" alt="API Server Flask - Free REST server provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#api-server-node-js"&gt;
  &lt;/a&gt;
  API Server Node JS
&lt;/h2&gt;

&lt;p&gt;Simple API server crafted in Node JS/Express/Typescript with SQLite for persistence and TypeORM as SQL interface. Authentication Flow uses json web tokens via Passport library - passport-jwt strategy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/node-js"&gt;API Server Node JS&lt;/a&gt; - official documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/api-server-nodejs"&gt;Nodejs API Server&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmTWoeIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz2wjyaosas677e3w14e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmTWoeIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz2wjyaosas677e3w14e.png" alt="API Server Node JS - Free REST server provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#api-server-node-js-pro"&gt;
  &lt;/a&gt;
  API Server Node JS PRO
&lt;/h2&gt;

&lt;p&gt;This commercial product contains two branches: the first one uses SQLite and TypeORM as SQL interface and the second branch handles the persistence via MongoDB and Mongoose.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/api-server-nodejs-pro"&gt;Nodejs API Server PRO&lt;/a&gt; - the Github repository (used for bug tracking) &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To make this article more useful, I will mention a few &lt;strong&gt;React Products&lt;/strong&gt; already coded to handle the JWT Authentication provided by all mentioned servers. Let's go!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-dashboard-berry"&gt;
  &lt;/a&gt;
  React Dashboard Berry
&lt;/h2&gt;

&lt;p&gt;Berry is a creative React Dashboard build using the Material-UI. It is meant to be the best User Experience with highly customizable feature-riched pages. It is a complete game-changer React Dashboard Template with an easy and intuitive responsive design as on retina screens or laptops. The product comes with a simple JWT authentication flow: login/register/logout.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/react-node-js-berry-dashboard"&gt;React Node JS Berry&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-node-js-berry-dashboard.appseed-srv1.com/"&gt;React Node JS Berry&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3CogGWgB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnqjmezi2zllugjm2nq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3CogGWgB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnqjmezi2zllugjm2nq7.png" alt="React Dashboard Berry - Open-source Fullstack dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-dashboard-datta-able"&gt;
  &lt;/a&gt;
  React Dashboard Datta Able
&lt;/h2&gt;

&lt;p&gt;Datta Able is an open-source React Dashboard that provides a colorful and modern design. Datta Able React Free is the most stylized React Free Admin Template, around all other admin templates in the market. It comes with high feature-rich pages and components with fully developer-centric code. The product comes with a simple JWT authentication flow: login/register/logout.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/react-node-js-datta-able"&gt;React Node JS Datta Able&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-node-js-datta-able.appseed-srv1.com/"&gt;React Node JS Datta Able&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3rvhnXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47lnudhqq5ugq9fqaozl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3rvhnXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47lnudhqq5ugq9fqaozl.png" alt="React Dashboard Datta Able - Open-source Fullstack dashboard."&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-datta-able-pro"&gt;
  &lt;/a&gt;
  React Datta Able PRO
&lt;/h2&gt;

&lt;p&gt;Datta Able PRO is a premium React Dashboard that provides a colorful and modern design. Datta Able React PRO is the most stylized React Free Admin Template, around all other admin templates in the market. It comes with high feature-rich pages and components with fully developer-centric code. The product comes with a simple JWT authentication flow: login/register/logout.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/react-node-js-datta-able-pro"&gt;React Nodejs Datta Able PRO&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-node-js-datta-able-pro.appseed-srv1.com/"&gt;React Nodejs Datta Able PRO&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2AWDAgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klap8m805j76z6v8lk82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2AWDAgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klap8m805j76z6v8lk82.png" alt="React Datta Able PRO - Fullstack dashboard (commercial product)."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources or support please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; - for LIVE support via Discord (registered users)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Dashboards&lt;/a&gt; - a curated list with free starters&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published on Dev.to &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>fullstack</category>
      <category>api</category>
      <category>rest</category>
    </item>
    <item>
      <title>Why should we use Lombok's @Builder annotation ?</title>
      <author>Umair</author>
      <pubDate>Mon, 26 Jul 2021 19:35:42 +0000</pubDate>
      <link>https://dev.to/umr55766/why-should-we-use-lombok-s-builder-annotation-249n</link>
      <guid>https://dev.to/umr55766/why-should-we-use-lombok-s-builder-annotation-249n</guid>
      <description>&lt;p&gt;Have you also ever looked at the long list of getters and setters methods in an Object class, like this User class (for example)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l44MdVLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43tnb0iip3wxejle1k0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l44MdVLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43tnb0iip3wxejle1k0p.png" alt="User class with lots of getters and setters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and got a gut feeling that all these boilerplates are useless. There must be a better way to achieve similar functionality ?&lt;/p&gt;

&lt;p&gt;Well, we were correct!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-to-expect-out-of-this-article-"&gt;
  &lt;/a&gt;
  What to expect out of this article ?
&lt;/h4&gt;

&lt;p&gt;In this blog, We’ll be discussing what Lombok's @Builder annotation is and why we need it in the first place? Bit about how we can use it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-am-i-writing-this-"&gt;
  &lt;/a&gt;
  Why am I writing this ?
&lt;/h4&gt;

&lt;p&gt;This is to set the context for next article. In which I'll be sharing with you a recent learning which we had in our project, of course, related to this Lombok's @Builder.&lt;/p&gt;

&lt;p&gt;Before diving into this annotation, let’s review what Lombok is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h2&gt;

&lt;p&gt;Recently, I have started working in Java and that’s how I came to know about Legendary Lombok. For those people who haven’t encountered it yet (like me, until recently) - &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.projectlombok.org/"&gt;Lombok&lt;/a&gt; is a Java library. Easily integratable with our IDE, build tools. It provides getter, setter, constructors, few other default functions like equals, etc. We just have to use it’s annotations. It works out of the box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;@Builder annotation enforces &lt;a href="https://refactoring.guru/design-patterns/builder"&gt;Builder Design Pattern&lt;/a&gt;. It provides APIs to build objects of the annotated class. It also provides an option to convert existing objects into it’s builder, so that we can modify and rebuild it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;If we have to build object of the User class shown above, (without using Builder) we’ll be doing something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W8tGT-Y3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gtaqu7h0pwxuhqcqult.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8tGT-Y3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gtaqu7h0pwxuhqcqult.png" alt="Creating a User class object using setters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is still okaish, we’re just setting each of the properties of the user class object. What's more annoying is that there is a long list of getter and setter methods in the User class. Which are nothing but boilerplates. So kinda frustrating.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h2&gt;

&lt;p&gt;This is where @Builder annotation of the Lombok comes into picture. If we just annotate our User class with @Builder then all the getter setter boilerplates from our User class will be striped out. The Object creation would get simplified something like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YsMAC1MB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdruujn3tc1t1vjro7dj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YsMAC1MB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdruujn3tc1t1vjro7dj.png" alt="Creating a User class object using Builder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You see, how intuitive it becomes ? It’s just like assigning properties value and building it.&lt;/p&gt;

&lt;p&gt;So this is how we create User objects from a builder or raw values. But, what if we want to convert an existing object to it’s builder equivalent.&lt;/p&gt;

&lt;p&gt;For that purpose, @Builder provides a configuration parameter toBuilder. This is how we configure and use it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xdzJTgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mac66yordqj2i4no9bxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xdzJTgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mac66yordqj2i4no9bxb.png" alt="Converting User object to it's Builder using toBuilder()"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's a quick intro about Lombok, @Builder and it's toBuilder.&lt;/p&gt;

&lt;p&gt;Watch out for next article regarding our recent learning experience.&lt;/p&gt;

&lt;p&gt;Just to ignite the curiosity in you, so we we're modifying an object exactly similar to one shown in above example. As a result, instead of updating same object it was behaving bit weirdly. That's how we uncovered an interesting part of this. Which we'll be covering in next article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://forms.gle/aRQB23pJN4kJtvoN9"&gt;Looking forward to your feedback&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>codequality</category>
    </item>
    <item>
      <title>ReactJS, Nodejs,python Project For Beginners</title>
      <author>Bikaah324</author>
      <pubDate>Mon, 26 Jul 2021 19:29:50 +0000</pubDate>
      <link>https://dev.to/coderzways/reactjs-nodejs-python-project-for-beginners-23bi</link>
      <guid>https://dev.to/coderzways/reactjs-nodejs-python-project-for-beginners-23bi</guid>
      <description>&lt;h3&gt;1.  Nodejs Project&lt;br&gt;
&lt;/h3&gt;
&lt;br&gt;&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable web applications.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/36YTCSA"&gt;Nodejs Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;&lt;b&gt;2. ReactJS project&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Aiming to master front-end frameworks? Start learning &lt;span&gt;ReactJS &lt;/span&gt;diligently and look forward to a great career in programming. The best way to move forward is to start building ReactJS projects for beginners and get hands-on with ReactJS.&lt;/p&gt;
&lt;p&gt;By working on smaller real-life projects, you can master theoretical concepts and get ready for the professional development challenges. Once you have successfully deployed your &lt;em&gt;ReactJS&lt;/em&gt; apps you can present those achievements to your future employers and get your dream job.&lt;/p&gt;
&lt;p&gt;Building &lt;span&gt;ReactJS projects for beginners&lt;/span&gt; will not only allow you to strengthen up React skills but also will help you explore your creative sides as a developer. Also, it will make you familiar with &lt;span&gt;React developer tools&lt;/span&gt; and react ecosystem for each project as per the need for that project.&lt;/p&gt;
&lt;p&gt;React project development is a self-directed process. You’ll have to learn on a trial and error basis. Unlike the basics of React via online learning materials, there’ll not be much to guide you on building React projects.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/2TCFknJ"&gt;ReactJS project for beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;3.AngularJS Project&lt;/h3&gt;
&lt;p&gt;Presenting the best angular projects for beginners list that will prepare you well with the basics and practical needs in angular development. Mentioning your experience in Angular projects can make your resume stand apart from other candidates.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/3i3AVDr"&gt;AngularJS Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;4. C++ Project For Beginners&lt;/h3&gt;
&lt;p&gt;C++ was built as an extension to C and gave programmers a high control over memory and system resources. If you know any other programming language, C++ will be easy to learn. Even otherwise, C++ is a friendly language, and you can learn it through some hands-on projects and practice.&lt;/p&gt;
&lt;p&gt;This article lists 10 C++ projects of different levels, which will help you appreciate the language more. You can also try many other similar projects. For example, one of our projects is Bookshop inventory management. You can try a library management system as well on the same lines. Again, similar to the railway ticket reservation system, you can try out the Bus ticket reservation system.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://www.codelivly.com/top-c-project-for-beginners/"&gt;C++ Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;5. JavaScript&lt;/p&gt;
&lt;p&gt;Today, the key to learning JavaScript or any other programming language for that matter requires you to invest a lot of time and effort into developing a lot of projects.&lt;/p&gt;
&lt;p&gt;Let us assume that you have a limited amount of time and you want to create JavaScript projects that you haven’t worked on before. And working on new ideas and projects is necessary because if you keep doing stuff that you already understand, you won’t be making much progress against your long-term programming ambitions.&lt;/p&gt;
&lt;p&gt;At the very same time, you want to select tasks that are not too complicated. The key is to find a proposed project that’s just a little above your current ability level.&lt;/p&gt;
&lt;p&gt;Your goal, then, should be to start small and set reasonable milestones for your learning journey. The last thing you want is to launch an ambitious project and end up feeling discouraged when you’re stuck with it. And believe us when we say this, it happens a lot.&lt;/p&gt;
&lt;p&gt;It is a web developer’s job to stay in touch with all the latest trends, as well as all the essential frameworks and libraries. It is also possible that you just got done with your JavaScript course and want to put your learning into practice. Either, we understand your needs and thus have created a compelling list of some of the best &lt;span&gt;JavaScript projects for beginners&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/3eZUpHf"&gt;Javascript Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



</description>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>My journey making a social website</title>
      <author>Bethuel</author>
      <pubDate>Mon, 26 Jul 2021 19:23:18 +0000</pubDate>
      <link>https://dev.to/bethropolis/my-journey-making-a-social-website-4pei</link>
      <guid>https://dev.to/bethropolis/my-journey-making-a-social-website-4pei</guid>
      <description>&lt;p&gt;I am currently making a social website out of PHP and JavaScript at the frontend. This is my big project. Let me give you a reason why you should have a big project.&lt;/p&gt;

&lt;p&gt;Check the DEMO: &lt;a href="http://bethro.alwaysdata.net/"&gt;&lt;em&gt;http://bethro.alwaysdata.net/&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/bethropolis/suplike-social-website"&gt;&lt;em&gt;https://github.com/bethropolis/suplike-social-website&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-i-have-learned-so-far"&gt;
  &lt;/a&gt;
  what I have learned so far
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;making a big project is really fun and hard to leave&lt;/li&gt;
&lt;li&gt;You get to learn more at about the programming language you use&lt;/li&gt;
&lt;li&gt;you learn some concepts like object oriented programming and algorithms&lt;/li&gt;
&lt;li&gt;You learn how to work with a database&lt;/li&gt;
&lt;li&gt;CRUD operations (create, read, update and delete)&lt;/li&gt;
&lt;li&gt;You will get to work both frontend and backend (full stack)&lt;/li&gt;
&lt;li&gt;You get to solve a problem&lt;/li&gt;
&lt;li&gt;You get to help others too&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and there is far more to a big project&lt;/p&gt;

&lt;p&gt;I always wondered what were the inner workings to sites like Facebook, Instagram and Reddit. I only knew HTML, CSS and a little bit of JavaScript and the best idea of a big project I could think of was a webpage with CSS animation and when I came to think of a backend project I found it hard cause I didn't know any backend language and thought learning one would take forever since I was already struggling with JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-php"&gt;
  &lt;/a&gt;
  learning PHP
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gCo6JqGMi30"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I knew nothing about PHP, so I started watching a tutorial about making each component of the site, starting with the above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I read a lot blogs and articles about PHP&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I cloned projects like &lt;a href="https://github.com/msaad1999/KLiK-SocialMediaWebsite"&gt;Kirk social website&lt;/a&gt; on GitHub, tested it and looked trough the code to see how they did it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I downloaded the docs from &lt;a href="https://php.net"&gt;php.net&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and a Month later I was good at PHP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3nbseBS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xag4eff93pxlhlbq0tsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3nbseBS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xag4eff93pxlhlbq0tsk.png" alt="suplike"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you should not give up on something without giving a try. you can always do better than what you think you can.&lt;/p&gt;

&lt;p&gt;I never thought I would ever build a social website but the end result proved me wrong. So if you have a big project idea on your mind a you think it is too big to try it, well you are preventing your self from having the best project in your life.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Do not fear failure but rather fear not trying.”&lt;br&gt;
       ― Roy T. Bennett&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey, Do you have a big project that you are working on? Let me know in comments.&lt;/p&gt;

</description>
      <category>php</category>
      <category>project</category>
      <category>suplike</category>
      <category>social</category>
    </item>
    <item>
      <title>Python Basics, Python 101!</title>
      <author>Shazi</author>
      <pubDate>Mon, 26 Jul 2021 18:56:51 +0000</pubDate>
      <link>https://dev.to/shazi/python-basics-python-101-47kp</link>
      <guid>https://dev.to/shazi/python-basics-python-101-47kp</guid>
      <description>&lt;p&gt;Python is one of the high-level programming languages in this age. It is both an object-oriented programming language and a structural language. If you are still in a dilemma of whether or not to learn python, this article can help you reach a better conclusion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-definition"&gt;
  &lt;/a&gt;
  Python Definition
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, Python is a high-level general-purpose programming language developed by Guido Van Rossum in the late 1980s. It was later first released in 1991. Since then, python has undergone many developments making it easier for other developers and tech industries to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-python"&gt;
  &lt;/a&gt;
  Why choose python?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-easy-installation-process"&gt;
  &lt;/a&gt;
  1.   Easy installation process
&lt;/h3&gt;

&lt;p&gt;Python installation is done in just a few minutes. All you have to do is:&lt;br&gt;
• Browse the python version you want to install.&lt;br&gt;
• Download the chosen python installer.&lt;br&gt;
• Run the downloaded executable file.&lt;br&gt;
• Install the preferred python version while agreeing to the said terms.&lt;br&gt;
• Start your program. The basic python code for a beginner is:&lt;br&gt;
'''python&lt;br&gt;
        print (“Hello world”)&lt;br&gt;
'''&lt;br&gt;
This simple code lets you know that everything is properly installed and hence you can start writing your programs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-easy-to-learn"&gt;
  &lt;/a&gt;
  2.   Easy to learn
&lt;/h3&gt;

&lt;p&gt;One major python benefit is that its code is closely similar to the English language. For example, it’s easier to understand what the code written above is used for, that is to return the phrase ‘Hello world’.&lt;/p&gt;

&lt;p&gt;Compared to other programming languages, python programs have fewer lines which are easier to understand. The codes are also executed once writing the code is over making work easier.&lt;/p&gt;

&lt;p&gt;Also, you don't need to learn python in a physical institution.  So many self-taught programmers used the power of the internet to gain their knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-it-is-widely-used"&gt;
  &lt;/a&gt;
  3.    It is widely used.
&lt;/h2&gt;

&lt;p&gt;Python is an all-purpose programming language which means it can be used for almost anything. Major companies like Google, Spotify, Netflix, and many more use the language in their applications. Other uses are mentioned below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-python-be-used-for"&gt;
  &lt;/a&gt;
  What can python be used for?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-building-calculators"&gt;
  &lt;/a&gt;
  1.   Building calculators
&lt;/h3&gt;

&lt;p&gt;Yes, you heard me right. Mathematical calculators that you use online have been built using some python paradigm. Of course, these calculators have been built under many complex algorithms that may be hard to understand at the beginner level.&lt;/p&gt;

&lt;p&gt;Still, it's possible to build your basic calculator even at a beginner level using the following code. Just make sure you are familiar with various data types in python.&lt;/p&gt;

&lt;p&gt;'''python&lt;br&gt;
Num1 = input (“Enter the first number”)&lt;br&gt;
Num2 = input (“Enter the second number”)&lt;br&gt;
Result = int (Num1) + int (Num2)&lt;br&gt;
Print (result)&lt;br&gt;
,,,&lt;br&gt;
You can change the operator to any mathematical operator type you want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-web-applications"&gt;
  &lt;/a&gt;
  2.   Web applications
&lt;/h3&gt;

&lt;p&gt;Although HTML and JavaScript are the prime languages for web development, python is still widely used in creating web applications. &lt;/p&gt;

&lt;p&gt;For instance, python frameworks like Django and Pyramid can be used in building server-side web applications.&lt;br&gt;
Websites like Amazon and Pinterest have applied python algorithms to their platforms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-creating-mobile-apps"&gt;
  &lt;/a&gt;
  3.   Creating mobile apps
&lt;/h3&gt;

&lt;p&gt;It's easy to create an app that functions. The reason for the ease is the use of python in the formations. Various widely known apps have been built on python foundations like Netflix, Quora, Uber, and many more.&lt;/p&gt;

&lt;p&gt;The good news is that you don’t need years of experience to build your first app. You can even do it after one month of learning python basic programs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-artificial-intelligence-and-machine-learning"&gt;
  &lt;/a&gt;
  4.   Artificial intelligence and Machine Learning
&lt;/h3&gt;

&lt;p&gt;Artificial intelligence and Machine learning have become the face of almost everything globally. Many fields including data science, robotics, businesses and many more use it in their day-to-day activities. It’s obvious that you also use these fields daily without knowing it.&lt;/p&gt;

&lt;p&gt;The most interesting part is that python is widely applied in these fields. Python plays a major role in building neural networks and making predictions. &lt;/p&gt;

&lt;p&gt;Also, several libraries present in python languages like NumPy and Pandas helps in data cleaning, data analysis, and data visualization hence an important tool in data science.&lt;/p&gt;

&lt;p&gt;For example, the DropBox Desktop Client was created fully from the python program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;Python is one of the finest programming languages to have been developed. If you are thinking of starting the coding work, python is a good option for you.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to write a good ReadMe.</title>
      <author>Mei</author>
      <pubDate>Mon, 26 Jul 2021 18:53:15 +0000</pubDate>
      <link>https://dev.to/lauratesan/how-to-write-a-good-readme-4ahg</link>
      <guid>https://dev.to/lauratesan/how-to-write-a-good-readme-4ahg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-a-readme"&gt;
  &lt;/a&gt;
  What is a ReadMe?
&lt;/h1&gt;

&lt;p&gt;“A README is like the face of your project. It is the first file a person should read whenencountering a source tree, and it should be written as a very brief and giving very basic introduction to the software” -  &lt;a href="https://meakaakka.medium.com/a-beginners-guide-to-writing-a-kickass-readme-7ac01da88ab"&gt;A Beginners Guide to writing a Kickass README&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good quality README should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;help people engage in the project as well&lt;/li&gt;
&lt;li&gt;get the attention of users better since it is a direct way to explain why this project matters, and
why people should use and contribute to the project&lt;/li&gt;
&lt;li&gt;help a new user get started, e.g. how to compile, how to install, and how to start integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-what-makes-a-good-readme"&gt;
  &lt;/a&gt;
  So, what makes a good Readme?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Project Title/Motivation&lt;/strong&gt; – usually some sort of short concise description of the project. This can
reference other documents (like requirements) if need be.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Getting Started&lt;/strong&gt; - These instructions will get you a copy of the project up and running on your local
machine for development and testing purposes.

&lt;ul&gt;
&lt;li&gt;Prerequisites (any additional libraries needed to be installed)&lt;/li&gt;
&lt;li&gt;Step by step guide to getting the project started in a dev environment&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Running Tests and/or Test Strategy&lt;/strong&gt; - Explain how to run the automated tests in the
project/system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deployment&lt;/strong&gt; – Notes on how to deploy this on a live system&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Versioning&lt;/strong&gt; – Any comments on versioning system, link to tags etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Contributing&lt;/strong&gt; – Details on code of conduct/team agreements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Authors&lt;/strong&gt; – list of all authors (sometimes indication of who started the project).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Licensing&lt;/strong&gt; – details of licencing agreement (possible link to licensing file).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Acknowledgements&lt;/strong&gt; – details of any acknowledgements, inspiration, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start with your Readme file, why not take a look at this website? 😊 &lt;a href="https://readme.so/editor"&gt;https://readme.so/editor&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Unknown Features of Python's Operator Module</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 26 Jul 2021 18:53:02 +0000</pubDate>
      <link>https://dev.to/martinheinz/the-unknown-features-of-python-s-operator-module-23p4</link>
      <guid>https://dev.to/martinheinz/the-unknown-features-of-python-s-operator-module-23p4</guid>
      <description>&lt;p&gt;At the first glance Python's &lt;code&gt;operator&lt;/code&gt; module might not seem very interesting. It includes many operator functions for arithmetic and binary operations and a couple of convenience and helper functions. They might not seem so useful, but with help of just a few of these functions you can make your code faster, more concise, more readable and more functional. So, in this article we will explore this great Python module and make the most out of the every function included in it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;The biggest part of the module consists of functions that wrap/emulate basic Python operators, such as &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; or &lt;code&gt;not&lt;/code&gt;. It might not be immediately obvious why you would need or want to use any of these when you can just use the operator itself, so let's first talk about some of the use cases for all these functions.&lt;/p&gt;

&lt;p&gt;First reason why you might want to use some of these in your code is if you need to pass operator to a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt;
&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reason why we need to do this is, is that Python's operators (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, ...) are not functions, so you cannot pass them directly to functions. Instead, you can pass in the version from &lt;code&gt;operator&lt;/code&gt; module. You could easily implement wrapper function that does this for you, but no one wants to create function for each arithmetic operator, right?  Also, as a bonus this allows for more functional style of programming.&lt;/p&gt;

&lt;p&gt;You might also think, &lt;em&gt;I don't need &lt;code&gt;operator&lt;/code&gt; module for this, I can just use &lt;code&gt;lambda&lt;/code&gt; expression!&lt;/em&gt;. Yes, but here comes the second reason why you should use this module. Functions in this module are faster than lambdas. You obviously won't notice that with single execution, but if you run it in loop enough times, then it's going to make a big difference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; timeit &lt;span class="s2"&gt;"(lambda x,y: x + y)(12, 15)"&lt;/span&gt;
10000000 loops, best of 3: 0.072 usec per loop
python &lt;span class="nt"&gt;-m&lt;/span&gt; timeit &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"from operator import add"&lt;/span&gt; &lt;span class="s2"&gt;"add(12, 15)"&lt;/span&gt;
10000000 loops, best of 3: 0.0327 usec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if you're used to writing something like &lt;code&gt;(lambda x,y: x + y)(12, 15)&lt;/code&gt;, you might want to switch to &lt;code&gt;operator.add(12, 15)&lt;/code&gt; for a little performance boost.&lt;/p&gt;

&lt;p&gt;Third and for me the most important reason to use &lt;code&gt;operator&lt;/code&gt; module is readability - this is more of a personal preference and if you use &lt;code&gt;lambda&lt;/code&gt; expressions all the time, then it might be more natural for you to use those, but in my opinion, it's in general more readable to use functions in &lt;code&gt;operator&lt;/code&gt; module rather than lambdas, for example consider the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;xor&lt;/span&gt;
&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clearly the second option is more readable.&lt;/p&gt;

&lt;p&gt;Finally, unlike lambdas, &lt;code&gt;operator&lt;/code&gt; module functions are &lt;em&gt;picklable&lt;/em&gt;, meaning that they can be saved and later restored. This might not seem very useful, but it's necessary for distributed and parallel computing, which requires the ability to pass functions between processes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-the-options"&gt;
  &lt;/a&gt;
  All The Options
&lt;/h2&gt;

&lt;p&gt;As I already mentioned this module has a function for every Python arithmetic, bitwise and truth operator as well as some extras. For the full list of mapping between functions and the actual operators, see &lt;a href="https://docs.python.org/3/library/operator.html#mapping-operators-to-functions"&gt;table in docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Along with all the expected functions, this module also features their in-place versions that implement operations such as &lt;code&gt;a += b&lt;/code&gt; or &lt;code&gt;a *= b&lt;/code&gt;. If you want to use these you can just prefix the basic versions with &lt;code&gt;i&lt;/code&gt;, for example &lt;code&gt;iadd&lt;/code&gt; or &lt;code&gt;imul&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, in &lt;code&gt;operator&lt;/code&gt; you will also find the &lt;em&gt;dunder&lt;/em&gt; versions of all these functions, so for example &lt;code&gt;__add__&lt;/code&gt; or &lt;code&gt;__mod__&lt;/code&gt;. These are present there for legacy reasons, and the versions without underscores should be preferred.&lt;/p&gt;

&lt;p&gt;Apart from all the actual operators, this module has some more features that can come in handy. One of them is little know &lt;code&gt;length_hint&lt;/code&gt; function, which can be used to get &lt;em&gt;vague&lt;/em&gt; idea of length of an iterator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;length_hint&lt;/span&gt;
&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;length_hint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 6
&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__length_hint__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want to highlight the &lt;em&gt;vague&lt;/em&gt; keyword here - don't rely on this value because it really is a &lt;em&gt;hint&lt;/em&gt; and makes no guarantees of accuracy.&lt;/p&gt;

&lt;p&gt;Another convenience function that we can grab from this module is &lt;code&gt;countOf(a, b)&lt;/code&gt; which returns number occurrences of &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;countOf&lt;/span&gt;
&lt;span class="n"&gt;countOf&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And last of these simple helpers is &lt;code&gt;indexOf(a, b)&lt;/code&gt;, which returns index of first occurrence of &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;indexOf&lt;/span&gt;
&lt;span class="n"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#key-functions"&gt;
  &lt;/a&gt;
  Key Functions
&lt;/h2&gt;

&lt;p&gt;Apart from operator functions and couple of the above mentioned utility functions, &lt;code&gt;operator&lt;/code&gt; module also includes functions for working with higher-order functions. These are &lt;code&gt;attrgetter&lt;/code&gt; and &lt;code&gt;itemgetter&lt;/code&gt; which are most often used as key-function usually in conjunction with function such as &lt;code&gt;sorted&lt;/code&gt; or &lt;code&gt;itertools.groupby&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see how they work and how you can use them in your code, let's look at a couple of examples.&lt;/p&gt;

&lt;p&gt;Let's say we have a list of dictionaries, and we want to sort them by a common key. Here's how we can do it with &lt;code&gt;itemgetter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Andy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Joseph"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Jones"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Oliver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="n"&gt;sorted_by_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [{"name": "John", "surname": "Doe", "id": 2},
#  {"name": "Joseph", "surname": "Jones", "id": 3},
#  {"name": "Andy", "surname": "Smith", "id": 1},
#  {"name": "Oliver", "surname": "Smith", "id": 4}]
&lt;/span&gt;
&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# {"name": "Andy", "surname": "Smith", "id": 1}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this snippet we use &lt;code&gt;sorted&lt;/code&gt; function that accepts iterable and key function. This key function has to be a callable that takes single item from the iterable (&lt;code&gt;rows&lt;/code&gt;) and extracts the value used for sorting. In this case we pass in &lt;code&gt;itemgetter&lt;/code&gt; which creates the callable for us. We also give it dictionary keys from &lt;code&gt;rows&lt;/code&gt; which are then fed to object's &lt;code&gt;__getitem__&lt;/code&gt; and the results of the lookup are then used for sorting. As you probably noticed, we used both &lt;code&gt;surname&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;, this way we can simultaneously sort on multiple fields.&lt;/p&gt;

&lt;p&gt;The last lines of the snippet also show another usage for &lt;code&gt;itemgetter&lt;/code&gt;, which is lookup of row with minimum value for ID field.&lt;/p&gt;

&lt;p&gt;Next up is the &lt;code&gt;attrgetter&lt;/code&gt; function, which can be used for sorting in similar way as &lt;code&gt;itemgetter&lt;/code&gt; above. More specifically, we can use it to sort objects that don't have native comparison support:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order_id&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Order(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;

&lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;attrgetter&lt;/span&gt;
&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"order_id"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [Order(6), Order(11), Order(15), Order(23)]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use &lt;code&gt;self.order_id&lt;/code&gt; attribute to sort orders by their IDs.&lt;/p&gt;

&lt;p&gt;Both of the above shown functions are very useful when combined with some functions from &lt;code&gt;itertools&lt;/code&gt; module, so let's see how we can use &lt;code&gt;itemgetter&lt;/code&gt; to group elements by its field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"07/10/2021"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"07/10/2021"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10002&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"07/12/2021"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10003&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"07/15/2021"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10004&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"07/15/2021"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10005&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;

&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"On &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# On 07/10/2021:
# {"date": "07/10/2021", "id": 10001}
# {"date": "07/10/2021", "id": 10002}
# On 07/12/2021:
# {"date": "07/12/2021", "id": 10003}
# On 07/15/2021:
# {"date": "07/15/2021", "id": 10004}
# {"date": "07/15/2021", "id": 10005}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have a list of rows (&lt;code&gt;orders&lt;/code&gt;) which we want to group by &lt;code&gt;date&lt;/code&gt; field. To do that, we first sort the array and then call &lt;code&gt;groupby&lt;/code&gt; to create groups of items with same &lt;code&gt;date&lt;/code&gt; value. If you're wondering why we needed to sort the array first, it's because &lt;code&gt;groupby&lt;/code&gt; function work by looking for &lt;em&gt;consecutive&lt;/em&gt; records with same value, therefore all the records with same date need to be grouped together beforehand.&lt;/p&gt;

&lt;p&gt;In the previous examples we worked with arrays of dictionaries, but these functions can be also applied to other iterables. We can for example use &lt;code&gt;itemgetter&lt;/code&gt; to sort dictionary by values, find index of minimum/maximum value in array or sort list of tuples based on some of their fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Sort dict by value
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Headphones"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;55.90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"USB drive"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;12.20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Ethernet Cable"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;8.12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Smartwatch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;125.80&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sort_by_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [('Ethernet Cable', 8.12), ('USB drive', 12.2), ('Headphones', 55.9), ('Smartwatch', 125.8)]
&lt;/span&gt;
&lt;span class="c1"&gt;# Find index of maximum value in array
&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;55.90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;12.20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;99.80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;18.30&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# 3, 99.8
&lt;/span&gt;
&lt;span class="c1"&gt;# Sort list of tuples based on their indices
&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Doe"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Andy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Jones"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Joseph"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Oliver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [("John", "Doe"), ("Andy", "Jones"), ("Joseph", "Smith"), ("Oliver", "Smith")]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#methodcaller"&gt;
  &lt;/a&gt;
  Methodcaller
&lt;/h2&gt;

&lt;p&gt;Last function from &lt;code&gt;operator&lt;/code&gt; module that needs to be mentioned is &lt;code&gt;methodcaller&lt;/code&gt;. This function can be used to call a method on object using its name supplied as string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;methodcaller&lt;/span&gt;

&lt;span class="n"&gt;methodcaller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rjust"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="s"&gt;"some text"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# "...some text"
&lt;/span&gt;
&lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"more data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"other value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"another row"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;methodcaller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rjust"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ["........data", "...more data", ".other value", ".another row"]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first example above we essentially use &lt;code&gt;methodcaller&lt;/code&gt; to call &lt;code&gt;"some text".rjust(12, ".")&lt;/code&gt; which right-justifies the string to length of 12 characters with &lt;code&gt;.&lt;/code&gt; as fill character.&lt;/p&gt;

&lt;p&gt;Using this function makes more sense for example in situations where you have a string name of the desired method and want supply the same arguments to it over and over again, as in the second example above.&lt;/p&gt;

&lt;p&gt;Another more practical example for usage of &lt;code&gt;methodcaller&lt;/code&gt; can be the following code. Here we feed lines of a text file to &lt;code&gt;map&lt;/code&gt; function and we also pass it our desired method - in this case &lt;code&gt;strip&lt;/code&gt; - which strips whitespaces from each of the lines. Additionally, we pass result of that to &lt;code&gt;filter&lt;/code&gt; which removes all the empty lines (empty lines are empty string which are &lt;em&gt;falsy&lt;/em&gt;, so they get removed by filter).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;methodcaller&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodcaller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"strip"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;())))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In this article we took a quick tour of (in my opinion) an underrated &lt;code&gt;operator&lt;/code&gt; module. This shows that even small module with just a couple of functions can be very useful in you daily Python programming tasks. There are many more useful modules in Python's standard library, so I recommend just checking &lt;a href="https://docs.python.org/3/py-modindex.html"&gt;module index&lt;/a&gt; and diving in. You can also checkout my previous articles which explore some of these modules such as &lt;a href="https://martinheinz.dev/blog/16"&gt;itertools&lt;/a&gt; or &lt;a href="https://martinheinz.dev/blog/52"&gt;functools&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Difference Between SLICE and SPLICE in JavaScript</title>
      <author>capscode</author>
      <pubDate>Mon, 26 Jul 2021 18:33:59 +0000</pubDate>
      <link>https://dev.to/capscode/difference-between-slice-and-splice-in-javascript-4ahg</link>
      <guid>https://dev.to/capscode/difference-between-slice-and-splice-in-javascript-4ahg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#difference-between-slice-amp-splice-in-javascript"&gt;
  &lt;/a&gt;
  Difference between SLICE &amp;amp; SPLICE in JavaScript
&lt;/h2&gt;

&lt;p&gt;Hello Devs,&lt;/p&gt;

&lt;p&gt;In this article, we will discuss what's the difference between the two most important methods of Array in JavaScript (i.e Slice and Splice)&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;splice()&lt;/code&gt;  method &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;returns the removed items in an array. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The  &lt;code&gt;slice()&lt;/code&gt;  method &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;returns the selected element(s) in an array, as a new array object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The  &lt;code&gt;splice()&lt;/code&gt;  method &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;changes the original array but&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;slice()&lt;/code&gt;  method &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;doesn’t change the original array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets see some of the simple examples to get the small clarification.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [2, 3, 4]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1, 5]&lt;/span&gt;

&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [2, 3]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-discuss-these-two-methods-in-more-details"&gt;
  &lt;/a&gt;
  Lets discuss these two methods in more details.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#first-we-will-discuss-the-splice-method-in-detail"&gt;
  &lt;/a&gt;
  First we will discuss the splice method in detail.
&lt;/h3&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;,...&lt;/span&gt; &lt;span class="nx"&gt;itemN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where,&lt;br&gt;
&lt;strong&gt;start (required)&lt;/strong&gt; -&amp;gt; where you want to start editing the array.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if start is not provided then empty array is returned and it will not affect the original array&lt;/li&gt;
&lt;li&gt;If start is greater than length of array then start will set to length of an array.&lt;/li&gt;
&lt;li&gt;If negative then it is treated as &lt;strong&gt;array.length-start&lt;/strong&gt; and if now the negative value will come then treat it as 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;deleteCount(optional)&lt;/strong&gt; -&amp;gt; number of element you want to delete from &lt;strong&gt;&lt;em&gt;start&lt;/em&gt;&lt;/strong&gt; index&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if it is not provided or greater than or equal to array.length then all the element from start to end of an array is deleted.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If &lt;code&gt;deleteCount&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; or negative, no elements will be deleted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;item1, item2...itemN(optional)&lt;/strong&gt; -&amp;gt;The elements to add to the array, beginning from &lt;strong&gt;&lt;em&gt;start&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you do not specify any elements, &lt;code&gt;splice()&lt;/code&gt; will only remove elements from the array.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;lets see some of examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//[]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1,2,3,4,5]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [3,4,5]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1,2]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [3,4,5], here start is treated as array.length-start&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1,2]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [1,2,3,4,5], here start is treated as array.length-start and this is ngative so start will now be treated as 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[]&lt;/span&gt;
&lt;span class="c1"&gt;//(an empty array)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [3,4,5]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1,2]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [3, 4]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1, 2, "a", "b", "c", "d", 5]&lt;/span&gt;
&lt;span class="c1"&gt;//slice has removed 2 elements starting from index '2' and added the item1, item2, ...itemN at start positon&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-lets-discuss-the-slice-method"&gt;
  &lt;/a&gt;
  Now lets discuss the slice method.
&lt;/h3&gt;

&lt;p&gt;This method just extract the a part from an array.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where,&lt;br&gt;
&lt;strong&gt;start(required)&lt;/strong&gt; -&amp;gt; starting index from where to start the extraction from an array.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the value of start is negative then it is treated as arr.length-1&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;start&lt;/code&gt; is undefined, &lt;code&gt;slice&lt;/code&gt; starts from the index &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;if start is greater than length of an array, then an empty array is returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;end (optional)&lt;/strong&gt;-&amp;gt; denotes till which index (excluding) you want to extract from the start,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;end&lt;/code&gt; is omitted, then its treated as array.length&lt;/li&gt;
&lt;li&gt;If end is negative then it is treated as array.length-end&lt;/li&gt;
&lt;li&gt;If end is non-negative &amp;amp; less than start, then empty array is returned&lt;/li&gt;
&lt;li&gt;If end is greater than length of an array, then it is treated as array.length&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets see some of the examples,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//returns [1,2,3,4,5]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [3,4,5]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1,2,3,4,5]&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns []&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1,2,3,4,5]&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//returns [3,4], here end is treated as arr.length-1 which is 4 i.e arr.slice(2,4)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1,2,3,4,5]&lt;/span&gt;

&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[3,4,5]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//[1,2,3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using slice we can also convert an array like objects to an array ?&lt;br&gt;
Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Array.prototype.slice.call(arguments)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array_like_obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;capscode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array_like_obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;//["john", "doe", "capscode"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading this far. This is a brief introduction of &lt;strong&gt;Difference between SLICE &amp;amp; SPLICE method on Array in JS&lt;/strong&gt; .&lt;br&gt;
If you find this article useful, like and share this article. Someone could find it useful too. If you find anything technically inaccurate please feel free to comment below.&lt;br&gt;
Now you can also play around the objects in JS.&lt;/p&gt;

&lt;p&gt;Hope its a nice and informative read for you.&lt;br&gt;
VISIT &lt;a href="https://www.capscode.in/#/blog"&gt;https://www.capscode.in/#/blog&lt;/a&gt; TO LEARN MORE...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-my-article-helped-you"&gt;
  &lt;/a&gt;
  IF MY ARTICLE HELPED YOU
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/capscode"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/capscode"&gt;@capscode&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to add a dark theme to a web app without begging a designer for help</title>
      <author>Sasha Verbilo</author>
      <pubDate>Mon, 26 Jul 2021 17:39:02 +0000</pubDate>
      <link>https://dev.to/akveo/how-to-add-a-dark-theme-to-a-web-app-without-begging-a-designer-for-help-25bk</link>
      <guid>https://dev.to/akveo/how-to-add-a-dark-theme-to-a-web-app-without-begging-a-designer-for-help-25bk</guid>
      <description>&lt;p&gt;Have you ever been in a situation where you needed to make a dark theme for your new app, but there was no designer to help? You are on a deadline, and, seemingly, there is no hope to finish the project in time. If you find yourself in this situation now, you are in the right place to find the way out of it.&lt;/p&gt;

&lt;p&gt;From this article, you will know how to create a dark theme for your app without a designer’s help. Without further ado, let’s dive into the process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-dark-theme"&gt;
  &lt;/a&gt;
  Add a Dark Theme
&lt;/h2&gt;

&lt;p&gt;Adding the themes is a quite easy process that is done in 3 steps:&lt;/p&gt;

&lt;p&gt;Step 1 - choose the colors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--primary-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2e3a59&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2 - add a use case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3 - add a new theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="nc"&gt;.other-theme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--primary-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#8f9bb3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you cannot use &lt;a href="https://caniuse.com/css-variables"&gt;CSS Custom Properties&lt;/a&gt;, you will have to write a few cycles on SASS. You can’t call this task a piece of cake, but we’ll manage to complete it.&lt;/p&gt;

&lt;p&gt;But there’s a catch - you can have a few themes only if a designer made it for you first. Although you don’t always have one by hand, you want to add a dark theme to a default one. Accessibility matters.&lt;/p&gt;

&lt;p&gt;Once, I participated in a project where a designer worked only at an early stage. All the designers were busy, so we couldn’t count on them after they finished their part. But at the end of the project came an idea to make it better by adding a dark theme.&lt;/p&gt;

&lt;p&gt;Creating the first version, we didn’t want to add complex logic and additional controls. Therefore, we decided not to allow a user to change the theme. We had to act in line with system settings because it was the only way to keep the first option simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-the-rules-for-the-dark-theme"&gt;
  &lt;/a&gt;
  Define the rules for the Dark Theme
&lt;/h2&gt;

&lt;p&gt;Now we need to know when to display the dark theme. There is a special CSS media inquiry for that purpose: &lt;code&gt;prefers-color-scheme&lt;/code&gt;.&lt;br&gt;
Support is practically the same as in CSS Custom Properties (&lt;a href="https://caniuse.com/prefers-color-scheme"&gt;https://caniuse.com/prefers-color-scheme&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-about-the-colors"&gt;
  &lt;/a&gt;
  What about the colors?
&lt;/h2&gt;

&lt;p&gt;Alright, we have established how to define what theme to display. But what to do if there are no colors for the dark theme? And there is the answer to that question too. We can apply color inverse filters to the whole page. Again, support will be similar to CSS Custom Properties (&lt;a href="https://caniuse.com/css-filters"&gt;https://caniuse.com/css-filters&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s add a text on the page. Looks sharp, huh? Then we add a list, a citation, and a random text item - they look just as good as the previous one. Even so, the moment we add a picture, it turns negative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76JXZlqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p26qrvrn2ubn3dxgxbq8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76JXZlqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p26qrvrn2ubn3dxgxbq8.jpg" alt="The UI before &amp;amp; after we've made an inversion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this stage, we invert the whole page. It means that &lt;strong&gt;all&lt;/strong&gt; the elements will change their color to the opposite. The inversion works well with the text, but I don’t want my photos to turn negative. To avoid that, you need to add an exception.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in this case, it would rather be a reinversion than an exception. Now, we’ve applied “reinversion” for images only. If you have a video or iFrame, or other content that is not to be reversed, you should apply the same rule to them too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nmTe6Lws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi7r70ynp5mj4231500g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nmTe6Lws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi7r70ynp5mj4231500g.png" alt="The UI after the reinversion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excellent!&lt;/p&gt;

&lt;p&gt;But you will ask me: “why do we need to apply a filter to &lt;code&gt;:root&lt;/code&gt; and reverse visual elements to their initial state?”. Why can’t we just write the following CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selector will allow us to apply the filter to all the elements except images. Although, you should consider that the filter has some peculiarities. Let’s look at them in the case of the page layout below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Text in p
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;and in span.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  With picture of me:
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./pic.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;So as &lt;code&gt;div&lt;/code&gt; matches our selector, the filter will apply to it. As a result, everything will be negative.&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;p&lt;/code&gt; is inside the &lt;code&gt;div&lt;/code&gt;, it matches the selector and will change too. Thus, we will have it reinverted so that the colors get back to normal.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;span&lt;/code&gt; also matches the selector. Whereas the &lt;code&gt;p&lt;/code&gt; has become normal, the contents of the &lt;code&gt;span&lt;/code&gt; went negative.&lt;/li&gt;
&lt;li&gt;Finally, the &lt;code&gt;img&lt;/code&gt; selector is not influenced by the filter, so no inversion happens. However, as the &lt;code&gt;img&lt;/code&gt; is a part of the element that we have inverted, the image will be negative.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That is how it will look like on your screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--il18bHik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shruh124wg42xisxp4n4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--il18bHik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shruh124wg42xisxp4n4.png" alt="Broken invert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s why we apply the filter to the &lt;code&gt;root&lt;/code&gt; element once. Then, we invert the elements that we want to stay the same, again to bring them to the initial state.&lt;/p&gt;

&lt;p&gt;Done! The first version works just fine, and the client is happy.&lt;/p&gt;

&lt;p&gt;In the second stage of the process, we add a switch for our themes.&lt;/p&gt;

&lt;p&gt;To do this, we’ll add &lt;code&gt;select&lt;/code&gt; to the header of our app, allowing users to choose the theme they prefer. The select will include 3 choices: &lt;code&gt;light&lt;/code&gt;, &lt;code&gt;dark&lt;/code&gt;, and &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, the &lt;code&gt;auto&lt;/code&gt; will be a default value that will allow the app to inherit system settings. At the same time, when choosing &lt;code&gt;light&lt;/code&gt; or &lt;code&gt;dark&lt;/code&gt;, we are adding a &lt;code&gt;theme-light&lt;/code&gt; or &lt;code&gt;theme-dark&lt;/code&gt; class correspondingly to the &lt;code&gt;root&lt;/code&gt; element of a document. Then, we delete a theme class if using &lt;code&gt;auto&lt;/code&gt;. To top it off, we save these settings in &lt;code&gt;localStorage&lt;/code&gt;, which allows us to show the previous theme.&lt;/p&gt;

&lt;p&gt;After we’ve added a few classes, we will modify CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.theme-light&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.theme-dark&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="nd"&gt;:root:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.theme-light&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.theme-dark&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="nc"&gt;.theme-dark&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="nc"&gt;.theme-dark&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;That’s it! You are ready to add the dark theme to your app without a designer’s help. But before you go and nail it, take a glance at the resume of the article to memorize the main points better.&lt;/p&gt;

&lt;p&gt;We have the following process logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the light theme is chosen - do nothing;&lt;/li&gt;
&lt;li&gt;If the dark one - always invert;&lt;/li&gt;
&lt;li&gt;If neither a dark nor light theme is chosen - invert depending on the system's settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“Generating” a dark theme by applying a filter is quite easy and quick.&lt;/p&gt;

&lt;p&gt;Although, there can be some nuances regarding the page contents that are not to be inverted. In the majority of cases, you solve that problem by simple reinversion of such objects. But it doesn’t always work, so we need to use some hacks.&lt;/p&gt;

&lt;p&gt;However, there are some drawbacks of this method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not all of the colors invert “aesthetically”, which can tarnish the UI a little bit;&lt;/li&gt;
&lt;li&gt;You cannot change the hues of light and dark to create different visual experiences of the interface;&lt;/li&gt;
&lt;li&gt;And the last but not least thing to remember is that all of the colors get inverted. Thereby, your “brand colors” will change too, which can harm your corporate identity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of all the drawbacks, it is still a credible and fast way to add a dark theme to your app. Besides, it can be helpful when you want to experiment with different themes, make PoC (Proof of concept), and see if it suits your application.&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Relicans Summer Camp Week 4: Public Speaking Week</title>
      <author>Aisha Blake</author>
      <pubDate>Mon, 26 Jul 2021 17:34:27 +0000</pubDate>
      <link>https://dev.to/newrelic/relicans-summer-camp-week-4-public-speaking-week-4mjf</link>
      <guid>https://dev.to/newrelic/relicans-summer-camp-week-4-public-speaking-week-4mjf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;🏕 &lt;strong&gt;Challenge:&lt;/strong&gt; Apply to speak at a conference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You've made it to Week 4! We're talking about public speaking but a lot of our thoughts on generating ideas and developing habits apply to all the other topics we've covered in this series, particularly the &lt;a href="https://www.therelicans.com/captainellie/the-relicans-summer-camp-week-3-writing-365g"&gt;Week 3 writing challenge&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CFP: Call for Proposals (or Papers). A request for potential speakers to express interest in participating in a specific conference by outlining the talk(s) they'd like to give at that event&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#finding-a-conference"&gt;
  &lt;/a&gt;
  Finding a conference
&lt;/h2&gt;

&lt;p&gt;The sheer number of tech conferences can get overwhelming. It takes time to develop your own criteria for choosing which ones to apply to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#determine-your-conference-values"&gt;
  &lt;/a&gt;
  Determine your conference values
&lt;/h3&gt;

&lt;p&gt;As you're looking for events to speak at, decide how you'll choose which ones to devote your time and energy towards. What's most important to you in a conference? Are there any policies or characteristics that would raise a red flag? Here are some points to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does the event have a code of conduct? Does it include contact information? Does it explain how to report an incident? Are there anonymous reporting options?&lt;/li&gt;
&lt;li&gt;Who has spoken in the past? If any speakers have already been announced, are there any known abusers in the current lineup?&lt;/li&gt;
&lt;li&gt;Are any of the organizers part of marginalized communities?&lt;/li&gt;
&lt;li&gt;If the event is in-person, how accessible is the venue? Have the organizers provided that information?&lt;/li&gt;
&lt;li&gt;How are speakers being compensated?&lt;/li&gt;
&lt;li&gt;Is the event run by a community? A company?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Exercise: Write down your personal speaker rider. For now, it can be a short, private list of preferences. Check out &lt;a href="https://gist.github.com/tatianamac/493ca668ee7f7c07a5b282f6d9132552"&gt;Tatiana Mac's speaker rider&lt;/a&gt; as a particularly thorough example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The lines you draw here may be different depending on the conference. Maybe you're willing to speak for free for small, community events. Perhaps your expectations around the ethnic diversity of organizers depend on the country in which the conference is based. That's completely up to you!&lt;/p&gt;

&lt;p&gt;Compensation might also go beyond getting paid with money. If you're unwilling or unable to take money for speaking at an event, think about what other "rewards" might be useful to you. A conference team might buy you the equipment you need to record your talk for them or list your company as a sponsor, to name a few.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-new-events"&gt;
  &lt;/a&gt;
  Finding new events
&lt;/h3&gt;

&lt;p&gt;Tools like &lt;a href="https://www.cfpland.com/"&gt;CFP Land&lt;/a&gt; will give you a starting point if you're not sure where to look. It's convenient but remember that not every conference will post a CFP to every (or any) aggregator. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zxa8IHuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/ey63px4eciy8q8dx2lvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zxa8IHuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/ey63px4eciy8q8dx2lvr.png" alt="CFP Land home page shows upcoming conference CFPs in chronological order"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An aggregator will also allow you to filter your results so that it's easier to find events better suited to your needs and interests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V0Tf7pyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/280cux4fh0v027t0pdwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V0Tf7pyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/280cux4fh0v027t0pdwj.png" alt="CFP Land has filters for category, region, and conference start date"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're using something like &lt;a href="https://www.papercall.io/events"&gt;PaperCall&lt;/a&gt;, you can also save your abstracts and resubmit the same talks to multiple conferences on the platform. That'll be useful when we discuss tracking your talks later on!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seek-recommendations"&gt;
  &lt;/a&gt;
  Seek recommendations
&lt;/h3&gt;

&lt;p&gt;If you know folks who are already speaking at conferences, ask them for recommendations! A speaker is likely to give you a more detailed (and potentially less biased) view of what's it's like to be a speaker at a given event than that event's CFP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-yourself-out-there"&gt;
  &lt;/a&gt;
  Put yourself out there
&lt;/h3&gt;

&lt;p&gt;You can also take the straightforward route and present yourself as a potential speaker in public. This is often done on Twitter or LinkedIn. You'll find it easier to focus your efforts if you have some idea of what you'd like to talk about. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57IIvxSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/cgcc26dqnzz8ug08b7ie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57IIvxSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/cgcc26dqnzz8ug08b7ie.png" alt="DrRosieW tweets: I'm looking to speak at more UX/design/product/tech events/conferences. My specialty is behaviour change in health, but I can also speak about Research Ops (esp. consent &amp;amp; data management) and research on sensitive topics. If that's of interest to your audience, please get in touch!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You also don't need to start with a conference. Reach out to meetups or do lightning talks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brainstorming-talk-ideas"&gt;
  &lt;/a&gt;
  Brainstorming talk ideas
&lt;/h2&gt;

&lt;p&gt;This may be influenced by the conferences you're interested in and vice versa! Whichever comes first, coming up with the idea for your talk or settling on a conference to apply to, a brainstorming session can help you loosen up enough to produce an interesting topic.&lt;/p&gt;

&lt;p&gt;Remember, you don't need to be an expert in the thing you're going to talk about. Most people aren't! You're sharing &lt;em&gt;your&lt;/em&gt; take on your chosen topic. That's something absolutely no one else can do as well as you can.&lt;/p&gt;

&lt;p&gt;The writing tips from last week hold true! We'll repost the list of questions to ask yourself here for anyone who hasn't worked through the previous challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What do you already know?&lt;/li&gt;
&lt;li&gt;What have you learned recently?&lt;/li&gt;
&lt;li&gt;What's something you wish you knew when you got started (with a specific project, tool, tech in general, etc.)?&lt;/li&gt;
&lt;li&gt;What do you want to learn more about? Why?&lt;/li&gt;
&lt;li&gt;What problems have you solved? How did you do it?&lt;/li&gt;
&lt;li&gt;What questions do you have?&lt;/li&gt;
&lt;li&gt;Do you have any content you can reuse, like a video or stream?

&lt;ul&gt;
&lt;li&gt;Hint, if you joined the video, open source, or writing challenges, you can reuse that!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-abstract"&gt;
  &lt;/a&gt;
  Writing the abstract
&lt;/h2&gt;

&lt;p&gt;An abstract is like your conference talk pitch. It's a brief synopsis of what you'll talk about meant to convince participants to come and watch the talk itself. Writing a tight, persuasive abstract about a relevant topic will give you the best chance of having your talk accepted.&lt;/p&gt;

&lt;p&gt;This means you don't need to write the whole talk before submitting a proposal! That's potentially a ton of wasted effort if the talk doesn't get picked up by a conference. Unless you're willing to convert your talk into a video or otherwise release the content in some form besides a conference talk, focus on the abstract first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outline-your-plan"&gt;
  &lt;/a&gt;
  Outline your plan
&lt;/h3&gt;

&lt;p&gt;You may find it helpful to start with a bulleted list of points. If you do, hang onto this list because some organizers will ask for just such an outline in their CFP! Draw some takeaways from your outline to give attendees an idea of what they'll learn from you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-it-brief"&gt;
  &lt;/a&gt;
  Keep it brief
&lt;/h3&gt;

&lt;p&gt;When we say an abstract is meant to be brief, we mean it! When your talk proposal is one of hundreds or thousands, you need to hook your reader quickly. Resist the temptation to add fluff. See if you can get your idea across within five sentences.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-it-out"&gt;
  &lt;/a&gt;
  Test it out
&lt;/h3&gt;

&lt;p&gt;Share your abstract with at least one person who is familiar with your topic and one person who isn't. It might be scary to share this unfinished work but try to choose people you can trust to give honest feedback. The abstract should, as much as possible, get them excited about your presentation. Apply any feedback you get and then repeat the process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-a-headshot"&gt;
  &lt;/a&gt;
  Get a Headshot
&lt;/h2&gt;

&lt;p&gt;Your headshot doesn't need to be fancy. It doesn't even need to be a photo of you (though some organizers prefer photos over illustrations). Any clear image of your face should do, but some organizers will request that the image be square.&lt;/p&gt;

&lt;p&gt;It's a good idea to keep this image handy, along with your bio, so you don't have to go looking for it whenever you want to apply to speak somewhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#craft-your-bio"&gt;
  &lt;/a&gt;
  Craft Your Bio
&lt;/h2&gt;

&lt;p&gt;For some folks, this is the hardest part of all: writing about yourself! If you don't already have a biography, you'll need one for practically every event you'll ever speak at. You can start small, with just the bare facts, and add flair when you're feeling more confident. Think of the following like a mini-worksheet and fill in the brackets.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[your name] is a [your title] at [your company]. [your pronoun] [has/have] a particular interest in [your professional interest(s)]. Ask them about [your go-to fun fact]!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That's enough to get you going! If you want to dig a little deeper and come up with a more original bio, you can construct one using this technique &lt;a href="https://angiejones.tech/"&gt;Angie Jones&lt;/a&gt; shared at &lt;a href="https://www.writespeakcode.com/2019/"&gt;Write/Speak/Code 2019&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exercise: Write down ten accomplishments, five technical things you could teach, and five "shiny trinkets" (special or unique things about you). Combine these to form a more personal bio.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scott Berkun also has some great tips on &lt;a href="https://scottberkun.com/2013/how-to-write-a-good-bio/"&gt;how to write a good bio&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-to-speak"&gt;
  &lt;/a&gt;
  Apply to Speak
&lt;/h2&gt;

&lt;p&gt;Read the CFP, and then read it again. You do not want to have your wonderful proposal rejected because you didn't follow the CFP directions. A common mistake that can cause your proposal to be rejected is including personally identifiable information when submitting it to an anonymized CFP.&lt;/p&gt;

&lt;p&gt;Look at the timeline and note when the CFP opens, when it closes, when you can expect a response, when you would need to turn in any deliverables, and when you would need to travel/speak.&lt;/p&gt;

&lt;p&gt;Some organizers will wait until after the closing deadline has passed before they begin reviewing and selecting talks, but not all. Some conferences will review proposals as soon as they're submitted, and immediately accept or decline. Get your proposal in early, you don't want to be rejected because they have already accepted a talk on your topic.&lt;/p&gt;

&lt;p&gt;General timeline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CFP opens 12-6 months in advance&lt;/li&gt;
&lt;li&gt;CFP is rolling or 1-2 months&lt;/li&gt;
&lt;li&gt;Accepted speakers notified 2-4 weeks after CFP close&lt;/li&gt;
&lt;li&gt;Accepted speakers may decline, so rejections are usually sent later

&lt;ul&gt;
&lt;li&gt;You should know whether or not you're speaking at least two months prior to the event but maybe as little as a few weeks!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#be-concise"&gt;
  &lt;/a&gt;
  Be concise!
&lt;/h3&gt;

&lt;p&gt;The selection committee are normally volunteers often working in their free time. They may have hundreds of proposals to read, make sure your proposal—especially your abstract—is succinct and snappy.&lt;/p&gt;

&lt;p&gt;You can add more detailed information in your proposal description but really focus on getting your abstract and title right. These are your hooks, they are what attendees will see in the schedule, but they're also the first thing a member of the selection committee will see too, and with hundreds of proposals to grade if you do not capture their attention with your title and abstract they may not even review the rest of your proposal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ask-for-feedback"&gt;
  &lt;/a&gt;
  Ask for feedback
&lt;/h3&gt;

&lt;p&gt;If there is something about the CFP process you are unsure of, do not be afraid to contact the conference and ask. Also, some conferences may run workshops or provide reviews and feedback on your proposal before you submit it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apply-multiple-times-with-limits"&gt;
  &lt;/a&gt;
  Apply multiple times (with limits)
&lt;/h3&gt;

&lt;p&gt;Applying to conferences can be a bit of a numbers game. Even with an amazing proposal, you may not be selected. This is not a reflection on you or on your proposal, it could be any number of reasons; they have already accepted a talk on your topic, they have a particular theme for the conference which your talk does not fit into, they simply do not have enough slots in the schedule to accept every talk they want to.&lt;/p&gt;

&lt;p&gt;To maximize your chances of success, you can submit multiple proposals to the same conference. But do so respectfully! Ensure that each of your proposals are relevant to the conference. Ask yourself if you were only going to submit one proposal, would you still be happy to submit that proposal? Remember the selection committee are likely volunteers and very busy, so respect their time. You want them on your side!&lt;/p&gt;

&lt;p&gt;Some conferences might have restrictions on the number of talks you can propose to a single CFP. As always, read the CFP rules carefully first.&lt;/p&gt;

&lt;p&gt;You can also submit to multiple conferences, even if the conferences are going to be at the same or similar time. Just remember, if you are selected to speak at a conference, to withdraw your proposals from any other conferences happening at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracking-your-talks"&gt;
  &lt;/a&gt;
  Tracking your talks
&lt;/h2&gt;

&lt;p&gt;Keep track of your talk ideas, abstracts, slides, and notes! You might not get each and every one accepted, but being able to reference everything you've come up with at a glance can help you build stronger talks in the future.&lt;/p&gt;

&lt;p&gt;Try collecting everything you've created in a single "Speaking" folder somewhere it'll be easy for you to locate later. You can keep adding to that folder for as long as it works for you. Some people will also use a tool like Notion or Trello to keep track of &lt;em&gt;current&lt;/em&gt; proposals.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#share-completed-talks"&gt;
  &lt;/a&gt;
  Share completed talks
&lt;/h3&gt;

&lt;p&gt;You can display things like slides and recordings on your website, on GitHub, or on platforms built for the purpose like &lt;a href="https://noti.st/"&gt;Notist&lt;/a&gt;. These serve as a kind of portfolio. In the future, organizers will be able to see a list of the fabulous talks you've already given whenever they're looking for a new speaker to invite to their event! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aVyBXcdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/8dmdwteoaoesihhpppem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aVyBXcdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/8dmdwteoaoesihhpppem.png" alt="Aaron Bassett's presentations on Notist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You have something to say that's worth sharing with an audience! Take your time, ask for help when you need it, and start applying. It'll get easier and faster over time. &lt;/p&gt;

&lt;p&gt;Consider getting started by applying to &lt;a href="https://community.codenewbie.org/codenewbie/a-new-codeland-opportunity-for-creative-codenewbies-5e82"&gt;CodeLand Recess&lt;/a&gt;! This is a great way to focus all the lessons you've learned over the course of the Relicans Summer Camp into a bite-sized video that will be shared with the CodeNewbie community.&lt;/p&gt;

&lt;p&gt;Also, share your work on &lt;a href="https://www.therelicans.com"&gt;therelicans.com&lt;/a&gt; by the end of July. We want to see what you create! Be sure to include the #RelicansSummerCamp tag on your post so we can find it easily and award you your camp badge!&lt;/p&gt;

</description>
      <category>relicanssummercamp</category>
      <category>beginners</category>
      <category>community</category>
      <category>learning</category>
    </item>
    <item>
      <title>Essential React Concept - Part 1</title>
      <author>Gobinath Varatharajan</author>
      <pubDate>Mon, 26 Jul 2021 17:33:31 +0000</pubDate>
      <link>https://dev.to/gobinath/learn-react-the-fast-way-328l</link>
      <guid>https://dev.to/gobinath/learn-react-the-fast-way-328l</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=7Okuzbj0F4Y&amp;amp;list=LL&amp;amp;index=18&amp;amp;ab_channel=HungryTurtleCode"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhtivAh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2zup8ru9l6zk15u0sn4.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#this-video-by-far-the-best-piece-of-advice-to-learn-react"&gt;
  &lt;/a&gt;
  This video by far the best piece of advice to learn react.💯
&lt;/h4&gt;




&lt;p&gt;&lt;strong&gt;Baisc React JSX&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// greeting is what it will render&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// root from html is where to render&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ReactDOM.render(what, where);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Nesting Expression&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{ } - it help us to interpreted the javascript expression in JSX
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Covid-19 hit on the year &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Styling JSX with Inline-CSS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it help us to interpreted the javascript expression in JSX as an object.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; 
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Using Multi-Component with JSX&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function vs Class
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 1. Using Function Component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to React Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Using Class Component&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to React Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Footer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Argument Vs Parameter&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parameters are declare within the function&lt;/li&gt;
&lt;li&gt;Arguments are the value pass to the function
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Parameter&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;argumentVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;par1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pa2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;par1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;par2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;par3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;par4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;par5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Function call&lt;/span&gt;
&lt;span class="nx"&gt;argumentVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 11&lt;/span&gt;

&lt;span class="c1"&gt;// Arguments&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;argumentVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameter3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Function call&lt;/span&gt;
&lt;span class="nx"&gt;argumentVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Single Props&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help to pass value to the component&lt;/li&gt;
&lt;li&gt;props are object.&lt;/li&gt;
&lt;li&gt;They are &lt;strong&gt;read-only&lt;/strong&gt;(immutable) and they cannot directly change
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tony Robbie"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;rootNode&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Hello Tony Robbie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Parent and child relationship with Props&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you should implement {&lt;strong&gt;props.children}&lt;/strong&gt; when you're passing children in the parent component.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// This is child&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This is the parent&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; 
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;golden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tony Robbie"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help toaccess array of element
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bruce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;robert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;will&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//you can also do this with component&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bruce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;robert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;will&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Character&lt;/span&gt; &lt;span class="na"&gt;character&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; 
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//render&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;key&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unique identifier to do some change only the needed once.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bruce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;robert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;will&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// here I have use indexes &lt;/span&gt;
&lt;span class="c1"&gt;// you can also use some package for it.&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Character&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;character&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; 
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Event Handler&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;onClick eventhandler
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// you have access to function data with event&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleCharacterClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleCharacterClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;onChange eventhandler
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleInputChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleInputChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#in-part-2-i-wil-post-all-about-hooks-all-the-post-written-in-my-blog-are-from-my-knowledge-feel-free-to-oppose-it"&gt;
  &lt;/a&gt;
  In Part 2 - I wil post all about Hooks all the post written in my blog are from my knowledge feel free to oppose it🤩. 
&lt;/h2&gt;
&lt;/blockquote&gt;

</description>
      <category>react</category>
      <category>motivation</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Não tenha medo de mudar de rota</title>
      <author>Robson Junior</author>
      <pubDate>Mon, 26 Jul 2021 17:31:49 +0000</pubDate>
      <link>https://dev.to/opendevufcg/nao-tenha-medo-de-mudar-de-rota-270e</link>
      <guid>https://dev.to/opendevufcg/nao-tenha-medo-de-mudar-de-rota-270e</guid>
      <description>&lt;p&gt;Escolhas... Não importa o quanto nós treinemos durante toda a vida a ter que fazê-las, tomar decisões não parece se tornar uma tarefa mais simples com o tempo. Vamos usar a sua potencial área de atuação como exemplo. Mesmo já sabendo que você gostaria de tentar Ciência da Computação (e mesmo se não for o caso, não desista desta postagem!), esse termo abarca uma infinidade de possibilidades. Como ter certeza de que o que você escolher vai possibilitar sua satisfação por tempo suficiente até você descobrir a próxima grande coisa?&lt;/p&gt;

&lt;p&gt;Resposta rápida, ou melhor, a única resposta: é impossível garantir isso.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/PGTAGyDoswIfgRoCFF/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/PGTAGyDoswIfgRoCFF/giphy.gif" alt="Ocupando muito espaço do cérebro..."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não se preocupe: não vou te atacar com mais perguntas difíceis, nem usar termos de coach para mudar o seu &lt;em&gt;#mindset&lt;/em&gt;. Também não tenho nenhuma solução para oferecer, infelizmente. No lugar disso tudo, quero compartilhar uma história sobre o lado bom de criar coragem para tomar decisões difíceis, mesmo quando as suas escolhas anteriores não anteviam esse futuro.&lt;/p&gt;

&lt;p&gt;Cursos de graduação geralmente culminam em um Trabalho de Conclusão de Curso, certo? Aquela última disciplina que quase ninguém quer, mas vai ter que cursar, sendo geralmente o último obstáculo entre você e o tão sonhado diploma. Nesse caso em específico, o TCC se deu em duas etapas: um Projeto de TCC, consistindo basicamente no esboço e planejamento do trabalho, e o TCC propriamente dito, cada um em um semestre.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohs4jnnmnxfkYiGic/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohs4jnnmnxfkYiGic/giphy.gif" alt="Muito trabalho..."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O primeiro passo foi, naturalmente, escolher qual professor(a) eu abordaria quanto à orientação, o que felizmente não foi uma decisão muito difícil. Embora eu tenha estudado com vários professores e professoras sensacionais, levei em consideração principalmente com quem eu ainda não tinha (até o momento) tido a chance de trabalhar, quem poderia me ajudar a encontrar mais possibilidades para o TCC e, principalmente, com quem eu realmente me sentia confortável.&lt;/p&gt;

&lt;p&gt;Em seguida, surgiu uma dúvida bem mais complicada: qual tema escolher? Eu sabia que queria fazer sobre um tema que realmente me despertasse interesse, mas, mesmo com as opções sendo teoricamente infinitas, nem todas se sustentam como uma temática de TCC. Depois de contatar a minha orientadora para definirmos isso, eu pensava que não fazia ideia do que queria trabalhar. Depois dela dar umas dez (sério mesmo) sugestões de temas super interessantes, eu... Propus o meu próprio. Pensei rapidamente que o que me traria satisfação seria construir algo com algum impacto social, e então dei uma ideia de um sistema que atuaria nesse sentido.&lt;/p&gt;

&lt;p&gt;Vieram mais dúvidas: como se daria esse trabalho? Focaríamos o TCC no desenvolvimento desse sistema, ou utilizaríamos os aprendizados obtidos ao longo do curso para viabilizar uma pesquisa? Como encaixar isso no contexto de Computação? Como encontrar os contatos das pessoas que poderiam nos ajudar a ceder as informações necessárias?&lt;/p&gt;

&lt;p&gt;Depois de uma série de ameaças à validade do tema e inseguranças quanto ao que poderíamos fazer, conseguimos chegar em uma proposta sólida ao fim de Projeto de TCC. Caramba, já tínhamos bastante coisa: uma introdução que poderia muito bem ser aproveitada, um cronograma otimista, referências a artigos multidisciplinares que poderiam nos guiar…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/LMtqBDUJAzyYjUTaRP/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/LMtqBDUJAzyYjUTaRP/giphy.gif" alt="Planejamento do TCC."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mesmo assim, quando começamos TCC, comecei a enxergar mais furos naquilo tudo. Como íamos conseguir contatar todas aquelas pessoas? Como íamos abraçar o mundo com aquele projeto, estando no meio de uma pandemia que cada vez mais minava a minha vontade de interagir com outros virtualmente? Ainda assim, planejamos uma redução de escopo, fizemos mais pesquisas e estava tudo bem, talvez.&lt;/p&gt;

&lt;p&gt;Mas não estava. Eu já sabia que, apesar de já ter sido apaixonado por aquele tema, nenhum caminho que eu via naquele momento me levaria a um resultado satisfatório. E isso, a cada reunião, estava me deixando cada vez mais ansioso e incerto. Aquela sensação de saber o que precisa ser feito agora, mas perder todo o ânimo de continuar só por imaginar que no fim das contas não vai haver tempo o suficiente para fazer o melhor possível.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cOE5zjbtd6a9cDwQol/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cOE5zjbtd6a9cDwQol/giphy.gif" alt="Trabalhando no TCC."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Junto a isso, havia uma impotência ainda maior na insatisfação com aquele tema. Afinal, que direito eu tinha de não querer trabalhá-lo? Eu me agarrei com unhas e dentes a uma ideia que eu mesmo havia sugerido, fiz com que a lapidássemos de diversas formas e tinha uma proposta que, de diversos ângulos, parecia factível. Desistir de algo que você insistiu não é nada fácil. Mas eu não estava nada feliz.&lt;/p&gt;

&lt;p&gt;Foi nesse momento que uma ideia antiga, que eu não havia sugerido anteriormente por não ter domínio do tema, voltou à minha mente. Ao comentá-lo com alguns amigos que estavam acompanhando o andamento do meu trabalho, eles perceberam que essa nova proposta realmente me deixava empolgado e me incentivaram a sugeri-la. Com um novo ânimo, criei coragem e conversei com a minha orientadora: "não quero decepcioná-la, mas podemos mudar de tema?"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ybEXZcycd789q/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ybEXZcycd789q/giphy.gif" alt="Implorando..."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E mais uma vez, provavelmente por eu ter muito privilégio de estar rodeado de gente incrivelmente acolhedora, eu não fui contrariado. Estávamos lá, com menos de três meses para desenvolver todo o TCC, com uma nova proposta em uma área totalmente diferente, com um propósito totalmente diferente. A diferença era: agora eu sentia que era o tema certo.&lt;/p&gt;

&lt;p&gt;Escrevi uma nova proposta, comecei a fazer os experimentos, digitei incansavelmente aquele trabalho e, o melhor de tudo, eu me vi apaixonado mais uma vez por um projeto. Depois de muitas linhas de código, muitas horas ouvindo "Te Amo Lá Fora" da DUDA BEAT, muitas revisões e muito apoio, consegui terminar o trabalho de que mais me orgulho até hoje. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B6vfi_i2RnA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;em&gt;Eu‌ ‌esqueci‌ ‌dessa‌ ‌lição‌ ‌de‌ ‌me‌ ‌tratar‌ ‌com‌ ‌mais‌ ‌amor‌ ‌&lt;br&gt;
Restou‌ ‌um‌ ‌pouco‌ ‌de‌ ‌esperança,‌ ‌dеcidi‌ ‌que‌ ‌é‌ ‌pra‌ ‌lá‌ ‌que‌ ‌eu‌ ‌vou&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Espero que essa história ~de superação~ seja um incentivo para você acreditar que não deve ter medo de mudar de rota. É claro: seja racional, considere bem todas as suas opções. Se, no fim das contas, você sente que há algo que poderia te levar por um caminho em que você se sinta uma pessoa mais realizada, não tema.&lt;/p&gt;

&lt;p&gt;Como diria Lady Gaga em sua fala icônica, pode haver 100 pessoas em uma sala e 99 não acreditam em você, mas basta que uma acredite. E essa primeira pessoa, por mais clichê que seja dizer isso, &lt;strong&gt;precisa&lt;/strong&gt; ser você. Espero que, como eu tive e tenho, você tenha a chance de estar rodeado por uma comunidade de pessoas que te levam para frente, mas acreditar em si é o primeiro e mais importante passo!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sm4OTqy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.ladygagamedia.net/wp-content/uploads/2018/12/5c085783ab823-anigifsubbuzz1933015405722361.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sm4OTqy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.ladygagamedia.net/wp-content/uploads/2018/12/5c085783ab823-anigifsubbuzz1933015405722361.gif" alt="Pode haver 100 pessoas em uma sala e 99 não acreditam, mas você só precisa de 1 para acreditar."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obrigado pela leitura! Meu nome é Robson e normalmente você pode me encontrar no &lt;a href="https://twitter.com/JRosboJr"&gt;Twitter&lt;/a&gt;, no &lt;a href="https://instagram.com/jrobsonjr"&gt;Instagram&lt;/a&gt; ou no &lt;a href="https://www.linkedin.com/in/jrobsonjr/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>motivation</category>
    </item>
  </channel>
</rss>
