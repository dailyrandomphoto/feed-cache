<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Becoming a Self Mentor</title>
      <author>Clever coder</author>
      <pubDate>Tue, 16 Nov 2021 04:37:28 +0000</pubDate>
      <link>https://dev.to/yusuf_software/becoming-a-self-mentor-1pk0</link>
      <guid>https://dev.to/yusuf_software/becoming-a-self-mentor-1pk0</guid>
      <description>&lt;p&gt;Over the years, I‚Äôve often found myself wishing for a mentor much more often than I‚Äôve actually had one. When I first got started in Tech, I again felt like I needed a mentor, but being remote and mostly autonomous, I had no idea where to find one. Instead of throwing my hands up and hoping for the best, I decided to break down why I was feeling that way and think of creative ways to get similar results.&lt;/p&gt;

&lt;p&gt;Let me share with you what I‚Äôve learned.&lt;/p&gt;

&lt;p&gt;Why We Want a Mentor&lt;br&gt;
Why is it that we want a mentor? What‚Äôs the outcome we‚Äôre looking for? For me, it‚Äôs usually some combination of the following:&lt;/p&gt;

&lt;p&gt;I feel directionless.&lt;br&gt;
I don‚Äôt know if I‚Äôm learning the right thing.&lt;br&gt;
I don‚Äôt know whether the code I‚Äôm writing or the work I‚Äôm doing is good.&lt;br&gt;
I can‚Äôt seem to finish anything.&lt;br&gt;
I‚Äôm just down in the dumps.&lt;br&gt;
On top of that, I‚Äôm also feeling so overwhelmed that I don‚Äôt want to dig in and do the work required to research these answers myself. In short, I‚Äôm looking for a silver bullet in human form.&lt;/p&gt;

&lt;p&gt;Is that you, too? Often we‚Äôre looking for some mythical senior developer or lead architect somewhere to tell us the one thing we need to learn or build that‚Äôs going to rocket us to a FAANG job (Facebook, Amazon, Apple, Netflix, Google), a more senior position, or Twitch stardom. Those things don‚Äôt happen in one fell swoop, though. They happen over years of focused effort.&lt;/p&gt;

&lt;p&gt;So, on a deeper level, what are we looking for when we want a mentor? We generally want:&lt;/p&gt;

&lt;p&gt;Direction: We want someone to break down for us what to learn and what not to worry about yet.&lt;br&gt;
Quality Control: We want someone to check our code or content quality to make sure it‚Äôs right. As we get a little more advanced, we also want someone to let us know if what we‚Äôre doing is a ‚Äúbest practice.‚Äù&lt;br&gt;
Accountability: We want someone to check in on us and keep us from falling off the wagon of working towards our goals.&lt;br&gt;
Encouragement: We all want a cheerleader for when we‚Äôre running low on motivation. Nothing wrong with that.&lt;/p&gt;

&lt;p&gt;Is there a way we can achieve those same results without having one single mentor carrying the burden?&lt;/p&gt;

&lt;p&gt;How to Self-Mentor&lt;br&gt;
To self-mentor, we basically need find suitable replacements in all four areas. Here are some things that have been helping me in each of those areas.&lt;/p&gt;

&lt;p&gt;Direction&lt;br&gt;
Figuring out the direction you want to go, and whether it‚Äôs the right one, is a little bit of art and a little bit of science. There are a few different sources for this you can use:&lt;/p&gt;

&lt;p&gt;If you have a development job and a boss, that‚Äôs going to set a lot of your direction. We often don‚Äôt feel like this is valid because the day job rarely feels cool or exciting enough to feel like we‚Äôre making progress. Truthfully, you are making more progress just by racking up experience points. Don‚Äôt worry that it‚Äôs not in Hip Framework X ‚Äî the beauty of programming is that experience transfers between technologies.&lt;br&gt;
Seeing what‚Äôs trending in both the job market and what people are talking about is another good indicator of a direction you could go. Be wary of chasing every new technology that pops up on Twitter. It‚Äôs better to go a little broad at first as you build up experience. A lot of the coolest technologies disappear in a year.&lt;br&gt;
What are people you admire and respect doing? I have a handful of people I follow as ‚Äútrendsetters‚Äù because I trust their judgment. They‚Äôre not jumping around between flash-in-the-pan technologies, so I can tell when something is worth my attention.&lt;br&gt;
Here‚Äôs another one people overlook: money. If someone is willing to pay you to code in or teach a technology, that‚Äôs a good sign you‚Äôre doing something right. Money as a direction indicator can come from freelance work, a full time job, or a product like a book or video course. Interestingly, what will bring you money is not always what is trending on Twitter.&lt;br&gt;
Quality Control&lt;br&gt;
This is probably the trickiest of the group because tech is always changing. You‚Äôll need to ‚Äútriangulate‚Äù a few different sources as you work through this.&lt;/p&gt;

&lt;p&gt;A lot of coding tutorial websites like AlgoExpert and Execute Program have built-in IDEs that run tests and check your work. This is very helpful for just knowing if your code runs and is syntactically correct.&lt;br&gt;
While conference talks are great for ecosystem news, they can also help you identify patterns and best practices that industry leaders are using.&lt;br&gt;
Courses, articles, and training from high-quality sources can also show you patterns and best practices.&lt;br&gt;
Never underestimate the value of the docs. Docs are meant to not only teach you the nuts and bolts of a technology, but also the best practices.&lt;br&gt;
Accountability&lt;br&gt;
Here are four different places you can find accountability:&lt;/p&gt;

&lt;p&gt;Individual accountability: find a friend and commit to each other to do something. Start with short, small commitments (e.g. a small project in a week). It‚Äôs like a gym buddy, but for code. An excellent medium for this is Twitch. Live stream building a project together!&lt;br&gt;
Learning in public: Writing out what you‚Äôre learning about doubles as a means of accountability. This is even more true if you commit to a regular cadence. Pro tip on that: give yourself an end goal. For example, ‚ÄúWrite lessons I learned studying PHP every Friday for four weeks‚Äù instead of ‚ÄúWrite every week about PHP lessons.‚Äù You‚Äôre much more likely to stick something with a hard stop. You can always start another round!&lt;br&gt;
Group challenges/learning cohorts: There are various groups challenges that you can get involved with. For example, hashtags like #100DaysOfCode and study groups for things like JavaScript30. There are also groups cropping up as ‚Äúlearning cohorts,‚Äù which are kind of like book clubs for coding.&lt;br&gt;
Paying a consultant: This isn‚Äôt always an option, but sometimes the shortest path between two points is to just pay someone to help. A few years ago I hurt my back. I had to do a bunch of tedious exercises to get better. Do you think I‚Äôd have done them if I wasn‚Äôt paying a physical therapist to pester me? Heck no! You can often just offer to pay someone for an hour of their time to pair up with you on something. It might feel expensive, but it also might save you tens or hundreds of hours.&lt;br&gt;
Summary of all is you need:&lt;br&gt;
DIRECTION&lt;br&gt;
QUALITY CONTROL AND &lt;br&gt;
ACCOUNTABILITY.&lt;br&gt;
Hope this piece help and hope to see you as an expert sometimes.&lt;br&gt;
Yusuf&lt;/p&gt;

&lt;p&gt;You can catch me on social media at &lt;br&gt;
Twitter: yusuf_software&lt;br&gt;
GitHub:&lt;a href="https://github.com/yusuf-saif"&gt;https://github.com/yusuf-saif&lt;/a&gt;&lt;br&gt;
LinkedIn:&lt;a href="https://www.linkedin.com/in/yusuf-saifur-rahman-939533192"&gt;https://www.linkedin.com/in/yusuf-saifur-rahman-939533192&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do have a nice learning process üôÇ.&lt;/p&gt;

&lt;p&gt;Overall, remember: deadlines and dollars get stuff done!&lt;/p&gt;

&lt;p&gt;Encouragement&lt;br&gt;
Don‚Äôt neglect this part of the process. We all need support! Sometimes we just need someone to let us know we‚Äôre doing alright. Heck, I know I do. We‚Äôre also notoriously bad at ‚Äúfeeling‚Äù our own progress. Here are some ideas on where to go:&lt;/p&gt;

&lt;p&gt;Discord servers. I‚Äôve been so happy to be part of different Discord groups. One that has been particularly welcoming is called Code Cafe Online. A lot of Discord servers also have a ‚Äúcelebrating wins‚Äù channel, which is a great idea.&lt;br&gt;
Twitter friends. Sometimes you just need people on the internet to cheer you on.&lt;br&gt;
Slack servers. Some coding groups, meetups, and bootcamps have dedicated Slack servers that can be a great motivation boost.&lt;br&gt;
My email list. Really, feel free to write me whenever you need a boost! It may take me a bit to respond, but I will do my best to send you a note of encouragement.&lt;br&gt;
Your Task for this Week&lt;br&gt;
Use the framework I‚Äôve laid out above to build yourself a system to learn and improve. This unlocks basically an endless list of mentors by proxy. Rather than seeking out the One True Mentor, figure out who you want to be like and observe them. What are they doing well? What is driving their success? You can have endless mentors if you know what to look for and how to harness those observations into action.&lt;/p&gt;

&lt;p&gt;Just remember one thing: building a system like this doesn‚Äôt happen overnight. Take it one step at a time. This week, first pick the area that you feel like are feeling the most pain. Are you feeling lost? Are you frustrated by your code quality? Are you never able to finish projects? Are you feeling down and ready to give up? Work on these one at a time and don‚Äôt get discouraged if the first attempt doesn‚Äôt work. Keep at it. Remember: it‚Äôs not a failure, it‚Äôs a test.&lt;/p&gt;

&lt;p&gt;Once you‚Äôve picked your biggest pain point, write me back and let me know your plan to use one of the strategies in this framework to help make it a little bit better.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>A JavaScript Utility for Measuring Spacing</title>
      <author>Steven Lei</author>
      <pubDate>Tue, 16 Nov 2021 04:05:49 +0000</pubDate>
      <link>https://dev.to/stevenlei/a-javascript-utility-for-measuring-spacing-4ne3</link>
      <guid>https://dev.to/stevenlei/a-javascript-utility-for-measuring-spacing-4ne3</guid>
      <description>&lt;p&gt;Hello, I am Steven. I just wrote a JavaScript utility named &lt;strong&gt;SpacingJS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As a frontend web developer, it is important to grasp the spacing between elements on a webpage. The DevTool can check the dimension, padding, margin, styles and more of an element, but it seems like it cannot measure the distance between elements like Sketch/Figma. So I have written this utility:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xS3JfR_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afv2u3wqrkwlvi3vrr7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xS3JfR_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afv2u3wqrkwlvi3vrr7n.png" alt="SpacingJS" width="880" height="794"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can experience on the website:&lt;br&gt;
&lt;a href="https://spacingjs.com"&gt;https://spacingjs.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides including the script with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to your website, a Chrome Extension is available on the &lt;a href="https://chrome.google.com/webstore/detail/spacingjs/fhjegjndanjcamfldhenjnhnjheecgcc"&gt;Chrome Web Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The project is open-source and available here: &lt;a href="https://github.com/stevenlei/spacingjs"&gt;https://github.com/stevenlei/spacingjs&lt;/a&gt;. Would you please star it if you like it?:)&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
      <category>css</category>
    </item>
    <item>
      <title>Intro to React useEffect Hook </title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Tue, 16 Nov 2021 01:01:17 +0000</pubDate>
      <link>https://dev.to/codegino/react-useeffect-hook-1bg</link>
      <guid>https://dev.to/codegino/react-useeffect-hook-1bg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#an-introduction-on-how-to-use-useeffect-hook-in-a-react-application"&gt;
  &lt;/a&gt;
  &lt;a href="https://carlogino.cc/blog/react-useeffect"&gt;An introduction on how to use useEffect Hook in a React application&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-raw-useeffect-endraw-hook"&gt;
  &lt;/a&gt;
  What is a &lt;code&gt;useEffect&lt;/code&gt; Hook?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h3&gt;

&lt;p&gt;React &lt;code&gt;useEffect&lt;/code&gt; is an alternative to the "old" &lt;code&gt;class&lt;/code&gt; lifecycle methods/hooks.&lt;/p&gt;

&lt;p&gt;It can be used to manage side effects, such as network requests, or to run a piece of code when the component is mounted, updated, or unmounted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#longer-version"&gt;
  &lt;/a&gt;
  Longer version
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Prior to &lt;code&gt;React v16.8&lt;/code&gt;, we can only enable a component&lt;br&gt;
to react to state changes using &lt;a href="https://reactjs.org/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class"&gt;lifecycle methods&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-to-define-a-raw-useeffect-endraw-"&gt;
  &lt;/a&gt;
  How to define a &lt;code&gt;useEffect&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//(1) declaration&lt;/span&gt;
  &lt;span class="c1"&gt;// (2)effect&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// (3)cleanup &lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="cm"&gt;/* (4)dependency array */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#heres-an-explanation-of-the-above-code"&gt;
  &lt;/a&gt;
  Here's an explanation of the above code:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;We can declare an effect by calling either &lt;code&gt;React.useEffect&lt;/code&gt; or &lt;code&gt;useEffect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;effect&lt;/code&gt; is the function that will be called when the component is mounted
OR when the dependency array changes.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cleanup&lt;/code&gt; is the function that will be called when the effect "unmounted".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dependency array&lt;/code&gt; is the array of values that will be passed to the &lt;code&gt;effect&lt;/code&gt; function.

&lt;ul&gt;
&lt;li&gt;If there is no dependency array, the effect will be called every time the component is mounted.&lt;/li&gt;
&lt;li&gt;If the array is empty, the effect will be called only once when the component is mounted.&lt;/li&gt;
&lt;li&gt;If the array is not empty, the effect will be called every time the component is mounted and the dependency array changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;h4&gt;
  &lt;a href="#increment-a-counter-every-second-until-it-reaches-10"&gt;
  &lt;/a&gt;
  Increment a counter every second until it reaches 10
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;// cleanup function&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="c1"&gt;// Render the component&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/JjyBPeO"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#basic-fetch-from-an-api"&gt;
  &lt;/a&gt;
  Basic fetch from an API
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="c1"&gt;// Render the component&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/qBXKBeB"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#fetching-with-loading-indicator-error-handling-raw-thencatchfinally-endraw-"&gt;
  &lt;/a&gt;
  Fetching with loading indicator + error handling - &lt;code&gt;then/catch/finally&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle error case anyway you want&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="c1"&gt;// Render the component&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/WNEgqBw"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#fetching-with-loading-indicator-error-handling-raw-asyncawait-endraw-"&gt;
  &lt;/a&gt;
  Fetching with loading indicator + error handling - &lt;code&gt;async/await&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// yeah, this is weird&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle error case anyway you want&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="c1"&gt;// Render the component&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/jOLvgqB"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#store-a-value-in-localstorage-everytime-the-key-or-value-changes"&gt;
  &lt;/a&gt;
  Store a value in localStorage everytime the key or value changes
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="c1"&gt;// Ignore old keys for now&lt;/span&gt;

  &lt;span class="c1"&gt;// Render the component&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/vYJaBPV"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#or-just-mimic-a-class-lifecycle-method"&gt;
  &lt;/a&gt;
  OR just mimic a class lifecycle method
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Check this &lt;a href="https://dev.to/carlogino/react-class-life-cycle-methods-to-useeffect-1kg0"&gt;blog&lt;/a&gt; on how to convert a class lifecycle methods to &lt;code&gt;useEffect&lt;/code&gt; hooks&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#additional-note"&gt;
  &lt;/a&gt;
  Additional Note
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useEffect&lt;/code&gt; can only be used in functional components&lt;/li&gt;
&lt;li&gt;The order of &lt;code&gt;useEffect&lt;/code&gt; declarations are important.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useEffect&lt;/code&gt; in a custom hook is a great way to promote side effect reusability. I will discuss this in another blog.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Compared to the old lifecycle methods, &lt;code&gt;useEffect&lt;/code&gt; is much more powerful and flexible which makes it an ideal choice when managing a side-effect.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á docker ‡∏ö‡∏ô Ubuntu ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ sudo</title>
      <author>Weerasak Chongnguluam</author>
      <pubDate>Tue, 16 Nov 2021 00:56:26 +0000</pubDate>
      <link>https://dev.to/iporsut/aichkhamsang-docker-bn-ubuntu-odyaimtngaich-sudo-3f1h</link>
      <guid>https://dev.to/iporsut/aichkhamsang-docker-bn-ubuntu-odyaimtngaich-sudo-3f1h</guid>
      <description>&lt;p&gt;‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏á Docker ‡∏ö‡∏ô Ubuntu ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á docker ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sudo ‡πÄ‡∏ä‡πà‡∏ô &lt;code&gt;sudo docker ps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏±‡πà‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ sudo ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ä‡πâ usergroup ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ &lt;code&gt;docker&lt;/code&gt; ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô logout ‡πÅ‡∏•‡πâ‡∏ß login ‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ restart OS ‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö) ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á &lt;code&gt;docker&lt;/code&gt; ‡∏î‡πâ‡∏ß‡∏¢ user ‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root ‡∏ú‡πà‡∏≤‡∏ô sudo ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ä‡πà‡∏ô&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPOgkvQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b4d06n8a9t49zyrcnu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPOgkvQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b4d06n8a9t49zyrcnu8.png" alt="docker without sudo" width="880" height="563"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: &lt;a href="https://docs.docker.com/engine/install/linux-postinstall/"&gt;https://docs.docker.com/engine/install/linux-postinstall/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Beginning of 100 Days of Code</title>
      <author>Josh Smith</author>
      <pubDate>Tue, 16 Nov 2021 00:39:49 +0000</pubDate>
      <link>https://dev.to/joshdevhub/beginning-of-100-days-of-code-1aid</link>
      <guid>https://dev.to/joshdevhub/beginning-of-100-days-of-code-1aid</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-beginning"&gt;
  &lt;/a&gt;
  The Beginning
&lt;/h2&gt;

&lt;p&gt;Today I am beginning the &lt;a href="https://www.100daysofcode.com/"&gt;100 Days of Code Challenge&lt;/a&gt;. This challenge only asks that you code for one hour a day, every day, for 100 days. I've been mostly sticking to this for a couple months anyway, but I want to officially commit to it as a way to force myself to keep on track and log my progress.&lt;/p&gt;

&lt;p&gt;Speaking of logging my progress, I think I'll make posts here every 10 days detailing what I've been up to and what I've learned. I'm in the midst of the Ruby Path at &lt;a href="https://theodinproject.com"&gt;The Odin Project&lt;/a&gt;, an open source curriculum for learning Web Development. I expect most of my stuff will be using Ruby and maybe towards the end, Rails specifically. Lately I've been working on building a game of &lt;a href="https://en.wikipedia.org/wiki/Mastermind_(board_game)"&gt;Mastermind&lt;/a&gt;, which is easily the most complicated thing I've had to build so far in my journey with programming. Hopefully, I'll be able to show off a finished product in time for the 10 Day Update ü§û &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-rules"&gt;
  &lt;/a&gt;
  Some Rules
&lt;/h2&gt;

&lt;p&gt;Since this challenge will move through the holiday season, I will give myself a one week break while I'm visiting my family back home. But other than that, I plan to keep on schedule barring some intense illness or emergency. Looking forward to expanding my skills and getting on a new career path üíØ&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React class life cycle methods to useEffect </title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Tue, 16 Nov 2021 00:34:22 +0000</pubDate>
      <link>https://dev.to/codegino/react-class-life-cycle-methods-to-useeffect-1kg0</link>
      <guid>https://dev.to/codegino/react-class-life-cycle-methods-to-useeffect-1kg0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-map-a-react-class-life-cycle-methodshooks-to-useeffect"&gt;
  &lt;/a&gt;
  &lt;a href="https://carlogino.cc/blog/lifecycle-methods-to-useeffect"&gt;How to map a React class life cycle methods/hooks to useEffect&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#common-class-lifecycle-methods"&gt;
  &lt;/a&gt;
  Common class lifecycle methods
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// happens as soon as your component is mounted&lt;/span&gt;
&lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// happens as soon as the updating begin&lt;/span&gt;
&lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// for certain performance optimizations&lt;/span&gt;
&lt;span class="nx"&gt;shouldComponentUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// happens just before the component unmounts&lt;/span&gt;
&lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#how-can-we-map-those-lifecycle-hooks-to-useeffect"&gt;
  &lt;/a&gt;
  How can we map those lifecycle hooks to useEffect?
&lt;/h2&gt;

&lt;p&gt;Here are basic templates to convert a class lifecycle method to a useEffect hook:&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#componentdidmount"&gt;
  &lt;/a&gt;
  componentDidMount
&lt;/h3&gt;

&lt;p&gt;Create an empty dependency array and pass it to the &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code to run when the component is mounted &lt;/span&gt;

  &lt;span class="c1"&gt;// Make sure this is empty to ensure hook will only run once&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/qBXKWxx"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#shouldcomponentupdate"&gt;
  &lt;/a&gt;
  shouldComponentUpdate
&lt;/h3&gt;

&lt;p&gt;Add the dependency array and pass it to the &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// props: {name}&lt;/span&gt;
&lt;span class="c1"&gt;// state: {visible}&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... code to run&lt;/span&gt;

  &lt;span class="c1"&gt;// the dependency array below is "equivalent" to:&lt;/span&gt;
  &lt;span class="c1"&gt;// the effect will trigger if&lt;/span&gt;
  &lt;span class="c1"&gt;// props.name !== nextProps.name || state.enabled !== nextState.enabled&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/gOxKObO"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#componentwillunmount"&gt;
  &lt;/a&gt;
  componentWillUnmount
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;useEffect&lt;/code&gt; can return a function which its body will be executed when the component is unmounted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code to run when the component is unmounted&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="cm"&gt;/* with or without dependency array */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/vYJrBKr"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#componentdidupdate"&gt;
  &lt;/a&gt;
  componentDidUpdate
&lt;/h3&gt;

&lt;p&gt;This is a bit subjective because it's up to the developer to decide how &lt;code&gt;componentDidUpdate&lt;/code&gt; should behave (the simplest is the same as &lt;code&gt;componentDidMount&lt;/code&gt; mapping).&lt;br&gt;
It could also be a combination of &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;shouldComponentUpdate&lt;/code&gt; mapping with the addition&lt;br&gt;
of a reference variable to check if the component has been mounted as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasMount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasMount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code to run when the component is updated&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hasMount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="cm"&gt;/* dependencies */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/codegino/pen/qBXKBeB"&gt;Link to Codepen&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#additional-note"&gt;
  &lt;/a&gt;
  Additional Note
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can only define one of each lifecycle method in a &lt;code&gt;class&lt;/code&gt; component.
When using hooks you can define as many &lt;code&gt;useEffect&lt;/code&gt; as you want.&lt;/li&gt;
&lt;li&gt;You can only use &lt;code&gt;useEffect&lt;/code&gt; in a &lt;code&gt;function&lt;/code&gt; component&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The examples above are simple ways to map a &lt;code&gt;class lifecycle hooks&lt;/code&gt;&lt;br&gt;
component to a &lt;code&gt;React hooks&lt;/code&gt;, and there are many other ways to do it.&lt;br&gt;
The good news is that you don't need to think of mapping lifecycle hooks to useEffect since React hooks introduced a&lt;br&gt;
different paradigm on how we can create a React component and how we can mange side-effects.&lt;br&gt;
This mapping is only useful when I'm refactoring a &lt;code&gt;class&lt;/code&gt; component to be a &lt;code&gt;function&lt;/code&gt; component.&lt;br&gt;
For newer projects, I ought to think that class component does not exists.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Making the most of our startup‚Äôs on-call rotation</title>
      <author>RJ Zaworski</author>
      <pubDate>Tue, 16 Nov 2021 00:19:39 +0000</pubDate>
      <link>https://dev.to/koan/making-the-most-of-our-startups-on-call-rotation-3mnh</link>
      <guid>https://dev.to/koan/making-the-most-of-our-startups-on-call-rotation-3mnh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Will I have to be on call?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the last hour of &lt;a href="https://koan.co/"&gt;Koan&lt;/a&gt;‚Äôs &lt;a href="https://www.koan.co/blog/why-we-open-sourced-our-hiring-manual"&gt;on-site interview&lt;/a&gt; we turn the tables and invite candidates to interview our hiring team. At face value it‚Äôs a chance to answer any open questions we haven‚Äôt answered earlier in the process. It‚Äôs also a subtle way to introspect on our own hiring process ‚Äî after three rounds of interviews and side-channel conversations with the hiring manager, what have we missed? What‚Äôs on candidates‚Äô minds? Can we address it earlier in the process?&lt;/p&gt;

&lt;p&gt;So, you asked, will I have to be on call?&lt;/p&gt;

&lt;p&gt;The middle of the night pager rings? The panicked investigations? Remediation, write-ups, post-mortems?&lt;br&gt;
We get it. We‚Äôve been there. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/patrickc"&gt;Patrick Collison&lt;/a&gt;‚Äôs been there, too:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfIfUeK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/825622525342199809/_iAaSUQf_normal.jpg" alt="Patrick Collison profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Patrick Collison
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @patrickc
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Stripe, 2011. I decided to assign a custom ringtone to PagerDuty. Chose the iPhone's duck sound. Many (many) problems and pages followed. Years later, walking through park, I heard a soft quack. Shivered involuntarily, pulse quickened.&lt;br&gt;&lt;br&gt;And that's how I ruined ducks for myself.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:47 PM - 31 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1432731774270906369" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1432731774270906369" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1432731774270906369" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;‚ÄúDon‚Äôt ruin the duck.‚Äù There are worse guiding principles for an on-call process (and operational health generally).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So, will I have to be on call?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, you will. But we‚Äôve gotten a ton out of Koan‚Äôs on-call rotation and we hope you will, too. Ready to learn more?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oncall-at-koan"&gt;
  &lt;/a&gt;
  On-call at Koan
&lt;/h2&gt;

&lt;p&gt;We set up Koan‚Äôs on-call rotation before we‚Äôd heard anything about Patrick‚Äôs ducks. Our version of ‚Äúdon‚Äôt ruin the duck,‚Äù included three principles that (if somewhat less evocative) have held up surprisingly well:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;We concentrate distractions&lt;/strong&gt; ‚Äî our on-call developer is tasked with minimizing context switching for the rest of the team. We‚Äôll escalate incidents if needed, but as much as possible the business of ingesting, diagnosing, and triaging issues in production services stays in a single person‚Äôs hands ‚Äî keeping the rest of the team focused on shipping great product.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;We control our own destiny&lt;/strong&gt; ‚Äî just like Koan‚Äôs culture at large, being on-call is much more about results (uptime, resolution time, pipeline throughput, and learning along the way) than how they come about. Our on-call developer wields considerable authority over how issues are fielded and dispatched, and even over the production release schedule.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;We take turns&lt;/strong&gt; ‚Äî on-call responsibilities rotate weekly. This keeps everyone engaged with the on-call process and avoids condemning any single person to an eternity (or even an extended period) of pager duty.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These principles have helped us wrangle a fundamentally interrupt-driven process. What we didn‚Äôt realize, though, was how much time ‚Äî and eventually, value ‚Äî we were recovering between the fire drills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-bugs-begin"&gt;
  &lt;/a&gt;
  How bugs begin
&lt;/h2&gt;

&lt;p&gt;Before that, though, we‚Äôd be remiss to skip the easiest path to a calm, quiet on-call schedule: don‚Äôt release. To paraphrase Descartes, code ergo bugs ‚Äî no matter how diligent you are in QA, shipping software means injecting change (and therefore new defects) into your production environment.&lt;/p&gt;

&lt;p&gt;Not shipping isn‚Äôt an option. We‚Äôre in the habit of releasing multiple times per day, not to mention all of the intermediate builds pushed to our staging environment via CI/CD. A production issue every now and then is a sign that the system‚Äôs healthy; that we‚Äôre staying ambitious and shipping fast.&lt;/p&gt;

&lt;p&gt;But it also means that things sometimes break. And when they do, someone has to pick up the phone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;On the bad days, on-call duty is a steady stream of interruptions punctuated by the occasional crisis. On the good days it isn‚Äôt much to write home about. Every day, though, there are at least a few minutes to tighten down screws, solve problems, and explore the system‚Äôs nooks and crannies. This is an intentional feature (not a bug) of our on-call rotation, and the payoff has been huge. We‚Äôve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;built shared ownership of the codebase and production systems&lt;/li&gt;
&lt;li&gt;systematized logging, metrics, monitoring, and alerting&lt;/li&gt;
&lt;li&gt;built empathy for customers (and our support processes)&lt;/li&gt;
&lt;li&gt;spread awareness of little-used features (we‚Äôre always onboarding)&lt;/li&gt;
&lt;li&gt;iterated on key processes (ingestion/triage, release management, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don‚Äôt get all that by just passing around a firefighting hat. You need buy-in and ‚Äî crucially ‚Äî a healthy relationship with your production environment. Which brings us back to our principles, and the on-call process that enables it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-concentrate-distractions"&gt;
  &lt;/a&gt;
  We concentrate distractions
&lt;/h2&gt;

&lt;p&gt;When something breaks, the on-call schedule clarifies who‚Äôs responsible for seeing it‚Äôs fixed. As the proverbial umbrella keeping everyone else focused and out of the rain (sometimes a downpour, sometimes a drizzle), you don‚Äôt need to immediately fix every problem you see: just to investigate, file, and occasionally prioritize them for immediate attention.&lt;/p&gt;

&lt;p&gt;That still means a great deal of on-call time spent ingesting and triaging a steady drip of symptoms from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;customer issues escalated by our customer success team&lt;/li&gt;
&lt;li&gt;internal bug reports casually mentioned in conversations, slack channels, or email threads&lt;/li&gt;
&lt;li&gt;exceptions/alerts reported by application and infrastructure monitoring tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes symptoms aren‚Äôt just symptoms, and there‚Äôs a real issue underneath. Before you know it, the pager starts ringing‚Äî&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enter-the-pager"&gt;
  &lt;/a&gt;
  Enter the pager
&lt;/h3&gt;

&lt;p&gt;The water‚Äôs getting warmer. A pager ping isn‚Äôt the end of the world, but we‚Äôve tuned out enough false positives that an alert is a good sign that something bad is afoot.&lt;/p&gt;

&lt;p&gt;Once you‚Äôve confirmed a real issue, the next step is to classify its severity and impact. A widespread outage? Those need attention immediately. Degraded performance in a specific geography? Not awesome, but something that can probably wait until morning. Whatever it is, we‚Äôre looking to you to coordinate our response, both externally (updating our status page) and either escalating or resolving the issue yourself.&lt;/p&gt;

&lt;p&gt;On-call isn‚Äôt a private island. There will always be times we need to pause work in progress, call in the team, and get to the bottom of something that‚Äôs keeping us down. But the goal is to do it in a controlled fashion, holding as much space for everyone else as you reasonably can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-control-our-own-destiny"&gt;
  &lt;/a&gt;
  We control our own destiny
&lt;/h2&gt;

&lt;p&gt;Your responsibilities aren‚Äôt purely reactive, however. Controlling your own destiny means having at least a little agency over what breaks and when. This isn‚Äôt just wishful thinking. While issues introduced in the past are always a lurking threat ‚Äî logical edge cases, bottlenecks, resource limits, and so on ‚Äî the source of most new issues is a new release.&lt;/p&gt;

&lt;p&gt;It makes sense, then, for whoever‚Äôs on-call to have the last word on when (and how) new releases are shipped. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;managing the release&lt;/strong&gt; ‚Äî generating changelogs, reviewing the contents of the release, and ensuring the appropriate people are warned and signatures are obtained&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;debugging release / deployment issues&lt;/strong&gt; ‚Äî monitoring both the deployment and its immediate aftermath, and remediating any issues that arise&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;making the call on hotfix releases and rollbacks&lt;/strong&gt; ‚Äî as a step sideways from our usual flow they‚Äôre not tools we use often. But they‚Äôre there (and very quick) if you need them&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#closing-the-feedback-loop"&gt;
  &lt;/a&gt;
  Closing the feedback loop
&lt;/h3&gt;

&lt;p&gt;An unexpected benefit we‚Äôve noticed from coupling on-call and release management duties is the backpressure it puts on both our release cadence and deployment pipeline. If we‚Äôre underwater with issues from the previous release, the release manager has strong incentives to see they‚Äôre fixed before shipping anything else. Ditto any issues in our CI/CD processes.&lt;/p&gt;

&lt;p&gt;Neither comes up too often, fortunately, and while we can‚Äôt totally write off the combination of robust systems and generally good luck, it‚Äôs just as hard to discount the benefits of tight feedback and an empowered team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-take-turns"&gt;
  &lt;/a&gt;
  We take turns
&lt;/h2&gt;

&lt;p&gt;But you said, ‚Äúteam!‚Äù ‚Äî a lovely segue to that last principle. Rotating on-call responsibility helps underscore our team‚Äôs commitment to leaving a relatively clean bill (releases shipped, exceptions handled; tickets closed; etc) for the next person up. When you‚Äôre on-call, you‚Äôre the single person best placed to deflect issues that would otherwise engulf the entire team. When you‚Äôre about to be on call, you‚Äôre invested in supporting everyone else in doing the same. You‚Äôd love to start your shift with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;healthy systems&lt;/li&gt;
&lt;li&gt;a manageable backlog of support inquiries&lt;/li&gt;
&lt;li&gt;a clear list of production exceptions&lt;/li&gt;
&lt;li&gt;a quick brain-dump of issues fielded (and ongoing concerns) from the teammate you‚Äôre taking over from&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A frequent rotation almost guarantees that everybody‚Äôs recently felt the same way. Team members regularly swap shifts (for vacations, appointments, weddings, anniversaries, or any other reason), but it‚Äôs never long before you‚Äôre back on call.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rest-of-the-time"&gt;
  &lt;/a&gt;
  The rest of the time
&lt;/h2&gt;

&lt;p&gt;Ultimately, we‚Äôve arrived at an on-call process that balances the realities of running software in production with a high degree of agency. We didn‚Äôt explicitly prioritize quality of life, and we don‚Äôt explicitly track how much time on-call duties are eating up. But collective ownership, individual buy-in, and tight feedback have pushed the former up and the latter down, to the point where you‚Äôll find you have considerable time left over for other things. Ideally you‚Äôll use your turn on-call to dig deeper into the issues you touch along the way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exploring unfamiliar features (with or without reported bugs)&lt;/li&gt;
&lt;li&gt;tightening up our CI processes&lt;/li&gt;
&lt;li&gt;tuning configurations&lt;/li&gt;
&lt;li&gt;writing regression tests&lt;/li&gt;
&lt;li&gt;improving logging and observability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, you‚Äôll be triaging issues, squashing bugs, and maybe even putting out the odd production fire. You can almost count on having time left to help minimize the need for on-call. You‚Äôre on the hook to fix things if they break ‚Äî and empowered to make them better.&lt;/p&gt;

&lt;p&gt;So yes, you‚Äôll have to take an on-call shift.&lt;/p&gt;

&lt;p&gt;Help us make it a good one!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover image by &lt;a href="https://unsplash.com/@danielsessler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Daniel Se√üler&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/duck-decoy?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>errors</category>
      <category>ducks</category>
    </item>
    <item>
      <title>JavaScript Bites: Closure</title>
      <author>Brett Martin</author>
      <pubDate>Tue, 16 Nov 2021 00:18:54 +0000</pubDate>
      <link>https://dev.to/bamartindev/javascript-bites-closure-3je8</link>
      <guid>https://dev.to/bamartindev/javascript-bites-closure-3je8</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; Closure is the concept of storing a function and its environment together.  When you create a function, it stores the functions local environment and its outer environment together.  If you are ever confused about what value will be present, understand what value existed when the function scope was created!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#formal-definition"&gt;
  &lt;/a&gt;
  Formal Definition
&lt;/h2&gt;

&lt;p&gt;If you were to look up what a closure is, &lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;Wikipedia's definition&lt;/a&gt; has this to say in the first two lines:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In programming languages, a closure, also lexical closure or function closure, is a technique for implementing lexically scoped name binding in a language with first-class functions. Operationally, a closure is a record storing a function together with an environment. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is a bit of a dense definition, but its not a complex as it seems at first glance!  This article aims to explain what this means, bit by bit, so you can use closures with confidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scoping"&gt;
  &lt;/a&gt;
  Scoping
&lt;/h2&gt;

&lt;p&gt;I first want to touch on what scoping means in JavaScript.  Before ES6, JavaScript only had &lt;strong&gt;Global Scope&lt;/strong&gt; and &lt;strong&gt;Function Scope&lt;/strong&gt;.  You have probably seen how variables are accessible based on what scope they were declared in.  Here is an annotated example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Variable declared at the global scope.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;globalVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Neat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Variable declared in function scope.&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;funcVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;globalVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;funcVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you were to execute the above code, you would get a &lt;code&gt;ReferenceError: funcVar is not defined&lt;/code&gt; error.  If you remove the &lt;code&gt;console.log(funcVar);&lt;/code&gt; line, the output would be &lt;code&gt;Neat&lt;/code&gt;.  The reason for this is that scopes can only reference variable declared in their own scope (local) and any outer scopes relative to the current scope.  In this case, the scope in &lt;code&gt;func()&lt;/code&gt; can access the outer scope (global) to get the value of &lt;code&gt;globalVariable&lt;/code&gt;, however the global scope does not have access to the scope created for &lt;code&gt;func()&lt;/code&gt; so it cannot access the funcVar variable.  One more example to show how inner scopes can access values in outer scopes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;globalVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;innerVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;innerFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;innerFunc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;globalVar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;innerVar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, from &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="nx"&gt;innerFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Executing the above will show &lt;code&gt;Hello World, from innerFunc&lt;/code&gt; in the console.  We can see that &lt;code&gt;innerFunc()&lt;/code&gt; has access to its local scope, the scope of &lt;code&gt;func()&lt;/code&gt; and the global scope.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  Closure
&lt;/h2&gt;

&lt;p&gt;The example above is actually a closure!  It represents the second part of the Wikipedia definition, &lt;code&gt;Operationally, a closure is a record storing a function together with an environment.&lt;/code&gt;  In this case, the function is &lt;code&gt;innerFunc()&lt;/code&gt; and the environment that is being stored is the local scope along with all of the outer scopes present at the time of function creation.&lt;/p&gt;

&lt;p&gt;Thats it!  If you have been writing functions, you have been creating closures this whole time!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-big-deal"&gt;
  &lt;/a&gt;
  Whats the Big Deal
&lt;/h2&gt;

&lt;p&gt;The reason this can be a confusing topic is that closures can enable a handful of different patterns and ideas in JavaScript, even if they don't seem related at all.  So here are some quick examples of things that are possible because of closures:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#access-data-through-interface"&gt;
  &lt;/a&gt;
  Access Data Through Interface
&lt;/h3&gt;

&lt;p&gt;Say you wanted to create a simple counter with a variable representing the current count, and four functions: add, subtract, reset, show.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Count: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you were to use these functions to add and show, like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you would get &lt;code&gt;Count: 4&lt;/code&gt;.  The issue is that if I were to throw in &lt;code&gt;count = 0;&lt;/code&gt; right before the &lt;code&gt;show()&lt;/code&gt; it would show &lt;code&gt;Count: 0&lt;/code&gt;!  We are operating on a variable that any scope can access and modify, since it is global, and that is dangerous.  Something can accidentally mess with count and cause a headache of a bug.  This can be written in a different way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mkCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Count: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;show&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is very similar, but you can see that we have declared it inside of a new function called &lt;code&gt;mkCounter&lt;/code&gt; that defined the count variable locally to its scope.  At the end, we return an object that exposes the four functions but &lt;strong&gt;not&lt;/strong&gt; the count variable, however since all of these functions are defined inside the &lt;code&gt;mkCounter&lt;/code&gt; scope, the closing environment for all of them contain &lt;code&gt;count&lt;/code&gt;!  Here is how it would be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mkCounter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mkCounter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;counter1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;counter1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;counter1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;counter1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;counter2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;counter2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;counter1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;counter2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which will give the output of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Count: 2
Count: -2
undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome, so not only can we &lt;strong&gt;not&lt;/strong&gt; access the count as shown by the last line, each counter has its own count in their own environment to work with!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#partial-application"&gt;
  &lt;/a&gt;
  Partial Application
&lt;/h3&gt;

&lt;p&gt;Another closure example that I use all the time is partial application.  A simple example could be formatting a log with some data that you don't want to set every time you invoke the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mkLogger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;showDate&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can use the function like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;docLogger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mkLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOCS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;docLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my log message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;docLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Another log message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with the output of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-11-15T23:55:26.672Z | DOCS | This is my log message 
2021-11-15T23:55:26.672Z | DOCS | Another log message 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is nice because you can initialize things like the route and if you want to display the date when the program starts, then pass the simple &lt;code&gt;docLogger&lt;/code&gt; function to other parts of the application that need to use it instead of calling something like &lt;code&gt;logger('DOCS', true, 'This is my log message')&lt;/code&gt; every time you want to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-uses"&gt;
  &lt;/a&gt;
  Other Uses
&lt;/h3&gt;

&lt;p&gt;I just wanted to mention some other use cases that you can explore as well: Memoization, Singleton, Event Listeners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully the concept of closure isn't too complex any more!  If you do have any questions please let me know and I will do my best to address them and refine the article for clarity.  &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Gentle Introduction to Linear Programming</title>
      <author>Rahul Banerjee</author>
      <pubDate>Mon, 15 Nov 2021 22:50:00 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/gentle-introduction-to-linear-programming-4p6n</link>
      <guid>https://dev.to/rahulbanerjee99/gentle-introduction-to-linear-programming-4p6n</guid>
      <description>





&lt;p&gt;First, let‚Äôs talk about a Linear Equation. A linear equation consists of variables, the only restriction is that each variable can have a power of 1. I.e there can be no variable with a power of 2 or greater.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OIX8h_8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Acrjno_3nbSGaVR-Ssst0aQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OIX8h_8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Acrjno_3nbSGaVR-Ssst0aQ.png" alt="" width="880" height="535"&gt;&lt;/a&gt;Image By¬†Author&lt;/p&gt;

&lt;p&gt;Linear Programming consists of two parts. The objective function is a linear equation and a set of constraints. The objective function or the linear equation will either have to be maximized or minimized.&lt;/p&gt;

&lt;p&gt;Eg: Consider a bookseller has 3 types of books (Physics, Chemistry, and Biology). The Physics Book makes a profit of 10\$, Chemistry makes a profit of 5\$ and Biology makes a profit of 2\$. If we wanted to write a equation for the total profit it would look something like below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7oBpGshO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AjgKPIuzU7n0g5-pjwVWKyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7oBpGshO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AjgKPIuzU7n0g5-pjwVWKyw.png" alt="" width="880" height="331"&gt;&lt;/a&gt;Image by¬†Author&lt;/p&gt;

&lt;p&gt;We would need to maximize the above equation. Right now it doesn‚Äôt have any constraints therefore the value for the variables has no upper bounds. However, in real life, there will be constraints. In the above example, constraints could be the number of books the bookseller has in stock. If the Book Seller has 5 Physics books available, 3 Chemistry Books available, and 10 Biology Books available, our problem would look like below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XyEYm8RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AlpagvH8k3qd78i8-WbxTyQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XyEYm8RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AlpagvH8k3qd78i8-WbxTyQ.png" alt="" width="880" height="535"&gt;&lt;/a&gt;Image by¬†Author&lt;/p&gt;

&lt;p&gt;The above is a simple case and can be solved without the need to use Python. However, in the real world, the Formulation of the Problems is very complex in nature. We will look at some of these in the next chapter.&lt;/p&gt;

&lt;p&gt;Some applications of Linear Programming are listed below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supply Chain&lt;/li&gt;
&lt;li&gt;Scheduling Problems&lt;/li&gt;
&lt;li&gt;Delivery Route Problems&lt;/li&gt;
&lt;li&gt;Manufacturing Problems&lt;/li&gt;
&lt;li&gt;¬†Diet Plan Optimization&lt;/li&gt;
&lt;li&gt;Production Planning&lt;/li&gt;
&lt;li&gt;Transportation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the problems become more complex, it becomes harder to solve the problem without the help of a solver. A solver is a software that basically accepts the problem formulation(variables, objectives, and constraints) as inputs and returns the solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coin-or.github.io/pulp/index.html" rel="noreferrer noopener"&gt;PuLP&lt;/a&gt; is an open-source software written in Python. It helps you to formulate problems such as the bookseller problem. It is free and supports free open-source solvers as well. For an introduction to PuLP, refer to my below article&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realpythonproject.com/basic-linear-programming-in-python-with-pulp/" rel="noreferrer noopener"&gt;&lt;strong&gt;Basic Linear Programming in Python with PuLP&lt;/strong&gt;&lt;br&gt;&lt;/a&gt;&lt;a href="https://towardsdatascience.com/basic-linear-programming-in-python-with-pulp-d398d144802b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Plotting the Feasible Region Using¬†Python&lt;/h3&gt;

&lt;p&gt;In some cases a linear problem doesn‚Äôt have an objective function, it simply has a set of constraints, and the solution which satisfies all the constraints is required.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjPQ0b3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AwSTsFxsQ_lAmKjfH" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjPQ0b3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AwSTsFxsQ_lAmKjfH" alt="" width="592" height="441"&gt;&lt;/a&gt;The image is taken from¬†&lt;a href="https://medium.com/p/d398d144802b" rel="noreferrer noopener"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given a set of constraints, a feasible region is the solution space or the set of values that satisfy all the constraints. In the above picture, the various lines are the constraints related to Car A (X-Axis) and Car B (Y-Axis) and the green shaded area is the feasible region. Any Coordinate within the green shaded region, eg: (1,2), (2,2), etc will satisfy all the constraints.&lt;/p&gt;

&lt;p&gt;Consider the following set of constraints&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUGz_UZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A1IIvrFduP6kqf-yq0FK5nA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUGz_UZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A1IIvrFduP6kqf-yq0FK5nA.png" alt="" width="880" height="535"&gt;&lt;/a&gt;Image By¬†Author&lt;/p&gt;

&lt;p&gt;Let‚Äôs try to plot the feasible region for the above constraints. First, install NumPy and matplotlib&lt;/p&gt;

&lt;pre&gt;pip3 install numpy, matplotlib&lt;/pre&gt;

&lt;p&gt;Below is the code for plotting the &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = np.linspace(0, 50, 1000)
y = np.linspace(0, 50, 1000)

'''
Draw Vertical Line
'''
plt.axvline(10, color='b', label=r'X &amp;lt;=10')
plt.axvline(0, color='b', label=r'X &amp;gt;=0')

'''
Draw Horizontal Line
'''
plt.axhline(2, color='r', label='Y &amp;gt;= 2') 
plt.axhline(10, color='r', label='Y &amp;lt;= 10') 

'''
X+Y&amp;gt;=12
'''
plt.plot(x, 12-x, label='X+Y&amp;gt;=12',color='b')

'''
X+Y&amp;lt;=15
'''
plt.plot(x, 15-x, label=r'X+Y&amp;lt;=15',color='yellow') # constraint 4

plt.xlim((0, 20))
plt.ylim((0, 20))
plt.show()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This the plot&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3ProVK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AwRySNlDpnwH-4vF8qqPy_Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3ProVK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AwRySNlDpnwH-4vF8qqPy_Q.png" alt="" width="880" height="668"&gt;&lt;/a&gt;Lines Plotted&lt;/p&gt;

&lt;h4&gt;Letting Matplotlib Calculate the Feasible¬†region&lt;/h4&gt;

&lt;p&gt;The following code will calculate the feasible region for the above &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x,y = np.meshgrid(np.linspace(0, 50, 1000),np.linspace(0, 50, 1000))
plt.imshow( 
        (
            (x&amp;gt;=0)&amp;amp;(x&amp;lt;=10)&amp;amp;(y&amp;gt;=2)&amp;amp;(y&amp;lt;=15-x)&amp;amp;(y&amp;gt;=12-x)&amp;amp;(y&amp;lt;=10)
        ).astype(int) , 
        extent=(0,50,0,50),
        origin="lower", 
        cmap="Reds", 
        alpha = 0.3);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to put this before we plot any of the lines. This will ensure that the lines are drawn on top of the feasible region. This method was taken from &lt;a href="https://stackoverflow.com/questions/57017444/how-to-visualize-feasible-region-for-linear-programming-with-arbitrary-inequali" rel="noreferrer noopener"&gt;this stack overflow answer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the Feasible Region&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drpv1APT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AwS8dXDZ78LoEZivqLmXDgA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drpv1APT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AwS8dXDZ78LoEZivqLmXDgA.png" alt="" width="880" height="781"&gt;&lt;/a&gt;Feasible Region¬†Plot&lt;/p&gt;

&lt;p&gt;All the points in this feasible region satisfy all the constraints.¬†&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope this article served as a good introduction to Linear Programming&lt;/p&gt;

&lt;p&gt;You can check out the following articles related to Linear Programming&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realpythonproject.com/basic-linear-programming-in-python-with-pulp/" rel="noreferrer noopener"&gt;&lt;strong&gt;Basic Linear Programming in Python with PuLP&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realpythonproject.com/how-to-solve-a-sudoku-puzzle-using-python-and-linear-programming/" rel="noreferrer noopener"&gt;How To Solve A Sudoku Puzzle Using Python And Linear Programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realpythonproject.com/how-to-balance-chemical-equations-in-python-using-constraint-optimization-pulp/" rel="noreferrer noopener"&gt;How to Balance Chemical Equations in Python using Constraint Optimization (PuLP)&lt;/a&gt;&lt;/p&gt;








&lt;p&gt;Connect with on &lt;a href="https://www.linkedin.com/in/rahulbanerjee2699/" rel="noreferrer noopener"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/rahulbanerjee99" rel="noreferrer noopener"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like my articles and would like to support me, please consider using my &lt;a href="https://rahul1999.medium.com/membership" rel="noreferrer noopener"&gt;Referral link&lt;/a&gt; to sign up for a Medium Membership. You will be able to access all articles behind the paywall. If you use my referral, I will get a part of your monthly subscription at no extra cost for you.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>An online escape room for dev teams</title>
      <author>Richard Morrison</author>
      <pubDate>Mon, 15 Nov 2021 22:46:57 +0000</pubDate>
      <link>https://dev.to/mozz100/an-online-escape-room-for-dev-teams-2i3n</link>
      <guid>https://dev.to/mozz100/an-online-escape-room-for-dev-teams-2i3n</guid>
      <description>&lt;p&gt;Team building for remote teams is a tricky subject, especially for developer teams.  Often, software engineer team members aren't keen on traditional team-building activities such as, well, socialising in person over drinks, playing rounders or driving go karts.&lt;/p&gt;

&lt;p&gt;If engineers are already spending their days in front of a screen, it might seem an interesting idea, but go with it for a second... what about an online escape room where the team has to hack, code and puzzle their way out?&lt;/p&gt;

&lt;p&gt;I built &lt;a href="https://www.dev-esc.com"&gt;/dev/esc&lt;/a&gt; to give dev teams a challenging, geeky way to do what they do in their day jobs.  Only without JIRA, requirements, specifications, meetings, managers.  It's unashamedly nerdy - my premise is that programmers will enjoy the reward of cracking a team game in about an hour, especially if the subject matter is code, data or APIs.&lt;/p&gt;

&lt;p&gt;I'd love to hear from you in the comments.  Am I onto a good idea here?  What feedback do you have for me?&lt;/p&gt;

&lt;p&gt;Have you been involved in team-building activities and seen successful ideas?  Or unsuccessful attempts?  I think developer teams are underserved by traditional off-site activities and would love to learn more from your experiences.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Day 10 of #100daysofcode: Dependency Tree Forest</title>
      <author>Ryan Whelchel</author>
      <pubDate>Mon, 15 Nov 2021 22:17:04 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-10-of-100daysofcode-dependency-tree-forest-20b9</link>
      <guid>https://dev.to/rydwhelchel/day-10-of-100daysofcode-dependency-tree-forest-20b9</guid>
      <description>&lt;p&gt;My week started with way more work than expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I started today off by finishing the JS Basics portion of FreeCodeCamp. These lessons seem to be very well structured, so I'm going to continue with this course until I complete it.&lt;/p&gt;

&lt;p&gt;Today I started the process of linting my entire project with ESLint (AirBnB rules). While the linting itself was not a problem, I ran into some serious dependency tree errors and really got lost in the forest of it. Solving these errors was a really long winded process and it ate up a lot of the time I had set aside for working. In the future, I will need to be much more careful when setting dependencies; I didn't realize how convoluted it could get to fix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;As is usual, Tuesday is my busiest day of the week and this Tuesday will be no exception. My plans are to continue with FreeCodeCamp's tutorials and any spare time I get to work on my project will be a blessing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;Dealing with dependencies in React. I need to learn more about the config files, especially &lt;code&gt;package.json&lt;/code&gt; and the different ways I can go about solving dependency errors. If others hadn't run into the same issues as I, I really don't know how I would have solved my dependency problems today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures"&gt;JS - FreeCodeCamp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Making a User Interface for DApps in Redwood</title>
      <author>Milecia</author>
      <pubDate>Mon, 15 Nov 2021 22:10:35 +0000</pubDate>
      <link>https://dev.to/flippedcoding/making-a-user-interface-for-dapps-in-redwood-2cki</link>
      <guid>https://dev.to/flippedcoding/making-a-user-interface-for-dapps-in-redwood-2cki</guid>
      <description>&lt;p&gt;As much of a buzz term as blockchain has become, it's still a great technology. To take some of the magic out of it, blockchain is essentially a distributed database. A blockchain is made of blocks that contain data and those blocks are chained together across multiple machines, which make up the distributed network.&lt;/p&gt;

&lt;p&gt;In this article, we'll build a distributed app in the Redwood framework that handles video data. We'll make a smart contract to handle our blockchain interactions. Then we'll set up the Redwood distributed app that will work with the blockchain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-on-dapps"&gt;
  &lt;/a&gt;
  Background on DApps
&lt;/h2&gt;

&lt;p&gt;A DApp is very similar to a regular app. The only difference is that the back-end runs on a decentralized network instead of a central server that might host APIs or other services. It uses the &lt;a href="https://ethereum.org/en/what-is-ethereum/"&gt;Ethereum&lt;/a&gt; blockchain to store data and it has smart contracts to handle the business logic.&lt;/p&gt;

&lt;p&gt;By using smart contracts, DApps don't have an owner. A smart contract is like a set of rules that every part of the network has to follow. Once the smart contract has been deployed to Ethereum, you can't change it. That means no companies or individuals can change the instructions for that set of rules in any way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ethereum"&gt;
  &lt;/a&gt;
  Ethereum
&lt;/h3&gt;

&lt;p&gt;For a little context, Ethereum is a decentralized, open-source blockchain that has smart contract functionality. This is used as the network to host smart contracts. Anybody can join an Ethereum network and they will automatically follow the rules in the smart contract.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-redwood-app"&gt;
  &lt;/a&gt;
  Setting up a Redwood app
&lt;/h2&gt;

&lt;p&gt;Now that we have a little background on what we'll be making, let's start by making the Redwood app. To do this, open a terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create redwood-app user-dapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate new directories and files for the project that covers everything from the front-end to the back-end, including a database. Even when you're working with a DApp, there might be reasons you want to track data in a more common way, like easier data processing.&lt;/p&gt;

&lt;p&gt;With the app created, you should see two main directories: &lt;code&gt;api&lt;/code&gt; and &lt;code&gt;web&lt;/code&gt;. The &lt;code&gt;api&lt;/code&gt; folder holds all of the logic for the GraphQL back-end and the code to manage the database transactions. The &lt;code&gt;web&lt;/code&gt; folder, which is where we'll be focused, holds all of the front-end logic and user interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-installations"&gt;
  &lt;/a&gt;
  Some Installations
&lt;/h2&gt;

&lt;p&gt;You'll need to &lt;a href="https://www.trufflesuite.com/ganache"&gt;download Ganache&lt;/a&gt; to set up a local Ethereum network that you can develop on. Once you have it installed, you can use the "Quickstart" option.&lt;/p&gt;

&lt;p&gt;You'll also need to install Truffle with the following command in the &lt;code&gt;web&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add truffle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we'll deploy the smart contract to the local Ethereum network.&lt;/p&gt;

&lt;p&gt;There are a few dependencies that need to be installed too. In the &lt;code&gt;web&lt;/code&gt; directory run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add truffle truffle-contract web3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us everything we need for the smart contract.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-truffle-project"&gt;
  &lt;/a&gt;
  Initializing the Truffle project
&lt;/h2&gt;

&lt;p&gt;Now run the following in the &lt;code&gt;web&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn truffle init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create an initial migration and the smart contract for it in the &lt;code&gt;web&lt;/code&gt; directory. Now we'll jump straight into some code since we have everything set up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-smart-contract"&gt;
  &lt;/a&gt;
  Writing the smart contract
&lt;/h2&gt;

&lt;p&gt;Inside the &lt;code&gt;web &amp;gt; contracts&lt;/code&gt; directory, add a new file called &lt;code&gt;VideoList.sol&lt;/code&gt;. This is where we'll write some &lt;a href="https://docs.soliditylang.org/en/v0.8.7/"&gt;Solidity&lt;/a&gt; code to define the rules for this contract. It looks very similar to JavaScript, but it's not the same language. Copy and paste the following code into this new file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.5.0;

contract VideoList {
  uint public videoCount = 0;

  struct Video {
    uint id;
    string url;
  }

  mapping(uint =&amp;gt; Video) public videos;

  constructor() public {
    createVideo("https://res.cloudinary.com/milecia/video/upload/c_pad,h_360,w_480,q_70,du_10/elephant_herd.mp4");
  }

  function createVideo(string memory _content) public {
    videoCount ++;
    videos[videoCount] = Video(videoCount, _content);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's walk through what happened here. We start by defining the version of Solidity we want to work with. Then we create the definition for the contract. In this example, the contract is called &lt;code&gt;VideoList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the contract, we have a publically exposed &lt;code&gt;videoCount&lt;/code&gt; variable that holds how many videos have been added to the blockchain.&lt;/p&gt;

&lt;p&gt;Next, there's a &lt;code&gt;struct&lt;/code&gt; that defines a &lt;code&gt;Video&lt;/code&gt; record. It has an integer &lt;code&gt;id&lt;/code&gt; value and a string &lt;code&gt;url&lt;/code&gt; value. Then we map all of the videos into a public &lt;code&gt;videos&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;constructor&lt;/code&gt;, we add a default video to the blockchain when the smart contract is deployed. Lastly, we have a function that will let us add new videos to the blockchain.&lt;/p&gt;

&lt;p&gt;This is the whole smart contract! All that's left to do is create a migration for it and deploy it to the local blockchain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrations-and-deploys"&gt;
  &lt;/a&gt;
  Migrations and deploys
&lt;/h3&gt;

&lt;p&gt;Before we actually do the migration and deploy, there's a little config file we need to add. In the &lt;code&gt;web&lt;/code&gt; directory, add a new file called &lt;code&gt;truffle-config.js&lt;/code&gt;. Inside the file, paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7545&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;network_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// so it can match any network id&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;solc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we connect to the local Ethereum blockchain that's running through Ganache. These are the default values in Ganache and you can see them directly in the app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDzeSsxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510091/e-603fc55d218a650069f5228b/brte8mdkajhzmtcgvzkq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDzeSsxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510091/e-603fc55d218a650069f5228b/brte8mdkajhzmtcgvzkq.png" alt="Ganache configs" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we'll need to add a new migration file to the &lt;code&gt;migrations&lt;/code&gt; folder. Create a new migration file called &lt;code&gt;2_deploy_contracts.js&lt;/code&gt;. We put the number at the beginning of the migration file so the network knows which order they should be run in.&lt;/p&gt;

&lt;p&gt;Open this file and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VideoList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./VideoList.sol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deployer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;deployer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VideoList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we deploy the &lt;code&gt;VideoList&lt;/code&gt; smart contract we created.&lt;/p&gt;

&lt;p&gt;With this in place, we can run the migration for the smart contract. In the &lt;code&gt;web&lt;/code&gt; directory, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;truffle migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see that the migration has run successfully. Now let's take a look at the smart contract in the Truffle console. We'll need the address of the smart contract for a later part of this article, so let's grab it while we're here.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;web&lt;/code&gt; directory, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;truffle console
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should bring you to an instance of the smart contract we deployed with the migration. Let's run so code in the console to get an instance of the contract with a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;videoList &lt;span class="o"&gt;=&lt;/span&gt; await VideoList.deployed&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have to interact with the blockchain in an async manner, that's why we're using the &lt;code&gt;await&lt;/code&gt; keyword in the Truffle console. Now let's get the address for this contract because we'll need it in the DApp.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;videoList.address
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should return a string similiar to this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0x82293fe0BE6cCbA6Eb9bd6d5824fC6ACeB6d3957&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since we have the smart contract built and deployed, we can turn our attention to the DApp which uses the data from the blockchain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-on-the-frontend"&gt;
  &lt;/a&gt;
  Working on the front-end
&lt;/h2&gt;

&lt;p&gt;We'll take advantage of a Redwood command to get started on the front-end. We need a page that lets users interact with the DApp. Leave the &lt;code&gt;web&lt;/code&gt; directory and go to the project root in the terminal and run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g page dapp /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate the page component, a Storybook component for the page, and a test for the page. It'll also add the route for this new page to the &lt;code&gt;Routes.tsx&lt;/code&gt; file. Since we added the &lt;code&gt;/&lt;/code&gt; in the generate command above, it makes this new page the root page for the app.&lt;/p&gt;

&lt;p&gt;Back in the &lt;code&gt;web&lt;/code&gt; directory, take a look inside &lt;code&gt;src &amp;gt; pages &amp;gt; DappPage&lt;/code&gt;. This has all the files we talked about. Our focus will be on &lt;code&gt;DappPage.tsx&lt;/code&gt;. Open this file and delete everything out of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-to-the-ethereum-blockchain-with-web3js"&gt;
  &lt;/a&gt;
  Connecting to the Ethereum blockchain with Web3.js
&lt;/h3&gt;

&lt;p&gt;The first thing we need to do is make a new file called &lt;code&gt;config.tsx&lt;/code&gt; in the &lt;code&gt;web &amp;gt; src&lt;/code&gt; directory. This is where we'll add some config values that let the front-end connect to the blockchain network we have running with Ganache.&lt;/p&gt;

&lt;p&gt;Remember that address we got for our smart contract earlier? It's ok if you don't. All you have to do is open a terminal in the &lt;code&gt;web&lt;/code&gt; directory and run the following commands to get that address again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;truffle console
videoList &lt;span class="o"&gt;=&lt;/span&gt; await VideoList.deployed&lt;span class="o"&gt;()&lt;/span&gt;
videoList.address
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;config.tsx&lt;/code&gt; file, add the following line with your own smart contract address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VIDEO_LIST_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0x82293fe0BE6cCbA6Eb9bd6d5824fC6ACeB6d3957&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you'll have to get an array of values for the ABI of the smart contract. This describes the smart contract behavior and functionality to the front-end. You'll find this in &lt;code&gt;web &amp;gt; build &amp;gt; contracts &amp;gt; VideoList.json&lt;/code&gt;. In the json file, you'll see a key-value pair named &lt;code&gt;"abi"&lt;/code&gt;. Copy that whole array and add the following code to &lt;code&gt;config.tsx&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VIDEO_LIST_ABI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;videoCount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uint256&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;payable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stateMutability&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signature&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0xc61b5f4c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uint256&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;videos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uint256&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;payable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stateMutability&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signature&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0xe6821bf5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;payable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stateMutability&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nonpayable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constructor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signature&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constructor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createVideo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;payable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stateMutability&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nonpayable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signature&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0x8e878969&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this config file in place, let's import a few things in &lt;code&gt;DappPage.tsx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VIDEO_LIST_ABI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;VIDEO_LIST_ADDRESS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's build the &lt;code&gt;DappPage&lt;/code&gt; component. We'll start with just the outline of the component and a few states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DappPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAccount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;videoList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVideoList&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;videos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVideos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll call the function that will connect to the Ethereum network. We're using the &lt;code&gt;useEffect&lt;/code&gt; hook here because we only want this to happen when the page initially loads. So right below the states we defined, add this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's jump into writing the &lt;code&gt;loadData&lt;/code&gt; method. This is where we'll actually connect to the network and read data from the blockchain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:7545&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;setAccount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;videoList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VIDEO_LIST_ABI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;VIDEO_LIST_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setVideoList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;videoList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;videoCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;videoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoCount&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;videoCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;videoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;setVideos&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;videos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an async function because we want to wait for the blockchain to handle the request. We make a new instance of &lt;code&gt;Web3&lt;/code&gt; that connects to the local Ethereum blockchain we have running. Then we get the accounts associated with this blockchain and grab the first one. We'll need this a little later.&lt;/p&gt;

&lt;p&gt;Next, we pass in the config values we wrote earlier to interact with the smart contract. We're getting the &lt;code&gt;videoList&lt;/code&gt; contract and fetching the &lt;code&gt;videoCount&lt;/code&gt; to see how many videos are available.&lt;/p&gt;

&lt;p&gt;Then we loop through all of the videos in the blockchain and save them to the app's state.&lt;/p&gt;

&lt;p&gt;Now we can return a view to the page that displays the smart contract id and the videos we've fetched from the blockchain. Right below the &lt;code&gt;loadData&lt;/code&gt; method, add the following return statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Dapp&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;videoList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;videos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/video&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go to the root of the project in a terminal and run &lt;code&gt;yarn rw dev&lt;/code&gt;, you should see something similar to this in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBHbQNQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510132/e-603fc55d218a650069f5228b/p3ofurjfeeixmqensrcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBHbQNQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510132/e-603fc55d218a650069f5228b/p3ofurjfeeixmqensrcz.png" alt="Dapp page" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You've officially connected an app to an Ethereum blockchain using a smart contract you wrote! All that's left is adding a way for users to add new videos to the blockchain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-videos-to-the-blockchain"&gt;
  &lt;/a&gt;
  Adding the videos to the blockchain
&lt;/h2&gt;

&lt;p&gt;For the last bit of functionality, we'll use the Cloudinary upload widget to add videos directly to the blockchain.&lt;/p&gt;

&lt;p&gt;We need to add the &lt;code&gt;react-cloudinary-upload-widget&lt;/code&gt; package in a terminal in the &lt;code&gt;web&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react-cloudinary-upload-widget
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll add another import line to &lt;code&gt;DappPage.tsx&lt;/code&gt; below the others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;WidgetLoader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Widget&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-cloudinary-upload-widget&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can write the function to add a video to the blockchain. After the &lt;code&gt;loadData&lt;/code&gt; function, add this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createVideo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;videoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createVideo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4712388&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;receipt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;receipt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;receipt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we use the &lt;code&gt;createVideo&lt;/code&gt; method we defined in the smart contract. One thing to note is that we need to send a certain amount of gas with this request. The amount of gas you have is tied to the account you're connected with. Each transaction in a smart contract has a gas price, but since we didn't change any default values &lt;code&gt;4712388&lt;/code&gt; is what the contract expects as a gas payment.&lt;/p&gt;

&lt;p&gt;Now we'll define the callback that will give us a response from Cloudinary when the video has successfully uploaded. Right below the &lt;code&gt;createVideo&lt;/code&gt; function we just wrote, add this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;successCallBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;videoInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;videoInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;

  &lt;span class="nx"&gt;createVideo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be called in the &lt;code&gt;Widget&lt;/code&gt; when we get a success response from Cloudinary. It'll take the URL from Cloudinary and add it to the blockchain. That means it's finally time to add that widget to the return statement. Below the line that displays the account id, add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;WidgetLoader&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Widget&lt;/span&gt;
  &lt;span class="nx"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;camera&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
  &lt;span class="nx"&gt;cloudName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test_name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;uploadPreset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fwe9ewffw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;120px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;25px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;successCallBack&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we connect to Cloudinary and get URLs for videos we upload. You'll need to log in to your Cloudinary account and get the &lt;code&gt;cloudName&lt;/code&gt; and &lt;code&gt;uploadPreset&lt;/code&gt; name from the dashboard. Now you should see a new "Open" button in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twOXy5vU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510164/e-603fc55d218a650069f5228b/he28v1wwslpygya3uytu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twOXy5vU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510164/e-603fc55d218a650069f5228b/he28v1wwslpygya3uytu.png" alt="video upload button" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click that button, you'll see the upload widget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwATudZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510177/e-603fc55d218a650069f5228b/fvjvv1yc6ayxgvxkghxc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwATudZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510177/e-603fc55d218a650069f5228b/fvjvv1yc6ayxgvxkghxc.png" alt="upload widget" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and upload a new video and then reload the page. You should see your new video similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mlplb4UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510196/e-603fc55d218a650069f5228b/y7zpztupp57f2jy3s2yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlplb4UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1629510196/e-603fc55d218a650069f5228b/y7zpztupp57f2jy3s2yk.png" alt="second video" width="880" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have a fully functioning DApp now! Feel free to add more functionality to the smart contract!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finished-code"&gt;
  &lt;/a&gt;
  Finished code
&lt;/h2&gt;

&lt;p&gt;You can check out some of the code in &lt;a href="https://codesandbox.io/s/quizzical-frog-cw0sh"&gt;this Code Sandbox&lt;/a&gt; or clone the project from the &lt;code&gt;user-dapp&lt;/code&gt; folder of &lt;a href="https://github.com/flippedcoder/blog-examples/tree/main/user-dapp"&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;DApps are a cool way to interact with blockchains. Some good next steps would be learning more about Solidity and smart contracts or just making more DApps with other frameworks!&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
