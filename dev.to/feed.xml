<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Talk Notes: 'The Rising Storm of Ethics in Open Source' (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Thu, 15 Apr 2021 15:26:06 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-the-rising-storm-of-ethics-in-open-source-railsconf-2021-b3c</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-the-rising-storm-of-ethics-in-open-source-railsconf-2021-b3c</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk:&lt;/strong&gt; 'The Rising Storm of Ethics in Open Source' by &lt;a href="https://twitter.com/CoralineAda"&gt;Coraline Ada Ehmke&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ If you can't watch the talk, read Coraline's article: &lt;em&gt;&lt;a href="https://modelviewculture.com/pieces/a-six-month-retrospective-on-ethical-open-source"&gt;A Six-Month Retrospective on Ethical Open Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: The increased debate around ethical source threatens to divide the OSS community. In his book "The Structure of Scientific Revolutions", philosopher Thomas Kuhn posits that there are three possible solutions to a crisis like the one we're facing: procrastination, assimilation, or revolution. Which will we choose as we prepare for the hard work of reconciling ethics and open source?&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;: YES. This is the talk we need to hear over and over and over again, and which should become a staple in developer education. Coraline is an AMAZING speaker (knowledgeable, concise, direct, charismatic) and her expertise is mind-blowing. Please do watch the talk.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-the-speaker"&gt;About the speaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-notes"&gt;Side notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#about-the-speaker"&gt;
  &lt;/a&gt;
  About the speaker
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Coraline_Ada_Ehmke"&gt;Coraline Ada Ehmke&lt;/a&gt; is a gem:

&lt;ul&gt;
&lt;li&gt;fought for codes of conduct at tech conferences, &lt;/li&gt;
&lt;li&gt;created &lt;a href="https://www.contributor-covenant.org/"&gt;Contributor Covenant&lt;/a&gt; (the first and most popular CoC for OS communities), &lt;/li&gt;
&lt;li&gt;received &lt;a href="https://rubyheroes.com/"&gt;Ruby Hero award&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;spoke at UN forum, &lt;/li&gt;
&lt;li&gt;authored the &lt;a href="https://firstdonoharm.dev/"&gt;Hippocratic License&lt;/a&gt;, and &lt;/li&gt;
&lt;li&gt;founded the &lt;a href="https://ethicalsource.dev/"&gt;Organization for Ethical Source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Christine Peterson &lt;a href="https://opensource.com/article/18/2/coining-term-open-source-software"&gt;coined the term 'Open Source'&lt;/a&gt; in 1998 and Bruce Perens wrote its definition&lt;/li&gt;
&lt;li&gt;In 1998, the &lt;a href="https://opensource.org/"&gt;Open Source Initiative&lt;/a&gt; was founded&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS is nowadays used to violate human rights, and &lt;a href="https://opensource.org/faq#evil"&gt;it is a feature, not a bug&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Can I stop "evil people" from using my program?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No. The Open Source Definition specifies that Open Source licenses may not discriminate against persons or groups. Giving everyone freedom means giving evil people freedom, too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"But under what other circumstances, in human society, do we grant complete freedom to evil people? Why is it different with software?" &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fundamental question&lt;/strong&gt;: "Are we responsible for how the technologies we develop are used?"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OS is used to suppress protests, to increase surveillance, etc. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ethical qs in tech are not new: &lt;a href="https://en.wikipedia.org/wiki/Edmund_Berkeley"&gt;Edmund Berkeley&lt;/a&gt; (one of the pioneers on computer engineering) cofounded the Association for Computing Machinery (ACM) with the mission of "...serving public interests by fostering the open interchange of information and by promoting the highest professional and &lt;strong&gt;ethical&lt;/strong&gt; standards"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in 1958 Berkeley sat on the Committee of the Social Responsibility of Computer Scientists, which published a foundational report on the ethical responsibilities of technologists, and the findings of the report boiled down to four statements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"They cannot rightly &lt;strong&gt;ignore&lt;/strong&gt; their social responsibilities"&lt;/li&gt;
&lt;li&gt;"They cannot rightly &lt;strong&gt;delegate&lt;/strong&gt; their social responsibilities"&lt;/li&gt;
&lt;li&gt;"They cannot rightly &lt;strong&gt;neglect to think about how their special role can benefit or harm society&lt;/strong&gt;" (or, we have to consider how our special capacities can help to advance socially desirable applications and prevent undesirable outcomes)&lt;/li&gt;
&lt;li&gt;"They cannot &lt;strong&gt;avoid deciding between conflicting responsibilities&lt;/strong&gt;" (we must think how to choose)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The scientists concluded: "The scientists' credo &lt;em&gt;knowledge for the sake of knowledge's sake&lt;/em&gt; easily comes into conflict with our ethical responsibilities" (even if there's a large middle ground between what's socially desirable and undesirable, the undesirable part should not be enabled through our tech)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;1972 the Vietnam War was waging when Berkley delivered a talk at a 25th-anniversary dinner of the ACM:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;he said that anyone who works on technology for unethical goals should quit their jobs (he even called the audience members by their names to a great public upset; admiral Grace Hopper was among those who left the room); &lt;/li&gt;
&lt;li&gt;he concluded the talk by saying it was "gross neglect of responsibility that computer scientists were not considering their impact in terms of societal benefit or societal harm"&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"How would we feel about the complicity of the IBM in the Holocaust, if their punch card system was released under the MIT license?" &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Melvin Kranzberg (tech historian): "Technology is neither good nor bad; nor is it neutral"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;prof. Lila Green: "When technology is implicated in social processes, there is nothing neutral about technology" ("Framing Technology: Society, Choice and Change")&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;"MINASWAN isn't an ethical framework"&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;It's time for us to go beyond "nice". Frankly, I'm sick of "nice". Nice is meaningless if we're not just. Nice is meaningless if we are not equitable. We can't keep using "nice" as a shield that we hide behind ignoring our impact.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side notes:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;No chemical manufacturer in the US will produce a solution that's used for death by lethal injections. &lt;/li&gt;
&lt;li&gt;The &lt;a href="https://archive.nytimes.com/www.nytimes.com/books/first/b/black-ibm.html?_r=1"&gt;IBM was complicit in the Holocaust&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;in 1998 the greatest conceivable evil that can be borne out of software was market domination by Microsoft&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Coraline_Ada_Ehmke"&gt;Coraline Ada Ehmke&lt;/a&gt; (bio)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://modelviewculture.com/pieces/a-six-month-retrospective-on-ethical-open-source"&gt;A Six-Month Retrospective on Ethical Open Source&lt;/a&gt; by Coraline Ada Ehmke&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.contributor-covenant.org/"&gt;Contributor Covenant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://firstdonoharm.dev/"&gt;Hippocratic License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ethicalsource.dev/"&gt;Organization for Ethical Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icebreaker.dev/"&gt;ICE breaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.org/"&gt;Open Source Initiative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to Deploy your Node.JS Website to Heroku</title>
      <author>Rithik Samanthula</author>
      <pubDate>Thu, 15 Apr 2021 15:07:48 +0000</pubDate>
      <link>https://dev.to/code2rithik/how-to-deploy-your-node-js-website-to-heroku-3j4p</link>
      <guid>https://dev.to/code2rithik/how-to-deploy-your-node-js-website-to-heroku-3j4p</guid>
      <description>&lt;p&gt;Want to deploy your website to Heroku?&lt;/p&gt;

&lt;p&gt;Here are the steps to do exactly that:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Node.js and npm installed.&lt;/li&gt;
&lt;li&gt;An existing Node.js app.&lt;/li&gt;
&lt;li&gt;A free Heroku account.&lt;/li&gt;
&lt;li&gt;Having a Node.JS version higher than Version 8&lt;/li&gt;
&lt;li&gt;Having NPM Installed. It is installed with Node so don't worry :)&lt;/li&gt;
&lt;li&gt;Having Git Installed&lt;/li&gt;
&lt;li&gt;Be in your current project directory in the CLI. If not, use &lt;code&gt;cd yourProject&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming that you have already done that, let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-downloading-heroku"&gt;
  &lt;/a&gt;
  1. Downloading Heroku.
&lt;/h1&gt;

&lt;p&gt;Download Heroku for your Operating system from &lt;a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, if you are on a macbook, use the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install heroku/brew/heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#2-login-with-heroku"&gt;
  &lt;/a&gt;
  2. Login with Heroku
&lt;/h1&gt;

&lt;p&gt;Once you are done installing heroku, you the command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;to connect your heroku account with the CLI.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-changing-the-port"&gt;
  &lt;/a&gt;
  3. Changing the Port
&lt;/h1&gt;

&lt;p&gt;Currently, your project is on a local server. But we don't want that to happen. Since we are deploying it to heroku, add this code to your Node.JS app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Listening to port 3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you want it to listen at Port 3000 as well as heroku's servers, replace the code with this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Listening to port 3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#4-creating-a-procfile"&gt;
  &lt;/a&gt;
  4. Creating a Procfile
&lt;/h1&gt;

&lt;p&gt;Now, we need to define a Procfile&lt;/p&gt;

&lt;p&gt;This is the file that heroku is going to check to see how to launch your app.&lt;/p&gt;

&lt;p&gt;Create a Procfile &lt;strong&gt;without&lt;/strong&gt; Any extensions like &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.rtf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The name should only be "Procfile".&lt;/p&gt;

&lt;p&gt;In your procfile add this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;yourJsFileName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#5-initialize-git-and-github"&gt;
  &lt;/a&gt;
  5. Initialize Git and GitHub
&lt;/h1&gt;

&lt;p&gt;Next, use the command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It will initialize an empty git repository for you&lt;/p&gt;

&lt;p&gt;Then, use:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, to commit your changes, use:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Your Message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#6-deploying-your-app"&gt;
  &lt;/a&gt;
  6. Deploying your App
&lt;/h1&gt;

&lt;p&gt;The next step is to deploy your app to heroku.&lt;/p&gt;

&lt;p&gt;Next use the command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku create
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To create a new heroku project.&lt;/p&gt;

&lt;p&gt;Then, it will give you a link to visit your website. For now, it will only Display: "Heroku | Welcome to your New App!" Don't worry as this is a regular part of the process.&lt;/p&gt;

&lt;p&gt;Now, to deploy your code, use the command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will push our local version that's been stored using git to heroku.&lt;/p&gt;

&lt;p&gt;It will take a couple of minutes to complete the process.&lt;/p&gt;

&lt;p&gt;As a success message, it should show you&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;remote: Verifying deploy...done.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, refresh the link that they showed you previously and VOILA your content displays. If this happened, then give yourself a pat on the back.&lt;/p&gt;

&lt;p&gt;If you get an error like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSFNtUn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrkuzwuyisfm4pfjgitf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSFNtUn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrkuzwuyisfm4pfjgitf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not to worry!&lt;/p&gt;

&lt;p&gt;This means that the website is still taking some time to upload. Try after some time. Then, you will see your Node.JS website up and LIVE!&lt;/p&gt;

&lt;p&gt;Thank You For reading this blog.&lt;/p&gt;

&lt;p&gt;If you want to deploy your website on other platforms, check out the different blogs in this series:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/code2rithik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJQFkaLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GFKV3RMj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571318/596c73a4-b890-49d7-b0fb-5eb141aafd91.png" alt="code2rithik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/code2rithik/how-to-deploy-your-website-using-github-pages-34hc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Deploy your Website using GitHub Pages&lt;/h2&gt;
      &lt;h3&gt;Rithik Samanthula ・ Feb  5 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#githubpages&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hosting&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/code2rithik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJQFkaLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GFKV3RMj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571318/596c73a4-b890-49d7-b0fb-5eb141aafd91.png" alt="code2rithik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/code2rithik/how-to-deploy-your-website-using-vercel-4499" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Deploy your Website using Vercel&lt;/h2&gt;
      &lt;h3&gt;Rithik Samanthula ・ Feb 17 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#deploy&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vercel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/code2rithik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJQFkaLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GFKV3RMj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571318/596c73a4-b890-49d7-b0fb-5eb141aafd91.png" alt="code2rithik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/code2rithik/how-to-deploy-your-website-to-netlify-2f1e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to deploy your website to Netlify&lt;/h2&gt;
      &lt;h3&gt;Rithik Samanthula ・ Mar 12 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#netlify&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#deploy&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you liked it then do it share it with your friends and remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>heroku</category>
      <category>deploy</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Zip Pdf Files And Download In Laravel</title>
      <author>Ajay Yadav</author>
      <pubDate>Thu, 15 Apr 2021 15:06:18 +0000</pubDate>
      <link>https://dev.to/ajayyadav/zip-pdf-files-and-download-in-laravel-53g0</link>
      <guid>https://dev.to/ajayyadav/zip-pdf-files-and-download-in-laravel-53g0</guid>
      <description>&lt;p&gt;In this post we'll see how to create a zip file and download it in laravel.&lt;br&gt;
Let's start&lt;br&gt;
create a controller&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="nc"&gt;InvoiceController&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open InvoiceController and create a method &lt;strong&gt;downloadZip()&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;downloadZip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$zip_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'invoices.zip'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;ZipArchive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$zip_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;ZipArchive&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CREATE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;ZipArchive&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;OVERWRITE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;storage_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'invoices'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// path to your pdf files&lt;/span&gt;
        &lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;RecursiveIteratorIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;RecursiveDirectoryIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// We're skipping all subfolders&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;isDir&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$filePath&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRealPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="c1"&gt;// extracting filename with substr/strlen&lt;/span&gt;
                &lt;span class="nv"&gt;$relativePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'invoices/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$relativePath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'application/octet-stream'&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
        &lt;span class="nv"&gt;$zip_new_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Invoice-"&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"y-m-d-h-i-s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;".zip"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$zip_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$zip_new_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$headers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using &lt;strong&gt;ZipArchive()&lt;/strong&gt; class , you can read more about this on this &lt;a href="https://www.php.net/manual/en/class.ziparchive.php"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now create a route, open &lt;strong&gt;web.php&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//web.php&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Controllers\InvoiceController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/invoice-download'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="nc"&gt;InvoiceController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'downloadZip'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all... 🤗&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 Best Python Libraries for Machine Learning Every Developer Should Know</title>
      <author>Ashish Yadav</author>
      <pubDate>Thu, 15 Apr 2021 14:59:31 +0000</pubDate>
      <link>https://dev.to/expoashish/10-best-python-libraries-for-machine-learning-every-developer-should-know-120j</link>
      <guid>https://dev.to/expoashish/10-best-python-libraries-for-machine-learning-every-developer-should-know-120j</guid>
      <description>&lt;p&gt;For more information visit &lt;a href="https://dev.to%5BI'm%20an%20inline%20link%5D(put-link-here)"&gt;My Blogs&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-numpy"&gt;
  &lt;/a&gt;
  1. NumPy
&lt;/h2&gt;

&lt;p&gt;NumPy is a very popular python library for large multi-dimensional array and matrix processing, with the help of a large collection of high-level mathematical functions. It is very useful for fundamental scientific computations in Machine Learning. Almost all Python machine-learning packages like Mat-plotlib, SciPy, Scikit-learn, etc rely on this library to a reasonable extent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-scipy"&gt;
  &lt;/a&gt;
  2. SciPy
&lt;/h2&gt;

&lt;p&gt;SciPy is a popular python library for machine learning which stand for Scientific Python. SciPy in Python is an open-source library used for solving mathematical, scientific, engineering, and technical problems. It allows users to manipulate the data and visualize the data using a wide range of high-level Python commands. SciPy is built on the Python NumPy extention. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-scikitlearn"&gt;
  &lt;/a&gt;
  3. Scikit-learn
&lt;/h2&gt;

&lt;p&gt;Sklearn, short for scikit-learn, is a Python library for building machine learning models. Scikit-learn is among the most popular open-source machine learning libraries in the world for classical ML algorithms. It is built on top of two basic Python libraries, viz., NumPy and SciPy.Scikit-learn supports most of the supervised and unsupervised learning algorithms. Scikit-learn can also be used for data-mining and data-analysis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-theano33"&gt;
  &lt;/a&gt;
  4. Theano33
&lt;/h2&gt;

&lt;p&gt;Theano is a python machine learning library that is used to define, evaluate and optimize mathematical expressions involving multi-dimensional arrays in an efficient manner. Theano can work on Graphics Processing Unit (GPU) and CPU.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-tensor-flow"&gt;
  &lt;/a&gt;
  5. Tensor Flow
&lt;/h2&gt;

&lt;p&gt;TensorFlow is a very popular open-source library for high performance numerical computation developed by the Google Brain team in Google. TensorFlow is an end-to-end python machine learning library for performing high-end numerical computations. TensorFlow can handle deep neural networks for image recognition, handwritten digit classification, recurrent neural networks, NLP (Natural Language Processing), word embedding and PDE (Partial Differential Equation).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-keras"&gt;
  &lt;/a&gt;
  6. Keras
&lt;/h2&gt;

&lt;p&gt;Keras is a very popular Machine Learning library for Python. It is a high-level neural networks API capable of running on top of TensorFlow, CNTK, or Theano. Keras makes it simple for machine learning beginners to design and develop a neural network. Keras Python also deals with convolution neural networks. It includes algorithms for normalization, optimizer, and activation layers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-pytorch"&gt;
  &lt;/a&gt;
  7. PyTorch
&lt;/h2&gt;

&lt;p&gt;PyTorch is a production-ready Python machine-learning library with excellent examples, applications and use cases supported by a strong community. It has an extensive choice of tools and libraries that supports on Computer Vision, Natural Language Processing(NLP) and many more ML programs. PyTorch can smoothly integrate with the python data science stack, including NumPy. You will hardly make out a difference between NumPy and PyTorch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-pandas"&gt;
  &lt;/a&gt;
  8. Pandas
&lt;/h2&gt;

&lt;p&gt;Pandas is a popular Python library for data analysis. It is not directly related to Machine Learning. Python Pandas comes with several inbuilt methods for combining data, and grouping &amp;amp; filtering time-series functionality. Overall, Pandas is not just limited to handle data-related tasks; it serves as the best starting point to create more focused and powerful data tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-matplotlib"&gt;
  &lt;/a&gt;
  9. Matplotlib
&lt;/h2&gt;

&lt;p&gt;Matpoltlib is a very popular Python library for data visualization. Like Pandas, it is not directly related to Machine Learning. It particularly comes in handy when a programmer wants to visualize the patterns in the data. It is a 2D plotting library used for creating 2D graphs and plots.  It works by using standard GUI toolkits like GTK+, wxPython, Tkinter, or Qt to provide an object-oriented API that helps programmers to embed graphs and plots into their applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-seaborn-python"&gt;
  &lt;/a&gt;
  10. Seaborn Python
&lt;/h2&gt;

&lt;p&gt;Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics. The functionalities of Seaborn go beyond Python Pandas and matplotlib with the features to perform statistical estimation at the time of combining data across observations, plotting and visualizing the suitability of statistical models to strengthen dataset patterns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-youtube-channel-please-support-me"&gt;
  &lt;/a&gt;
  My Youtube Channel Please support me:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://youtu.be/4pdBhJns2nM"&gt;Top 10 Technologies to Learn in 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/IZHQypmB0iY"&gt;Top 10 Programming Languages to Learn in 2021&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-blogs"&gt;
  &lt;/a&gt;
  My Blogs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://expoashish.blogspot.com/"&gt;please check it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankyou🤗&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>So yea, xent, xent future, are both worthless.</title>
      <author>Jonyk56</author>
      <pubDate>Thu, 15 Apr 2021 14:50:33 +0000</pubDate>
      <link>https://dev.to/jonyk56/so-yea-xent-xent-future-are-both-worthless-3pcp</link>
      <guid>https://dev.to/jonyk56/so-yea-xent-xent-future-are-both-worthless-3pcp</guid>
      <description>&lt;p&gt;if you have been watching my github page, you know I've been inactive for quite a long time, during that period, team donut was disbanded and xent was no more. but well, who said I was done coding???? nah, we doing this again folks. BUT, this time the code will be better, this time the language will work properly, this time xent won't be such a nightmare to use.&lt;/p&gt;

&lt;p&gt;That's right, xent is getting an upgrade, and a new name.&lt;br&gt;
xent.fx, github wouldn't let me name it that for some weird reason, But moving on! &lt;/p&gt;

&lt;p&gt;xent.fx has some drastic changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the entire language is being reworked, it will no longer be so strange in terms of syntax.&lt;/li&gt;
&lt;li&gt;plugins will actually be useful.&lt;/li&gt;
&lt;li&gt;macros will be useful aswell.&lt;/li&gt;
&lt;li&gt;variables will be added.&lt;/li&gt;
&lt;li&gt;arrays will be PLANNED.&lt;/li&gt;
&lt;li&gt;conditions and expressions will be added. &lt;/li&gt;
&lt;li&gt;It's now going to be coded in c++&lt;/li&gt;
&lt;li&gt;Literally everything else is being removed that was previously in xent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;now, onto some information about xent.fx that isn't ( not ) related to the changes mentioned above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have an example of what the code would look like once the first official release is completed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@use[core] %% import core module

cspace _[] { %% declare main code-space, or where the code will run
  core#log["like my example?"] %% it's just console.log in javascript...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;er yea... that's all i can show for right now, Absolutely none of the code has been written yet. BUT i do need some help, since team donut is no longer around, i do not have a team that could help me. if anyone would like to help with the project, please dm me on discord ( Jonyk56#1929 ).&lt;/p&gt;

&lt;p&gt;Moving on, have a nice rest of your week, and lets look forward to summer! &lt;/p&gt;

</description>
    </item>
    <item>
      <title>A Chat Progressive Web App</title>
      <author>aladinyo</author>
      <pubDate>Thu, 15 Apr 2021 14:42:24 +0000</pubDate>
      <link>https://dev.to/aladinyo/a-chat-progressive-web-app-50ac</link>
      <guid>https://dev.to/aladinyo/a-chat-progressive-web-app-50ac</guid>
      <description>&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;I made a chat progressive web application with React, NodeJS and firebase, it comes with a lot of features like push notifications.&lt;/p&gt;

&lt;p&gt;Follow the link and search for my name "alaa" and chat with me.&lt;/p&gt;

&lt;p&gt;The app is very well explained in the github repository.&lt;/p&gt;

&lt;p&gt;Don't forget to ALLOW NOTIFICATIONS when you use the app.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://whatsappy-app.web.app/"&gt;https://whatsappy-app.web.app/&lt;/a&gt; ALLOW NOTIFICATIONS !!!&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/aladinyo/WhatsappyApp"&gt;https://github.com/aladinyo/WhatsappyApp&lt;/a&gt; &lt;br&gt;
GIVE ME A STAAR ⭐⭐⭐!!!&lt;/p&gt;

&lt;p&gt;Let's discuss the app in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sa85wJWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le29fztuzhb1cs7zcr82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sa85wJWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/le29fztuzhb1cs7zcr82.png" width="600"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g28XApQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1j3l7gii7qiyq56dd28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g28XApQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1j3l7gii7qiyq56dd28.png" width="600"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmwXfdN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n65p3ebnyotcux9i77n7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmwXfdN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n65p3ebnyotcux9i77n7.png" width="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features-of-the-app"&gt;
  &lt;/a&gt;
  Features of the app
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Messaging users in real time.&lt;/li&gt;
&lt;li&gt;You can text messages.&lt;/li&gt;
&lt;li&gt;You can send Images.&lt;/li&gt;
&lt;li&gt;You can send an audio message.&lt;/li&gt;
&lt;li&gt;You click on an image sent in a chat and it will smoothly animate to the center so you can see it.&lt;/li&gt;
&lt;li&gt;You can see if the user is typing or recording.&lt;/li&gt;
&lt;li&gt;You can record an audio and send it.&lt;/li&gt;
&lt;li&gt;You can delete the conversation.&lt;/li&gt;
&lt;li&gt;You can search for users.&lt;/li&gt;
&lt;li&gt;You can see the online status of users.&lt;/li&gt;
&lt;li&gt;You can see the unread messages.&lt;/li&gt;
&lt;li&gt;You will have a seen at the bottom if the user saw your message.&lt;/li&gt;
&lt;li&gt;You have an arrow button that allows you to scroll down the chat you also see the unread messages in it.&lt;/li&gt;
&lt;li&gt;The audio slider is grey when you send an audio message and is green when you receive one and becomes blue if the receiver plays the audio.&lt;/li&gt;
&lt;li&gt;The audio player allows you to see the full time of the audio and if you play it you will see the current time.&lt;/li&gt;
&lt;li&gt;You can receive notifications if a user sent you a message.&lt;/li&gt;
&lt;li&gt;A sound is played when you send a message or receive one in a conversation.&lt;/li&gt;
&lt;li&gt;Another sound is played if you receive a message from another user.&lt;/li&gt;
&lt;li&gt;The app works offline you can use it without internet and you can send text messages only when you come back online they will be automatically sent.&lt;/li&gt;
&lt;li&gt;Finally you can click on the arrow down button at the home page and the web app is installed in your device.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>pwa</category>
      <category>node</category>
    </item>
    <item>
      <title>Amazing button hover with CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Thu, 15 Apr 2021 14:38:59 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-button-hover-with-css-5egi</link>
      <guid>https://dev.to/nikhil27b/amazing-button-hover-with-css-5egi</guid>
      <description>&lt;p&gt;Hello, today I created an Amazing button hover Using HTML &amp;amp; CSS. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/OJWEbXW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Selenium Java (Implicit &amp; Explicit) Waits</title>
      <author>Anne Quinkenstein</author>
      <pubDate>Thu, 15 Apr 2021 14:34:29 +0000</pubDate>
      <link>https://dev.to/annequinkenstein/selenium-java-waits-22b3</link>
      <guid>https://dev.to/annequinkenstein/selenium-java-waits-22b3</guid>
      <description>&lt;p&gt;If you enter Websites, you usually wait a few seconds if you see the information. If click, based on your input, which first goes to the backend, you see changes. You have to wait till the changes are done. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implicit-wait-globally-declared"&gt;
  &lt;/a&gt;
  Implicit Wait - globally declared
&lt;/h2&gt;

&lt;p&gt;Declare globaly: &lt;br&gt;
"Hey Selenium, wait for n number of seconds before you throw exceptions!"&lt;br&gt;
It listens to your DOM, if it displayed it will keep on. &lt;br&gt;
n is the maximum time Limit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;timeouts&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;implicitlyWait&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;limeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SECONDS&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explicit-wait-targets-a-specific-scenario"&gt;
  &lt;/a&gt;
  Explicit Wait - targets a specific scenario
&lt;/h2&gt;

&lt;p&gt;Imagine a search Button. When you search a large amount of targets, it takes, sets say 15 seconds to load. &lt;br&gt;
Otherwise the Application should load faster. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#webdriverwait"&gt;
  &lt;/a&gt;
  WebDriverWait
&lt;/h3&gt;

&lt;p&gt;Continuisly listen to DOM as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;WebDriverWait&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;WebDriverWait&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;until&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ExpectedConditions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visibilityOfElementLocated&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cssSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"span.promoInfo"&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;span class="c1"&gt;// or .elementToBeClickable .... &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fluent-wait"&gt;
  &lt;/a&gt;
  Fluent Wait
&lt;/h3&gt;

&lt;p&gt;monitors at regular intervalls of time (Pollingtime has to defined) &lt;br&gt;
Example: if something is displayed,which you don't want to check. (after 3 sec "Card is accepted" - "Order is process" after 7 sec - .... )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt; &lt;span class="nc"&gt;Wait&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FluentWait&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withTimeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ofSeconds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pollingEvery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ofSeconds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ignoring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;WebElement&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;until&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="c1"&gt;//customised function - until methods returns webelement&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;WebElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;WebElement&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;WebDriver&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findElement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cssSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"div#finishh4"&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;isDisplayed&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findElement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cssSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"div#finish h4"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#threadsleep"&gt;
  &lt;/a&gt;
  Thread.Sleep
&lt;/h2&gt;

&lt;p&gt;Part of Java, not specially Selenium &lt;br&gt;
waits the amount of time, without listening to DOM &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Implement Repository Base and Unit of Work in C#</title>
      <author>1001binary</author>
      <pubDate>Thu, 15 Apr 2021 14:10:52 +0000</pubDate>
      <link>https://dev.to/1001binary/implement-repository-base-and-unit-of-work-in-c-2ncg</link>
      <guid>https://dev.to/1001binary/implement-repository-base-and-unit-of-work-in-c-2ncg</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction-and-implementation"&gt;
  &lt;/a&gt;
  Introduction and Implementation
&lt;/h3&gt;

&lt;p&gt;The repository pattern belongs to the family of design patterns. It's used for handling common data access. It's easily maintainable and highly testable. Besides that, Unit Of Work can be seen as transaction to ensure that all operations in an unit are successfully executed. If one of them is failed, nothing happens.&lt;/p&gt;

&lt;p&gt;In C#, there is an interface called IQueryable. It is like lazy interface. When called, it will be executed. This interface fits to Repository pattern well.&lt;/p&gt;

&lt;p&gt;First, we define a new class EntityBase with Id and Version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EntityBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Version property can help to check concurrency in database. Nowadays, most of ORMs support concurrency check automatically.&lt;/p&gt;

&lt;p&gt;Second, we define a new interface IRepository where its constraint of T is EntityBase. There, we will write 5 methods: List, Create, Read, Update and Delete. This can call LCRUD.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EntityBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;IQueryable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;List&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third, we implement a new class GenericRepository using DbContext in Entity Framework.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GenericRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EntityBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;GenericRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_dbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;overridable&lt;/span&gt; &lt;span class="n"&gt;IQueryable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;List&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;overridable&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;overridable&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;overridable&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EntityState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;overridable&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we create a new class UnitOfWork.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UnitOfWork&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UnitOfWork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_dbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// TODO: Initialize repositories here...&lt;/span&gt;
      &lt;span class="c1"&gt;// e.g. this.StudentRepository&lt;/span&gt;
                  &lt;span class="c1"&gt;// = new StudentRepository(dbContext);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isSuccess&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChanges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// e.g. public readonly IStudentRepository StudentRepository;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Each entity must inherit EntityBase.&lt;/li&gt;
&lt;li&gt;For each entity, you must create a new interface I[xxx]Repository and a new class [xxx]Repository inheriting GenericRepository and implementing I[xxx]Repository.&lt;/li&gt;
&lt;li&gt;New Repository classes have to be initialized in UnitOfWork class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Best Practices:&lt;/p&gt;

&lt;p&gt;We can take advantage of IoC frameworks to register DbContext and UnitOfWork into services container and then use UnitOfWork as constructor parameter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#samples"&gt;
  &lt;/a&gt;
  Samples
&lt;/h3&gt;

&lt;p&gt;Suppose StudentDbContext is provided and Ninject is used for registering two services UnitOfWork and StudentDbContext. UnitOfWork will be automatically injected in Studentcontroller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StudentController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ControllerBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;UnitOfWork&lt;/span&gt; &lt;span class="n"&gt;_unitOfWork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;StudentController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnitOfWork&lt;/span&gt; &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_unitOfWork&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Console application is to add two new Students to database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="n"&gt;studentDbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StudentDbContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnitOfWork&lt;/span&gt; &lt;span class="n"&gt;unitOfWork&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UnitOfWork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;studentDbContext&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StudentRepository&lt;/span&gt;
             &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Larry"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Page"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StudentRepository&lt;/span&gt;
             &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Zuckerberg"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="n"&gt;unitOfWork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully, this post can help you to implement your own repository and unit of work.&lt;/p&gt;

&lt;p&gt;Happy coding :)&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>designpatterns</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Android Vitals - Tap Response Time 👉</title>
      <author>Py ⚔</author>
      <pubDate>Thu, 15 Apr 2021 14:10:20 +0000</pubDate>
      <link>https://dev.to/pyricau/android-vitals-tap-response-time-19mj</link>
      <guid>https://dev.to/pyricau/android-vitals-tap-response-time-19mj</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Header image: &lt;em&gt;Alone Together&lt;/em&gt; &lt;a href="https://www.flickr.com/photos/romainguy/10982291363/"&gt;by Romain Guy&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android users expect apps to respond to their actions within a &lt;strong&gt;short time window&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#did-you-know"&gt;
  &lt;/a&gt;
  💡 Did you know?
&lt;/h3&gt;

&lt;p&gt;UX research teaches us that a response time shorter than &lt;strong&gt;100ms&lt;/strong&gt; feels &lt;strong&gt;immediate&lt;/strong&gt;, and a response time beyond &lt;strong&gt;1s&lt;/strong&gt; makes users &lt;strong&gt;lose focus&lt;/strong&gt;. When the response time gets closer to 10 seconds, users simply abandon their task (&lt;a href="https://web.dev/rail/#focus-on-the-user"&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  👉📱
&lt;/h1&gt;

&lt;p&gt;Measuring &lt;strong&gt;user action response times&lt;/strong&gt; is critical to ensure a &lt;strong&gt;good user experience&lt;/strong&gt;. &lt;strong&gt;Taps&lt;/strong&gt; are the most common action apps must respond to. Can we measure &lt;em&gt;Tap Response Time&lt;/em&gt;?&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#tap-response-time"&gt;
  &lt;/a&gt;
  🎓 Tap Response Time
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Tap Response Time&lt;/em&gt; is the time from when the user is &lt;strong&gt;done pressing&lt;/strong&gt; a button to when the app has &lt;strong&gt;visibly reacted&lt;/strong&gt; to the tap.&lt;br&gt;
More precisely, it's the time from when the finger leaves the touch screen to when the display has rendered a frame with a visible reaction to that tap (e.g. the start of a navigation animation). The &lt;em&gt;Tap Response Time&lt;/em&gt; does not include any animation time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#naive-tap-response-time"&gt;
  &lt;/a&gt;
  Naive Tap Response Time
&lt;/h1&gt;

&lt;p&gt;I opened the &lt;a href="https://github.com/android/architecture-components-samples/tree/master/NavigationAdvancedSample"&gt;Navigation Advanced Sample&lt;/a&gt; project and added a call to &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.system/measure-time-millis.html"&gt;measureTimeMillis()&lt;/a&gt; to measure the &lt;em&gt;Tap Response Time&lt;/em&gt; when tapping on the &lt;a href="https://github.com/android/architecture-components-samples/blob/main/NavigationAdvancedSample/app/src/main/java/com/example/android/navigationadvancedsample/homescreen/Title.kt#L37-L39"&gt;about button&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;aboutButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tapResponseTimeMs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;findNavController&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_title_to_about&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;PerfAnalytics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logTapResponseTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tapResponseTimeMs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple enough! However this approach presents several drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;⌛️ It can return a &lt;strong&gt;negative time&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;📈 It &lt;strong&gt;doesn't scale&lt;/strong&gt; with the codebase size.&lt;/li&gt;
&lt;li&gt;👉 It doesn't account for the time from when the &lt;strong&gt;finger leaves the touch screen&lt;/strong&gt; to when the click listener is called.&lt;/li&gt;
&lt;li&gt;📱 It doesn't account for the time from when we're done calling &lt;a href="https://developer.android.com/reference/androidx/navigation/NavController#navigate(int)"&gt;NavController.navigate()&lt;/a&gt; to when the &lt;strong&gt;display has rendered a frame&lt;/strong&gt; with the new screen visible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-negative-time"&gt;
  &lt;/a&gt;
  ⌛️ Negative time
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.system/measure-time-millis.html"&gt;measureTimeMillis()&lt;/a&gt; calls &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; whihch can be set by the user or the phone network, so the time may jump backwards or forwards unpredictably. Elapsed time measurements should not use &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; (learn more: &lt;a href="https://dev.to/pyricau/android-vitals-what-time-is-it-2oih"&gt;Android Vitals - What time is it?&lt;br&gt;
&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#large-codebases"&gt;
  &lt;/a&gt;
  📈 Large codebases
&lt;/h2&gt;

&lt;p&gt;Adding measuring code to every single meaningful click listener is a daunting task. We need a solution that scales with the codebase size, which means we need &lt;strong&gt;central hooks&lt;/strong&gt; to detect when meaningful actions are triggered by taps.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#touch-pipeline"&gt;
  &lt;/a&gt;
  👉 Touch pipeline
&lt;/h2&gt;

&lt;p&gt;When a finger leaves the touch screen, the following happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;system_server&lt;/code&gt; process receives the information from the touch screen and determines which window should receive a &lt;code&gt;MotionEvent.UP&lt;/code&gt; touch event.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#did-you-know"&gt;
  &lt;/a&gt;
  💡 Did you know?
&lt;/h3&gt;

&lt;p&gt;Every window is associated with an input event &lt;a href="https://www.gnu.org/software/libc/manual/html_node/Socket-Pairs.html"&gt;socket pair&lt;/a&gt;: the first socket is owned by &lt;code&gt;system_server&lt;/code&gt; to send input events. That first socket is paired with a second socket owned by the app that created the window, to receive input events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;system_server&lt;/code&gt; process sends the touch event to the input event socket for the targeted window.&lt;/li&gt;
&lt;li&gt;The app receives the touch event on its listening socket, stores it in a queue (&lt;a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=7866-7878;drc=344f4d71075b98ee15696ef81484f03bab1848cb"&gt;ViewRootImpl.QueuedInputEvent&lt;/a&gt;) and schedules a Choreographer frame to consume input events.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#did-you-know"&gt;
  &lt;/a&gt;
  💡 Did you know?
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;system_server&lt;/code&gt; process detects when an input event stays in the queue for more than 5 seconds, and that's when it knows it should show an Application Not Responding (ANR) dialog.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;When the Choreographer frame triggers, the touch event is dispatched to the root view of a window, which then dispatches it through its view hierarchy.&lt;/li&gt;
&lt;li&gt;The tapped view receives the &lt;code&gt;MotionEvent.UP&lt;/code&gt; touch event and &lt;strong&gt;posts a click listener callback&lt;/strong&gt; (&lt;a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=15724?q=performClickInternal"&gt;source&lt;/a&gt;). &lt;em&gt;This lets other visual state of the view update before click actions start.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Then finally when the main thread runs that posted callback the view click listener is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, quite a lot happens from when the finger leaves the touch screen to when the click listener is called. Every motion event includes the time at which the event occurred (&lt;a href="https://developer.android.com/reference/android/view/MotionEvent#getEventTime()"&gt;MotionEvent.getEventTime()&lt;/a&gt;). If we could get access to that &lt;code&gt;MotionEvent.UP&lt;/code&gt; event leading to a click we could measure the true start of the Tap Response Time.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#traversal-and-rendering"&gt;
  &lt;/a&gt;
  📱 Traversal and rendering
&lt;/h2&gt;

&lt;p&gt;What does this do?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;findNavController&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_title_to_about&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In most apps, the above code starts a fragment transaction. That transaction may be immediate (&lt;code&gt;commitNow()&lt;/code&gt;) or posted (&lt;code&gt;commit()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;When the transaction execute, the view hierarchy is updated and a layout traversal is scheduled.&lt;/li&gt;
&lt;li&gt;When the layout traversal executes, a new frame is drawn into a surface.&lt;/li&gt;
&lt;li&gt;It is then composited with frames from other windows and sent to the display (look for Romain Guy and Chet Haase talks on the topic for details).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally we'd like to know exactly when a change to the view hierarchy becomes actually visible on the display. Unfortunately, as far as I know there's no Java API for that, so we'll have to get creative.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  🤔 What now?
&lt;/h1&gt;

&lt;p&gt;We've seen that the naive approach to measuring &lt;em&gt;Tap Response Time&lt;/em&gt; isn't accurate and doesn't scale. We need to build something better!&lt;/p&gt;

&lt;p&gt;The good news is, I've implemented exactly that, on top of Jetpack Navigation. The bad news is, you'll have to wait for me to publish Part 2!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚖️ This work is licensed under a &lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>android</category>
      <category>vitals</category>
      <category>performance</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Roadmap para ser desarrollador Frontend Junior.</title>
      <author>Francisco</author>
      <pubDate>Thu, 15 Apr 2021 14:07:44 +0000</pubDate>
      <link>https://dev.to/franciscode/roadmap-para-ser-desarrollador-frontend-junior-25lh</link>
      <guid>https://dev.to/franciscode/roadmap-para-ser-desarrollador-frontend-junior-25lh</guid>
      <description>&lt;p&gt;Al ver el título de este Post pensaras, ¿Qué es un Roadmap?, puede que ya lo sepas, puede que lo hayas oído, pero, exactamente, &lt;strong&gt;¿Que es un RoadMap?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definici%C3%B3n-de-roadmap"&gt;
  &lt;/a&gt;
  Definición de Roadmap
&lt;/h2&gt;

&lt;p&gt;Un Roadmap es un plan estratégico que define una meta o un resultado deseado e incluye los principales pasos o hitos necesarios para alcanzarlo. También sirve como herramienta de comunicación, se trata de un documento de alto nivel que ayuda a articular el pensamiento estratégico detrás tanto de la meta.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-construir-un-roadmap"&gt;
  &lt;/a&gt;
  ¿Como construir un roadmap?
&lt;/h2&gt;

&lt;p&gt;Si quieres construir uno, primero debes saber que quieres aprender en el mundo de la tecnología, hay muchos estereotipos a seguir por todo el internet, pero, en esta guía te mostrare uno para ser desarrollador Frontend Junior, pasaré a presentartela y consiguiente a esto, explicar cada punto de este roadmap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BV9A7HOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xz2zdrpw7adipj6jqrio.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BV9A7HOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xz2zdrpw7adipj6jqrio.jpeg" alt="roadmap-frontend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Crédito de Imagen a medium.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Quizás al ver ese RoadMap tan gigante te den unas ganas increibles de cerrar este post y gritar Jajaja, pues te lo explicaré paso a paso para que lo entiendas y lo sigas de manera correcta.&lt;/p&gt;

&lt;p&gt;Lo primero es como ya todos sabemos, aprender lo básico, esto son las 3 partes fundamentales del desarrollo Frontend, sin estas tencologías las páginas web no podrían existir, así es!, Estamos hablando de &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, y &lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aprende-lo-b%C3%A1sico"&gt;
  &lt;/a&gt;
  Aprende lo básico
&lt;/h2&gt;

&lt;p&gt;Deberemos aprender lo básico de cada una de estas tecnologías y practicar mucho con sencillas webs, te dejo cursos de cada una de ellas en w3schools&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/default.asp"&gt;HTML&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3schools.com/css/default.asp"&gt;CSS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3schools.com/js/default.asp"&gt;JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luego de haber practicado mucho todas estas tecnología podemos continuar con nuestro RoadMap&lt;/p&gt;

&lt;p&gt;Lo siguiente será:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#profundiza-en-los-temas"&gt;
  &lt;/a&gt;
  Profundiza en los Temas
&lt;/h2&gt;

&lt;p&gt;Aquí podemos seguir tanto la ruta de profundizar en CSS, como en JavaScript:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;Aquí podemos elegir tres cosas&lt;/p&gt;

&lt;p&gt;1.- Frameworks&lt;/p&gt;

&lt;p&gt;2.- Preprocesadores&lt;/p&gt;

&lt;p&gt;3.- Desarrollo Web Responsive&lt;/p&gt;

&lt;p&gt;Algunos de los frameworks mas conocidos son: Foundation, Boostrapt, Materialize CSS, Semantic UI, entre otros.&lt;/p&gt;

&lt;p&gt;Algunos de los Preprocesadores mas conocidos son: Sass, Less, Stylus, PostCSS.&lt;/p&gt;

&lt;p&gt;En cuanto al desarrollo web responsive te dejo una guia &lt;a href="https://desarrolloweb.com/manuales/responsive-web-design.html"&gt;aquí&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;Al profundizar en JavaScript podemos encontrarnos con Typescript o Flow, También con Empaquetadores de Archivos, frameworks entre otros.&lt;/p&gt;

&lt;p&gt;Empaquetadores de Archivos:&lt;/p&gt;

&lt;p&gt;webpack&lt;br&gt;
rollup&lt;br&gt;
porcel&lt;br&gt;
RequireJS / AMD&lt;br&gt;
Browserify&lt;/p&gt;

&lt;p&gt;Pruebas:&lt;/p&gt;

&lt;p&gt;Jest&lt;br&gt;
Mocha&lt;br&gt;
Jasmine&lt;br&gt;
Enzyme&lt;/p&gt;

&lt;p&gt;Frameworks:&lt;/p&gt;

&lt;p&gt;Angular&lt;br&gt;
React&lt;br&gt;
VueJS&lt;br&gt;
Preact&lt;br&gt;
EmberJS&lt;/p&gt;

&lt;p&gt;Desde angular podemos irnos a Flux, Redux o Mobx&lt;br&gt;
Desde React podemos irnos a RxJS o Typescript&lt;/p&gt;

&lt;p&gt;Gestor de Paquetes:&lt;/p&gt;

&lt;p&gt;Yarn&lt;br&gt;
npm&lt;/p&gt;

&lt;p&gt;Igual podemos automatizar tareas con:&lt;/p&gt;

&lt;p&gt;npm scripts&lt;br&gt;
gulp&lt;br&gt;
Grunt&lt;/p&gt;

&lt;p&gt;Si quieres profundizar mas aún en JavaScript puedes aprender ES6&lt;/p&gt;

&lt;p&gt;Esto de aquí ya es bastante profundo en cada tecnología, puedes aprenderlo!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WvRr0ZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3higfqcdu895dgxofqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WvRr0ZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3higfqcdu895dgxofqb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pues hasta aquí estaría amigos, esta guía tampoco te enseñara como aprenderlo, pero te enseña que aprender y en que orden, te recomiendo seguir este RoadMap al pie de la letra y no rendirte!!&lt;/p&gt;

&lt;p&gt;Parecerá mucho, pero con ayuda y buena guía triunfaras!!&lt;/p&gt;

&lt;p&gt;Gracias por leer!! &lt;/p&gt;

</description>
      <category>roadmap</category>
      <category>frontend</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>A new approach to have Dynamic Forms in Angular</title>
      <author>Mateo Tibaquirá</author>
      <pubDate>Thu, 15 Apr 2021 14:03:50 +0000</pubDate>
      <link>https://dev.to/this-is-angular/a-new-approach-to-have-dynamic-forms-in-angular-9mc</link>
      <guid>https://dev.to/this-is-angular/a-new-approach-to-have-dynamic-forms-in-angular-9mc</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;br&gt;
Go to &lt;a href="https://stackblitz.com/edit/myndpm-dyn-forms?file=src/app/simple-form/simple.form.ts"&gt;Stackblitz&lt;/a&gt; and witness the power of &lt;code&gt;@myndpm/dyn-forms&lt;/code&gt;, check its synthetic &lt;a href="https://github.com/myndpm/open-source/tree/master/libs/forms"&gt;source code&lt;/a&gt; and join the &lt;a href="https://github.com/myndpm/open-source/discussions"&gt;GitHub Discussions&lt;/a&gt; to design the upcoming features based on our experiences with Angular Forms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As in most companies, at &lt;em&gt;Mynd&lt;/em&gt; we build forms, filters, tables and display &lt;em&gt;views&lt;/em&gt; for different purposes. We handle a ton of entities and we have custom components in our Design System to satisfy our needs. In this complex scenario, avoid boilerplate is a must, and to speed up the development process and facilitate the implementation and maintenance of these &lt;em&gt;views&lt;/em&gt;, we built some base libraries to abstract the requirements into configuration objects that enable us to &lt;em&gt;easily modify&lt;/em&gt; a form, a filter, a table, without touching a view template (most of the times).&lt;/p&gt;

&lt;p&gt;So the question is: can we implement a standard, flexible enough layer to do this job and be shared with the Angular Community?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-bit-of-history"&gt;
  &lt;/a&gt;
  A bit of History
&lt;/h1&gt;

&lt;p&gt;This challenge has been addressed by &lt;a href="https://www.ngx.tools/#/search?q=dynamic%20forms"&gt;many developers and companies&lt;/a&gt; in many ways, we even have an &lt;a href="https://angular.io/guide/dynamic-form"&gt;official documentation guide&lt;/a&gt; on this topic; some approaches ends up with a template processing different types of fields with a &lt;code&gt;ngSwitch&lt;/code&gt;, others vary on the entrypoint component depending on the desired UI framework, or their config objects are not standardized and uses different field names for the same task on different controls. They are not completely generic, typed and/or extensible.&lt;/p&gt;

&lt;p&gt;The ideal scenario is to have a strictly typed and serializable configuration object, so we are able store it in the state or the database without problems, as well as the ability to share some recipes with the community for common use-cases without complex functions involved, just a JSON object; there are a lot of good ideas out there, and we're in the process of &lt;a href="https://github.com/myndpm/open-source/discussions"&gt;discussing&lt;/a&gt; the best possible solutions for each topic.&lt;/p&gt;

&lt;p&gt;Technically speaking, the challenge is to translate a Config Object (&lt;code&gt;JSON&lt;/code&gt;) into a functional Form (&lt;code&gt;FormGroup&lt;/code&gt;) being able to build any required nested structure, composing Control (inputs, selects, etc) into Containers to group them and customize the layout (cards, panels, etc).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's New?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@myndpm/dyn-forms&lt;/code&gt; is not just a "dynamic" forms library providing you a finite set of controls, or limiting your creativity and possibilities in any way. This library aims to be a quite &lt;em&gt;generic&lt;/em&gt; and &lt;em&gt;lightweight&lt;/em&gt; layer on the top of Angular's Form Framework, allowing us to build, extend and maintain our forms from their metadata, giving us more time to focus our attention on the business-logic requirements, custom validations, etc.&lt;/p&gt;

&lt;p&gt;Moreover, we keep the control of our &lt;em&gt;model&lt;/em&gt; and the Angular Form, manipulating the supported methods of &lt;code&gt;FormGroup&lt;/code&gt;, &lt;code&gt;FormArray&lt;/code&gt; and &lt;code&gt;FormControl&lt;/code&gt;, giving the responsibility of building the form hierarchy and its presentation to the library, but patching and listening any &lt;code&gt;valueChange&lt;/code&gt; as we are used to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-dynform"&gt;
  &lt;/a&gt;
  Creating a DynForm
&lt;/h2&gt;

&lt;p&gt;All we need is to import &lt;code&gt;DynFormsModule&lt;/code&gt; to our &lt;code&gt;NgModule&lt;/code&gt; and also provide the &lt;code&gt;DynControls&lt;/code&gt; that we need in our form. As a demostrative implementation, we mocked &lt;code&gt;DynFormsMaterialModule&lt;/code&gt; at &lt;code&gt;@myndpm/dyn-forms/ui-material&lt;/code&gt; to enable you right now to see how it works with some basic components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;DynFormsMaterialModule&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@myndpm/dyn-forms/ui-material&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;DynFormsMaterialModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forFeature&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This package also provides a typed &lt;code&gt;createMatConfig&lt;/code&gt; &lt;em&gt;Factory Method&lt;/em&gt; that (hopefully) will facilitate the development experience while creating configuration objects, by supporting type-checks (with overloads for the different controls):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMatConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@myndpm/dyn-forms/ui-material&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;createMatConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CARD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;billing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Billing Address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;createMatConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INPUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;validators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Validators&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="nx"&gt;createMatConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INPUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;validators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Validators&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Last Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="nx"&gt;createMatConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DIVIDER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;invisible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now you're ready to invoke the Dynamic Form in your template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;[formGroup]=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dyn-form&lt;/span&gt;
    &lt;span class="na"&gt;[config]=&lt;/span&gt;&lt;span class="s"&gt;"config"&lt;/span&gt;
    &lt;span class="na"&gt;[form]=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;
    &lt;span class="na"&gt;[mode]=&lt;/span&gt;&lt;span class="s"&gt;"mode"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&amp;lt;/dyn-form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"mode = 'display'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Switch to Display Mode
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and voilá!&lt;br&gt;
&lt;a href="https://stackblitz.com/edit/myndpm-dyn-forms?file=src/app/simple-form/simple.form.ts"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaCbx9qS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je3a0w9gf3nibih0enu9.png" alt="simple-form demo at Stackblitz"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#where-the-magic-happens"&gt;
  &lt;/a&gt;
  Where the magic happens
&lt;/h2&gt;

&lt;p&gt;The main feature is the ability to plug-in new Dynamic Form Controls, provide customized ones for some particular requirements, or integrate third-party components into our forms, with ease!&lt;/p&gt;

&lt;p&gt;For this matter, Angular's &lt;code&gt;InjectionTokens&lt;/code&gt; are the way to apply the &lt;a href="https://dev.to/this-is-angular/plugin-architecture-for-angular-libraries-using-dependency-injection-5d8k"&gt;Dependency Inversion Principle&lt;/a&gt;, so we do not rely on the controls provided by a single library anymore, but any &lt;code&gt;NgModule&lt;/code&gt; (like &lt;code&gt;DynFormsMaterialModule&lt;/code&gt;) can provide new controls via the &lt;code&gt;DYN_CONTROL_TOKEN&lt;/code&gt; by registering the component to be loaded dynamically (&lt;code&gt;DynControl&lt;/code&gt;) with an "ID" (&lt;code&gt;INPUT&lt;/code&gt;, &lt;code&gt;RADIO&lt;/code&gt;, &lt;code&gt;SELECT&lt;/code&gt;, etc).&lt;/p&gt;

&lt;p&gt;From there the Dynamic Form Registry can let the &lt;code&gt;Factory&lt;/code&gt; know what component it should load for a given "ID"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DynFormRegistry&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DYN_CONTROLS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ControlProvider&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it's super hard to name these kind of "id" and "type" fields, so trying to keep the context clear, the &lt;code&gt;ControlProvider&lt;/code&gt; interface consists of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;InjectedControl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynControlType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynInstanceType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AbstractDynControl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;the &lt;code&gt;control&lt;/code&gt; identificator is the 'string' to reference the dynamic control from the Config Object&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;instance&lt;/code&gt; is the type of &lt;code&gt;AbstractControl&lt;/code&gt; that it will create in the form hierarchy (&lt;code&gt;FormGroup&lt;/code&gt;, &lt;code&gt;FormArray&lt;/code&gt; or &lt;code&gt;FormControl&lt;/code&gt;), and&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;component&lt;/code&gt; which should extend any of the Dynamic Control classes (&lt;code&gt;DynFormGroup&lt;/code&gt;, &lt;code&gt;DynFormArray&lt;/code&gt;, &lt;code&gt;DynFormControl&lt;/code&gt; or &lt;code&gt;DynFormContainer&lt;/code&gt;) implementing the simple contract &lt;a href="https://github.com/myndpm/open-source/tree/master/libs/forms#extending"&gt;explained here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#configuration-object-typing"&gt;
  &lt;/a&gt;
  Configuration Object Typing
&lt;/h2&gt;

&lt;p&gt;You can define your Form with an array of &lt;code&gt;controls&lt;/code&gt; which can have some sub&lt;code&gt;controls&lt;/code&gt;; with this nested structure you can build any hierarchy to satisfy your needs (like in the example). This configuration unit is specified by the &lt;code&gt;DynBaseConfig&lt;/code&gt; interface which follows a simple Tree structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;DynBaseConfig&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TParams&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;DynBaseConfig&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TMode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;modes&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;DynControlModes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TMode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The form also supports different "modes". Modes are partial overrides that we can apply to the main Control Configuration depending on a particular situation. In the &lt;a href="https://myndpm.github.io/open-source/#/demos/dyn-forms/simple-form"&gt;simple-form demo&lt;/a&gt; we show an example of this: a &lt;code&gt;display&lt;/code&gt; mode where we define a &lt;code&gt;readonly: true&lt;/code&gt; parameter to be passed to all the dynamic controls, and they react changing their layout or styles. These "modes" are just a custom &lt;code&gt;string&lt;/code&gt;, so the configuration is open to any kind of &lt;code&gt;mode&lt;/code&gt; that you'd like to define.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;DynFormConfig&lt;/code&gt; you can specify the global override for each mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynFormConfig&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;modeParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you can also override the configuration of a single control for a given a mode, like this &lt;code&gt;RADIO&lt;/code&gt; button being changed to an &lt;code&gt;INPUT&lt;/code&gt; control when we switch the form to &lt;code&gt;display&lt;/code&gt; mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;createMatConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RADIO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;account&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Create Account&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;modes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INPUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the &lt;code&gt;control&lt;/code&gt; will be overriden but the &lt;code&gt;params&lt;/code&gt; will be merged and we will have the original label in the &lt;code&gt;display&lt;/code&gt; mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback-wanted"&gt;
  &lt;/a&gt;
  Feedback WANTED
&lt;/h2&gt;

&lt;p&gt;With this brief introduction to this powerful library, we hope that you join its design/development efforts by sharing your experience/ideas/point of view in the &lt;a href="https://github.com/myndpm/open-source/discussions"&gt;GitHub Discussions&lt;/a&gt; opened for the upcoming features, creating Pull Request extending or adding new Material/TaigaUI/any controls, or reporting &lt;a href="https://github.com/myndpm/open-source/issues"&gt;Issues&lt;/a&gt; that you find.&lt;/p&gt;

&lt;p&gt;There are some challenges to be addressed, like a standard way to handle the Validations and show the respective Error message; handle the visibility of a control depending on some conditions; these topics have opened discussions to collect ideas and figure out a solution.&lt;/p&gt;

&lt;p&gt;We might write more articles explaining the internals to analyze and improve the chosen architecture.&lt;/p&gt;

&lt;p&gt;Without further ado, &lt;a href="https://www.npmjs.com/package/@myndpm/dyn-forms"&gt;enjoy it&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;// PS. We are hiring!&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>dynamic</category>
      <category>forms</category>
      <category>npmpackage</category>
    </item>
  </channel>
</rss>
