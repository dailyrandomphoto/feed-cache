<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Azure Durable Functions - Developing Serverless Stateful Workflow </title>
      <author>Jonah Andersson üë©üèª‚ÄçüíªSE</author>
      <pubDate>Fri, 26 Feb 2021 15:56:09 +0000</pubDate>
      <link>https://dev.to/jonahandersson/azure-durable-functions-developing-serverless-stateful-workflow-4787</link>
      <guid>https://dev.to/jonahandersson/azure-durable-functions-developing-serverless-stateful-workflow-4787</guid>
      <description>&lt;h1&gt;
  &lt;a href="#knowledge-sharing-azure-durable-functions-at-my-workplace" class="anchor"&gt;
  &lt;/a&gt;
  Knowledge Sharing Azure Durable Functions at my workplace
&lt;/h1&gt;

&lt;p&gt;Yesterday, I had an opportunity to share technical knowledge with my colleagues at &lt;a href="http://forefront.se/"&gt;Forefront Consulting&lt;/a&gt; during our monthly meeting in our division Technology. I was glad to share insights and knowledge about the basics of one of my &lt;a href="https://medium.com/@jonah.andersson/a-net-software-developers-top-6-favorite-microsoft-azure-technologies-45f945f72605"&gt;favorite Azure cloud services&lt;/a&gt;, Azure Durable Functions. Interesting questions came up that are worth checking out more. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-azure-durable-functions" class="anchor"&gt;
  &lt;/a&gt;
  What are Azure Durable Functions?
&lt;/h1&gt;

&lt;p&gt;Well, if you have not work with Azure development or familiar with Azure technologies, probably it is hard to understand right away what it is. I hope that this article will enlighten you and give you the basics of it. I personally like to share that this great serverless technology exists!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-serverless" class="anchor"&gt;
  &lt;/a&gt;
  What is Serverless?
&lt;/h1&gt;

&lt;p&gt;Serverless Computing is starting to gain its popularity these days, especially in the world of cloud development. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Serverless computing (or serverless for short), is an execution model where the cloud provider (AWS, Azure, or Google Cloud) is responsible for executing a piece of code by dynamically allocating the resources. And only charging for the amount of resources used to run the code. The code is typically run inside stateless containers that can be triggered by a variety of events including http requests, database events, queuing services, monitoring alerts, file uploads, scheduled events (cron jobs), etc. The code that is sent to the cloud provider for execution is usually in the form of a function. Hence serverless is sometimes referred to as ‚ÄúFunctions as a Service‚Äù or ‚ÄúFaaS‚Äù. Following are the FaaS offerings of the major cloud providers:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AWS: AWS Lambda&lt;br&gt;
Microsoft Azure: Azure Functions&lt;br&gt;
Google Cloud: Cloud Functions&lt;br&gt;
While serverless abstracts the underlying infrastructure away from the developer, servers are still involved in executing our functions. &lt;br&gt;
(Source: &lt;a href="https://serverless-stack.com/chapters/what-is-serverless.html"&gt;Serverless-Stack.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;So,Serverless is not really without servers. The infrastructure exists only that cloud provider like Microsoft Azure takes care of it for you so that you can focus on solving and creating solutions through these cloud services like a Durable Functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Azure Durable Functions&lt;/strong&gt; is an extension of &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/"&gt;Azure Functions&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Azure Functions is a serverless solution that allows you to write less code, maintain less infrastructure, and save on costs. Instead of worrying about deploying and maintaining servers, the cloud infrastructure provides all the up-to-date resources needed to keep your applications running. You focus on the pieces of code that matter most to you, and Azure Functions handles the rest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Azure Durable Functions on the other hand is built on top of Azure Functions. It does more than an Azure Function can do, especially it being when you have to develop a serverless long-running stateful workflow from the code along with the Azure Function in a &lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;serverless&lt;/a&gt; environment.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#major-benefits-of-using-azure-durable-functions" class="anchor"&gt;
  &lt;/a&gt;
  Major Benefits of Using Azure Durable Functions
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Define and write workflows by code &lt;/li&gt;
&lt;li&gt;Create long-running tasks &lt;/li&gt;
&lt;li&gt;Have a need to work with multiple Azure Functions&lt;/li&gt;
&lt;li&gt;If you need to create serverless stateful workflows that require human interaction, monitoring, and more&lt;/li&gt;
&lt;li&gt;Need to make sure that the status of your workflow is consistent&lt;/li&gt;
&lt;li&gt;Focus on developer productivity &lt;/li&gt;
&lt;li&gt;Autoscaling &lt;/li&gt;
&lt;li&gt;Pay only for what you use &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#azure-durable-task-framework-the-technology-behind" class="anchor"&gt;
  &lt;/a&gt;
  Azure Durable Task Framework - The Technology Behind
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Behind the scenes, the Durable Functions extension is built on top of the &lt;a href="https://github.com/Azure/durabletask"&gt;Durable Task Framework&lt;/a&gt;, an open-source library on GitHub that's used to build workflows in code. Like Azure Functions is the serverless evolution of Azure WebJobs, Durable Functions is the serverless evolution of the Durable Task Framework. Microsoft and other organizations use the Durable Task Framework extensively to automate mission-critical processes. It's a natural fit for the serverless Azure Functions environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#major-components-in-azure-durable-functions" class="anchor"&gt;
  &lt;/a&gt;
  Major Components in Azure Durable Functions
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Client functions&lt;/strong&gt; are the entry point for creating an instance of a Durable Functions orchestration. They can run in response to an event from many sources, such as a new HTTP request arriving, a message being posted to a message queue, an event arriving in an event stream. You can write them in any of the supported languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Orchestrator functions&lt;/strong&gt; describe how actions are executed. It is an important part of Durable Functions. The workflow of actions should be in the order in which they are to run. When you write the orchestration logic in code, it is important that these functions are deterministic. &lt;/p&gt;

&lt;p&gt;One great thing about the orchestrator is that it sleeps! &lt;br&gt;
When it sleeps you do not get charge for the servic. Stateful workflows solve some problems that normal Azure Functions cannot have.&lt;/p&gt;

&lt;p&gt;Learn more about &lt;a href="Orchestrator%20logic%20must%20be%20deterministic%20because%20the%20whole%20function%20will%20be%20%E2%80%9Creplayed%E2%80%9D%20&amp;lt;br&amp;gt;%0AMore%20info%20about%20Deterministic%20API%E2%80%99s:%20&amp;lt;br&amp;gt;%0Ahttps://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-code-constraints#using-deterministic-apis"&gt;Deterministic APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Activity functions&lt;/strong&gt; are the basic units of work in a durable function orchestration. An activity function contains the actual work performed by the tasks being orchestrated.&lt;br&gt;
Entity functions define operations for reading and updating small pieces of state, known as durable entities. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entity Functions&lt;/strong&gt; are only available in Durable Functions 2.0 and above. They are currently supported in .NET and JavaScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#durable-functions-patterns" class="anchor"&gt;
  &lt;/a&gt;
  Durable Functions Patterns
&lt;/h1&gt;

&lt;p&gt;Durable Functions have different patterns that are worth checking out. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function Chaining&lt;/li&gt;
&lt;li&gt;Fan out/Fan in &lt;/li&gt;
&lt;li&gt;Async HTTP APIs&lt;/li&gt;
&lt;li&gt;Monitor &lt;/li&gt;
&lt;li&gt;Human Interaction &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read more about it &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=csharp"&gt;Azure Durable Functions&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#further-reading-and-learning-resources" class="anchor"&gt;
  &lt;/a&gt;
  Further Reading and Learning Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft Azure Functions Documentation
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/"&gt;https://docs.microsoft.com/en-us/azure/azure-functions/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Microsoft Azure Durable Functions Documentation
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/"&gt;https://docs.microsoft.com/en-us/azure/azure-functions/durable/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Azure Core Tools 
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Ccsharp%2Cbash"&gt;https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Ccsharp%2Cbash&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you like this article, please reshare. Feel free to leave feedback and ask questions. Follow me [Twitter](&lt;a href="https://twitter.com/cjkodare"&gt;https://twitter.com/cjkodare&lt;/a&gt;, connectvia my &lt;a href="https://www.linkedin.com/in/jonahandersson/"&gt;LinkedIn&lt;/a&gt; and visit my &lt;a href="https://jonahandersson.tech"&gt;website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azuredurablefunctions</category>
      <category>azurefunctions</category>
      <category>serverless</category>
      <category>statefulworkflows</category>
    </item>
    <item>
      <title>Say yes to Deno?</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 26 Feb 2021 15:04:05 +0000</pubDate>
      <link>https://dev.to/codesphere/say-yes-to-deno-4dj1</link>
      <guid>https://dev.to/codesphere/say-yes-to-deno-4dj1</guid>
      <description>&lt;h4&gt;
  &lt;a href="#lets-talk-about-deno-and-why-it-may-be-the-better-alternative-to-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Let‚Äôs talk about Deno and why it may be the better alternative to Node.js.
&lt;/h4&gt;

&lt;p&gt;Before we start, what is Deno? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Deno is a command-line runtime for executing JavaScript and TypeScript. It‚Äôs a framework around V8, uses Rust, and has the TypeScript compiler built into it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#cool-deno-features-we-will-mention" class="anchor"&gt;
  &lt;/a&gt;
  Cool Deno features we will mention:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Secure execution by default&lt;/li&gt;
&lt;li&gt;Single executable&lt;/li&gt;
&lt;li&gt;Import from URLs&lt;/li&gt;
&lt;li&gt;Simple and browser-compatible module system&lt;/li&gt;
&lt;li&gt;TypeScript out of the box&lt;/li&gt;
&lt;li&gt;Full development environment&lt;/li&gt;
&lt;li&gt;Full toolset&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#so-why-deno" class="anchor"&gt;
  &lt;/a&gt;
  So why Deno?
&lt;/h4&gt;

&lt;p&gt;If Node.js is working, why rewrite it? Well, first of all, JavaScript has changed considerably since Node.js was designed in 2009. For example, async/await and promises are now standard. JavaScript now also has a new module system (ES Modules), typed arrays (no concept of using binary data inside of JS when Node was originally designed), and TypeScript, which has been a very nice supplement to JavaScript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nodejs-has-room-for-improvement" class="anchor"&gt;
  &lt;/a&gt;
  Node.js has room for improvement
&lt;/h4&gt;

&lt;p&gt;Secondly, Node.js has some problems, a few of which Ryan Dahl mentioned in a talk introducing Deno. With the package management system centralized in one location, the module system is poorly designed. Another issue is with regards to the topic of security. Although V8 itself is a secure sandbox, Node has compromised this sandbox in order to do things such as opening sockets and reading files, etc. When you‚Äôre running a Node program, you lose security.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#secure-execution-by-default" class="anchor"&gt;
  &lt;/a&gt;
  Secure execution by default
&lt;/h4&gt;

&lt;p&gt;Deno on the other hand is a secure execution by default, meaning when you run a program in Deno, you don‚Äôt need to trust it because, by default, you have no access to the system and can‚Äôt open files or sockets. Deno enables people to run untrusted third-party code safely.&lt;br&gt;
For your app to be allowed to access the network, it must be given authorization with the command:&lt;br&gt;
&lt;code&gt;deno run --allow-net app.ts&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;To interact with the system, Deno allows the user to opt in to various permissions such as reading from files systems with the command&lt;br&gt;
&lt;code&gt;--allow-read=/temp&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#single-executable" class="anchor"&gt;
  &lt;/a&gt;
  Single executable
&lt;/h4&gt;

&lt;p&gt;This is another perk of Deno and it has been told that it will always remain this way. Deno ships on Mac, Linux, and windows. It is aimed to be kept independent from system libraries.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#import-from-urls" class="anchor"&gt;
  &lt;/a&gt;
  Import from URLs
&lt;/h4&gt;

&lt;p&gt;Now for the most obvious change.&lt;br&gt;
&lt;code&gt;import {serve} from ‚Äúhttps://deno.land/std@0.50.0/http/server.ts‚Äù&lt;/code&gt;&lt;br&gt;
In Deno, you can import from URLs, the idea being to replace the entire modules system. This enables more distribution, as code can now be served up from any URL. The module resolution scheme in Node is a bit more complicated, as there are node_modules and index.js to worry about, which is troublesome for a lot of systems including TypeScript.&lt;/p&gt;

&lt;p&gt;Deno‚Äôs approach is more simple, using only relative or absolute URLs. Deno does not rely on NPM at all ‚Äî instead, you can import libraries via the URL. In Deno, modules and files are regarded as the same concept, which simplifies the mental model for users. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simple-and-browsercompatible-module-system" class="anchor"&gt;
  &lt;/a&gt;
  Simple and browser-compatible module system
&lt;/h4&gt;

&lt;p&gt;Deno has a module system that is not dependent on a centralized server. The runtime fetches, caches, and compiles code transparently. It can work offline using a download cache. This provides the possibility to work and fetch resources even when there is no access to the internet, simulating the same process as when you npm install something. On the first run, you can &lt;code&gt;deno fetch&lt;/code&gt; to download and cache these dependencies. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#typescript-out-of-the-box" class="anchor"&gt;
  &lt;/a&gt;
  TypeScript out of the box
&lt;/h4&gt;

&lt;p&gt;Most importantly, Deno supports TypeScript out of the box, meaning that TS is compiled into Deno. The feature V8 Snapshots is used to start up the TS compiler quickly, with no need to recompile each time. It can also deal with JavaScript, without any problem, out of the box.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#full-development-environment" class="anchor"&gt;
  &lt;/a&gt;
  Full development environment
&lt;/h4&gt;

&lt;p&gt;Since all dependencies are expressed as code, there is no need for package.json. &lt;code&gt;deno info {url}&lt;/code&gt; gives you a dependency tree of all modules that were loaded in there. &lt;code&gt;deno info&lt;/code&gt; also works on ES modules, even if there are random ES modules on the web nothing to do with Deno. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#full-toolset" class="anchor"&gt;
  &lt;/a&gt;
  Full toolset
&lt;/h4&gt;

&lt;p&gt;Deno‚Äôs vision is to provide a full toolset in a single binary. &lt;br&gt;
With commands such as &lt;code&gt;deno install&lt;/code&gt;, &lt;code&gt;deno info&lt;/code&gt;, &lt;code&gt;deno bundle&lt;/code&gt;, and &lt;code&gt;deno fmt&lt;/code&gt;, Deno acts like a multi-functional tool to run programs without having anything else installed on your machine.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h4&gt;

&lt;p&gt;So while Deno and Node.js both share the same origin, there are some strong arguments for why Deno may indeed be the easier and more efficient choice. But this, by far, does not mean that Node will be replaced, at the end of the day, it is up to user preference. &lt;/p&gt;

&lt;p&gt;Let us know what you think about Deno and Node.js! Which one do you prefer?&lt;/p&gt;

&lt;p&gt;One more thing to note is that Codesphere fully supports Node.js and TypeScript and we are happy to introduce Deno support out of the box as well if there is a demand for it within our community. :)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>codequality</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Step by Step Guide to install Istio Service Mesh in Kubernetes</title>
      <author>Techworld with Nana</author>
      <pubDate>Fri, 26 Feb 2021 14:49:50 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/step-by-step-guide-to-install-istio-service-mesh-in-kubernetes-d6d</link>
      <guid>https://dev.to/techworld_with_nana/step-by-step-guide-to-install-istio-service-mesh-in-kubernetes-d6d</guid>
      <description>&lt;p&gt;In this tutorial you will learn &lt;strong&gt;how to install Istio Service Mesh in a Kubernetes cluster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will deploy an example demo microservices application in the cluster, so that we can see all the features and &lt;strong&gt;visualization for those microservices in Istio&lt;/strong&gt; üôåüèº&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to learn what Istio and Service Mesh actually is and what it's used for, you can watch my previous video where I explain that in detail: &lt;a href="https://youtu.be/16fgzklcF7Y"&gt;Istio &amp;amp; Service Mesh - simply explained in 15 Mins&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the demonstration I will use a local Minikube cluster.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#steps-we-will-go-through-%EF%B8%8F" class="anchor"&gt;
  &lt;/a&gt;
  Steps we will go through ‚≠êÔ∏è
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-start-local-minikube-cluster" class="anchor"&gt;
  &lt;/a&gt;
  1. Start local Minikube cluster
&lt;/h3&gt;

&lt;p&gt;So the first thing we need to do is start the Minikube cluster.&lt;br&gt;
As Istio requires much resources, we need to start Minikube with higher CPU and memory than the default configuration:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;minikube start --cpus 6 --memory 8192&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-download-istio-amp-configure-istioctl" class="anchor"&gt;
  &lt;/a&gt;
  2. Download Istio &amp;amp; configure Istioctl
&lt;/h3&gt;

&lt;p&gt;As a next step, we need to actually install Istio release package and configure Istioctl - the command line interface for Istio to be added to our $PATH.&lt;br&gt;
&lt;a href="https://istio.io/latest/docs/setup/getting-started/#download"&gt;Istio Download Link&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-install-istio-in-minikube-cluster" class="anchor"&gt;
  &lt;/a&gt;
  3. Install Istio in Minikube cluster
&lt;/h3&gt;

&lt;p&gt;With Istioctl installed, we can now use it to install Istiod in our K8s cluster, which is the main Istio component.&lt;br&gt;
The command to do that is as simple as to execute:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;istioctl install&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This should be the result of running the command:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGsJca6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07uxaozr4cuvk6hpjj1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGsJca6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07uxaozr4cuvk6hpjj1j.png" alt="Result of istioctl install"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-deploy-a-microservices-application" class="anchor"&gt;
  &lt;/a&gt;
  4. Deploy a Microservices Application
&lt;/h3&gt;

&lt;p&gt;If you &lt;a href="https://youtu.be/16fgzklcF7Y"&gt;remember the Istio service mesh architecture&lt;/a&gt;, you know that we have this Istiod component, which is the control plane and we have the data plane, which are basically the proxies that are injected into the application Pods. So if you have a microservice application, you would have a Pod for each microservice.&lt;/p&gt;

&lt;p&gt;Then Istio would inject envoy proxy in each of those micro&lt;br&gt;
service Pods.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7l8tituW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avzybalsrivmqbfi4vbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7l8tituW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avzybalsrivmqbfi4vbp.png" alt="Istio architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that means in order to see Istio in action, we need to deploy an example microservices application, where the proxies will be injected. ü§î&lt;/p&gt;

&lt;p&gt;So in this step we need to actually deploy the microservice application in the cluster.&lt;br&gt;
For the demo I'm using this example microservices-demo app: &lt;a href="https://github.com/GoogleCloudPlatform/microservices-demo"&gt;https://github.com/GoogleCloudPlatform/microservices-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To deploy the application in the cluster:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl apply -f kubernetes-manifests.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-configure-automatic-envoy-proxy-injection" class="anchor"&gt;
  &lt;/a&gt;
  5. Configure automatic Envoy Proxy Injection
&lt;/h3&gt;

&lt;p&gt;No we explicitly need to tell Istio to inject the proxies into every Pod that starts in the cluster, since it doesn't inject proxies by default.&lt;/p&gt;

&lt;p&gt;The configuration is actually very simple. We just need to label a namespace in which the pods are running with a label called "istio-injection=enabled" like this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl label namespace default istio-injection=enabled&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;To see the proxies being injected, you will need to restart the microservice Pods. You can do that by deleting the pods and then re-applying the Kubernetes manifests yaml file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-install-istio-addons-for-monitoring-amp-data-visualization" class="anchor"&gt;
  &lt;/a&gt;
  6. Install Istio Addons for Monitoring &amp;amp; Data Visualization üîç üìâ
&lt;/h3&gt;

&lt;p&gt;Now we have the Istio component running in a cluster that automatically injects the envoy proxy container into every Pod that we create in a default namespace. üòé&lt;/p&gt;

&lt;p&gt;That's great, but we don't have any data visualization for what's going on in our microservices. ü§î&lt;/p&gt;

&lt;p&gt;Istio actually collects the metrics from all these proxy containers, so you have all these data about how your microservices are performing, what kind of requests they're getting, metrics data and so on. But we don't see any of this here.&lt;/p&gt;

&lt;p&gt;This is where Istio Addons come in and in the Istio official documentation you actually can see the available integrations, which ship with the Istio release package:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svvB24Gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okkk14dud65ocdqahtvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svvB24Gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okkk14dud65ocdqahtvj.png" alt="Istio integrations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Istio installation folder under &lt;code&gt;samples/addons&lt;/code&gt; you can see the Kubernetes YAML files for those services.&lt;/p&gt;

&lt;p&gt;In order to install them in the cluster, you just need to apply those Kubernetes YAML files using kubectl apply command. E.g. to install Kiali:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl apply -f istio-1.9.0/samples/addons/kiali.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;With Kiali for example you get a great visualization, where you can see how your microservices are communicating with each other:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4__tSSqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6xe74jur7sjrv5j28pd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4__tSSqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6xe74jur7sjrv5j28pd.png" alt="Kiali"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuration for data visualization to work:&lt;/strong&gt;&lt;br&gt;
There is one thing that you need to have in your manifest files for this graph to work. Whenever you're deploying your microservices in Istio enabled cluster, you actually have to have an "app" label on your Deployments and Services:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2s_s8ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zshvktbgt95fat2djj7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2s_s8ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zshvktbgt95fat2djj7h.png" alt="App Labels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without having this, the Pods will still deploy and you won't have any errors, but the visualization will not work!&lt;/p&gt;

&lt;p&gt;Hope this tutorial was helpful for you! üòä ‚≠êÔ∏è&lt;/p&gt;




&lt;p&gt;Watch the full video here ü§ì&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-youtube-voayrodb6xk-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/voAyroDb6xk"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

&lt;p&gt;‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Courses &amp;amp; Ebooks &amp;amp; Bootcamp üöÄ      ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ &lt;br&gt;
‚ñ∫ Become a DevOps Engineer - full educational program: &lt;a href="https://bit.ly/3gEwf4V"&gt;https://bit.ly/3gEwf4V&lt;/a&gt;&lt;br&gt;
‚ñ∫ Udemy courses - get biggest discount here: &lt;a href="http://bit.ly/2OgvzIO"&gt;http://bit.ly/2OgvzIO&lt;/a&gt;&lt;br&gt;
‚ñ∫ Kubernetes 101 - compact and easy-to-read ebook bundle: &lt;a href="https://bit.ly/3mPIaiU"&gt;https://bit.ly/3mPIaiU&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üòç for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>istio</category>
      <category>kubernetes</category>
      <category>microservices</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Understand GraphQL in 5 minutes</title>
      <author>Mehdi Zed</author>
      <pubDate>Fri, 26 Feb 2021 14:33:06 +0000</pubDate>
      <link>https://dev.to/jesuisundev/understand-graphql-in-5-minutes-1oa6</link>
      <guid>https://dev.to/jesuisundev/understand-graphql-in-5-minutes-1oa6</guid>
      <description>&lt;p&gt;When GraphQL arrived on the Internet, it spread like an epidemic. GraphQL has completely changed the way things are done and continues its progression everywhere. If you have five minutes in front of you, I'll explain everything you need to know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#once-upon-a-time" class="anchor"&gt;
  &lt;/a&gt;
  Once upon a time
&lt;/h3&gt;

&lt;p&gt;By 2012, the adoption of mobile phones reached monstrous figures worldwide. &lt;strong&gt;It's such an invasion that companies that didn't adapt their products were at risk.&lt;/strong&gt; At that point, Facebook was at risk.&lt;/p&gt;

&lt;p&gt;Facebook was primarily a web company. &lt;strong&gt;As a result, they made their IOS app like a website, using web-view.&lt;/strong&gt; Very quickly, they realize that web-view was shit (at that time). So they decided to redo it entirely in native, for a better customer experience. Immediately they hit another wall .&lt;/p&gt;

&lt;p&gt;The existing architecture didn't work. &lt;strong&gt;Mainly because the endpoints of their existing REST api don't allow flexibility on the data.&lt;/strong&gt; Multiple round trips to different endpoints were required for nested data, causing slowness and inconsistencies. Part of the payload was not required for most queries, causing unnecessary data transfers. And most importantly, it was tedious for Facebook to handle so many HTTP calls.&lt;/p&gt;

&lt;p&gt;In this infernal context, in February 2012, &lt;a href="https://twitter.com/leeb"&gt;Lee Byron&lt;/a&gt;, &lt;a href="https://twitter.com/dlschafer"&gt;Dan Schafer&lt;/a&gt; and &lt;a href="https://twitter.com/schrockn"&gt;Nick Schrock&lt;/a&gt; reserved some workstations in a corner of Facebook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcy_eecC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/n5BcBNH.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcy_eecC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/n5BcBNH.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very quickly a first prototype of GraphQL, then called SuperGraph, was produced by our three devs. In August 2012, GraphQL was shipped in production with the new native Facebook app. In 2015, the first public version arrives on the internet. &lt;strong&gt;GraphQL is still present today when you scroll your Facebook wall.&lt;/strong&gt; But how did they solve a problem that affected not only Facebook, but the whole industry?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-graphql-" class="anchor"&gt;
  &lt;/a&gt;
  What is GraphQL ?
&lt;/h3&gt;

&lt;p&gt;GraphQL is a &lt;strong&gt;data query language&lt;/strong&gt; for APIs. QL, as in SQL, stands for Query Language. &lt;strong&gt;GraphQL allows to manipulate data in a simple, flexible and very precise way.&lt;/strong&gt; GraphQL is not a programming language nor a framework. GraphQL is a specification to implement your API. Concretely it looks like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;pokemons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;abilities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;damage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;mana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"pokemons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pikachu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"abilities"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Thunder punch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"damage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"mana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"physical"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Thunderbolt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"damage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"mana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electric"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mewtwo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"abilities"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Earthquake"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"damage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"mana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ground"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Brutal swing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"damage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"mana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"physical"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's how you ask for and receive data using GraphQL. Okay, at the moment, it's not clear. First of all, where does this thing fit into your architecture?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--maCqsJ3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/H8Brhcq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maCqsJ3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/H8Brhcq.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dude smiling it's you. And to make the payload I showed you earlier with the Pokemons and their skills, you're in trouble. &lt;strong&gt;You're struggling because the REST API you're using is not made for your needs.&lt;/strong&gt; You end up making one call per Pokemon, then one call per skill for each Pokemon.&lt;/p&gt;

&lt;p&gt;Each time the logic in your application makes a request to the database and sends you a payload. And so, despite your apparent smile, you feel like shooting yourself. That's where GraphQL comes in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lF4vDIYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8vU1KHF.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lF4vDIYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8vU1KHF.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With GraphQL, no more problems. &lt;strong&gt;You make a single POST and you ask exactly what you want via a GraphQL request.&lt;/strong&gt; Then, the server manages everything and you get your full payload.&lt;/p&gt;

&lt;p&gt;With REST, you get objects defined by endpoints. &lt;strong&gt;With GraphQL, you don't adapt to a object defined by the backend, you dynamically define the object you're going to receive on the client side.&lt;/strong&gt; And that changes everything.&lt;/p&gt;

&lt;p&gt;OK, that's all very well, but how does it work in concrete terms? &lt;strong&gt;How does GraphQL access your database and make queries?&lt;/strong&gt; To really understand GraphQL, you have to get your hands on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-me-the-code" class="anchor"&gt;
  &lt;/a&gt;
  Show me the code
&lt;/h3&gt;

&lt;p&gt;I'm going to make you a Javascript implementation (NodeJS).&lt;strong&gt;Be aware that all the following is applicable in any language.&lt;/strong&gt; The GraphQL logic remains the same everywhere since it is above all a specification.&lt;/p&gt;

&lt;p&gt;To start working on GraphQL go to the official site and their implementation list in all languages of the world. To make it simple with NodeJS we need the express-graphql and graphql modules. Let's start by mounting the base server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphqlHTTP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express-graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;schema/query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphQLSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GraphQLSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;graphqlHTTP&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;graphQLSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;graphiql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First of all, we call our dependencies. &lt;strong&gt;Then line 6 we look for our root query which we pass to the main schema on line 7.&lt;/strong&gt; We launch our express server, we expose the /graphql route via an express middleware and finally we listen on port 8080. Let's see what happens inside the schema now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;schema/query.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pokemonsType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;schema/types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RootQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RootQueryType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;pokemons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonsType&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data/pokemons.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RootQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The schema is central in GraphQL. It will dictate the communication between your client and your server. I*&lt;em&gt;t specifies the queries your clients can make, the types of data that can be retrieved and the relationships between these types.&lt;/em&gt;* Everything is defined in this schema. Starting with the root query.&lt;/p&gt;

&lt;p&gt;The root query allows GraphQL to know what type of data can be retrieved. And here, in my root query, I specify that I have a field pokemon line 9 which is a list of type pokemon line 10.&lt;/p&gt;

&lt;p&gt;Then we have a resolver on line 11. &lt;strong&gt;It's the resolvers that do the job of fetching your data from your database.&lt;/strong&gt; A resolver is assigned to each of your fields. And the resolver for my pokemon field is a pokemon object list. My resolver here returns the data via a JSON file that corresponds to an array of pokemons.&lt;/p&gt;

&lt;p&gt;I return a JSON for the data for simplicity and brevity. &lt;strong&gt;But in real life this is where you are supposed to call your database&lt;/strong&gt;, make queries, and return the data. Now let's see what the types look like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;schema/types.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abilitiesType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ability&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;damage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;damage&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accuracy&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;mana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mana&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemonsType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pokemons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;abilities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abilitiesType&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data/abilities.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;abilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ability&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;ability&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkedTo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pokemonsType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pokemonsType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The principle remains the same. We create GraphQL object types that represent our data structure. &lt;strong&gt;We specify fields and for each field, we assign a resolver that will look for the right data.&lt;/strong&gt; It's interesting to see here that I use the context of the parent to filter which abilities to return for each pok√©mon line 44.&lt;/p&gt;

&lt;p&gt;If you want to see a working version of this implementation, &lt;strong&gt;I made a little &lt;a href="https://codesandbox.io/s/graphql-5-minutes-lys1y?fontsize=14&amp;amp;hidenavigation=1&amp;amp;initialpath=%2Fgraphql&amp;amp;theme=dark"&gt;public sandbox&lt;/a&gt; where you can play with it&lt;/strong&gt;. You can see all the files, including the JSON files, and change whatever you want!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/graphql-5-minutes-lys1y?initialpath=/graphql"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Instead of JSON data you could implement the same thing by doing fech on Pok√©API. That would allow you to practice GraphQL as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#epilogue" class="anchor"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h3&gt;

&lt;p&gt;That's it, I can't go any further in the presentation. I'm already over the five minutes of time you gave me. There's a lot more to be said about this technology. The mutations, the cache, the variables and the contexts. I'll stick to the basics. If you want to know more and have some time to spare, I recommend this &lt;a href="https://ultimatecourses.com/blog/graphql-resolvers-an-in-depth-look"&gt;very complete article&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>graphql</category>
      <category>dev</category>
    </item>
    <item>
      <title>Documenting your ExpressWebJs API with Swagger</title>
      <author>Alex Igbokwe</author>
      <pubDate>Fri, 26 Feb 2021 14:23:34 +0000</pubDate>
      <link>https://dev.to/alexigbokwe/documenting-your-expresswebjs-api-with-swagger-36hf</link>
      <guid>https://dev.to/alexigbokwe/documenting-your-expresswebjs-api-with-swagger-36hf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk3ia_zK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u09powimhz3p6vzgimu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk3ia_zK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u09powimhz3p6vzgimu.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost every application today has to be connected to share data with other applications. The best way to do that is through APIs and &lt;a href="https://expresswebjs.com/"&gt;ExpressWebjs&lt;/a&gt; is the goto framework for building your node apis.&lt;/p&gt;

&lt;p&gt;In this tutorial, however, we‚Äôre going to explore Swagger usage along with &lt;a href="https://expresswebjs.com/"&gt;expressWebjs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What is Swagger?&lt;br&gt;
On the Swagger site we can find definition of Swagger:&lt;br&gt;
Swagger is the world‚Äôs largest framework of API developer tools for the OpenAPI Specification(OAS), enabling development across the entire API lifecycle, from design and documentation, to test and deployment.&lt;/p&gt;

&lt;p&gt;In our example, we‚Äôll be making use of the two libraries: &lt;a href="https://github.com/scottie1984/swagger-ui-express"&gt;swagger-ui-express&lt;/a&gt; and &lt;a href="https://github.com/Surnet/swagger-jsdoc"&gt;swagger-jsdoc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first is a module that allows you to feed a Swagger UI (auto-generated views based on the swagger-ui project) from a swagger.json file, or from an inline object.&lt;/p&gt;

&lt;p&gt;The second is about integrating Swagger using JSDoc comments in Docs directory in ExpressWebjs. This is pretty useful, especially when you have extensive APIs and dozens of models.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#application-setup" class="anchor"&gt;
  &lt;/a&gt;
  Application setup
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#install-expresswebjs" class="anchor"&gt;
  &lt;/a&gt;
  Install ExpressWebJs
&lt;/h3&gt;

&lt;p&gt;Run the following command in your terminal to create a new project with ExpressWebJs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   npx expresswebcli new myNewApp
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;cd into your newly created project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   cd myNewApp
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Visit my article on &lt;a href="https://dev.to/alexigbokwe/developing-rest-apis-with-expresswebjs-v2-a-nodejs-framework-part-1-1fg4"&gt;developing rest apis with expresswebjs&lt;/a&gt; or &lt;a href="https://expresswebjs.com/"&gt;expresswebjs&lt;/a&gt; documentation for work through on how to get started with expresswebjs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-swagger" class="anchor"&gt;
  &lt;/a&gt;
  Adding swagger
&lt;/h1&gt;

&lt;p&gt;Now that our application is ready, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnkizaWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hon1onugip8hurlncq1l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnkizaWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hon1onugip8hurlncq1l.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we can now integrate swagger by creating our swagger.json file in the root directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;definition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;openapi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3.0.n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My Website API Documentation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My website API docs with ExpressWebJs and documented with Swagger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://spdx.org/licenses/MIT.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;servers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5100/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Docs/*.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;"apis": ["./Docs/*.js"]&lt;/code&gt; section specifies the path where your actual documentations are. In our case, it is in Docs folder in the root directory.&lt;/p&gt;

&lt;p&gt;After that we can now create our swagger service in App/Service directory.&lt;/p&gt;

&lt;p&gt;In App/Service directory, lets create a Swagger folder with an index.js file. Our path will be App/Service/Swagger/index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;//App/Service/Swagger/index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerJsdoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;swagger-jsdoc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerUi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;swagger-ui-express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../../swagger.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;specs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;swaggerJsdoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;serverApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api-docs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;swaggerUi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;swaggerUi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;specs&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="na"&gt;exporer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#expresswebjs-serviceprovider" class="anchor"&gt;
  &lt;/a&gt;
  ExpressWebJs ServiceProvider
&lt;/h1&gt;

&lt;p&gt;Next we will register our swagger service in our application service provider. Navigate to App/Providers/AppServiceProvider.js file and add our swagger service to be executed at boot time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swagger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../Service/swagger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppServiceProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Register application services.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Bootstrap any application services.
   *
   * @return void
   */&lt;/span&gt;
  &lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;swagger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AppServiceProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note: you can create your own service provider. Read more about &lt;a href="https://expresswebjs.com/2.0/guide/service-provider.html"&gt;ExpressWebjs ServiceProvider in the Documentation site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once all the setup is done, you can now start writing your api documentation in the Docs directory.&lt;/p&gt;

&lt;p&gt;To view your swagger docs, run your project using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and navigate to &lt;code&gt;&lt;a href="http://127.0.0.1/api/api-docs"&gt;http://127.0.0.1/api/api-docs&lt;/a&gt;&lt;/code&gt; in your browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my article &lt;br&gt;
You can follow me on twitter &lt;a href="https://twitter.com/EmekaIgbokwe"&gt;@EmekaIgbokwe&lt;/a&gt;&lt;br&gt;
You can follow ExpressWebJs on twitter &lt;a href="https://twitter.com/expresswebjs"&gt;@expresswebjs&lt;/a&gt;&lt;br&gt;
and don't forget to star on github &lt;a href="https://github.com/Alexigbokwe/ExpressWebJs"&gt;ExpressWebJs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please, let me know if you have any questions in the comment section. üòä&lt;/p&gt;

</description>
      <category>node</category>
      <category>expresswebjs</category>
      <category>javascript</category>
      <category>swagger</category>
    </item>
    <item>
      <title>Awesome HTML tags and attributes</title>
      <author>Dima Prohorenko</author>
      <pubDate>Fri, 26 Feb 2021 13:50:40 +0000</pubDate>
      <link>https://dev.to/sasscrafter/awesome-html-tags-and-attributes-339p</link>
      <guid>https://dev.to/sasscrafter/awesome-html-tags-and-attributes-339p</guid>
      <description>&lt;p&gt;In this post I'm gonna share with you some cool html tags and attributes.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The title attribute specifies extra information about an element.The information is most often shown as a tooltip text when the mouse moves over the element.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"I'm a tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I have a tooltip&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIau0Av1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojtt30g22p3ux14sn7uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIau0Av1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojtt30g22p3ux14sn7uf.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mark tag - everything wrapped between opening and closing brackets will be highlighted. The presence of the mark element is not announced by most screen reading technology in its default configuration.
&lt;a href="https://www.tpgi.com/short-note-on-making-your-mark-more-accessible/"&gt;Here's&lt;/a&gt; a good post on how to fix it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a &lt;span class="nt"&gt;&amp;lt;mark&amp;gt;&lt;/span&gt;paragraph&lt;span class="nt"&gt;&amp;lt;/mark&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uEgeB1CK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws7g5kt8xfpe1bpqrnuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEgeB1CK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws7g5kt8xfpe1bpqrnuk.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML contenteditable attribute indicates if the content should be editable by the user.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;contenteditable&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Write your name here&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXP4xqbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42mx7xxbckz7k90npeqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXP4xqbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42mx7xxbckz7k90npeqq.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The meter element is used to display a gauge. The meter element should not be used to indicate progress (as in a progress bar). For progress bars, use the progress tag.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Disk usage&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"disk-c"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meter&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"disk-c"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"0.6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meter&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"disk-d"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;D:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meter&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"dist-d"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meter&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdqgOnwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/257s8r8e8bfpuy7775tv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdqgOnwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/257s8r8e8bfpuy7775tv.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;base tag specifies the base URL and/or target for all relative URLs in a document. There can only be one single base element in a document, and it must be inside the head element.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/example.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it, hope you've found some usefull info here. Stay safe and have a great day :)&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Making the Move From Developer to Solutions Architect</title>
      <author>Allen Helton</author>
      <pubDate>Fri, 26 Feb 2021 13:21:10 +0000</pubDate>
      <link>https://dev.to/aws-builders/making-the-move-from-developer-to-solutions-architect-11d</link>
      <guid>https://dev.to/aws-builders/making-the-move-from-developer-to-solutions-architect-11d</guid>
      <description>&lt;p&gt;"So what?"&lt;/p&gt;

&lt;p&gt;The first time somebody asked me that question in a sprint review I had no idea what to say.&lt;/p&gt;

&lt;p&gt;I was a junior developer at the time and the question destroyed me.&lt;/p&gt;

&lt;p&gt;I stammered. I fidgeted. I looked over to my boss for help. I was truly at a loss for words.&lt;/p&gt;

&lt;p&gt;I had just finished demoing my first project start to finish. I was proud to say that &lt;em&gt;I did this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But when a stakeholder asked me "so what?" I didn't know what to say. &lt;/p&gt;

&lt;p&gt;I knew how my project worked. That was it. I didn't know about how it played a role in the system.&lt;/p&gt;

&lt;p&gt;I knew nothing about context. I didn't realize it was important. Requirements were given to me and I satisfied them with my code.&lt;/p&gt;

&lt;p&gt;I had no idea that &lt;em&gt;actually writing the code was only a tiny piece of software development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to go from an individual contributor to a solutions architect, you must learn context. You have to see the &lt;strong&gt;big picture&lt;/strong&gt;. It's not about writing code, it's about how systems interact with each other.&lt;/p&gt;

&lt;p&gt;Beginning your journey into the world of architecture can be tricky. Where do you start? How on earth can you develop the skills you need to make that move?&lt;/p&gt;

&lt;p&gt;It might not be as hard as you think.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-a-step-back" class="anchor"&gt;
  &lt;/a&gt;
  Take a Step Back
&lt;/h2&gt;

&lt;p&gt;As a software developer, you're tasked with writing code to solve a specific problem. Depending on how your stories are written, you may or may not have business context around the change you're making. &lt;/p&gt;

&lt;p&gt;To begin changing your mindset from developer to architect, take a step back. Ask yourself, &lt;em&gt;"what impact is my change making on the app?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Figure out the pieces that make your app work. Is it composed of multiple modules that all play together? Is it a client/server app? Is it N-tier?&lt;/p&gt;

&lt;p&gt;Your goal is to understand how &lt;strong&gt;all&lt;/strong&gt; the pieces communicate with each other. Once you figure out how your app works, try to take another step back. &lt;/p&gt;

&lt;p&gt;How does your app play in the ecosystem? If your company offers multiple products, is your app part of a suite? Does it interact with other apps? How is yours consumed and what are the expectations of its behavior?&lt;/p&gt;

&lt;p&gt;Imagine the code you're writing is a &lt;em&gt;piston&lt;/em&gt; in a car engine. It performs a specific function to help the engine run. By itself, it is useless. But connected to all the other pieces in the engine it has tremendous value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IjzeO80P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/architect_1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IjzeO80P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/architect_1.jpg" alt="Image by [Paul Brennan](https://pixabay.com/users/paulbr75-2938186/?utm_source=link-attribution&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_campaign=image&amp;amp;amp;utm_content=1738309) from [Pixabay](https://pixabay.com/?utm_source=link-attribution&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_campaign=image&amp;amp;amp;utm_content=1738309)"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image by &lt;a href="https://pixabay.com/users/paulbr75-2938186/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1738309"&gt;Paul Brennan&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1738309"&gt;Pixabay&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your app is the engine. It has moving parts and they all depend on each other to work together in order to function properly. But an engine by itself doesn't do much good.&lt;/p&gt;

&lt;p&gt;The ecosystem and suite of products your company offers is the car. Your app is the engine to the car. It's just a piece, but it's necessary to have a working vehicle. &lt;/p&gt;

&lt;p&gt;Continuing to step back until you see the whole image is crucial in your journey to become a solutions architect. Keep expanding your field of view until you see the big picture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-to-ask-why" class="anchor"&gt;
  &lt;/a&gt;
  Learn To Ask Why
&lt;/h2&gt;

&lt;p&gt;I'm going to go ahead and make an assumption that if you're a software developer, you love knowing &lt;em&gt;how&lt;/em&gt; and &lt;em&gt;why&lt;/em&gt; things work. &lt;/p&gt;

&lt;p&gt;Which is perfect because that's a necessary trait of a great solutions architect. &lt;/p&gt;

&lt;p&gt;Have you ever seen those tv shows where a little kids bugs the crap out of their parents by asking "why? Why? Why?" over and over again? If so, you have a perfect example of what you need to do. &lt;/p&gt;

&lt;p&gt;It's one thing to understand how it all works. But it's another thing entirely to understand &lt;em&gt;why&lt;/em&gt; it was done.&lt;/p&gt;

&lt;p&gt;Why is a piston important to how an engine works? Why was it designed to be in that shape and in that location in the engine?&lt;/p&gt;

&lt;p&gt;Asking &lt;em&gt;why&lt;/em&gt; is key to go from &lt;strong&gt;understanding&lt;/strong&gt; to &lt;strong&gt;comprehension&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you look at a system that was designed by a solutions architect who only had a simple understanding of how things work, it will be obvious.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A good architect makes a complex solution out of a complex problem. A great architect makes a simple solution out of a complex problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Understanding how pieces fit together will give you enough to satisfy the problem. You will take the pieces you see and stitch them together. You will make a complex solution out of a complex problem. &lt;/p&gt;

&lt;p&gt;But if you truly understand the ins and outs the components and pieces at your disposal, &lt;em&gt;you comprehend them&lt;/em&gt;,  your ability to design a better system increases exponentially. &lt;/p&gt;

&lt;p&gt;Comprehension opens the door to creative yet simple solutions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relate-problems-to-known-solutions" class="anchor"&gt;
  &lt;/a&gt;
  Relate Problems to Known Solutions
&lt;/h2&gt;

&lt;p&gt;Becoming a solutions architect is no longer about coding 100% of the time. You don't get the luxury of designing a solution, implementing it, and moving on to the next one. &lt;/p&gt;

&lt;p&gt;Once you finish your design you have to explain it to everyone. Developers, stakeholders, product folks, support, you name it, they need to understand it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqWr575q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/architect_2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqWr575q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/architect_2.jpg" alt="Photo by [Austin Distel](https://unsplash.com/@austindistel?utm_source=unsplash&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/presentation?utm_source=unsplash&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_content=creditCopyText)"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@austindistel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Austin Distel&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/presentation?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With this being said, soft skills become incredibly important. Being able to talk confidently and effectively become your most powerful tool.&lt;/p&gt;

&lt;p&gt;Personally, I've found the most success in communicating designs through &lt;a href="https://www.readysetcloud.io/blog/allen.helton/the-mighty-metaphor-your-new-secret-weapon"&gt;the use of metaphors&lt;/a&gt;. Relating your ideas to a simple concept that others understand makes it easy to grasp what you're saying.&lt;/p&gt;

&lt;p&gt;If you can effectively communicate a highly technical solution to a non-technical audience, you were made for this job.&lt;/p&gt;

&lt;p&gt;Relating problems to known solutions isn't all about communication. &lt;strong&gt;It's also about stealing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By stealing, I actually mean using ideas from things you see every day. There's no need to re-invent the wheel. There are thousands of design patterns and examples out there that you can apply directly to your project.&lt;/p&gt;

&lt;p&gt;If you're building an application that manages uploading and maintenance of files, why not take a look at &lt;a href="https://drive.google.com"&gt;Google Drive&lt;/a&gt; and see if you can mirror some of the functionality they built.&lt;/p&gt;

&lt;p&gt;Or if you're designing a system that builds work schedules for employees, why not take a look at Outlook or Lotus Notes for inspiration? These are wildly successful applications that would only benefit you if you &lt;em&gt;borrowed&lt;/em&gt; design patterns from.&lt;/p&gt;

&lt;p&gt;The great thing about being a solutions architect is that not every idea has to be original. You can stitch together pieces from multiple solutions into a cohesive design for your application. That's what it means to be great at the job. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Draw inspiration from everywhere.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#look-ahead" class="anchor"&gt;
  &lt;/a&gt;
  Look Ahead
&lt;/h2&gt;

&lt;p&gt;A great solutions architect lives in the future. They design a system for &lt;em&gt;now&lt;/em&gt; that sets the company up for success in the future. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dssPTCN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/architect_3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dssPTCN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/architect_3.jpg" alt="Photo by [Slim Emcee](https://unsplash.com/@truth_from_africa_photography?utm_source=unsplash&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/binoculars?utm_source=unsplash&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_content=creditCopyText)"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@truth_from_africa_photography?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Slim Emcee&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/binoculars?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Keep an eye out for &lt;a href="https://www.inc.com/jeff-haden/amazon-founder-jeff-bezos-this-is-how-successful-people-make-such-smart-decisions.html"&gt;"one way door"&lt;/a&gt; decisions. Decisions that if you make now, you're stuck with in the future. If you can, put off decisions until the &lt;a href="https://www.readysetcloud.io/blog/allen.helton/how-to-write-software-at-the-last-responsible-moment"&gt;last responsible moment&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;When you're designing a system, determine how you are positioning yourself. Are you enabling work in the future to be easily modularized? Are you going to get trapped in a scenario you can't get out of? &lt;/p&gt;

&lt;p&gt;Back to the car reference, are you setting yourself up to build a Pinto or a Ferrari?&lt;/p&gt;

&lt;p&gt;Remember that when you're trying to move from developer to architect, knowing the plan is crucial. What do you need to be intentional about? What are the company goals in the next year, 5 years, or 10 years? &lt;/p&gt;

&lt;p&gt;Don't let today's defects alter your plan significantly. Do let it influence the design. Learn from your experience. But beyond all else, make sure you open up opportunity for the company in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practice" class="anchor"&gt;
  &lt;/a&gt;
  Practice
&lt;/h2&gt;

&lt;p&gt;The best part about software developers is that they love their craft. I've never met a developer who doesn't have &lt;a href="https://www.readysetcloud.io/blog/allen.helton/5-reasons-to-finally-start-that-side-project-youve-been-putting-off-3970dbcc0b27"&gt;at least one side project&lt;/a&gt; at all times. &lt;/p&gt;

&lt;p&gt;We love to work. We love to learn. &lt;/p&gt;

&lt;p&gt;With that in mind, if you want to practice architecting solutions, do it in your spare time. Take a system that's already in place, like your favorite website, and start diagramming what you think the architecture is. Work backward. &lt;/p&gt;

&lt;p&gt;Better yet, if you don't already have it documented, diagram the apps you work on in your day job. They will immediately get consumed by your company and it will help with your comprehension. &lt;/p&gt;

&lt;p&gt;You have other options to teach you how to become a solutions architect as well. You can take an AWS certification exam to &lt;a href="https://aws.amazon.com/certification/certified-solutions-architect-associate/"&gt;become a solutions architect&lt;/a&gt;. Becoming certified makes you more valuable as a developer, but it also strengthens your understanding of how to do the job.&lt;/p&gt;

&lt;p&gt;Take every opportunity you can to learn. &lt;a href="https://www.readysetcloud.io/blog/allen.helton/getting-started-with-mentorship-what-is-it-all-about-ce475ff4710"&gt;Get a mentor&lt;/a&gt;. People want to help you be the best you can be.&lt;/p&gt;

&lt;p&gt;Most importantly, have fun with it. Designing systems is an incredible creative outlet that brings joy to my daily life. I'm sure it will for you too.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

</description>
      <category>growth</category>
      <category>tech</category>
      <category>career</category>
    </item>
    <item>
      <title>How to Build an Alarm Clock Using Python</title>
      <author>Sai Ashish</author>
      <pubDate>Fri, 26 Feb 2021 13:15:57 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/how-to-build-an-alarm-clock-using-python-4mck</link>
      <guid>https://dev.to/theinsightfulcoder/how-to-build-an-alarm-clock-using-python-4mck</guid>
      <description>&lt;p&gt;Welcome to the  &lt;a href="https://hashnode.com/series/python-projects-for-beginners-ckk31d9370h0vrus1blfl0a4y"&gt;Python Projects for Beginners Series&lt;/a&gt; üôãüèª‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;I'm  &lt;a href="https://www.linkedin.com/in/sai-ashish/"&gt;Sai Ashish&lt;/a&gt; and today, we are going to build an alarm clock using Python which plays your favorite song when the time is up üéº&lt;/p&gt;

&lt;p&gt;How cool is that? Tick, tick, tick. Let's start building üöÄ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#through-this-project-youre-going-to-learn-about" class="anchor"&gt;
  &lt;/a&gt;
  Through This Project, You're Going to Learn About:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. The Playsound Module
2. The Datetime Module
3. Basics of Python: Conditional Statements, Iterative Statements &amp;amp; Slicing a string 
4. Implementation of Your Very Own Alarm Clock
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can access the basics of python used in this project &lt;a href="https://github.com/SaiAshish-Konchada/Python-Projects-for-Beginners/tree/main/Alarm%20Clock"&gt;here&lt;/a&gt;. Don't forget to smash the star button if it provided value to you üíØ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-modules-required" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Modules Required:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-what-is-the-playsound-module" class="anchor"&gt;
  &lt;/a&gt;
  1. What is the Playsound module?
&lt;/h3&gt;

&lt;p&gt;For this project, we would be using the Playsound module. Playsound is a pure Python, cross-platform, single function module with no dependencies for playing sounds. In other words, you can play a sound with just a single line of code.  The Playsound module lets us play our favorite song with just one line of code!&lt;/p&gt;

&lt;p&gt;Playsound is not available by default in the Python Standard Library and has to be installed. To do this, we will use pip, the standard package manager for Python. All you've to do is, go to the and terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install playsound
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can access the official documentation of Playsound Module from  &lt;a href="https://pypi.org/project/playsound/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-what-is-the-datetime-module" class="anchor"&gt;
  &lt;/a&gt;
  2. What is the Datetime Module?
&lt;/h3&gt;

&lt;p&gt;A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Import the datetime module and display the current date:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import datetime

x = datetime.datetime.now()
print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we run the above code snippet, we obtain the output as:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2021-01-21 00:01:15.165663&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The date contains year, month, day, hour, minute, second, and microsecond.&lt;/p&gt;

&lt;p&gt;You can access the official documentation of the Datetime module from  &lt;a href="https://docs.python.org/3/library/datetime.html"&gt;here&lt;/a&gt; to know more about it.&lt;/p&gt;

&lt;p&gt;Source:  &lt;a href="https://www.w3schools.com/python/python_datetime.asp"&gt;W3Schools&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-time-to-code" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Time to Code!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LwWWhFKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611771833314/Uugrd3XOg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LwWWhFKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611771833314/Uugrd3XOg.jpeg" alt="The Insightful Coder: Time to Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step is to import the required modules into our environment. To do that we type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#importing the required modules
from datetime import datetime   
from playsound import playsound
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we need to ask the user for the time he wants to set the alarm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alarm_time = input("Enter the time of alarm to be set:HH:MM:SS AM/PM\n")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this stage, we have obtained a point of time in the format of HH:MM: SS AM/PM. To compare this format of time with the system time in our computer, we need to extract the hours, minutes, seconds, and period from the above string. We achieve this using string slicing. &lt;/p&gt;

&lt;p&gt;String slicing helps you obtain a part of a word/sentence. Let's assume the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;s = "The Insightful Coder"
print(s[4:11])
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Taking the first index as 0, slicing prints the characters from position 4 to position 11 (not included).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
Insight
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Mini- Challengeüß†&lt;/p&gt;

&lt;p&gt;Do you think you can now obtain hours, minutes and seconds from the string HH:MM:SS? Try &lt;a href="https://www.w3schools.com/python/trypython.asp?filename=demo_string2"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Answer Reveal üîì&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#obtaining the hour
alarm_hour=alarm_time[0:2]

#obtaining the minute
alarm_minute=alarm_time[3:5]

#obtaining the second
alarm_seconds=alarm_time[6:8]

#obtaining the period
alarm_period = alarm_time[9:11]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Kudos to all the insightful coders who dared to try ü•≥&lt;/p&gt;

&lt;p&gt;Next, let's inform the user his alarm was set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Alarm Set!")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;All we have to do now is compare and find when the current time matches the alarm time set by the user. To check every instant of time, we will make use of the While loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while True:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside this loop, we would first acquire the current time and store it inside a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;now = datetime.now()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The current time obtained is not in the string format. To obtain a string from a datetime object we make use of the strftime() method. Obtaining the hour, minute and seconds of current time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;current_hour = now.strftime("%I")
current_minute = now.strftime("%M")
current_seconds = now.strftime("%S")
current_period = now.strftime("%p")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;%I, %M, %S etc. are format codes. The strftime() method takes one or more format codes as an argument and returns a formatted string based on it. Read more about it &lt;a href="https://www.programiz.com/python-programming/datetime/strftime"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have both the strings now. Let's compare it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(alarm_period==current_period and alarm_hour==current_hour and alarm_minute==current_minute and alarm_seconds==current_seconds):
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once, the time is up, we print a message saying, "Wake up!" and play a song. Let's see it in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Wake Up!")
playsound('/path/to/a/sound/file/you/want/to/play.mp3')
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we break out of the loop using the break statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;break
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Final Source Code Could Be Seen Below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wKpjNL84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611258436851/-VRByMBWX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKpjNL84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611258436851/-VRByMBWX.png" alt="Source code of building an alarm clock using python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it, folks! You now have built your very own alarm clock using just 18 lines of code üë©üèª‚Äçüíª You can download the source code to this project &lt;a href="https://github.com/SaiAshish-Konchada/Python-Projects-for-Beginners/tree/main/Alarm%20Clock"&gt;here&lt;/a&gt;. Do hit the twinkle star, if this article provided value to you üî•&lt;/p&gt;

&lt;p&gt;And while you're at it, consider giving this blog the maximum love you can and I promise to give you such value bombs every week üí£ Until then, take care üôãüèª‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-insights-by-the-insightful-coder-" class="anchor"&gt;
  &lt;/a&gt;
  Bonus Insights by  &lt;a href="https://theinsightfulcoder.com/"&gt;The Insightful Coder&lt;/a&gt; :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Interested in Building Your Own Artificial Intelligence Projects using Python?: Check out the &lt;a href="https://hashnode.com/series/python-ai-series-ckkft33ux016dwjs11xlqbz4v"&gt;Python AI Series&lt;/a&gt;üß†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wanna Discover Some Valuable Tech-Hacks üõ†?: Check out the &lt;a href="https://hashnode.com/series/tech-hacks-for-everybody-ckk3juqc10ihoqps16q0geabj"&gt;Tech-Hacks for Everybody Series&lt;/a&gt;üòé&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wanna Interact With Me üôãüèª‚Äç‚ôÇÔ∏è? Connect With Me on Your Favourite Platform &lt;a href="https://theinsightfulcoder.com/contact-me"&gt;Here&lt;/a&gt;  ü§ùüèª&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find and Download All My Project Source Codes at My &lt;a href="https://github.com/SaiAshish-Konchada"&gt;Github Repository&lt;/a&gt;  üéÅ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Pluck single values out of ActiveRecord models or Enumerables</title>
      <author>matt swanson</author>
      <pubDate>Fri, 26 Feb 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/pluck-single-values-out-of-activerecord-models-or-enumerables-2gjc</link>
      <guid>https://dev.to/swanson/pluck-single-values-out-of-activerecord-models-or-enumerables-2gjc</guid>
      <description>&lt;p&gt;Rails has a great, expressive term called &lt;code&gt;pluck&lt;/code&gt; that allows you to grab a subset of data from a record. You can use this on ActiveRecord models to return one (or a few) columns.&lt;/p&gt;

&lt;p&gt;But you can also use the same method on regular old &lt;code&gt;Enumerables&lt;/code&gt; to pull out all values that respond to a given key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;In Rails, use &lt;code&gt;pluck&lt;/code&gt; to query a subset of columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Shoe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SELECT "shoes.*" from "shoes"&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; ["Air Force 1", "NMD_2", "Air Jordans", ...]&lt;/span&gt;
&lt;span class="c1"&gt;# This returns an array with all shoe names, but our database query pulled down all of the columns on the `shoes` table&lt;/span&gt;

&lt;span class="no"&gt;Shoe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SELECT "shoes.name" from "shoes"&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; ["Air Force 1", "NMD_2", "Air Jordans", ...]&lt;/span&gt;
&lt;span class="c1"&gt;# Same result, but we only query exactly the columns we wanted&lt;/span&gt;

&lt;span class="no"&gt;Shoe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:brand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SELECT "shoes"."name", "shoes"."brand" FROM "shoes"&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [["Air Jordan 1 Mid", "Nike"], ["Air Jordan 1 Mid", "Nike"], ... ]&lt;/span&gt;

&lt;span class="no"&gt;Shoe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:brand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SELECT DISTINCT "shoes"."brand" FROM "shoes"&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; ["Nike", "Adidas", ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also use &lt;code&gt;pluck&lt;/code&gt; with &lt;code&gt;Enumerables&lt;/code&gt; when using &lt;code&gt;ActiveSupport&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"David"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"Rafael"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"Aaron"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; ["David", "Rafael", "Aaron"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I find the &lt;code&gt;Enumerable&lt;/code&gt; version to be particularly handy when dealing with JSON data from external APIs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"httparty"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_support"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_support/core_ext"&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTTParty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://api.stackexchange.com/2.2/questions?site=stackoverflow'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;questions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s2"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; [&lt;/span&gt;
&lt;span class="c1"&gt;# "JavaScript to Python - Interpreting JavasScript .filter() to a Python user",&lt;/span&gt;
&lt;span class="c1"&gt;# "Nuxt generate and firebase gives timer warning",&lt;/span&gt;
&lt;span class="c1"&gt;# "Variable expected error when I increment the value of a map",&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="c1"&gt;# ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While &lt;code&gt;pluck&lt;/code&gt; is most often used with Hashes, you can use it with any object that responds to the message you pass in ‚Äì including regular Ruby objects or Structs.&lt;/p&gt;

&lt;p&gt;Next time you find yourself calling &lt;code&gt;map&lt;/code&gt; to get back a single value, see if your code might be improved by switching to &lt;code&gt;pluck&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Rails API Docs: &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-pluck"&gt;ActiveRecord#pluck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rails API Docs: &lt;a href="https://edgeguides.rubyonrails.org/active_support_core_extensions.html#pluck"&gt;Enumerable#pluck&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top skills you need to master angular üë®‚Äçüíª</title>
      <author>Islam Muhammad</author>
      <pubDate>Fri, 26 Feb 2021 12:35:45 +0000</pubDate>
      <link>https://dev.to/imm9o/top-skills-you-need-to-master-angular-44pj</link>
      <guid>https://dev.to/imm9o/top-skills-you-need-to-master-angular-44pj</guid>
      <description>&lt;p&gt;Before going ahead, I assume you have a basic understanding of angular if not please check this &lt;a href="https://www.freecodecamp.org/news/want-to-learn-angular-heres-our-free-33-part-course-by-dan-wahlin-fc2ff27ab451/"&gt;course&lt;/a&gt; from Dan Wahlin. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-angular" class="anchor"&gt;
  &lt;/a&gt;
  What is angular?
&lt;/h1&gt;

&lt;p&gt;Angular is a front-end framework to build web applications that can be work across multiple platforms.&lt;/p&gt;

&lt;p&gt;Angular has a steep learning curve composing a lot of software terms and that makes it harder for beginners but the good part is you don't have to know everything about those topics to get started because the angular team did a good job hiding much complexity away to make you focus on building rather than learning.  &lt;/p&gt;

&lt;p&gt;In this article, I will show you from my experience what you have to learn to master angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-directives" class="anchor"&gt;
  &lt;/a&gt;
  1. Directives
&lt;/h2&gt;

&lt;p&gt;Directives are one of the core features of Angular. They allow an Angular developer to write new, application-specific HTML syntax. In actual, directives are functions that are executed by the Angular compiler when the same finds them in the DOM.&lt;/p&gt;

&lt;p&gt;There are three kinds of directives in Angular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components‚Äîdirectives with a template.&lt;/li&gt;
&lt;li&gt;Structural directives‚Äîchange the DOM layout by adding and removing DOM elements.&lt;/li&gt;
&lt;li&gt;Attribute directives‚Äîchange the appearance or behavior of an element, component, or another directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learning the difference between those kinds, how to use it properly and how to create a custom one &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-decorators" class="anchor"&gt;
  &lt;/a&gt;
  2. Decorators
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Decorators provide a way to add both annotations and a meta-programming syntax for class declarations and members. Decorators are a &lt;a href="https://github.com/tc39/proposal-decorators"&gt;stage 2 proposal&lt;/a&gt; for JavaScript and are available as an experimental feature of TypeScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you work with angular for awhile, you for sure noticed this wired syntax which is called decorators or annotations. Angular used it a lot internal and in your code, you can go deep and learn how to &lt;a href="https://ultimatecourses.com/blog/angular-decorators"&gt;build one from scratch&lt;/a&gt; or learn what &lt;a href="https://angular.io/api?type=decorator"&gt;angular provide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Type of decorators in angular&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Class decorators, e.g. &lt;code&gt;@Component&lt;/code&gt; and &lt;code&gt;@NgModule&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Property decorators for properties inside classes, e.g. &lt;code&gt;@Input&lt;/code&gt; and &lt;code&gt;@Output&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Method decorators for methods inside classes, e.g. &lt;code&gt;@HostListener&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Parameter decorators for parameters inside class constructors, e.g. &lt;code&gt;@Inject&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more than 15 decorators available in angular you can check them all here &lt;a href="https://netbasal.com/exploring-the-various-decorators-in-angular-b208875b207c"&gt;Exploring the Various Decorators in Angular&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dependency-injection" class="anchor"&gt;
  &lt;/a&gt;
  3. Dependency injection
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Dependency injection, or DI, is a design pattern in which a class requests dependencies from external sources rather than creating them.&lt;br&gt;
( &lt;a href="//angular.io"&gt;angular.io&lt;/a&gt; )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one of the core features in angular learning how to create it and how to provide it, you can inject anything starting from &lt;a href="https://angular.io/guide/dependency-injection-providers#injecting-a-configuration-object"&gt;objects&lt;/a&gt;, &lt;a href="https://angular.io/guide/dependency-injection-providers#using-factory-providers"&gt;functions&lt;/a&gt; to class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-layout-composition" class="anchor"&gt;
  &lt;/a&gt;
  4. Layout Composition
&lt;/h2&gt;

&lt;p&gt;Layout Composition is a way to composing different blocks like component, directives, pipes, and service to solve the business need &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/isaacplmann/0255c1f42ee6c1dad87586b1f6719023"&gt;Advanced Component Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=oHTm5LYkgEY"&gt;A Philosophy for Designing Components with Composition&lt;/a&gt; - Jeremy Elbourn | ng-conf&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-how-change-detection-work-in-angular" class="anchor"&gt;
  &lt;/a&gt;
  5. How change detection work in angular
&lt;/h2&gt;

&lt;p&gt;Change detection is the mechanism designed to track changes in an application state and render the updated state on the screen. It ensures that the user interface always stays in sync with the internal state of the program.&lt;/p&gt;

&lt;p&gt;Angular uses &lt;a href="https://indepth.dev/posts/1059/do-you-still-think-that-ngzone-zone-js-is-required-for-change-detection-in-angular"&gt;ZoneJS&lt;/a&gt; to intercept events that occurred in the application and run a change detection cycle automatically.&lt;/p&gt;

&lt;p&gt;For learning how change detections work and how to optimize it, read this article &lt;a href="https://dev.to/imm9o/rules-of-change-detections-in-angular-5hhm"&gt;Change detections rules in angular&lt;/a&gt; which I wrote it before&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honorable-mention" class="anchor"&gt;
  &lt;/a&gt;
  Honorable Mention
&lt;/h2&gt;

&lt;p&gt;The previous mention topics earlier are the basic building blocks for any angular apps, but there are many topics not related to angular by itself so I will mention them here with good resources to learn it üòç&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Object-Oriented Programming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is one of the most popular programming paradigms in the software industry and it is basically a way to structure your app based on objects and the relations between them so it is called object-oriented. Learn object-oriented is a great way to succeed in the software industry and a great bounce for mastering angular. &lt;a href="https://twitter.com/moshhamedani"&gt;Mosh Hamedani&lt;/a&gt; did a good job explaining object-oriented programming with nice Illustrations (My Prefer way to learn) don't miss it out &lt;a href="https://www.youtube.com/watch?v=pTB0EiLXUC8"&gt;Object-oriented Programming in 7 minutes&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=vDJpGenyHaA"&gt;JavaScript OOP Crash Course (ES5 &amp;amp; ES6)&lt;/a&gt; - Traversy Media&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=fsVL_xrYO0w"&gt;Object Oriented vs Functional Programming with TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsaOJTMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikwbv5dwaops3bunngs1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsaOJTMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikwbv5dwaops3bunngs1.png" alt="Principles of Object-Oriented Programming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Typescript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typescript by far is &lt;a href="https://2020.stateofjs.com/en-US/awards/"&gt;the most adopted technology&lt;/a&gt; in web development it helps you make your code type-safe and future proof. First, you need to know that typescript isn't a completely different programming language actually, it is called javascript superset language because every valid javascript syntax is also valid in typescript and you can check &lt;a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals"&gt;their goals&lt;/a&gt; for more details especially points 6,7 and 8. Second, javascript has types but it is &lt;a href="https://flaviocopes.com/loosely-strongly-typed/"&gt;a loosely typed language&lt;/a&gt; it means that when you declare a variable as a string you can change it later to the number, and the javascript engine will not complain so using typescript to make our code strongly typed to prevent and catch those errors earlier, Finally typescript is a compiler whiches is used to convert your code to normal javascrpt without types and on top of that angular build custom compiler called &lt;a href="https://indepth.dev/posts/1242/an-in-depth-overview-of-angular-compilers"&gt;ngtsc&lt;/a&gt; It is a typescript compiler with a set of Angular transforms.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/"&gt;Typescrpt offical docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9gUgr39Q_yD6v-bSyMwKPUI"&gt;TypeScript Tutorial&lt;/a&gt; - The net ninja&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/2021/01/dynamic-static-typing-typescript/"&gt;Dynamic Static Typing In TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.techatbloomberg.com/blog/10-insights-adopting-typescript-at-scale/"&gt;10 Insights from Adopting TypeScript at Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=anphffaCZrQ"&gt;Deep Dive into the Angular Compiler&lt;/a&gt; - Alex Rickabaugh | AngularConnect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RnJQmL_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ctqwkmxnzaot2ltgqy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RnJQmL_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ctqwkmxnzaot2ltgqy1.png" alt="strong, weak, static and dynamic type"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Rxjs&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ReactiveX: Reactive programming combines the &lt;a href="https://en.wikipedia.org/wiki/Observer_pattern"&gt;Observer pattern&lt;/a&gt; with the &lt;a href="https://en.wikipedia.org/wiki/Iterator_pattern"&gt;Iterator pattern&lt;/a&gt; and &lt;a href="https://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions"&gt;functional programming with collections&lt;/a&gt; to fill the need for an ideal way of managing sequences of events. (&lt;a href="https://rxjs-dev"&gt;rxjs-dev&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RxJS = Observables + Operators + Schedulers + Observer + Subscription those are the main building blocks in rxjs to achive reactive programming paradigms which are based on events or what we call event-driven. First, differentiate between &lt;a href="https://luukgruijs.medium.com/understanding-hot-vs-cold-observables-62d04cf92e03"&gt;cold and hot observables&lt;/a&gt;, Second differentiate between &lt;a href="https://luukgruijs.medium.com/understanding-rxjs-subjects-339428a1815b"&gt;Subject&lt;/a&gt;, &lt;a href="https://luukgruijs.medium.com/understanding-rxjs-behaviorsubject-replaysubject-and-asyncsubject-8cc061f1cfc0"&gt;BehaviorSubject&lt;/a&gt;, &lt;a href="https://luukgruijs.medium.com/understanding-rxjs-behaviorsubject-replaysubject-and-asyncsubject-8cc061f1cfc0"&gt;ReplaySubject&lt;/a&gt;, and &lt;a href="https://luukgruijs.medium.com/understanding-rxjs-behaviorsubject-replaysubject-and-asyncsubject-8cc061f1cfc0"&gt;AsyncSubject&lt;/a&gt;, Finaly, learn the oberators esbacailly the most common used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ultimatecourses.com/blog/rxjs-observables-observers-operators"&gt;RxJS: Observables, Observers and Operators Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=2LCo926NFLI"&gt;RxJS Quick Start with Practical Examples&lt;/a&gt; - Fireship&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=65Us8NwmYf4"&gt;Top 7 RxJS Concepts for Angular Developers&lt;/a&gt; - Fireship&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ewcoEYS85Co"&gt;RxJS Top Ten - Code This, Not That&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=ldRdjc-60PM"&gt;Why Should You Care About RxJS Higher-order Mapping Operators?&lt;/a&gt; - Deborah Kurata | ng-conf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8udz5Yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spuuqochw6jfa6q9dj3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8udz5Yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spuuqochw6jfa6q9dj3e.png" alt="Event Driven Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Learning those topics will make you fluent in angular and make you more productive with a lot of confidence. &lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>rxjs</category>
    </item>
    <item>
      <title>How To Build an SMTP Mail Server with Express, Node, and Gmail</title>
      <author>Michael R.</author>
      <pubDate>Fri, 26 Feb 2021 12:07:36 +0000</pubDate>
      <link>https://dev.to/killshot13/how-to-build-an-smtp-mail-server-with-express-node-and-gmail-aof</link>
      <guid>https://dev.to/killshot13/how-to-build-an-smtp-mail-server-with-express-node-and-gmail-aof</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Recently I had the opportunity to develop and integrate an SMTP Email Server into a more extensive full-stack application. Today we will reference the code from my solution for this tutorial. &lt;/p&gt;

&lt;p&gt;We'll primarily be using Express and Node to create this server. We‚Äôll also integrate Nodemailer to construct a mailable object and Gmail SMTP Server to deliver our emails free of charge.&lt;/p&gt;

&lt;p&gt;The full codebase can be viewed here:&lt;/p&gt;





&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/killshot13"&gt;
        killshot13
      &lt;/a&gt; / &lt;a href="https://github.com/killshot13/express-smtp-mailer"&gt;
        express-smtp-mailer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A production-ready Node backend with an Express SMTP mail server configurable for use with contact forms, subscriptions, etc.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Before we start coding, we should quantify the expected functionality of our Express mail server. We can always refer back to this list later if confusion develops.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Establish API routes&lt;/em&gt; to a contact form on the frontend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Receive user data&lt;/em&gt; from these routes upon form submission.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Format a mailable JSON object&lt;/em&gt; with the data received.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Construct a transport function&lt;/em&gt; with Nodemailer in preparation for delivery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Obtain authorization&lt;/em&gt; from Gmail using credentials stored in the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Call the transport function,&lt;/em&gt; prompting Nodemailer to handoff the email object to the Gmail SMTP Server for delivery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Request confirmation&lt;/em&gt; of successful delivery and return an error message if not received.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Upon completion, we will have the perfect backend for processing contact forms. Alternatively, our server will also provide a solid base to build a full-stack MERN app with plenty of functionality.&lt;/p&gt;

&lt;p&gt;The production version of the server we are building today powers the backend of &lt;a href="https://ormica.com"&gt;Ormica&lt;/a&gt;, a real estate investment firm in S. Florida.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0jQDtd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6lgbz7trbzbw34ris8jb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0jQDtd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6lgbz7trbzbw34ris8jb.jpg" alt="Screenshot of the source code on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A basic understanding of fundamental programming concepts and familiarity with at least one server-side programming language such as [&lt;code&gt;Node&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt;, &lt;code&gt;PHP&lt;/code&gt;].&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A code editor such as &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodejs.org/en/download"&gt;Node.js&lt;/a&gt; and &lt;a href="https://www.npmjs.com/get-npm"&gt;npm&lt;/a&gt; locally installed. (Current LTS version preferred)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Some developers, including myself, prefer to use &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; or &lt;a href="https://github.com/coreybutler/nvm-windows"&gt;nvm-windows&lt;/a&gt; to simplify Node version management, which is perfectly fine. For further reference you can check out also &lt;a href="https://daily.dev/posts/how-to-use-multiple-node-versions-with-nvm-on-macos-node-version-manager"&gt;How To Use Multiple Node Versions With NVM On MacOS - Node Version Manager&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#development" class="anchor"&gt;
  &lt;/a&gt;
  Development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#part-1-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Part 1. &lt;em&gt;Dependencies&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#the-moment-has-arrived-time-to-write-some-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;The moment has arrived! Time to write some code.&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Begin with these terminal commands to make an empty directory wherever you wish to store your server's local version and create the first file using npm.&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir smtp-email-server
cd smtp-email-server
npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Follow the terminal prompts from npm to create a package.json file. In most cases, the default values will suffice, but be sure to change the entry point to &lt;code&gt;server.js&lt;/code&gt; instead of the proposed &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to add the required dependencies (npm packages) to our project. Run the following command and notice that npm automatically creates a new directory called &lt;code&gt;node_modules&lt;/code&gt;. This is normal, so don't change or configure anything in this folder.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express nodemailer morgan dotenv
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Let's glance at a brief overview of each package.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Express&lt;/em&gt; is a minimal and flexible Node.js web application framework that provides a robust set of features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Nodemailer&lt;/em&gt; is a module designed to allow Node.js applications to send emails securely and efficiently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Morgan&lt;/em&gt; is named after Dexter (a show you should not watch until completion) and provides HTTP request logger middleware for Node.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;dotenv&lt;/em&gt; is a zero-dependency module that loads environment variables from a &lt;code&gt;.env&lt;/code&gt; file into &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#part-2-routes" class="anchor"&gt;
  &lt;/a&gt;
  Part 2. &lt;em&gt;Routes&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Let's begin by creating a &lt;code&gt;routes&lt;/code&gt; folder containing &lt;code&gt;routes.js&lt;/code&gt;.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir routes &amp;amp;&amp;amp; cd routes &amp;amp;&amp;amp; touch routes.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Open &lt;code&gt;routes.js&lt;/code&gt; in your code editor and establish a baseline by requiring the dependencies at the top of the file.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('dotenv').config()

// routes.js
const router = require('express').Router()
const path = require('path')
const nodemailer = require('nodemailer')
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;As you can see, Express has its own built-in router. I have opted to use this option instead of a separate npm package. This helps keep our application lightweight and efficient.&lt;/p&gt;

&lt;p&gt;Our next order of work will involve setting up authentication using our Gmail account credentials. Don't forget to add the &lt;code&gt;.env&lt;/code&gt; file in the root directory rather than our current location.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const transport = {
    //this is the authentication for sending email.
host: 'smtp.gmail.com',
port: 465,
secure: true, // use TLS
//create a .env file and define the process.env variables 
    with your credentials.
auth: {
    user: process.env.SMTP_TO_EMAIL,
    pass: process.env.SMTP_TO_PASSWORD,
},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Remember the transport function we mentioned earlier? In this step, we will construct that same function. Let's have a look!&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const transporter = nodemailer.createTransport(transport)
    transporter.verify((error, success) =&amp;gt; {
if (error) {
    //if error happened code ends here
    console.error(error)
} else {
    //this means success
    console.log('Ready to send mail!')
}
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now let's build the API routes. We will simultaneously define the schema for our JSON object (email).&lt;/p&gt;

&lt;p&gt;In simple terms, we are telling Nodemailer about the form data it will be receiving from the front-end and how it should translate said data into a structured email.&lt;/p&gt;

&lt;p&gt;Finally, we call the &lt;code&gt;transporter.sendMail&lt;/code&gt; function, Nodemailer works its magic, and the email goes on its merry way to the recipient's inbox.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/', (req, res, next) =&amp;gt; {
res.status(200).json({ msg: 'Working' })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/', (req, res, next) =&amp;gt; {
    //make mailable object
    const mail = {
    from: process.env.SMTP_FROM_EMAIL,
    to: process.env.SMTP_TO_EMAIL,
    subject: 'New Contact Form Submission',
    text: `
      from:
      ${req.body.name}

      contact details
      email: ${req.body.email}
      phone: ${req.body.tel}

      message:
      ${req.body.message}`,
    }
    transporter.sendMail(mail, (err, data) =&amp;gt; {
        if (err) {
            res.json({
                status: 'fail',
            })
        } else {
            res.json({
                status: 'success',
            })
        }
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The last block of code in this file instructs Express to use the routes we have established; finally, we export the entire router to the Node server.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Answer API requests.
router.use('/api', function (req, res) {
    res.set('Content-Type', 'application/json')
    res.send('{"message":"Hello from the custom 
server!"}')
})

// All remaining requests return the React app, so it can 
handle routing.
router.use('*', function (request, response) {
    response.sendFile(path.resolve(__dirname, '/react- 
ui/build', 'index.html'))
})

module.exports = router
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;NOTE: &lt;em&gt;If you are unfamiliar with &lt;code&gt;process.env&lt;/code&gt; or merely need a &amp;gt; refresher, this Codeburst article provides a splendid reference point.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="https://codeburst.io/process-env-what-it-is-and-why-when-how-to-use-it-effectively-505d0b2831e7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgcFPi4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AF8McfmaeJ6Hxyn-qhUgrAg.jpeg" alt="Joseph Matthias Goh"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://codeburst.io/process-env-what-it-is-and-why-when-how-to-use-it-effectively-505d0b2831e7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;process.env: What it is and why/when/how to use it effectively | by Joseph Matthias Goh | codeburst&lt;/h2&gt;
      &lt;h3&gt;Joseph Matthias Goh „Éª &lt;time&gt;Jun 20, 2018&lt;/time&gt; „Éª 5 min read
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        codeburst.io
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#part-3-server" class="anchor"&gt;
  &lt;/a&gt;
  Part 3. &lt;em&gt;Server&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Let's create a &lt;code&gt;server.js&lt;/code&gt; file in the root directory and open it with the editor.&lt;/p&gt;

&lt;p&gt;Here we are just ensuring everything runs smoothly. I could write an entire article about each of the parameters defined here, but the template is pretty standard. &lt;/p&gt;

&lt;p&gt;Let's start by defining some initial requirements.&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const cluster = require('cluster')
const numCPUs = require('os').cpus().length
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now we should check the environment to see if we are running in production. If so, we use a &lt;a href="https://nodejs.org/api/cluster.html"&gt;cluster of Node processes&lt;/a&gt; to distribute the stress of running the application as evenly as possible across the server cores.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isDev = process.env.NODE_ENV !== 'production'

// Multi-process to utilize all CPU cores.
if (!isDev &amp;amp;&amp;amp; cluster.isMaster) {
    console.error(`Node cluster master ${process.pid} is 
running`)

    // Fork workers.
    for (let i = 0; i &amp;lt; numCPUs; i++) {
        cluster.fork()
    }

    cluster.on('exit', (worker, code, signal) =&amp;gt; {
        console.error(
            `Node cluster worker 
${worker.process.pid} exited: code ${code}, signal ${signal}`
        )
    })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;We will then connect to the frontend, priority serve our static HTML files, define some middleware for AJAX parsing, and finally call the routes we are importing from the &lt;code&gt;routes.js&lt;/code&gt; file, all in that order.&lt;/p&gt;

&lt;p&gt;We wrap it up with some error logging for the development environment, and voila! Our Express mail server is humming along.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;else {
     const app = express()
 const morgan = require('morgan')
 const path = require('path')

 const PORT = process.env.PORT || 5000

 // Priority serve any static files.
 // Replace the example to connect to your frontend.
 app.use(express.static(path.join(__dirname, 
     '/example/frontend.js')))

 // dev middleware
 app.use(morgan('dev'))

 // configure body parser for AJAX requests
 app.use(express.urlencoded({ extended: false }))
 app.use(express.json())

 const routes = require('./routes/routes')

 // after all middleware functions
 app.use('/', routes)

 app.listen(PORT, function () {
    console.error(
        `Node ${
            isDev ? 'dev server' : 'cluster 
     worker ' + process.pid
        }: listening on port ${PORT}`
    )
 })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#smtp-email-server-is-complete-congratulations" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;SMTP Email Server is complete! Congratulations!&lt;/em&gt;
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: &lt;em&gt;If you encounter difficulty with the authentication&lt;br&gt;
process, read this Google Support documentation! It will save&lt;br&gt;
you hours of debugging and Excedrin.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fG2wrfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1323252806623678465/sOjADzZF_normal.jpg" alt="Michael R profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Michael R
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @killsh0t13
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Some well-hidden tips to keep in mind when setting up an SMTP server. I learned the hard way to do better research! üòÖ&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/JSwbDjWqSE"&gt;support.google.com/accounts/answe‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:58 AM - 18 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1350970875835777026" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1350970875835777026" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1350970875835777026" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We‚Äôve successfully created an SMTP Email Server using Express and Node. We also learned how to integrate Nodemailer and Gmail to streamline the mailing process.&lt;/p&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/killshot13"&gt;
        killshot13
      &lt;/a&gt; / &lt;a href="https://github.com/killshot13/express-smtp-mailer"&gt;
        express-smtp-mailer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A production-ready Node backend with an Express SMTP mail server configurable for use with contact forms, subscriptions, etc.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Feel free to clone the source code and explore your own methods of implementation. I hope you have found this tutorial useful, and thank you for taking the time to follow along!&lt;/p&gt;

&lt;p&gt;Please don't forget to üíñ this article and leave a üí≠. If you're feeling extra generous, click my name below so I get that üéÜsubscribeüéá notification!&lt;/p&gt;

&lt;p&gt;-- killshot13&lt;/p&gt;





&lt;div class="ltag__user ltag__user__id__497515"&gt;
  
    .ltag__user__id__497515 .follow-action-button {
      background-color: #1d2630 !important;
      color: #baeda5 !important;
      border-color: #1d2630 !important;
    }
  
    &lt;a href="/killshot13" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WbYY2jsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jjPTR9c8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497515/85abf111-5f97-462e-8e83-fe46b3be008b.jpeg" alt="killshot13 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/killshot13"&gt;Michael R.&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/killshot13"&gt;Web/App Developer, Data Analyst, Beta Tester, Entrepreneur, Small Business Owner, Blogger, Security &amp;amp; Privacy Advocate&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This article was originally published and featured on the&lt;br&gt;
&lt;a href="https://daily.dev"&gt;daily.dev blog&lt;/a&gt;. Here is &lt;a href="https://daily.dev/blog/how-to-build-an-smtp-mail-server-with-express-node-and-gmail"&gt;the canonical link&lt;/a&gt; to the original.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>tutorial</category>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>API's From Dev to Production - Part 3</title>
      <author>Pete King</author>
      <pubDate>Fri, 26 Feb 2021 11:56:33 +0000</pubDate>
      <link>https://dev.to/newday-technology/api-s-from-dev-to-production-part-3-7dn</link>
      <guid>https://dev.to/newday-technology/api-s-from-dev-to-production-part-3-7dn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#series-introduction" class="anchor"&gt;
  &lt;/a&gt;
  Series Introduction
&lt;/h1&gt;

&lt;p&gt;Welcome to Part 3 of this blog series that will go from the most basic example of a .net 5 webapi in C#, and the journey from development to production with a &lt;a href="https://dev.to/newday-technology/shift-left-engineering-4fpp"&gt;&lt;strong&gt;shift-left&lt;/strong&gt;&lt;/a&gt; mindset. We will use &lt;strong&gt;Azure&lt;/strong&gt;, &lt;strong&gt;Docker&lt;/strong&gt;, &lt;strong&gt;GitHub&lt;/strong&gt;, &lt;strong&gt;GitHub Actions&lt;/strong&gt; for CI/C-Deployment and Infrastructure as Code using &lt;strong&gt;Pulumi&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post we will be looking at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Actions:

&lt;ul&gt;
&lt;li&gt;Build the docker image&lt;/li&gt;
&lt;li&gt;Publish the docker image to the GitHub Container Registry&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;Instead of building locally like we did previously, we utilised GitHub Actions and the GitHub Container Registry to store our Docker image. GitHub Actions workflow is basic YAML, and we used a few actions to achieve what we needed. We checked-out the repository, docker build, logged into our GitHub Container Registry and executed a docker push command. We used a Personal Access token and stored it in GitHub secrets to use in our workflow, and finally, we pulled down our public image from the GitHub Container Registry and tested locally using Postman.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/PeterJKing"&gt;
        PeterJKing
      &lt;/a&gt; / &lt;a href="https://github.com/PeterJKing/Samples.WeatherForecast-Part-3"&gt;
        Samples.WeatherForecast-Part-3
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Samples.WeatherForecast-Part-3&lt;/h1&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/PeterJKing/Samples.WeatherForecast-Part-3"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h1&gt;
  &lt;a href="#requirements" class="anchor"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h1&gt;

&lt;p&gt;We will be picking-up where we left off in &lt;a href="https://dev.to/newday-technology/api-s-from-dev-to-production-part-2-1kcn"&gt;Part 2&lt;/a&gt;, which means you‚Äôll need the end-result from &lt;a href="https://github.com/PeterJKing/Samples.WeatherForecast-Part-2"&gt;GitHub Repo from - Part 2&lt;/a&gt; to start with.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-are-github-actions" class="anchor"&gt;
  &lt;/a&gt;
  What are GitHub Actions?
&lt;/h1&gt;

&lt;p&gt;GitHub Actions makes it easy to automate all kinds of software workflows, right inside GitHub. You can build, test, and deploy your code and more. Workflows can be triggered off many GitHub events like push, issue creation and more. There is support for Linux, macOS, Windows, ARM and of course containers   Even matrix builds - so you can build the same software across multiple OS‚Äôs. There are live logs, secret store and more, plus the UX is rather nice too! All of this is driven by YAML files, nice and neat, and stored under source control management.&lt;/p&gt;

&lt;p&gt;There is also GitHub Packages which has various package management providers like npm, nuget and more. For containers, there is a new GitHub Container Registry, so images no longer need to be stored in GitHub Packages but there is a real container registry - We will use this in this blog post :D&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#lets-get-started" class="anchor"&gt;
  &lt;/a&gt;
  Let‚Äôs get started
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iMc1u_QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3wqredwqvomhlj6l2np.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iMc1u_QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3wqredwqvomhlj6l2np.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
If you navigate to GitHub Actions in your repository, you‚Äôll be presented with the above screen. There are various starter workflows or you can simply start from scratch.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#build-your-workflow-from-scratch" class="anchor"&gt;
  &lt;/a&gt;
  Build your Workflow from scratch
&lt;/h1&gt;

&lt;p&gt;We‚Äôre going to build it from scratch, there isn‚Äôt much to it, and it‚Äôs easier to learn and see what happening this way.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Select&lt;/em&gt; ‚Üí &lt;strong&gt;&lt;em&gt;set up a workflow yourself&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You will see a default workflow created for you with some helpful, guiding comments.&lt;/p&gt;

&lt;p&gt;I have changed the &lt;strong&gt;workflow file name&lt;/strong&gt; to &lt;code&gt;build-and-publish.yml&lt;/code&gt; and the &lt;strong&gt;name&lt;/strong&gt; (&lt;em&gt;line 3&lt;/em&gt;) to, &lt;code&gt;Build and Publish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZLKH6ES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3wi7mckd9u9t0y36xh1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZLKH6ES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3wi7mckd9u9t0y36xh1g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have the on section where you can set triggers for various GitHub events.&lt;/p&gt;

&lt;p&gt;They are fairly self-explanatory, but if you‚Äôre struggling, there is some decent documentation on GitHub about about it here: &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions"&gt;GitHub Actions - Workflow Syntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For now, let‚Äôs remove all the comments as it is slightly more verbose for my liking, but please make sure you do understand what commands we are utilising. If not, things will become more clear as we edit this workflow now.&lt;/p&gt;

&lt;p&gt;If we remove all the comments and cut out some of the default template code, you should be left with something like this, fairly barebones:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Publish&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-and-publish&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above is telling us that when a push, or a pull request event happens on the main branch, execute this workflow, which when then run the jobs, and within jobs there are steps.&lt;/p&gt;

&lt;p&gt;Let‚Äôs focus on the steps and add the checkout of the git repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout the repo&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The uses is key to understand, it‚Äôs an action, and you can even have a look at the code in the &lt;a href="https://github.com/marketplace/actions/checkout"&gt;GitHub Marketplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You‚Äôll find useful documentation on what it does and how to use it, and you can even create your own GitHub Action to do whatever you want - and guess what? They too can be based on Docker containers!&lt;/p&gt;

&lt;p&gt;For more information about how to create custom GitHub Actions and use them to your advantage, or you want to share yours with the rest of us, please visit, &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/creating-actions"&gt;GitHub - Creating Actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up is the Docker build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build docker image&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker build . -t ghcr.io/peterjking/samples-weatherforecast:${{ github.sha }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are simply running &lt;code&gt;docker build&lt;/code&gt;, our &lt;code&gt;Dockerfile&lt;/code&gt; is in the current directory, hence the period &lt;code&gt;.&lt;/code&gt; and we set the image tag to my &lt;strong&gt;GitHub Container Registry : github.sha&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each GitHub Account has a Container Registry, AKA GitHub Packages, for more information please visit - &lt;a href="https://ghcr.io"&gt;https://ghcr.io&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You image tag must be &lt;strong&gt;lowercase&lt;/strong&gt; - if you have a GitHub username like mine where there is uppercase letters, you can either hardcode it here like I have for the moment, store this in a GitHub Secret or convert to lowercase dynamically.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Now we have built the Docker image, we now would like to push it to our GitHub Container Registry, for this, we need valid credentials. For something like this, we can use a &lt;strong&gt;&lt;em&gt;GitHub Access Token&lt;/em&gt;&lt;/strong&gt; and securely store it in our GitHub Secrets area of our repo. Let‚Äôs go set this up now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Navigate&lt;/em&gt; to &lt;strong&gt;Settings&lt;/strong&gt; (on your profile)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwdOJDfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cm1og1eu8x3k55t63el3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwdOJDfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cm1og1eu8x3k55t63el3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;em&gt;Select&lt;/em&gt; &lt;strong&gt;Developer Settings&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bBkJbHpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p7xywty6ien749vxwii4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bBkJbHpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p7xywty6ien749vxwii4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;em&gt;Select&lt;/em&gt; &lt;strong&gt;Personal Access Tokens&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hW7Oh57E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ychg6klmwi3c093xnaud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hW7Oh57E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ychg6klmwi3c093xnaud.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;em&gt;Click&lt;/em&gt; &lt;strong&gt;Generate new token&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r7E1eCF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/423m6s5wm46dr1hiwdc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7E1eCF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/423m6s5wm46dr1hiwdc2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;You‚Äôll see a new screen whereby you can set the name of the PAS (Personal Access Token) and set the OAuth scopes for it. In our case, we only need &lt;strong&gt;write:packages&lt;/strong&gt;, &lt;strong&gt;read:packages&lt;/strong&gt; and &lt;strong&gt;delete:packages&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5A8TzLRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s43b81xvyjqeq4wxbxbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5A8TzLRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s43b81xvyjqeq4wxbxbe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Give the access token a name, I‚Äôve called mine, &lt;code&gt;ghcr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Copy&lt;/em&gt; your access token.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once you‚Äôve generated the token, you &lt;strong&gt;won‚Äôt&lt;/strong&gt; be able to get the value again, however, you can always regenerate a new value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Navigate&lt;/em&gt; to your GitHub repository &lt;strong&gt;Settings&lt;/strong&gt; ‚Üí &lt;strong&gt;Secrets&lt;/strong&gt; ‚Üí &lt;em&gt;Click&lt;/em&gt; &lt;strong&gt;New repository secret&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_LqDLlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z0nq3pf5b3l3nnjs8ysa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_LqDLlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z0nq3pf5b3l3nnjs8ysa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Enter a &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;paste&lt;/em&gt; in your value, and &lt;em&gt;click&lt;/em&gt; ‚Üí &lt;strong&gt;Add secret&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbHp7MTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0ycifoua0180ciu1hacd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbHp7MTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0ycifoua0180ciu1hacd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Now we have successfully stored our Personal Access Token as a secret, we can use that to access our GitHub Container Registry and push our image.&lt;/p&gt;

&lt;p&gt;Below we use a GitHub Action called &lt;code&gt;login-action@v1&lt;/code&gt; and set it with some variables.&lt;/p&gt;

&lt;p&gt;For more information about this action, please visit, &lt;a href="https://github.com/marketplace/actions/docker-login"&gt;GitHub Actions Marketplace - docker-login&lt;/a&gt;&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to GitHub Container Registry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;registry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ghcr.io&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.repository_owner }}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GH_CR }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;You‚Äôll notice we are using an another internal GitHub environment variable called &lt;code&gt;repository_owner&lt;/code&gt;, this contains the repository owner, which equates to my username, and therefore, my GitHub Container Registry.&lt;/p&gt;

&lt;p&gt;Next there is the secret we created earlier, &lt;code&gt;GH_CR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have login action setup, we can finally do our &lt;code&gt;docker push&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push docker image&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker push ghcr.io/peterjking/samples-weatherforecast:${{ github.sha }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;That‚Äôs it!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, we can make a minor enhancement given we are using the image tag in two places.&lt;/p&gt;

&lt;p&gt;I‚Äôve added an &lt;code&gt;env&lt;/code&gt; section which enables variables within my workflow, I‚Äôve called it, &lt;code&gt;image-name&lt;/code&gt;, and used it in the &lt;code&gt;docker build&lt;/code&gt; and &lt;code&gt;docker push&lt;/code&gt; commands.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#full-dockerfile" class="anchor"&gt;
  &lt;/a&gt;
  Full Dockerfile
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Publish&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;image-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ghcr.io/peterjking/samples-weatherforecast:${{ github.sha }}&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-secure-push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout the repo&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build docker image&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker build . -t ${{ env.image-name }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to GitHub Container Registry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;registry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ghcr.io&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.repository_owner }}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GH_CR }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push docker image&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker push ${{ env.image-name }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure you workflow looks like the above, except the &lt;strong&gt;username&lt;/strong&gt; in the &lt;code&gt;env&lt;/code&gt; &lt;code&gt;image-name&lt;/code&gt; variable of course; this should be your &lt;strong&gt;username&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you‚Äôre ready to &lt;em&gt;press&lt;/em&gt; ‚Üí &lt;strong&gt;Start commit&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mD7ATjVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yv6wyd6tvmihpa1r9v80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mD7ATjVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yv6wyd6tvmihpa1r9v80.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Once the GitHub Action kicks into &lt;strong&gt;&lt;em&gt;Action&lt;/em&gt;&lt;/strong&gt; - You‚Äôll see it queued and then move into in progress.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The time delay between &lt;em&gt;Queued&lt;/em&gt; to &lt;em&gt;In Progress&lt;/em&gt;, if you‚Äôre used to an older style build system where you can be waiting minutes or even hours in some cases, you‚Äôll be happy to learn this is &lt;strong&gt;&lt;em&gt;ultrafast&lt;/em&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l3Xqx6wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ycdtyarktq1a8awf3um7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l3Xqx6wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ycdtyarktq1a8awf3um7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The build has now started and &lt;strong&gt;In progress&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hpktBD8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4w84yzy7x94bzophddxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpktBD8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4w84yzy7x94bzophddxt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;All green... It worked!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xn4-hUlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pcqhba9d9sjk2itwtum5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xn4-hUlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pcqhba9d9sjk2itwtum5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Below we can now see the summary, the build has taken &lt;strong&gt;1 minute and 31 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MsskSl-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cg2gbvljp92m76q1kgsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MsskSl-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cg2gbvljp92m76q1kgsm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;By &lt;em&gt;clicking&lt;/em&gt; ‚Äò&lt;strong&gt;build-secure-push&lt;/strong&gt;‚Äô you will see the steps and their logs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6zvzqtDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k7fs7z2grrwwt7hzuj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zvzqtDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k7fs7z2grrwwt7hzuj1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now, let‚Äôs check that our Docker image has actually been stored in our GitHub Container Registry by navigating to Packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dpf0imBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6c5agd3gz71uw1n0u44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dpf0imBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6c5agd3gz71uw1n0u44.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Click&lt;/em&gt; the package link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnU_RBX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5p992rfy30i9t8cnckn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnU_RBX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5p992rfy30i9t8cnckn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You can see a helpful section at the top where there is a sample commandline. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Copy this now as we'll need it in the very next step to test&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlNsqMRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6126wkonz969pjuewvpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlNsqMRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6126wkonz969pjuewvpe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#lets-test-this-image" class="anchor"&gt;
  &lt;/a&gt;
  Let‚Äôs test this image
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker pull ghcr.io/peterjking/samples-weatherforecast-part-3:e5f0710a08eae6d19c39a8ef04dbddff211dcd88`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; your image name will have a unique &lt;strong&gt;SHA1&lt;/strong&gt; as the Docker &lt;strong&gt;tag&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Copy the docker pull from your package, head-on over to the command line and execute.&lt;/p&gt;

&lt;p&gt;If you are working on a &lt;strong&gt;private&lt;/strong&gt; package, you will most certainly receive &lt;code&gt;unauthorized&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One way to solve this is to open your package to the &lt;strong&gt;public&lt;/strong&gt; by changing the &lt;strong&gt;visibility settings&lt;/strong&gt; in the &lt;strong&gt;Package Settings&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once you make the package &lt;strong&gt;public&lt;/strong&gt;, you &lt;strong&gt;cannot go back&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The alternative is to login to your GitHub Container Registry first with docker login.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For now, I‚Äôve simply made the package &lt;strong&gt;public&lt;/strong&gt;, for more information on docker login, please see, &lt;a href="https://docs.docker.com/engine/reference/commandline/login/"&gt;Docker Docs - Commandline - Login&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Sutb6D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6jw2v2kvqtlci91zie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Sutb6D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6jw2v2kvqtlci91zie.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#docker-run" class="anchor"&gt;
  &lt;/a&gt;
  Docker run
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -it --rm -p 8080:8080 ghcr.io/peterjking/samples-weatherforecast-part3:e5f0710a08eae6d19c39a8ef04dbddff211dcd88`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1G4Giw8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq3lf2rctdzulfwz8wj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1G4Giw8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq3lf2rctdzulfwz8wj9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#send-a-request" class="anchor"&gt;
  &lt;/a&gt;
  Send a request
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OWVBmhZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvgur5inw80uwqo67vgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWVBmhZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvgur5inw80uwqo67vgm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-have-we-learned" class="anchor"&gt;
  &lt;/a&gt;
  What have we learned?
&lt;/h1&gt;

&lt;p&gt;Well, we‚Äôve learned a bunch here haven‚Äôt we? We have learned the very basics of &lt;strong&gt;GitHub Actions&lt;/strong&gt;, how to write your own &lt;strong&gt;workflow&lt;/strong&gt;, pretty much from scratch, generate a &lt;strong&gt;Personal Access Token&lt;/strong&gt; and store that token in your repository &lt;strong&gt;Secrets&lt;/strong&gt; area.&lt;/p&gt;

&lt;p&gt;In our workflow we added the docker build, logging into the &lt;strong&gt;GitHub Container registry&lt;/strong&gt;, and finally the docker push command.&lt;/p&gt;

&lt;p&gt;We‚Äôve seen GitHub Actions in &lt;strong&gt;&lt;em&gt;Action!&lt;/em&gt;&lt;/strong&gt; The workflow summary and the workflow job output too.&lt;/p&gt;

&lt;p&gt;Finally, we‚Äôve pulled down our Docker image from our public GitHub Container Registry and tested it locally. There is different compared to how we‚Äôve done it before in this blog series, previously we‚Äôve built the docker image locally and it‚Äôs already in our local Docker repository. We are now using the same flow as the base images you‚Äôve used in our Dockerfile, and what other companies / individuals have stored in Docker Hub. Equally, you do not have to use the &lt;a href="https://github.com/features/packages"&gt;GitHub Container Registry&lt;/a&gt;, you could simply sign-up to &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;. Not to forget there are other 3rd party solutions such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://azure.microsoft.com/en-gb/services/container-registry/"&gt;Azure Container Registry&lt;/a&gt; AKA - ACR.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/container-registry"&gt;Google Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ecr/"&gt;Amazon Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mirantis.com/software/docker/image-registry/"&gt;Mirantis Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://goharbor.io/"&gt;Harbor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://quay.io/"&gt;Quay.io&lt;/a&gt; - from Red Hat.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scaleway.com/en/container-registry/"&gt;Scaleway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and the list goes on!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#up-next" class="anchor"&gt;
  &lt;/a&gt;
  Up next
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Part 4&lt;/strong&gt; in this series will be about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add container scanning to our GitHub Action workflow&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resolve security vulnerabilities&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#more-information" class="anchor"&gt;
  &lt;/a&gt;
  More information
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.azure.com"&gt;https://www.azure.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotnet.microsoft.com/"&gt;https://dotnet.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.github.com"&gt;https://www.github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com"&gt;https://www.docker.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pulumi.com"&gt;https://www.pulumi.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>docker</category>
      <category>csharp</category>
      <category>github</category>
    </item>
  </channel>
</rss>
