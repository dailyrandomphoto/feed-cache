<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My Awesome Github Readme</title>
      <author>C-mmon</author>
      <pubDate>Thu, 01 Jul 2021 18:51:36 +0000</pubDate>
      <link>https://dev.to/cmmon/my-awesome-github-readme-20d</link>
      <guid>https://dev.to/cmmon/my-awesome-github-readme-20d</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/C-mmon"&gt;https://github.com/C-mmon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I finally took inspiration from many github readme and created one.&lt;/p&gt;

&lt;p&gt;Here are few things I kept in mind while making it.&lt;/p&gt;

&lt;p&gt;Bullet points: Using Bullet Point increases Readability.&lt;/p&gt;

&lt;p&gt;Not rating myself: I have seen github profile where they have rated themselves A+, B or such. But honestly, its the client or some other person who provide feedback and rating. So take care of it.&lt;/p&gt;

&lt;p&gt;Making it dynamic: Many Developer fail to update their readme and seriously you should not, if you are a productive person.&lt;br&gt;
Hence, I decided to use Github action to generate Github statistics and fetch latest tweets.&lt;/p&gt;

&lt;p&gt;For github statistics: I would recommend to use the one provided by Jacob Strieb.&lt;br&gt;
As stated by him, "When someone views a profile on GitHub, it is often because they are curious about a user's open source projects and contributions. Unfortunately, that user's stars, forks, and pinned repositories do not necessarily reflect the contributions they make to private repositories"&lt;/p&gt;

&lt;p&gt;Further, I created spotify app to allow readers to know what I am listening too.&lt;/p&gt;

&lt;p&gt;Here are all links:&lt;/p&gt;

&lt;p&gt;Github Stats:&lt;a href="https://github.com/jstrieb/github-stats"&gt;https://github.com/jstrieb/github-stats&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For fetching the latest tweets: &lt;a href="https://github.com/gazf/github-readme-twitter"&gt;https://github.com/gazf/github-readme-twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For fetching Medium Articles: &lt;a href="https://github.com/omidnikrah/github-readme-medium"&gt;https://github.com/omidnikrah/github-readme-medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contribution Graph: &lt;a href="https://ashutosh00710.github.io/github-readme-activity-graph/"&gt;https://ashutosh00710.github.io/github-readme-activity-graph/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spotify: &lt;a href="https://github.com/novatorem/novatorem"&gt;https://github.com/novatorem/novatorem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Typing SVG: &lt;a href="https://readme-typing-svg.herokuapp.com"&gt;https://readme-typing-svg.herokuapp.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>computerscience</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Announcing Clojure Morsels</title>
      <author>Cora Sutton</author>
      <pubDate>Thu, 01 Jul 2021 18:49:37 +0000</pubDate>
      <link>https://dev.to/corasaurus_hex/announcing-clojure-morsels-56ma</link>
      <guid>https://dev.to/corasaurus_hex/announcing-clojure-morsels-56ma</guid>
      <description>&lt;p&gt;I’m happy to announce that we have started a totally free newsletter called &lt;a href="https://www.clojuremorsels.com"&gt;Clojure Morsels&lt;/a&gt;! In it you’ll find links and summaries about all kinds of Clojure-related topics, from articles to tools to tutorials to jobs. You can find out more about it on our &lt;a href="https://twitter.com/ClojureMorsels/status/1410280203297902600"&gt;Twitter account&lt;/a&gt;. Let us know if you enjoy it and/or have feedback!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldmMjcEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ru5of16h6zzafy2xluq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldmMjcEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ru5of16h6zzafy2xluq.png" alt="A screenshot of a segment of the newsletter showing a few links and their summaries"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find me as @Cora on &lt;a href="http://clojurians.net/"&gt;Clojurians Slack&lt;/a&gt; if you want to chat.&lt;/p&gt;

</description>
      <category>clojure</category>
      <category>news</category>
    </item>
    <item>
      <title>What is GraphQL? </title>
      <author>Shruti Kapoor</author>
      <pubDate>Thu, 01 Jul 2021 18:22:56 +0000</pubDate>
      <link>https://dev.to/shrutikapoor08/what-is-graphql-hj5</link>
      <guid>https://dev.to/shrutikapoor08/what-is-graphql-hj5</guid>
      <description>&lt;p&gt;In simple terms, it's like when you go to a pizza place, and order a "Make your own" pizza - you pick the base, the sauce, the cheese, the toppings and when the pizza is done, you get exactly what you asked for. With REST, its like you pick a pizza from the predefined menu items. You may get the toppings you want, but you may also get other toppings (like tomatoes) you didn't ask for and sometimes, we will just have to manually pick the tomatoes out of it. &lt;/p&gt;

&lt;p&gt;In technical terms, a GraphQL is a query language - a syntax for querying for data from any data source - be it an API or database. GraphQL is an alternative to REST APIs and provides a new way of asking for data. GraphQL lets you specify what data fields you need, and delivers exactly those fields. GraphQL &lt;a href="https://spec.graphql.org/"&gt;specification&lt;/a&gt; defines the set of rules for implementing a GraphQL API. &lt;/p&gt;

&lt;p&gt;Important point to note is that GraphQL isn't a query language for your database. Unlike SQL, you don't have a query such as &lt;code&gt;SELECT * from users&lt;/code&gt; for your database. Instead, GraphQL syntax defines how to ask for data from your API. the syntax of a GraphQL query looks like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the &lt;code&gt;QL&lt;/code&gt; in GraphQL means a query language for your API, not database. &lt;/p&gt;

&lt;p&gt;A cool thing to note is that GraphQL can be used with any data source such as REST APIs &amp;amp; database. It can be plugged anywhere, built in any language and can be fit on top of any database and tech stack, which means that you can use GraphQL on top of REST APIs and still get the benefits of GraphQL without having to tear down existing REST based architecture. You can use GraphQL in a Java app, JavaScript app, Python, Django, NextJS&lt;/p&gt;

&lt;p&gt;GraphQL fits on both client and server side layers. You build a GraphQL API on the server side and then consume this GraphQL API on the client side by firing GraphQL requests (queries, mutations, etc.). There are tools such as &lt;a href="https://www.apollographql.com/docs/tutorial/introduction/"&gt;Apollo&lt;/a&gt; that provide full stack solutions to help build GraphQL API on the server and consume it on the client side. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest-vs-graphql-example-making-an-api-request"&gt;
  &lt;/a&gt;
  REST vs GraphQL example: Making an API request
&lt;/h2&gt;

&lt;p&gt;Let's say that we want to fetch a user's name. In a REST API, we have an endpoint that we can use to make a GET request. The endpoint may look like &lt;code&gt;/users/{id}/&lt;/code&gt;. If we use a curl request to make a call and pass in &lt;code&gt;id&lt;/code&gt; of a user, it will look like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;H&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type: application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.example.com/api/users/123`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at how GraphQL request will look - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The "GET" operation of REST is done by &lt;a href="https://graphql.org/learn/queries/"&gt;"Query"&lt;/a&gt; in GraphQL. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We don't have a separate endpoint for &lt;code&gt;users&lt;/code&gt; in GraphQL. Every request is sent to &lt;code&gt;/graphql&lt;/code&gt; endpoint.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order to describe what data we are interested in, we pass the relevant parameters to "Query" operation and describe which Query we are interested in. A GraphQL API may support something like "getUsers" Query, which is a query we can use to get users. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A curl request to a GraphQL API looks like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;H&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type: application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{ "query": "{ user(id:123 ) { name } } " }&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.example.com/graphql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://graphqlzero.almansi.me/api"&gt;Try out sample GraphQL requests here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest-vs-graphql-implementing-the-api"&gt;
  &lt;/a&gt;
  REST vs GraphQL: Implementing the API
&lt;/h2&gt;

&lt;p&gt;In REST world, we will have resource implementations for each of our operations, such as &lt;code&gt;GET /user/{id}&lt;/code&gt; is mapped to &lt;code&gt;getUser(String id)&lt;/code&gt;. &lt;code&gt;getUser&lt;/code&gt; defines what data is passed if this endpoint is called. This resource implementation will also call any downstream operation if need be - other APIs or fetch directly from the database.&lt;/p&gt;

&lt;p&gt;In GraphQL, when implementing a GraphQL API, we need to first the define the schema of the API. Schema is a complete description of what queries, mutations and parameters are allowed. A "GET" operation is done by "Query" in GraphQL. We can specify what arguments a query accepts in a Schema&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Query {
    getUser(id: $String!)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we return from this &lt;code&gt;getUser&lt;/code&gt; query is defined by a function called resolvers. Resolvers define what data should be returned when a field is called. Every query is mapped to a resolver. A resolver function can call any API or data sources. Our resolver can be written like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getUser(args){
    const { id } = args;
    //fetch from database / API 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;when a client fetches &lt;code&gt;getUser&lt;/code&gt; query, they will get back data like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "data" : {
        "name": "Sample name"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#graphql-terminology"&gt;
  &lt;/a&gt;
  GraphQL terminology
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Query: Query is similar to GET in REST. When we want to fetch information from a GraphQL API, we use Query. &lt;/li&gt;
&lt;li&gt;Mutation: A mutation is used when we want to mutate the data on the server. A mutation is similar to PUT, POST, DELETE, PATCH in a REST API.&lt;/li&gt;
&lt;li&gt;Schema: Schema is a complete representation of what operations a GraphQL API supports. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#major-differences-between-rest-and-graphql"&gt;
  &lt;/a&gt;
  Major differences between REST and GraphQL
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;REST&lt;/th&gt;
&lt;th&gt;GraphQL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;REST has multiple endpoints.&lt;/td&gt;
&lt;td&gt;GraphQL has one endpoint - /graphql&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REST APIs support PUT, GET, POST, DELETE, PATCH&lt;/td&gt;
&lt;td&gt;GraphQL supports Query, Mutation, Subscription&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REST endpoints are populated by resource implementations&lt;/td&gt;
&lt;td&gt;GraphQL fields are populated by resolvers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;200 , 400 , 500 level status codes&lt;/td&gt;
&lt;td&gt;200 level status codes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Often times, roundtrips need to be done in order to fetch complete data&lt;/td&gt;
&lt;td&gt;You can fetch multiple fields therefore fetch all the data you need with one requestt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shape of the data is determined by the server&lt;/td&gt;
&lt;td&gt;Shape of the data is determined by the client calling the API.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-graphql-vs-rest"&gt;
  &lt;/a&gt;
  When to use GraphQL vs REST
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;When to use GraphQL&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you have multiple downstream APIs&lt;/li&gt;
&lt;li&gt;When you have extraneous data coming from downstream APIs&lt;/li&gt;
&lt;li&gt;When you care about which fields are being used by which clients. With the help of GraphQL, you can have field level instrumentation. &lt;/li&gt;
&lt;li&gt;When you care about ensuring that all clients have the most up to date version of your API. With GraphQL, since there is one endpoint, all updates are given to everyone. &lt;/li&gt;
&lt;li&gt;When you want to build a UI-first API.&lt;/li&gt;
&lt;li&gt;When you care about underfetching and overfetching. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;*&lt;em&gt;When to use REST *&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you depend heavily on caching.&lt;/li&gt;
&lt;li&gt;When you don't know a complete set of fields you may get from downstream APIs. With GraphQL, you need to know the schema upfront.&lt;/li&gt;
&lt;li&gt;When you rely heavily on status codes of downstream APIs. Everything in GraphQL is a 200, so you will need to parse the response object or errors object. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prereqs-to-learn-graphql"&gt;
  &lt;/a&gt;
  Prereqs to learn GraphQL
&lt;/h2&gt;

&lt;p&gt;While I don't think there is necessarily any pre-reqs, it helps to know the following - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fundamentals of API development&lt;/li&gt;
&lt;li&gt;REST APIs&lt;/li&gt;
&lt;li&gt;HTTP &lt;/li&gt;
&lt;li&gt;A language of choice for implementing GraphQL API - JavaScript, Go, Java, Python etc. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-learn-graphql"&gt;
  &lt;/a&gt;
  Resources to learn GraphQL
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://graphql.org/"&gt;GraphQL.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.howtographql.com/"&gt;howtographql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/learning-graphql/9781492030706/"&gt;GraphQL book by Eve Porcello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/graphql-with-react-course/"&gt;Udemy course by Stephen Grider&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In plain words, GraphQL is a syntax for asking for data. The big difference between REST and GraphQL is that there is one endpoint only - &lt;code&gt;graphql&lt;/code&gt;, and in addition to making the call to the API endpoint and passing desired parameters, we also need to provide exactly what fields we want to access.&lt;/p&gt;

&lt;p&gt;In technical terms, GraphQL is a specification and provides a way for querying for data. The specification specifies what should happen when data is requested and mutated. GraphQL specifies a way to ask for data, and delivers exactly the data that was requested. Since it is a specification, GraphQL APIs can be created in language - JavaScript, Java, Go, Python. &lt;/p&gt;




&lt;p&gt;Other GraphQL resources I have published - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://frontendhappyhour.com/episodes/no-rest-with-quintessential-libations-graphql/"&gt;What is GraphQL and why should you use it - Front End Happy Hour Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/shrutikapoor08/what-is-graphql-the-misconceptions-57b9"&gt;Common GraphQL misconceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=axQzCQ2Q4Rc"&gt;Using GraphQL in an enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HL7gZnrEy68"&gt;Moving from Redux to GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7raJccyHh0Y"&gt;GraphQL &amp;amp; State Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learninggraphql.com/"&gt;GraphQL Hub - under construction&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;a href="https://tinyletter.com/shrutikapoor"&gt;Get articles like this in your inbox&lt;/a&gt;&lt;br&gt;
&lt;a href="//twitch.tv/shrutikapoor"&gt;Work with me in real time&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Time traveling with Fluree</title>
      <author>Trey Botard</author>
      <pubDate>Thu, 01 Jul 2021 18:18:35 +0000</pubDate>
      <link>https://dev.to/fluree/time-traveling-with-fluree-30nj</link>
      <guid>https://dev.to/fluree/time-traveling-with-fluree-30nj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--liRlthyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f1ejj4frbx4h3u13ifo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--liRlthyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f1ejj4frbx4h3u13ifo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;When you get down to it, if you are building an app with Fluree as the backend, it is simplest to think of Fluree as a database. This can be a useful way to think about working with Fluree, but by doing so there is a lot being left on the table. The unique combination of technologies which make Fluree what it is enable some extremely powerful functionality and unlock ways of working with data which are either uncommon or simply not possible with other data stores. Let's talk about what some of those are, how to use them, and what this type of functionality could enable in your Fluree-backed application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;In addition to a graph database for querying data, Fluree is built with an immutable ledger as the backbone which holds the dataset. This part of Fluree is what enables some really interesting and particularly unique functionality. 'Immutable ledger' is one of those terms which I had to Google in order to understand when I started at Fluree, so let's break that down a bit.&lt;/p&gt;

&lt;p&gt;Fluree associates related data elements, called subjects. Each subject has an &lt;code&gt;_id&lt;/code&gt; which is used to correlate the attributes (called predicates) and the values of those predicates together to form the "facts" about that subject. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fluree is based on an extended version of the W3C standard for RDF, which is where this notion of SPO (Subject, Predicate, Object) comes from.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can think of it like a row in a db table with &lt;code&gt;_id&lt;/code&gt; being the unique identifier for the row, predicates are the columns, and the values are the fields. Each field makes up a fact about the instance of data stored in that particular row in the db. For example, in a Dog table with a Breed column, each row corresponds to a unique Dog who is described by the attributes and fields. The same idea holds in Fluree. An &lt;code&gt;_id&lt;/code&gt; groups the related predicates, which point to values, in order to make up the "facts" of that subject. So, the &lt;code&gt;dog/breed&lt;/code&gt; predicate would point at an object, &lt;code&gt;"french bulldog"&lt;/code&gt;, for example. At the point in time when that fact was written to the ledger, that specific subject's breed was french bulldog.&lt;/p&gt;

&lt;p&gt;Each of these facts are stored in an immutable data structure. Immutable means that those data structures are not available to be modified or changed in any way. Instead of simply changing a value or updating a "row" in the data, Fluree will make a new true fact in the ledger and associate it with the appropriate subject. If this is a value which is being "modified" then Fluree will make two new facts; one where the old fact is false and the second a new, true fact, both of these facts are then associated with the subject and written to the ledger. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is part of the "extension" to RDF. Each flake contains a boolean which indicates whether it is true or has been falsified. You can read more about this in the &lt;a href="https://docs.flur.ee/guides/1.0.0/architecture/flakes#flakes-as-flurees-foundation"&gt;flakes page&lt;/a&gt; in the docs. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This brings us to what a ledger is. You can think of a ledger as discrete units or "blocks" which contain the history of the data as it is transacted. These blocks are made of groups of immutable facts which are sent to an instance of Fluree. Each block is linked to the one which came before it so there is a chain of blocks from when the ledger was created to the current block. In Fluree, this chain is queryable, which means once some data has been transacted to Fluree you have the history of every data element in that data set! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5F8mBqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvza8gu4gaxg4yqjqgzv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5F8mBqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvza8gu4gaxg4yqjqgzv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-travel"&gt;
  &lt;/a&gt;
  Time travel
&lt;/h2&gt;

&lt;p&gt;So, back to those powerful pieces of functionality I mentioned at the beginning. &lt;br&gt;
There are two ways of querying the data which enable what we call time travel in the Fluree world. There are &lt;strong&gt;block&lt;/strong&gt; queries and &lt;strong&gt;history&lt;/strong&gt; queries, both unlock elements of Fluree which are only possible because of the immutable data structures and the ledger. Block queries enable querying the data state at specific moments in time and history queries allow you to get an overview of all of the modifications to a particular subject. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7nDGt3sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4j7xii41jbe9eftjdxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7nDGt3sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4j7xii41jbe9eftjdxz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;We'll get into how each of these types of queries work, but first, why does this even matter? &lt;br&gt;
One of the primary benefits to having this type of view into your data is the ability to correlate events with the data state at the time that event happened. For example, say you are tracking prices for flights and you want to see what effect the weather had on flight prices or which day of the week prices tended to be the cheapest. The sky's the limit for these types of analytical queries. &lt;br&gt;
You also may want to enable your users to see the state of some piece of data when it was updated. I saw a comment on a LinkedIn post once and was pretty sure that the commenter worked for the company who's post he was commenting on, but his current job title was recently updated so I couldn't tell where he worked when the comment was added, only where he currently worked - the current state of the data. &lt;br&gt;
This type of functionality can be useful in a wide range of circumstances or situations. Having a way to view not only the current state of the data (table stakes for any database), but a way to see the state of a piece of data at a specified time OR for a specified range of time, can be extremely useful. Fluree goes a step further though. When you are querying some data a point in time, you are also seeing all of the facts which were true at that time as well. This includes all of the relationships which existed at the time. This is something which is not possible in any other database or data store that I am aware of. You are able to query not only the historical values of something in your data but also all of the context associated with that data as well. &lt;strong&gt;That is huge&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Now, think about how you would go about making something like this in your db of choice. Building out a historical view of a table in a traditional database, whether in a relational or NoSQL db, is a large and expensive maintenance burden, the size of your db will explode because of data duplication without significant optimization, and querying these db tables or documents can become relatively complex; specifically what happens to references? Does the reference point to the current table or is there a way to manage the reference such that it points to the correct row in the historical table? What happens when you want to do a join to with another table? There isn't an expedient or simple way to do either of those things, to my knowledge. One or two other data stores enable historical views, but are not able to pull in all of the context and maintain relationships as well. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTxxAhCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8ldfla5sl21ij0ewhvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTxxAhCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8ldfla5sl21ij0ewhvu.png" alt="Lying_down_working"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h2&gt;

&lt;p&gt;Both of these operations are exposed via an API within a Fluree db instance. Simply passing a JSON to the &lt;code&gt;/block&lt;/code&gt; or &lt;code&gt;/history&lt;/code&gt; endpoint is all that is needed to query this type of data. Let's get into how to use each of these queries. I will be using the Fluree Query Language (FlureeQL), which is a JSON-based way to query the backend. Fluree also supports querying via GraphQL, SPARQL, SQL or calling these endpoints directly from Clojure, but we'll use FlureeQL to illustrate this functionality. If you want to read more about our query surfaces, check out the &lt;a href="https://docs.flur.ee/docs/1.0.0/query/overview"&gt;query pages&lt;/a&gt; for more details. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3RmpuMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u8bamzn25oik6lsg95v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3RmpuMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u8bamzn25oik6lsg95v.png" alt="Blocks"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#block-queries"&gt;
  &lt;/a&gt;
  Block Queries
&lt;/h3&gt;

&lt;p&gt;There are two ways to query a block in Fluree. You can either issue a query against the &lt;code&gt;/block&lt;/code&gt; endpoint which returns the flakes in that particular block or range of blocks, or you can add a &lt;code&gt;"block"&lt;/code&gt; key to a basic query issued to the &lt;code&gt;/query&lt;/code&gt; endpoint. This basic query method of querying can, and probably will, pull in facts which were transacted to the ledger before the specified block. When you issue a regular query with a block key, you are issuing a query as if the specified block were the current block. &lt;br&gt;
Each of these types of query is beneficial, and can be useful depending on how you need to view your data. &lt;/p&gt;

&lt;p&gt;Let's start with a query issued to the &lt;code&gt;/block&lt;/code&gt; endpoint. This type of query currently supports 2 keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"block"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;number,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"prettyPrint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;"prettyPrint"&lt;/code&gt; is a boolean, which if true, prints the results in a pretty printed, aka styled format, for easier reading, as well as separating the asserted and retracted flakes into their own arrays in order to make them easier to parse. The &lt;code&gt;"block"&lt;/code&gt; key is much more interesting. It can take a number, a string in the form of an ISO-8601 formatted date-time or duration, or an array which specifies a range of block for the query. &lt;/p&gt;

&lt;p&gt;For example, to query a specific block:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"block"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can query via a time stamp. This will return the first block which was transacted before this timestamp. In other words, it will give you the facts which were true at that time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"block"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2017-11-14T20:59:36.097Z"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also use an &lt;a href="https://en.wikipedia.org/wiki/ISO_8601#Durations"&gt;ISO-8601 formatted duration&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"block"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PT5M"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will return the state of the data as of 5 minutes ago. &lt;/p&gt;

&lt;p&gt;If you would like to query a range of blocks, you can pass an array containing the blocks you would like to see. This range is inclusive, meaning the data returned will &lt;em&gt;include&lt;/em&gt; both blocks you put in the array.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"block"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also pass an array with a single block which will specify a lower, also inclusive, block and return the facts from that block up to the current block. &lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;/block&lt;/code&gt; endpoint will return an array of &lt;a href="https://docs.flur.ee/guides/1.0.0/architecture/flakes#flakes-as-flurees-foundation"&gt;flakes&lt;/a&gt;, each of which is a fact stored in Fluree at that block or range of blocks. While this is useful, it is probably more realistic that you would want to see a specific set of data using a normal query, but have the results returned as if they had been issued at some point in the past. This is also enabled in Fluree by issuing a query to the &lt;code&gt;/query&lt;/code&gt; endpoint which contains the &lt;code&gt;"block"&lt;/code&gt; key-value pair. This key expects the value to be structured in the same way as the examples above, with the value being one of a number, a formatted string, or an array of block numbers. So the main difference is that this type of query will pull in data which is not limited to a specific block, it returns data as if the query had been issued when that block was the current block. For example, if you had a Dog collection of subjects in your ledger, you could issue this query to see all of the dogs which had been transacted and not deleted as of block 7:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"select"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"from"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"block"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To read more on querying blocks, check out the docs pages for &lt;a href="https://docs.flur.ee/docs/1.0.0/query/block-query"&gt;block queries&lt;/a&gt; and &lt;a href="https://docs.flur.ee/docs/1.0.0/query/overview#block-key"&gt;querying with the block key&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XxmIAp5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c4o4hf2n0mia8hdogtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XxmIAp5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c4o4hf2n0mia8hdogtr.png" alt="Brain Graphic"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#history-queries"&gt;
  &lt;/a&gt;
  History Queries
&lt;/h3&gt;

&lt;p&gt;The way a &lt;code&gt;/history&lt;/code&gt; query is structured and issued is relatively similar to &lt;code&gt;/block&lt;/code&gt; queries, but are fairly different in what results are returned. As I mentioned above, a history query returns all of the modifications to a subject. I like to think of a block query showing the breadth of the data at a specific time and the history query as looking down the timeline of a specific piece of data.&lt;br&gt;
For example, if you had a customer in your dataset who has connections to other customers, you could see the history of that customer's connections from when they first joined your application up to the current block. If you wanted to see the connections that customer had at a specific block or over a range of blocks, that is possible, as is using the ISO-8601 date-times or durations.&lt;br&gt;&lt;br&gt;
You can build a &lt;code&gt;/history&lt;/code&gt; query using FlureeQL in JSON the same way you would with a &lt;code&gt;/block&lt;/code&gt; query. For example, if you know the subject's &lt;code&gt;_id&lt;/code&gt; you can simply hit the &lt;code&gt;/history&lt;/code&gt; endpoint like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;351843720888320&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This query will return an array of objects, each object containing the block and t numbers for that block and an array of flakes for that subject.&lt;br&gt;&lt;br&gt;
Another option is to issue a history query with a block key in order to constrain the results of the query to a specific timeframe in your data. That looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;369435906932737&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"block"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This query will return the flakes for this &lt;code&gt;_id&lt;/code&gt; up to block 4. You can also use a block range or use the ISO-8601 formatted string similar to the &lt;code&gt;/block&lt;/code&gt; queries. &lt;/p&gt;

&lt;p&gt;Using a flake format is another way you can  issue a history query. This means that you can use pieces of data to identify the subject you want to query. This works via the subject, predicate, object structure of a flake. You pass the elements you want to use to query in an array as the value of the "history" key in the query JSON. The array needs to be passed as &lt;code&gt;["subject", "predicate", "object"]&lt;/code&gt;, but you do not have to use all 3 elements in the array for the query to resolve.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that the order of these within the array is important and either a subject or a predicate is required. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if you want to query for the history of all subjects matching the predicate object pair &lt;code&gt;dog/breed&lt;/code&gt; &lt;code&gt;"french bulldog"&lt;/code&gt; in your collection, you could query the ledger like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"dog/breed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"french bulldog"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Another way this could be done is using either a subject &lt;code&gt;_id&lt;/code&gt; with a predicate, or substitute a two-tuple which uniquely identifies a subject for the &lt;code&gt;_id&lt;/code&gt;.&lt;br&gt;
That would look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;351843720888320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"dog/favFoods"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or with a two-tuple&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"dog/name"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jacques"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"dog/favFoods"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Both of these queries will return the history of the predicate &lt;code&gt;"dog/favFoods"&lt;/code&gt; for the dog specified, with either the subject &lt;code&gt;_id&lt;/code&gt; or the unique identifier of &lt;code&gt;["dog/name" "Jacques"]&lt;/code&gt; used to identify the subject you want to inspect. &lt;br&gt;
Similar to the &lt;code&gt;"/block"&lt;/code&gt; queries, a &lt;code&gt;"/history"&lt;/code&gt; query can also accept a &lt;code&gt;"prettyPrint"&lt;/code&gt; key-value pair. When true this will return the history of the subject or predicate as indicated, but will separate out the retracted and asserted flakes per block into their own arrays. That looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;351843720888320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"prettyPrint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;which will return something in this type of structure:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"asserted"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;351843720888320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"dog/breed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"french bulldog"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"retracted"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the return JSON, each block containing data which matches the query is its own labeled object containing a named array for asserted and retracted.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#showauth"&gt;
  &lt;/a&gt;
  "showAuth"
&lt;/h3&gt;

&lt;p&gt;There is one other extremely powerful way to use &lt;code&gt;"/history"&lt;/code&gt; queries to audit the history of who transacted the data. You can issue a &lt;code&gt;"showAuth"&lt;/code&gt; boolean key-value pair or an array of &lt;code&gt;_auth/id&lt;/code&gt; or &lt;code&gt;_auth&lt;/code&gt; subject &lt;code&gt;_id&lt;/code&gt;'s in order to filter the history query to specific auth record's transactions. Because each transaction is signed by a private key which is associated cryptographically with the &lt;code&gt;_auth/id&lt;/code&gt;, every flake in Fluree contains a record of who issued that transaction. This is the way to view that data. It looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;351843720888320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"showAuth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will return an array of block objects, each of which will contain a named array of &lt;code&gt;"auth"&lt;/code&gt; which consists of the auth's subject &lt;code&gt;_id&lt;/code&gt; and the &lt;code&gt;"_auth/id&lt;/code&gt; of the individual (man or machine) which signed that block. Which will look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"block"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"flakes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17592186044436&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17592186044437&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17592186044438&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ferret"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"t"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;105553116266496&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"TexTgp1zpMkxJq1nThrgwkU5dp9wzaXA7BX"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For more information on how Fluree stores and interacts with identity and authorization, please take a look at the &lt;a href="https://docs.flur.ee/guides/1.0.0/identity/auth-records"&gt;identity section&lt;/a&gt; in the docs. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrap-it-up"&gt;
  &lt;/a&gt;
  Wrap it up
&lt;/h2&gt;

&lt;p&gt;So that's how you can go about time traveling in Fluree. There are powerful tools which come out-of-the box which enable you to do things like query as of a specific moment in time, see how a subject evolved over time in your dataset, or get all of the data which was transacted by a specific auth record. You can read more about it in our &lt;a href="//docs.flur.ee"&gt;docs site&lt;/a&gt; or if you would prefer to engage with our community, come join us on &lt;a href="https://launchpass.com/flureedb"&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more detail about this subject, you can watch our Time and Immutability Webinar on YouTube: &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CLZm3ZjvQqM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
This has video has a publicly available demo  which you can review here: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/fluree"&gt;
        fluree
      &lt;/a&gt; / &lt;a href="https://github.com/fluree/time-webinar"&gt;
        time-webinar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Demo app which uses the create-react-app template for Fluree to embed a webworker with the application. This demo showcases functionality around issuing block and history queries.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Time and Immutability Webinar Demo&lt;/h1&gt;
&lt;p&gt;This is the repository used for the demo in the &lt;a href="https://www.youtube.com/watch?v=CLZm3ZjvQqM&amp;amp;t=1972s" rel="nofollow"&gt;Time and Immutability Webinar&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Set up&lt;/h2&gt;
&lt;p&gt;To begin working with this demo app, you will need to have Fluree running locally on your machine
For detailed instruction on getting Fluree installed, please visit the &lt;a href="https://docs.flur.ee/docs/1.0.0/getting-started/installation" rel="nofollow"&gt;installation page on the docs site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will also need to have &lt;a href="https://nodejs.org/en/download/" rel="nofollow"&gt;Node.js&lt;/a&gt; installed on your machine.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/fluree/time-webinar/tree/main/data"&gt;data folder&lt;/a&gt; contains the seed data for using this application as it is shown in the webinar
To get the data loaded into your Fluree instance, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Admin UI and create a ledger called time/webinar.&lt;/li&gt;
&lt;li&gt;Using either the Admin UI or a REST client of your choosing (Postman, Insomnia, etc.) transact the files in the data/ folder, in order, to your ledger
&lt;ul&gt;
&lt;li&gt;This will transact the schema&lt;/li&gt;
&lt;li&gt;The airports and tags for the statuses&lt;/li&gt;
&lt;li&gt;The flight.json files…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/fluree/time-webinar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>database</category>
      <category>blockchain</category>
      <category>immutability</category>
      <category>fluree</category>
    </item>
    <item>
      <title>8 Advanced Google Search Operator to Ease Your Job</title>
      <author>Muhimen</author>
      <pubDate>Thu, 01 Jul 2021 18:13:37 +0000</pubDate>
      <link>https://dev.to/muhimen123/8-advanced-google-search-operator-to-ease-your-job-17jd</link>
      <guid>https://dev.to/muhimen123/8-advanced-google-search-operator-to-ease-your-job-17jd</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;When in doubt, Google it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a developer, &lt;a href="https://www.google.com/"&gt;Google&lt;/a&gt; is one of the most useful tool you will ever use. However, if you want to get the most out of your tool, just a simple google search might not be what you are looking for. Sometimes you need to dig deep to get your way out. So, here is a list of some useful Google Search Operator that I use regularly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-for-exactmatch-search"&gt;
  &lt;/a&gt;
  1. " " for exact-match search
&lt;/h3&gt;

&lt;p&gt;Wrap your search term with double quotes and Google will try to yield results consisting of the exact search term. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0wUHMVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907334/withquotes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0wUHMVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907334/withquotes.png" alt="before quote"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXDjCYEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907359/withoutquotes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXDjCYEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907359/withoutquotes.png" alt="after quote"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-or"&gt;
  &lt;/a&gt;
  2. OR
&lt;/h3&gt;

&lt;p&gt;If you want to get a search result for either X or Y then simply just search &lt;code&gt;X OR Y&lt;/code&gt; or you can also do &lt;code&gt;X | Y&lt;/code&gt;. However, if any of the search terms consists of more than one word, wrap them with quotes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnoMVOGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907384/OR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnoMVOGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907384/OR.png" alt="or without quote"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IX6KSfPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907404/orquote.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IX6KSfPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907404/orquote.png" alt="or with quote"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-define"&gt;
  &lt;/a&gt;
  3. define
&lt;/h3&gt;

&lt;p&gt;If you face some foreign word and want to know the meaning, instead of typing &lt;code&gt;meaning of xyz&lt;/code&gt; try &lt;code&gt;define:xyz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pp4LnGIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907418/define.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pp4LnGIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907418/define.png" alt="define"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;doesn't work all the time&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-exclude"&gt;
  &lt;/a&gt;
  4. Exclude(-)
&lt;/h3&gt;

&lt;p&gt;Use minus sign(-) before any word that you don't want in the search result. For example &lt;code&gt;-python programming&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WyfkMYhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907448/programming.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyfkMYhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907448/programming.png" alt="just the bare term"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usK9Xsvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907485/withoutexclude.png.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usK9Xsvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907485/withoutexclude.png.png" alt="without exclude"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HC0zPylH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907503/withexclude.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HC0zPylH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907503/withexclude.png" alt="with exclude"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-site"&gt;
  &lt;/a&gt;
  5. site
&lt;/h3&gt;

&lt;p&gt;Only show the search result from the site you defined. &lt;code&gt;site:dev.to react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_AJBkb---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907518/site.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_AJBkb---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907518/site.png" alt="site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-intitle"&gt;
  &lt;/a&gt;
  6. intitle
&lt;/h3&gt;

&lt;p&gt;Looks if a specific word you mentioned is in the URL. &lt;code&gt;intitle:devto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJ5WHcmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907534/intitle.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJ5WHcmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907534/intitle.png" alt="intitle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-intext"&gt;
  &lt;/a&gt;
  7. intext
&lt;/h3&gt;

&lt;p&gt;Similar to &lt;code&gt;intitle&lt;/code&gt; but this time it will search for a specific word inside the actual content&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FWZKW4-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907552/intext.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FWZKW4-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907552/intext.png" alt="intext"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-filetype"&gt;
  &lt;/a&gt;
  8. filetype
&lt;/h3&gt;

&lt;p&gt;If you want the result file something different from the default HTML, you can use filetype like this &lt;code&gt;filetype:txt programming&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hD2lBJD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907571/filetype.png.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hD2lBJD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://res.cloudinary.com/muhimen/image/upload/v1623907571/filetype.png.png" alt="filetype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was if from my end. But there are still quite a few for you to explore. If you are interested to see the possibilities, take a look at this &lt;a href="https://ahrefs.com/blog/google-advanced-search-operators/"&gt;blog&lt;/a&gt; &lt;/p&gt;

</description>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to debug Node.js apps in Visual Studio Code</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 01 Jul 2021 18:02:54 +0000</pubDate>
      <link>https://dev.to/logrocket/how-to-debug-node-js-apps-in-visual-studio-code-1ha5</link>
      <guid>https://dev.to/logrocket/how-to-debug-node-js-apps-in-visual-studio-code-1ha5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ayooluwaisaiah/"&gt;Ayooluwa Isaiah&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;The Visual Studio Code editor has all the tools to debug Node.js applications effectively. Its built-in debugger can debug any application that targets the Node.js runtime, even if the source code for the application is a language that transpiles to JavaScript, such as TypeScript.&lt;/p&gt;

&lt;p&gt;When beginning a debugging session, you must inspect the call stack and any scoped variables in their current state. You can also evaluate expressions in the editor and step through the code to drill into the problematic parts.&lt;/p&gt;

&lt;p&gt;Setting up a project for Node.js debugging is not particularly difficult, and this tutorial will help you get it right on the first try!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before beginning, ensure the most recent versions of both Node.js and Visual Studio Code are installed. This tutorial uses v16.2.0 and 1.56.2, respectively.&lt;/p&gt;

&lt;p&gt;You also need a Node.js project; you can use your own or download this &lt;a href="https://github.com/finallyayo/url-shortener"&gt;sample URL shortener application&lt;/a&gt;. The instructions to set it up are in the project's README file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-a-debugging-session-in-visual-studio-code"&gt;
  &lt;/a&gt;
  Start a debugging session in Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;The easiest way to start a debugging session in Visual Studio Code is to open a file in the editor, click the &lt;strong&gt;Run View&lt;/strong&gt; icon in the &lt;strong&gt;Activity Bar&lt;/strong&gt; (or press &lt;code&gt;Ctrl+Shift+D&lt;/code&gt; on your keyboard), followed by the &lt;strong&gt;Run and Debug&lt;/strong&gt; button at the top left corner of the application.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://blog.logrocket.com/top-10-vs-code-extensions-2021/"&gt;Visual Studio Code debugger&lt;/a&gt; will try to auto-detect the debug environment for your project, but if this fails, you will be prompted to select the appropriate environment; in this case, select &lt;strong&gt;Node.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pD5Q-O4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Select-Node-js-environment-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pD5Q-O4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Select-Node-js-environment-1.png" alt="Select Node.js Environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Node.js (legacy)&lt;/strong&gt; option refers to the old JavaScript debugger, which is still available but not recommended.&lt;/p&gt;

&lt;p&gt;After selecting an environment, the project launches and the debugger attaches to the process. You can see the output of your project in the &lt;strong&gt;DEBUG CONSOLE&lt;/strong&gt;, and the debug toolbar appears at the top of the screen to step through the code, pause the script, or end the session.&lt;/p&gt;

&lt;p&gt;On the left-hand side of the editor, there are five panes titled &lt;strong&gt;VARIABLES&lt;/strong&gt;, &lt;strong&gt;WATCH&lt;/strong&gt;, &lt;strong&gt;CALL STACK&lt;/strong&gt;, &lt;strong&gt;LOADED SCRIPTS&lt;/strong&gt;, and &lt;strong&gt;BREAKPOINTS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6pn_rvNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Left-side-panels-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6pn_rvNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Left-side-panels-2.png" alt="Left-Side Panels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You also can create a launch configuration file for the project to configure and save debugging setup details that are infinitely reusable by anyone working on the project. This configuration file is saved as &lt;code&gt;launch.json&lt;/code&gt; in the &lt;code&gt;.vscode&lt;/code&gt; folder at the root of the project.&lt;/p&gt;

&lt;p&gt;Create the configuration file by clicking the &lt;strong&gt;create a launch.json file&lt;/strong&gt; link in the &lt;strong&gt;RUN AND DEBUG: RUN&lt;/strong&gt; view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dc_ecesx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Create-launch-json-file-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dc_ecesx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Create-launch-json-file-1.png" alt="Create Launch.json File"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After selecting the environment for your project, the &lt;code&gt;launch.json&lt;/code&gt; file should appear in the editor with the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;.vscode/launch.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pwa-node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Launch URL Shortener"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"skipFiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;node_internals&amp;gt;/**"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}/src/server.js"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; of the configuration is how it will be identified in the &lt;strong&gt;Configurations&lt;/strong&gt; menu; the program that will run is specified in the &lt;code&gt;program&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;There are many options that can be set on each configuration, such as the arguments to pass to the program, environment variables, and pre-debugging tasks. &lt;a href="https://code.visualstudio.com/docs/editor/debugging_launchjson-attributes"&gt;Read the documentation&lt;/a&gt; to find out which settings are relevant to your project.&lt;/p&gt;

&lt;p&gt;Once you've finished setting up the project configuration, select and execute through the &lt;strong&gt;Configuration&lt;/strong&gt; dropdown menu.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attach-an-external-nodejs-process"&gt;
  &lt;/a&gt;
  Attach an External Node.js process
&lt;/h3&gt;

&lt;p&gt;Another option to begin a debugging session is attaching to an external Node.js process. Start the program with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;--inspect&lt;/span&gt; src/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, if you want the debugger to attach before the program starts running, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;--inspect-brk&lt;/span&gt; src/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After executing either of the above commands, you can open a process picker within Visual Studio Code, which lists all the processes that are available to the Node.js debugger. To open the process picker, type &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; and find the &lt;strong&gt;Debug: Attach to Node Process&lt;/strong&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Kf-Lasd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Debug-attach-Node-process-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Kf-Lasd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Debug-attach-Node-process-1.png" alt="Debug Attach To Node Process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opens a menu that lists each individual Node.js process running on your machine. There may be several entries, but it should be easy enough to select the one you are interested in.&lt;/p&gt;

&lt;p&gt;Select the relevant entry to start the debugging session.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ah2X6FDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Start-debugging-session.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ah2X6FDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Start-debugging-session.gif" alt="Start Debugging Session"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-breakpoint"&gt;
  &lt;/a&gt;
  Creating a breakpoint
&lt;/h3&gt;

&lt;p&gt;Breakpoints allow you to pause the code execution on a specific line to inspect it. You can create breakpoints in Visual Studio Code almost anywhere except function declaration statements. You are not restricted from doing so on variable declarations, expressions, comments, and blank lines.&lt;/p&gt;

&lt;p&gt;Create a breakpoint by clicking the gutter to the left of the line numbers in the editor. As you move your mouse across the numbers, a red circle appears on each line. Clicking the red circle on a line causes it to turn bright red, indicating that an active breakpoint is present on that line.&lt;/p&gt;

&lt;p&gt;You can repeat this for all the lines in your program that are relevant to the problem you're trying to solve.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ip99BEf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Active-breakpoints-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ip99BEf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Active-breakpoints-1.png" alt="Active Breakpoints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you create a breakpoint in the handler for a route, for instance, you can trigger it by executing that part of the code by making a request to the route using the browser or tools like &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; or &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This causes the program to stop executing, and you can inspect the values of any current scope identifier in the &lt;strong&gt;VARIABLES&lt;/strong&gt; pane by hovering on the line of the current breakpoint that’s highlighted in yellow. This is similar to the JavaScript debugger in web browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0PgM-bBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Inpsect-values-VARIABLES-pane.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0PgM-bBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Inpsect-values-VARIABLES-pane.png" alt="Inspect Values In VARIABLES Pane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;BREAKPOINTS&lt;/strong&gt; pane, all the breakpoints that are enabled in your project are available. You can edit or disable any breakpoint from there, which is helpful if you have several breakpoints across different files in your application.&lt;/p&gt;

&lt;p&gt;You can also break on all exceptions that occur in your application or uncaught exceptions only. In the latter case, this means the debugger pauses before the error message prints, and you can inspect what may have gone wrong before the process exits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nK7t_lyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Exception-occurred-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nK7t_lyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Exception-occurred-1.png" alt="Exception Occurred"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A variant of breakpoints that is useful for the debugging workflow is the logpoint, which logs a message or value to the console instead of pausing the code execution and breaking into the debugger.&lt;/p&gt;

&lt;p&gt;Think of it as a more sophisticated &lt;code&gt;console.log()&lt;/code&gt; statement that is easy to add and remove without editing the code itself. It is represented by a red diamond-shaped icon in place of the red circle.&lt;/p&gt;

&lt;p&gt;Set a logpoint by right-clicking the gutter and selecting &lt;strong&gt;Add Logpoint&lt;/strong&gt;. This brings up an input field where you can log text to the console. If you want to log the value of an expression or a variable, place it within curly brackets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PuK9HJPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Add-logpoint-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PuK9HJPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Add-logpoint-2.gif" alt="Add Logpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inspecting-values"&gt;
  &lt;/a&gt;
  Inspecting values
&lt;/h3&gt;

&lt;p&gt;Let's take a deeper look at how you can inspect values in your program as it runs. The main aspects the editor pays attention to are the &lt;strong&gt;VARIABLES&lt;/strong&gt; and &lt;strong&gt;WATCH&lt;/strong&gt; panes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSwHgbsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Inspecting-values-VARIABLES-WATCH-Pane-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSwHgbsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Inspecting-values-VARIABLES-WATCH-Pane-1.png" alt="Inspecting Values VARIABLES WATCH Pane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables-pane"&gt;
  &lt;/a&gt;
  VARIABLES pane
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;VARIABLES&lt;/strong&gt; pane is where you can inspect the values of variables and expressions that were evaluated at the breakpoint. If you open the context menu by right-clicking on any of the values listed, you can perform a few actions on the variable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Set Value&lt;/strong&gt; lets you modify the variable's value to test certain values while code is executing&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Copy Value&lt;/strong&gt; copies the value of a variable to the clipboard&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Copy as Expression&lt;/strong&gt; copies an expression to access the variable&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Add to Watch&lt;/strong&gt; adds the variable to the &lt;strong&gt;WATCH&lt;/strong&gt; pane for monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#watch-pane"&gt;
  &lt;/a&gt;
  &lt;strong&gt;WATCH&lt;/strong&gt; pane
&lt;/h3&gt;

&lt;p&gt;The main benefit of the &lt;strong&gt;WATCH&lt;/strong&gt; pane is that you can easily bring values that you want to monitor into view while the code is paused.&lt;/p&gt;

&lt;p&gt;Instead of digging through a deeply nested property in the &lt;strong&gt;VARIABLES&lt;/strong&gt; pane each time you want to check its value, you can add it to the &lt;strong&gt;WATCH&lt;/strong&gt; pane for easy access. This is most useful when determining the values of several variables at once since they are automatically recalculated in the execution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lp8-zyG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Watch-pane.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lp8-zyG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Watch-pane.png" alt="WATCH Pane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracing-the-path-of-code-execution"&gt;
  &lt;/a&gt;
  Tracing the path of code execution
&lt;/h2&gt;

&lt;p&gt;The debug toolbar at the top of the editor provides several commands to navigate through the debugger efficiently. When you're trying to find the path the program took to get to a specific line or function, these features prove invaluable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_Qmi92x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Tracing-code-path-execution.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_Qmi92x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/Tracing-code-path-execution.png" alt="Tracing Code Path Execution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-raw-f8-endraw-"&gt;
  &lt;/a&gt;
  Continue (&lt;code&gt;F8&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;When the program halts at a breakpoint, you can use this button to resume the execution of the code until the next breakpoint, if any.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-over-raw-f10-endraw-"&gt;
  &lt;/a&gt;
  Step Over (&lt;code&gt;F10&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;This command executes the currently highlighted line and pauses before the next line executes. You can run the command to move down a function and fully understand it’s executed in the process.&lt;/p&gt;

&lt;p&gt;If you use this command on a line that calls a function, it executes the entire function and pauses at the line underneath the function call.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-into-raw-f11-endraw-"&gt;
  &lt;/a&gt;
  Step Into (&lt;code&gt;F11&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;The Step Into command works just like Step Over, except when it hits a function call, it enters the invoked function and pauses on the first line. This is a useful way to move from one place to another in your codebase without skipping any details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-out-raw-shiftf11-endraw-"&gt;
  &lt;/a&gt;
  Step Out (&lt;code&gt;Shift+F11&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;This command continues the execution and pauses at the last line of the current function. This can be used if you accidentally enter a function that is not relevant to the problem you're attempting to solve.&lt;/p&gt;

&lt;p&gt;This command helps you get out of that function and back to the relevant bits quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#restart-raw-ctrlshiftf5-endraw-"&gt;
  &lt;/a&gt;
  Restart (&lt;code&gt;Ctrl+Shift+F5&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;Use this to reset the debugger instead of killing and launching it again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stop-raw-shiftf5-endraw-"&gt;
  &lt;/a&gt;
  Stop (&lt;code&gt;Shift+F5&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;When you're done debugging a program, use this command to exit the debugging session. If you attach to an external Node.js process, an icon appears to disconnect from the process instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-typescript-with-source-maps"&gt;
  &lt;/a&gt;
  Debugging TypeScript with source maps
&lt;/h2&gt;

&lt;p&gt;Many Node.js projects are now written in TypeScript, which can also be debugged with Visual Studio Code.&lt;/p&gt;

&lt;p&gt;To begin, enable &lt;code&gt;sourceMap&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once enabled, attach to the running process and set breakpoints in your TypeScript file. Visual Studio Code searches the entire project for source maps, excluding the &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;outFiles&lt;/code&gt; attribute in your launch configuration file to specify the exact location where Visual Studio Code must look for source maps; this should be the location of the JavaScript output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pwa-node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Launch TypeScript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"skipFiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;node_internals&amp;gt;/**"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"preLaunchTask"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"compile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}/src/server.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"outFiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}/dist/**/*.js"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using &lt;a href="https://blog.logrocket.com/typescript-with-node-js-and-express/"&gt;&lt;code&gt;ts-node&lt;/code&gt; to run your project&lt;/a&gt; without a build step, the process is simpler. Instead of using the &lt;code&gt;launch.json&lt;/code&gt; configuration above, use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pwa-node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Launch Server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"skipFiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;node_internals&amp;gt;/**"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"runtimeArgs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"-r"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"ts-node/register"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}/src/server.ts"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is no &lt;code&gt;program&lt;/code&gt; attribute, so &lt;code&gt;runtimeArgs&lt;/code&gt; registers &lt;code&gt;ts-node&lt;/code&gt; as the handler for TypeScript files, and the first argument to &lt;code&gt;args&lt;/code&gt; is the entry file for the program. Once this is set up, you can start a debugging session!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PADP9tBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/runtimeArgs-registers-ts-node-handler.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PADP9tBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/runtimeArgs-registers-ts-node-handler.png" alt="runtimeArgs Registers ts-node As The Handler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we've addressed many of the important aspects of debugging Node.js projects in Visual Studio Code. For more information on all the features that the debugger offers, refer to the &lt;a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging"&gt;online documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy debugging!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#200s-only-monitor-failed-and-slow-network-requests-in-production"&gt;
  &lt;/a&gt;
  200’s only ✔️ Monitor failed and slow network requests in production
&lt;/h2&gt;

&lt;p&gt;Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, &lt;a href="https://logrocket.com/signup/"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1zhbpx-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" alt="LogRocket Network Request Monitoring"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.&lt;/p&gt;

&lt;p&gt;LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Make Analytics Great Again</title>
      <author>William BEUIL</author>
      <pubDate>Thu, 01 Jul 2021 18:01:35 +0000</pubDate>
      <link>https://dev.to/wbeuil/make-analytics-great-again-67h</link>
      <guid>https://dev.to/wbeuil/make-analytics-great-again-67h</guid>
      <description>&lt;p&gt;Dear readers, if you are reading this article, it means you're looking for a way to measure the number of views of your website. You could easily use Google Analytics, even though it's free, but it's really hard to fully understand and use it. I decided to go with an alternative and I will try to explain why I chose &lt;a href="https://plausible.io"&gt;Plausible Analytics&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-plausible"&gt;
  &lt;/a&gt;
  What is Plausible?
&lt;/h2&gt;

&lt;p&gt;Plausible Analytics was created and is still maintained by &lt;a href="https://twitter.com/ukutaht"&gt;Uku Taht&lt;/a&gt; and &lt;a href="https://twitter.com/markosaric"&gt;Marko Saric&lt;/a&gt; from Estonia. It is a fairly new web analytics service since it started in December 2018 and launched in April 2019. They say that it is a simple and privacy-friendly alternative to Google Analytics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-strengths"&gt;
  &lt;/a&gt;
  Its strengths
&lt;/h2&gt;

&lt;p&gt;One of the main features I like about Plausible is that it is fully &lt;strong&gt;open source&lt;/strong&gt;. You can see exactly what the code looks like and even contribute to it if you want in their &lt;a href="https://github.com/plausible/analytics"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is so easy to integrate and since the script is &lt;strong&gt;only 1 KB&lt;/strong&gt;, it's lightning-fast!&lt;/p&gt;

&lt;p&gt;They do not use cookies whatsoever, compared to Google Analytics, which makes them &lt;strong&gt;GDPR and PECR compliant&lt;/strong&gt;. Say goodbye to the cookie banner.&lt;/p&gt;

&lt;p&gt;They're &lt;strong&gt;not tracking people&lt;/strong&gt; across devices nor across websites and apps which means they can't know or understand the behavior of your users.&lt;/p&gt;

&lt;p&gt;All collected data can be found below. As you can see there are &lt;strong&gt;no personal data&lt;/strong&gt; or personally identifiable information collected. At the end of the day, Plausible only tracks the overall trends in my website traffic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USY2aAtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsye287qsyuxgtqwvcbm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USY2aAtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsye287qsyuxgtqwvcbm.png" alt="Plausible Data Points"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Last but not least, I can &lt;strong&gt;self-host it wherever I want&lt;/strong&gt; and make it public so that everyone can see what I have access to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfhost-plausible-like-me"&gt;
  &lt;/a&gt;
  Self-host Plausible like me
&lt;/h2&gt;

&lt;p&gt;For this little project, we will use their up and running &lt;a href="https://github.com/plausible/hosting"&gt;template&lt;/a&gt; that has everything we need to boot up our Plausible server.&lt;/p&gt;

&lt;p&gt;We're gonna use &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt; as our IaC (Infrastructure as Code) tool and we will deploy our infrastructure to &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we're gonna build can be summarized with this diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqh7hOoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcs35njrodpbjbvr7e4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqh7hOoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcs35njrodpbjbvr7e4u.png" alt="Plausible Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we need a &lt;a href="https://aws.amazon.com/vpc"&gt;VPC&lt;/a&gt; that lets us launch other AWS resources in an isolated virtual network that we can define as wanted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_vpc"&lt;/span&gt; &lt;span class="s2"&gt;"vpc"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;cidr_block&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"10.0.0.0/16"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, to enable Plausible to have access to the internet we need to place it in a public-facing subnet. For those who don't know, if a subnet is associated with a route table that has a route to an internet gateway, it's known as a public subnet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_subnet"&lt;/span&gt; &lt;span class="s2"&gt;"subnet"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;vpc_id&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_vpc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vpc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
  &lt;span class="nx"&gt;cidr_block&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"10.0.0.0/24"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_internet_gateway"&lt;/span&gt; &lt;span class="s2"&gt;"gw"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;vpc_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_vpc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vpc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_default_route_table"&lt;/span&gt; &lt;span class="s2"&gt;"rt"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;default_route_table_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_vpc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vpc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;default_route_table_id&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_route"&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;route_table_id&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_default_route_table&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rt&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
  &lt;span class="nx"&gt;gateway_id&lt;/span&gt;             &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_internet_gateway&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gw&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
  &lt;span class="nx"&gt;destination_cidr_block&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To help secure the web server, we need a security group with rules which allow the web server to respond to inbound HTTP requests from the internet while simultaneously allowing all outbound IPv4 traffic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_default_security_group"&lt;/span&gt; &lt;span class="s2"&gt;"sg"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;vpc_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_vpc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vpc&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_security_group_rule"&lt;/span&gt; &lt;span class="s2"&gt;"i_http"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ingress"&lt;/span&gt;
  &lt;span class="nx"&gt;from_port&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
  &lt;span class="nx"&gt;to_port&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
  &lt;span class="nx"&gt;protocol&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tcp"&lt;/span&gt;
  &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"HTTP"&lt;/span&gt;
  &lt;span class="nx"&gt;security_group_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_default_security_group&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sg&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_security_group_rule"&lt;/span&gt; &lt;span class="s2"&gt;"e_all"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"egress"&lt;/span&gt;
  &lt;span class="nx"&gt;from_port&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nx"&gt;to_port&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nx"&gt;protocol&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-1"&lt;/span&gt;
  &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"All protocols"&lt;/span&gt;
  &lt;span class="nx"&gt;security_group_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_default_security_group&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sg&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we need to configure the web server with several credentials, we need SSH access to it. To make it easy for this example, allow all IPV4 access to SSH but bear in mind that you should always allow only your IP address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_security_group_rule"&lt;/span&gt; &lt;span class="s2"&gt;"i_ssh"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;              &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ingress"&lt;/span&gt;
  &lt;span class="nx"&gt;from_port&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
  &lt;span class="nx"&gt;to_port&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
  &lt;span class="nx"&gt;protocol&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tcp"&lt;/span&gt;
  &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SSH"&lt;/span&gt;
  &lt;span class="nx"&gt;security_group_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_default_security_group&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sg&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create now the &lt;a href="https://aws.amazon.com/ec2"&gt;EC2 instance&lt;/a&gt; where the web server will be launched into.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_instance"&lt;/span&gt; &lt;span class="s2"&gt;"instance"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ami&lt;/span&gt;                         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ami-0b3e57ee3b63dd76b"&lt;/span&gt;
  &lt;span class="nx"&gt;instance_type&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"t2.micro"&lt;/span&gt;
  &lt;span class="nx"&gt;subnet_id&lt;/span&gt;                   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_subnet&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subnet&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
  &lt;span class="nx"&gt;associate_public_ip_address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="nx"&gt;key_name&lt;/span&gt;                    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"plausible"&lt;/span&gt;
  &lt;span class="nx"&gt;user_data&lt;/span&gt;                   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"script.sh"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;root_block_device&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;volume_size&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="nx"&gt;volume_type&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"gp2"&lt;/span&gt;
    &lt;span class="nx"&gt;encrypted&lt;/span&gt;             &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="nx"&gt;delete_on_termination&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The SSH key has been created with &lt;code&gt;aws ec2 create-key-pair --key-name plausible --query "KeyMaterial" --output text &amp;gt; plausible.pem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I created a specific script to automatically update all packages and to install docker and docker-compose in our EC2 instance to make it quicker to launch our Plausible server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
yum update &lt;span class="nt"&gt;-y&lt;/span&gt;
amazon-linux-extras &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; docker
service docker start
usermod &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-G&lt;/span&gt; docker ec2-user
chkconfig docker on
curl &lt;span class="nt"&gt;-L&lt;/span&gt; https://github.com/docker/compose/releases/latest/download/docker-compose-&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;-&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; /usr/local/bin/docker-compose
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x /usr/local/bin/docker-compose
reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can follow their &lt;a href="https://plausible.io/docs/self-hosting"&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to download their repository first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; https://github.com/plausible/hosting/archive/master.tar.gz | &lt;span class="nb"&gt;tar &lt;/span&gt;xz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;hosting-master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to add the required environment variables to &lt;code&gt;plausible-conf.env&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ADMIN_USER_EMAIL=XXX@gmail.com
ADMIN_USER_NAME=XXX
ADMIN_USER_PWD=XXX
BASE_URL=http://1.2.3.4:8000 = the public IP of your EC2 instance
SECRET_KEY_BASE=XXX = a random base64 secret key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since I want to use my Gmail account, I need to create a &lt;a href="https://support.google.com/accounts/answer/185833"&gt;Google App Password&lt;/a&gt; and then add below environment variables to the configuration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SMTP_HOST_ADDR=smtp.gmail.com
SMTP_HOST_PORT=465
SMTP_USER_NAME=XXX@gmail.com
SMTP_USER_PWD=XXX = your Google App Password
SMTP_HOST_SSL_ENABLED=true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can start our Plausible server with &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We should now be able to hit &lt;code&gt;http://1.2.3.4:8000&lt;/code&gt; in our favorite browser and see the login page of our Plausible server. At the end of the registration process, we should have the script that we would need to add to our website to start gathering page views.&lt;/p&gt;

&lt;p&gt;In a Next.js website, you can add the script in the &lt;code&gt;_document.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;initialProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://1.2.3.4:8000/js/plausible.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NextScript&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! We can now check back our Plausible server at &lt;code&gt;http://1.2.3.4:8000&lt;/code&gt; to see whether we're getting any visits to our website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;We've installed, configured, and deployed our Plausible server in AWS with Terraform. Don't hesitate to follow their &lt;a href="https://plausible.io/docs"&gt;documentation&lt;/a&gt; to further configure your Plausible server.&lt;/p&gt;

&lt;p&gt;Thanks so much for reading! If you liked this post or it helped you in any way please consider sharing it. I will probably make a second blog post to upgrade our Plausible server to enable SSL requests.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>terraform</category>
      <category>aws</category>
    </item>
    <item>
      <title>Organizing AWS Community MENA GameTech Day 2021</title>
      <author>Anas Khattar</author>
      <pubDate>Thu, 01 Jul 2021 17:44:13 +0000</pubDate>
      <link>https://dev.to/aws-heroes/organizing-aws-community-mena-gametech-day-2021-flb</link>
      <guid>https://dev.to/aws-heroes/organizing-aws-community-mena-gametech-day-2021-flb</guid>
      <description>&lt;p&gt;After launching me-south-1 during &lt;a href="https://www.youtube.com/watch?v=O6OFE46pyJQ"&gt;AWS Summit Bahrain 2019&lt;/a&gt; we got to meet the amazing &lt;a href="https://www.linkedin.com/in/pakiza/"&gt;Pakiza Abdulrahman&lt;/a&gt; from &lt;a href="https://twitter.com/bahrainedb"&gt;EDB Bahrain&lt;/a&gt;, who explained how the game development community is growing in Bahrain and how the launching of the new AWS Region in Bahrain will decrease the latency for gaming development and game streaming in the region.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UNESCO sees digital games as innovative tools for teaching and learning about peace and sustainability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last year 2020 we only managed to run the AWS MENA Community Day and this year we decided on a &lt;a href="https://awsmena.community/gametech/"&gt;virtual GameTech Day conference&lt;/a&gt; to start with and shed the light on a world of opportunity in the game development industry especially with cloud scalability and agility as game development have an interwoven demand within all other digital experiences.&lt;/p&gt;

&lt;p&gt;We were lucky to be AWSomely sponsored by &lt;a href="https://www.amd.com/en/graphics/workstation-virtual-graphics-amazon-g4ad"&gt;AMD&lt;/a&gt; who are interested to shed light on their &lt;a href="https://aws.amazon.com/ec2/amd/"&gt;AWS&lt;/a&gt; general purpose and game development and streaming instance offerings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-outreach-and-communication"&gt;
  &lt;/a&gt;
  Community, Outreach and Communication
&lt;/h3&gt;

&lt;p&gt;For collaboration and outreach we talked to &lt;a href="https://arabic.games/"&gt;Arabic Games&lt;/a&gt; organizer &lt;a href="https://twitter.com/JosephRAzzam"&gt;Joseph Azzam&lt;/a&gt; and the UnReal Bahrain community lead by &lt;a href="https://www.linkedin.com/in/yousef-buhazza-9560a618/"&gt;Yousef BuHaza&lt;/a&gt; to help us navigate the regional game development ecosystem because they have alot of experience with Game Jams in the region.&lt;/p&gt;

&lt;p&gt;Our AWS Communities in MENA were very excited and curious at the same time since its a new topic for most digital businesses in the region. A meetup will be created within all participating user groups. You can find a list of AWS user groups in MENA &lt;a href="https://aws.amazon.com/developer/community/usergroups/middle-east/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speakers"&gt;
  &lt;/a&gt;
  Speakers
&lt;/h3&gt;

&lt;p&gt;The speakers come from around the globe and from the MENA region to bring new perspectives, technologies and skills to our audience. Here's a list of our speakers, topics and their short bio.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alex-casalboni-keynote"&gt;
  &lt;/a&gt;
  Alex Casalboni - Keynote
&lt;/h4&gt;

&lt;p&gt;Alex is deeply passionate about web technologies and music. He has been building web products and helping other builders learn from his experience since 2011. His coding love spreads across the Python and the JavaScript communities, and he's been contributing to open-source projects such as AWS Lambda Power Tuning.&lt;/p&gt;

&lt;p&gt;He co-organizes the serverless meetup in Milan, as well as ServerlessDays Milan (previously JeffConf).&lt;/p&gt;

&lt;p&gt;As a Sr. Developer Advocate, Alex often speaks at technical conferences across the world, supports developer communities and helps them build applications in the cloud. He is particularly interested in serverless architectures, machine learning, and data analytics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/alexcasalboni"&gt;GitHub&lt;/a&gt; - &lt;a href="https://twitter.com/alex_casalboni/"&gt;Twitter&lt;/a&gt; - &lt;a href="https://www.linkedin.com/in/alexcasalboni/"&gt;Linkedin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#musab-abdullah-empowering-bahrain-and-the-mena-tech-community"&gt;
  &lt;/a&gt;
  Musab Abdullah - Empowering Bahrain and the MENA Tech Community
&lt;/h4&gt;

&lt;p&gt;Musab is the Executive Director of Investment Development at the Bahrain Economic Development Board (EDB). In his capacity, he focuses on international outreach and attracting investments to the Kingdom within the ever-growing technology sector. Along with continuous policy advocacy and eco-system building to ensure ease of investment and continuous growth and success for investors.&lt;br&gt;
Musab and his team work closely with technology-related companies, including startups, that are looking to access the region through the Kingdom of Bahrain. This includes supporting the companies throughout the decision-making process, through to their establishment and potential expansion of their operations. Musab is also responsible for working with key stakeholders to identify the strategic direction of the sector, develop the eco-system and ensure that Bahrain offers an attractive, seamless and friendly business environment for all entities, from startups to corporates. &lt;br&gt;
Prior to joining the EDB, Musab worked in the telecommunications sector for over a decade, as a policy-maker with the Ministry of Transportation and Telecommunications and as a regulator with the Telecommunications Regulatory Authority. His work focused on ensuring the continued growth and development of the sector, through introducing forward-looking policies, rolling out national projects and representing the Kingdom in international forums such as the International Telecommunications Union. He has also worked with a number of entities in other fields, including e-Government projects with the Central Informatics Organisation (now the Information and eGovernment Authority) and on banking solutions with Kuwait Finance House.&lt;br&gt;&lt;br&gt;
Musab holds a BSc. in Computer Science from the University of Bahrain and an MSc. in Finance from DePaul University.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.linkedin.com/in/musab-abdullah-b213a8a"&gt;Linkedin&lt;/a&gt; - &lt;a href="https://www.bahrainedb.com/"&gt;Web&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#michael-deneffe-amd-and-aws-powering-game-development"&gt;
  &lt;/a&gt;
  Michael DeNeffe - AMD and AWS – Powering Game Development
&lt;/h4&gt;

&lt;p&gt;For my entire career I’ve paired a passion for technology with an intuition for business and market development—resulting in a blend of business strategy and non-traditional ideas. Cloud graphics represent the perfect technology and marketplace to exercise my passion and experience&lt;/p&gt;

&lt;p&gt;I've developed partnerships big and small, all with the end goal to drive business success. I’ve managed dozens of product launches from cloud to enterprise to consumer and gaming. In the process I’ve driven success for companies, from start-ups to industry leaders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.linkedin.com/in/michaeldeneffe/"&gt;Linkedin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#david-heidt-go-global-in-minutes-how-you-can-accelerate-your-gameservers-and-backends-with-aws-edge-services"&gt;
  &lt;/a&gt;
  David Heidt - Go global in minutes: How you can accelerate your gameservers and backends with AWS Edge Services.
&lt;/h4&gt;

&lt;p&gt;AWS Senior Solutions Architect for Gaming, get in touch with David on his social channels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.linkedin.com/in/davidsimonheidt"&gt;Linkedin&lt;/a&gt; - &lt;a href="https://twitter.com/davidsheidt"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#olivier-chappe-the-anatomy-of-a-presence-api-how-to-modernize-application-with-aws-serverless-services"&gt;
  &lt;/a&gt;
  Olivier Chappe - The anatomy of a Presence API: how to modernize application with AWS Serverless services.
&lt;/h4&gt;

&lt;p&gt;AWS GameTech Solutions Architect, get in touch with Olivier on his social media channels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.linkedin.com/in/olivierchappe"&gt;Linkedin&lt;/a&gt; - &lt;a href="https://twitter.com/olivier_chappe"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#marion-finnigan-know-your-players-grow-your-game-a-guide-to-liveops-in-the-cloud"&gt;
  &lt;/a&gt;
  Marion Finnigan - Know your Players, grow your Game: A Guide to LiveOps in the Cloud
&lt;/h4&gt;

&lt;p&gt;15 years in tech, covering the full breadth (hardware, operating systems, software, cloud), has led me to my happy place - the games industry. I worked with customers up and down the value chain, ranging from retailers (B2C), ISPs and telcos (B2B2C) to now video games developers/publishers and cloud providers (B2B). I'm an experienced and determined all-rounder with strong business acumen, an analytical and structured approach, and obsession for my customers - all influenced by strong values that I live by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Say what’s right and act upon it.&lt;/li&gt;
&lt;li&gt;Always do the best you can and be humble about it.&lt;/li&gt;
&lt;li&gt;Be passionate about what you do.&lt;/li&gt;
&lt;li&gt;Treat others as you wish to be treated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/marionfinnigan-love-what-i-do/"&gt;https://www.linkedin.com/in/marionfinnigan-love-what-i-do/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#joseph-azzam"&gt;
  &lt;/a&gt;
  Joseph Azzam
&lt;/h4&gt;

&lt;p&gt;As part of the Evangelist team at Epic games, Joseph travels mostly in the Middle East to talk and teach Unreal Engine.&lt;br&gt;
Joseph founded LebGameDev, a non-profit initiative that focuses on growing the gamedev scene in Lebanon. &lt;br&gt;
He specialized in a wide range of topics including VR, cultural heritage preservation, photogrammetry, tech art, and Blueprint, which he used to Develop Byblos VR.&lt;br&gt;
He is currently teaching game development Saint-Joseph University of Beirut.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.linkedin.com/in/josephazzam/"&gt;Linkedin&lt;/a&gt; - &lt;a href="https://twitter.com/JosephRAzzam"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#yousef-buhaza"&gt;
  &lt;/a&gt;
  Yousef BuHaza
&lt;/h4&gt;

&lt;p&gt;Unreal Bahrain is a community-based group of volunteers that supports innovators and entertainment entrepreneurs in Bahrain and the region mainly in the field of game development. Since our formation in Early 2017 by Yousef BuHazza.&lt;br&gt;
The community aims to aims to establish an environment that supports local and regional game developers. We recognize that game development is a collaborative effort that combines several disciplines, so to us, game developers are people with different skills that would like to use those skills to develop a game.&lt;br&gt;
Initially the community was focused on developing digital games using Epic Games Unreal Engine, but has shifted to support all forms of game development regardless of the platform and included physical games such as table top games.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/YousefBuHazza"&gt;Twitter&lt;/a&gt;&lt;/strong&gt; - &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/yousef-buhazza-9560a618/"&gt;Linkedin&lt;/a&gt; - &lt;a href="https://unrealbahrain.com/"&gt;Web&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#denis-dyack-how-to-get-into-the-video-game-industry"&gt;
  &lt;/a&gt;
  Denis Dyack - How To Get Into The Video Game Industry
&lt;/h4&gt;

&lt;p&gt;Denis Dyack, a video game industry veteran of more than 30 years, is the Founder and CEO of Apocalypse Studios. His studio evangelizes using a cloud-first approach in game development and partners with AWS Game Tech to move the medium of the games industry forward.&lt;/p&gt;

&lt;p&gt;In his years of experience speaking at games conferences and within AWS communities, Denis has been an advocate for building on Amazon Lumberyard and more recently in moving over game development pipelines to AWS.&lt;/p&gt;

&lt;p&gt;Denis is also exploring deep Twitch integration for games and continues to find innovative ways to partner Amazon with games communities. He is always excited to share his AWS experiences and passion for his craft with others in the games industry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/denis_dyack"&gt;Twitter&lt;/a&gt;&lt;/strong&gt; - &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/denis-dyack-4a94a61"&gt;Linkedin&lt;/a&gt; - &lt;a href="https://apocalypse333.com/"&gt;Web&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#panel-state-of-the-game-dev-industry-the-region"&gt;
  &lt;/a&gt;
  Panel - State of the Game Dev industry the region.
&lt;/h3&gt;

&lt;p&gt;Community Leaders from Lebanon, Tunis, Egypt, Saudi Arabia and Bahrain will be presenting the latest progress in the game dev scene in their countries, as well as go over the future initiatives to look forward to.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#panelist"&gt;
  &lt;/a&gt;
  Panelist:
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#joseph-azzam-host-lebanon"&gt;
  &lt;/a&gt;
  Joseph Azzam (Host) - Lebanon
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#ahmed-metwally-egypt"&gt;
  &lt;/a&gt;
  Ahmed Metwally - Egypt
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#tariq-mukhttar-saudi-arabia"&gt;
  &lt;/a&gt;
  Tariq Mukhttar - Saudi Arabia
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#youssef-buhazza-bahrain"&gt;
  &lt;/a&gt;
  Youssef BuHazza - Bahrain
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#houssem-ben-amor-tunis"&gt;
  &lt;/a&gt;
  Houssem Ben Amor - Tunis
&lt;/h4&gt;

&lt;p&gt;Business Development Manager at Nuked Cockroach, Tresorier of GlobalGameJam.Inc, Co-Founder of Tunisian Games Developers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heroes-trio"&gt;
  &lt;/a&gt;
  Heroes Trio
&lt;/h3&gt;

&lt;p&gt;AWS Community Heroes &lt;a href="https://twitter.com/aseldesouky"&gt;Ahmed Samir&lt;/a&gt; founder of &lt;a href="https://twitter.com/AwsBelaraby"&gt;AWS Bel Araby&lt;/a&gt; and  &lt;a href="https://twitter.com/anaskhattar"&gt;Anas Khattar&lt;/a&gt; AWS Community Hero as well as AWS Container Hero &lt;a href="https://twitter.com/walidshaari"&gt;Walid Shaari&lt;/a&gt; took lead of logistics and coordination between all the different communities and speakers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#landing-page"&gt;
  &lt;/a&gt;
  Landing Page
&lt;/h3&gt;

&lt;p&gt;For the landing page &lt;a href="https://twitter.com/lahdiouiouadie"&gt;Ouadie Lahdioui&lt;/a&gt; AWS UG Morocco Leader used the same static site generator Jeykell which was forked from AWS Community Nordics with a new theme &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aws-mena-community"&gt;
        aws-mena-community
      &lt;/a&gt; / &lt;a href="https://github.com/aws-mena-community/awsmena.community"&gt;
        awsmena.community
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
Follow this tutorial from Aleksandr Hovhannisyan to build your own static site with Jekyll on Github Pages &lt;div class="ltag__link"&gt;
  &lt;a href="/aleksandrhovhannisyan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CkRBSgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mfxHJ3ky--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304963/9894af56-32fb-4ded-8d66-89904e828dc1.jpg" alt="aleksandrhovhannisyan"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aleksandrhovhannisyan/creating-a-personal-website-with-jekyll-and-github-pages-a-comprehensive-guide-3fje" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting Started with Jekyll and GitHub Pages: Your First Website&lt;/h2&gt;
      &lt;h3&gt;Aleksandr Hovhannisyan ・ Mar 1 '20 ・ 46 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#jekyll&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
Also check the live site here -&amp;gt; &lt;a href="https://awsmena.community/gametech"&gt;https://awsmena.community/gametech&lt;/a&gt;

&lt;h3&gt;
  &lt;a href="#registration-broadcasting-streaming-and-graphics"&gt;
  &lt;/a&gt;
  Registration, Broadcasting, Streaming and Graphics
&lt;/h3&gt;

&lt;p&gt;We reached out to AWS regional MENA office in Dubai to create an official registration page for the event &lt;a href="https://menagametechday2021.splashthat.com/"&gt;https://menagametechday2021.splashthat.com/&lt;/a&gt; which we linked to our landing and agenda page.&lt;/p&gt;

&lt;p&gt;We will be using &lt;a href="https://streamyard.com"&gt;StreamYard&lt;/a&gt; for live production and broadcasting to the #1 streaming platform for gamers in the middle east &lt;a href="https://rawa.tv/"&gt;Rawa TV&lt;/a&gt; as well as Twitch and Youtube. Links will be sent by email for registrants a day before the event.&lt;/p&gt;

&lt;p&gt;Our talented designer &lt;a href="https://www.linkedin.com/in/boushra-hassanieh/"&gt;Boushra Hassanieh&lt;/a&gt; crafted the posts using &lt;a href="https://www.canva.com/"&gt;Canva&lt;/a&gt; which is very helpful for custom posts and cover images of the event on Instagram, Twitter, Facebook and Linkedin. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ps5-giveaway-and-conference-feedback"&gt;
  &lt;/a&gt;
  PS5 Giveaway and Conference Feedback
&lt;/h3&gt;

&lt;p&gt;AMD offered a PlayStation 5 console to 4 participants in our post-event feedback survey. The survey will be sent to registrants after the event for feedback and registration in the PS5 raffle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-now-and-lets-play-one-more-game"&gt;
  &lt;/a&gt;
  &lt;a href="https://awsmena.community/gametech"&gt;Register now and lets play one more game!&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>aws</category>
      <category>gamedev</category>
      <category>cloud</category>
      <category>productivity</category>
    </item>
    <item>
      <title>What is Callback Function?</title>
      <author>Prosen Ghosh</author>
      <pubDate>Thu, 01 Jul 2021 17:23:35 +0000</pubDate>
      <link>https://dev.to/_prosen/what-is-callback-function-1mip</link>
      <guid>https://dev.to/_prosen/what-is-callback-function-1mip</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-callback-function"&gt;
  &lt;/a&gt;
  What is callback function?
&lt;/h2&gt;

&lt;p&gt;Any function that is sent as a function argument is called a callback function. Which is then invoked inside the outer function to do some other task or action.&lt;/p&gt;

&lt;p&gt;We can divide callback in 2 types. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Synchronous: &lt;code&gt;callbackFn&lt;/code&gt; executed immediately.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Asynchronous: &lt;code&gt;callbackFn&lt;/code&gt; is chained with a promise and it will be invoked, after that promise fulfills or rejects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's write a callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// passing a function as an argument&lt;/span&gt;
&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet we can see that &lt;code&gt;myFunction()&lt;/code&gt; expects an argument as its parameter. That's why an anonymous function has been given as an argument to &lt;code&gt;myFunction()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;myFunction&lt;/code&gt; body, the argument has been invoked. And that function will &lt;code&gt;console.log&lt;/code&gt; &lt;code&gt;Hello World&lt;/code&gt; to the console. &lt;/p&gt;

&lt;p&gt;That anonymous function is called a &lt;code&gt;callback&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-you-need-a-callback-function"&gt;
  &lt;/a&gt;
  Why do you need a callback function?
&lt;/h2&gt;

&lt;p&gt;The callback function is often used to continue code execution after an operation has completed. &lt;/p&gt;

&lt;p&gt;Let me show you 2 short code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hello 1&lt;/span&gt;
&lt;span class="nx"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hello 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Calling this two function will &lt;code&gt;console.log&lt;/code&gt; &lt;code&gt;Hello 1&lt;/code&gt; and &lt;code&gt;Hello 2&lt;/code&gt; respectively. &lt;/p&gt;

&lt;p&gt;That's the expected result. Right?&lt;/p&gt;

&lt;p&gt;But what if we have to wait for an API call to finish? Will the above still going to work?&lt;/p&gt;

&lt;p&gt;We are going to call an API to see what actually happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xhttp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;xhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;xhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.jsonbin.io/b/5a57a78efa0fa33d7b63d73e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;xhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfyzU-jw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prosen-ghosh.github.io/codesnap/static/ad00dfb1a8e336ffcbb946605d106899/4d3ab/output1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfyzU-jw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prosen-ghosh.github.io/codesnap/static/ad00dfb1a8e336ffcbb946605d106899/4d3ab/output1.jpg" alt="!output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We expected from the above code snippet that &lt;code&gt;Hello 1&lt;/code&gt; will be &lt;code&gt;console.log&lt;/code&gt; first, then the response from the &lt;code&gt;loadData()&lt;/code&gt; function and after that the &lt;code&gt;Hello 2&lt;/code&gt; will be &lt;code&gt;console.log&lt;/code&gt; in the console.&lt;/p&gt;

&lt;p&gt;However, JavaScript does not work this way, it will not wait for the request to finish.&lt;/p&gt;

&lt;p&gt;In the above code snippet, after printing &lt;code&gt;Hello 1&lt;/code&gt; it will print &lt;code&gt;Hello 2&lt;/code&gt;, after that it will log the response from &lt;code&gt;loadData()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Why??? &lt;/p&gt;

&lt;p&gt;Because of the event loop. The event loop is the secret behind JavaScript's asynchronous behavior. &lt;/p&gt;

&lt;p&gt;I will write another day about the &lt;code&gt;event loop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All you need to know now is that if there is some specified event (&lt;code&gt;ex: browser API call, http/s call&lt;/code&gt;) occurred in JavaScript, the JavaScript engine will execute the next code without waiting for that event to finish, and when the event is done, it shows/returns the result of that event.&lt;/p&gt;

&lt;p&gt;So how do we get our expected output using callback? &lt;/p&gt;

&lt;p&gt;The above code can be edited a little bit to get our expected result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xhttp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;xhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// calling callback function here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;xhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.jsonbin.io/b/5a57a78efa0fa33d7b63d73e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;xhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHszyM4---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prosen-ghosh.github.io/codesnap/static/bbaa8ffccd44d722967f59b37205b4e9/6e1aa/output2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHszyM4---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prosen-ghosh.github.io/codesnap/static/bbaa8ffccd44d722967f59b37205b4e9/6e1aa/output2.jpg" alt="output2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;printHello()&lt;/code&gt; function takes a value as an argument and concat it with the string &lt;code&gt;Hello&lt;/code&gt; and log to the console.&lt;/p&gt;

&lt;p&gt;Now the &lt;code&gt;printHello()&lt;/code&gt; function and a value have been sent as an argument to the &lt;code&gt;loadData()&lt;/code&gt; function and the function has been called after the request finishes.&lt;/p&gt;

&lt;p&gt;When the request is finished, the &lt;code&gt;onreadystatechange&lt;/code&gt; function will call, if the request is successful, first it will print the &lt;code&gt;responseText&lt;/code&gt; to the console, then the callback function will be called with the passed value which is &lt;code&gt;2&lt;/code&gt; in this case.&lt;/p&gt;

&lt;p&gt;This way we can get the expected output using the callback function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the &lt;code&gt;onreadystatechange&lt;/code&gt; function is also a callback function. This function is called when it completes the request and sends a response.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>callback</category>
      <category>function</category>
    </item>
    <item>
      <title>So you burned out on coding. Now what?</title>
      <author>Jessi Shakarian</author>
      <pubDate>Thu, 01 Jul 2021 17:21:44 +0000</pubDate>
      <link>https://dev.to/jessishakarian/so-you-burned-out-on-coding-now-what-3h21</link>
      <guid>https://dev.to/jessishakarian/so-you-burned-out-on-coding-now-what-3h21</guid>
      <description>&lt;p&gt;Burnout happens. It happened to me 6 months ago. Only in the last 2-3 weeks have I been feeling re-energized to begin again.&lt;/p&gt;

&lt;p&gt;Here's the most important thing:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#its-okay-if-you-burned-out-on-coding-its-okay-to-take-a-break"&gt;
  &lt;/a&gt;
  It's okay if you burned out on coding. It's okay to take a break.
&lt;/h1&gt;

&lt;p&gt;I have ADHD, I hit my interests &lt;em&gt;really&lt;/em&gt; hard - I am an all or nothing kind of person. It happens, you get really excited about learning to code and you overdo it. Maybe you got a lot going on in your life and coding becomes your escape, your journey to something better. &lt;/p&gt;

&lt;p&gt;Whatever got you to this moment, there's some important things we need to know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-nice-to-yourself"&gt;
  &lt;/a&gt;
  Be nice to yourself.
&lt;/h2&gt;

&lt;p&gt;That's right. Don't try to push through it. Just accept that your body and mind is telling you it's time to take a break. Go do something that will refill your well - watch your favorite tv series, go talk to your friends about stuff that's not programming. Take care of yourself, do all the things you've been putting off. Let your brain take a break and let the information you've just learned simmer on the back burner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming will still be there when you're ready to come back.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I understand that you need this new career option, better pay, whatever it is that's driving you to learn how to code, but &lt;em&gt;you will be a better programmer for this break&lt;/em&gt;, I promise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-a-nonprogramming-hobby"&gt;
  &lt;/a&gt;
  Find a non-programming hobby
&lt;/h2&gt;

&lt;p&gt;You read that correctly. If you don't have a non-programming hobby, get one. If you have one, go back to it. For me, my hobby I fell in love in during my break was chess. I love to play chess! I started getting really involved in the online chess community on twitter.&lt;/p&gt;

&lt;p&gt;I also found it really helpful to play over the board, I needed a break from digital things. Being able to think about something analog is helpful. Your brain thinks differently about analog things compared to digital. Which leads me to my next point...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-aware-of-your-frustrations"&gt;
  &lt;/a&gt;
  Be aware of your frustrations.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#they-might-lead-you-to-your-next-coding-adventure"&gt;
  &lt;/a&gt;
  They might lead you to your next coding adventure.
&lt;/h3&gt;

&lt;p&gt;When I burned out on JavaScript, I thought I never wanted to code again. I was like, I am done, it's gonna be no code from here on! &lt;/p&gt;

&lt;p&gt;Six months later, here I am learning Python. Why? Because I while I was playing a lot of chess, and noticed that I wasn't happy with chess engines. They weren't intuitive for the user, they don't do what I think they should do. I fell down a hole of machine learning, and now here I am learning how to be a machine learning engineer.&lt;/p&gt;

&lt;p&gt;Finding a problem you want to fix is something I actually struggled with when I was learning JavaScript. I had a hard time figuring out &lt;em&gt;what&lt;/em&gt; I wanted to fix, or make better online. If you had asked me six months ago if I was interested in machine learning, I would have told you &lt;em&gt;hell no!&lt;/em&gt;. But now, it's super interesting, because it's a way to problem solve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knowing-how-you-want-to-solve-a-problem-is-half-the-battle"&gt;
  &lt;/a&gt;
  Knowing how you want to solve a problem is half the battle.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#learn-multiple-languages"&gt;
  &lt;/a&gt;
  Learn multiple languages.
&lt;/h3&gt;

&lt;p&gt;As I've mentioned, I started at JavaScript (HTML/CSS first, then JS). It didn't really click with me the first time because I was just taking in information, I wasn't really sure &lt;em&gt;what&lt;/em&gt; to do with that. I was new to the tech world, really just trying to find my place in it. Some things you might want to think about on your break from burnout:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what's your goal? Where do you want to be in a year from now?&lt;/li&gt;
&lt;li&gt;how do you work best? Personally, I'm a really tactile person, so much of my goals tend to revolve around making digital spaces easier to understand. Mostly because I want to be able to understand how things work together.&lt;/li&gt;
&lt;li&gt;what do you want to see in the world? There's just some things that, if you don't do it, no one really will. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's lots of ways to make things online - every programming language or framework does something in a different way. When you're ready to try again, look at the githubs of companies doing what you want to do. See how they put together their own stuff. Try a new to you language or two, you might be surprised what you enjoy because it clicks with the way you think about solving problems.&lt;/p&gt;

&lt;p&gt;The interesting thing to me about taking a break from JavaScript, is that by learning Python and machine learning fundamentals, it actually makes it a lot easier to begin looking at JavaScript again. But really, all I did was begin to narrow my scope by knowing how I want to approach the problems I want to solve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this helps you find your way through the burnout. I didn't think it was going to take 6 months for me to return to coding, but we have to go at the pace that works best for us. Yours might be shorter, or longer than mine. &lt;/p&gt;

&lt;p&gt;Have you had burnout? What did you to help yourself through it? Did you return to the programming language you started in? I'd love to hear more in the comments!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>help</category>
    </item>
    <item>
      <title>Disadvantages of Css-in-Js ?</title>
      <author>sakethk</author>
      <pubDate>Thu, 01 Jul 2021 17:12:29 +0000</pubDate>
      <link>https://dev.to/sakethkowtha/disadvantages-of-css-in-js-56gf</link>
      <guid>https://dev.to/sakethkowtha/disadvantages-of-css-in-js-56gf</guid>
      <description>&lt;p&gt;I am a big fan of &lt;code&gt;CSS-in-JS&lt;/code&gt; especially &lt;code&gt;styled-components&lt;/code&gt; but in this article i want to discuss about disadvantages of using CSS-in-JS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Difficulty to learn for the devs who are new to react syntax.&lt;/li&gt;
&lt;li&gt;The class names themselves are dynamically generated, too, essentially breaking caching as things can change between builds/renders.&lt;/li&gt;
&lt;li&gt;Css-in-js parses all the style definitions into plain vanilla CSS and put everything inside &lt;code&gt;style&lt;/code&gt; tag in &lt;code&gt;index.html&lt;/code&gt; file. This will increase html file size.&lt;/li&gt;
&lt;li&gt;Adds lots of unnecessary code while parsing to vanilla css.&lt;/li&gt;
&lt;li&gt;Browser will not start interpreting the styles until styled-components has parsed them and added them to the DOM, which slows down rendering.&lt;/li&gt;
&lt;li&gt;Most of the UI libraries and frameworks won't support this approach.&lt;/li&gt;
&lt;li&gt;We can't use other css utilities like SCSS, LESS and PostCSS.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10 Tips for Safe and Secure Remote Working for Developers
</title>
      <author>Andriy Zapisotskyi</author>
      <pubDate>Thu, 01 Jul 2021 17:10:15 +0000</pubDate>
      <link>https://dev.to/azapisotskyi/10-tips-for-safe-and-secure-remote-working-for-developers-19fg</link>
      <guid>https://dev.to/azapisotskyi/10-tips-for-safe-and-secure-remote-working-for-developers-19fg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#10-tips-for-safe-and-secure-remote-working"&gt;
  &lt;/a&gt;
  10 Tips for Safe and Secure Remote Working
&lt;/h1&gt;

&lt;p&gt;Modern employees require more flexibility than their previous counterparts. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.studocu.com/row/document/kenyatta-university/communication-skills/essays/the-way-we-work-has-changed/11470168/view"&gt;54%&lt;/a&gt; of employees say they’d rather shift to a career that offers them more flexibility. In other words, organizations are more likely to retain employees if they offer flexible work arrangements.&lt;/p&gt;

&lt;p&gt;But shifting from in-person work to remote work comes with a full host of changes. The most crucial one? Making sure your remote team is set up to work safely and securely. &lt;/p&gt;

&lt;p&gt;But before we touch on 10 tips to improve your remote team’s security, let’s take a look at the importance of safe and secure remote working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-importance-of-safe-and-secure-remote-working"&gt;
  &lt;/a&gt;
  The importance of safe and secure remote working
&lt;/h3&gt;

&lt;p&gt;Now that more employees are working remotely, many companies are using &lt;a href="https://www.frevvo.com/cloud-workflow-software"&gt;cloud based workflows&lt;/a&gt;, so everyone has access to real-time information and documents. With employees being able to access company information from anywhere in the world, data security is more important than ever.&lt;/p&gt;

&lt;p&gt;But the average remote employee may not have the set-up that businesses require to protect sensitive and proprietary information.&lt;/p&gt;

&lt;p&gt;Without business-grade security, businesses are leaving themselves open to compliance issues, brand damage, leaked data, financial loss, and other legal and costly risks.&lt;/p&gt;

&lt;p&gt;That’s why it’s crucial to be proactive about protecting your business’s security. &lt;/p&gt;

&lt;p&gt;To protect your business, check out the following 10 safety tips.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-tips-for-safe-and-secure-remote-working"&gt;
  &lt;/a&gt;
  10 Tips for Safe and Secure Remote Working
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-use-a-vpn"&gt;
  &lt;/a&gt;
  1: Use a VPN
&lt;/h3&gt;

&lt;p&gt;Our first tip for increasing home and remote network security is providing employees with access to a virtual private network (VPN).&lt;/p&gt;

&lt;p&gt;VPNs act like a highly protected tunnel within another network connection you manage. All data stays within the tunnel, meaning: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No one outside the VPN has the authority to access it&lt;/li&gt;
&lt;li&gt;Your data never mingles with or leaks out into the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VPNs also unlock geographically restricted content without encrypting your traffic (so it doesn’t affect your internet speed).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--niVLB5vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwizoogi2s286douveb5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--niVLB5vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwizoogi2s286douveb5.jpeg" alt="VPN"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When choosing a VPN, look for one that offers 24/7 customer support, native apps for multiple operating systems and devices, and international servers, like &lt;a href="https://vpnguru.com/reviews/expressvpn/"&gt;ExpressVPN&lt;/a&gt;does.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-keep-hr-processes-and-data-confidential"&gt;
  &lt;/a&gt;
  2: Keep HR processes and data confidential
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.crazyegg.com/blog/best-peo-companies/"&gt;HR processes&lt;/a&gt; and data contain sensitive information that could lead to business and legal problems if compromised. &lt;/p&gt;

&lt;p&gt;Because of this, HR teams need a way to access important data to do their jobs without sacrificing security. The answer? &lt;/p&gt;

&lt;p&gt;Storing data securely and making it accessible to the right people.&lt;/p&gt;

&lt;p&gt;To do this, you’ll either need to use a tool like Microsoft’s Compliance Manager in Microsoft 365 or you can hire a professional employer organization (PEO) service provider to handle it for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-have-a-safe-contract-signing-process"&gt;
  &lt;/a&gt;
  3: Have a safe contract signing process
&lt;/h3&gt;

&lt;p&gt;Remote working means that you’ll likely hire your team without seeing them face-to-face. &lt;/p&gt;

&lt;p&gt;From non-disclosure agreements to work contracts and W-4s, new employees have a lot of forms to sign.&lt;/p&gt;

&lt;p&gt;To make sure your onboarding process is secure, you’ll need to use &lt;a href="https://www.pandadoc.com/contract-management-software/"&gt;contract management software&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This ensures that all documents are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In order&lt;/li&gt;
&lt;li&gt;Signed and dated electronically &lt;/li&gt;
&lt;li&gt;Encrypted and secured from lurkers &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having a safe contract signing process is also important for other contracts and forms, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client contracts&lt;/li&gt;
&lt;li&gt;Vendor contracts&lt;/li&gt;
&lt;li&gt;Tax forms &lt;/li&gt;
&lt;li&gt;Legal forms&lt;/li&gt;
&lt;li&gt;Banking forms &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-share-documents-securely"&gt;
  &lt;/a&gt;
  4: Share documents securely
&lt;/h3&gt;

&lt;p&gt;Collaboration and file sharing are integral parts of a remote business.&lt;/p&gt;

&lt;p&gt;Whether it’s NDA, &lt;a href="https://www.conversion.ai/templates"&gt;copy templates&lt;/a&gt;, product description, or ad copy – all documents have to be shared securely across the whole team.&lt;/p&gt;

&lt;p&gt;To help your employees securely share files, consider using protected &lt;a href="https://wordable.io/open-a-pdf-in-google-docs/"&gt;PDFs and private Google docs&lt;/a&gt; with assigned permissions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2mMGS5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drhg8yfs00uhm2vt1znx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2mMGS5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drhg8yfs00uhm2vt1znx.jpeg" alt="Lumin PDF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to encourage your employees to refrain from collaborating and sharing files through email. Although sharing through email is usually quick and easy, it’s best to avoid &lt;a href="https://dev.to/baldikov/how-to-secure-the-communication-of-your-remote-team-3g0"&gt;communicating&lt;/a&gt; and transferring files this way if confidential information is involved.&lt;/p&gt;

&lt;p&gt;If you have to use email to send or receive a file, always triple-check where it’s coming from or where you’re sending it to make sure it’s a valid and secure email address.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-issue-devices-to-your-team"&gt;
  &lt;/a&gt;
  5: Issue devices to your team
&lt;/h3&gt;

&lt;p&gt;When employees use their own devices to work from home, they tend to use devices that are less secure than business-issued devices. &lt;/p&gt;

&lt;p&gt;It’s possible that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Their devices don’t have proper security applications installed&lt;/li&gt;
&lt;li&gt;They don’t update their software&lt;/li&gt;
&lt;li&gt;They could be using the same simple password for all logins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even worse, they could be accessing insecure websites like torrents or suspicious sites using those same devices. This increases the risk of data leaks and viruses plaguing your confidential files. &lt;/p&gt;

&lt;p&gt;To avoid this, consider issuing professional devices to your employees that your IT team recommends. If this isn’t possible, see if your IT team can tighten the security around your employees’ personal devices. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-use-antivirus-software"&gt;
  &lt;/a&gt;
  6: Use antivirus software
&lt;/h3&gt;

&lt;p&gt;Your business probably already uses cybersecurity tools to protect against &lt;a href="https://dev.to/pranav2612000/phishinder-a-phishing-detection-tool-3ff0"&gt;phishing&lt;/a&gt;, viruses, malware, and ransomware on business hardware. &lt;/p&gt;

&lt;p&gt;But if employees are using personal devices for work, they need high-level protection too. &lt;/p&gt;

&lt;p&gt;To make sure they use antivirus software, provide them with security software programs and ask them to show you proof that they’ve been installed. You can also provide a list of acceptable security software programs as an alternative. &lt;/p&gt;

&lt;p&gt;In the end, there’s no way around it — everyone needs antivirus software to work safely. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-implement-remote-working-policies"&gt;
  &lt;/a&gt;
  7: Implement remote working policies
&lt;/h3&gt;

&lt;p&gt;Implementing remote work &lt;a href="https://dev.to/mannuelf/content-security-policy-on-netlify-guide-4p0c"&gt;security policies&lt;/a&gt; shows your team that your business is serious about having security measures in place. This also holds your staff accountable for working securely.&lt;/p&gt;

&lt;p&gt;After choosing which policies to implement, make sure to coach your team, so they fully understand what’s expected of them.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOu5G8Yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f54e2tfvuaucl90061bp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOu5G8Yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f54e2tfvuaucl90061bp.png" alt="Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your security policies may include rules about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Screen positioning &lt;/li&gt;
&lt;li&gt;Session logout&lt;/li&gt;
&lt;li&gt;Sharing access&lt;/li&gt;
&lt;li&gt;Alternative work sites &lt;/li&gt;
&lt;li&gt;Lockable, burglar-resistant office equipment &lt;/li&gt;
&lt;li&gt;Backup media storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-encourage-employees-to-report-suspicious-attempts"&gt;
  &lt;/a&gt;
  8: Encourage employees to report suspicious attempts
&lt;/h3&gt;

&lt;p&gt;Employees often feel nervous reporting suspicious attempts or potential cyber incidents. They may fear losing their job, getting penalized, or being questioned about breaching security policies. &lt;/p&gt;

&lt;p&gt;But encouraging employees to report cyber incidents can make them feel more comfortable about coming forward when something happens. &lt;/p&gt;

&lt;p&gt;To foster open communication, create a single source dedicated to reporting suspicious activity via a dedicated messaging group, Slack channel, or IT support email. This way, they’ll know exactly how to report the incident when they’re working from home. &lt;/p&gt;

&lt;p&gt;It’s also important to ask employees to report suspicious activity, even if they broke one of your security policies. To encourage them to do this, ensure employees that they won’t face harsh disciplinary action if they come forward. Then, offer additional security training so they can be better equipped to follow policies in the future. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-provide-security-training-and-reminders-to-your-team"&gt;
  &lt;/a&gt;
  9: Provide security training and reminders to your team
&lt;/h3&gt;

&lt;p&gt;Conducting security training in the form of webinars, workshops, and video classes helps employees better understand how to work safely. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AX1eDG7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acs1imw7e94n6kgfvbih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AX1eDG7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acs1imw7e94n6kgfvbih.png" alt="Remote work security"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When deciding on a training program, choose one that’s hands-on. This way, employees can practice sharing files, updating software, configuring their routers, installing virus protection, and using VPNs. &lt;/p&gt;

&lt;p&gt;One more important point, use LastPass as a password management system or any other &lt;a href="https://blog.appsumo.com/lastpass-alternative/"&gt;LastPast alternative&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s also important to explain exactly what to do if something goes awry. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-prepare-for-a-security-breach"&gt;
  &lt;/a&gt;
  10: Prepare for a security breach
&lt;/h3&gt;

&lt;p&gt;Remember, security is a team effort. It’s not really a question of if you’ll have a security breach, but rather when you’ll have one.&lt;/p&gt;

&lt;p&gt;To make sure your business will still be up and running when that happens, have backup systems in place. &lt;/p&gt;

&lt;p&gt;What will you do if an employee’s device is stolen?&lt;/p&gt;

&lt;p&gt;What will you do if a manager accidentally opens a phishing email?&lt;/p&gt;

&lt;p&gt;Have a backup plan in place in case anything happens. That way, you won’t lose productivity, even if your systems and networks are breached. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that’s it! We hope these 10 tips for safe and secure remote working are just what you needed to read. &lt;/p&gt;

&lt;p&gt;With careful planning and training, your team will be on its way to operating as securely as possible.&lt;/p&gt;

&lt;p&gt;Are you curious about the history of cloud-based workflows, AKA the main reason businesses can operate and collaborate remotely? &lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/172"&gt;Then check out our podcast episode “The History of the Cloud.”&lt;/a&gt;&lt;/p&gt;

</description>
      <category>remote</category>
      <category>workstations</category>
      <category>programming</category>
      <category>security</category>
    </item>
  </channel>
</rss>
