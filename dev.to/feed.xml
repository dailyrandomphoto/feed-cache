<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Scraping Wikipedia for data using Puppeteer and Node</title>
      <author>Tyler Reicks</author>
      <pubDate>Wed, 06 Jan 2021 04:41:23 +0000</pubDate>
      <link>https://dev.to/tyry327/scraping-wikipedia-for-data-using-puppeteer-and-node-1f0l</link>
      <guid>https://dev.to/tyry327/scraping-wikipedia-for-data-using-puppeteer-and-node-1f0l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;In this article, we'll go through scraping a Wikipedia table with COVID-19 data using Puppeteer and Node. The original article that I used for this project is located &lt;a href="https://analyticsindiamag.com/puppeteer-web-scraping/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have never scraped a website before. I've always seen it as a hacky thing to do. But, after going through this little project, I can see the value of something like this. Data is hard to find and if you can scrape a website for it, in my opinion, by all means, do it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Setting up this project was extremely easy. All you have to do is install Puppeteer with the command &lt;code&gt;npm install puppeteer&lt;/code&gt;. There was one confusing issue I had during setup, however. The puppeteer package was not unzipped correctly when I initially installed it. I found this out while running the initial example in the article. If you get an error that states &lt;code&gt;Failed to launch browser process&lt;/code&gt; or something similar follow these steps: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unzip &lt;code&gt;chrome-win&lt;/code&gt; from &lt;code&gt;node_modules/puppeteer/.local-chromium/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then add that folder to the &lt;code&gt;win64&lt;/code&gt; folder in that same &lt;code&gt;.local-chromium&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;chrome.exe&lt;/code&gt; is in this path &lt;code&gt;node_modules/puppeteer/.local-chromium/win64-818858/chrome-win/chrome.exe&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This is for windows specifically. Mac might be similar, but not sure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the &lt;a href="https://github.com/puppeteer/puppeteer/issues/5662#issuecomment-625788716"&gt;link&lt;/a&gt; that lead me to the answer. It might be a good idea to do this no matter what to make sure everything is functioning properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code" class="anchor"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;I had to make a couple of small changes to the existing code. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-example" class="anchor"&gt;
  &lt;/a&gt;
  First example
&lt;/h4&gt;

&lt;p&gt;The first example didn't work for me. To fix the problem I assigned the async function to a variable then invoked that variable after the function. I'm not sure this is the best way to handle the issue but hey, it works. Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');

const takeScreenShot = async () =&amp;gt; {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto('https://www.stem-effect.com/');
    await page.screenshot({path: 'output.png'});

    await browser.close();
};

takeScreenShot();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#wikipedia-scraper" class="anchor"&gt;
  &lt;/a&gt;
  Wikipedia scraper
&lt;/h4&gt;

&lt;p&gt;I also had an issue with the Wikipedia scraper code. For some reason, I was getting null values for the country names. This screwed up all of my data in the JSON file I was creating. &lt;/p&gt;

&lt;p&gt;Also, the scraper was 'scraping' every table on the Wikipedia page. I didn't want that. I only wanted the first table with the total number of cases and deaths caused by COVID-19. Here is the modified code I used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');
const fs = require('fs')

const scrape = async () =&amp;gt;{
    const browser = await puppeteer.launch({headless : false}); //browser initiate
    const page = await browser.newPage();  // opening a new blank page
    await page.goto('https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic_by_country_and_territory', {waitUntil : 'domcontentloaded'}) // navigate to url and wait until page loads completely

    // Selected table by aria-label instead of div id
    const recordList = await page.$$eval('[aria-label="COVID-19 pandemic by country and territory table"] table#thetable tbody tr',(trows)=&amp;gt;{
        let rowList = []    
        trows.forEach(row =&amp;gt; {
                let record = {'country' : '','cases' :'', 'death' : '', 'recovered':''}
                record.country = row.querySelector('a').innerText; // (tr &amp;lt; th &amp;lt; a) anchor tag text contains country name
                const tdList = Array.from(row.querySelectorAll('td'), column =&amp;gt; column.innerText); // getting textvalue of each column of a row and adding them to a list.
                record.cases = tdList[0];        
                record.death = tdList[1];       
                record.recovered = tdList[2];   
                if(tdList.length &amp;gt;= 3){         
                    rowList.push(record)
                }
            });
        return rowList;
    })
    console.log(recordList)
    // Commented out screen shot here
    // await page.screenshot({ path: 'screenshots/wikipedia.png' }); //screenshot 
    browser.close();

    // Store output
    fs.writeFile('covid-19.json',JSON.stringify(recordList, null, 2),(err)=&amp;gt;{
        if(err){console.log(err)}
        else{console.log('Saved Successfully!')}
    })
};
scrape();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I wrote comments on the subtle changes I made, but I'll also explain them here. &lt;/p&gt;

&lt;p&gt;First, instead of identifying the table I wanted to use by the &lt;code&gt;div#covid19-container&lt;/code&gt;, I pinpointed the table with the aria-label. This was a little more precise. Originally, the reason the code was scraping over all of the tables on the page was because the IDs were the same (I know, not a good practice. That's what classes are for, right?). Identifying the table via aria-label helped ensure that I only scraped the exact table I wanted, at least in this scenario.&lt;/p&gt;

&lt;p&gt;Second, I commented out the screenshot command. It broke the code for some reason and I didn't see the need for it if we were just trying to create a JSON object from table data.&lt;/p&gt;

&lt;p&gt;Lastly, after I obtained the data from the correct table I wanted to actually use it in a chart. I created an HTML file and displayed the data using Google charts. You can see the full project on my &lt;a href="https://github.com/tyry327/scraper"&gt;Github&lt;/a&gt; if you are curious. Fair warning, I got down and dirty (very hacky) putting this part together, but at the end of the day, I just wanted an easier way to consume the data that I had just mined for. There could be a whole separate article on the amount of refactoring that can be done on my HTML page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This project was really fun. Thank you to the author, Mohit Maithani, for putting it together. It opened my eyes to the world of web scraping and a whole new realm of possibilities! At a high level, web scraping enables you to grab data from anywhere you want. &lt;/p&gt;

&lt;p&gt;Like one of my favorite Youtubers, Ben Sullins likes to say, "When you free the data, your mind will follow". &lt;/p&gt;

&lt;p&gt;Love y'all. Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>puppeteer</category>
    </item>
    <item>
      <title>How to manage background processes in Linux</title>
      <author>Javed Shaikh</author>
      <pubDate>Wed, 06 Jan 2021 03:36:51 +0000</pubDate>
      <link>https://dev.to/shaikh/how-to-manage-background-processes-in-linux-1d2m</link>
      <guid>https://dev.to/shaikh/how-to-manage-background-processes-in-linux-1d2m</guid>
      <description>&lt;p&gt;If you are new to Linux operating system and you start a command or process using terminal/session, you must have noticed that you need to wait till a process or command get finished before starting another command. This is because when you run a command using session or terminal, the process starts in the foreground by default. What should you do to run another command without opening a new terminal?&lt;br&gt;
In this post I am going to show how you can manage background and foreground process in Linux. &lt;/p&gt;

&lt;p&gt;But before that lets understand what is foreground process and what is background process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Foreground process&lt;/strong&gt; is the process or job that is currently running on the terminal. So there will be only one foreground process per terminal.You need to wait till the current foreground process finishes before starting a new foreground process.&lt;br&gt;
**Example: **Any command or process you start in the current session&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background process&lt;/strong&gt; is the process or job running on the background and doesn't require interaction from the user. There can be more than one background process obviously.&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; most common example is your web server.&lt;/p&gt;

&lt;p&gt;For this example I am going to start command VMSTAT 1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5
procs &lt;span class="nt"&gt;-----------memory----------&lt;/span&gt; &lt;span class="nt"&gt;---swap--&lt;/span&gt; &lt;span class="nt"&gt;-----io----&lt;/span&gt; &lt;span class="nt"&gt;-system--&lt;/span&gt; &lt;span class="nt"&gt;------cpu-----&lt;/span&gt;
 r  b   swpd   free   buff  cache   si   so    bi    bo   &lt;span class="k"&gt;in   &lt;/span&gt;cs us sy &lt;span class="nb"&gt;id &lt;/span&gt;wa st
 0  0      0 3045156 167484 2449380    0    0    80    56  469 1138 19  5 76  0  0
 1  0      0 3044644 167492 2450152    0    0     0    92  299  604  2  1 98  0  0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;vmstat&lt;/strong&gt; is command that displays real time memory usage and cpu utillization. If you want to know more about it visit my previous post  &lt;a href="https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the above command &lt;br&gt;
Things to note here is that above command will print CPU stats every five second on the terminal until you interrupt it. If you want to terminate it just press &lt;strong&gt;CTL + C&lt;/strong&gt; or if you want to pause or stop, press &lt;strong&gt;CTL + Z&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bg-move-a-job-to-background" class="anchor"&gt;
  &lt;/a&gt;
  bg: Move a job to background
&lt;/h3&gt;

&lt;p&gt;If you want to move a job that is already started to background so that you can access the terminal press &lt;strong&gt;CTL + Z ** and then **bg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lets start a job in the foreground using below command. Here we are writing CPU stats on a text file. As you can see , we cannot start a new command as this is running on the foreground.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets do &lt;strong&gt;CTL + Z&lt;/strong&gt; to pause this job and then do &lt;strong&gt;bg&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt
^Z
&lt;span class="o"&gt;[&lt;/span&gt;1]+  Stopped                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt
shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;bg&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]+ vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the job running in the background and we got the terminal&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-start-command-and-run-it-in-the-background" class="anchor"&gt;
  &lt;/a&gt;
  How to start command and run it in the background
&lt;/h3&gt;

&lt;p&gt;To start a command and run it in the background use &lt;strong&gt;&amp;amp;&lt;/strong&gt; as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2] 11122
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#jobs-command-to-check-the-job-status" class="anchor"&gt;
  &lt;/a&gt;
  jobs : command to check the job status
&lt;/h3&gt;

&lt;p&gt;This command displays all the jobs running in the current terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]-  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here number withing bracket is [n] is job id or job number and &lt;strong&gt;+&lt;/strong&gt; indicates most recent command or job whereas &lt;strong&gt;-&lt;/strong&gt; indicates previous job. If you want to see the process id use &lt;strong&gt;-l&lt;/strong&gt; option&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]- 10216 Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+ 11122 Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The number 10216 and 11122 are process id&lt;/p&gt;

&lt;p&gt;Different options for &lt;strong&gt;jobs&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#l-lists-process-ids-in-addition-to-the-normal-information" class="anchor"&gt;
  &lt;/a&gt;
  -l :    lists process IDs in addition to the normal information
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#n-lists-only-processes-that-have-changed-status-since-the-last" class="anchor"&gt;
  &lt;/a&gt;
  -n :    lists only processes that have changed status since the last
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#notification" class="anchor"&gt;
  &lt;/a&gt;
  notification
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#p-lists-process-ids-only" class="anchor"&gt;
  &lt;/a&gt;
  -p :    lists process IDs only
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#r-restrict-output-to-running-jobs" class="anchor"&gt;
  &lt;/a&gt;
  -r :    restrict output to running jobs
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#s-restrict-output-to-stopped-jobs" class="anchor"&gt;
  &lt;/a&gt;
  -s :    restrict output to stopped jobs
&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#kill-n-to-kill-a-job-with-job-id-n" class="anchor"&gt;
  &lt;/a&gt;
  kill %n: to kill a job with job id n
&lt;/h3&gt;

&lt;p&gt;Kill command is used to kill a job. Note that &lt;strong&gt;%&lt;/strong&gt; will be used to indicate job id or job number&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;haikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]-  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; %2
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]+  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see now we have only one job running in the background and notice the &lt;strong&gt;+&lt;/strong&gt; sign which indicates the job id 1 becomes the most recent job 🙂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fg-command-to-move-a-job-to-foreground" class="anchor"&gt;
  &lt;/a&gt;
  fg : command to move a job to foreground
&lt;/h3&gt;

&lt;p&gt;Use **fg **command to move a job to foreground. By default it will bring most recent background job to foreground&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]   Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]-  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;3]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;500 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;fg
sleep &lt;/span&gt;500
&lt;span class="o"&gt;[&lt;/span&gt;2]   Done                    &lt;span class="nb"&gt;sleep &lt;/span&gt;400
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have more than one jobs running in the background then use &lt;strong&gt;%n&lt;/strong&gt; to move a specific job to the foreground&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;fg&lt;/span&gt; %2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ps-command-to-see-all-the-processes" class="anchor"&gt;
  &lt;/a&gt;
  ps command to see all the processes
&lt;/h3&gt;

&lt;p&gt;Use &lt;strong&gt;ps&lt;/strong&gt; command to see active processes.&lt;br&gt;
Use below options&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#ps-ax-to-see-all-the-process-currently-active-in-the-system-use-my-previous-post-to-check-the-commands-for-real-time-process-it-will-be-a-very-long-list-so-use-lessmore-parameters" class="anchor"&gt;
  &lt;/a&gt;
  ps ax : to see all the process currently active in the system (Use my previous post to check the commands for real time process). It will be a very long list, so use less/more parameters
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#ps-t-list-all-processes-running-on-current-terminal" class="anchor"&gt;
  &lt;/a&gt;
  ps T: list all processes running on current terminal
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;ps T
    PID TTY      STAT   TIME COMMAND
   5786 pts/0    Ss     0:00 bash
  10216 pts/0    S      0:00 vmstat 5
  12983 pts/0    R+     0:00 ps T
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So in this post we learned different commands to manage background and foreground process. We learned&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-bg-and-fg-to-move-a-job-to-the-background-and-foreground-respectively" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;bg&lt;/strong&gt; and &lt;strong&gt;fg&lt;/strong&gt; to move a job to the background and foreground ##### respectively.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-jobs-command-to-list-all-the-jobs-active-in-the-current-terminal" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;jobs&lt;/strong&gt; command to list all the jobs active in the current terminal.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-kill-command-to-kill-a-job" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;kill&lt;/strong&gt; command to kill a job
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-ps-command-to-see-list-of-all-the-active-and-running-processes" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;ps&lt;/strong&gt; command to see list of all the active and running processes
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#we-also-learned-how-to-start-a-job-in-the-background-using-amp-if-you-want-to-know-real-time-memory-and-cpu-usage-and-control-all-the-processes-running-on-your-system-please-check-my-last-post-httpsshaikhucomhowtomonitorcpuutilizationinlinuxckgcp9gex07g8pas1ees0hz7t" class="anchor"&gt;
  &lt;/a&gt;
  We also learned how to start a job in the background using &lt;strong&gt;&amp;amp;&lt;/strong&gt;. If you want to know real time memory and cpu usage and control all the processes running on your system please check my last post  &lt;a href="https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t"&gt;https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>7 Tips for Clean Code in JavaScript You Should Know</title>
      <author>Kai</author>
      <pubDate>Tue, 05 Jan 2021 22:00:51 +0000</pubDate>
      <link>https://dev.to/kais_blog/7-tips-for-clean-code-in-javascript-you-should-know-2533</link>
      <guid>https://dev.to/kais_blog/7-tips-for-clean-code-in-javascript-you-should-know-2533</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/7-tips-for-clean-code-in-javascript-you-should-know"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's move your learning forward together!&lt;/strong&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;Follow me on Twitter&lt;/a&gt; for your daily dose of developer tips. Thanks for reading my content!&lt;/p&gt;




&lt;p&gt;As a developer, you'll spend much more time reading code than writing it. That's why it's important to write code that's quick to grasp and easy to maintain. In this post, I want to introduce you to 7 tips that will help you create a clean and robust codebase.&lt;/p&gt;

&lt;p&gt;Please note that these are opinionated guidelines. Some of you may not agree with me. In general, these tips will not be universal. Also, this list is not exhaustive at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-meaningful-names" class="anchor"&gt;
  &lt;/a&gt;
  1. Use meaningful names
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;br&gt;
-- Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, naming things is hard. However, meaningless names will trigger chaos in the long run. Whenever you have to choose a name - be it for a variable, a class, a function or anything else - please use meaningful names. The name should tell you the purpose and context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;su&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// What the §*{$ is this?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Ah, now I understand!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-replace-magic-numbers-with-constants" class="anchor"&gt;
  &lt;/a&gt;
  2. Replace magic numbers with constants
&lt;/h2&gt;

&lt;p&gt;What is a magic number? A magic number is a hard coded numeric value. It's an anti-pattern and obscures the developer's intent. Thus, it should be replaced with a constant that describes its purpose. See, you can instantly apply your knowledge from the first tip.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...um, why again do we use `52` here?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DECK_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;DECK_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// It's about a deck of playing cards.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, you may ask why &lt;code&gt;i = 0&lt;/code&gt; is okay. Well, I'd count this as acceptable use. The intent here is clear - using &lt;code&gt;i&lt;/code&gt; and initializing it with &lt;code&gt;0&lt;/code&gt; is widely known among developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-do-not-use-boolean-flags-to-determine-behavior" class="anchor"&gt;
  &lt;/a&gt;
  3. Do not use boolean flags to determine behavior
&lt;/h2&gt;

&lt;p&gt;Often, you encounter a function that has two very similar behaviors. To switch between those, you might be tempted to simply add a boolean flag. However, this makes your code less readable and harder to understand. Try to split the function into two functions without the flag instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// One eternity later…&lt;/span&gt;

&lt;span class="nx"&gt;loadSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;…&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Wait, what is `true` here? Sync? Async? &lt;/span&gt;
&lt;span class="c1"&gt;// Something else? I'm so forgetful.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadSchemaSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// One eternity later…&lt;/span&gt;

&lt;span class="nx"&gt;loadSchemaSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;…&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Ah, it's the synchronous variant.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-reduce-nesting-in-your-code" class="anchor"&gt;
  &lt;/a&gt;
  4. Reduce nesting in your code
&lt;/h2&gt;

&lt;p&gt;Nesting makes code harder to read and especially harder to understand. With some simple tricks you can reduce nesting to a minimum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CREATE_POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Wow, this is deep.&lt;/span&gt;
      &lt;span class="c1"&gt;// Handle request here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// User is not authorized.&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// User is not authenticated.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// User is not authenticated.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CREATE_POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// User is not authorized.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// We can safely assume the user&lt;/span&gt;
  &lt;span class="c1"&gt;// is authenticated and authorized.&lt;/span&gt;
  &lt;span class="c1"&gt;// Handle request here.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-make-use-of-newer-language-features" class="anchor"&gt;
  &lt;/a&gt;
  5. Make use of newer language features
&lt;/h2&gt;

&lt;p&gt;JavaScript is constantly changing. This brings you awesome new features that can improve your codebase. You can use destructuring, classes, the async-await syntax, the numeric separator and much more. My favorites are probably the spread-Operator (&lt;code&gt;...&lt;/code&gt;), the optional-chaining operator (&lt;code&gt;?.&lt;/code&gt;) and nullish-coalescing (&lt;code&gt;??&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Assigning a default value should be easier...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Did I mess up? It's nine zeroes, right?&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oneBillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Deep properties and nesting...urghs&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invoices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Let's use nullish-coalescing (`??`).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The numeric separator makes it easy to tell.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oneBillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Here, we can use optional-chaining.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;invoices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-make-your-code-easy-to-refactor" class="anchor"&gt;
  &lt;/a&gt;
  6. Make your code easy to refactor
&lt;/h2&gt;

&lt;p&gt;Refactoring is the restructuring of your code without changing the observable behavior. To make this easy, you should consider writing automated tests. Therefore, you can use testing frameworks like &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;. If you are using automated tests you can verify that your code is behaving like you'd expect.&lt;/p&gt;

&lt;p&gt;Then, you are ready for refactoring. You can change your code however you want. As long as your tests are passing, everything is fine. This should enable you to be confident about your codebase. No more fear that you are accidentally breaking something.&lt;/p&gt;

&lt;p&gt;Unfortunately, setting up a testing framework like Jest is beyond the scope of this article. If you want, I can create a post about testing (and refactoring) your JavaScript code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-use-eslint" class="anchor"&gt;
  &lt;/a&gt;
  7. Use ESLint
&lt;/h2&gt;

&lt;p&gt;This is the final tip of this post. Use this awesome tool called &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;. It's free and easy to use and surely will improve your codebase. It detects and fixes common problems. Also, you can install useful presets and plugins to detect even more and reformat your code according to a style guide.&lt;/p&gt;

&lt;p&gt;I use ESLint with plugins for &lt;a href="https://github.com/standard/eslint-config-standard"&gt;standard&lt;/a&gt; and &lt;a href="https://github.com/prettier/eslint-config-prettier"&gt;prettier&lt;/a&gt;. Besides, if I'm working with Vue, I'll add &lt;a href="https://github.com/vuejs/eslint-plugin-vue"&gt;eslint-plugin-vue&lt;/a&gt;. Unfortunately, explaining the installation and configuration of ESLint is also beyond the scope of this article. Tell me, if you'd like to hear more about this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-consider-using-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Consider using TypeScript
&lt;/h2&gt;

&lt;p&gt;If you've read any of my posts in the past, you might know that I'm using TypeScript, a superset of JavaScript. It's basically JavaScript on steroids and helps you writing more robust and maintainable code. If you are still undecided, take a look at these &lt;a href="https://dev.to/kais_blog/6-reasons-why-you-should-learn-typescript-in-2021-31mi"&gt;6 Reasons Why You Should Learn TypeScript in 2021 &lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There's so much more you can do to create a clean and maintainable codebase. With my post, you should have a overview about small things you can do to improve your code. In the future, I'll publish more content to make you a better programmer.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Let's move your learning forward together!&lt;/strong&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;Follow me on Twitter&lt;/a&gt; for your daily dose of developer tips. Thanks for reading my content!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/7-tips-for-clean-code-in-javascript-you-should-know"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>70+ JavaScript library, frameworks, tools, and plugins</title>
      <author>chinedu | ddevguys</author>
      <pubDate>Tue, 05 Jan 2021 21:19:38 +0000</pubDate>
      <link>https://dev.to/chinedu/70-javascript-library-frameworks-tools-and-plugins-18g1</link>
      <guid>https://dev.to/chinedu/70-javascript-library-frameworks-tools-and-plugins-18g1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2N7-gdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880051327/-CWQEXQF5.png" alt="stacks post HEADING (1).png"&gt;
&lt;/h2&gt;

&lt;p&gt;Hey and welcome to today's article 😊. &lt;/p&gt;

&lt;p&gt;I decided to put together some JavaScript library, frameworks, tools and plugins.&lt;/p&gt;

&lt;p&gt;Some which I use in my projects. &lt;/p&gt;

&lt;p&gt;If you find them intriguing share it and save it for later.&lt;/p&gt;

&lt;p&gt;Let's go…💃🕺💃🕺💃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1ZIRB4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880068955/HvfpzAePJ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1ZIRB4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880068955/HvfpzAePJ.gif" alt="giphy (1).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LIBRARY AND FRAMEWORK'S&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NodeJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js is an open-source, cross-platform, back-end, JavaScript runtime environment that executes JavaScript code outside a web browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReactJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is an open-source, front end, JavaScript library for building user interfaces or UI components. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VueJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vue.js is an open-source model–view–ViewModel front end JavaScript framework for building user interfaces and single-page applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NextJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next.js is an open-source React front-end development web framework that enables functionality such as server-side rendering and generating static websites for React-based web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular is a TypeScript-based open-source web application framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Svelte&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Svelte is a free and open-source front end JavaScript framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redux is an open-source JavaScript library for managing application state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meteor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Meteor, or MeteorJS, is a free and open-source isomorphic JavaScript web framework written using Node.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backbone.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Backbone.js is a JavaScript library with a RESTful JSON interface and is based on the model–view–controller application design paradigm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ember.js is an open-source JavaScript web framework, utilizing a component-service pattern.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;VISUALIZATION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Three.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Three.js is a cross-browser JavaScript library and application programming interface used to create and display animated 3D computer graphics in a web browser using WebGL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D3.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;D3.js is a JavaScript library for producing dynamic, interactive data visualizations in web browsers. It makes use of Scalable Vector Graphics, HTML5, and Cascading Style Sheets standards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victory.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A JavaScript 2D vector maths library for Node.js and the browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chart.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simple, clean, and engaging HTML5 based JavaScript charts. Chart.js is an easy way to include animated, interactive graphs on your website for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React-vis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React-vis is a React visualization library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trading Vuejs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TradingVue.js is a hackable charting lib for traders. You can draw literally ANYTHING on top of candlestick charts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexmonster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A pivot table component for web reporting, claims to be the most powerful JavaScript tool for visualizing your business data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ApexCharts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ApexCharts is a modern charting library that helps developers to create beautiful and interactive visualizations for web pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Echarts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Declarative Framework for Rapid Construction of Web-based Visualization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Charts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google Charts is an interactive Web service that creates graphical charts from user-supplied information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amCharts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A go-to library for data visualization. When you don't have time to learn new technologies. When you need a simple yet powerful and flexible drop-in data visualization solution. Includes all basic and advanced chart types, as well as is extendable by additional plugins like Maps and TimeLine.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANIMATION LIBRARY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anime.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anime.js is a lightweight JavaScript animation library with a simple, yet powerful API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Animate On Scroll library using CSS3.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Velocity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Velocity is a cross-platform JavaScript library designed to simplify the client-side scripting of website animation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mo.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mo.js is a javascript motion graphics library that is fast, retina-ready, modular and open source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Popmotion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The animator's JavaScript toolbox. Powerful Support for keyframes, spring, and inertia animations on numbers, colors, and complex strings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ScrollReveal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript library to animate elements as they scroll into view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GreenSockJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GSAP is an industry-standard JavaScript animation library from GreenSock that lets you craft high-performance animations that work in every major browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skrollr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;skrollr is a parallax scrolling library used to transform, scale, skew, and rotate any element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AniJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AniJS, Declarative handling library for CSS animations. very beginner-friendly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Typed.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typed.js is a library that types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lottie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Easily add high-quality animation to any native app. Lottie is an iOS, Android, and React Native library that renders After Effects animations in real-time, allowing apps to use animations as easily as they use static images.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;VIDEO LIBRARY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Video JS is a free and open-source HTML5 video player built with JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plyr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Plyr is a simple, lightweight, accessible, and customizable HTML5, YouTube, and Vimeo media player that supports modern browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jPlayer is a free and open-source JavaScript library developed as a jQuery plugin that facilitates the embedding of web-based media, notably HTML5 audio and video in addition to Adobe Flash-based media.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fit vid.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A lightweight, easy-to-use jQuery plugin for fluid width video embeds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;indigo-player&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Highly extensible, modern, JavaScript video player. Handles MPEG-Dash / HLS / MPEG-4 and is built on top of the HTML5 video element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flowplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flowplayer is an online video platform for broadcasters, publishers, and media houses. It gives you top ranking ad fill rates and the best-of-breed live streaming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Popcorn Js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Popcorn.js is an open-source JavaScript library for HTML5 media developers, freely available under the MIT License.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Xgplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a web video player library. It has designed a separate, detachable UI component based on the principle that everything is componentized. More importantly, it is not only flexible in the UI layer, but also bold in its functionality: it gets rid of video loading, buffering, and format support for video dependence.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;AUDIO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Howler.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Howler.js is a JavaScript library that works with Web Audio API by default and falls back to HTML5 Audio when not supported.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tone.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tone.js packs in features for different virtual instruments, sequencers, effects, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wavesurfer.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wavesurfer.js is an HTML 5 audio player and waveform visualizer, made with JavaScript and Web Audio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pizzicato.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pizzicato.js is another well-rounded library that provides a feature-packed set of tools to create everything from compositions made up of sample groups to precisely synthesized sounds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sound Manager 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sound Manager 2 is a JavaScript Sound API supporting MP3, MPEG4 and HTML5 audio. Makes it easy to play audio using JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amplitudejs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AmplitudeJS lets you build a fully customizable web audio player Stop being limited by the web browser's audio player design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vexflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vexflow is a JavaScript library for rendering standard music notation and guitar tablature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sound js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SoundJS abstracts HTML5 sound implementation, making adding consistent cross-browser sound to your games or rich experiences much easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejecta&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ejecta is like a Browser without the Browser. It's specially crafted for Games and Animations. It has no DIVs, no Tables, no Forms - only Canvas and Audio elements. This focus makes it fast.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;GAMES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MelonJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MelonJS is yet another 2D focused game engine. By including the library into your code, you gain access to all kinds of features required for any game worth its money, such as physics support, collisions, sprites, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pixi.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Superfast HTML 5 2D rendering engine that uses webGL with canvas fallback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phaser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Phaser is a 2D game framework used for making HTML5 games for desktop and mobile. It is free software and developed by Photon Storm. Phaser uses both a Canvas and WebGL renderer internally and can automatically swap between them based on browser support.s&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Babylon.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Babylon.js is a real time 3D engine using a JavaScript library for displaying 3D graphics in a web browser via HTML5. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Matter.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Matter.js is a 2D physics engine for the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Egret core&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Egret is a brand new open mobile game and application engine which allows you to quickly build mobile games and apps on Android,iOS and Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Melon.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MelonJS is a lightweight yet powerful HTML5 framework designed from the ground up to provide a true plugin-free 'write-once, run-everywhere' gaming platform. melonJS is an open-source project and supported by a community of enthusiasts. See our Gallery for a few examples of games powered by melonJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crafty&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Crafty is a JavaScript game library that can help you create games in a structured way.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;FORMS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quill&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Module for simple form and input field bindings. Automatically creates hidden input fields for a form and adds submit handling and submit by key. You may also specify your own custom input fields. It creates fields for text, html and delta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cleave.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cleave.js has a simple purpose: to help you format input text content automatically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery Validation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This jQuery plugin makes simple clientside form validation easy, whilst still offering plenty of customization options. It makes a good choice if you're building something new from scratch, but also when you're trying to integrate something into an existing application with lots of existing markup. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selectize.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Selectize is the hybrid of a textbox and  box. It's jQuery-based and it's useful for tagging, contact lists, country selectors, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parsley.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parsley, the ultimate JavaScript form validation library&lt;br&gt;
Validating forms for with this tool for frontend have never been so powerful and easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fine Uploader&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FineUploader is also simple to use. In the simplest case, you only need to include one JavaScript file. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pickadate.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The mobile-friendly, responsive, and lightweight jQuery date &amp;amp; time input picker.&lt;/p&gt;




&lt;p&gt;Thanks for reading! &lt;/p&gt;

&lt;p&gt;My hope is that after finishing this article you would have tools for creating awesome features with JavaScript in the browser. &lt;/p&gt;

&lt;p&gt;Reach out on  &lt;a href="https://twitter.com/chineduvictor7?s=09"&gt;Twitter&lt;/a&gt;  with some of your personal favorite libraries/frameworks and tools to use. Love you❤️❤️❤️🤓🤓🤓&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>angular</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 05 Jan 2021 19:33:42 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-pa0</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-pa0</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2021-resolution-accessibility-full-stop" class="anchor"&gt;
  &lt;/a&gt;
  2021 Resolution: Accessibility. Full Stop.
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/jaketracey"&gt;@jaketracey&lt;/a&gt;
 shares a super helpful roundup of the top resources, development tools, continuous integration, and screen readers you’ll want to take a look at to improve the accessibility of your sites in 2021.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jaketracey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_1o_KhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UcoDP9eT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/71606/9b0ef0c3-eebd-43e1-aa54-56417155daac.jpg" alt="jaketracey image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jaketracey/the-best-web-accessibility-tools-for-developers-in-2021-8c8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The best web accessibility tools for developers in 2021&lt;/h2&gt;
      &lt;h3&gt;Jake Tracey ・ Jan  3 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#forecast-wordcloudy" class="anchor"&gt;
  &lt;/a&gt;
  Forecast: Word-cloudy
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/alvaromontoro"&gt;@alvaromontoro&lt;/a&gt;
 shared an awesome tutorial for building a word cloud for your blog. As Alvaro said, word clouds are  “a nice way to visualize the overall content of a site or article.”&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alvaromontoro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ekLisLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aTV3h--8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/161327/2ff05281-db58-4dcb-946a-4b679e4a266b.jpeg" alt="alvaromontoro image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alvaromontoro/create-a-tag-cloud-with-html-and-css-1e90" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Create a tag cloud with HTML and CSS&lt;/h2&gt;
      &lt;h3&gt;Alvaro Montoro ・ Dec 31 '20 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#philosophies-on-focus" class="anchor"&gt;
  &lt;/a&gt;
  Philosophies on focus
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/carmenhchung"&gt;@carmenhchung&lt;/a&gt;
 learned a few learnings from reading "Deep Work" by Cal Newport. What are you looking to get done in 2021?&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/carmenhchung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXj7F-mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ND5yifps--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/235324/df7e2ba6-3c32-47a7-a688-60a1a5c4eebb.jpg" alt="carmenhchung image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/carmenhchung/how-to-improve-your-focus-in-2021-1cce" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to improve your focus in 2021&lt;/h2&gt;
      &lt;h3&gt;Carmen Chung ・ Dec 29 '20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#developer&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#engineer&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#enter-the-penguin" class="anchor"&gt;
  &lt;/a&gt;
  Enter the penguin
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/lucasmc64"&gt;@lucasmc64&lt;/a&gt;
 explains why Linux is “only a 7-headed monster if you want it to be.”&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lucasmc64" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_q-Do8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jBnt1qqt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/459871/496aa294-1c74-43fc-9daf-65e4c7b3f7da.jpeg" alt="lucasmc64 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucasmc64/linux-the-right-choice-39fj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Linux, the right choice?&lt;/h2&gt;
      &lt;h3&gt;Lucas Marçal Coutinho ・ Jan  3 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ubuntu&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#you-dont-have-to-be-dale-carnegie-to-get-the-attention-of-recruiters" class="anchor"&gt;
  &lt;/a&gt;
  You don’t have to be Dale Carnegie to  get the attention of recruiters
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/shaundai"&gt;@shaundai&lt;/a&gt;
 explains why making use of video was the game-changing prospecting tactic that they attribute their career-switching success to&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shaundai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MjF7Wjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aJeUw1q7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/255076/b7ce6a16-65c4-4633-9651-b3c378227ccc.png" alt="shaundai image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shaundai/one-thing-that-made-my-job-application-stand-out-3dik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;One Thing That Made My Job Application Stand Out&lt;/h2&gt;
      &lt;h3&gt;Shaundai Person ・ Dec 31 '20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#using-mongoose-and-saved-user-data-to-enable-password-resets" class="anchor"&gt;
  &lt;/a&gt;
  Using Mongoose and saved user data to enable password resets.
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/kelvinvmwinuka"&gt;@kelvinvmwinuka&lt;/a&gt;
 demonstrates how to handle password resets in ExpressJS.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kelvinvmwinuka" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXpG55Oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dcPWoHzk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/312192/add19cf3-c0c5-4d74-a44a-acb2ea8eaadc.jpeg" alt="kelvinvmwinuka image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kelvinvmwinuka/how-to-handle-password-reset-in-expressjs-ipb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Handle Password Reset in ExpressJS&lt;/h2&gt;
      &lt;h3&gt;Kelvin Mwinuka ・ Jan  1 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#expressjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#its-ok-to-ask-yourself-a-hmmm" class="anchor"&gt;
  &lt;/a&gt;
  “It’s ok to ask yourself a hmmm…”
&lt;/h3&gt;

&lt;p&gt;Yep — Especially when it comes to JavaScript. &lt;a class="comment-mentioned-user" href="https://dev.to/snigo"&gt;@snigo&lt;/a&gt;
 shared a few common JS “tips” that should make you go “hmmm” instead of “sign me up!”&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/snigo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EPWBbfN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--evQKE-Cc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/383168/a9f6737f-4330-4e0b-8d79-1ed0a10b8781.jpeg" alt="snigo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/snigo/5-javascript-tips-that-might-bite-you-back-2gie" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 JavaScript "tips" that might bite you back.&lt;/h2&gt;
      &lt;h3&gt;Igor Snitkin ・ Jan  1 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Every developer is self taught</title>
      <author>Sarah 🦄</author>
      <pubDate>Tue, 05 Jan 2021 18:42:42 +0000</pubDate>
      <link>https://dev.to/sarahob/every-developer-is-self-taught-1oal</link>
      <guid>https://dev.to/sarahob/every-developer-is-self-taught-1oal</guid>
      <description>&lt;p&gt;I know this might be a "hot take" (or whatever the kids call it) but hear me out. I see a lot in the tech community about college vs. self-taught. This got me thinking. Reflecting on my own path it's not as straight forward as one or the other.&lt;/p&gt;

&lt;p&gt;I have a degree in Business Information Systems. My degree gave me a broad range of skills and exposure to different areas of IT. In my final year I was able to focus on programming and took all the programming related modules. When I graduated I took a graduate Java Software Engineer role. That was in 2012.&lt;/p&gt;

&lt;p&gt;Today I'm a JavaScript engineer. I build interactive web apps, and love CSS and web animations. How did I get to this point? I taught myself*.&lt;/p&gt;

&lt;p&gt;I knew very little about the web even after my four year degree. I took one web development module in first year and after four years it was pretty outdated. At this role I became fascinated with the web. A colleague who shared my interest inspired me to try it out for myself. Once I got started I realised this was it for me. This was the path I wanted to follow.  By day, I wrote Java code but I spent my spare time learning everything I could about web development. I created small projects, read books and watched videos.&lt;/p&gt;

&lt;p&gt;After about 7 months I decided to take a leap. I applied for a Web engineer role in another company. The role asked for someone proficient in JavaScript. I remember feeling nervous before the interview. I didn't &lt;em&gt;know&lt;/em&gt; JavaScript did I? I was never taught it so I couldn't &lt;em&gt;know&lt;/em&gt; it. I went for it anyway. To my delight (and surprise) I passed the assessment and got the job.&lt;/p&gt;

&lt;p&gt;Once I was in the door I faced a new challenge. A UI framework called ExtJS, which at the time to me was a complete unknown. Up to this point I had only been playing with vanilla Javascript and a little jQuery. I felt out of my depth but also very excited. I read the documentation page by page. I made practice projects, I experimented with the app and tried to use concepts I had learned. A couple months into the role a new Senior Web developer joined the team. He was a talented engineer and very proficient in JavaScript. I reached out and he became my mentor. We paired a lot and he helped me understand different concepts and all the JavaScript quirks. From there my confidence started to grow, as well as my skills.&lt;/p&gt;

&lt;p&gt;Every year since then I've had to learn something new, D3.js, Angular.js, Angular 2, React and so on. And not only different libraries but also different concepts. MVC, MVVM, Components. Tech is always changing. The web is always changing. We have to keep learning to keep up with it. At times it can be overwhelming. It's also (&lt;em&gt;at least for me&lt;/em&gt;) what keeps it interesting and one of the things I love about the web.&lt;/p&gt;

&lt;p&gt;So at this point being self taught or having a degree doesn't matter. Yes having a degree helps you get in the door. It's not right but that's the way it is at most places. But things are changing. Companies are realising it's not about the paper it's about the practice. It's about the commitment you put into it.&lt;/p&gt;

&lt;p&gt;Choosing college or not is a very personal decision. College offers a lot more than just the paper at the end. It's an experience and it's not for everyone. The main thing is to keep learning and keep building, get yourself a mentor, and put yourself out there. Because in the end we are all self taught developers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I taught myself but could not have done it without the help of many others. Mentors and other colleagues and especially the amazing content available online.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>beginners</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Learn how YOU can manage your app configuration in ASP .NET Core</title>
      <author>Chris Noring</author>
      <pubDate>Tue, 05 Jan 2021 18:30:48 +0000</pubDate>
      <link>https://dev.to/azure/learn-how-you-can-manage-your-app-configuration-in-asp-net-core-3f5e</link>
      <guid>https://dev.to/azure/learn-how-you-can-manage-your-app-configuration-in-asp-net-core-3f5e</guid>
      <description>&lt;p&gt;TLDR; this article gives you a high-level view of configuration management for ASP .NET. It teaches you about various sources, providers and how to read config data. It also shows you how to make your config data type safe.&lt;/p&gt;

&lt;p&gt;Why do we need configuration? Well, the answer is that we need our app to perform differently without necessarily recompile it. The reason for that is to make it flexible for different environments. It should be enough to just change a config value to get the app to go towards a completely new endpoint for example. ASP.NET has our back, it knows config data can come from a million different places, files, like JSON or ini, environment variables or even Azure. ASP .NET has a set of services, so called providers that reads out this config data for us.&lt;/p&gt;

&lt;p&gt;What we need to know to work efficiently with it, is to know what providers exist (so we know where we can place our config data) and in what order the data is read, so we know what data will take effect. Also, it's helpful to know that all data are key-value pairs. It doesn't stop the data from being nested though. Don't worry there are two different ways we can deal with nesting, untyped and typed.&lt;/p&gt;

&lt;p&gt;Let's just stress one more time some important dimensions on configuration management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Config data can come from many sources&lt;/strong&gt;. Data can be read from a number of different sources like JSON files, environment variables, Azure Services and more. Here's a list of all the different sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Settings files, such as appsettings.json&lt;/li&gt;
&lt;li&gt;Environment variables&lt;/li&gt;
&lt;li&gt;Azure Key Vault&lt;/li&gt;
&lt;li&gt;Azure App Configuration&lt;/li&gt;
&lt;li&gt;Command-line arguments&lt;/li&gt;
&lt;li&gt;Custom providers, installed or created&lt;/li&gt;
&lt;li&gt;Directory files&lt;/li&gt;
&lt;li&gt;In-memory .NET objects&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Config data is read in a certain order&lt;/strong&gt;. Host configuration is the first thing to be read followed by JSON data found in &lt;em&gt;appsettings.json&lt;/em&gt; and an environment specific version. The complete read order looks like so:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ChainedConfigurationProvider&lt;/code&gt; : Adds an existing &lt;code&gt;IConfiguration&lt;/code&gt; as a source. In the default configuration case, adds the host configuration and setting it as the first source for the app configuration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;App setttings JSON file&lt;/strong&gt;. There's an &lt;em&gt;appsettings.json&lt;/em&gt; that is read using the JSON configuration provider.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Environment specific app settings JSON&lt;/strong&gt;. After the initial &lt;em&gt;appsettings.json&lt;/em&gt; is read it looks read from an environment specific app settings file. So essentially it's looking for a file on this format &lt;em&gt;appsettings.Environment.json&lt;/em&gt; using the JSON configuration provider. For example, &lt;em&gt;appsettings.Production.json&lt;/em&gt; or &lt;em&gt;appsettings.Development.json&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;App secrets&lt;/strong&gt;. If you are running in a dev environment it tries to read secrets next.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Environment variables&lt;/strong&gt;. After that it reads any environment variables  using the Environment Variables configuration provider.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Command-line arguments&lt;/strong&gt;. Lastly it reads command line arguments using the Command-line configuration provider.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE, if the same key exist in two different sources it's the latter one that gets applied. For example i a key exist in &lt;em&gt;appsetttings.json&lt;/em&gt;, that value will be overwritten if it also exist as an environment variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Don't place sensitive data as config data&lt;/strong&gt;. You need to know what data is sensitive or not. As a rule of thumb, place sensitive data in a service like Azure Key Vault, avoid placing such data in configuration files! You can still read from Azure Key Vault using a configuration manager, so in theory it's as straight forward as reading the data from a JSON file for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;I've left some hopefully useful links so you can learn more about all the different providers and options. Hopefully this article gives you a good foundation to continue learning.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-5.0#default-builder-settings&amp;amp;WT.mc_id=dotnet-12379-chnoring"&gt;Builder settings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-5.0&amp;amp;WT.mc_id=dotnet-12379-chnoring"&gt;Configuration management docs for ASP .NET&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#read-data" class="anchor"&gt;
  &lt;/a&gt;
  Read data
&lt;/h2&gt;

&lt;p&gt;To read configuration data lets turn our attention to &lt;em&gt;Program.cs&lt;/em&gt; and it's constructor that should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are injecting an instance of &lt;code&gt;IConfiguration&lt;/code&gt;. It will attempt to read data from &lt;em&gt;appsettings.json&lt;/em&gt; file, so how do we access it? Looking at the content of &lt;em&gt;appsettings.json&lt;/em&gt; we see that it looks like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Logging"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"LogLevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Microsoft"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Warning"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Microsoft.Hosting.Lifetime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Information"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"AllowedHosts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To read a non-nested value like &lt;code&gt;AllowedHosts&lt;/code&gt; we can type like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"AllowedHosts"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;// *&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, if we need a nested value like Logging-&amp;gt;LogLevel-&amp;gt;Default we need to access it with &lt;code&gt;:&lt;/code&gt; as separator. We instead type like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Logging:LogLevel:Default"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Information&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE, you are likely to want to access this kind of data when setting up services so you are more likely to read from &lt;code&gt;Configuration&lt;/code&gt; instance in &lt;code&gt;ConfigureServices()&lt;/code&gt; method rather than the constructor, as is demonstrated above. With that said, all you need to do is to inject &lt;code&gt;IConfiguration&lt;/code&gt; in any constructor where you might need it, like a controller for example, like so:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;IndexModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ILogger&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IndexModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_logger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;_configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serviceConfig&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ServiceConfiguration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;_configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetSection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CartServiceUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductsServiceUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#demo-override-a-value" class="anchor"&gt;
  &lt;/a&gt;
  Demo, override a value
&lt;/h3&gt;

&lt;p&gt;We stated earlier that the last provider to be read is the one that decided the value on the config data. Lets demo this by placing a setting &lt;code&gt;API&lt;/code&gt; like so in &lt;em&gt;appsetting.json&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"API"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:3000/api"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and now place a slightly different entry in &lt;em&gt;appsettings.Development.json&lt;/em&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"API"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:5000/api"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Change the code in the &lt;code&gt;Startup&lt;/code&gt; constructor to read &lt;code&gt;API&lt;/code&gt;, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"API"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// http://localhost:5000/api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, the last read source, &lt;em&gt;appsettings.Development.json&lt;/em&gt; decided the value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bind-data-make-it-type-safe" class="anchor"&gt;
  &lt;/a&gt;
  Bind data, make it type safe
&lt;/h2&gt;

&lt;p&gt;At some point, you might loose track of what configuration you have. You might have 10-20 different keys, or more, at various levels of nesting. The problem with that is that it's starting to get messy. Knowing what keys are actually used could be a combination of looking into JSON files, environment variables or even the source code. So how do you approach and manage such a mess?&lt;/p&gt;

&lt;p&gt;The way to manage it is how you manage most things in .NET and C#, type it. The idea is to have variables or structures like classes for most things you plan to use, your config data shouldn't be any different. So how do we type our config data then - use a class.&lt;/p&gt;

&lt;p&gt;Let's assume you have a few endpoints &lt;code&gt;ProductsServiceUrl&lt;/code&gt; and &lt;code&gt;CartServiceUrl&lt;/code&gt; that you want to keep track of and that they should be set to different values in different environment. You can create a class for that, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceConfiguration&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Services&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Services"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ProductsServiceUrl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;CartServiceUrl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The next thing we want to do is to tell ASP .NET to &lt;em&gt;bind&lt;/em&gt; an instance of the above class to a specific section of our config. Imagine you know have a section in &lt;em&gt;appsettings.json&lt;/em&gt; that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Services"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ProductsServiceUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:3000/products"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"CartServiceUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:3000/cart"&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you've created a class for this and added the config data it's time to read out the data. We can read the data like by locating the constructor of &lt;code&gt;Startup&lt;/code&gt; class in &lt;em&gt;Startup.cs&lt;/em&gt; and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serviceConfig&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ServiceConfiguration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetSection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CartServiceUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// http://localhost:3000/cart&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductsServiceUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// http://localhost:3000/products&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The use of &lt;code&gt;GetSection()&lt;/code&gt; enables us to drill down into the part of the config that's interesting for us. Using &lt;code&gt;bind()&lt;/code&gt; we &lt;em&gt;bind&lt;/em&gt; the sections content to an instance of &lt;code&gt;ServiceConfiguration&lt;/code&gt; and thereby populate the instance with the values from the config section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You learned how config data can exist in various sources. You also learned how ASP .NET was able to read from these sources. Furthermore, you were shown various ways to read nested and un nested data. Lastly you looked at how to make your config data more type safe.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>tutorial</category>
      <category>csharp</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Setting career goals</title>
      <author>Ananya Neogi</author>
      <pubDate>Tue, 05 Jan 2021 17:09:09 +0000</pubDate>
      <link>https://dev.to/ananyaneogi/setting-career-goals-1f5n</link>
      <guid>https://dev.to/ananyaneogi/setting-career-goals-1f5n</guid>
      <description>&lt;p&gt;When I ask people about their career goals, I mostly get answers like “I just go with the flow”. While this might work fine for some people but it generally doesn’t bode well in the long run. If you talk to successful people, you would quickly realize that most of them had been intentional with all their career-oriented decisions and those deliberate decisions have led to the place they are now.&lt;/p&gt;

&lt;p&gt;Intentionally crafting your career is essential. It is, however, easier said than done as we have myriad of options to choose from at our disposal. Also, it doesn’t help that we have so many distractions especially when every other day people are creating hype around some new technology or some new trend on Twitter. So that makes it more important to be intentional about the things we want to do in our career and not let ourselves fall into the trap of trends. Though I agree, sometimes, it pays off to jump on that hype train but make sure you are doing it for the right reasons and that you have done your research.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An aside thought:&lt;/strong&gt; I like to think of my career goals as an engineering problem for which I would carefully craft a solution that would help me achieve a particular outcome, similar to how I would do if it were an actual engineering problem. It might seem like an oversimplification because life doesn’t work that way, and there will be unknown bumps on the road, and we might even change course in the middle. But at its core, I think this analogy holds well. Thinking about my career goals in this sense allows me to be more analytical about my decisions!&lt;/p&gt;

&lt;p&gt;Coming back to the topic of setting intentional career goals – I have some questions you can ask yourself which will guide you to be intentional when setting your career goals for this year and beyond.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-do-my-values-and-work-align-with-each-other" class="anchor"&gt;
  &lt;/a&gt;
  1. Do my values and work align with each other?
&lt;/h3&gt;

&lt;p&gt;Not a lot of people think about their values. But investing time and effort to think about what values matter the most to you and then aligning your career decisions to that will ensure you are on your best path forward. It will also ensure that the work you’re doing will truly make you feel fulfilled at the end of the day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-how-do-you-want-to-spend-most-of-your-workdays" class="anchor"&gt;
  &lt;/a&gt;
  2. How do you want to spend most of your workdays?
&lt;/h3&gt;

&lt;p&gt;I think this is the most important thing to consider because each day’s work will eventually make up your whole career. Intentionally selecting the kind of work to focus on each day means you are ultimately creating an intentional career path for yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-a-few-years-from-now-how-would-you-like-to-be-introduced-to-someone-else" class="anchor"&gt;
  &lt;/a&gt;
  3. A few years from now, how would you like to be introduced to someone else?
&lt;/h3&gt;

&lt;p&gt;Would you like to be called an author of a book or a paper? Maybe the creator of x? The first person to live on Mars? I’m joking about the last one, but the point is this can be a fun exercise and will help you dig deep into your dreams and aspirations.&lt;/p&gt;

&lt;p&gt;Now every time you have to make a career decision, you will have your answers as guiding principles. It is worth mentioning that the answers to these questions might change in a few years, but that’s OK because our goals can evolve as we evolve in our lives. Being true to yourself and what you want – however clichéd that might sound – will serve you well in the long run. Remember, we’re here for the marathon, not a sprint.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Enough JavaScript to get you Started : #0 intro</title>
      <author>Adarsh Pandya</author>
      <pubDate>Tue, 05 Jan 2021 15:36:36 +0000</pubDate>
      <link>https://dev.to/whoadarshpandya/enough-javascript-to-get-you-started-0-intro-46m2</link>
      <guid>https://dev.to/whoadarshpandya/enough-javascript-to-get-you-started-0-intro-46m2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Any application that can be written in JavaScript, will eventually be written in JavaScript.&lt;br&gt;&lt;br&gt;
-Jeff atwood (Coding Horror)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#series-introduction" class="anchor"&gt;
  &lt;/a&gt;
  Series Introduction
&lt;/h3&gt;

&lt;p&gt;Hey , Hope you're having an amazing day and a curious mind (obviously! that's why you're here :p ). in this series we'll cover basics of JavaScript from &lt;br&gt;
level 0, as the title suggests if you're new to world of JavaScript this will help you to grow as developer from the ground level. we'll cover everything which can be helpful at base level&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#who-should-be-reading-this" class="anchor"&gt;
  &lt;/a&gt;
  Who Should Be Reading This?
&lt;/h4&gt;

&lt;p&gt;👉 Any developer who is interested in learning JavaScript from beginning &lt;br&gt;&lt;br&gt;
👉 Anyone who is migrating from non-coding background &lt;br&gt;&lt;br&gt;
👉 Anyone who learns by reading blogs instead of watching 1 or 2 hr videos&lt;br&gt;&lt;br&gt;
👉 Want to Start in Web development , but don't know where to begin with...&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#javascript-language-of-gods" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript : Language of gods
&lt;/h4&gt;

&lt;p&gt;You might have heard that JavaScript is becoming popular language among devs because of the flexibility and flavors provided by JavaScript.&lt;br&gt;
JavaScript became so popular that giant conglomerates are migrating to JS.&lt;/p&gt;

&lt;p&gt;       Corporate is paying shit ton of money for frontend devs. one of the reason why JS is so popular is because of &lt;strong&gt;node&lt;/strong&gt; (experiment of  &lt;a href="https://github.com/ry"&gt;ryan dahl&lt;/a&gt;). People started to realize that JS is more than just a language which can be used in frontend. nowadays JS is everywhere be it frontend , backend , desktop apps , PWAs , smart watches and even SpaceX uses JS as a interface of communication 😂&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#why-js-" class="anchor"&gt;
  &lt;/a&gt;
  Why JS ?
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Stackoverflow Developer survey : 2020 (most popular languages)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUVrSF9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609858532119/JgHUG5snq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUVrSF9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609858532119/JgHUG5snq.png" alt="js.PNG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#reasons-to-learn-js" class="anchor"&gt;
  &lt;/a&gt;
  Reasons to learn JS
&lt;/h6&gt;

&lt;p&gt;👉 Easy to learn &lt;br&gt;&lt;br&gt;
👉 Can be used in frontend &lt;br&gt;&lt;br&gt;
👉 Can be used in backend &lt;br&gt;&lt;br&gt;
👉 Can be used in developing mobile/desktop apps as well &lt;br&gt;&lt;br&gt;
👉 Most Importantly : tons of jobs in web development &lt;br&gt;&lt;br&gt;
👉 Getting Ready to use frameworks like &lt;code&gt;React&lt;/code&gt; ,&lt;code&gt;Angular&lt;/code&gt; , &lt;code&gt;Vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#enough-of-teasing-what-is-js" class="anchor"&gt;
  &lt;/a&gt;
  Enough of Teasing! What is JS?
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript can be defined as a language which is dynamically (loosely) typed, interpreted and Object Oriented language&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;this doesn't make any sense right?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This definition may not make sense as of now , but it will as an when we start learning more about it , for the sake of understanding remember that JavaScript can be used for making your website interactive.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example: &lt;/b&gt; let's say you're making a dating web app , so now there are 3 mechanisms comes in picture &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;structure or skeleton of website : HTML&lt;/li&gt;
&lt;li&gt;styling or look and feel of website : CSS&lt;/li&gt;
&lt;li&gt;Interaction or events occured in website : &lt;strong&gt;JS&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#what-well-be-covering-" class="anchor"&gt;
  &lt;/a&gt;
  What we'll be covering ?
&lt;/h4&gt;

&lt;p&gt;We'll be covering basic topics like : &lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 Writing your first program &lt;br&gt;&lt;br&gt;
👉 How JS and Programming in general works?&lt;br&gt;&lt;br&gt;
👉 Evolution of JS as a language &lt;br&gt;&lt;br&gt;
👉 Variables &lt;br&gt;&lt;br&gt;
👉 Data Types &lt;br&gt;&lt;br&gt;
👉 Operators &lt;br&gt;&lt;br&gt;
👉 Conditions &lt;br&gt;&lt;br&gt;
👉 Loops &lt;br&gt;&lt;br&gt;
👉 Arrays &amp;amp; Objects &lt;br&gt;&lt;br&gt;
👉 Functions &lt;br&gt;&lt;br&gt;
👉 Object Oriented JavaScript &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Let me know in comment section if you have any doubt or feedback. it's always worth to give time to thriving developer community :) &lt;br&gt;
&lt;br&gt;
Keep Coding ❤
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Web Vitals Optimizations: Advanced Dynamic Import Patterns</title>
      <author>Ido Shamun</author>
      <pubDate>Tue, 05 Jan 2021 15:36:00 +0000</pubDate>
      <link>https://dev.to/dailydotdev/web-vitals-optimizations-advanced-dynamic-import-patterns-1hg5</link>
      <guid>https://dev.to/dailydotdev/web-vitals-optimizations-advanced-dynamic-import-patterns-1hg5</guid>
      <description>&lt;p&gt;Web performance is a crucial part of the user experience of our web application. It has a direct impact on the conversion rate. Walmart found that for every 1-second improvement in page load time, conversions increased by 2% (&lt;a href="https://www.cloudflare.com/learning/performance/more/website-performance-conversion-rates/"&gt;see source&lt;/a&gt;). And if that's not enough, search engines favor fast websites. They rank them higher than slow websites. So improving your web application's performance can increase both the conversion rate and the organic customer acquisition rate. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#web-vitals" class="anchor"&gt;
  &lt;/a&gt;
  Web Vitals
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://web.dev/learn-web-vitals/"&gt;Web Vitals&lt;/a&gt; (coined by the Chrome team) are a set of metrics to measure the performance of a website. Optimizing for these metrics ensures your visitors will enjoy a much better experience.&lt;br&gt;
Core Web Vitals are a subset of the aforementioned Web Vitals that is relevant to any web page. The subset focuses on three performance aspects, loading, interactivity, and visual stability. In this article, we will focus on improving two of them, loading and interactivity. They're represented by these two metrics, Largest Contentful Paint (LCP) and First Input Delay (FID). There are many strategies to improve these metrics, but we'll focus on reducing the bundle size. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#bundle-size" class="anchor"&gt;
  &lt;/a&gt;
  Bundle size
&lt;/h1&gt;

&lt;p&gt;The page bundle size significantly affects both LCP and FID. Both server-side-rendered applications and single-page-applications can end-up with bloated JavaScript bundles. The bigger the bundle, the more time it takes to download the bundle, parse the code into actionable machine commands, and eventually evaluate it. As long as the main thread is focused on any of these, it cannot do anything else, which increases LCP and FID. Addy Osmani wrote an extensive article about &lt;a href="https://v8.dev/blog/cost-of-javascript-2019"&gt;the cost of JavaScript&lt;/a&gt; if you fancy going deeper.&lt;br&gt;
Even if we apply best practices such as tree shaking and code splitting in our project, the bundle can become huge. So what should we do? Dynamic import and loading prioritization!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#dynamic-import" class="anchor"&gt;
  &lt;/a&gt;
  Dynamic import
&lt;/h1&gt;

&lt;p&gt;Not many know, but there are two forms of import we can use, static and dynamic. A static import is a well-known form and is our default choice. It looks like &lt;code&gt;import defaultExport from "module-name";&lt;/code&gt; and it tells the bundler (e.g., Webpack) that this module is mandatory to run our code. The bundler will bundle the module code with our code into a single JavaScript file. The more modules we statically import, the bigger the bundle will be. But obviously, not all imports are the same. Some are required to run our code immediately, and some can be lazy-loaded until a certain event occurs. So why do we have to load all this JavaScript at once? We don't. We can use dynamic import. Dynamic import looks like a regular function call and returns a promise that resolves to the imported module, &lt;code&gt;import("module-name").then((module) =&amp;gt; ...);&lt;/code&gt;. Using dynamic import, we tell the bundler to create a separate bundle for this module and load it in runtime. This makes sure the imported module will not be bundled in our main bundle, keeping the main bundle small and efficient. &lt;a href="https://reactjs.org/docs/code-splitting.html"&gt;React lazy&lt;/a&gt; and &lt;a href="https://nextjs.org/docs/advanced-features/dynamic-import"&gt;Next.js dynamic&lt;/a&gt; utilize dynamic import to lazy-load React components easily. They are both a function that receives a function as an argument and returns a React component. The function argument must return a promise that resolves into a React component by itself. Here's an example: &lt;code&gt;const DynamicComponent = dynamic(() =&amp;gt; import('./component'))&lt;/code&gt;. Of course, both React lazy and Next.js dynamic provide you a way to handle errors and show a fallback element while the component is loading (out of scope). So now we have two levels of import. The first is a static import, which bundles the module into our bundle. The second is a dynamic import, which imports the module as soon as requested as a separate bundle. This should boost our performance, but we can take it even further and load some JavaScript bundles only after the page is completely loaded.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#import-after-page-load" class="anchor"&gt;
  &lt;/a&gt;
  Import after page load
&lt;/h1&gt;

&lt;p&gt;In this section, we will see how we can use React lazy and Next.js dynamic to create a new function that imports a component only after the page is loaded. For simplicity's sake, I'll show how to implement it with Next.js, but the same concept can be easily applied to React lazy or even other frameworks such as Vue.&lt;/p&gt;

&lt;p&gt;Let's first create a function that returns a promise that resolves once the page is loaded. A page loading process consists of three phases, loading, interactive, and completed. The function receives an argument that states at what phase we should load the resource. We use the &lt;code&gt;readystatechange&lt;/code&gt; event to listen to changes in the loading process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onPageLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;readyState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentReadyState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interactive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProgressEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readystatechange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readystatechange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;onPageLoad&lt;/code&gt; function first returns a promise as planned. In the promise, we check for the current ready state of the document. It's an important edge case that we have to deal with; otherwise, the promise might never resolve. If the page is already loaded, we resolve the promise. Second, we create a callback function for the event listener and subscribe to the &lt;code&gt;readystatechange&lt;/code&gt; event. In the callback, we check the new ready state of the document. If it equals the requested state or if the document is completely loaded, we can resolve the promise and unsubscribe.&lt;/p&gt;

&lt;p&gt;This was the heavy lifting, and now the only thing that remained to do is to create our new dynamic function that will load the component on page load.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/dynamic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;onPageLoad&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./onPageLoad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dynamicPageLoad&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;LoaderComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;readyState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentReadyState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interactive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ComponentType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onPageLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ssr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Like Next.js dynamic function, we receive a loader function that returns a promise with a React component and an optional ready state to prioritize the loading. In the function, we use the good-old dynamic function, but before providing the loader function, we chain it to the &lt;code&gt;onPageLoad&lt;/code&gt; function that we created earlier. This makes sure the import statement will not be called before the page is loaded. The second parameter to the dynamic function disabled evaluating this expression in the server. This is required because we use the document object, which is available only to the client.&lt;/p&gt;

&lt;p&gt;We can use our function to make sure our components will be imported after the page load as follows:&lt;br&gt;
&lt;code&gt;const DynamicComponent = dynamicPageLoad(() =&amp;gt; import('./component'))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, a lot of JavaScript code can be downloaded, parsed, and evaluated only after our page is loaded. It makes sure the main thread will have more time for critical resources, thus improving our LCP and FID metrics.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Good web performance can improve our conversion rate and SEO. One of the ways to improve performance is to reduce the initial bundle size. By utilizing dynamic import, we can lazy-load JavaScript modules, which shrinks the initial bundle size. We also learned how to prioritize dynamic imports by loading some of the modules only after the page is loaded using our custom dynamic function.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
      <category>performance</category>
    </item>
    <item>
      <title>Server Rendering in JavaScript: Why SSR?</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 05 Jan 2021 15:34:32 +0000</pubDate>
      <link>https://dev.to/ryansolid/server-rendering-in-javascript-why-ssr-3i94</link>
      <guid>https://dev.to/ryansolid/server-rendering-in-javascript-why-ssr-3i94</guid>
      <description>&lt;p&gt;Server-Side Rendering is all the talk with the JavaScript framework world right now. There are obvious examples like Vercel's Next.js which made the news with getting $40M in new funding. Next, Nuxt, Gatsby, Sapper have all been really popular the last few years along with the rise of JAMStack which promotes the use of Static Site Generation.&lt;/p&gt;

&lt;p&gt;But the thing you probably should be paying attention to is that the frameworks themselves have been investing heavily into this area for the past 2 years. There is a reason why we've been waiting for Suspense in React, or we see blog stories about &lt;a href="https://jasonformat.com/islands-architecture/"&gt;Island's Architecture&lt;/a&gt;. Why &lt;a href="https://svelte.dev/blog/whats-the-deal-with-sveltekit"&gt;Svelte&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=xXrhg26VCSc"&gt;Vue&lt;/a&gt; have been pulling meta-framework type projects under their core's umbrella. This is the thing everyone is chasing after.&lt;/p&gt;

&lt;p&gt;So I want to take some time today to fill in the gaps, talk about the underlying technology, and overall paint a better picture of what is going on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-server-rendering" class="anchor"&gt;
  &lt;/a&gt;
  Why Server Rendering?
&lt;/h1&gt;

&lt;p&gt;Why server render at all? For some of you, this might be obvious. But it wasn't for me.&lt;/p&gt;

&lt;p&gt;I mean there are plenty of ways to mitigate the initial performance costs of JavaScript. I had even made it my personal mission to show people that a well-tuned client only Single Page App(SPA) could outperform a typical Server Rendered SPA in pretty much every metric (even First Paint). And crawlers now can crawl dynamic JavaScript pages for SEO. So what's the point?&lt;/p&gt;

&lt;p&gt;Well even with crawlers now being fully capable to crawl these JavaScript-heavy sites, they do get bumped to a second-tier that takes them longer to be indexed. This might not be a deal-breaker for everyone but it is a consideration. And meta tags rendered on the page are often used for social sharing links. These scrapers are often not as sophisticated, so you only get the tags initially present which would be the same on every page losing the ability to provide more specific content.&lt;/p&gt;

&lt;p&gt;But these are not new. So, let's take a look at what I believe are the bigger motivators for the current conversation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-go-chasing-waterfalls" class="anchor"&gt;
  &lt;/a&gt;
  Don't Go Chasing Waterfalls
&lt;/h1&gt;

&lt;p&gt;JavaScript bundle sizes have grown, and grown, and well, grown some more. Not every network connection is made equal. Under slow networks, SSR will be faster to show something to the user on the initial load. So if you need the absolute fastest page load there this no contest.&lt;/p&gt;

&lt;p&gt;It all boils down to the fact that nothing happens in the browser until it receives the HTML page back. It is only after starting to receive the HTML that other assets are requested.&lt;/p&gt;

&lt;p&gt;For dynamic client JavaScript pages like a SPA or even the dynamic parts of a static generated site, as you might create with a Gatsby or Next, often this means at least 3 cascading round trips before the page is settled.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ls4RZDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zogroqy57pv0606eti4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ls4RZDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zogroqy57pv0606eti4a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The thing to note is this isn't only a network bottleneck. Everything here is on the critical path from parsing the various assets, to executing the JavaScript to make the async data request. None of this gets to be parallelized.&lt;/p&gt;

&lt;p&gt;Here is the rub. This is further compounded by the desire to keep the bundle size small. Code splitting is incredibly powerful and easy to do on route boundaries, but a naive implementation ends up like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nVE6sX18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tqaalnzbp5vuppaig5a1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVE6sX18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tqaalnzbp5vuppaig5a1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Four consecutive round trips! The main bundle doesn't know what page chunk to request until it executes, and it takes loading and executing that chunk before it knows what async data to request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-server-rendering-address-this" class="anchor"&gt;
  &lt;/a&gt;
  How does Server Rendering address this?
&lt;/h3&gt;

&lt;p&gt;Knowing the route you are on lets the server render right into the page the assets you will need even if code split. You can add &lt;code&gt;&amp;lt;link rel="modulepreload" /&amp;gt;&lt;/code&gt; tags or headers that will start loading your modules before the initial bundle even parses and executes.&lt;/p&gt;

&lt;p&gt;Additionally, it can start the async data loading immediately on receiving the request on the server and serialize the data back into the page. So while we can't completely remove the browser waterfalls we can reduce them to 1. However, a naive approach here actually delays the initial response of the HTML page. So it isn't a clean victory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXqfEbcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/upmut6at8h93g3rc3etm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXqfEbcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/upmut6at8h93g3rc3etm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In fact there is a lot more we can do here that I will cover in a follow-up article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#after-initial-load" class="anchor"&gt;
  &lt;/a&gt;
  After Initial Load
&lt;/h3&gt;

&lt;p&gt;This equation completely changes after the first load. Assets can be preloaded/cached with a service worker. JavaScript is even stored as bytecode so there is no parsing cost. Everything except the async data request is static and can already be present in the browser. There are no waterfalls, which is even better than the best case from server rendering.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ismFsxWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gtrtlirbgd4oor75wton.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ismFsxWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gtrtlirbgd4oor75wton.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But invalidating out of date service workers and cached assets can be a whole other sort of issue. Stale while re-validating can go a long way for certain types of applications. Sites that need to be up to date might not opt for this and use caches they have more control over.&lt;/p&gt;

&lt;p&gt;So the takeaway on this whole topic of performance/size is that the client alone has many techniques to mitigate most things other than that first load of fresh content. That will always be constrained by the speed of the network. But as our applications scale, without due consideration, it is easy for our SPA performance to degrade and a naive application of best practices only introduces other potential performance bottlenecks.&lt;/p&gt;

&lt;p&gt;Server rendering can relieve a couple of the important ones if the initial load is important to our sites and applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#modern-tools-for-everyone" class="anchor"&gt;
  &lt;/a&gt;
  Modern Tools for Everyone
&lt;/h1&gt;

&lt;p&gt;We need to step back out a bit to put this in perspective. There are a lot more websites than web applications. This has always been the case but the mindshare around modern JavaScript frameworks has changed.&lt;/p&gt;

&lt;p&gt;When client JavaScript frameworks were first being developed there was a simple goal in mind. Find a way to do all the things in the browser that needlessly had us going back to the server. We were building ever more complex user interfaces and full-page reloads were just not acceptable in a world where people were getting used to native app experiences.&lt;/p&gt;

&lt;p&gt;These tools may have been developed with interactive web applications in mind, but there is a much larger set of potential users to tap into that appear to actively be looking to these frameworks for their simpler sites.&lt;/p&gt;

&lt;p&gt;This is a really compelling problem. Especially when you consider that the coordination between Client and Server can be really complicated to do efficiently manually. Whenever something is used outside of its original parameters it takes some special consideration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js-frameworks-vs-server-frameworks" class="anchor"&gt;
  &lt;/a&gt;
  JS Frameworks vs Server Frameworks
&lt;/h3&gt;

&lt;p&gt;This struggle isn't limited to JavaScript frameworks. Adding largely dynamic JavaScript to something rendered in Rails or any classic backend has this complexity. It's just JavaScript frameworks see this as a unique opportunity to create a completely isomorphic experience. One where with a single codebase you can create a site. Sort of like the old days, but also not at all like them.&lt;/p&gt;

&lt;p&gt;The fundamental thing client-side libraries have been solving is state management. It's the whole reason MVC architectures have not been the right match for the client. Something needs to be maintaining the state. MVC with its singleton controllers is wonderful for stateless things like RESTful APIs but needs special mechanisms to handle the persistence of non-model data. Stateful clients and stateless servers mean reloading the page is not acceptable.&lt;/p&gt;

&lt;p&gt;The challenge for server frameworks is even with mechanisms like &lt;a href="https://hotwire.dev/"&gt;Hotwire&lt;/a&gt; for partial updates, it alone doesn't make the client part of the equation any less complicated. You can ignore it is a thing, and if your needs are meager this can suffice. Otherwise, you end up doing a lot of the same work anyway. This leads to essentially maintaining two applications.&lt;/p&gt;

&lt;p&gt;This is why the JavaScript frameworks are uniquely positioned to provide this single universal experience. And why it is so attractive to framework authors.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  What's Next?
&lt;/h1&gt;

&lt;p&gt;Well, be prepared to hear about this a lot more. This has been going on for about 2 years now, but these projects are finally starting to emerge to a point people feel comfortable talking about it. This has taken time because it's a fundamental shift. While there are Next's and Nuxt's of the world the core libraries haven't been optimized for these cases.&lt;/p&gt;

&lt;p&gt;Short of really eBay's &lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt; we haven't seen to date the sort of sophistication you'd expect from these sort of solutions. But that is all changing. &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; are one example. You better believe Vue, Preact, Svelte, etc... have all been working on their own solutions in this space.&lt;/p&gt;

&lt;p&gt;Server rendering in JavaScript is the next big race for these frameworks. But it's still up to you whether you choose to use it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>webperf</category>
    </item>
    <item>
      <title>The &lt;progress&gt; HTML Tag</title>
      <author>Braydon Coyer</author>
      <pubDate>Tue, 05 Jan 2021 14:23:27 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/the-progress-html-tag-2pk0</link>
      <guid>https://dev.to/braydoncoyer/the-progress-html-tag-2pk0</guid>
      <description>&lt;p&gt;Welcome to the first article in the  &lt;a href="https://hashnode.com/series/uncommon-html-tags-ckjiqctar042xzgs1bei2e9a3"&gt;Uncommon HTML Tags&lt;/a&gt;  series! &lt;br&gt;
With each article in this series, I will introduce a widely unknown HTML tag, discuss compatibility across browsers and cover some real-world use cases with the element. &lt;/p&gt;

&lt;p&gt;My hope is that each article broadens your understanding of HTML and helps you discover new tags.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-lt-progress-gt-tag" class="anchor"&gt;
  &lt;/a&gt;
  The &amp;lt; progress &amp;gt; Tag
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;progress&amp;gt;&amp;lt;/progress&amp;gt;&lt;/code&gt; tag will create a progress bar and allow you to visualize the completion of a task. This could be handy for showing the progress completion of a multi-page feedback survey, for example! &lt;/p&gt;

&lt;p&gt;Let's take a look at how it's used!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="progress"&amp;gt;Article Progress:&amp;lt;/label&amp;gt;

&amp;lt;progress id="progress" max="100" value="50"&amp;gt; 50% &amp;lt;/progress&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhYmmYHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609775753781/mburlbLBM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhYmmYHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609775753781/mburlbLBM.png" alt="Screen Shot 2021-01-04 at 9.55.45 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As seen in the example above, there are two attributes you can use on the element. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;max&lt;/code&gt; - this attribute, if used, is a floating point number and must have a value greater than &lt;code&gt;0&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; - this optional attribute is used to determine the completion of a task and must be a floating point number between &lt;code&gt;0&lt;/code&gt; and the number set in the &lt;code&gt;max&lt;/code&gt; attribute. If the &lt;code&gt;value&lt;/code&gt; attribute is omitted, the progress bar is set to an indeterminate state. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example of an indeterminate progress bar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="progress"&amp;gt;Article Progress:&amp;lt;/label&amp;gt;

&amp;lt;progress id="progress" max="100"&amp;gt;&amp;lt;/progress&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/AtInr1byEBtnARfLmT/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/AtInr1byEBtnARfLmT/giphy.gif" alt="Indeterminate Progress Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to play around with the tag, feel free to fork the pen below!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/braydoncoyer/embed/mdrLdRZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatibility" class="anchor"&gt;
  &lt;/a&gt;
  Compatibility
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;progress&amp;gt;&amp;lt;/progress&amp;gt;&lt;/code&gt; tag is part of the HTML5 Standard and is supported on all major web browsers. No need to worry about compatibility issues! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JqSDXt6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609775615556/lW9E7cNN3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqSDXt6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609775615556/lW9E7cNN3.png" alt="Screen Shot 2021-01-04 at 9.53.29 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading! Have you ever used the &lt;code&gt;&amp;lt;progress&amp;gt;&amp;lt;/progress&amp;gt;&lt;/code&gt; tag in a project? Let me know in the comments below!&lt;/p&gt;

&lt;p&gt;If you liked this article and want more content like this, read some of my &lt;a href="https://blog.braydoncoyer.dev/"&gt;other articles&lt;/a&gt; , subscribe to my newsletter and make sure to follow me on &lt;a href="https://twitter.com/BraydonCoyer"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
