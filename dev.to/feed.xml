<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How It‚Äôs Going</title>
      <author>Timi Bello</author>
      <pubDate>Mon, 19 Apr 2021 11:24:11 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/how-it-s-going-20g</link>
      <guid>https://dev.to/ourtimefortech/how-it-s-going-20g</guid>
      <description>&lt;p&gt;Another week in Our Time for Tech has gone by. In the past week, we had a variety of discussions as regards the development process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we had to stop the use of the Devise Gem and the reason was that as we worked further on different features of the App, it was seen (with our Senior Engineers‚Äô help) that it is too complex to fit into the needs of our App. This caused us to have another version of the App on the GitHub repo, of which everything has been running smoothly so far. &lt;/p&gt;

&lt;p&gt;This also taught me that;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúJust because something is popular doesn‚Äôt mean that it‚Äôs going to fix your current project.‚Äù - Arit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Additionally&lt;/em&gt;, we decided to reduce our App‚Äôs MVP by removing the worker-slots feature which allows businesses to alert workers as regards their availability which is specific for upcoming shifts. The removal of this feature was because working on this is far more complex for the time we have which is now less than 7 weeks, including QA(Quality Assurance/smoke testing) and User feedback.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Furthermore&lt;/em&gt;, I learned how important it is to document/write down your progress in whatever you‚Äôre learning as it helps you to communicate effectively what you‚Äôve done, which is a vital skill for a developer. &lt;br&gt;
We were also advised and told of the importance of keeping our PRs(Pull Requests) small due to its efficiency and how it makes reviews easier. Everybody likes Small PRs while Long PRs are not liked as they are known to stay for a long time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Currently&lt;/em&gt;, we‚Äôre all working on the UI styling of the App of which we are using SASS and Bootstrap which gives us readable code. In advance, I‚Äôm excited about how the guide on using the MiniTests Library is going to look like. As promised by Arit, a collaboration is ongoing with her and Chris Oliver Of GoRails in creating the guide for the testing of the App. &lt;/p&gt;

&lt;p&gt;I‚Äôm also glad about how my team and I (now 4 of us) have improved on collaborating, communicating more effectively, and growing together.  &lt;/p&gt;

&lt;p&gt;Some Noteworthy points I learned in the past week:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúIt‚Äôs great to be comfortable with uncertainty‚Äù. &lt;br&gt;
‚ÄúUncertainty is something that‚Äôs part of a developer‚Äôs life.‚Äù&lt;br&gt;
‚ÄúGet comfortable with being uncomfortable‚Äù&lt;br&gt;
‚ÄúAssume best intentions when giving and receiving feedback.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I‚Äôm looking forward to more learning and excited to see where we go from here. Thanks for reading!&lt;/p&gt;

&lt;p&gt;Follow along with DEV posts from my cohort: &lt;br&gt;
&lt;a href="https://dev.to/ourtimefortech"&gt;https://dev.to/ourtimefortech&lt;/a&gt;&lt;br&gt;
Check out Our Time for Tech: &lt;br&gt;
&lt;a href="https://ourtimefortech.org/"&gt;https://ourtimefortech.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@ilyapavlov?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ilya Pavlov&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/4096-by-4096-coding-picture?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>weeklylearn</category>
      <category>weeklyretro</category>
      <category>devsjournal</category>
      <category>rails</category>
    </item>
    <item>
      <title>DevDojo Weekly Winners Week 3 April 2021</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 19 Apr 2021 10:49:31 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/devdojo-weekly-winners-week-3-april-2021-4ink</link>
      <guid>https://dev.to/bobbyiliev/devdojo-weekly-winners-week-3-april-2021-4ink</guid>
      <description>&lt;p&gt;It's that time of the week again. That's right, the time of the week where we congratulate five winners on DevDojo to win a quick $20 for writing an awesome article or tutorial.&lt;/p&gt;

&lt;p&gt;If you want to learn more about how you can join in on this weekly contest. Click here to check out the official rules.&lt;/p&gt;

&lt;p&gt;Ok, below are the five posts that we have selected this week. In no particular order, here are your weekly winners. üèÜ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-25-marvelous-image-resources"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://devdojo.com/savio/25-marvelous-resources-to-satisfy-your-image-needs"&gt;25 Marvelous Image Resources&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Check out these awesome 25 resources to find the perfect image for any of your web development needs. Written by &lt;a href="https://devdojo.com/savio"&gt;savio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/savio/25-marvelous-resources-to-satisfy-your-image-needs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18tyYpG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/25-marvelous-resources-to-satisfy-your-image-needs1.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="25 Marvelous Image Resources"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-css-variables"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://devdojo.com/zfett/css-variables-what-are-they-how-can-they-be-used"&gt;CSS Variables&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Learn all about CSS variables. What are they and how to use them. This fantastic article was written by &lt;a href="https://devdojo.com/zfett"&gt;zfett&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/zfett/css-variables-what-are-they-how-can-they-be-used"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Va5uyGP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/css-variables-what-are-they-how-can-they-be-used4.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="CSS Variables"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-what-is-redux"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://devdojo.com/rahulism/what-is-redux-practical-guide-to-redux"&gt;What is Redux?&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Learn about Redux and how you can use it in your React projects. This rad tutorial was written by &lt;a href="https://devdojo.com/rahulism"&gt;rahulism&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/rahulism/what-is-redux-practical-guide-to-redux"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unwcYXmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/what-is-redux-practical-guide-to-redux2.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="What is Redux?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-how-to-stay-productive-as-a-developer"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://devdojo.com/bo-iliev/5-tips-on-how-to-stay-motivated-and-productive"&gt;How To Stay Productive as a Developer&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here are five sure-fire ways to stay motivated and productive as a developer. You've got to check out this excellent article posted by &lt;a href="https://devdojo.com/bo-iliev"&gt;bo-iliev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bo-iliev/5-tips-on-how-to-stay-motivated-and-productive"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wr-0fGbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/5-tips-on-how-to-stay-motivated-and-productive2.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="How To Stay Productive as a Developer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-the-react-tutorial-for-2021"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://devdojo.com/reedbarger/the-react-tutorial-for-2021-a-complete-guide"&gt;The React Tutorial for 2021&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;This post is the ultimate React Tutorial for 2021. It's a complete guide to help you learn the ins and outs of React. This bitchin' guide was written by &lt;a href="https://devdojo.com/reedbarger"&gt;reedbarger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/reedbarger/the-react-tutorial-for-2021-a-complete-guide"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cK3Ohq5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/the-react-tutorial-for-2021-a-complete-guide.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="The React Tutorial for 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We had another great week of tutorials and posts written on the DevDojo. Thanks to everyone who is helping to make this community thrive with excellent content üôå&lt;/p&gt;

&lt;p&gt;I wish you a fantastic upcoming week. Remember to have fun as your coding away on your projects because being a developer truly is amazing. üòä&lt;/p&gt;

</description>
      <category>writing</category>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>GraphQL Schema - The Beginner's Guide to GraphQL Editor p.1</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Mon, 19 Apr 2021 10:45:37 +0000</pubDate>
      <link>https://dev.to/graphqleditor/graphql-schema-the-beginner-s-guide-to-graphql-editor-p-1-3c3</link>
      <guid>https://dev.to/graphqleditor/graphql-schema-the-beginner-s-guide-to-graphql-editor-p-1-3c3</guid>
      <description>&lt;p&gt;GraphQL Editor is a tool for both advanced users and those only starting to work on GraphQL APIs.&lt;/p&gt;

&lt;p&gt;On the off chance you don't know anything about GraphQL Editor it's a web tool that lets you see and better understand how the schema and various elements within it work, even if you‚Äôre not a programmer. &lt;/p&gt;

&lt;p&gt;You can even build a schema by joining the visualized blocks and having GraphQL Editor generate the code for them. That‚Äôs just the basics and tool has lots of other useful features a bunch of them added in the recent &lt;a href="https://blog.graphqleditor.com/graphql-editor-v45/"&gt;GraphQL Editor v. 4.5 update&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schema"&gt;
  &lt;/a&gt;
  Schema
&lt;/h2&gt;

&lt;p&gt;So let‚Äôs try it out and set up a very basic schema that should be easy to grasp even for someone completely new to GraphQL. Let‚Äôs start by setting up the contact form input:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's add strings (email and message),&lt;/li&gt;
&lt;li&gt;we want make them required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tbq4w1Ov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1r3uhulw4ct5nae1rhc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbq4w1Ov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1r3uhulw4ct5nae1rhc.gif" alt="Schema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-mutations"&gt;
  &lt;/a&gt;
  Creating Mutations
&lt;/h4&gt;

&lt;p&gt;Now it's time for the types. First let's add a mutation, for this sample mutation we will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a type &amp;amp; set it as a &lt;code&gt;mutation&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;make it required,&lt;/li&gt;
&lt;li&gt;add boolean.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDTT3sy7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyyyzr6uunf7mjvvqij3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDTT3sy7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyyyzr6uunf7mjvvqij3.gif" alt="Mutations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#query"&gt;
  &lt;/a&gt;
  Query
&lt;/h4&gt;

&lt;p&gt;All we need now is a query to fetch the data, for that first lets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make a form type with strings for email and message,
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sqrsxSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7del8kl47z9g96a1rc5.gif" alt="Form"&gt;
&lt;/li&gt;
&lt;li&gt;For the query we do the same thing we did before: add type, select &lt;code&gt;query&lt;/code&gt; and once again make it required.&lt;/li&gt;
&lt;li&gt;Now let's make it fetch from the form we made above so remember to check required and also check array and array required here as well.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlnFkJ5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j74b7al8iqefn56nzhl5.gif" alt="Query"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-its-done"&gt;
  &lt;/a&gt;
  And it's done
&lt;/h2&gt;

&lt;p&gt;As you can see as we finished this last step it automatically rounds it out as a schema and we can even find out how it looks in the visualization:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8XzVUwqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7fxtn7nnakabotzjzqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8XzVUwqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7fxtn7nnakabotzjzqr.png" alt="Visualization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that‚Äôs it, you just created a simple GraphQL schema that can fetch two basic values like emails and messages from a database. Obviously, we haven't even scratched the surface of what GraphQL Editor can do so hopefully you‚Äôll stick around to see what we do next time.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;A guest blog post for &lt;a href="https://blog.graphqleditor.com/"&gt;GraphQL Editor blog&lt;/a&gt; by Micha≈Ç Tyszkiewicz&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphqleditor.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif" alt="New features of GraphQL Editor gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Lessons from PostgreSQL</title>
      <author>Timi Bello</author>
      <pubDate>Mon, 19 Apr 2021 10:37:55 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/lessons-from-postgresql-4lem</link>
      <guid>https://dev.to/ourtimefortech/lessons-from-postgresql-4lem</guid>
      <description>&lt;p&gt;Hello there! Today, I‚Äôll be talking about some noteworthy lessons I learnt while using PostgreSQL for Our Shiftwork App.&lt;br&gt;
 As much as we didn‚Äôt go in-depth using PostgreSQL on the App, they were still quite some things to learn using PostgreSQL. &lt;br&gt;
For the Shiftwork app, my team and I are building, the major thing PostgreSQL was to do was in creating the database. &lt;br&gt;
As I had said before in my blogpost &lt;a href="https://dev.to/ourtimefortech/journeying-as-a-codecollab-fellow-with-our-time-for-tech-1b28"&gt;here,&lt;/a&gt; I jumped from one error to another trying to get the database to be created with most of my issues; PostgreSQL related.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#postgresql-power"&gt;
  &lt;/a&gt;
  PostgreSQL Power
&lt;/h1&gt;

&lt;p&gt;Postgres is an incredibly powerful database that‚Äôs packed with many different features. Some of its most interesting and productive capabilities, however, aren‚Äôt always evident.&lt;br&gt;
 When we started the initial setup of the app, I wondered why we chose PostgreSQL over MySQL, but I got to learn that PostgreSQL is a superior choice over MySQL based on its rich features, active community, and support.&lt;/p&gt;

&lt;p&gt;As much as PostgreSQL and MySQL are both immensely popular open-source databases, and a variety of real-time applications today utilize both. MySQL is known to be the world‚Äôs most popular database, whereas PostgreSQL is known as the world‚Äôs most advanced RDBMS database(Relational Database Management System).&lt;/p&gt;

&lt;p&gt;As an RDBMS database, MySQL is not fully SQL compliant and does not have many of the features that PostgreSQL has. This is why PostgreSQL has become a great choice for developers, and its popularity is growing exponentially with each passing day.&lt;br&gt;
PostgreSQL also makes setting up and using databases easier and simpler both on-premises or in the cloud. PostgreSQL can also be a very good data warehouse for running complex reporting queries and procedures on large volumes of data. &lt;/p&gt;

&lt;p&gt;PostgreSQL is an easy-to-use database with its full stack of RDBMS database features and capabilities that can handle structured and unstructured data. Installations can be easily done on Linux-flavored environments using yum or source code from the PostgreSQL website. Installing from source code gives you much more fine-grained control over the installation.&lt;br&gt;
Just as it‚Äôs the same with Rails, I learned that a lot can be going under the ‚Äúhood‚Äù despite how deceptively easy it might be to use.&lt;/p&gt;

&lt;p&gt;Another thing I learned was that there are no ‚Äúusers‚Äù in PostgreSQL, just roles. &lt;br&gt;
 By running psql Postgres in your terminal, you‚Äôll automatically log in with your username to PostgreSQL, therefore accessing the role created. Once a role is created, you can see it by using the &lt;code&gt;\du&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The following roles attributes are seen by default:&lt;br&gt;
&lt;code&gt;Superuser&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Create role&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Create DB&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Replication&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Bypass RLS&lt;/code&gt;&lt;br&gt;
and it‚Äôs possible not to be a member of any of the roles (Herein lies some of the major errors that might be encountered with PostgreSQL). &lt;/p&gt;

&lt;p&gt;Creating a new role&lt;br&gt;
A new role is created using the CREATE ROLE command:&lt;br&gt;
&lt;code&gt;CREATE ROLE &amp;lt;role&amp;gt;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Quick Summary of useful commands in postgreSQL&lt;br&gt;
&lt;code&gt;sudo -u Postgres psql&lt;/code&gt;&lt;br&gt;
&lt;code&gt;postgres=# create database mydb;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;postgres=# create user myuser with encrypted password 'mypass';&lt;/code&gt;&lt;br&gt;
&lt;code&gt;postgres=# grant all privileges on database mydb to myuser;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As I had to consume some documentation and go through resources, I learned a tip which is the importance of reading the PostgreSQL Manual. The official documentation (or docs as they are referred to in short) of any product is the best place to find the largest wealth of information.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-little-things"&gt;
  &lt;/a&gt;
  The Little Things
&lt;/h2&gt;

&lt;p&gt;I remember running into this bug, &lt;strong&gt;‚ÄúActiveRecord::AdapterNotSpecified: 'PostgreSQL database is not configured‚Äù, ‚ÄúRails Aborted‚Äù&lt;/strong&gt; when I was trying to migrate into the database.&lt;br&gt;
After checking and trying several solutions on StackOverflow, I found out the problem was because there was a space before development in the db config file. &lt;br&gt;
This was fixed by simply removing space from the first line and following the indentation. This got me past my hour+ blockade as I didn't know leading spaces were an issue.  Haha funny, isn‚Äôt it? &lt;/p&gt;

&lt;p&gt;From here I learned that: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúIt can be the simplest things that can cause the most aggravating errors.‚Äù  - Arit Amana&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below are some links to the helpful resources/documentations I used with the bugs I encountered, if you desire to know more: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/25608062/activerecordadapternotspecified-postgresql-database-is-not-configured"&gt;https://stackoverflow.com/questions/25608062/activerecordadapternotspecified-postgresql-database-is-not-configured&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flaviocopes.com/postgres-user-permissions/"&gt;https://flaviocopes.com/postgres-user-permissions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e"&gt;https://medium.com/coding-blocks/creating-user-database-and-adding-access-on-postgresql-8bfcd2f4a91e&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/52610485/how-to-restart-postgresql-in-ubuntu-18-04/52610486#52610486"&gt;https://stackoverflow.com/questions/52610485/how-to-restart-postgresql-in-ubuntu-18-04/52610486#52610486&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart"&gt;https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/31645550/postgresql-why-psql-cant-connect-to-server"&gt;https://stackoverflow.com/questions/31645550/postgresql-why-psql-cant-connect-to-server&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/159339/ubuntu-get-postgresql-running"&gt;https://serverfault.com/questions/159339/ubuntu-get-postgresql-running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://computingforgeeks.com/installing-postgresql-database-server-on-ubuntu/"&gt;https://computingforgeeks.com/installing-postgresql-database-server-on-ubuntu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I initially felt quite anxious and tired about how I kept running into one error from another, I‚Äôm glad that it has helped foster my learning process. I hope to learn more facets of PostgreSQL soon! Thank you for reading!&lt;/p&gt;

&lt;p&gt;Referencing: &lt;br&gt;
&lt;a href="https://www.enterprisedb.com/blog/postgresql-vs-mysql-360-degree-comparison-syntax-performance-scalability-and-features"&gt;https://www.enterprisedb.com/blog/postgresql-vs-mysql-360-degree-comparison-syntax-performance-scalability-and-features&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@cgower?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Christopher Gower&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/4096-by-4096-tech-pictures?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>whatilearned</category>
      <category>rails</category>
    </item>
    <item>
      <title>Easy WordPress theme deployment using Deployer</title>
      <author>Nino Mihoviliƒá</author>
      <pubDate>Mon, 19 Apr 2021 10:29:21 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/easy-wordpress-theme-deployment-using-deployer-2ie7</link>
      <guid>https://dev.to/bornfightcompany/easy-wordpress-theme-deployment-using-deployer-2ie7</guid>
      <description>&lt;p&gt;In this article, I‚Äôll show you an easy and fast way how to set up WordPress theme deployment without downtime using Deployer in 5 steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1"&gt;Setting up Deployer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2"&gt;Setting up the Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3"&gt;Setting up SSH Agent Forwarding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4"&gt;Setting up deploy.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-5"&gt;Testing our Script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-setting-up-deployer"&gt;
  &lt;/a&gt;
  Step 1 &lt;a&gt; - Setting up Deployer
&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://deployer.org/docs/getting-started.html"&gt;Deployer&lt;/a&gt; is a simple &lt;strong&gt;open-source&lt;/strong&gt; PHP-based &lt;strong&gt;deployment&lt;/strong&gt; tool. It‚Äôs easy to use and set up.&lt;/p&gt;

&lt;p&gt;There are multiple ways to &lt;strong&gt;install&lt;/strong&gt; the tool on their website but the easiest way is to run these 3 commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -LO https://deployer.org/deployer.phar
mv deployer.phar /usr/local/bin/dep
chmod +x /usr/local/bin/dep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check if everything is installed ok run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-setting-up-the-server"&gt;
  &lt;/a&gt;
  Step 2 &lt;a&gt; - Setting up the Server
&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In this tutorial, we will be using AWS Lighstail, but you can use any other server.&lt;br&gt;
The only requirement is that you have &lt;strong&gt;SSH Access&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creating-an-instance-you-can-skip-this-part-if-you-have-a-server-and-ssh-access"&gt;
  &lt;/a&gt;
  Creating an instance - you can skip this part if you have a server and SSH access
&lt;/h4&gt;

&lt;p&gt;Log in to your AWS account and search for Lightsail in the search bar. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1vhywVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7g6c2bzs1xv8xyo0hmq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1vhywVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7g6c2bzs1xv8xyo0hmq.png" alt="Lightsail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an instance using the WordPress blueprint and Linux platform. When the server is up and running, open the server terminal and add your public SSH key to the &lt;strong&gt;~/.ssh/authorized_keys&lt;/strong&gt; file.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setting-up-git"&gt;
  &lt;/a&gt;
  Setting up GIT
&lt;/h4&gt;

&lt;p&gt;We need &lt;strong&gt;Git&lt;/strong&gt; on the server because &lt;strong&gt;Deployer&lt;/strong&gt; will pull the theme from the repository. &lt;/p&gt;

&lt;p&gt;As we are on a Linux-based server, the command to install git is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To verify the installation run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-setting-up-ssh-agent-forwarding"&gt;
  &lt;/a&gt;
  Step 3 - Setting up SSH Agent Forwarding
&lt;/h3&gt;

&lt;p&gt;To be able to pull the repository, the server needs access to it. We can use &lt;strong&gt;deploy keys&lt;/strong&gt; or &lt;strong&gt;SSH Agent Forwarding&lt;/strong&gt;. Both ways are pretty straightforward when it comes to the set up, but we will go with Agent Forwarding in this tutorial.&lt;/p&gt;

&lt;p&gt;On your local machine position yourself in the &lt;strong&gt;~/.ssh&lt;/strong&gt; folder. If it doesn't exist, create a file named "config".&lt;br&gt;
Enter the following text into the file, replacing example.com with your server's domain name or IP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host example.com
  ForwardAgent yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key must be available to &lt;strong&gt;ssh-agent&lt;/strong&gt;. You can check that by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-add -L
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the command says that no identity is available, you'll need to add your key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-add yourkey
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*For your server SSH Agent Forwarding troubleshooting refer to this tutorial -&amp;gt; &lt;a href="https://docs.github.com/en/developers/overview/using-ssh-agent-forwarding"&gt;Using SSH Agent Forwarding&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-setting-up-deployphp"&gt;
  &lt;/a&gt;
  Step 4 &lt;a&gt; - Setting up deploy.php
&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Deploy.php&lt;/strong&gt; is the main &lt;strong&gt;config file&lt;/strong&gt; for Deployer. As we want to only deploy the WordPress theme, we will put the deploy.php in the &lt;strong&gt;theme root&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Position yourself in the theme root and enter the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dep init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will need to provide some basic info. Choose the &lt;strong&gt;0 - Common script&lt;/strong&gt; as it has the basic stuff that we need. &lt;br&gt;
Next, enter your theme repository. In the repository, only the theme files should be present. &lt;br&gt;
In the last step, you can choose to submit anonymous usage information to the PHP-Deployer community.&lt;br&gt;
Now we have the basic deploy.php file. We will do some &lt;strong&gt;changes&lt;/strong&gt; to make our script work.&lt;/p&gt;

&lt;p&gt;First, let's name our application/theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set('application', 'my_project');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can enter anything but let's put our theme name: "super-theme".&lt;/p&gt;

&lt;p&gt;We will set a new variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set('theme_dir', 'path_to_themes_folder');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we need to enter the &lt;strong&gt;server path to the themes folder&lt;/strong&gt;. In our example, we used AWS Lightsail with preinstalled WordPress so the path is: "/home/bitnami/apps/wordpress/htdocs/wp-content/themes".&lt;/p&gt;

&lt;p&gt;Next, we set the host and modify it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;host( 'project.com_or_IP' )
    -&amp;gt;set( 'branch', 'master' )
    -&amp;gt;user( 'bitnami' )
    -&amp;gt;set( 'deploy_path', '~/{{application}}' )
    -&amp;gt;forwardAgent();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the &lt;strong&gt;domain name or IP&lt;/strong&gt; for the host. We set up the &lt;strong&gt;branch&lt;/strong&gt; that we want to deploy, the &lt;strong&gt;SSH user&lt;/strong&gt; in our case "bitnami". &lt;br&gt;
The &lt;strong&gt;deploy_path&lt;/strong&gt; contains the deployment path on the server that can be left as is, and we enable &lt;strong&gt;Agent Forwarding&lt;/strong&gt; so that our local SSH key is used for pulling the repository on the server.&lt;/p&gt;

&lt;p&gt;For our script, we need to add an &lt;strong&gt;additional task&lt;/strong&gt; that symlinks the current folder to the themes folder so that we can have the latest theme active after the deployment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;task( 'deploy:theme', function () {
    run( 'ln -sfn {{deploy_path}}/current {{theme_dir}}/{{application}}' );
} );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last part is to &lt;strong&gt;add&lt;/strong&gt; the created task to the main task &lt;strong&gt;"deploy"&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;task( 'deploy', [
    'deploy:info',
    'deploy:prepare',
    'deploy:lock',
    'deploy:release',
    'deploy:update_code',
    'deploy:shared',
    'deploy:writable',
    'deploy:vendors',
    'deploy:clear_paths',
    'deploy:symlink',
    'deploy:theme',
    'deploy:unlock',
    'cleanup',
    'success'
] )-&amp;gt;desc( 'Deploy your theme' );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added the "deploy:theme" task after the current symlink is created.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;whole file&lt;/strong&gt; should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

namespace Deployer;

require 'recipe/common.php';

// Theme name
set( 'application', 'super-theme' );

// Theme repository
set( 'repository', 'git_repository' );

// Theme directory
set( 'theme_dir', '/home/bitnami/apps/wordpress/htdocs/wp-content/themes' );


// [Optional] Allocate tty for git clone. Default value is false.
set( 'git_tty', TRUE );

// Shared files/dirs between deploys
add( 'shared_files', [] );
add( 'shared_dirs', [] );

// Writable dirs by web server
add( 'writable_dirs', [] );
set( 'allow_anonymous_stats', FALSE );


// Hosts
host( 'project.com_or_IP' )
    -&amp;gt;set( 'branch', 'master' )
    -&amp;gt;user( 'bitnami' )
    -&amp;gt;set( 'deploy_path', '~/{{application}}' )
    -&amp;gt;forwardAgent();


task( 'deploy:theme', function () {
    run( 'ln -sfn {{deploy_path}}/current {{theme_dir}}/{{application}}' );
} );

/**
 * Main task
 */
task( 'deploy', [
    'deploy:info',
    'deploy:prepare',
    'deploy:lock',
    'deploy:release',
    'deploy:update_code',
    'deploy:shared',
    'deploy:writable',
    'deploy:vendors',
    'deploy:clear_paths',
    'deploy:symlink',
    'deploy:theme',
    'deploy:unlock',
    'cleanup',
    'success'
] )-&amp;gt;desc( 'Deploy your theme' );

// [Optional] If deploy fails automatically unlock.
after( 'deploy:failed', 'deploy:unlock' );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-testing-our-script"&gt;
  &lt;/a&gt;
  Step 5 &lt;a&gt; - Testing our Script
&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To run our script we enter the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dep deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is &lt;strong&gt;successful&lt;/strong&gt; it should look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3yxZS6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9midvc9gsw3457vz8i09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3yxZS6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9midvc9gsw3457vz8i09.png" alt="Successful deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If something is wrong you can use the verbose mode to debug:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dep deploy -v, provides default installation view with the least information 
dep deploy -vv, provides some more details as compared with the default mode 
dep deploy -vvv, provides a detailed view of the installation output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Those are the 5 steps for a fast deployment setup for a WordPress theme.&lt;br&gt;
 If you use the same server for all of your projects you can set up this only once and only modify the variables in the deploy.php file.&lt;/p&gt;

&lt;p&gt;There are many ways to manage a WordPress theme and set up deployments. I find this an easy way to quickly set up the workflow, what do you think?&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>wordpress</category>
      <category>deployment</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Art of Celebrating Too Early And Backtracking to Save The Day. A Scraping Story.</title>
      <author>Constantin Cheptea</author>
      <pubDate>Mon, 19 Apr 2021 10:18:57 +0000</pubDate>
      <link>https://dev.to/ccheptea/the-art-of-celebrating-too-early-and-backtracking-to-save-the-day-a-scraping-story-48pp</link>
      <guid>https://dev.to/ccheptea/the-art-of-celebrating-too-early-and-backtracking-to-save-the-day-a-scraping-story-48pp</guid>
      <description>&lt;p&gt;One of our clients asked us if we could build a simple app for scanning product barcodes in stores. The goal is to instantly tell the user if the product is safe for consumption considering specified intolerances (e.g.: Gluten). We would get the product information from a partner website. Only, there's a tiny issue: there's no public API to get the data. On the bright side, we were allowed to scrape it üï∑.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-first-scraper"&gt;
  &lt;/a&gt;
  Our first scraper
&lt;/h3&gt;

&lt;p&gt;Building a scraper may seem like a daunting task. There are many tools online that you can use, but after a thorough assessment, we decided we can simplify things by using Elixir (functional programming language) and the Phoenix Framework. With Pheonix, we bootstrapped a basic admin panel in less than a day. The scraper itself is based on a tiny library called Crawly for making the web requests and Flow for parallelising the data processing. The products were not listing the barcodes but they did have high-quality images we could scan with ZBar. Image processing is slow in high-quality images - all the more reason to multithread. Long story short, our scraper turned out to be pretty slick üöÄ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-to-make-the-client-happy"&gt;
  &lt;/a&gt;
  Time to make the client happy
&lt;/h3&gt;

&lt;p&gt;We ran our scraper several times and made as many improvements as we could. Our database was ripe with thousands upon thousands of products ready to be picked by our soon-to-be long lasting customers. We were pretty confident we nailed it. Our client was pleased to find out we managed to pull the products without having any public API and took the app (built with ReactNative) for testing with friends and family. We went to celebrate with üçª and üéÆ. &lt;/p&gt;

&lt;p&gt;A couple of days later our client scheduled a meeting. Time for laurels, we thought. But no, the app turned out to be completely useless. Our client had scanned his entire fridge and found just two products that we also had in our database. Same went for the others. How was that possible? We did scrape the entire website, didn't we? Were there products that were not listed on the website? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#needle-in-a-haystack"&gt;
  &lt;/a&gt;
  Needle in a haystack
&lt;/h3&gt;

&lt;p&gt;Scraping is indeed a daunting task. After a day of uselessly testing and validating our code, we turned our heads towards the website. What if we looked for the products in the fridge? Namely, the ones we missed. Searching for them manually actually worked! They were on the website, only our scraper couldn't get to them.&lt;/p&gt;

&lt;p&gt;Now the fun begins.&lt;/p&gt;

&lt;p&gt;Our first discovery was that our website had a hard limit of 201 products per category. Meaning, no matter what category we were choosing to scrape we would always be getting the same 201 products. We scraped by category and dietary preference, but we also discovered that we could get completely different products if we applied different combinations of dietary preferences. This meant that if we were to make all possible combinations of dietary preferences we would end up with a lot more products if not all of them. But how do we solve that?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#back-to-high-school"&gt;
  &lt;/a&gt;
  Back to high school
&lt;/h3&gt;

&lt;p&gt;First, we defined our problem. Suppose we have a list of elements, where each number represents a dietary preference. We need to come up with a function that finds all possible unique combinations of those elements. For &lt;code&gt;list = [1, 2, 3]&lt;/code&gt;, our function should return the following possibilities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Having simplified the terms of the problem we were relieved. Relieved because we knew what to do next, but also because all those years spent in college learning about algorithms are yet again useful (:feeling-grateful)!&lt;/p&gt;

&lt;p&gt;Like children at play, we took the challenge to solve the problem individually, then choose the best solution. Time to code-kata!&lt;/p&gt;

&lt;p&gt;Of course, none of us looked for anything fancy, because the scraper would only run once to get the data. An optimized brute force solution should be enough.&lt;/p&gt;

&lt;p&gt;Here are some of the raw solutions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# "To pad, or not to pad?", this is the question...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;kata1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;to_pad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_pad&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;to_pad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using the wisdom of bits.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;kata2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# (2^length)-1 -&amp;gt; limit&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pad_leading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:io_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"~&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.2.0B"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="no"&gt;Bitwise&lt;/span&gt;&lt;span class="o"&gt;.~~~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])),&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;trim:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This one thinks it's all game of heads and tails.&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Combinations&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We ended up choosing the last solution presented above, which is a classic backtracking implementation. You don't implement backtracking algorithms every day. So, although you (should) learn to use it in high school, chances are you forget about it by the time you get your first programming job. Our advice is to do competitive programming whenever you find the time or simply solve problems on platforms such as HackerRank and Codewars. It's fun and it keeps you fresh. Internally, we have a dedicated Slack channel where we add challenges and discuss solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-be-continued"&gt;
  &lt;/a&gt;
  To be continued...
&lt;/h3&gt;

&lt;p&gt;After accommodating the backtracking solution with our existing code, it felt like our scraper was on steroids. The time to scrape the entire website doubled to around four hours. Clenching teeth, we regularly monitored the numbers in the database. In the end, it turned out well - the number of products almost doubled!&lt;/p&gt;

&lt;p&gt;You may be curious about what happened with the project. Well, with the new data our client was happy to rescan his fridge and ask friends to do the same in real grocery stores. So far, the feedback was relatively positive. As a proof of concept, it does enough to start a discussion about opening the much-needed public APIs to make it work in real life.&lt;br&gt;
For us, however, this was a short project stuffed with lots of fun challenges that required unusual, if not unorthodox, solutions. &lt;/p&gt;

</description>
      <category>elixir</category>
      <category>functional</category>
    </item>
    <item>
      <title>JavaScript best practices to improve code quality</title>
      <author>Saif Sadiq</author>
      <pubDate>Mon, 19 Apr 2021 09:58:30 +0000</pubDate>
      <link>https://dev.to/deepsource/javascript-best-practices-to-improve-code-quality-5d33</link>
      <guid>https://dev.to/deepsource/javascript-best-practices-to-improve-code-quality-5d33</guid>
      <description>&lt;p&gt;If you write JavaScript today, it‚Äôs worth your time staying in the know of all the updates the language has seen in the past few years. Since 2015, with the release of ES6, a new version of the ECMAScript spec has been released each year. Each iteration adds new features, new syntax, and Quality of Life improvements to the language. JavaScript engines in most browsers and Node.js quickly catch up, and it‚Äôs only fair that your code should catch up as well. That‚Äôs because with each new iteration of JavaScript comes new idioms and new ways to express your code, and many a time, these changes may make the code more maintainable for you and your collaborators.&lt;/p&gt;

&lt;p&gt;Here are some of the latest ECMAScript features, and by induction, JavaScript and Node.js that you can make use of to write cleaner, more concise, and more readable code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-block-scored-declarations"&gt;
  &lt;/a&gt;
  1. Block scored declarations
&lt;/h2&gt;

&lt;p&gt;Since the inception of the language, JavaScript developers have used &lt;code&gt;var&lt;/code&gt; to declare variables. The keyword &lt;code&gt;var&lt;/code&gt; has its quirks, the most problematic of those being the scope of the variables created by using it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 10
if (true) { var x = 15 // inner declaration overrides declaration in parent scope
 console.log(x) // prints 15
}
console.log(x) // prints 15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since variables defined with &lt;code&gt;var&lt;/code&gt; are not block-scoped, redefining them in a narrower scope affects the value of the outer scope.&lt;/p&gt;

&lt;p&gt;Now we have two new keywords that replace &lt;code&gt;var&lt;/code&gt;, namely &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; that do not suffer from this drawback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let y = 10
if (true) { let y = 15 // inner declaration is scoped within the if block
 console.log(y) // prints 15
}
console.log(y) // prints 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; differ in the semantics that variables declared with &lt;code&gt;const&lt;/code&gt; cannot be reassigned in their scope. This does not mean they are immutable, only that their references cannot be changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const x = [] x.push("Hello", "World!")
x // ["Hello", "World!"]

x = [] // TypeError: Attempted to assign to readonly property.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-arrow-functions"&gt;
  &lt;/a&gt;
  2. Arrow functions
&lt;/h2&gt;

&lt;p&gt;Arrow functions are another very important feature introduced recently to JavaScript. They come bearing many advantages. First and foremost, they make the functional aspects of JavaScript beautiful to look at and simpler to write.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let x = [1, 2, 3, 4] x.map(val =&amp;gt; val * 2) // [2, 4, 6, 8]
x.filter(val =&amp;gt; val % 2 == 0) // [2, 4]
x.reduce((acc, val) =&amp;gt; acc + val, 0) // 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In all of the above examples the arrow functions, named after the distinctive arrow &lt;code&gt;=&amp;gt;&lt;/code&gt;, replace traditional functions with a concise syntax.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the function body is a single expression, the scope brackets &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; keyword are implied and need not be written.&lt;/li&gt;
&lt;li&gt;If the function has a single argument, the argument parentheses &lt;code&gt;()&lt;/code&gt; are implied and need not be written.&lt;/li&gt;
&lt;li&gt;If the function body expression is a dictionary, it must be enclosed in parentheses &lt;code&gt;()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another significant advantage of arrow functions is that they do not define a scope but rather exist within the parent scope. This avoids a lot of pitfalls that can arise with the use of the &lt;code&gt;this&lt;/code&gt; keyword. Arrow functions have no bindings for &lt;code&gt;this&lt;/code&gt;. Inside the arrow function, the value of &lt;code&gt;this&lt;/code&gt; is the same as that in the parent scope. Consequently, arrow functions cannot be used as methods or constructors. Arrow functions don‚Äôt work with &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;, or &lt;code&gt;call&lt;/code&gt; and have no bindings for &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;They also have certain other limitations such as lack of the &lt;code&gt;arguments&lt;/code&gt; object which traditional functions can access and the inability to &lt;code&gt;yield&lt;/code&gt; from the function body.&lt;/p&gt;

&lt;p&gt;Thus arrow functions are not a 1:1 replacement for standard functions but welcome addition to JavaScript‚Äôs feature set.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-optional-chaining"&gt;
  &lt;/a&gt;
  3. Optional chaining
&lt;/h2&gt;

&lt;p&gt;Imagine a deeply nested data structure like this &lt;code&gt;person&lt;/code&gt; object here. Consider you wanted to access the first and last name of this person. You would write this in JavaScript like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;person = { name: { first: 'John', last: 'Doe', }, age: 42
}
person.name.first // 'John'
person.name.last // 'Doe'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now imagine what would happen if the &lt;code&gt;person&lt;/code&gt; object did not contain a nested &lt;code&gt;name&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;person = { age: 42
}
person.name.first // TypeError: Cannot read property 'first' of undefined
person.name.last // TypeError: Cannot read property 'last' of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid such errors, developers had to resort to code like the following, which is unnecessarily verbose, hard to read, and unpleasant to write ‚Äî a very bad trio of adjectives.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;person &amp;amp;&amp;amp; person.name &amp;amp;&amp;amp; person.name.first // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meet optional chaining, a new feature of JavaScript that does away with this monstrosity. Optional chaining short-circuits the digging process as soon as it encounters a &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; value and returns &lt;code&gt;undefined&lt;/code&gt; without raising an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;person?.name?.first // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resultant code is much concise and cleaner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-nullish-coalescing"&gt;
  &lt;/a&gt;
  4. Null-ish coalescing
&lt;/h2&gt;

&lt;p&gt;Before introducing the null-ish coalescing operator, JavaScript developers used the OR operator &lt;code&gt;||&lt;/code&gt; to fall back to a default value if the input was absent. This came with a significant caveat that even legitimate but falsy values would result in a fallback to the defaults.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print(val) { return val || 'Missing'
} print(undefined) // 'Missing'
print(null) // 'Missing'

print(0) // 'Missing'
print('') // 'Missing'
print(false) // 'Missing'
print(NaN) // 'Missing'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript has now proposed the null coalescing operator &lt;code&gt;??&lt;/code&gt;, which offers a better alternative in that it only results in a fallback if the preceding expression is null-ish. Here null-ish refers to values that are &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print(val) { return val ?? 'Missing'
} print(undefined) // 'Missing'
print(null) // 'Missing'

print(0) // 0
print('') // ''
print(false) // false
print(NaN) // NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, you can ensure that if your program accepts falsy values as legitimate inputs, you won‚Äôt end up replacing them with fallbacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-logical-assignment"&gt;
  &lt;/a&gt;
  5. Logical assignment
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say you want to assign a value to a variable if and only if the value is currently null-ish. A logical way to write this would be like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (x === null || x == undefined) { x = y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you knew about how short-circuiting works, you might want to replace those 3 lines of code with a more succinct version using the null-ish coalescing operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x ?? (x = y) // x = y if x is nullish, else no effect
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the short-circuiting feature of the null-ish coalescing operator to execute the second part &lt;code&gt;x = y&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is null-ish. The code is pretty concise, but it still is not very easy to read or understand. The logical null-ish assignment does away with the need for such a workaround.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x ??= y // x = y if x is nullish, else no effect
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Along the same lines, JavaScript also introduces logical AND assignment &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; and logical OR assignment &lt;code&gt;||=&lt;/code&gt; operators. These operators perform assignment only when the specific condition is met and have no effect otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x ||= y // x = y if x is falsy, else no effect
x &amp;amp;&amp;amp;= y // x = y if x is truthy, else no effect
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; If you‚Äôve written Ruby before, you‚Äôve seen the &lt;code&gt;||=&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; operators, since Ruby does not have the concept of falsy values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-named-capture-groups"&gt;
  &lt;/a&gt;
  6. Named capture groups
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs start with a quick recap of capture groups in regular expressions. A capture group is a part of the string that matches a portion of regex in parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let re = /(\d{4})-(\d{2})-(\d{2})/
let result = re.exec('Pi day this year falls on 2021-03-14!') result[0] // '2020-03-14', the complete match
result[1] // '2020', the first capture group
result[2] // '03', the second capture group
result[3] // '14', the third capture group
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Regular expressions have also supported named capture groups for quite some time, which is a way for the capture groups to be referenced by a name rather than an index. Now, with ES9, this feature has made its way to JavaScript. Now the result object contains a nested groups object where each capture group‚Äôs value is mapped to its name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let re = /(?&amp;lt;year&amp;gt;\d{4})-(?&amp;lt;month&amp;gt;\d{2})-(?&amp;lt;day&amp;gt;\d{2})/
let result = re.exec('Pi day this year falls on 2021-03-14!') result.groups.year // '2020', the group named 'year'
result.groups.month // '03', the group named 'month'
result.groups.day // '14', the group named 'day'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new API works beautifully with another new JavaScript feature, de-structured assignments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let re = /(?&amp;lt;year&amp;gt;\d{4})-(?&amp;lt;month&amp;gt;\d{2})-(?&amp;lt;day&amp;gt;\d{2})/
let result = re.exec('Pi day this year falls on 2021-03-14!')
let { year, month, day } = result.groups year // '2020'
month // '03'
day // '14'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-raw-async-endraw-amp-raw-await-endraw-"&gt;
  &lt;/a&gt;
  7. &lt;code&gt;async&lt;/code&gt; &amp;amp; &lt;code&gt;await&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;One of the powerful aspects of JavaScript is its asynchronicity. This means that many functions that may be long-running or time-consuming can return a Promise and not block execution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const url = 'https://the-one-api.dev/v2/book'
let prom = fetch(url)
prom // Promise {&amp;lt;pending&amp;gt;}

// wait a bit
prom // Promise {&amp;lt;fullfilled&amp;gt;: Response}, if no errors
// or
prom // Promise¬†{&amp;lt;rejected&amp;gt;: Error message}, if any error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the call to fetch returns a Promise that has the status ‚Äòpending‚Äô when created. Soon, when the API returns the response, it transitions into a ‚Äòfulfilled‚Äô state, and the Response that it wraps can be accessed. In the Promises world, you would do something like this to make an API call and parse the response as JSON.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const url = 'https://the-one-api.dev/v2/book'
let prom = fetch(url)
prom // Promise {&amp;lt;fullfilled&amp;gt;: Response}
 .then(res =&amp;gt; res.json()) .then(json =&amp;gt; console.log(json)) // prints response, if no errors
 .catch(err =&amp;gt; console.log(err)) // prints error message, if any error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In 2017, JavaScript announced two new keywords &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;, that make handling and working with Promises easier and more fluent. They are not a replacement for Promises; they are merely syntactic sugar on top of the powerful Promises concepts.&lt;/p&gt;

&lt;p&gt;Instead of all the code happening inside a series of ‚Äòthen‚Äô functions, &lt;code&gt;await&lt;/code&gt; makes it all look like synchronous JavaScript. As an added benefit, you can use &lt;code&gt;try...catch&lt;/code&gt; with &lt;code&gt;await&lt;/code&gt; instead of handling errors in ‚Äòcatch‚Äô functions as you would have to if consuming Promises directly. The same code with &lt;code&gt;await&lt;/code&gt; would look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const url = 'https://the-one-api.dev/v2/book'
let res = await fetch(url) // Promise {&amp;lt;fullfilled&amp;gt;: Response} -await-&amp;gt; Response
try { let json = await res.json() console.log(json) // prints response, if no errors
} catch(err) { console.log(err) // prints error message, if any error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; keyword is the other side of the same coin, in that it wraps any data to be sent within a Promise. Consider the following asynchronous function for adding several numbers. In the real world, your code would be doing something much more complicated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function sum(...nums) { return nums.reduce((agg, val) =&amp;gt; agg + val, 0)
} sum(1, 2, 3) // Promise {&amp;lt;fulfilled&amp;gt;: 6}
 .then(res =&amp;gt; console.log(res) // prints 6

let res = await sum(1, 2, 3) // Promise {&amp;lt;fulfilled&amp;gt;: 6} -await-&amp;gt; 6
console.log(res) // prints 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These new features just the tip of the iceberg. We have barely even scratched the surface. JavaScript is constantly evolving, and new features are added to the language every year. It‚Äôs tough to keep up with the constant barrage of new features and idioms introduced to the language manually.&lt;/p&gt;

&lt;p&gt;Wouldn‚Äôt it be nice if some tool could handle this for us? Fret not, there is. We‚Äôve already talked in detail about &lt;a href="https://deepsource.io/blog/static-analysis-javascript/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=contentdistribution&amp;amp;utm_term=jscodequality"&gt;setting up static code analysis in your JavaScript repo&lt;/a&gt; using ESLint. It‚Äôs extremely useful and should be an indispensable tool of your toolchain. But to be honest, setting up ESLint auto-fix pipelines and processes takes time and effort. Unless you enjoy this sort of plumbing, you‚Äôd be better off if you wrote the code and outsourced the plumbing to‚Ä¶DeepSource!&lt;/p&gt;

&lt;p&gt;DeepSource can help you with &lt;a href="https://deepsource.io/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=contentdistribution&amp;amp;utm_term=jscodequality"&gt;automating the code reviews&lt;/a&gt; and save you a ton of time. Just add a &lt;code&gt;.deepsource.toml&lt;/code&gt; file in the root of the repository and DeepSource will pick it up for scanning right away. The scan will find scope for improvements across your code and help you fix them with helpful descriptions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deepsource.io/signup?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=contentdistribution&amp;amp;utm_term=jscodequality"&gt;Sign up&lt;/a&gt; and see for yourself!&lt;/p&gt;

&lt;p&gt;Originally published on &lt;a href="https://deepsource.io/blog/javascript-code-quality-best-practices/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=contentdistribution&amp;amp;utm_term=jscodequality"&gt;DeepSource Blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codequality</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Some small Css tips #015</title>
      <author>Stephan Nijman</author>
      <pubDate>Mon, 19 Apr 2021 09:56:56 +0000</pubDate>
      <link>https://dev.to/vanaf1979/some-small-css-tips-015-384m</link>
      <guid>https://dev.to/vanaf1979/some-small-css-tips-015-384m</guid>
      <description>&lt;p&gt;To continue on my &lt;a href="https://dev.to/vanaf1979/some-small-css-tips-014-85o"&gt;previous post&lt;/a&gt; here are some more tweets with little Css tips that might help you in your projects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unit-less-custom-properties"&gt;
  &lt;/a&gt;
  Unit less custom properties.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLiMVPPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Eww08_xW8AMj70J.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: You can keep your css variables unit less so you can use them with any unit later by combining the var() and calc() functions. &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:48 PM - 18 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1372530319807680512" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1372530319807680512" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1372530319807680512" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h3&gt;
  &lt;a href="#position-sticky-for-more-then-just-navigations"&gt;
  &lt;/a&gt;
  Position sticky for more then just navigations.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gbmkIB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ExFVChaW8AIV7fS.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: Position sticky is not limited to top navigation's. You can also (among other things) use it to create some nice headings that stick alongside your text.  &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt;&lt;br&gt;&lt;br&gt;üëáCheck out the CodePen below 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:21 PM - 22 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1373973010265292808" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1373973010265292808" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1373973010265292808" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/NWbQera?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Css position docs: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/position&lt;/a&gt;




&lt;h3&gt;
  &lt;a href="#css-backgroundclip"&gt;
  &lt;/a&gt;
  Css background-clip.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXtp57Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ExKkhS4XAAAedcg.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: If you don‚Äôt want your background image to show underneath your padding space, you can use background-clip to prevent this.  &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt;&lt;br&gt;&lt;br&gt;üëáCheck out the CodePen below 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:46 PM - 23 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1374341846021894148" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1374341846021894148" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1374341846021894148" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/NWbQZYr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Background-clip docs: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip&lt;/a&gt;




&lt;h3&gt;
  &lt;a href="#limit-number-of-text-lines"&gt;
  &lt;/a&gt;
  Limit number of text lines.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDQ_4Az6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ExPnBiDWUAkXT2t.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: If you need to limit a piece of text to a set number of lines you can do that with this code snippet. Even though it uses the -webkit prefix, it will work in most modern browsers. &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt;&lt;br&gt;&lt;br&gt;üëáCheck out the CodePen below 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:15 PM - 24 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1374696442430951424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1374696442430951424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1374696442430951424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/OJbKrrz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Css-tricks almanac: &lt;a href="https://css-tricks.com/almanac/properties/l/line-clamp/"&gt;https://css-tricks.com/almanac/properties/l/line-clamp/&lt;/a&gt;




&lt;h3&gt;
  &lt;a href="#subscribe-and-follow"&gt;
  &lt;/a&gt;
  Subscribe and Follow
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/channel/UCeyqA3y26RlnfUSx3ufgFoA"&gt;Subscribe to my Youtube channel.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/Vanaf1979"&gt;Follow me on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading/watching and stay safe&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>15 useful VS Code extensions for front-end development</title>
      <author>Duomly</author>
      <pubDate>Mon, 19 Apr 2021 09:55:21 +0000</pubDate>
      <link>https://dev.to/duomly/15-useful-vs-code-extensions-for-front-end-development-keb</link>
      <guid>https://dev.to/duomly/15-useful-vs-code-extensions-for-front-end-development-keb</guid>
      <description>&lt;p&gt;This article was originally published at:&lt;br&gt;
&lt;a href="https://www.blog.duomly.com/13-useful-vs-code-extensions-for-front-end-development/"&gt;https://www.blog.duomly.com/13-useful-vs-code-extensions-for-front-end-development/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since some time Visual Studio Code becomes a very popular IDE for Javascript developers. I started using it two years ago, and in my opinion, it‚Äôs a fantastic code editor. It allows me to customize it just as I want. VS Code also has a build-in git integration and terminal, so you don‚Äôt have to jump from one window to another.&lt;/p&gt;

&lt;p&gt;There are tones of plugins and even themes, where everyone can find something that he or she needs. The proper setup of VSC can improve our productivity; also, there are some plugins that will help developers to create better, clean code.&lt;/p&gt;

&lt;p&gt;Because there are so many plugins that can be used for Visual Studio Code, it‚Äôs easy to get lost and forget about some useful extensions. This is the reason I would like to share with you ma favorite extensions for VSC for front-end development.&lt;/p&gt;

&lt;p&gt;Let's start!&lt;/p&gt;

&lt;p&gt;And if you prefer video, here is the youtube version:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aZkgl2CK2ng"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;1. HTML snippets (Visual Studio Code HTML Snippets)&lt;/h3&gt;

&lt;p&gt;This is an essential extension for every front-end developer. You don‚Äôt have to waste more time writing every HTML tag manually; it‚Äôs enough to put only tag name like div and press enter. Or you can even add a few tags which you would like to be nested like ul&amp;gt;li&amp;gt;a and press enter. What‚Äôs important, this extension has all HTML5 snippets.&lt;br&gt;
&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlsQ4S-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/23ju9a32zmn4d3lfdo0h.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;2. JavaScript (ES6) code snippets&lt;/h3&gt;

&lt;p&gt;In the previous point, you could notice that snippets are handy and can help to prevent lots of spelling bugs and can make coding much faster. Each front-end developer works mostly with JavaScript. To speed up my Javascript coding, I use Javascript code snippets. It also supports .ts, .tsx and .jsx files.&lt;/p&gt;

&lt;p&gt;Here it works similar, for example, to create export default class ClassName {} code it‚Äôs enough to put ecl and press tab. Easy, right? To find out more code shortcuts take a look at the extension documentation.&lt;br&gt;
&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqVOL_dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/s8lyu7uu0v1fb5bo5qjs.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;3. CSS Peek&lt;/h3&gt;

&lt;p&gt;As we have something for HTML and something for Javascript, something for CSS would be useful as well for front-end development. CSS Peek is an extension supporting .html and .js files. It helps to quickly find and check styles applied for selected class or id. It‚Äôs beneficial for developers who don‚Äôt like to switch between different files or split the screen.&lt;br&gt;
&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W1PsQUfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ug1dg857sj7epbvth9no.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;4. Angular/React/Vue&lt;/h3&gt;

&lt;p&gt;If we are in the code snippets area, it would also be good to mention about extensions for the selected framework. A lot depends on which framework you are using.&lt;/p&gt;

&lt;p&gt;‚Äì For Angular, there is an extension called Angular Snippets (Version 8) because currently, we have Angular 8, but Angular has a new release for every version of the framework. It provides us code snippets for Typescript and HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRUXzUhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ucoag2xq0n71n8eblmki.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Äì For React.js, there is an excellent extension ES7 React/Redux/GraphQL/React-Native snippets. It provides code snippets for React and Redux using ES7, and it works in a similar way to JavaScript snippets with a tab button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wdnl5JrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/gj2ndh81bfvuobrs9q9y.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Äì For Vue.js development, there is a great extension called Vetur. It has almost 20mln downloads, and it brings a lot of functionalities like code snippets, linking and errors checking, formatting, debugging or highlighting the syntax. It looks very impressive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtnS0gSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/t9ula6luww3nk5rgvds0.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;5. ESLint&lt;/h3&gt;

&lt;p&gt;If you want to create a friendly, readable, clean code, it‚Äôs a great idea to install ESLint into your VS Code. This will help you to stick to standard practices like indentation, for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2YEJuWWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/l535j29shy2pdrz30pem.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;6. Prettier ‚Äì Code formatter&lt;/h3&gt;

&lt;p&gt;If we talk about pretty code, it‚Äôs worth to install the Prettier extension in your code editor. Prettier is excellent, especially if you are working on the project with other developers. It removes original styling and puts on the consistent code style. Thanks to consistent formatting the code is much more readable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UX7JIA0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/5ass6n9dty5nxijcro7e.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;7. GitLens&lt;/h3&gt;

&lt;p&gt;As I mentioned at the beginning, the Visual Studio Code has a git integration. We can make it even better installing GitLens extension. It allows checking who created each line of code when it was created, and it allows us to go to commit details quickly. It‚Äôs beneficial in case of working in a team of developers to understand the code history easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUD1Zo6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/3xc5cd56l5ppgba3kt7w.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;8. Auto import&lt;/h3&gt;

&lt;p&gt;Auto import is a great extension that automatically imports files; you don‚Äôt have to do it manually anymore. It‚Äôs excellent primarily if you work on a component-based project. It‚Äôs enough to put the component name, and the plugin will import it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6i3qVm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/xgug8nhnl71ghsrmlwqz.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;9. Path autocomplete&lt;/h3&gt;

&lt;p&gt;If we are in the area of imports, there is another great extension that will help you if you need to import something manually or place a link to a different file. Path autocomplete extension provides paths completion. While you start typing your path probably with ./ you will notice a dropdown with folders to select. It‚Äôs crazy helpful because you don‚Äôt have to dig in your files and search the correct path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5PjIO0Li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ulb9ud9jd9lzd89opywc.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;10. Final newline&lt;/h3&gt;

&lt;p&gt;Sometimes you have to remember about adding a new line to your document, and final-newline comes with a helping hand here. Every time you will save the file, it will insert a new line at the end of the document.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2k3Xry_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/p6g7m0jf9n9ujb7arwnf.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;11. Bracket pair colorizer&lt;/h3&gt;

&lt;p&gt;Bracket pair colorizer helps us to find the closing bracket of the current block of code. It sometimes happens that at the end of your file or function, you have more than one or two closing brackets, and it‚Äôs not so easy to find the correct one then. If you are using the Bracket Pair Colorizer plugin, every starting and closing bracket has the same color for one block of code. So if your opening tag is blue, your closing tag will be blue as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXVY0Z8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac1skwau6sw0vksknkar.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;12. Indenticator&lt;/h3&gt;

&lt;p&gt;Indeticator is an extension for VS Code which visually highlights current intend depth. It allows distinguishing easily different levels of a different block of codes. Depth is marked with small dots and lines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNUPqhcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/x6kx0kd6lzclcc61ssnt.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;13. Debugger for Chrome&lt;/h3&gt;

&lt;p&gt;And at the end an excellent plugin for debugging. Wouldn‚Äôt it be perfect if we could debug in the console like in the Chrome browser? It‚Äôs possible with Debugger for Chrome plugin; it supports setting breakpoints, stepping, debugging evil scripts, and more. If you are tired of switching from files in the code editor to debugging console in the browser, it‚Äôs a great plugin for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ife7Mfk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/vlols0v6ii13b91j4bip.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;14. Import cost &lt;/h3&gt;

&lt;p&gt;That's a great extension that will let you control your js bundle size, and it's especially helpful when you plan to split your code into small chunks.&lt;br&gt;
Some of the libraries you import can weigh a lot, sometimes, one library can be heavier than the whole framework, and you need to be aware of that.&lt;br&gt;
Import cost extension will show you the library's exact size, full-size, and the gzipped one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Udl7CgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojwr5dlvz34178eckgvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Udl7CgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojwr5dlvz34178eckgvb.png" alt="Import cost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;15. Sort imports&lt;/h3&gt;

&lt;p&gt;Clean code is one of the most important factors that you should care about when building software. And how you manage imports will have a huge impact on your code quality.&lt;/p&gt;

&lt;p&gt;Luckily we can use a very helpful extension named Sort Imports, which manages your imports simply and correctly.&lt;br&gt;
That extension will sort all of your imports in order and put all of them on the top of the file. &lt;br&gt;
What's better, that extension will group all of your imports as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NDfgj_5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6nb5qdrse3yasmoy8om.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NDfgj_5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6nb5qdrse3yasmoy8om.png" alt="Sort Imports"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In the above article, I shared with you my favorite extensions for Visual Studio Code. I hope you it‚Äôs a great tip on how to set your code editor and improve your performance of your development. Also, if you are a beginner, it may help you to focus on learning programming then on looking for a closing tag, or closing bracket.&lt;/p&gt;

&lt;p&gt;Have a nice coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.duomly.com"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6ruZJWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/o2lhidb1od45dug8kb4z.png" alt="Duomly - programming online courses"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Where am I at concerning web development? The catharsis of a lifelong search of my passion</title>
      <author>Damian Demasi</author>
      <pubDate>Mon, 19 Apr 2021 09:53:55 +0000</pubDate>
      <link>https://dev.to/darthcolo/where-am-i-at-concerning-web-development-the-catharsis-of-a-lifelong-search-of-my-passion-21j3</link>
      <guid>https://dev.to/darthcolo/where-am-i-at-concerning-web-development-the-catharsis-of-a-lifelong-search-of-my-passion-21j3</guid>
      <description>&lt;p&gt;I started my travels through the world of programming when I was a late teenager, and dial-up Internet was a very uncommon thing to find in homes of Argentina. I still remember the excitement of having bought a 10 meters long telephone cable to connect my PC with the telephone line socket in the next room wall. I had to use the Internet late at night when no one was using the telephone, so the connection won't break. I still remember the spikes of excitement when the PC internal speaker tried to make sense of the electrons coming in and out of the modem while the dial-up connection was being established. That is where I started.&lt;/p&gt;

&lt;p&gt;In those days I used a lot an IRC program to chat with friends and strangers from all over the world. I used to customize the mIRC app to make it flashier and automate some common tasks, such as greetings and jokes to insert in the chat rooms.&lt;/p&gt;

&lt;p&gt;Then I started playing with Linux and bought a book that came with several 3.5‚Äù floppy disks with the Slackware flavour of Linux. After a couple of days, and after several re-formatting sessions, I managed to make it work on my PC. I learned the basics of the command line, user administration, how to create files and change their permissions, and how to make some simple shell scripts to automate stuff. I wanted to become a hacker, after watching Hackers, the movie, that came out in 1995, starred by Angelina Jolie and some other guys.&lt;/p&gt;

&lt;p&gt;Fast forward a couple of years, I continued with my hobby of tweaking things on my computer and started to build my first websites. They were a combination of animated GIFs of skulls with fire and blinking simulated LEDs, offering files and tools for ‚Äúhackers‚Äù and computer-related information (I was an innocent teenager who didn‚Äôt know back then the amount of work that becoming an actual hacker means).&lt;/p&gt;

&lt;p&gt;After building the first websites, my interest in web development started growing, so I started a Computer Science degree at university. The amount of mathematics thought on the course was unbelievable. I particularly liked subjects like Logic and Algorithms. Unfortunately, I was too shy to make myself part of a study group, and I fell behind. I ended up dropping out by the end of the year, and I switched to Telecommunications Engineering, a degree that I thought was still related to the Internet and how people can communicate despite being in different parts of the world. Plus, I had more friends already taking that degree (I always struggled with the social aspects of human life).&lt;/p&gt;

&lt;p&gt;During the following years, I experienced a love-hate relationship with my telecommunications degree, and maybe because of that, it took me too much time to finish it. In the meanwhile, I started working on some small freelance projects involving web development. I managed to build a very simple commercial website based on HTML, CSS, and PHP for a family member. I didn‚Äôt know PHP before starting the project, but back then I knew that it was one of the best ways to connect the website with a database, so I bought a PHP book and thought myself how to do it. It worked! Following that project, I grab some more, with the help of my father, who was in charge of getting customers.&lt;/p&gt;

&lt;p&gt;As I was falling behind in my studies, I decided to commit 100% to my degree, and I stopped developing websites for several years. Every now and then I managed to make timid attempts to start developing websites, but they were mostly vanilla implementations of Joomla, Drupal, or other CMS in vogue back then.&lt;/p&gt;

&lt;p&gt;After I finished university, I started working in the IT industry. Life pushed me to work in technical support roles, and as an application manager for a big mobile telecommunications company. Fortunately, I had several opportunities to develop my scripting skills further, know different technologies, such as HP-UX, Unix, Linux, Perl, Bash, an HP flavoured Java language, automation, networking, SNMP, etc. The days I stopped disliking my job were the days I spend coding and trying to automate difficult and time-consuming tasks. Programming was calling me again.&lt;/p&gt;

&lt;p&gt;Fast forward to a couple of years back from now, my wife and I used all our life savings to move to Australia. I decided to study for an MBA here, gain work experience, and, with much effort and a bit of luck, a citizenship in the future. New continent, new language, new culture, new challenges (like driving on the other side of the road!). I started looking for jobs, any job and printed dozens of resumes that I took door to door to bars and restaurants to work as a barista, or something similar. We needed money desperately, and I was fortunate in landing a job as a research assistant in a university. That was my opportunity to interact with Australians and immigrants alike, due to the nature of the project, and I even contributed with some Excel automation on the data analysis.&lt;/p&gt;

&lt;p&gt;After a year working at that university, I landed another job in a technology company implementing the SNMP stack in a microcontroller running Linux. The original idea didn‚Äôt work due to hardware constraints, so they proposed to me to make it from scratch in C. What? After managing my boss‚Äô expectations (I‚Äôll do my best, but there is no warranty that I can pull it off), I started researching how to do it. I followed a bunch of online tutorials about C and started coding the project. It was hard. Really hard. But I enjoy it. As Mark Manson asks in his best-selling book The Subtle Art of Not Giving a F*ck: &lt;strong&gt;‚ÄúWhat‚Äôs Your Favourite Flavour of Sh*t Sandwich?‚Äù&lt;/strong&gt; Mine is this, cooking my brain with programming related problems. That is the struggle I learned to love. That allowed me to enjoy the moment of fixing a bug at the end of the day and finishing the workday with a smile, only to be invaded by anxiety at the next day once again.&lt;/p&gt;

&lt;p&gt;During my 40 years of life, programming has been a common thread throughout it, but I feel I have never managed to achieve a professional level in it. It‚Äôs like a lover that is being constantly separated from me by life events. And here we are again; we meet once more. But this time is different. This time I control who I want to be, no matter what.&lt;/p&gt;

&lt;p&gt;My current project ends in two days and I will be out of a job by Wednesday. I don‚Äôt want to experience this any more in my life. I want (I need) to stop being a programming amateur and become a professional, so I can finally work on my passion and not being afraid of losing a job anymore.&lt;/p&gt;

&lt;p&gt;This time, I will fulfil my long-awaited desire of becoming a developer. This new chapter in my life starts today.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by Ian Schneider on Unsplash&lt;/em&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>webdev</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Solution: Combination Sum IV</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 19 Apr 2021 09:49:27 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-combination-sum-iv-3620</link>
      <guid>https://dev.to/seanpgallivan/solution-combination-sum-iv-3620</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/combination-sum-iv/discuss/1166231"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-377-medium-combination-sum-iv"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/combination-sum-iv/"&gt;Leetcode Problem #377 (&lt;em&gt;Medium&lt;/em&gt;): Combination Sum IV&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array of &lt;strong&gt;distinct&lt;/strong&gt; integers &lt;code&gt;nums&lt;/code&gt; and a target integer &lt;code&gt;target&lt;/code&gt;, return the number of possible combinations that add up to &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The answer is &lt;strong&gt;guaranteed&lt;/strong&gt; to fit in a &lt;strong&gt;32-bit&lt;/strong&gt; integer.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [1,2,3], target = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The possible combination ways are:&lt;br&gt;(1, 1, 1, 1)&lt;br&gt;(1, 1, 2)&lt;br&gt;(1, 2, 1)&lt;br&gt;(1, 3)&lt;br&gt;(2, 1, 1)&lt;br&gt;(2, 2)&lt;br&gt;(3, 1)&lt;br&gt;Note that different sequences are counted as different combinations.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [9], target = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums[i] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All the elements of &lt;code&gt;nums&lt;/code&gt; are unique.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;With this problem, we can easily imagine breaking up the solution into smaller pieces that we can use as stepping stones towards the overall answer. For example, if we're searching for a way to get from &lt;strong&gt;0&lt;/strong&gt; to our target number (&lt;strong&gt;T&lt;/strong&gt;), and if &lt;strong&gt;0 &amp;lt; x &amp;lt; y &amp;lt; T&lt;/strong&gt;, then we can see that finding out how many ways we can get from &lt;strong&gt;y&lt;/strong&gt; to &lt;strong&gt;T&lt;/strong&gt; will help us figure out how many ways we can get from &lt;strong&gt;x&lt;/strong&gt; to &lt;strong&gt;T&lt;/strong&gt;, all the way down to &lt;strong&gt;0&lt;/strong&gt; to &lt;strong&gt;T&lt;/strong&gt;. This is a classic example of a &lt;strong&gt;top-down&lt;/strong&gt; (&lt;strong&gt;memoization&lt;/strong&gt;) &lt;strong&gt;dyanamic programming&lt;/strong&gt; (DP) solution.&lt;/p&gt;

&lt;p&gt;Of course, the reverse is also true, and we could instead choose to use a &lt;strong&gt;bottom-up&lt;/strong&gt; (&lt;strong&gt;tabulation&lt;/strong&gt;) DP solution with the same result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Top-Down DP Approach&lt;/em&gt;&lt;/strong&gt;: Our DP array (&lt;strong&gt;dp&lt;/strong&gt;) will contain cells (&lt;strong&gt;dp[i]&lt;/strong&gt;) where &lt;strong&gt;i&lt;/strong&gt; will represent the remaining space left before &lt;strong&gt;T&lt;/strong&gt; and &lt;strong&gt;dp[i]&lt;/strong&gt; will represent the number of ways the solution (&lt;strong&gt;dp[T]&lt;/strong&gt;) can be reached from &lt;strong&gt;i&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At each value of &lt;strong&gt;i&lt;/strong&gt; as we build out &lt;strong&gt;dp&lt;/strong&gt; we'll iterate through the different &lt;strong&gt;num&lt;/strong&gt;s in our number array (&lt;strong&gt;N&lt;/strong&gt;) and consider the cell that can be reached with each &lt;strong&gt;num&lt;/strong&gt; (&lt;strong&gt;dp[i-num]&lt;/strong&gt;). The value of &lt;strong&gt;dp[i]&lt;/strong&gt; will therefore be the sum of the results of each of those possible moves.&lt;/p&gt;

&lt;p&gt;We'll need to seed &lt;strong&gt;dp[0]&lt;/strong&gt; with a value of &lt;strong&gt;1&lt;/strong&gt; to represent the value of the completed combination, then once the iteration is complete, we can &lt;strong&gt;return dp[T]&lt;/strong&gt; as our final answer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bottom-Up DP Approach&lt;/em&gt;&lt;/strong&gt;: Our DP array (&lt;strong&gt;dp&lt;/strong&gt;) will contain cells (&lt;strong&gt;dp[i]&lt;/strong&gt;) where &lt;strong&gt;i&lt;/strong&gt; will represent the current count as we head towards &lt;strong&gt;T&lt;/strong&gt; and &lt;strong&gt;dp[i]&lt;/strong&gt; will represent the number of ways we can reach &lt;strong&gt;i&lt;/strong&gt; from the starting point (&lt;strong&gt;dp[0]&lt;/strong&gt;). This means that &lt;strong&gt;dp[T]&lt;/strong&gt; will represent our final solution.&lt;/p&gt;

&lt;p&gt;At each value of &lt;strong&gt;i&lt;/strong&gt; as we build out &lt;strong&gt;dp&lt;/strong&gt; we'll iterate through the different &lt;strong&gt;num&lt;/strong&gt;s in our number array (&lt;strong&gt;N&lt;/strong&gt;) and update the value of the cell that can be reached with each num (&lt;strong&gt;dp[i+num]&lt;/strong&gt;) by adding the result of the current cell (&lt;strong&gt;dp[i]&lt;/strong&gt;). If the current cell has no value, then we can &lt;strong&gt;continue&lt;/strong&gt; without needing to iterate through &lt;strong&gt;N&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We'll need to seed &lt;strong&gt;dp[0]&lt;/strong&gt; with a value of &lt;strong&gt;1&lt;/strong&gt; to represent the value of the common starting point, then once the iteration is complete, we can &lt;strong&gt;return dp[T]&lt;/strong&gt; as our final answer.&lt;/p&gt;

&lt;p&gt;In both the top-down and bottom-up DP solutions, the &lt;strong&gt;time complexity&lt;/strong&gt; is &lt;strong&gt;O(N * T)&lt;/strong&gt; and the &lt;strong&gt;space complexity&lt;/strong&gt; is &lt;strong&gt;O(T)&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;For C++ we'll have to make sure to use unsigned ints in our &lt;strong&gt;dp&lt;/strong&gt; vector, otherwise we'll get int overflow errors.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-topdown-dp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Top-Down DP:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;combinationSum4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-bottomup-dp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Bottom-Up DP:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;combinationSum4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-topdown-dp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Top-Down DP:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;combinationSum4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-bottomup-dp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Bottom-Up DP:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;combinationSum4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-topdown-dp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Top-Down DP:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;combinationSum4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-bottomup-dp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Bottom-Up DP:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;combinationSum4&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-topdown-dp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Top-Down DP:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;combinationSum4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-bottomup-dp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Bottom-Up DP:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;combinationSum4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Admin Dashboard With Database - Free Projects to start fast</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 19 Apr 2021 09:48:22 +0000</pubDate>
      <link>https://dev.to/sm0ke/admin-dashboard-with-database-free-project-to-start-fast-25g5</link>
      <guid>https://dev.to/sm0ke/admin-dashboard-with-database-free-project-to-start-fast-25g5</guid>
      <description>&lt;p&gt;Hello Coders,&lt;br&gt;
This article presents a curated list with &lt;strong&gt;admin dashboards with database&lt;/strong&gt; that can be used in development right after the download. Usually, admin dashboards are provided by vendors as templates, without any functionalities, database, or authentication flow. Well, the products listed on this page come at least with a database and other useful things on top: authentication, charts, user profile pages etc. Most of the dashboards are open-source, released under permissive licenses (MIT, LGPL) on Github.&lt;/p&gt;

&lt;p&gt;Thank you! &lt;strong&gt;Content provided by &lt;a href="https://appseed.us"&gt;AppSeed - App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;(Free) &lt;a href="https://github.com/app-generator/django-argon-charts"&gt;Django Argon Charts&lt;/a&gt; - shows nice charts using Django&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://github.com/app-generator/flask-database-sample"&gt;Flask Database Sample&lt;/a&gt; - Bootstrap 5 Design coded in Flask&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://github.com/app-generator/django-datatables-sample"&gt;Django Data Tables&lt;/a&gt; - implements data pagination in Django&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://github.com/app-generator/django-user-profile"&gt;Django User Profile&lt;/a&gt; - registered users can edit their profile&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="http://bit.ly/3rLfKbq"&gt;React Nodejs Dashboard&lt;/a&gt; - Full-stack dashboard with a React UI&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To use a database in a dashboard project we need a functional backend that manages the SQL part and translates the SQL responses to HTML, the format expected by the browsers. Dashboard Templates usually provide only the HTML pages without functional features like login, registration, or other flows (render charts, edit user information) .. etc.&lt;/p&gt;

&lt;p&gt;Samples presented in this article use technologies and frameworks like Flask, Django and NodeJS to render and manage the database information: emails, passwords, charts, user profile information. This information (backend technology and database type) is mentioned for each product.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#django-charts-argon"&gt;
  &lt;/a&gt;
  Django Charts Argon
&lt;/h2&gt;

&lt;p&gt;This open-source dashboard comes with an SQLite database and functional code that showcases different metrics regarding the sales for a 12 months timeframe: total sales, total orders, best sale, and best month (in sales value). &lt;br&gt;
The information is imported from an external file (csv/xls format) and the authenticated users are able to add new records and even edit existing values. The charts are updated once the new information is saved.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Framework and Database: Django/Sqlite &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://django-argon-charts.appseed-srv1.com/"&gt;Django Charts Argon&lt;/a&gt; ‚Äì LIVE demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/django-argon-charts"&gt;Django Charts Argon&lt;/a&gt;  ‚Äì Source Code (MIT License)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/3si4e7q"&gt;Argon Dashboard Django&lt;/a&gt; ‚Äì the original starter (free product)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4qAwLmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/samples/django-argon-charts-import-data.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4qAwLmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/samples/django-argon-charts-import-data.gif" alt="Admin Dashboard With Database - Django Charts Argon provided by Creative-Tim."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#django-data-tables"&gt;
  &lt;/a&gt;
  Django Data Tables
&lt;/h2&gt;

&lt;p&gt;Simple Django project that uses an SQLite database to manage the information using a paginated layout: data tables. Users can inspect the data with ease and each record can be edited in-place using Ajax - &lt;strong&gt;Project features &amp;amp; links&lt;/strong&gt;:&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Framework and Database: Django/Sqlite&lt;/li&gt;
&lt;li&gt;Load sample data using the admin section&lt;/li&gt;
&lt;li&gt;Inline rows edit activated at double click&lt;/li&gt;
&lt;li&gt;Pagination and Search&lt;/li&gt;
&lt;li&gt;Links: &lt;a href="https://django-datatables-sample.appseed.us/"&gt;LIVE Demo&lt;/a&gt;, &lt;a href="https://github.com/app-generator/django-datatables-sample"&gt;Sources&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The original project: &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Volt Django Dashboard&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJVYmm8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/django-datatables-sample/master/media/django-datatables-sample-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJVYmm8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/django-datatables-sample/master/media/django-datatables-sample-intro.gif" alt="Admin Dashboard With Database - Django Data Tables provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#django-user-profile"&gt;
  &lt;/a&gt;
  &lt;a href="https://themesberg.com/blog/django/user-profile-tutorial"&gt;Django User Profile&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Django Sample project that allows registered users to edit their profile outside of the admin module. &lt;strong&gt;&lt;a href="https://themesberg.com/blog/django/user-profile-tutorial"&gt;Django User Profile&lt;/a&gt;&lt;/strong&gt; is provided on top of Django Volt, a popular open-source &lt;strong&gt;&lt;a href="https://themesberg.com/templates/django"&gt;Django Template&lt;/a&gt;&lt;/strong&gt; provided by Themesberg and AppSeed. For newcomers, Django is the most popular Python-based web framework initially released in 2003 and currently a reference framework in web development - &lt;strong&gt;Project features &amp;amp; links&lt;/strong&gt;:&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Framework and Database: Django/Sqlite&lt;/li&gt;
&lt;li&gt;Editable user profile: Name, Surname, Email, Phone, and address&lt;/li&gt;
&lt;li&gt;User Profile Page: &lt;code&gt;settings.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Links: &lt;a href="https://django-user-profile.appseed-srv1.com/"&gt;LIVE Demo&lt;/a&gt;, and &lt;a href="https://github.com/app-generator/django-user-profile"&gt;Source Code&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBr_HyI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/007dthkaoc8ti6bd2ror.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBr_HyI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/007dthkaoc8ti6bd2ror.png" alt="Admin Dashboard With Database - Django User Profile provided by Themesberg"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nodejs-argon-dashboard-react"&gt;
  &lt;/a&gt;
  &lt;a href="http://bit.ly/3rLfKbq"&gt;Nodejs Argon Dashboard React&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This database comes with a Mongo Database and the backend this time is NodeJS. The sample is production-ready and requires Nodejs and Javascript knowledge to use - &lt;strong&gt;Project features &amp;amp; links&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MERN Stack: Mongo Database, Express/NodeJS Backend and React (UI)&lt;/li&gt;
&lt;li&gt;Authentication: Login, Register, Forgot Password&lt;/li&gt;
&lt;li&gt;User Management: Update User Information, List Registered Users
&lt;/li&gt;
&lt;li&gt;Links: &lt;a href="http://bit.ly/3rLfKbq"&gt;Product Page&lt;/a&gt;, &lt;a href="https://github.com/creativetimofficial/argon-dashboard-react-nodejs"&gt;Source Code&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkREW9WS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16scb8f0k5470ebhjkyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkREW9WS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16scb8f0k5470ebhjkyq.png" alt="Admin Dashboard With Database - Nodejs/React open-source sample. "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-database-sample"&gt;
  &lt;/a&gt;
  Flask Database Sample
&lt;/h2&gt;

&lt;p&gt;This admin dashboard comes with a simple SQLite database managed by Flask, a popular Python-based framework. The source code (published on Github) comes with a comprehensive README that explains the necessary setup to use the project.  The sample explains step by step how to configure a Flask project to use an SQLite database via SQLAchemy, a popular SQL library for Python.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-database-sample"&gt;Flask Database Sample&lt;/a&gt; - project source code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-atlantis-dark"&gt;Atlantis Lite Flask&lt;/a&gt; - the same starter with more modules&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-Frto4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpyc80v85tarzgaib97e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-Frto4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpyc80v85tarzgaib97e.png" alt="Admin Dashboard With Database - Flask Database Sample provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - Open-source and free (curated list)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Admin Dashboards&lt;/a&gt; - provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>dashboards</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
