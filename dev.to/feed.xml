<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Android CodeView the easiest way to highlight text</title>
      <author>Amr Hesham</author>
      <pubDate>Tue, 18 May 2021 22:41:20 +0000</pubDate>
      <link>https://dev.to/amrdeveloper/android-codeview-the-easiest-way-to-highlight-text-3hbf</link>
      <guid>https://dev.to/amrdeveloper/android-codeview-the-easiest-way-to-highlight-text-3hbf</guid>
      <description>&lt;p&gt;Hi, I am Amr Hesham a Software Engineer, I am interested in Android and Compiler Development,&lt;/p&gt;

&lt;p&gt;In my first article, I wrote about how to use the CodeView library to create a syntax highlighter for programming languages with many extra features like autocomplete, change theme and syntax in the runtime,&lt;/p&gt;

&lt;p&gt;The first idea is to use it in Content sharing applications so for example like Twitter you can highlight hashtags, website URLs and you can also highlight emails, this feature can easily be done using CodeView in just 3 lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#[a-zA-z0-9]+"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Patterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WEB_URL&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Patterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EMAIL_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also add autocomplete for email providers like @gmail.com or @yahoo.com and the final result will be like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXylNI1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qyc64io4hyie8b166px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXylNI1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qyc64io4hyie8b166px.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second idea is to use CodeView with a searching feature to highlight all matched keyword in the content and you can easily highlight without&lt;br&gt;
searching in the positions in all content and add for example some HTML tags or Spans to highlight one word each time the user search for it,&lt;br&gt;
and this feature can easily be done using few methods.&lt;/p&gt;

&lt;p&gt;first, you need to create a Pattern for your search keyword, it can be a normal string or you can enable the user to search with regex, not just string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;keywordPattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Kotlin will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;keywordPattern&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to add this pattern to CodeView with the color you want to highlight with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keywordPattern&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to tell CodeView to highlight the new patterns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reHighlightSyntax&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;once the user changes the search keyword you just need to replace the old pattern with a new one and there are 2 ways to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keywordPattern&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or you can remove all the patterns from CodeView&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resetSyntaxPatternList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to add the new pattern and highlight&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newkeywordPattern&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reHighlightSyntax&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you have done, the final result will be like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VsYy35T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0a85kevxrmkgkata9zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VsYy35T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0a85kevxrmkgkata9zj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in your mind that CodeView has many features and you can use it in many different ideas I just give you 2 examples but here is more and more.&lt;/p&gt;

&lt;p&gt;you can use it in languages apps for example English app and with an error highlighter, you can highlight spell mistake words, or create a note app with English words on autocomplete …etc.&lt;/p&gt;

&lt;p&gt;all you need is to use your imagination and creativity to create great features with CodeView.&lt;/p&gt;

&lt;p&gt;It’s very easy to use, well documented, has many examples on Github you can know how to download and use from the Github link:&lt;br&gt;
&lt;a href="https://github.com/amrdeveloper/codeview"&gt;https://github.com/amrdeveloper/codeview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and I hope you will enjoy creating your editor with CodeView 😋.&lt;/p&gt;

&lt;p&gt;Enjoy Programming 😋.&lt;/p&gt;

</description>
      <category>android</category>
      <category>codeview</category>
      <category>java</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>React vs Vue - Beginners Guide</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 18 May 2021 22:30:20 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/react-vs-vue-beginners-guide-4539</link>
      <guid>https://dev.to/ubahthebuilder/react-vs-vue-beginners-guide-4539</guid>
      <description>&lt;p&gt;React js and Vue js are arguably two of the most popular and widely used JavaScript frameworks (or libraries) today. &lt;strong&gt;But how do they compare to each other?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is a simple minimalistic framework (or library, whatever) used in building simple and reusable UI Components like buttons, forms, navbars and so on.&lt;/p&gt;

&lt;p&gt;You can make two or more similar UI elements which share the same properties and functionalities in a modular approach.&lt;/p&gt;

&lt;p&gt;React is currently used on the websites of many companies including popular companies like Facebook (it's creator), AirBnB and Uber and Netflix.&lt;/p&gt;

&lt;p&gt;Vue js is very similar to React in some ways. It is a framework used in  creating standalone and modular UI elements. It also utilizes the virtual DOM for rendering it's components to the real DOM.&lt;/p&gt;

&lt;p&gt;Though not as popular as React, Vue is also used by some big-shot corporations like Google (yep 😄), Nintendo, Behance and Apple.&lt;/p&gt;

&lt;p&gt;The main difference between both tools lie in their syntax, and that is what we'll be dissecting for the remainder of this article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-components-with-react"&gt;
  &lt;/a&gt;
  CREATING COMPONENTS WITH REACT
&lt;/h3&gt;

&lt;p&gt;When creating a UI component with React, here's some key points to note about it's syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Components in React are ussually defined as &lt;strong&gt;classes.&lt;/strong&gt; If you're coming from an ES6 background, this shouldn't be new to you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A XML-like Syntax called &lt;strong&gt;JSX&lt;/strong&gt; or &lt;strong&gt;JavaScript Extension&lt;/strong&gt; can be used to define the view of that Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Components can also be defined using a functional approach. These Component are called &lt;strong&gt;Functional Components.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class based Components can hold local properties (&lt;strong&gt;state&lt;/strong&gt;), Functional Components &lt;strong&gt;can't.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While state can be defined locally in a class Component, props can only be passed from the context of a parent element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use an external state manager like &lt;strong&gt;Redux&lt;/strong&gt; or define the state locally as you'll see in the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can define methods in a component class and call the method in the view of that component&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a typical syntax for defining a class-based button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicked!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;btnLabel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to it's minimalistic architecture, React ships well and is frequently used with other libraries like Redux (state manager), GraphQL (API development) and React-Router (Routing implementation) to build full-fledged websites.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-hooks"&gt;
  &lt;/a&gt;
  React Hooks
&lt;/h4&gt;

&lt;p&gt;ES6 classes are not the only way you can create Components that works with some local state in React. &lt;/p&gt;

&lt;p&gt;React provides some special Functions (*&lt;em&gt;hooks&lt;/em&gt;") which can be used to manage state data.&lt;/p&gt;

&lt;p&gt;Here's the same button component created with React Hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBtnLabel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setBtnLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicked!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Relative to ES6 React, here's some things to note about this code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The argument passed to &lt;strong&gt;useState&lt;/strong&gt; hook function is simply the &lt;strong&gt;initial state&lt;/strong&gt;. Just as you would define it in the constructor of a class Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two piece of data is obtained from the useState hook (via array Destructuring)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first is the actual state data and the second is the state updater function (synonymous to setState())&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: To learn about Array Destructuring and other ES6 Syntax, I'll highly recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React by Sleepless Yogi&lt;/a&gt; . You even get to learn React too! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;In the view, an event (click, in our case) would trigger setBtnLabel hook to run and the argument passed will become the new state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So in a nutshell, hooks allow you create stateful React Components without using an ES6 Class.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-components-with-vue"&gt;
  &lt;/a&gt;
  CREATING COMPONENTS WITH VUE
&lt;/h3&gt;

&lt;p&gt;Unlike React js, Classes are not used to create Components in Vue. &lt;/p&gt;

&lt;p&gt;Each Vue component (which ends with a .vue extension) typically has three osections in it.&lt;/p&gt;

&lt;p&gt;The first section is the &lt;em&gt;template&lt;/em&gt; area which is for the template or view of that component. As expected, you define what elements you want this Component to render in the DOM.&lt;/p&gt;

&lt;p&gt;The second section is the &lt;em&gt;script&lt;/em&gt; section which holds the scripting and logic for that component. This includes any method you want to call from the view.&lt;/p&gt;

&lt;p&gt;The third section is the &lt;em&gt;style&lt;/em&gt; section which holds the styling and layout design (CSS, duh) of that Component.&lt;/p&gt;

&lt;p&gt;Like React, you can use an external state manager like &lt;strong&gt;Vuex&lt;/strong&gt; or define and manage  the state locally in the Component.&lt;/p&gt;

&lt;p&gt;The Async keyword is used in defining any method which will run asynchronously for example fetching data from an API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Again, like in React, properties passed from the context of a parent is called props while local properties is called state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The state of a Component is returned in the data method of that component, defined in the &lt;em&gt;script&lt;/em&gt; section.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to pass dynamic data to a Vue component, or attach some logic before some data renders, or maybe loop through data, you use a Vue directive. Examples are v-of, v-for, v-bind. There are many other directives for different tasks.&lt;/p&gt;

&lt;p&gt;Here is a typical code for defining a button component with Vue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have you noticed the similarlity between the Vue button component and the React button component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's why I love these two so much&lt;/strong&gt; 😍&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: Having strong knowledge of JavaScript (especially ES6) is great. Check out  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;React and Vue are immensely popular and they show no signs of slowing down. &lt;/p&gt;

&lt;p&gt;If you are an aspiring web developer looking for something to learn, you should really consider those two.&lt;/p&gt;

&lt;p&gt;If you benefitted from this article, you can support me 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Promise based Dialog in Vue 2</title>
      <author>Adam Kalinowski</author>
      <pubDate>Tue, 18 May 2021 20:30:40 +0000</pubDate>
      <link>https://dev.to/hardyng/promise-based-dialog-in-vue-2-22e3</link>
      <guid>https://dev.to/hardyng/promise-based-dialog-in-vue-2-22e3</guid>
      <description>&lt;p&gt;Dialogs visually exist "outside" application, and because of it, never really felt right for me to include them in places where they don't belong to. HTML regarding Dialogs is often placed in the root of the application or in the components where they are called from, and then, usually by portals, transferred to the top. Logic, which is controlling which dialog should pop up and when, is also, either in store or component, or maybe have its own service. Sometimes logic meant to control dialogs is lacking in features, and then, oops, we cannot open dialog &lt;em&gt;inside&lt;/em&gt; another dialog. Too bad if we need it.&lt;/p&gt;

&lt;p&gt;I feel like we can solve all the issues with simply handling dialogs as a function. We want dialog? Let's call it, and as a parameter put the component we want to display. We can wrap it in a promise, so we know exactly when the dialog is closed and with what result, and then make some calls based on that.&lt;/p&gt;

&lt;p&gt;To visualize how I imagine working with that I made snippet below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;openDialog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ConfirmDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The benefit of doing all the logic regarding dialogs by ourselves is that we have full control over this, we can add new features based on our needs, and make our dialogs look however we want. So, let's build it.&lt;/p&gt;

&lt;p&gt;First, we need to create Dialog Wrapper component. Its purpose is to provide basic styles and some logic for closing the dialog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dialog-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dialog-mask"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"$emit('close')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;component&lt;/span&gt; &lt;span class="na"&gt;:is=&lt;/span&gt;&lt;span class="s"&gt;"dialogComponent"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;close=&lt;/span&gt;&lt;span class="s"&gt;"response =&amp;gt; $emit('close', response)"&lt;/span&gt;
               &lt;span class="na"&gt;v-bind=&lt;/span&gt;&lt;span class="s"&gt;"props"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DialogWrapper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dialogComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;props&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.dialog-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dialog-mask&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can change styles so it fits you. You can also add additional logic, we can add animations and other features, but I wanted to keep it simple. You will be getting two props, &lt;code&gt;dialogComponent&lt;/code&gt; and &lt;code&gt;props&lt;/code&gt; (confusing, I know).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dialogComponent is Vue component which will be rendered inside&lt;/li&gt;
&lt;li&gt;props are props passed to &lt;code&gt;dialogComponent&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You close dialog by emitting event &lt;em&gt;close&lt;/em&gt;, and if you want to pass a value which will be used when resolving a promise - you pass data with the event, e.g. &lt;code&gt;$emit('close', 'success!')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let's make a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;openDialog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dialogComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogWrapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;propsData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dialogComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// optional, instance of vue router&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// optional, instance of vuex store&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;$mount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will create a new Vue instance and append it to &lt;code&gt;document.body&lt;/code&gt;. It will use &lt;code&gt;DialogWrapper&lt;/code&gt; as main component, and will pass function parameters as props by using &lt;code&gt;propsData&lt;/code&gt; property. It will also listen for &lt;code&gt;close&lt;/code&gt; event to know where to destroy itself.&lt;/p&gt;

&lt;p&gt;It's important to add &lt;code&gt;router&lt;/code&gt; and &lt;code&gt;store&lt;/code&gt; property when initializing component, if you're using it, because otherwise your components will have no access to &lt;code&gt;$store&lt;/code&gt; and &lt;code&gt;$router&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we have our dialog function working, but I cut a lot of code I'm using for conveniance of this article, and leave only the core logic. It's good idea to create another component - let's call it &lt;code&gt;DialogLayout&lt;/code&gt;, which will create actual white box with some padding. You can, if you want, put some more effort in that; for example, adding dialog title or close button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dialog-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.dialog-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can move into testing part of the article.&lt;/p&gt;

&lt;p&gt;Let's create example component which we will later pass as a &lt;code&gt;openDialog&lt;/code&gt; parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;DialogLayout&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"$emit('close', 'wow! success')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Close dialog&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/DialogLayout&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has button which will close the dialog with resolved value &lt;code&gt;'wow! success&lt;/code&gt;. It also uses &lt;code&gt;DialogLayout&lt;/code&gt; for some basic styling.&lt;/p&gt;

&lt;p&gt;Somewhere in our application we can call our function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onBtnClick&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;openDialog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogExample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// dialog is now closed&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 'wow! success'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although it requires some initial configuration, payback is huge. I'm using it for years now and it fits my needs perfectly. It's also easy to extend with additional features.&lt;/p&gt;

&lt;p&gt;It's important to note, that this dialog will not be animated. Animation can be added quite easily, but it's beyond scope of this article.&lt;/p&gt;

&lt;p&gt;Thanks a lot for reading, and in case of any questions, please write comment or send me an email - &lt;a href="mailto:iam.adam.kalinowski@gmail.com"&gt;iam.adam.kalinowski@gmail.com&lt;/a&gt;. Have a nice day!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 raisons pourquoi j'aimes Laravel !</title>
      <author> </author>
      <pubDate>Tue, 18 May 2021 20:13:19 +0000</pubDate>
      <link>https://dev.to/ericcodeur/10-raisons-pourquoi-j-aimes-laravel-cc3</link>
      <guid>https://dev.to/ericcodeur/10-raisons-pourquoi-j-aimes-laravel-cc3</guid>
      <description>&lt;p&gt;Au cours des deux dernières années, j'ai essayé plusieurs langages et frameworks de programmation. J'ai réalisé des projets avec Django, Laravel, Ruby on Rails et Node.js avec Express.js&lt;/p&gt;

&lt;p&gt;J'ai adoré tout ces frameworks. Ils sont tous matures et font tous le travail. En revanche, l'un de ces framework m'a séduit un peu plus que les autres ... Laravel.&lt;/p&gt;

&lt;p&gt;Voici les 10 raisons pour lesquelles je crois sincèrement que Laravel est génial!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;PHP est génial! Oui. Ceux qui prétendent le contraire sont, désolés de le dire, ignorants. Ils ignorent que PHP 3.0 est obsolète depuis longtemps et que PHP 8 est désormais un langage POO complet, relativement rapide, mature, stable et très agréable à utiliser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Le framework Laravel est précisément construit en POO avec les derniers standards PHP. La syntaxe de Laravel est simple, claire et élégante.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avec Laravel, il n'y a presque pas de code standard à écrire. Comparé à plusieurs autres frameworks, Laravel est livré avec une configuration de démarrage complète. Grâce aux librairies de Laravel, développer une application web c'est simple et ultra rapide!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Il existe une panoplie de packages tiers. Pourquoi ré-inventer la roue ? Utilisez un package existant et économisez des heures et des heures de développement... Un point fort en faveur de Laravel est que les packages tier Laravel sont maintenu, à jour et prêt pour être utilisé sur des vraie projets! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Les créateurs de Laravel ont créé un éco-système de produits professionnels qui complète Laravel d'une manière merveilleuse. Bien sûr, ces produits sont payants, mais en retour, ils sont prêts pour la mise en production à grande échelle et peuvent vous faire économiser des centaines d'heures de développement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avec Laravel, il est également possible de créer des applications fullstack, c'est-à-dire backend mais aussi frontend. Le code reste exécuté sur le serveur mais certains produits comme Livewire permettent de développer des UI interactives comme React mais en pur PHP, simple et facile et sans une ligne de code Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Laravel prend également en charge la création de composants d'interface utilisateur. Il est donc possible d'intégrer dans votre UI des widgets déjà pré-développés et clé en main qui peuvent être installés en moins d'une minute et toujours en PHP pur et sans javascript. (ex. graphique chart, calendrier, datatable, ect.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Laravel est open source mais il est développé par ces créateurs comme un produit pro. C'est-à-dire que les retours clients sont pris en compte dans les décisions et que des corrections et améliorations sont régulièrement publiées. Laravel peut se targuer d'être à jour avec les dernières technologies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Une documentation incroyables. Laravel a à mon avis la meilleure documentation pour un framework backend. Tout est simple, clair et détaillé avec des exemples. Les outils de recherche fonctionnent très bien, il est donc facile de trouver ce que vous recherchez. De plus, elle est régulièrement mis à jour.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;La communauté Laravel est géniale! Tout le monde est le bienvenu pour rejoindre la famille. Il n'y a pas de discrimination et pas de snobisme. Aucune question n'est considérée comme stupide. Les gens veulent aider du mieux qu'ils peuvent.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;C'est tout :-)&lt;/p&gt;

&lt;p&gt;Si cela vous donne envie d'en savoir plus sur Laravel et pourquoi pas l'essayer. Vous pouvez commencer ici: &lt;a href="http://www.laravel.com"&gt;www.laravel.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Je publierai plusieurs articles dans les semaines à venir sur Laravel. Vous pouvez me suivre si vous ne voulez rien manquer.&lt;/p&gt;

</description>
      <category>french</category>
      <category>php</category>
      <category>laravel</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Self hosting with Pi</title>
      <author>Mark</author>
      <pubDate>Tue, 18 May 2021 20:09:33 +0000</pubDate>
      <link>https://dev.to/markhelmsglitch/self-hosting-with-a-pi-1dpi</link>
      <guid>https://dev.to/markhelmsglitch/self-hosting-with-a-pi-1dpi</guid>
      <description>&lt;p&gt;Self Hosting! &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#cough-cough-this-might-take-a-while-it-did-for-me"&gt;
  &lt;/a&gt;
  (cough cough, this might take a while...    it did for me)
&lt;/h6&gt;

&lt;p&gt;If your looking for the end all be all self hosting guide this is not it, but it will at least give you a good idea of how to do it for your own situation you got going on. Through this guide you'll probably have a better understanding of how hosting works.&lt;/p&gt;

&lt;p&gt;First lets go over the steps we'll take for setting up this environment on a raspberry pi.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Linux&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling Wifi&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Nginx and Node.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure UFW&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the router&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring Nginx config files to listen in on specified ports and folders&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Register your site through google domains&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Point google domains at your device&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing Certbot for SSL&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Serve to the WEB!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of this tutorial is done from the Linux terminal and is under the assumption of using VS Code with SSH enabled or have access to an SSH client &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-installing-linux"&gt;
  &lt;/a&gt;
  1. Installing linux
&lt;/h3&gt;

&lt;p&gt;Install Linux Server /Ubuntu 20.04 UTS using Raspberry Pi Imager&lt;/p&gt;

&lt;p&gt;You will have to download the Ubuntu 20.04 UTS image seperately&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OIZOYbtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do27v35uf4lhp2k0zvok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OIZOYbtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do27v35uf4lhp2k0zvok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-enabling-wifi"&gt;
  &lt;/a&gt;
  2. Enabling wifi
&lt;/h3&gt;

&lt;p&gt;How to Connect to WiFi from the Terminal in Ubuntu Linux&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Identify your wireless network interface name:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are several ways to identify your network interface name. You can use the ip command, the deprecated ipconfig command or check this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls /sys/class/net
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should give you all the available networking interface (Ethernet, wifi and loopback). The wireless network interface name starts with ‘w’ and it is usually named similar to wlan0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:~$ ls /sys/class/net
eth0 lo wlan0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Then Edit the Netplan configuration file with the wifi interface details&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/netplan/50-cloud-init.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;YAML files are very sensitive about spaces, indention and alignment. DONT USE TAB KEY FOR SPACING, use 4 (or 2, whichever is already used in the YAML file) spaces instead where you see an indention.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;network:

    ethernets:

        eth0:

            dhcp4: true

            optional: true

    version: 2

    wifis:

        wlan0:

            dhcp4: true

            optional: true

            access-points:

                "SSID_name":

password: "WiFi_password"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate the configuration using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo netplan generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now to apply this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo netplan apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should have network connected. &lt;/p&gt;

&lt;p&gt;If not restarting Linux should do the trick.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-installing-nginx-and-node"&gt;
  &lt;/a&gt;
  3. Installing Nginx and node
&lt;/h3&gt;

&lt;p&gt;just run the commands below one after the other&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install nginx
sudo apt-get install nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-configuring-ufw"&gt;
  &lt;/a&gt;
  4. Configuring UFW
&lt;/h3&gt;

&lt;p&gt;This enables UFW to run and allows the ports that we need to communicate &lt;/p&gt;

&lt;p&gt;if you don't have VS Code installed on another computer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ufw enable

sudo ufw allow 443

sudo ufw allow ssh

sudo ufw allow from 0.0.0.0/24 to any port 22 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-configuring-the-router"&gt;
  &lt;/a&gt;
  5. Configuring the router
&lt;/h3&gt;

&lt;p&gt;log in to your router and enable the IP address to communicate only on port 443 for https access and SSL certs later on.&lt;/p&gt;

&lt;p&gt;Here is a link for that if you need help&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.netspotapp.com/how-to-log-into-router.html"&gt;https://www.netspotapp.com/how-to-log-into-router.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-configuring-nginx-config-files-to-listen-in-on-specified-ports-and-folders"&gt;
  &lt;/a&gt;
  6. Configuring Nginx config files to listen in on specified ports and folders
&lt;/h3&gt;

&lt;p&gt;Useful commands for managing Nginx and apply updates&lt;/p&gt;

&lt;p&gt;To restart and apply changes made&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tests if the current Nginx configuration is viable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nginx -T 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to apply changes as you go.&lt;/p&gt;

&lt;p&gt;Now go to file location:    /etc/nginx/sites-available/default &lt;/p&gt;

&lt;p&gt;and change the contents to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {

    root /usr/share/nginx/html;

    listen [::]:443 ssl ipv6only=on;
    listen 443 ssl;

    location / {
            proxy_pass http://Your IP Address:port number;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
    }   

}

server {

     if ($host = Yoursite.com) {
        return 301 https://$host$request_uri;
    } 

    listen 80 ;
    listen [::]:80 ;
    server_name Yoursite.com;
    return 404; 

    location / {  
            satisfy any;  
            allow 127.0.0.1;  
            deny all;  
            auth_basic "closed site";  
            auth_basic_user_file conf/htpasswd;  
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next go to file location /etc/nginx/nginx.conf&lt;/p&gt;

&lt;p&gt;and change that file as well to look like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
    # multi_accept on;
}

http {

    server {
    listen 80;
    }

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip off;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-registering-your-site-through-google-domains"&gt;
  &lt;/a&gt;
  7. Registering your site through google domains
&lt;/h3&gt;

&lt;p&gt;Log into/ register &lt;a href="http://domains.google.com/"&gt;domains.google.com&lt;/a&gt; and select Get a new domain, and continue through the process of obtaining your domain name. &lt;/p&gt;

&lt;p&gt;Once you have obtained your domain name:&lt;/p&gt;

&lt;p&gt;Go to google domains and log in → select your domain of choice → select DNS on the left side bar→ select Dynamic DNS under Synthetic records →select add → gather your Username and Password that google domains generates for your Dynamic DNS synthetic record&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp5I17n---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz6v1pyua0lxunq0zcus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp5I17n---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz6v1pyua0lxunq0zcus.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-point-google-domains-at-your-device"&gt;
  &lt;/a&gt;
  8. Point google domains at your device
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;  Have google domains point to and update the reported IP every  30 min. for dynamic IP address&lt;/p&gt;

&lt;p&gt;run this script from any directory of your choosing, it will run properly no matter where its stored&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/dns_update_script.sh
    wget https://username:password@domains.google.com/nic/update?hostname=yourdomain.com -qO dns_update_results.txt
    wget https://username:password@domains.google.com/nic/update?hostname=www.yourdomain.com -qO- &amp;gt;&amp;gt; dns_update_results.txt
    echo " Last run: `date`" &amp;gt;&amp;gt; dns_update_results.txt
chmod +x ~/dns_update_script.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script downloads the web pages to the text file (the first wget creates the text file, the second wget appends to the text file) and then I also append the current date and time to the text file.&lt;/p&gt;

&lt;p&gt;Remember to replace username:password with YOUR username and password that google domains provide when generating your DNS.&lt;/p&gt;

&lt;p&gt;Also do not forget to change &lt;a href="http://yourdomain.com"&gt;yourdomain.com&lt;/a&gt; &amp;amp; &lt;a href="http://www.yourdomain.com"&gt;www.yourdomain.com&lt;/a&gt; to the domain name of your site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt; Setup a cron job to run the script at the start of every hour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;crontab -e
    0 * * * * ~/dns_update_script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-installing-certbot-for-ssl"&gt;
  &lt;/a&gt;
  9. Installing Certbot for SSL
&lt;/h3&gt;

&lt;p&gt;Follow the instructions that Certbot provides on there site&lt;/p&gt;

&lt;p&gt;&lt;a href="https://certbot.eff.org/instructions"&gt;https://certbot.eff.org/instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-serving-to-the-web"&gt;
  &lt;/a&gt;
  10. Serving to the WEB!
&lt;/h3&gt;

&lt;p&gt;serving your web app to the web with node.js and express or just a static site&lt;/p&gt;

&lt;p&gt;The default location to store your site should be: &lt;/p&gt;

&lt;p&gt;/usr/share/nginx/html&lt;/p&gt;

&lt;p&gt;From that directory you will add your static site or applications that run from your self hosted site&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  CONGRATULATIONS!!!
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;At this point you should be able to go to your browser an type in "yourdomain.com"&lt;/p&gt;

&lt;p&gt;and see your new website with HTTPS enabled and verified.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to use SVGR?</title>
      <author>Mihriban Alp</author>
      <pubDate>Tue, 18 May 2021 20:09:29 +0000</pubDate>
      <link>https://dev.to/mihrilp/how-to-use-svgr-25gj</link>
      <guid>https://dev.to/mihrilp/how-to-use-svgr-25gj</guid>
      <description>&lt;p&gt;Hey Everyone, this is my first post and i'll mention about &lt;a href="https://react-svgr.com/"&gt;SVGR&lt;/a&gt;. If you've never heard of it before, SVGR is an amazing tool that converts your SVGs into React components.&lt;/p&gt;

&lt;p&gt;There are a few ways for using SVGR:&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#1playground"&gt;
  &lt;/a&gt;
  1.Playground.
&lt;/h4&gt;

&lt;p&gt;You can use their online &lt;a href="https://react-svgr.com/playground/"&gt;playground&lt;/a&gt;. Enter your svg code in the left box (SVG INPUT) then you will see the converted React component on right box (JSX OUTPUT).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1ED_1vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58886855/117895443-08c07a00-b2c7-11eb-9d69-13eebdb304b4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1ED_1vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58886855/117895443-08c07a00-b2c7-11eb-9d69-13eebdb304b4.png" alt="Playground - SVGR — Firefox Developer Edition 5_10_2021 2_14_43 AM (3)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also create components for React-Native, TypeScript etc. You just need to mark from the left of the screen.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#2command-line"&gt;
  &lt;/a&gt;
  2.Command Line
&lt;/h4&gt;

&lt;p&gt;First you need to install the CLI tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @svgr/cli --save-dev
# or use yarn
yarn add @svgr/cli --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's think we have an svg named "my_icon.svg" in the project directory. If we write this command line to terminal we will get the code of the our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @svgr/cli my_icon.svg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SvgMyIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;
      &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 499.859 499.859&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.w3.org/2000/svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M469.223 270.371c9.237-9.218 14.329-21.48 14.335-34.53.007-13.05-5.071-25.318-14.298-34.546a48.44 48.44 0 00-15.946-10.611l20.045-19.969c9.258-9.214 14.365-21.481 14.38-34.543s-5.062-25.342-14.298-34.578l-.519-.519a48.52 48.52 0 00-25.169-13.37c.56-2.968.857-6.007.86-9.094.015-13.06-5.063-25.339-14.298-34.573l-.637-.637c-9.221-9.221-21.48-14.299-34.52-14.299-8.804 0-17.248 2.323-24.645 6.665a48.603 48.603 0 00-11.268-17.559l-.42-.422c-19.033-19.03-50.004-19.033-69.039.001L163.331 148.244l16.204-66.917c6.402-26.44-8.045-53.401-33.605-62.715-14.384-5.242-30.346-4.048-43.792 3.271S79.026 41.96 75.618 56.886l-2.222 9.736C62.768 113.177 45.2 159.96 21.18 205.668 3.181 239.918-3.674 279.973 1.878 318.455c5.744 39.816 23.855 75.938 52.376 104.458 35.01 35.011 81.542 54.286 131.049 54.284h.126c49.552-.032 96.113-19.373 131.105-54.458l37.349-37.448zm-173.93 131.182c-29.328 29.406-68.353 45.616-109.883 45.644h-.106c-41.491 0-80.495-16.155-109.837-45.497-23.906-23.905-39.085-54.173-43.897-87.528-4.656-32.273 1.086-65.852 16.167-94.549 25.228-48.006 43.702-97.237 54.907-146.325l2.222-9.735c1.514-6.633 5.639-12.077 11.615-15.33s12.789-3.761 19.18-1.433c11.194 4.079 17.522 15.887 14.718 27.467l-28.77 118.803c-3.413 12.246 12.364 25.887 25.185 14.137L315 39.001c7.337-7.339 19.276-7.337 26.601-.014l.42.421c3.554 3.555 5.511 8.279 5.511 13.306s-1.958 9.752-5.511 13.307L238.659 169.382c-5.858 5.857-5.858 15.355 0 21.213s15.356 5.858 21.213 0l125.982-125.98c3.554-3.555 8.279-5.512 13.306-5.512s9.752 1.957 13.307 5.512l.637.637a18.695 18.695 0 015.512 13.327 18.697 18.697 0 01-5.544 13.317c-37.611 37.461-89.049 88.677-126.281 125.783-5.87 5.847-5.888 15.344-.042 21.214a14.953 14.953 0 0010.627 4.414c3.829 0 7.659-1.457 10.585-4.372 25.028-24.931 93.218-92.857 117.168-116.678 7.337-7.301 19.261-7.287 26.581.031l.518.519c3.561 3.561 5.518 8.294 5.512 13.329s-1.975 9.764-5.548 13.32c-36.483 36.339-94.262 93.883-130.424 129.934-5.869 5.848-5.887 15.345-.04 21.214a14.955 14.955 0 0010.626 4.413c3.829 0 7.66-1.458 10.586-4.373l68.783-68.524 9.78-9.68c7.337-7.262 19.245-7.229 26.544.068a18.691 18.691 0 015.511 13.316 18.685 18.685 0 01-5.518 13.303L332.675 364.072zM451.123 374.497c3.26-7.615-.271-16.433-7.886-19.692-7.616-3.262-16.433.27-19.693 7.886-5.032 11.754-12.214 22.345-21.346 31.477-11.157 11.156-24.34 19.323-39.184 24.274-7.859 2.621-12.105 11.116-9.484 18.976 2.096 6.284 7.948 10.258 14.228 10.258 1.573 0 3.173-.249 4.748-.774 19.3-6.438 36.428-17.042 50.906-31.521 11.845-11.847 21.169-25.602 27.711-40.884zM490.765 382.77c-7.615-3.264-16.433.261-19.697 7.876-7.009 16.349-17.003 31.079-29.704 43.78-14.772 14.772-32.148 25.807-51.644 32.796-7.798 2.796-11.854 11.384-9.058 19.183 2.196 6.126 7.967 9.941 14.121 9.941 1.68 0 3.389-.284 5.062-.884 23.698-8.496 44.804-21.895 62.732-39.823 15.412-15.411 27.545-33.301 36.064-53.173 3.264-7.614-.262-16.432-7.876-19.696z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SvgMyIcon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, but if we have more than one icon, converting them one by one can be a bit boring and exhausting. One of the best ways to using SVGR is add a script to your package.json to automate the SVG transformation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svgr icons -d components/icons --icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the script below transforms each SVG in the "icons" folder by composing React in "components/icons".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run svgr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#3webpack"&gt;
  &lt;/a&gt;
  3.Webpack
&lt;/h4&gt;

&lt;p&gt;For install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @svgr/webpack --save-dev
# or use yarn
yarn add @svgr/webpack --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update your webpack.config.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;svg$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@svgr/webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can import our SVGs as a React component and use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./my_icon.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyIcon&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
You can check the documentation for more 👉  &lt;a href="https://react-svgr.com/docs/getting-started/"&gt;https://react-svgr.com/docs/getting-started/&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😊
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Cellular IoT?</title>
      <author>Rob Lauer</author>
      <pubDate>Tue, 18 May 2021 20:01:26 +0000</pubDate>
      <link>https://dev.to/blues/what-is-cellular-iot-286g</link>
      <guid>https://dev.to/blues/what-is-cellular-iot-286g</guid>
      <description>&lt;p&gt;To say we live in a wirelessly connected world feels like a bit of a cliche. Many of us start our days checking smartphones, accessorizing with wearables, and telling Alexa to "play top songs by Nickelback". Ok, maybe not so much that last one.&lt;/p&gt;

&lt;p&gt;The tin cans and wire of days gone by have been replaced by communication protocols like Wi-Fi, Bluetooth, and cellular to provide us seamless connectivity from home to work to...anywhere!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFCj6brD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r94pbp9jhbi4fj568wl5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFCj6brD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r94pbp9jhbi4fj568wl5.jpg" alt="blues wireless notecard in the desert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The cellular-enabled &lt;a href="https://blues.io/products/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;Notecard&lt;/a&gt; from Blues Wireless. Not to scale.&lt;/em&gt; 😊&lt;/p&gt;

&lt;p&gt;IoT developers today have myriad choices when deciding &lt;a href="https://blues.io/blog/network-connectivity/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;which network connectivity option is best for them&lt;/a&gt;. When you add up all the pros and cons, many are surprised to find cellular as the logical path forward (if not for a primary connection, then as a fallback).&lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;mature and ubiquitous means of connecting IoT devices&lt;/strong&gt; is prized for its reliability and reach, yet vilified for its traditionally obtuse pricing and relatively low data throughput.&lt;/p&gt;

&lt;p&gt;In this blog series we are demystifying cellular and taking a critical look at four key topics related to wireless in the Internet of Things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Cellular IoT? (that's today)&lt;/li&gt;
&lt;li&gt;The Advantages of Cellular IoT (coming soon!)&lt;/li&gt;
&lt;li&gt;Common Use Cases for Cellular IoT (coming soon!)&lt;/li&gt;
&lt;li&gt;Cellular IoT Network and Infrastructure Redundancy (coming soon!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-cellular-iot-anyway"&gt;
  &lt;/a&gt;
  So What is Cellular IoT Anyway?
&lt;/h2&gt;

&lt;p&gt;Cellular IoT technologies allow physical devices (e.g. sensors, actuators, and their host microcontrollers or single-board computers) to connect to a private network or the public Internet for the purpose of transmitting data.&lt;/p&gt;

&lt;p&gt;By leveraging the same infrastructure as mobile phones, cellular IoT takes advantage of the broad availability of existing cellular networks, but without the power requirements of traditional cellular applications. With 5G just around the corner, cellular IoT is well-positioned to take advantage of higher bandwidth solutions that would normally be allocated to Wi-Fi or wired Ethernet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lBK2V8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a16uw4h35ldgh2prgzhx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lBK2V8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a16uw4h35ldgh2prgzhx.jpg" alt="cell towers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image credit &lt;a href="https://unsplash.com/@riiyad"&gt;@riiyad&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we think about how cellular relates to the Internet of Things in particular, we stop thinking about just &lt;em&gt;person-to-device&lt;/em&gt; cellular connections and instead open up to &lt;em&gt;device-to-device&lt;/em&gt; connections (or device &amp;lt;--&amp;gt; person &amp;lt;--&amp;gt; device and every other iteration in between!).&lt;/p&gt;

&lt;p&gt;The opportunities for the IoT then become limitless. Connected IoT solutions can be everything from streetlights that are controlled automatically, to remotely-monitored parking garages, to agricultural applications that optimize irrigation and fertilizer usage, or Machine Learning solutions that predict anomalies in remote settings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-critical-role-of-ltem-and-nbiot"&gt;
  &lt;/a&gt;
  The Critical Role of LTE-M and NB-IoT
&lt;/h2&gt;

&lt;p&gt;Let's take a closer look at two key technologies underpinning cellular IoT: &lt;a href="https://en.wikipedia.org/wiki/LTE-M"&gt;LTE-M&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Narrowband_IoT"&gt;NB-IoT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While 2G/3G protocols are perfectly adequate for many IoT applications, modern IoT generally relies on LTE-M or NB-IoT. The rapid proliferation of these wireless standards is setting us up for a new dawn of IoT connectivity.&lt;/p&gt;

&lt;p&gt;These standards were designed from the start around low power consumption, embedded security, and reliability. Combining these technical advantages with existing ubiquitous cellular networks has provided the world with an unparalleled choice for remote IoT connectivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ltem"&gt;
  &lt;/a&gt;
  What is LTE-M?
&lt;/h3&gt;

&lt;p&gt;You can probably hazard a guess that LTE-M is closely related to the popular LTE (Long-Term Evolution) wireless standard. The &lt;a href="https://en.wikipedia.org/wiki/List_of_countries_by_4G_LTE_penetration"&gt;countries that support LTE&lt;/a&gt; encompass a vast list primarily comprised of the Americas and parts of Europe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrlkZHxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9oykcud9u1wi3rwv39ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrlkZHxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9oykcud9u1wi3rwv39ex.png" alt="LTE-M logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LTE-M effectively stands for "Long-Term Evolution for Machines" and allows for IoT devices to piggyback on existing LTE networks. It was designed in a power-conscious manner for applications that require low-to-medium data throughput. With a bandwidth of 1.4 MHz (compared to 20 MHz for LTE), LTE-M provides great range but less throughput than LTE (approximately 375KB down and 300KB up). LTE-M also offers cell tower handoff features, making it a great mobility solution (even across multiple regions).&lt;/p&gt;

&lt;p&gt;Asset tracking, wearables, home security, and home/business monitoring are all great examples of use cases for LTE-M in the IoT.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nbiot"&gt;
  &lt;/a&gt;
  What is NB-IoT?
&lt;/h3&gt;

&lt;p&gt;Considering the Internet of Things is literally part of the name, NB-IoT was designed for the IoT. NB-IoT stands for "Narrowband-IoT" and is great for areas without robust LTE coverage or when bandwidth requirements are relatively minimal. Again, per its name, NB-IoT uses just a &lt;em&gt;narrow band&lt;/em&gt; of the full bandwidth available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlBrr2wt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w4zdhiukuv4yxtsedgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlBrr2wt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w4zdhiukuv4yxtsedgt.png" alt="NB-IoT logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Available globally where GSM is the flag-bearer (such as much of Europe, Africa, and Asia), NB-IoT devices consume very little power and provide less data throughout than LTE-M (approximately 60KB down and 30KB up). Compared to LTE-M's bandwidth of 1.4 MHz, NB-IoT operates on 200 KHz, providing &lt;strong&gt;longer range and better indoor penetration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Certain use cases like smart cities (e.g. parking meters, utility monitoring), parking garages, indoor deployments, and agricultural settings are great examples of suitable NB-IoT implementations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-does-5g-fit"&gt;
  &lt;/a&gt;
  Where Does 5G Fit?
&lt;/h3&gt;

&lt;p&gt;We've all been subject to the hype around 5G. Some of it is warranted, but frankly the rest is a lot of marketing to get us to buy new phones.&lt;/p&gt;

&lt;p&gt;Like the other "xG" standards we've gotten used to (2G/3G/4G), 5G is another ladder rung towards faster and stronger network connections. As IoT deployments accelerate in scope and magnitude, one can imagine industrial applications comprised of thousands of devices that are pushing gigabytes of data every day. 5G will likely be our destination come that time.&lt;/p&gt;

&lt;p&gt;What about today? Are you likely to be live streaming 4K video with a Raspberry Pi Zero? Probably not, but the opportunity of 5G is intriguing as we look towards the greenfield future of IoT.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltem-and-nbiot-on-the-notecard"&gt;
  &lt;/a&gt;
  LTE-M and NB-IoT on the Notecard
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://blues.io/products/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;Notecard from Blues Wireless&lt;/a&gt; provides cellular IoT connectivity in a low-power fashion using LTE-M, NB-IoT, and Cat-1 technologies. In global regions without these capabilities, coverage is supported by UMTS/HSPA+ and GSM/GPRS/EDGE wireless standards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psTC12-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l962ocpj0yh54tuhcq6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psTC12-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l962ocpj0yh54tuhcq6w.png" alt="blues wireless notecard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Notecard is a secure device-to-cloud data-pump that comes with 500 MB of data and 10 years of cellular service. It's a tiny 30mm x 34mm SoM and ships ready to embed in a project via its M.2 edge connector. To make prototyping IoT projects easier, Blues Wireless provides a series of expansion boards to host the Notecard called &lt;a href="https://blues.io/products/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries#notecarrier"&gt;Notecarriers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Businesses love the Notecard for its straightforward pricing: &lt;strong&gt;$49 for 10 years of service and 500MB of data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Developers love the Notecard for its microcontroller- and single-board computer-agnostic approach (bring your own MCU or SBC!), its open source libraries for &lt;a href="https://github.com/blues/note-python"&gt;Python&lt;/a&gt;, &lt;a href="https://github.com/blues/note-c"&gt;C/C++&lt;/a&gt;, and &lt;a href="https://github.com/blues/note-arduino"&gt;Arduino&lt;/a&gt;, and its friendly JSON-in and JSON-out request/response interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;An example of adding a "note", or an event, with the &lt;a href="https://dev.blues.io/reference/complete-api-reference/introduction/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;Notecard API&lt;/a&gt;:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   "req":"note.add",
   "body":{
      "temperature": 35.5,
      "humidity": 56.23
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Cellular IoT technologies like LTE-M and NB-IoT introduce significant advantages for remote IoT deployments. Growing to become an ideal option for a wide range of applications, especially those in mobile or otherwise unpredictable locations, cellular is a mature, reliable, and logical choice.&lt;/p&gt;

&lt;p&gt;Learn more about how Blues Wireless is making cellular IoT adoption easier for businesses AND developers with the &lt;a href="https://blues.io/products/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_campaign=cellularblogseries"&gt;Notecard and Notecarrier&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>iot</category>
      <category>cellular</category>
      <category>cloud</category>
    </item>
    <item>
      <title>State Management With WebAssembly &amp; Rust</title>
      <author>Sean Watters</author>
      <pubDate>Tue, 18 May 2021 19:56:18 +0000</pubDate>
      <link>https://dev.to/seanwatters/state-management-with-webassembly-rust-5a1g</link>
      <guid>https://dev.to/seanwatters/state-management-with-webassembly-rust-5a1g</guid>
      <description>&lt;p&gt;Link to my original Medium post &lt;a href="https://seanwatters.medium.com/state-management-with-webassembly-rust-66d80432959f"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#object-oriented-state-management-with-webassembly-and-rust"&gt;
  &lt;/a&gt;
  Object Oriented State Management With WebAssembly and Rust
&lt;/h1&gt;

&lt;p&gt;State management in any application is always a &lt;em&gt;super&lt;/em&gt; fun problem to solve. When it comes to integrating WebAssembly with existing applications or starting from scratch with a new project, this problem gets even more interesting, but it’s not as complicated as it may seem.&lt;/p&gt;

&lt;p&gt;Before we jump in, I do want to make it known that this may not yet be the most performant solution for general state management (“&lt;em&gt;yet&lt;/em&gt;” is important there). Interop between JavaScript and WebAssembly still suffers some performance limitations when it comes to serialization and de-serialization of complex data structures, but it is &lt;a href="https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast-%f0%9f%8e%89/"&gt;improving&lt;/a&gt; and there are &lt;a href="https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md"&gt;proposals&lt;/a&gt; that are on their way that could have a significant, positive impact on performance.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#jumping-in"&gt;
  &lt;/a&gt;
  Jumping In
&lt;/h2&gt;

&lt;p&gt;For this example, we’re going to build a super basic counter application — you’ll be able to increment and decrement the count with “+” and “-” buttons. This will cover very surface level information and basic implementation, but won’t go deep into state management patterns like “&lt;a href="https://facebook.github.io/flux/"&gt;flux&lt;/a&gt; with Rust,” or how to build your signup form; those are posts for another time, and I do plan on covering those topics in the next little while if folks find this walk-through helpful.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re feeling like, &lt;strong&gt;“just show me the code!”&lt;/strong&gt; you can view it &lt;strong&gt;&lt;a href="https://github.com/seanwatters/webassembly-and-rust-counter-app"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#high-level"&gt;
  &lt;/a&gt;
  High Level
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wo2COILd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AND-Ql5GM-mbSNOhSHqjTQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wo2COILd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AND-Ql5GM-mbSNOhSHqjTQA.png" alt="State Management Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the diagram above, we can think about our application as being three distinct parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The View — our HTML document that a user would interact with&lt;/li&gt;
&lt;li&gt;The Link — our JavaScript code that bridges the gap between our View and our State layer&lt;/li&gt;
&lt;li&gt;The State — our Rust code that worries about application state and provides an interface for our JavaScript to read and write from&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The View layer is relatively simple — a couple of buttons and a &lt;code&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; to render our counter state. The JavaScript necessary for hooking up our view to our application state is mostly generated by a Rust library called wasm_bindgen, but we will still need to utilize the generated bindings in our custom JavaScript.&lt;/p&gt;

&lt;p&gt;The state layer is the most interesting and complex of the three, but if implemented properly, can actually provide a very clean interface through which we interact with our application state.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h3&gt;

&lt;p&gt;First we’re going to create a basic vanilla JavaScript, WebAssembly &amp;amp; Rust project. You’ll need to make sure that you have &lt;code&gt;rust&lt;/code&gt; installed via &lt;code&gt;rustup&lt;/code&gt; — instructions &lt;a href="https://doc.rust-lang.org/book/ch01-01-installation.html"&gt;here&lt;/a&gt;. You’ll also need to make sure that &lt;code&gt;wasm-pack&lt;/code&gt; is installed — link &lt;a href="https://rustwasm.github.io/wasm-pack/installer/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ll generate the project — if you have difficulty with this step, you may need to use &lt;code&gt;sudo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init rust-webpack counter-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then we’re going to build and run the project — again, may need to use &lt;code&gt;sudo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build &amp;amp;&amp;amp; npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see a blank page at &lt;code&gt;localhost:8080&lt;/code&gt; with &lt;code&gt;Hello world!&lt;/code&gt; logged in the console. If you take a look in the &lt;code&gt;src/lib.rs&lt;/code&gt; file, the default project is using the &lt;code&gt;web_sys&lt;/code&gt; and &lt;code&gt;wasm_bindgen&lt;/code&gt; Crates (Rust libraries) to generate this message.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;So now that we’ve got our project up and running, we need to actually write some code. If you’re not yet familiar with Rust, I highly recommend reading through &lt;em&gt;&lt;a href="https://doc.rust-lang.org/book/"&gt;The Book&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We’re going to use some Object Oriented Programming paradigms to start out. &lt;a href="https://doc.rust-lang.org/book/ch17-00-oop.html"&gt;OOP in Rust&lt;/a&gt;, is an interesting animal, and isn’t necessarily the most idiomatic approach, but may be an easier transition for folks coming from OOP backgrounds. We’ll cover a more functional style in a separate post.&lt;/p&gt;

&lt;p&gt;In our Object Oriented approach, we are going to use only Rust for state management, and won’t be using &lt;code&gt;web_sys&lt;/code&gt; to generate our HTML via JavaScript bindings.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;p&gt;First let’s create a new file called &lt;code&gt;counter_state.rs&lt;/code&gt; in our &lt;code&gt;src&lt;/code&gt; directory:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;There’s a bit going on here —&lt;/p&gt;

&lt;p&gt;First we’re creating a public Rust &lt;code&gt;struct&lt;/code&gt;, then we are implementing that &lt;code&gt;struct&lt;/code&gt; using the &lt;code&gt;impl&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;note: all structs with JavaScript bindings generated by wasm_bindgen must use the pub keyword.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The key indicator here that we’re using OOP-style Rust, is that in our &lt;code&gt;struct&lt;/code&gt; implementation, we are adding a public &lt;code&gt;new()&lt;/code&gt; method which will return an instance of the previously defined &lt;code&gt;CounterState&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition to the &lt;code&gt;new()&lt;/code&gt; method, we have also exposed three other public methods: &lt;code&gt;increment_counter()&lt;/code&gt;, &lt;code&gt;decrement_counter()&lt;/code&gt;, and &lt;code&gt;get_counter()&lt;/code&gt;. The &lt;code&gt;counter&lt;/code&gt; property on the &lt;code&gt;CounterState&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt; is private and isn’t exposed to the consumer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; we will also need to add this &lt;code&gt;counter_state&lt;/code&gt; module to our imports in the &lt;code&gt;src/lib.rs&lt;/code&gt; file. Add the line: &lt;code&gt;mod counter_state;&lt;/code&gt; to the top of your file below the other imports.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;The next step will be to update our &lt;code&gt;static/index.html&lt;/code&gt; file to include the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; elements, as well as the element where we’ll display the counter state:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;Before we can create the JavaScript glue to connect the HTML &lt;em&gt;document&lt;/em&gt; to the Rust &lt;em&gt;state&lt;/em&gt; we will first need to update our &lt;code&gt;package.json&lt;/code&gt; file to provide access to our WebAssembly module by adding &lt;code&gt;"wasm": "file:pkg"&lt;/code&gt; to our dependencies — you will also need to run &lt;code&gt;npm i&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Finally, we can add the JavaScript that will access our stateful WebAssembly module. It will go in the &lt;code&gt;js/counter.js&lt;/code&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;We will also need to update our &lt;code&gt;js/index.js&lt;/code&gt; file to import the &lt;code&gt;counter.js&lt;/code&gt; file, instead of the &lt;code&gt;pkg/index.js&lt;/code&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;In the &lt;code&gt;counter.js&lt;/code&gt; file, we’re importing the &lt;code&gt;CounterState&lt;/code&gt; JavaScript class that &lt;code&gt;wasm_bindgen&lt;/code&gt; has generated as a binding for our Rust &lt;code&gt;struct&lt;/code&gt;. The generated code looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;Because we now have access to this &lt;code&gt;class&lt;/code&gt; we also have access to the public methods on the Rust &lt;code&gt;struct&lt;/code&gt; — what we’re doing on line 3 of the &lt;code&gt;counter.js&lt;/code&gt; file is creating an instance of the &lt;code&gt;struct&lt;/code&gt; in WebAssembly, and assigning it to a JavaScript variable using the &lt;code&gt;new()&lt;/code&gt; method we created in our &lt;code&gt;counter_state.rs&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;From here, we’re setting the initial text content of the &lt;code&gt;#counter&lt;/code&gt; HTML element using the &lt;code&gt;get_counter()&lt;/code&gt; method. We’re also adding event listeners to the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; elements in our HTML document, that will increment and decrement our counter’s state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;increment_counter()&lt;/code&gt; and &lt;code&gt;decrement_counter()&lt;/code&gt; methods both return the post-modification state of the private counter property, so we don’t need to use &lt;code&gt;get_counter()&lt;/code&gt; a second time.&lt;/p&gt;

&lt;p&gt;To validate that we’ve successfully implemented the counter we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i &amp;amp;&amp;amp; npm run build &amp;amp;&amp;amp; npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout &lt;code&gt;localhost:8080&lt;/code&gt; and you should see something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fV2TQpA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1052/1%2Aq3uKJJWFK8XnLiHECBzorg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fV2TQpA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1052/1%2Aq3uKJJWFK8XnLiHECBzorg.png" alt='Number 42 with "+" and "-" buttons'&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Object Oriented state management with Rust and WebAssembly is not only very possible, it’s actually relatively straightforward to reason about. Similar to other state management solutions, you still are creating a persistent store of some kind, and making it available as a module to your renderer — but with WebAssembly modules, you can get the performance boost for computation intensive methods, added type safety, and the other features that make Rust great.&lt;/p&gt;

&lt;p&gt;This example only covers surface level problem spaces. We’re not using complex types or having to manage serialization or de-serialization — that does make things a little more complicated, but I will be writing another post that addresses all that in the context of &lt;code&gt;&amp;lt;form /&amp;gt;&lt;/code&gt; creation, in the coming weeks.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>Node.js Streams Quick Introduction</title>
      <author>Renato Pozzi</author>
      <pubDate>Tue, 18 May 2021 19:39:22 +0000</pubDate>
      <link>https://dev.to/itsrennyman/node-js-streams-quick-introduction-31ej</link>
      <guid>https://dev.to/itsrennyman/node-js-streams-quick-introduction-31ej</guid>
      <description>&lt;p&gt;Curious to try the streams but you don't know if they can serve you? Let's see its uses together!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-streams"&gt;
  &lt;/a&gt;
  What are Streams?
&lt;/h2&gt;

&lt;p&gt;In an event-based platform such as Node.js, the most efficient way to handle I/O is in real-time, consuming the input &lt;strong&gt;as soon as it is available&lt;/strong&gt; and sending the output as soon as the application produces it.&lt;/p&gt;

&lt;p&gt;Streams allow us to process the data as soon as it arrives from the resource. This is &lt;strong&gt;different&lt;/strong&gt; from buffering, where all the data that comes from a resource needs to be collected into a buffer until the operation is completed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-advantages-of-streams"&gt;
  &lt;/a&gt;
  What are the advantages of Streams?
&lt;/h2&gt;

&lt;p&gt;Stream has some advantages which can be useful in some use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Spacial Efficiency&lt;/strong&gt;&lt;br&gt;
You have a super-duper big file to process, with streams you can do it without going out of memory because streams keep going with constant memory utilization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Time Efficiency&lt;/strong&gt;&lt;br&gt;
During a multi-step operation, like compressing a file and after, store it, with streams you don't need to wait that the compression has been finished to start with the store operation, every chunk is compressed and stored as soon as is available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Composability&lt;/strong&gt;&lt;br&gt;
With the &lt;code&gt;pipe&lt;/code&gt; command, you can compose all your streams operation to have functions each responsible for one single functionality.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-streams-are-made"&gt;
  &lt;/a&gt;
  How Streams are made?
&lt;/h2&gt;

&lt;p&gt;Stream in Node.js is the implementation of one of these classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Readable&lt;/li&gt;
&lt;li&gt;Writable&lt;/li&gt;
&lt;li&gt;Duplex&lt;/li&gt;
&lt;li&gt;Transform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every stream is also an instance of &lt;strong&gt;EventEmitter&lt;/strong&gt;, which is why it is possible to concatenate the &lt;code&gt;on&lt;/code&gt; function of the classic events in Node.&lt;/p&gt;

&lt;p&gt;Streams also support &lt;em&gt;two&lt;/em&gt; operating modes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Binary Mode&lt;/li&gt;
&lt;li&gt;Object Mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see an example in Binary Mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Our File words.txt&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt; 
&lt;span class="nx"&gt;This&lt;/span&gt;
&lt;span class="nx"&gt;is&lt;/span&gt;
&lt;span class="nx"&gt;an&lt;/span&gt;
&lt;span class="nx"&gt;article&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt;
&lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="c1"&gt;// Our code&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReadStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;words.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stream is ended! :)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also in Object Mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Readable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stream&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Renato&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pozzi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@itsrennyman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Gates&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@BillGates&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tim_cook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Readable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`Hey! This is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and this is my Twitter: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you can use streams also to process very big arrays.&lt;/p&gt;

&lt;p&gt;In the next article, we will go into the various sub-branches of the streams in order to discover them all!&lt;/p&gt;

&lt;p&gt;Thank you for your reading!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>streams</category>
    </item>
    <item>
      <title>Zmsg: Zero-knowledge Messaging on the Blockchain</title>
      <author>Pan Chasinga</author>
      <pubDate>Tue, 18 May 2021 19:27:39 +0000</pubDate>
      <link>https://dev.to/pancy/zmsg-zero-knowledge-messaging-on-the-blockchain-5410</link>
      <guid>https://dev.to/pancy/zmsg-zero-knowledge-messaging-on-the-blockchain-5410</guid>
      <description>&lt;p&gt;Last weekend I've finally finished a functional proof-of-concept command line tool called &lt;a href="https://github.com/firmalabs/zmsg"&gt;zmsg&lt;/a&gt; which is built on &lt;a href="https://z.cash/"&gt;Zcash&lt;/a&gt;, a cryptocurrency focusing on anonymous payments. I've been experimenting with ways to build a social platform that focuses on total anonymity that's censorship-tolerant.&lt;/p&gt;

&lt;p&gt;The tool allows anyone with a Zcash &lt;a href="https://z.cash/support/faq/#difference-between-t-and-z-addrs"&gt;shielded address&lt;/a&gt; to send a 512-byte maximum ASCII or Unicode message to any recipient with a shielded address with very small possibility of any middleman knowing the identity of either party and the content of the message.&lt;/p&gt;

&lt;p&gt;Zcash is built on &lt;a href="https://www.investopedia.com/terms/z/zksnark.asp"&gt;Z-snark&lt;/a&gt;, a very complex mathematical cryptography which makes it fast and trivial to a prover to prove an ownership without revealing any information about themselves and the owned entity.&lt;/p&gt;

&lt;p&gt;The fallback here is the cumbersome experience of spinning up a Zcash daemon, creating and maintaining addresses, and very importantly the time it takes for a message to be verified on the blockchain (which can take several minutes).&lt;/p&gt;

&lt;p&gt;I would appreciate if anyone of you could star the project or contribute in anyway. That would greatly motivate me!&lt;/p&gt;

</description>
      <category>rust</category>
      <category>cryptocurrency</category>
      <category>blockchain</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>Build Cross-Platform Native Mobile Apps using Java/Kotlin for iOS, Android, Desktop &amp; Web</title>
      <author>Shai Almog</author>
      <pubDate>Tue, 18 May 2021 19:24:05 +0000</pubDate>
      <link>https://dev.to/codename_one/build-cross-platform-native-mobile-apps-using-java-kotlin-for-ios-android-desktop-web-5g3j</link>
      <guid>https://dev.to/codename_one/build-cross-platform-native-mobile-apps-using-java-kotlin-for-ios-android-desktop-web-5g3j</guid>
      <description>&lt;p&gt;The new Codename One Maven build makes building native mobile and desktop apps trivial… It’s also free and open source to boot!&lt;/p&gt;

&lt;p&gt;We can get started by opening start.codenameone.com&lt;/p&gt;

&lt;p&gt;Where we select the package name for our app. This is very important as it can’t be changed once the app is submitted to a store!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fPqpXSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A4GPJ7_DpFLf9XGEcaBoaQQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fPqpXSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A4GPJ7_DpFLf9XGEcaBoaQQ.jpeg" alt="start.codenameone.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We enter the name to the app and download a zip containing the maven project, notice that you need to pick Kotlin if you wish to build a Kotlin app…&lt;/p&gt;

&lt;p&gt;We can now open the app in any IDE, I used IntelliJ/IDEA but you can use Eclipse, NetBeans, or even VSCode. Most of the important code in the project is under the common directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggnB22li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://javarevisited.blogspot.com/2018/09/top-5-courses-to-learn-intellij-idea-java-and-android-development.html%23axzz6A8Vy1sea" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggnB22li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://javarevisited.blogspot.com/2018/09/top-5-courses-to-learn-intellij-idea-java-and-android-development.html%23axzz6A8Vy1sea" alt="The project opened in IntelliJ/IDEA. Form creation highlighted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right now it only has the main class under the package you selected which in my case is com.example.myapp. Let’s look at the start method within the main app which creates a hello world form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZBrp7eM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ATEg4EtX-0ef-X6zCRSo0pw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZBrp7eM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ATEg4EtX-0ef-X6zCRSo0pw.png" alt="Main Source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This code creates a Form, which is the root component for a Codename One app, and shows it. It also adds a “Hello World” label under the “Hi World” title.&lt;/p&gt;

&lt;p&gt;The maven target “Run in Simulator” lets us run the simulator and produces this result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFLeVjQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AmpuwWT8pDlWiv5bkZyJrtA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFLeVjQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AmpuwWT8pDlWiv5bkZyJrtA.jpeg" alt="Simulator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many other maven targets we can use to do pretty much everything you will need and I will go through a few of them, but first I want to show off the ease of Codename One programming…&lt;/p&gt;

&lt;p&gt;We can change the code above to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bqUKVk-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AF1ig4a223TL54xyj6Vq61w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bqUKVk-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AF1ig4a223TL54xyj6Vq61w.png" alt="Changes in the source"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We add a button called “sayHi” and add a listener to an event.&lt;/p&gt;

&lt;p&gt;In the event callback we show a dialog. This is pretty intuitive and works exactly as you would expect…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZn9Tiol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AoWB70LpEJNcdmDrumZZEaw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZn9Tiol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AoWB70LpEJNcdmDrumZZEaw.png" alt="Dialog showing after clicking the button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can place a breakpoint, debug and even make changes to the code and see it update on the fly (this requires a bit of work but does in fact work). But one of the cooler things is the ease of styling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nZD3PcIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AyCbOR4z-m81AEzCaly0xyw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nZD3PcIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AyCbOR4z-m81AEzCaly0xyw.jpeg" alt="theme.css enables styling the entire UI on the fly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setting the button color to red in the css produces an instant change without recompiling, reloading or anything:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I-3qAIcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AxU1ojbXwTfGGEHsxb1kjOQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-3qAIcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AxU1ojbXwTfGGEHsxb1kjOQ.png" alt="Results of styling the color to red"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build a native app we can select the appropriate target such as Android build, iOS, Mac Windows etc. This sends a build to Codename One servers which have all the tools installed and let you build iOS apps without a Mac. You can also generate a local build which I’ll below. Notice I’m simplifying a bit, since you also need a certificate. That’s a bit of a painful subject in general. Codename One makes that relatively simple with wizards etc. but that’s a bit of a big subject.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIXhnfUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ARrZm_7ywu1nXrxxJ_Q7BPg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIXhnfUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ARrZm_7ywu1nXrxxJ_Q7BPg.jpeg" alt="Sending a native build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can track the results in three places, the first is the build cloud from where you can download the resulting file, scan the QR code to install it on the device, copy or email the link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t5Qwe2Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A2wdEcmE2nSWcfWBQSF4tqQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t5Qwe2Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A2wdEcmE2nSWcfWBQSF4tqQ.png" alt="Cloud Build Results: https://cloud.codenameone.com/secure/index.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second way is through Codename One Settings which you can launch via maven too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--594bHzWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ACkjU2avMXtoXwcvRwVisHg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--594bHzWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ACkjU2avMXtoXwcvRwVisHg.jpeg" alt="Launching Codename One Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This launches a desktop app that’s a “one stop shop” for controlling Codename One. You can define project settings, generate certificates, monitor builds etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHrkpWMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AZ9En7VIUI8cYmXbkpbZ8mw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHrkpWMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AZ9En7VIUI8cYmXbkpbZ8mw.jpeg" alt="Device Builds section of Codename One Settings AKA Control Center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s also a native Android app which you can use to track builds and install them. For iOS you can open the web URL which will work well on device.&lt;/p&gt;

&lt;p&gt;Finally, we can build a native app without the build cloud. We can run the Xcode iOS project target or the Gradle Android Project maven target.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_t16GLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AZYLCnwBK4hWRGQnLMnjm-A.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_t16GLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AZYLCnwBK4hWRGQnLMnjm-A.jpeg" alt="xcode ios project maven target"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running the Xcode project Apples Xcode environment launches seamlessly with the generated native iOS project which we can run in the native iOS simulator or on the device! Notice that this requires a Mac. The Android Studio equivalent works everywhere…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtCpzCki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AONlxfqvv7XsjNex3OYlfmQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtCpzCki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AONlxfqvv7XsjNex3OYlfmQ.jpeg" alt="The native project in xcode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of the above is also in this tutorial video if you prefer that:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=rl6z7DD2-vg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDNnNmk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/rl6z7DD2-vg/0.jpg" alt="Build Cross-Platform Native Mobile Apps using Java/Kotlin for iOS, Android, Desktop &amp;amp; Web"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-note"&gt;
  &lt;/a&gt;
  Final Note
&lt;/h2&gt;

&lt;p&gt;Everything I wrote about is open source in our github project where we discuss a lot more. If you think we did a good job we could use your help in &lt;a href="//github.com/codenameone/CodenameOne/"&gt;starring&lt;/a&gt; and promoting our work here.&lt;/p&gt;

&lt;p&gt;If you have any questions please follow the codenameone tag on stackoverflow and ask anything with that tag. I make an effort to answer everything I can.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>java</category>
      <category>opensource</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>WAO: How do you test software?</title>
      <author>Nathan Kallman</author>
      <pubDate>Tue, 18 May 2021 19:12:08 +0000</pubDate>
      <link>https://dev.to/kallmanation/wao-how-do-you-test-software-l9f</link>
      <guid>https://dev.to/kallmanation/wao-how-do-you-test-software-l9f</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@michalmatlon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Michal Matlon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/wrong-answer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#wrong-answers-only"&gt;
  &lt;/a&gt;
  Wrong Answers Only
&lt;/h1&gt;

&lt;p&gt;How do you test your software?&lt;/p&gt;




&lt;p&gt;Comment your wrong answer!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>wronganswersonly</category>
    </item>
  </channel>
</rss>
