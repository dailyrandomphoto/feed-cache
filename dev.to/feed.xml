<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Gradient Custom Scroll Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Wed, 12 May 2021 14:26:49 +0000</pubDate>
      <link>https://dev.to/nikhil27b/gradient-custom-scroll-using-html-css-437m</link>
      <guid>https://dev.to/nikhil27b/gradient-custom-scroll-using-html-css-437m</guid>
      <description>&lt;p&gt;Hello, &lt;/p&gt;

&lt;p&gt;Today I created an Amazing Gradient Custom Scroll Using HTML &amp;amp; CSS. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/KKWVmZr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Lerna Hello World: How to Create a Monorepo for Multiple Node Packages</title>
      <author>Tom Zach</author>
      <pubDate>Wed, 12 May 2021 14:05:26 +0000</pubDate>
      <link>https://dev.to/aspecto/lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages-3188</link>
      <guid>https://dev.to/aspecto/lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages-3188</guid>
      <description>&lt;p&gt;In this post, I will walk you through how to use Lerna to manage, and publish, two packages under the same monorepo. Publishing will be done to my private GitHub repository under the GitHub packages registry.&lt;/p&gt;

&lt;p&gt;I decided to keep it as simple as possible, Lerna-only. No yarn workspaces to be found here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro-amp-motivation-for-using-lerna"&gt;
  &lt;/a&gt;
  Intro &amp;amp; Motivation For Using Lerna
&lt;/h2&gt;

&lt;p&gt;Using a monolith, you have a single code base.&lt;/p&gt;

&lt;p&gt;It is usually quite easy to share code between the different parts of the monolith, just import from the relevant file.&lt;/p&gt;

&lt;p&gt;When it comes to microservices, however, by definition – you would have more than one microservice.&lt;/p&gt;

&lt;p&gt;Most likely, you would have shared logic between the microservices, whether it is for everyday authentication purposes, data access, etc.&lt;/p&gt;

&lt;p&gt;Then, one might (rightfully) suggest – let’s use a package. Where do you store that package? Yet another repo. &lt;/p&gt;

&lt;p&gt;So far so good, but what happens when you have 35 shared packages between 18 different microservices? &lt;/p&gt;

&lt;p&gt;You’d agree that it can be quite a hassle to manage all of these repos.&lt;/p&gt;

&lt;p&gt;That is the part where &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;A tool that enables us to manage (and publish) as many npm packages as we want in a single repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-github-repository-creation"&gt;
  &lt;/a&gt;
  1. Github Repository Creation
&lt;/h2&gt;

&lt;p&gt;Create a new private github repository (I called mine learna but call it as you see fit).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-lerna-amp-setup-the-project-locally"&gt;
  &lt;/a&gt;
  2. Install Lerna &amp;amp; Setup the Project Locally
&lt;/h2&gt;

&lt;p&gt;In order to set up Lerna in our project, we first need to install it globally, create a git repository locally and run lerna init:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --global lerna
git init learna &amp;amp;&amp;amp; cd learna
lerna init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; there are two modes for initializing the Lerna repo independent and fixed. We’re going to use the default one for simplicity reasons. Essentially what it means is all version numbers are tied together and managed in top-level lerna.json. &lt;/p&gt;

&lt;p&gt;Read more about it here: &lt;a href="https://github.com/lerna/lerna#how-it-works"&gt;https://github.com/lerna/lerna#how-it-works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s link this to our GitHub repository (replace names accordingly):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin git@github.com:aspectom/learna.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-create-lerna-managed-packages"&gt;
  &lt;/a&gt;
  3. Create Lerna managed packages
&lt;/h2&gt;

&lt;p&gt;Create two packages, hello-world and aloha-world (with the default options):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna create hello-world
lerna create aloha-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;lerna create&lt;/code&gt; is Lerna’s way to help us create packages managed by a Lerna initialized repo.&lt;/p&gt;

&lt;p&gt;Inside both of the packages, modify the corresponding js files to have them greet as we want them to:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;aloha-world.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict';

module.exports = alohaWorld;

function alohaWorld() {
 console.log('Aloha World');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;hello-world.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict';

module.exports = helloWorld;

function helloWorld() {
 console.log('Hello World');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to make a modification in our package.json to contain the GitHub username of our account / organization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 "name": "@aspectom/aloha-world",
 "version": "0.0.0",
 "description": "&amp;gt; TODO: description",
 "author": "Tom Z &amp;lt;tom@aspecto.io&amp;gt;",
 "homepage": "",
 "license": "ISC",
 "main": "lib/aloha-world.js",
 "directories": {
   "lib": "lib",
   "test": "__tests__"
 },
 "files": [
   "lib"
 ],
 "repository": {
   "type": "git",
   "url": "git@github.com:aspectom/learna.git"
 },
 "scripts": {
   "test": "echo \"Error: run tests from root\" &amp;amp;&amp;amp; exit 1"
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this for both aloha-world and hello-world, and make sure to replace my GitHub username with your own.&lt;/p&gt;

&lt;p&gt;PS: While we’re making managing multiple repos easier, here’s how you can make running multiple microservices locally feels like a walk in the park. It’s a simple, easy-to-use hack we, at &lt;a href="https://www.aspecto.io/"&gt;Aspecto&lt;/a&gt;, came up with to make this process less messy – It’s called the &lt;a href="https://www.aspecto.io/blog/easy-way-to-route-traffic-between-microservices-during-development/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages"&gt;local router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/blog/easy-way-to-route-traffic-between-microservices-during-development/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zDETPs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3ubszuzm7isd8fbn0bg.png" alt="How to Route Traffic Between Microservices During Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point you should have a directory structure that looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0S2JdLEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5rwkn400yeckkg7zp2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0S2JdLEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5rwkn400yeckkg7zp2q.png" alt="directory structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the root of the repository, add an empty LICENSE.md.&lt;/p&gt;

&lt;p&gt;This will be necessary later to avoid this error when publishing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna WARN ENOLICENSE Packages aloha-world and hello-world are missing a license.
lerna WARN ENOLICENSE One way to fix this is to add a LICENSE.md file to the root of this repository.
lerna WARN ENOLICENSE See https://choosealicense.com for additional guidance.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s make our initial commit to GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .  
git commit -m 'Initial commit'
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-generating-a-github-personal-access-token"&gt;
  &lt;/a&gt;
  4. Generating a GitHub Personal Access Token
&lt;/h2&gt;

&lt;p&gt;First, create a GitHub personal access token to publish and read packages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://github.com/settings/profile"&gt;https://github.com/settings/profile&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;Click on developer settings&lt;/li&gt;
&lt;li&gt;Click on personal access token&lt;/li&gt;
&lt;li&gt;Select write &amp;amp; read packages, which should also mark the repo automatically&lt;/li&gt;
&lt;li&gt;Add a note so that you remember what it’s about and click on generate the token.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbD2RoHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tp52zh2s79dkci58ntg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbD2RoHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tp52zh2s79dkci58ntg.png" alt="Generating a GitHub Personal Access Token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go to your .npmrc file and add the following lines (can be local .npmrc in each repo or global ~/.npmrc, but beware – better to not commit this file):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//npm.pkg.github.com/:_authToken=TOKEN
@aspectom:registry=https://npm.pkg.github.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do not forget&lt;/em&gt;&lt;/strong&gt; to replace TOKEN with the token you have just created, and aspectom with your own GitHub account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-publishing-the-packages-to-gpr"&gt;
  &lt;/a&gt;
  5. Publishing The Packages to GPR
&lt;/h2&gt;

&lt;p&gt;Now let’s publish these packages to the GitHub package registry so that we can use them in a different project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna publish --registry=https://npm.pkg.github.com/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you had the following error, you probably omitted the registry part from lerna publish:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;? Are you sure you want to publish these packages? Yes
lerna info execute Skipping releases
lerna info git Pushing tags...
Enter passphrase for key '/Users/tom/.ssh/aspecto_id_rsa': 
lerna info publish Publishing packages to npm...
lerna info Verifying npm credentials
lerna http fetch GET 401 https://registry.npmjs.org/-/npm/v1/user 1370ms
401 Unauthorized - GET https://registry.npmjs.org/-/npm/v1/user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since it tries to go to npm registry instead of GitHub packages.&lt;/p&gt;

&lt;p&gt;And if you had this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna info publish Publishing packages to npm...
lerna notice Skipping all user and access validation due to third-party registry
lerna notice Make sure you're authenticated properly ¯\_(ツ)_/¯
lerna http fetch PUT 404 https://npm.pkg.github.com/hello-world 694ms
lerna ERR! E404 404 Not Found - PUT https://npm.pkg.github.com/hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You probably forgot to use @YOUR_GITHUB/package-name in one of your package.json files under the “packages” folder.&lt;/p&gt;

&lt;p&gt;In my case – it was the hello-world package.&lt;/p&gt;

&lt;p&gt;After resolving issues (if any) you should receive a success message, and looking at the repository you can see you have 2 packages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_1aV1K2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bar114sjqaseyjkz72xb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_1aV1K2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bar114sjqaseyjkz72xb.png" alt="Two packages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any time you want to publish, you have to make a change and commit it otherwise lerna will say that there’s no change.&lt;/p&gt;

&lt;p&gt;You can make the change or force Lerna to publish by adding &lt;code&gt;--force-publish&lt;/code&gt; to the &lt;code&gt;lerna publish&lt;/code&gt; command, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna publish --registry=https://npm.pkg.github.com/ --force-publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-using-the-packages-in-a-different-project"&gt;
  &lt;/a&gt;
  6. Using The Packages in a Different Project
&lt;/h2&gt;

&lt;p&gt;First, create a project to consume the aloha-world and hello-world packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir use-lerna-repo
cd use-lerna-repo/
yarn init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming you’ve used global .npmrc, no further steps needed to consume the packages with yarn or npm install.&lt;/p&gt;

&lt;p&gt;If you used local npmrc in your lerna repo, copy it to the use-lerna-repo root folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @aspectom/aloha-world
yarn add @aspectom/hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an index.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const helloWorld = require('@aspectom/hello-world');
const alohaWorld = require('@aspectom/aloha-world');

helloWorld();
alohaWorld();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Package.json for this project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 "name": "use-lerna-repo",
 "version": "1.0.0",
 "main": "index.js",
 "license": "MIT",
 "scripts": {
   "start": "node index.js"
 },
 "dependencies": {
   "@aspectom/aloha-world": "^0.0.4",
   "@aspectom/hello-world": "^0.0.4"
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run node index.js and you should get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node index.js
Hello World
Aloha World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila! We have just finished creating, publishing, and consuming our lerna-managed packages in the one monorepo.&lt;/p&gt;

&lt;p&gt;Good luck, we at Aspecto wish you years of happy packaging and a lot of &lt;a href="https://github.com/aspecto-io"&gt;downloads&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>node</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I navigate tmux in 2021</title>
      <author>Waylon Walker</author>
      <pubDate>Wed, 12 May 2021 13:54:07 +0000</pubDate>
      <link>https://dev.to/waylonwalker/how-i-navigate-tmux-in-2021-2ina</link>
      <guid>https://dev.to/waylonwalker/how-i-navigate-tmux-in-2021-2ina</guid>
      <description>&lt;p&gt;In 2021 I changed the way I navigate between tmux sessions big time.  Now I can create, kill, switch with ease, and generally keep work separated into logical groups.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🔗 Check out the post on &lt;a href="https://waylonwalker.com/tmux-nav-2021/"&gt;https://waylonwalker.com/tmux-nav-2021/&lt;/a&gt; to speed up or slow down the recordings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chris-toomeys-tmux-course"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/christoomey"&gt;Chris Toomey's&lt;/a&gt; Tmux Course
&lt;/h2&gt;

&lt;p&gt;I took Chris's &lt;a href="https://thoughtbot.com/upcase/tmux"&gt;tmux course&lt;/a&gt; in December 2020 and it was fantastic.  Even as a seasoned tmux user, I learned quite a bit.  Before the course, I was proficient in navigating within each of my tmux sessions but rarely started more than one session.  A few months later, I have adopted a lot of what I learned from Chris and made it my own.&lt;/p&gt;

&lt;p&gt;I am now keeping projects to their own session and can move between them fluidly with just a few keystrokes.  For high-traffic projects, I have them bound to a single keystroke for instant switching.  This change has been a game-changer from the mess of windows I used to have and the nightmare it was to find work I was doing and end up duplicating project work in two separate windows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 &lt;strong&gt;NOTE:&lt;/strong&gt; Some of my config comes straight from the course, and some of it has been extended to my liking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's take a quick look at how I am navigating through tmux on a day-to-day basis.&lt;/p&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;👆 Overview of how I navigate tmux&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tmux-ls"&gt;
  &lt;/a&gt;
  tmux ls
&lt;/h2&gt;

&lt;p&gt;Throughout this article, I have several recordings showing how I use manage sessions with my keybindings.  I will often run a &lt;code&gt;tmux ls&lt;/code&gt; command to highlight running sessions at various points to help guide the viewer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ta"&gt;
  &lt;/a&gt;
  ta
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;my attach/session switch script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the heart of my tmux navigation is a highly customized version of Chris's tat script that I renamed &lt;code&gt;ta&lt;/code&gt;.  Many folks add this to their bashrc &lt;code&gt;alias ta=tmux attach&lt;/code&gt;.  Simply calling ta will do the same thing as shown below.  If you're in a tmux session, it does nothing, and if you're not in one, it will attach you to the first one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;get the full &lt;a href="https://github.com/WaylonWalker/devtainer/blob/main/bin/ta"&gt;script&lt;/a&gt; from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;👆 attaching to a session by default&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; I add the &lt;code&gt;ta&lt;/code&gt; command to keep myself in a tmux session at all times.  Whenever I open my terminal, I am automatically dropped into a tmux session, but if I am opening a split while in tmux it's smart enough to know not to nest tmux sessions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another article can dive into my &lt;code&gt;ta&lt;/code&gt; command. This one is more about the methodology, workflow, and keybindings to get me there.  It's available in my &lt;a href="https://github.com/WaylonWalker/devtainer/blob/main/bin/ta"&gt;devtainer repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-theres-more"&gt;
  &lt;/a&gt;
  but there's more
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;gettin fuzzy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Give it a directory, and a &lt;code&gt;fzy&lt;/code&gt; dropdown will let you choose a subdirectory to start your session in, and name the session after that directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ta ~/git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🔥 Bonus, use direnv to automatically set settings, echo your git status, activate your environment or whatever else you need.&lt;/p&gt;
&lt;/blockquote&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;👆 give it a directory, it will ask for input to which project and start a new named session in that directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that starting from outside currently does not start in a split layout like it does when starting from within tmux.  I am still playing with this, but generally, I want my terminal session to be plain when I first start my terminal. I usually am starting work after the first default session.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🤔 I still use both fzy and fzf. It probably doesn't make sense to use both, but I am currently giving fzy a try.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prefixw"&gt;
  &lt;/a&gt;
  prefix+w
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;tmux choose-tree&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By default, tmux comes with a &lt;code&gt;tmux choose-tree&lt;/code&gt; command bound to &lt;code&gt;prefix+w&lt;/code&gt;, which opens in full screen.  The upper section of the screen will show every window opened.  While selected, you can show the splits in each window by hitting l, or fold it with h. You can search for a session name by hitting /.&lt;/p&gt;


    
    
    Sorry, your browser doesn't support embedded videos.




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ~/.tmux.conf&lt;/span&gt;

&lt;span class="c"&gt;# expanded to show all splits&lt;/span&gt;
&lt;span class="nb"&gt;bind &lt;/span&gt;s choose-tree
&lt;span class="c"&gt;# simpler window to show only sessions&lt;/span&gt;
&lt;span class="nb"&gt;bind &lt;/span&gt;S choose-session
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#keybindings-in-choosetreechoosesession"&gt;
  &lt;/a&gt;
  Keybindings in choose-tree/choose-session
&lt;/h3&gt;

&lt;p&gt;The default keybindings of the tmux &lt;code&gt;choose-tree&lt;/code&gt; and &lt;code&gt;choose-session&lt;/code&gt; that I use are listed below.  J/K are very intuitive, but I just learned about h,l,/.  When I do use one of these, the / (search) can be super helpful to find sessions/windows faster.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;action&lt;/th&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fold&lt;/td&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unfold&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;up&lt;/td&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;down&lt;/td&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prefixcw-prefixcg"&gt;
  &lt;/a&gt;
  prefix+c-w prefix+c-g
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;open a project&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have set up to make it easy to open my non-work projects &lt;em&gt;(in my ~/git directory)&lt;/em&gt; and my work projects &lt;em&gt;(in my ~/work directory)&lt;/em&gt;.  I bound &lt;code&gt;prefix+c-g&lt;/code&gt; and &lt;code&gt;prefix+c-w&lt;/code&gt; to open a new session in their respective directories.  I like mapping common prefix commands with control to keep my pinky mashed on that control key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ~/.tmux.conf&lt;/span&gt;

&lt;span class="nb"&gt;bind &lt;/span&gt;C-w new-window &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"work-session-picker"&lt;/span&gt; &lt;span class="s2"&gt;"ta ~/work"&lt;/span&gt;
&lt;span class="nb"&gt;bind &lt;/span&gt;C-g new-window &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"git-session-picker"&lt;/span&gt; &lt;span class="s2"&gt;"ta ~/git"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




    
    
    Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#prefixcj"&gt;
  &lt;/a&gt;
  prefix+c-j
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;jump to session&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that I have &lt;code&gt;ta&lt;/code&gt; rocking with a good create or attach setup, I am rarely toggling through a list of running sessions, but I am doing it with &lt;code&gt;prefix+c-j&lt;/code&gt; when I do it. Keeping my finger on control and pressing &lt;code&gt;&amp;lt;space&amp;gt;+j&lt;/code&gt;.  This keybinding uses fzf to fuzzy match to an existing session and attach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;C-j new-window &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"session-switcher"&lt;/span&gt; &lt;span class="s2"&gt;"tmux list-sessions | sed -E 's/:.*&lt;/span&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;&lt;span class="s2"&gt;/' | grep -v &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;^&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;tmux display-message &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s1"&gt;'#S'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\$\"&lt;/span&gt;&lt;span class="s2"&gt; | fzf --reverse | xargs tmux switch-client -t"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




    
    
    Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#mn-mp"&gt;
  &lt;/a&gt;
  M-N M-P
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;next/prev&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next and Previous sessions.  This is super handy when working with under 3 sessions to be able to cycle through sessions holding &lt;code&gt;shift+alt&lt;/code&gt; and pressing &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#tkill"&gt;
  &lt;/a&gt;
  tkill
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;time to clean up&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's easy to get a long crufty list of sessions running throughout the day.  Typically this is not too bad on system resources compared to running vscode in every working project, but it does make it more challenging to manage and wade through the sessions list.  I use a handy shell alias that's been in my zshrc for quite some time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;tkill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"for s in &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;(tmux list-sessions | awk '{print &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;1}' | rg ':' -r '' | fzy); do tmux kill-session -t &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;s; done;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I don't have this one set up with a nice hotkey, but it works for my fingers.  I often pop open a lower split(&lt;code&gt;M-s&lt;/code&gt;), run &lt;code&gt;tkill&lt;/code&gt;, and close (&lt;code&gt;M-x&lt;/code&gt;).&lt;/p&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#last-session"&gt;
  &lt;/a&gt;
  Last Session
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;back&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While &lt;code&gt;M-n&lt;/code&gt; and &lt;code&gt;M-p&lt;/code&gt; work well with a small, focused number of sessions, I often end up with too many sessions open, and it's not efficient to remember a double &lt;code&gt;M-N&lt;/code&gt; followed by a triple &lt;code&gt;M-P&lt;/code&gt; to get back and forth.  Most often, I want to get between two sessions quickly, no matter what the order is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-B switch-client &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-b switch-client &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;Once I get two sessions back to back, I can switch between them with insane speed and precision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#more-precision"&gt;
  &lt;/a&gt;
  More Precision
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;one keystroke&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The final layer of precision is for my most current project. I need to get to these with a single keystroke.  These are bound to a set of keybindings that were readily available, just above the home row.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;C-t new-session &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; todo &lt;span class="s2"&gt;"cd ~/work/todo &amp;amp;&amp;amp; nvim -O backlog.md doing.md done.md"&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-i new-session &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; ww3 &lt;span class="s2"&gt;"cd ~/git/ww3/ &amp;amp;&amp;amp; nvim"&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-o new-session &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; images_waylonwalker_com &lt;span class="s2"&gt;"cd ~/git/images.waylonwalker.com/ &amp;amp;&amp;amp; nvim"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;These few directories are always at my fingertips, encouraging me to keep better notes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And yes, I did steal this last one from &lt;a href="https://twitter.com/ThePrimeagen"&gt;Harpoon-man&lt;/a&gt; By The Way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hub-and-spoke"&gt;
  &lt;/a&gt;
  Hub and Spoke
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;M-i M-b&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have really been digging this hub and spoke workflow where I am rocking away on a project hit &lt;code&gt;M-I&lt;/code&gt;, take some notes then hit &lt;code&gt;M-b&lt;/code&gt; to get back to where I was.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--darLnE-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/tmux-nav-hub-spoke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--darLnE-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/tmux-nav-hub-spoke.png" alt="hub and spoke"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Model of my current workflow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example-workflow"&gt;
  &lt;/a&gt;
  Example workflow
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;open tmux session with ta&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prefix+c-g&lt;/code&gt; start work in a project using a fuzzy matcher&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-t&lt;/code&gt; over to my todo list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-b&lt;/code&gt; back to my project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-i&lt;/code&gt; to my blog to look up notes/make notes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-b&lt;/code&gt; back to my project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prefix+c-g&lt;/code&gt; start work in another project using a fuzzy matcher&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-t&lt;/code&gt; over to my todo list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-b&lt;/code&gt; back to my project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prefix+c-j&lt;/code&gt; fuzzy back to the first project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-b&lt;/code&gt; back to the second project&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Please let me know your thoughts.  &lt;a href="https://twitter.com/_WaylonWalker"&gt;@waylonwalker&lt;/a&gt;, this one took me a bit longer to put together with all of the animated gif's, but I think it helps visually show how I navigate tmux every day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#please-give-it-a-share-if-you-liked-it"&gt;
  &lt;/a&gt;
  Please give it a share if you liked it
&lt;/h3&gt;

&lt;p&gt;If you liked it, give it a share and tag me on &lt;a href="https://twitter.com/_WaylonWalker"&gt;twitter&lt;/a&gt;.  I don't often ask but this article took a bit more to put together than my normal post.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#check-out-these-related-posts"&gt;
  &lt;/a&gt;
  Check Out These Related Posts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/symlink-gallery/"&gt;https://waylonwalker.com/symlink-gallery/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/neovim-live-substitution/"&gt;https://waylonwalker.com/neovim-live-substitution/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/find-replace/"&gt;https://waylonwalker.com/find-replace/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bash</category>
      <category>linux</category>
      <category>productivity</category>
    </item>
    <item>
      <title>#30DaysOfAppwrite : Email Verification and Forgot Password</title>
      <author>Christy Jacob</author>
      <pubDate>Wed, 12 May 2021 13:13:30 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-email-verification-and-forgot-password-420o</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-email-verification-and-forgot-password-420o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focused at giving developers a walk through of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these &lt;br&gt;
concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#account-verification"&gt;
  &lt;/a&gt;
  Account verification
&lt;/h1&gt;

&lt;p&gt;Welcome to Day 12 👋. Email Verification and Password Recovery are two crucial features for any app! Let's learn how we can implement both of these using Appwrite. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This requires that you have SMTP setup on Appwrite. Check out &lt;a href="https://dev.to/appwrite/30daysofappwrite-getting-started-with-smtp-1e2e"&gt;yesterday's blog&lt;/a&gt; where we teach you how to enable SMTP on Appwrite.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start with Email Verification. Email Verification is not needed with OAuth2 login since the e-mail address in this case is already verified by the login provider.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#initialise-verification"&gt;
  &lt;/a&gt;
  Initialise Verification
&lt;/h2&gt;

&lt;p&gt;To verify an account, you must call the &lt;a href="https://appwrite.io/docs/client/account?sdk=web#accountCreateVerification"&gt;&lt;code&gt;createVerification(url)&lt;/code&gt;&lt;/a&gt; method after you have already created a session for your user. This method will send a verification message to your users' email address to confirm they are the valid owners of that address. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the &lt;code&gt;userId&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt; parameters that have been provided to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createVerification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://myappdomain/verifyEmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The URL gets these two parameters, required for the next step, appended to the URL as query parameters. For example, if you pass &lt;code&gt;http://myappdomain/verify&lt;/code&gt; to the method, the URL provided to the user via e-mail will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://localhost/verifyEmail?userId=XXXX&amp;amp;secret=YYYY&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-email-verification"&gt;
  &lt;/a&gt;
  Complete Email Verification
&lt;/h2&gt;

&lt;p&gt;Now that the user is able to initialise the verification process of their account, we need to complete it by handling the redirect from the URL provided in the e-mail.&lt;/p&gt;

&lt;p&gt;The first step is retrieving the &lt;code&gt;userId&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt; values provided in the URL. In JavaScript we can get these like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;secret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these values we now can complete the e-mail verification using the &lt;a href="https://appwrite.io/docs/client/account#accountUpdateVerification"&gt;&lt;code&gt;updateVerification(userId, secret)&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateVerification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have successfully verified a user!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure that this method is executed only on the URL provided in the email. In our example, this would be &lt;code&gt;http://myappdomain/verifyEmail&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#full-example"&gt;
  &lt;/a&gt;
  Full Example
&lt;/h2&gt;

&lt;p&gt;Great, now let's implement the above functionality in our demo app. In &lt;code&gt;src/lib/Navigation.svelte&lt;/code&gt; create a button to display the verification status of the user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emailVerification&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;startEmailVerification&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Not&lt;/span&gt; &lt;span class="nx"&gt;Verified&lt;/span&gt; &lt;span class="err"&gt;❌&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{:&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Verified&lt;/span&gt; &lt;span class="err"&gt;✅&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/if&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; section add a &lt;code&gt;startEmailVerification&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startEmailVerification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/#/verifyEmail`&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createVerification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Verification Email sent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;src/appwrite.js&lt;/code&gt; create the following functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;createVerification&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createVerification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nx"&gt;completeEmailVerification&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateVerification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to create a new page in our app to receive the redirect from the verification email and complete the verification.&lt;/p&gt;

&lt;p&gt;Create a new file &lt;code&gt;src/routes/VerifyEmail.svelte&lt;/code&gt; and add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urlSearchParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlSearchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secret&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlSearchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completeEmailVerification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completeEmailVerification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;completeEmailVerification&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to create a route for this page in &lt;code&gt;src/App.svelte&lt;/code&gt; 😊&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;VerifyEmail&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes/VerifyEmail.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/verifyEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VerifyEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great work! You have just enabled &lt;code&gt;Email Verification&lt;/code&gt; for your users without writing a single line of Backend Code! Now it's time to enable &lt;code&gt;Password Recovery&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#password-recovery"&gt;
  &lt;/a&gt;
  Password Recovery
&lt;/h1&gt;

&lt;p&gt;Now that user can verify their account, we also need to give them the ability to recover their account in case they lose their password. The flow for this is very similar to the one used with verifying an account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialise-password-recovery"&gt;
  &lt;/a&gt;
  Initialise Password Recovery
&lt;/h2&gt;

&lt;p&gt;The first step is to send the user an email with a temporary secret key for password reset in a URL using the &lt;a href="https://appwrite.io/docs/client/account#accountCreateRecovery"&gt;&lt;code&gt;createRecovery(email, url)&lt;/code&gt;&lt;/a&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRecovery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://myappdomain/resetPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this call was successful, the user is sent an e-mail providing a URL that has a &lt;code&gt;secret&lt;/code&gt; and &lt;code&gt;userid&lt;/code&gt; value appended to the URL passed in &lt;code&gt;createRecovery(email, url)&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-password-recovery"&gt;
  &lt;/a&gt;
  Complete Password Recovery
&lt;/h2&gt;

&lt;p&gt;The recover page should prompt the user to enter a new password twice and on submit call the &lt;a href="https://appwrite.io/docs/client/account#accountUpdateRecovery"&gt;&lt;code&gt;updateRecovery(userId, secret, password, passwordAgain)&lt;/code&gt;&lt;/a&gt;. Just like the previous scenario, we are grabbing the &lt;code&gt;userId&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt; value from the URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;secret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these values we can complete the password recovery using the &lt;code&gt;updateRecovery(userId, secret, password, passwordAgain)&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Assign the new password choosen by the user&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;passwordAgain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateRecovery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;paswordAgain&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have successfully reset the user's password!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-example"&gt;
  &lt;/a&gt;
  Full Example
&lt;/h2&gt;

&lt;p&gt;Great, time to code! In &lt;code&gt;src/routes/Login.svelte&lt;/code&gt; create a button to allow the user to recover their password&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;on:click&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;preventDefault=&lt;/span&gt;&lt;span class="s"&gt;{forgotPassword}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Forgot Password?&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; section add a &lt;code&gt;forgotPassword&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forgotPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/#/resetPassword`&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forgotPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Recovery Email Sent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;src/appwrite.js&lt;/code&gt; create the following functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;....&lt;/span&gt;

&lt;span class="nx"&gt;forgotPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRecovery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nx"&gt;completePasswordRecovery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;confirmPass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateRecovery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;confirmPass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to create a new page in our app to receive the redirect from the password recovery email. Create a new file &lt;code&gt;src/routes/ResetPassword.svelte&lt;/code&gt; and add the following code to it. &lt;/p&gt;

&lt;p&gt;Don't be overwhelmed. It simply fetches &lt;code&gt;userId&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt; from the URL params, asks the user to enter the new password, makes a request to &lt;code&gt;updateRecovery&lt;/code&gt; and redirects the user to the login page on success.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urlSearchParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlSearchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secret&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlSearchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;confirmPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completePasswordRecovery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;confirmPassword&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/#/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Reset your password&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;on:submit&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;preventDefault=&lt;/span&gt;&lt;span class="s"&gt;{submit}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;New Password&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
            &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{password}&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
            &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter New Password"&lt;/span&gt;
            &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
            &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"confirmPassword"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;Confirm Password&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
            &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{confirmPassword}&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
            &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Confirm Password"&lt;/span&gt;
            &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"confirmPassword"&lt;/span&gt;
            &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reset Password&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to create a route for this page in &lt;code&gt;src/App.svelte&lt;/code&gt; 😊&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ResetPassword&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes/ResetPassword.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/resetPassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ResetPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/verifyEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VerifyEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! If all went well, your users will now be able to reset their passwords!! You can always check &lt;a href="https://github.com/christyjacob4/30-days-of-appwrite/pull/5/files"&gt;this PR&lt;/a&gt; to see how we implemented this functionality. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>flutter</category>
      <category>webdev</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>D365 F&amp;O and PowerApps (2)</title>
      <author>Rob vanBrandenburg</author>
      <pubDate>Wed, 12 May 2021 12:54:44 +0000</pubDate>
      <link>https://dev.to/robvanb/d365-f-o-and-powerapps-2-27eb</link>
      <guid>https://dev.to/robvanb/d365-f-o-and-powerapps-2-27eb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This is part 2 of using PowerApps with Microsoft Dynamics 365 Finance and Operations. Part 1 is &lt;a href="https://dev.to/robvanb/d365-f-o-and-powerapps-3m1k"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is going to be a short post, as there is not much to it.&lt;br&gt;
As seen in &lt;a href="https://dev.to/robvanb/d365-f-o-and-powerapps-3m1k"&gt;part 1&lt;/a&gt;, you can link to a (canvas) PowerApp from the D365 F&amp;amp;O UI by using the 'PowerApp' button.&lt;br&gt;
However, you can also 'embed' the (canvas) PowerApp in the UI, but this has to be done through actual F&amp;amp;O development.&lt;/p&gt;

&lt;p&gt;First, this doesn't make a lot of sense. The whole idea of the NoCode/LowCode PowerApps is that you do NOT need a developer (and consequent downtime and deployment).&lt;br&gt;
But since the option is there, I figured I'd try it out.&lt;/p&gt;

&lt;p&gt;The official documentation is here:&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/fin-ops/get-started/embed-power-apps#developer-modeling-a-canvas-app-on-a-form"&gt;https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/fin-ops/get-started/embed-power-apps#developer-modeling-a-canvas-app-on-a-form&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I know the example below makes no business sense. I'm showing sales order lines in the PowerApp that are already present in the F&amp;amp;O form that I add the App to. But since I already had the App from part 1, I figured I'd just reuse it to show the concept.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-the-app-to-a-screen-form"&gt;
  &lt;/a&gt;
  Adding the App to a screen (form)
&lt;/h1&gt;

&lt;p&gt;The actual dev task is very simple. For this example we will be adding the App from part 1 in a new tab in the 'Sales Orders' inquiry form. ('Retail and Commerce -&amp;gt; Inquiries and Reports -&amp;gt; Sales Orders').&lt;/p&gt;

&lt;p&gt;The form name is 'MCRSalesTableOrderHistory', so we first create an extension to that form in Visual Studio.&lt;br&gt;
Then we simply add a tab page, and add a 'PowerAppsHost' control to the page.&lt;br&gt;
In the properties we set the AppId and the field that we want to pass to the App as the key. (Review &lt;a href="https://dev.to/robvanb/d365-f-o-and-powerapps-3m1k"&gt;Part 1&lt;/a&gt; for details)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EZFRVOHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knjemcct1h5poknli9p3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EZFRVOHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knjemcct1h5poknli9p3.jpg" alt="VS_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The scaling of the App in the UI is pretty terrible. I manually set the height and width in the control's properties, but it still renders it with a very tiny font. &lt;br&gt;
I have not tried to modify the actual App to use a larger font, but in my opinion this should not be necessary.&lt;br&gt;
In any case, it &lt;em&gt;does&lt;/em&gt; work, the order lines of the order I selected in the main grid are displayed in the PowerApp.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJKF_sms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unurc82d4dzxpccmtba8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJKF_sms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unurc82d4dzxpccmtba8.jpg" alt="FO_form_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you see where I set the properties to try and make it bigger (did not work):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HiwA8Ti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j59cw50rlixrix907w44.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HiwA8Ti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j59cw50rlixrix907w44.jpg" alt="VS_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You can add embedded PowerApps directly to the F&amp;amp;O UI. It works. However, I have trouble finding a scenario where you would want to do this.&lt;br&gt;
The only thing I can think of is when you have a PowerApp that serves up data/functionality of an external (non-F&amp;amp;O) system.&lt;br&gt;
But still the rendering in the UI looks pretty bad.&lt;/p&gt;

</description>
      <category>dynamics365</category>
      <category>d365</category>
      <category>dynamic</category>
      <category>powerapps</category>
    </item>
    <item>
      <title>I made 100 CSS loaders for your next project</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 12 May 2021 12:54:27 +0000</pubDate>
      <link>https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje</link>
      <guid>https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje</guid>
      <description>&lt;p&gt;You either make a super fast website/application or you use loaders. I think most of us fall into the second category.&lt;/p&gt;

&lt;p&gt;Now the question is: what loader should I use? the "loading" text, the 3 dots, a progress bar, the Batman symbol?? &lt;/p&gt;

&lt;p&gt;You no more need to bother yourself searching for loaders. Find below a collection of 100 different CSS loaders. From the simple one to the more fancy one, you will find the most suitable for your project.&lt;/p&gt;

&lt;p&gt;Each loader is done using a &lt;strong&gt;single&lt;/strong&gt; element. Yes, only one &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, nothing more. You don't have to copy a ton of code. Add a class to your div and start loading!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-classic"&gt;The Classic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-infinity"&gt;The Infinity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-dots"&gt;The Dots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-bars"&gt;The Bars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-spinner"&gt;The Spinner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-continuous"&gt;The Continuous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-progress"&gt;The Progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-wobbling"&gt;The Wobbling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-shapes"&gt;The Shapes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-pulsing"&gt;The Pulsing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-classic"&gt;
  &lt;/a&gt;
  The Classic
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/yLMeVex?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-infinity"&gt;
  &lt;/a&gt;
  The Infinity
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ExWPNKB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-dots"&gt;
  &lt;/a&gt;
  The Dots
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWpKbez?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-bars"&gt;
  &lt;/a&gt;
  The Bars
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/mdWVOrR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-spinner"&gt;
  &lt;/a&gt;
  The Spinner
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/poegNEO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-continuous"&gt;
  &lt;/a&gt;
  The Continuous
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRWoNNm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-progress"&gt;
  &lt;/a&gt;
  The Progress
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/bGqEBgL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-wobbling"&gt;
  &lt;/a&gt;
  The Wobbling
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzZwpZG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-shapes"&gt;
  &lt;/a&gt;
  The Shapes
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/eYvJBvo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-pulsing"&gt;
  &lt;/a&gt;
  The Pulsing
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/bGqEBWv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;I hope you liked this first collection of CSS loaders. Yes, it's only the first one and more will come! stay tuned and follow me if you don't want to miss the next collection. 👍&lt;/p&gt;

&lt;p&gt;Before you leave don't forget to check the underline/overlay collection I made. More than 100 different animations as well:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/100-underline-overlay-animation-the-ultimate-css-collection-4p40" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;100 underline/overlay  animations | The ultimate CSS collection 🥇&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Mar 16 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Backstage: cryptographic R&amp;D internship at Cossack Labs</title>
      <author>Cossack Labs</author>
      <pubDate>Wed, 12 May 2021 12:52:23 +0000</pubDate>
      <link>https://dev.to/cossacklabs/backstage-cryptographic-r-d-internship-at-cossack-labs-24dg</link>
      <guid>https://dev.to/cossacklabs/backstage-cryptographic-r-d-internship-at-cossack-labs-24dg</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;"Cryptography is easy, getting into cryptography is hard"—yay or nay? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey! I'm &lt;a href="https://twitter.com/vixentael"&gt;Anastasiia&lt;/a&gt; from &lt;a href="https://www.cossacklabs.com/"&gt;Cossack Labs&lt;/a&gt;. We are a data protection company and our work is closely related to applied cryptography, both traditional and cutting-edge. Recently, we’ve launched an invite-only cryptographic internship, aimed at computer science students who want to work in the applied crypto space.&lt;/p&gt;

&lt;p&gt;Here I’d like to share some backstage details about our crypto R&amp;amp;D internship program.&lt;/p&gt;

&lt;p&gt;🔸 &lt;strong&gt;Crypto R&amp;amp;D at Cossack Labs&lt;/strong&gt; 🔸&lt;/p&gt;

&lt;p&gt;Crypto R&amp;amp;D has been our main area of interest since Cossack Labs’ launch in 2014, and based on R&amp;amp;D we've built our product line.&lt;/p&gt;

&lt;p&gt;Being focused on data security, we developed &lt;a href="https://www.cossacklabs.com/products/"&gt;a number of data protection solutions&lt;/a&gt;: open source crypto libraries, &lt;a href="https://github.com/cossacklabs/acra"&gt;software for transparent data encryption in databases&lt;/a&gt;, verifiable audit logging system, a framework for operations on end-to-end encrypted data, etc.&lt;/p&gt;

&lt;p&gt;Our crypto R&amp;amp;D engineers work on &lt;a href="https://www.cossacklabs.com/whitepapers/"&gt;complex and interesting issues&lt;/a&gt; at the forefront of modern cryptography: zero knowledge proofs, private information retrieval, smpc, searchable encryption, transaction privacy, and other applied issues in this domain. &lt;/p&gt;

&lt;p&gt;We cover a full cycle of modern cryptographic problems: from scientific papers and math, test implementations and PoCs — to production-ready implementations of cryptographic controls in software and integration with third-party infrastructures.&lt;/p&gt;

&lt;p&gt;🔸 &lt;strong&gt;Who are crypto R&amp;amp;D engineers?&lt;/strong&gt; 🔸&lt;/p&gt;

&lt;p&gt;Crypto R&amp;amp;D lies at the intersection of multiple technologies: cryptography, software engineering, information security, and hardware.&lt;/p&gt;

&lt;p&gt;So, our crypto R&amp;amp;D engineers are either engineers with a cryptological education and a good understanding of the software development process and limitations (from performance to maintainability), or software engineers with deep experience in applied cryptography.&lt;/p&gt;

&lt;p&gt;🔸 &lt;strong&gt;Crypto R&amp;amp;D internship&lt;/strong&gt; 🔸&lt;/p&gt;

&lt;p&gt;In general, crypto R&amp;amp;D engineering is a rare specialisation that demands to develop more than a few skills.&lt;/p&gt;

&lt;p&gt;Not many universities have rich &amp;amp; real-world cryptology education, which makes this profession even harder to enter. During the job interviews, we often see how big is the gap between university knowledge and &lt;a href="https://www.iacr.org/cryptodb/data/bestpapers.php"&gt;the discussions in a global cryptographic community&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To fill this gap, we launched our own internship for computer science students interested in cryptography. Currently, we’re beta testing the program with several interns involved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The training program is very practical and consists of several large topics to be covered in 4-6 months. Our interns are undergrad students, so they combine university courses with the internship and work with us in a part-time paid remote job mode — with flexible hours, regular calls and reviews, mentored by me and my colleagues who are academic cryptographers, software and security engineers.&lt;/p&gt;

&lt;p&gt;🔸 &lt;strong&gt;Who and why needs crypto R&amp;amp;D internship&lt;/strong&gt; 🔸&lt;/p&gt;

&lt;p&gt;For students 🎓, the internship is a chance to learn more about modern cryptography &amp;amp; data protection and find out if it fits their future career expectations. Also, it’s a great opportunity to work with a group of software developers and applied cryptographers, leave a track record in open source projects, practice teamwork, analyze scientific papers, and present their own research results.&lt;/p&gt;

&lt;p&gt;For us 🔐, the internship is an option to "lure" students into this interesting field, give them the advantage to meet cutting-edge cryptography, and, of course, tutor specialists that can work with us at the applied cryptography forefront.&lt;/p&gt;

&lt;p&gt;🔹 &lt;strong&gt;Internship agenda&lt;/strong&gt; 🔹&lt;/p&gt;

&lt;p&gt;Let’s unpack the program in detail.&lt;/p&gt;

&lt;p&gt;It comprises theory (books, courses, scientific papers) and practice (Rust coding, problem-solving, implementation of crypto primitives).&lt;/p&gt;

&lt;p&gt;We focus not on coding per se, but on the ability to discuss problems and solutions with colleagues, explain the code, and teamwork. The level of tasks is gradually becoming more sophisticated and approaches the real-life tasks of our engineers.&lt;/p&gt;

&lt;p&gt;🔹 &lt;strong&gt;Basics&lt;/strong&gt; 🔹&lt;/p&gt;

&lt;p&gt;First, interns study the fundamentals: how cryptographic primitives work under the hood, why using padding and what are padding attacks, how stream ciphers work, CTR bitflipping, dangers of using &lt;code&gt;IV == key&lt;/code&gt;, how hashes work, what's behind of &lt;code&gt;xor nonce&lt;/code&gt;, how RSA/DSA/ECDSA works, key exchange algorithms, side-channel attacks, Merkle trees usage, and other basics.&lt;/p&gt;

&lt;p&gt;We use challenges from &lt;a href="https://cryptopals.com/"&gt;cryptopals.com&lt;/a&gt; and &lt;a href="https://cryptohack.org/"&gt;cryptohack.org&lt;/a&gt;, aimed at understanding the nature of common cryptographic implementation errors. All challenges should be written in Rust and went through a typical code review process.&lt;/p&gt;

&lt;p&gt;At the end of this part, interns work on implementation of the already known symmetric cipher on Rust, and their solution must pass test vectors (theoretical correctness) and be compatible with already known implementations of this cipher in Bouncy Castle and OpenSSL (practical correctness).&lt;/p&gt;

&lt;p&gt;🔹 &lt;strong&gt;Real world crypto&lt;/strong&gt; 🔹&lt;/p&gt;

&lt;p&gt;Now, the real world work starts. We introduce interns to the world of popular cryptographic libraries, help them to make their first OSS contributions, and let them practice with our cryptographic library &lt;a href="https://github.com/cossacklabs/themis"&gt;Themis&lt;/a&gt; which provides a high-level crypto API on 14 languages.&lt;/p&gt;

&lt;p&gt;By the end of the internship, the topics are getting closer to the cutting-edge crypto. We involve interns in the daily work of our cryptographers, such as ZKP, zkSNARKs, private transactions, &lt;a href="https://www.cossacklabs.com/blog/crypto-signed-audit-logs.html"&gt;private verifiable audit logs&lt;/a&gt; — they are reading the same whitepapers as we read and designing crypto modules with our team.&lt;/p&gt;

&lt;p&gt;🔹 &lt;strong&gt;Teamwork skills&lt;/strong&gt; 🔹&lt;/p&gt;

&lt;p&gt;In addition to the cryptographic skills and coding, crypto engineers should be able to "emerge" from the academic world and communicate their thoughts to developers. Each specialist has their own background, and the ability to "translate" information into the language of other people is worth a lot.&lt;/p&gt;

&lt;p&gt;We immerse interns in a world where they need to communicate with colleagues in pull requests, discuss problems, and design software in a team. Typical research work can be given as "read the paper, understand how the described technology works, analyze whether it is suitable for the given task, and explain to your fellow non-cryptographers”.&lt;/p&gt;

&lt;p&gt;As one of our interns said after his presentation: "There are no boring things in crypto" :)&lt;/p&gt;

&lt;p&gt;🔹🔸 &lt;strong&gt;What's next?&lt;/strong&gt; 🔸🔹&lt;/p&gt;

&lt;p&gt;Our internship is currently undergoing closed beta testing. After finishing, we will adjust the program and, most likely, make the internship a public practice at Cossack Labs. Stay tuned!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And if you are interested in applied cryptography, here’s something I can recommend:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;read &lt;a href="http://toc.cryptobook.us/book.pdf"&gt;A Graduate Course in Applied Cryptography&lt;/a&gt; by Dan Boneh and Victor Shoup, &lt;a href="https://www.amazon.com/Serious-Cryptography-Practical-Introduction-Encryption/dp/1593278268"&gt;Serious Cryptography&lt;/a&gt; by &lt;a href="https://twitter.com/veorq"&gt;Jean-Philippe Aumasson&lt;/a&gt; or &lt;a href="https://www.manning.com/books/real-world-cryptography"&gt;Real-World Cryptography&lt;/a&gt; by &lt;a href="https://twitter.com/cryptodavidw"&gt;David Wong&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;enrol in &lt;a href="https://www.coursera.org/learn/crypto"&gt;Cryptography I&lt;/a&gt; (Coursera) or &lt;a href="https://www.udacity.com/course/applied-cryptography--cs387"&gt;Applied Cryptography&lt;/a&gt; (Udacity)&lt;/li&gt;
&lt;li&gt;get through some of these &lt;a href="https://github.com/pFarb/awesome-crypto-papers"&gt;awesome crypto papers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;and, certainly, follow our &lt;a href="https://www.cossacklabs.com/talks/"&gt;talks&lt;/a&gt;, &lt;a href="https://cossacklabs.com/blog"&gt;blog&lt;/a&gt;, &lt;a href="https://twitter.com/cossacklabs"&gt;@Twitter&lt;/a&gt;, and dozens of NIST guidelines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, you are welcome to look through our &lt;a href="https://jobs.dou.ua/companies/cossack-labs/vacancies/"&gt;job openings&lt;/a&gt; and apply for a matching position if you are in Ukraine. &lt;/p&gt;




&lt;p&gt;That's all. 👋 &lt;a href="https://twitter.com/vixentael"&gt;Say hi to me&lt;/a&gt; if you're interested in crypto!&lt;/p&gt;

</description>
      <category>security</category>
      <category>cryptography</category>
      <category>beginners</category>
      <category>internship</category>
    </item>
    <item>
      <title>Implementing stack in JAVA.</title>
      <author>Rahul kumar</author>
      <pubDate>Wed, 12 May 2021 12:43:55 +0000</pubDate>
      <link>https://dev.to/ats1999/implementing-stack-in-java-aph</link>
      <guid>https://dev.to/ats1999/implementing-stack-in-java-aph</guid>
      <description>&lt;h1&gt;
  &lt;a href="#implementing-stack-in-java"&gt;
  &lt;/a&gt;
  Implementing stack in java
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.hello&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nc"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Get the top element of the stack.
     * You must have to check if stack is empty or not, before calling this API.
     * @return {Integer} top of the stack
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;top&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Check if stack is empty or not.
     * @return {Boolean} true if stack is empty, false otherwise
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Get the size of the stack
     * @return {Integer} size of the stack
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Push el onto the top of the stack
     * @param el element to be pushed
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stack is full!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// push el into stack&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ar&lt;/span&gt;&lt;span class="o"&gt;[++&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Pop the top element from the stack
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stack is empty!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter stack size: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;stackSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="nc"&gt;Stack&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stackSize&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Push: 1"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pop: 2"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Top: 3"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Size: 4"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exit: 0"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter operation number: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a number: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;// if stack is empty then don't do pop()&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stack is empty!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;

                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Top element: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Size: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// close the stream&lt;/span&gt;
        &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>java</category>
    </item>
    <item>
      <title>Converting String to Float in Python</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 12 May 2021 12:33:52 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/converting-string-to-float-in-python-47mm</link>
      <guid>https://dev.to/hrishikesh1990/converting-string-to-float-in-python-47mm</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how we can convert a string object into a floating object, we look at different methods and we discuss the limitation as well. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-would-you-need-to-convert-a-string-to-float-in-python"&gt;Why would you need to convert a String to Float in Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solution-using-the-float-function"&gt;Solution: Using the float() function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations-and-caveats"&gt;Limitation and Caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-would-you-need-to-convert-a-string-to-float-in-python"&gt;
  &lt;/a&gt;
  Why would you need to convert a String to Float in Python?
&lt;/h3&gt;

&lt;p&gt;Changing data types in python is a common practice, and python has provided us with functions to facilitate this. However, one frequently looked up method is converting a string to float. The most common places where you would come across this is while reading and working with files. In such cases, you would need to convert numerical values from a string into float/ int before you can use any operations.&lt;/p&gt;

&lt;p&gt;Similar to the above example you would come across similar instances where you would need to convert a string to float in python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-using-the-float-function"&gt;
  &lt;/a&gt;
  Solution: Using the float() function
&lt;/h3&gt;

&lt;p&gt;In this solution we use the most common method to convert any data type including a string to float in python; &lt;code&gt;float()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax of float():&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;x&lt;/code&gt; can be an int or a string. It could contain signs, this would not affect the value returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code and Explanation:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"123.123"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;123.123&lt;/span&gt;
&lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;f3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the above strings were converted into a floating object. The only thing you should keep in mind is that the string should contain a numerical decimal or integer value, only then would the float function be able to convert the string to float. &lt;/p&gt;

&lt;p&gt;To check the data types you can use the &lt;code&gt;type()&lt;/code&gt; function before and after using the &lt;code&gt;float()&lt;/code&gt;. This function returns the data type of the object.&lt;/p&gt;

&lt;p&gt;Similar to &lt;code&gt;float()&lt;/code&gt;, values of other data types can be converted into integers and strings using the &lt;code&gt;Int()&lt;/code&gt;, &lt;code&gt;str()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;

&lt;span class="n"&gt;f3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"123"&lt;/span&gt;
&lt;span class="n"&gt;f4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"12.3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#limitations-and-caveats"&gt;
  &lt;/a&gt;
  Limitations and Caveats
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;As mentioned earlier, the string should contain a float value else &lt;code&gt;float()&lt;/code&gt; would return &lt;code&gt;ValueError&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If the number outside the range of a floating variable it would return &lt;code&gt;OverflowError&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;And lastly if the no value is passed as an argument it returns 0.0&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to disable Bluetooth become audio source instead of audio sink on Linux</title>
      <author>Kay Gosho</author>
      <pubDate>Wed, 12 May 2021 12:31:26 +0000</pubDate>
      <link>https://dev.to/acro5piano/how-to-disable-bluetooth-become-audio-source-instead-of-audio-sink-on-linux-586g</link>
      <guid>https://dev.to/acro5piano/how-to-disable-bluetooth-become-audio-source-instead-of-audio-sink-on-linux-586g</guid>
      <description>&lt;p&gt;After struggled with Amazon Alexa, Bluez, PulseAudio.&lt;/p&gt;

&lt;p&gt;/etc/bluetooth/main.conf&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;[General]&lt;/span&gt;

&lt;span class="gd"&gt;-Enable=Source,Sink,Media,Socket
&lt;/span&gt;&lt;span class="gi"&gt;+Enable=Sink,Media,Socket
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>linux</category>
    </item>
    <item>
      <title>Growth hacking for developers</title>
      <author>Conti</author>
      <pubDate>Wed, 12 May 2021 11:46:58 +0000</pubDate>
      <link>https://dev.to/conti/growth-hacking-for-developers-9i0</link>
      <guid>https://dev.to/conti/growth-hacking-for-developers-9i0</guid>
      <description>&lt;p&gt;It is out of scope to dive deeper in some of the concepts you will read below, so I will stay on the basics, and I will try to break the ice in this topic from a technical perspective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-growth-hacking"&gt;
  &lt;/a&gt;
  What is Growth Hacking?
&lt;/h2&gt;

&lt;p&gt;It is a set of methodologies, techniques and mindset that allow you to increase your digital product revenues. "Growth" starts from the need to validate an hypothesis to improve a specific area of your product, and in order to do so, a set of experiments must be developed and deployed in your production environment. When an experiment has been very successful, we call it "hack".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#differences-between-digital-marketing-and-growth"&gt;
  &lt;/a&gt;
  Differences between Digital Marketing and Growth
&lt;/h2&gt;

&lt;p&gt;First of all lets review a classic product funnel (also called "Pirate funnel") which let you analyse how your users go from "knowing" your digital product to "pay" for it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1 Awareness&lt;/strong&gt;: users know about you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2 Acquisition&lt;/strong&gt;: users register in your product&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3 Activation&lt;/strong&gt;: users use your product as you instructed them to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4 Revenue&lt;/strong&gt;: users pay for your product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5 Retention&lt;/strong&gt;: users are hooked onto your product, they have a habit of use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6 Referral&lt;/strong&gt;: users tell their friends good things about your product.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_jQg6c7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf542grsbc4gti4cmoig.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_jQg6c7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf542grsbc4gti4cmoig.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
So, Digital Marketing is intended to explore mostly step 1 and 2, while Growth goes from the beginning of the funnel until the end of it, and iterates to continuously improve the funnel efficiency.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-are-you-telling-us-that-we-should-give-access-to-our-cicd-to-a-group-of-digital-marketersexpertsinnovators-interested-in-doing-spam-to-our-users-through-some-code-snippets-out-of-our-qa-process"&gt;
  &lt;/a&gt;
  So, are you telling us that we should give access to our CI/CD to a group of digital marketers/experts/innovators interested in doing spam to our users through some code snippets out of our QA process?
&lt;/h3&gt;

&lt;p&gt;No, they need a way to validate their hypothesis to improve the funnel, so what we do, as developers/tech experts, is to offer them a specific method to run experiments in production environment without interacting with us or our roadmap. How? Google Tag Manager, for example.&lt;/p&gt;

&lt;p&gt;You could use Google Tag Manager to allow them to add &lt;code&gt;scripts&lt;/code&gt; tags based on DOM triggers, users segments triggers, etc. They could also add tools such as Google Optimize or Optimizely to build UI tests A/B and use different variants to validate their hypothesis.&lt;/p&gt;

&lt;p&gt;I, as a developer, used to think that a feature such as a classic test a/b do not need to be outsourced to an external tool, but man, I was wrong. Both services mentioned above do an excellent job in their free tier, so we do not need to re-invent the wheel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-technical-roles-are-needed-in-growth-why"&gt;
  &lt;/a&gt;
  Which technical roles are needed in Growth? Why?
&lt;/h2&gt;

&lt;p&gt;Growth Hackers are experts in consumer psychology, innovation, creativity and be able to apply scientific methods to validate their hypothesis, so taking this into account it is difficult for them to build a decent technical knowledge to develop their custom own experiments based on code.&lt;/p&gt;

&lt;p&gt;There are tons of &lt;code&gt;no-code&lt;/code&gt; tools out there that help them to build experiments, but they often reach a point in the hypothesis validation process in which these tools are not enough, and a custom development need to be made. That is when we enter to the play field.&lt;/p&gt;

&lt;p&gt;Experiments vary from simple &lt;code&gt;modal windows&lt;/code&gt;, &lt;code&gt;popups&lt;/code&gt;, &lt;code&gt;CTA bars&lt;/code&gt;, etc, to more complex backend processes, such as building a custom GeoIP location service to trigger specifics experiments to different users segments.&lt;/p&gt;

&lt;p&gt;A few months ago I wrote a basic tutorial for the &lt;a href="https://dev.to/producthackers/your-own-geoip-service-1-2-maxmind-geoip-aws-sam-52go"&gt;GeoIP service&lt;/a&gt;, in case you are interested in it.&lt;/p&gt;

&lt;p&gt;If your "Growth A-Team" wants to be able to manoeuvre without limitations, both front-end and back-end developers are needed. Cloud platforms knowledge such as AWS, Azure, etc are also important skills to deploy securely and fast experiments based on CDN features, redirections, specific API's endpoints, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-so-our-growth-hackers-are-testing-experiments-through-gtm-whats-next"&gt;
  &lt;/a&gt;
  Ok, so our Growth Hackers are testing experiments through GTM, what's next?
&lt;/h2&gt;

&lt;p&gt;When a hypothesis has been validated using experiments, the normal course of action is to integrate this development into the product roadmap, in order to apply that successful knowledge to the product itself. And from there, iterate again to find more ways to increase funnel performance and efficiency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-and-disadvantages-of-this-experimentation-process"&gt;
  &lt;/a&gt;
  Advantages and disadvantages of this experimentation process
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; Fast hypothesis validations&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; Fast client side validation for the experiments that will occur on their site&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; No development resources usage in case the experiment could be completed with a "No-code" approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&lt;/strong&gt; Expect quality assurance concerns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&lt;/strong&gt; Experiments may not comply at first with security and data protection policies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&lt;/strong&gt; High chance to maintain legacy code if there is not a development process behind these experiments.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this content, a bit different what we are used to read here, but I think that our frequent isolation as developers is a barrier to obtain knowledge about other disciplines that interact directly with our world.&lt;/p&gt;

</description>
      <category>growth</category>
      <category>hacking</category>
      <category>gtm</category>
      <category>optimize</category>
    </item>
    <item>
      <title>Graduating soon .. my past, present and future plans 👀</title>
      <author>Iqrah Nadeem</author>
      <pubDate>Wed, 12 May 2021 11:35:28 +0000</pubDate>
      <link>https://dev.to/iiqrah/graduating-soon-my-past-present-and-future-plans-1nnl</link>
      <guid>https://dev.to/iiqrah/graduating-soon-my-past-present-and-future-plans-1nnl</guid>
      <description>&lt;p&gt;Hi 👋 &lt;/p&gt;

&lt;p&gt;My name is Iqrah and I am about to graduate with a BSc. (Hons) Computer Science degree soon 👩‍🎓&lt;/p&gt;

&lt;p&gt;Back in high school, I made the decision to pursue one of the coolest subjects I had ever come across. &lt;/p&gt;

&lt;p&gt;I still vaguely remember one of the very first CS labs in school where I was introduced to Python and wrote a simple script with variables, operators and print statements. It got me extremely excited ✨&lt;/p&gt;

&lt;p&gt;Until then I was only a user, following instructions given by the computer to use various apps. But that day for the first time ever I sensed the power of writing code to make a computer do what I want, communicating in this half-English, half-gibberish language.&lt;/p&gt;

&lt;p&gt;In my first year of university, I was ecstatic to come across this thing called hackathons 💖. I attended my very first, and many more, on my own, fell in love with the format and went on to form a hackathon society, helloHackers, and host local hacks days and an annual hackathon,  ManMetHacks, at my university.&lt;/p&gt;

&lt;p&gt;I wanted everyone at my university to experience a hackathon at least once in their student lives but it clashed with the feelings of being ashamed at not really winning many hackathons or any at the start, so I truly felt like I don't deserve to be the one advocating for it because I must be not smart enough, even though I know hackathons are more than just winning.&lt;/p&gt;

&lt;p&gt;I have always struggled with feeling proud of any achievements. I always have the mindset that if I can do it, anyone else can, it's nothing special. But if someone else achieves anything, they must be extremely talented and special. &lt;/p&gt;

&lt;p&gt;Attending tons of hackathons, meetups, conferences and tech events has made me acquainted with a whole lot of people, but again, I don't know why but I feel like I'm causing too much of an inconvenience if I reach out to them, so I avoid that until extremely necessary. &lt;/p&gt;

&lt;p&gt;Anyway, in my first year, I learnt about spring internships, applied and got accepted for one. It was a week-long internship with all expense paid for staying at a fancy hotel, travel, food and stipend. The experience was fun in terms of enjoying the materialistic perks but the "work" experience itself was pretty dull. &lt;/p&gt;

&lt;p&gt;I didn't enjoy sitting hours on end listening to presentations about how the company functioned. It felt more like a week-long marketing campaign than an internship and the only project we were required to do was a group presentation on Cryptocurrency. &lt;/p&gt;

&lt;p&gt;Regardless, I brushed off the experience thinking it was a one-week thing and carried on with my uni life but never applied for short internships again.&lt;/p&gt;

&lt;p&gt;Second-year of uni I learnt about this organisation called Code First: Girls, worked extremely hard on advertising it to the students and was successfully able to set up a chapter and run multiple cohorts of the Python and web development course. &lt;/p&gt;

&lt;p&gt;This was my first time teaching code and I loved every second of it. The feeling of introducing coding to people brings me a lot of joy, it's one of the most fulfilling things I have experienced ✨.&lt;/p&gt;

&lt;p&gt;Uni life, for the most part, brought me joy because a lot of our assignments are hands-on project-based and the hackathon duties were always fun to do, except trying to find sponsors, that is my least favourite part about planning hackathons. It was not all sunshine and rainbows but receiving support from my lecturers to start things like the society and CF:G chapter is something I'll always be grateful for. &lt;/p&gt;

&lt;p&gt;During my second year, I also came across the concept of placement years. Prior to this, I was under the impression that I'll have to finish my degree first before I can apply for a full-time role but placement years are essentially a year off from studies right before your final year where you complete a year-long work experience in the industry. &lt;/p&gt;

&lt;p&gt;This seemed intriguing because I had never had a full-time role before and I would get to experience what it is to work in the industry before graduating. &lt;/p&gt;

&lt;p&gt;The sad part about this was the application process. Time-consuming forms, annoying aptitude tests, timed coding interviews, cold rejection e-mails and a whole lot of stress and feeling of worthlessness. &lt;/p&gt;

&lt;p&gt;Managing studies, extracurricular and job applications, all at the same time, really took a toll on me but I REALLY wanted to try out the placement year so I applied to any and all opportunities I could find, accepted the very first offer I received and called it a day.&lt;/p&gt;

&lt;p&gt;But from the very moment I accepted the offer, I wasn't too excited about the role, so in hindsight, I didn't only do a disservice to the company but also myself by accepting the offer without much thought, but I didn't know any better then. &lt;/p&gt;

&lt;p&gt;Again, the pay was good, I got to experience living in a flat that was not a student accommodation, learn adult stuff like setting up bills, pay rent, think about credit score etc but the actual job itself was draining and not fulfilling at all. &lt;/p&gt;

&lt;p&gt;I would cry to and fro from work, delay sleeping because it would mean when I wake up I would have to go to work again and try to leave from work as early as possible. My line manager and everyone except one person in the team seemed very nice but the work just didn't align with my goals and I felt like my work was not having any significant positive impact on the world. I was getting paid to spend time on working something that the world will totally be okay without.&lt;/p&gt;

&lt;p&gt;To bring back a bit of joy, I continued to travel back to Manchester every week right after work to teach CF:G, attend hackathons some weekends and also started a &lt;a href="https://www.youtube.com/iiqrah"&gt;YouTube channel&lt;/a&gt; to let out my creativity. &lt;/p&gt;

&lt;p&gt;All this helped to an extent but I had reached a dark place and I could not continue any longer. I contacted a counsellor at my University and reached out to my parents for help. &lt;/p&gt;

&lt;p&gt;There's only been one other time when I have felt this extent of sadness and distress, so eventually, I had to make a call for my own happiness and sanity, and discuss the resignation process with my line manager. &lt;/p&gt;

&lt;p&gt;I am not a confrontational person, so this was extremely awkward to do but it had to be done. &lt;/p&gt;

&lt;p&gt;I had to stay at least 9 months on placement for my student visa to not be revoked, I had reached a place where I was ready to even drop out if it meant resigning earlier but the winter holidays and paid leaves helped me get through the duration. &lt;/p&gt;

&lt;p&gt;I had maxed out on my paid leaves so it meant either continuing for a couple of extra weeks than 9 months or get paid less for my last month, I chose the latter. &lt;/p&gt;

&lt;p&gt;I am fully aware that I am extremely privileged to be able to do this, but it was necessary. &lt;/p&gt;

&lt;p&gt;After this experience, I was exceptionally unmotivated to do anything really, especially completing my degree. This is also the time the pandemic hit, so in-person hackathons and events stopped, I haven't been the biggest fan of online events but I am getting used to it now, especially YouTube and live-streaming.  &lt;/p&gt;

&lt;p&gt;The original plan was to find a full-time developer job after graduation but that doesn't seem that appealing anymore. &lt;/p&gt;

&lt;p&gt;A few months ago, I was trying to convince myself to suck it all up and just go with the traditional graduate route of applying for grad jobs, be a little more mindful of accepting an offer and hope for the best. &lt;/p&gt;

&lt;p&gt;And I am aware that this placement was a one-off work experience and I see a lot of people loving their job so it's not that I won't ever want to find a full-time role again but I need some time to process and understand before I commit to something of this sort.&lt;/p&gt;

&lt;p&gt;I'll be graduating soon and haven't applied for a single job yet. &lt;/p&gt;

&lt;p&gt;I have been ignoring emails from all the recruitment agencies I signed up for and don't really have an offer that I can brag about to my circle. &lt;/p&gt;

&lt;p&gt;And this again, I know, comes from a place of privilege that I am super grateful to have but it kind of makes me feel guilty too. &lt;/p&gt;

&lt;p&gt;I had a talk with my parents and asked for one more year of their support after graduation. &lt;/p&gt;

&lt;p&gt;In this one year, I want to only work on things that I want to work on and not because someone else is telling me to.&lt;/p&gt;

&lt;p&gt;I want to concentrate on my health, my content creation skills, do a bit of coding too so that I don't get too rusty and overall just do what I want to do, within reason.  &lt;/p&gt;

&lt;p&gt;There is no surety that I'll figure everything out in this one year but I won't be able to live with myself if I don't take this one year off for myself 🤷‍♀️&lt;/p&gt;

&lt;p&gt;If things don't work out, I'll resort to doing things that I am supposed to do as opposed to things that I want to do. &lt;/p&gt;

&lt;p&gt;It would be ideal if both of those aligned but as of now they don't, and having the privilege to make a choice, I am choosing to prioritise myself.&lt;/p&gt;

&lt;p&gt;It does come with a bit of baggage of feeling like a failure for not applying and finding any jobs and having to leech off of my parents for another year, considering they've already done so much for me already but I need to make peace with that. &lt;/p&gt;

&lt;p&gt;Anyway, that's all that I want to pour out for now 😅&lt;/p&gt;

&lt;p&gt;The official one year starts when my results are out in June or July so I still have a few weeks to plan a few things for my year off. &lt;/p&gt;

&lt;p&gt;There's excitement mixed with fear of the unknown but wish me luck I guess 🤞🏼&lt;/p&gt;

&lt;p&gt;K bye.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
  </channel>
</rss>
