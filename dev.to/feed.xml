<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Pretty printing JSON.stringify</title>
      <author>Siddharth</author>
      <pubDate>Tue, 25 May 2021 15:08:17 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/pretty-printing-json-stringify-4pd3</link>
      <guid>https://dev.to/siddharthshyniben/pretty-printing-json-stringify-4pd3</guid>
      <description>&lt;p&gt;Most of use &lt;code&gt;JSON.stringify&lt;/code&gt; a lot to avoid the infamous &lt;code&gt;"[object Object]"&lt;/code&gt;. But did you know that it had a few more arguments?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JSON.stringify&lt;/code&gt; takes a total of 3 arguments. The first one is the data, the second is a &lt;em&gt;replacer function&lt;/em&gt;, and the third one is the &lt;em&gt;indentation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The main topic of this article is the third argument. If you provide a string as the third argument, that string will be used as indentation. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; {"a":"B","c":{"d":"e"}}&lt;/span&gt;
&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; &lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   "a": "B",&lt;/span&gt;
&lt;span class="c1"&gt;//   "c": {&lt;/span&gt;
&lt;span class="c1"&gt;//     "d": "e"&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;// test"a": "B",&lt;/span&gt;
&lt;span class="c1"&gt;// test"c": {&lt;/span&gt;
&lt;span class="c1"&gt;// testtest"d": "e"&lt;/span&gt;
&lt;span class="c1"&gt;// test}&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also pass in a number instead. If you do so, that many spaces will be inserted as indentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; &lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   "a": "B",&lt;/span&gt;
&lt;span class="c1"&gt;//   "c": {&lt;/span&gt;
&lt;span class="c1"&gt;//     "d": "e"&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this helps you while debugging sometime!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>json</category>
    </item>
    <item>
      <title>How to manage global state with XState and React</title>
      <author>Matt Pocock</author>
      <pubDate>Tue, 25 May 2021 15:02:17 +0000</pubDate>
      <link>https://dev.to/mpocock1/how-to-manage-global-state-with-xstate-and-react-3if5</link>
      <guid>https://dev.to/mpocock1/how-to-manage-global-state-with-xstate-and-react-3if5</guid>
      <description>&lt;p&gt;Many React applications follow the Flux architecture popularised by &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;. This setup can be characterised by a few key ideas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It uses a single object at the top of your app which stores all application state, often called the &lt;strong&gt;store&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It provides a single &lt;code&gt;dispatch&lt;/code&gt; function which can be used to send messages up to the store. Redux calls these &lt;code&gt;actions&lt;/code&gt;, but I'll be calling them &lt;code&gt;events&lt;/code&gt; - as they're known in XState.&lt;/li&gt;
&lt;li&gt;How the store responds to these messages from the app are expressed in pure functions - most often in &lt;strong&gt;reducers&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article won't go into depth on whether the Flux architecture is a good idea. David Khourshid's article &lt;a href="https://dev.to/davidkpiano/redux-is-half-of-a-pattern-1-2-1hd7"&gt;Redux is half a pattern&lt;/a&gt; goes into great detail here. For the purposes of this article, we're going to assume that you like having a global store, and you want to replicate it in XState.&lt;/p&gt;

&lt;p&gt;There are many reasons for wanting to do so. XState is second-to-none when it comes to managing complex asynchronous behaviour and modelling difficult problems. Managing this in Redux apps usually involves middleware: either &lt;a href="https://github.com/reduxjs/redux-thunk"&gt;redux-thunk&lt;/a&gt;, &lt;a href="https://github.com/redux-loop/redux-loop"&gt;redux-loop&lt;/a&gt; or &lt;a href="https://github.com/redux-saga/redux-saga"&gt;redux-saga&lt;/a&gt;. Choosing XState gives you a first-class way to manage complexity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-globally-available-store"&gt;
  &lt;/a&gt;
  A globally available store
&lt;/h2&gt;

&lt;p&gt;To mimic Redux's globally-available store, we're going to use React context. React context can be a tricky tool to work with - if you pass in values which change too often, in can result in re-renders all the way down the tree. That means we need to pass in values which change as little as possible.&lt;/p&gt;

&lt;p&gt;Luckily, XState gives us a first-class way to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useInterpret&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;authMachine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./authMachine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;InterpreterFrom&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xstate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContextType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InterpreterFrom&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;authMachine&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Typed this way to avoid TS errors,&lt;/span&gt;
  &lt;span class="c1"&gt;// looks odd I know&lt;/span&gt;
  &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContextType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useInterpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;authMachine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;authService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;useInterpret&lt;/code&gt; returns a &lt;code&gt;service&lt;/code&gt;, which is a static reference to the running machine which can be subscribed to. This value &lt;em&gt;never&lt;/em&gt; changes, so we don't need to worry about wasted re-renders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilising-context"&gt;
  &lt;/a&gt;
  Utilising context
&lt;/h2&gt;

&lt;p&gt;Further down the tree, you can subscribe to the service like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./globalState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalServices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;globalServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loggedIn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged In&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged Out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useService&lt;/code&gt; hook listens for whenever the service changes, and updates the &lt;code&gt;state&lt;/code&gt; value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-performance"&gt;
  &lt;/a&gt;
  Improving Performance
&lt;/h2&gt;

&lt;p&gt;There's an issue with the implementation above - this will update the component for &lt;em&gt;any&lt;/em&gt; change to the service. Redux offers tools for &lt;em&gt;deriving&lt;/em&gt; state using selectors - functions which restrict which parts of the state can result in components re-rendering.&lt;/p&gt;

&lt;p&gt;Luckily, XState provides that too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./globalState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loggedIn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalServices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;globalServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged In&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged Out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this component will only re-render when &lt;code&gt;state.matches('loggedIn')&lt;/code&gt; returns a different value. This is my recommended approach over &lt;code&gt;useService&lt;/code&gt; for when you want to optimise performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dispatching-events"&gt;
  &lt;/a&gt;
  Dispatching events
&lt;/h2&gt;

&lt;p&gt;For dispatching events to the global store, you can call a service's &lt;code&gt;send&lt;/code&gt; function directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./globalState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalServices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;globalServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOG_OUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Log Out
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you don't need to call &lt;code&gt;useService&lt;/code&gt; for this, it's available right on the context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deviations-from-flux"&gt;
  &lt;/a&gt;
  Deviations from Flux
&lt;/h2&gt;

&lt;p&gt;Keen-eyed readers may spot that this implementation is &lt;em&gt;slightly&lt;/em&gt; different from Flux. For instance - instead of a single global store, one might have several running machines at once: &lt;code&gt;authService&lt;/code&gt;, &lt;code&gt;dataCacheService&lt;/code&gt;, and &lt;code&gt;globalTimeoutService&lt;/code&gt;. Each of them have their own &lt;code&gt;send&lt;/code&gt; attributes, too - so you're not calling a global dispatch.&lt;/p&gt;

&lt;p&gt;These changes can be worked around. One could create a synthetic &lt;code&gt;send&lt;/code&gt; inside the global store which called all the services' &lt;code&gt;send&lt;/code&gt; function manually. But personally, I prefer knowing exactly which services my messages are being passed to, and it avoids having to keep events globally namespaced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;XState can work beautifully as a global store for a React application. It keeps application logic co-located, treats side effects as first-class citizens, and offers good performance with &lt;code&gt;useSelector&lt;/code&gt;. You should choose this approach if you're keen on the Flux architecture but feel your app's logic is getting out of hand.&lt;/p&gt;

</description>
      <category>xstate</category>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to remove outside borders of a 3x3 grid using CSS, e.g. Tic-Tac-Toe UI</title>
      <author>Patricia Nicole</author>
      <pubDate>Tue, 25 May 2021 15:01:43 +0000</pubDate>
      <link>https://dev.to/pat_the99/how-to-remove-outside-borders-of-a-3x3-grid-using-css-e-g-tic-tac-toe-ui-4ao8</link>
      <guid>https://dev.to/pat_the99/how-to-remove-outside-borders-of-a-3x3-grid-using-css-e-g-tic-tac-toe-ui-4ao8</guid>
      <description>&lt;p&gt;I was trying to achieve this kind of UI when I tried implementing the Tic-tac-toe game (I know it looks easy to some XD) &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NVaooBoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6tqy8u45qvakni32j0a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVaooBoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6tqy8u45qvakni32j0a.png" alt="Tic-tac-toe board"&gt;&lt;/a&gt;&lt;br&gt;
The challenge was how to properly select the first and last column, as well as the first and last row. I seriously did not want to manually remove the borders of the eight cells.&lt;/p&gt;

&lt;p&gt;The data structure of my tic-tac-toe grid is not two-dimensional, but one, so I can easily do the tricks below. Think of my counting as this :&lt;br&gt;
0 | 1 | 2&lt;br&gt;
3 | 4 | 5 &lt;br&gt;
6 | 7 | 8&lt;/p&gt;

&lt;p&gt;For the first row, the top border should be removed, thus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.board-item:nth-child(-n + 3) {
    border-top: none;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the last column,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.board div:nth-child(3n) {
    border-right: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the first column,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.board-item:nth-child(3n  - 2) {
    border-left: none;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the last row,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.board-item:nth-child(n + 7) {
    border-bottom: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it. Thanks for reading. Check my tic-tac-toe game &lt;a href="https://fatrixienicolieopetina.github.io/tictactoe/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>html</category>
    </item>
    <item>
      <title>Generating unique IDs in a Large scale Distributed environment</title>
      <author>Apoorv Tyagi</author>
      <pubDate>Tue, 25 May 2021 14:55:05 +0000</pubDate>
      <link>https://dev.to/apoorvtyagi/generating-unique-ids-in-a-large-scale-distributed-environment-257d</link>
      <guid>https://dev.to/apoorvtyagi/generating-unique-ids-in-a-large-scale-distributed-environment-257d</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Recently at work, We were looking for a way to generate unique IDs across a distributed system that could also be used as the primary keys in the MySQL tables.&lt;/p&gt;

&lt;p&gt;We knew in a single MySQL database we can simply use an auto-increment ID as the primary key, But this won’t work in a sharded MySQL database.&lt;/p&gt;

&lt;p&gt;So I looked at various existing solutions for this and finally learned about &lt;a href="https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake.html"&gt;Twitter Snowflake&lt;/a&gt; - a simple 64-bit unique ID generator.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-dont-you-use-uuid"&gt;
  &lt;/a&gt;
  Why don't you use UUID? 🤔
&lt;/h1&gt;

&lt;p&gt;UUIDs are 128-bit hexadecimal numbers that are globally unique. The chances of the same UUID getting generated twice are negligible.&lt;/p&gt;

&lt;p&gt;The problem with UUIDs is that they are very big in size and don’t index well. When your dataset increases, the index size increases as well and the query performance degrades.&lt;/p&gt;

&lt;p&gt;Another problem with UUIDs is related to the user experience. Eventually, our users will be needed that unique identifiers. Imagine that a customer calls Customer Service and is asked to provide the identifier. Having to spell a complete UUID is not a pleasant experience.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#twitter-snowflake-%E2%9D%84"&gt;
  &lt;/a&gt;
  Twitter snowflake ❄
&lt;/h1&gt;

&lt;p&gt;Twitter snowflake is a dedicated service for generating 64-bit unique identifiers used in distributed computing for objects within Twitter such as Tweets, Direct Messages, Lists, etc.&lt;/p&gt;

&lt;p&gt;These IDs are unique 64-bit unsigned integers, which are based on time. The full IDs are made up of the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Epoch timestamp in millisecond - 41 bits (gives us 69 years with respect to any custom epoch)&lt;/li&gt;
&lt;li&gt;  Configured machine/node/shard Id - 10 bits (gives us up to total of 210 i.e 1024 Ids)&lt;/li&gt;
&lt;li&gt;  Sequence number - 12 bits (A local counter per machine that sets to zero after every 4096 values)&lt;/li&gt;
&lt;li&gt;  The extra 1 reserved bit at the beginning which is set as 0 to make the overall number as positive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CPiFDg-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621607903347/g1bih0ILA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CPiFDg-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621607903347/g1bih0ILA.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since these use the timestamp as the first component, therefore, &lt;strong&gt;they are time sortable as well&lt;/strong&gt;. Another benefit is its &lt;strong&gt;High Availability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By default, 64-bit unsigned integers (long) will generate an Id whose length is 19, but sometimes it may be too long, our use case needed an Id whose length should not be greater than 10.&lt;/p&gt;

&lt;p&gt;This article will share a simplified version of the unique ID generator that will work for any use-case of generating unique IDs in a distributed environment based on the concepts outlined in the Twitter snowflake service.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-time"&gt;
  &lt;/a&gt;
  Coding time ⌚
&lt;/h1&gt;

&lt;p&gt;In our case, the full ID will be composed of a 20-bit timestamp, 5-bit worker number, and 6-bit sequence number.&lt;/p&gt;

&lt;p&gt;The remaining 1-bit is the signed bit and it is always set to 0 to make the final value positive.&lt;/p&gt;

&lt;p&gt;Our microservices can use this Random number generator to generate IDs independently. This is efficient and fits in the size of a &lt;code&gt;int&lt;/code&gt; (4 Bytes or 32 bits).&lt;/p&gt;

&lt;p&gt;Here is the complete code in Java (&lt;em&gt;&lt;a href="https://github.com/twitter/snowflake/tree/snowflake-2010"&gt;Inspired by Twitter snowflake&lt;/a&gt;, &lt;a href="https://github.com/callicoder/java-snowflake"&gt;code credits&lt;/a&gt;&lt;/em&gt;)  -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1 - We initialize the number of bits that each component will require&lt;/strong&gt; :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class Snowflake {

    // Sign bit, Unused (always set to 0)
    private static final int UNUSED_BITS = 1; 

    private static final int EPOCH_BITS = 20;
    private static final int NODE_ID_BITS = 5;
    private static final int SEQUENCE_BITS = 6;

    private static final int maxNodeId = (int)(Math.pow(2, NODE_ID_BITS) - 1);
    private static final int maxSequence = (int)(Math.pow(2, SEQUENCE_BITS) - 1);

    // Custom Epoch (Fri, 21 May 2021 03:00:20 GMT)
    private static final int DEFAULT_CUSTOM_EPOCH = 1621566020;

    private volatile int lastTimestamp = -1;
    private volatile int sequence = 0;

    // Class Constructor
    public Snowflake() {
        this.nodeId = createNodeId();
        this.customEpoch = DEFAULT_CUSTOM_EPOCH;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Here, we are taking custom epoch as of Fri, 21 May 2021 03:00:20 GMT.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;EPOCH_BITS&lt;/code&gt; will be 20 bits and is filled with a current timestamp in seconds (You can also use millisecond if there is a possibility of multiple numbers of requests per second).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NODE_ID_BITS&lt;/code&gt; will be 5 bits and is filled using the Mac address.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SEQUENCE_BITS&lt;/code&gt; will be 6 bits and will act as a local counter which will start from 0, goes till 63, and then resets back to 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2 - Creating a &lt;code&gt;synchronized&lt;/code&gt; function to generate the IDs&lt;/strong&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        public synchronized int nextId() {
            int currentTimestamp = (int) (Instant.now().getEpochSecond() - customEpoch);

            if(currentTimestamp &amp;lt; lastTimestamp) {
                throw new IllegalStateException("Invalid System Clock!");
            }

            lastTimestamp = currentTimestamp;

            return currentTimestamp &amp;lt;&amp;lt; (NODE_ID_BITS + SEQUENCE_BITS) | (nodeId &amp;lt;&amp;lt; SEQUENCE_BITS) | sequence;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#wait-why-are-we-doing-these-raw-left-shifts-endraw-amp-raw-logical-or-endraw-operations"&gt;
  &lt;/a&gt;
  Wait, why are we doing these &lt;code&gt;Left Shifts&lt;/code&gt; &amp;amp; &lt;code&gt;Logical OR&lt;/code&gt; operations?
&lt;/h4&gt;

&lt;p&gt;This is because Integer is represented by 32 bits and initially all are set to 0.&lt;br&gt;
To fill these bits we have to take each component separately, so first we took the epoch timestamp and shift it to 5 + 6 i.e 11 bits to left. Doing this has filled the first 21 bits with the first component (remember the first bit is always set to zero to make the overall number positive). The remaining 11 bits are still 0 and hence again we repeat the same thing with logical OR &amp;amp; the other two components as well thereby filling all the 32 bits and forming the complete number.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3 - Utility function to generate the node id using the system’s MAC address&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private int createNodeId() {
            int nodeId;
            try {
                StringBuilder sb = new StringBuilder();
                Enumeration&amp;lt;NetworkInterface&amp;gt; networkInterfaces = NetworkInterface.getNetworkInterfaces();
                while (networkInterfaces.hasMoreElements()) {
                    NetworkInterface networkInterface = networkInterfaces.nextElement();
                    byte[] mac = networkInterface.getHardwareAddress();
                    if (Objects.nonNull(mac))
                        for(byte macPort: mac)
                            sb.append(String.format("%02X", macPort));
                }
                nodeId = sb.toString().hashCode();
            } catch (Exception ex) {
                nodeId = (new SecureRandom().nextInt());
            }
            nodeId = nodeId &amp;amp; maxNodeId;
            return nodeId;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works? 💡
&lt;/h3&gt;

&lt;p&gt;Let’s now understand its working with an example -&lt;/p&gt;

&lt;p&gt;Let’s say it’s Sun, 23 May 2021 00:00:00 GMT right now. The epoch timestamp for this particular time is 1621728000.&lt;/p&gt;

&lt;p&gt;First of all, we adjust our timestamp with respect to the custom epoch-&lt;/p&gt;

&lt;p&gt;currentTimestamp = 1621728000- 1621566020 = 161980(Adjust for custom epoch)&lt;/p&gt;

&lt;p&gt;So to start our ID, the first 20 bits of the ID (after the signed bit) will be filled with the epoch timestamp.  Let's this value with a left-shift :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id = currentTimestamp &amp;lt;&amp;lt; (NODE_ID_BITS  + SEQUENCE_BITS )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, we take the configured node ID/shard ID and fill the next 10 bits with that&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id = id | nodeId &amp;lt;&amp;lt; SEQUENCE_BITS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, we take the next value of our auto-increment sequence and fill out the remaining 6 bits -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id = id | sequence  // 6149376&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That gives us our final ID 🎉&lt;/p&gt;

&lt;p&gt;And that’s it! Primary keys that are unique across our application!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary 📊
&lt;/h2&gt;

&lt;p&gt;This article showed you a simple solution of how to generate a snowflake id whose length is &amp;gt;=7 and &amp;lt;=10.&lt;/p&gt;

&lt;p&gt;By the way, you can adjust the bit count of the 3 components to adapt to your work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;NOTE :&lt;br&gt;
We should keep the generator as a singleton, it means that we should only create the single instance of SequenceGenerator per node. If not, it may generate some duplicate Ids.&lt;/p&gt;

&lt;p&gt;Not only did twitter used it, &lt;strong&gt;Discord&lt;/strong&gt; also uses snowflakes, with their epoch set to the first second of the year 2015.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instagram&lt;/strong&gt; uses a modified version of the format, with 41 bits for a timestamp, 13 bits for a shard ID, and 10 bits for a sequence number.&lt;/p&gt;

&lt;p&gt;I hope this will help you! Thanks for reading :))&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Enjoyed what you read?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You can show some love by buying me a coffee☕&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/apoorvtyagi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PD28--a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>computerscience</category>
      <category>systems</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Want to compress your pdf files ?</title>
      <author>Burak Can Kahraman</author>
      <pubDate>Tue, 25 May 2021 14:41:23 +0000</pubDate>
      <link>https://dev.to/burakcank/want-to-compress-your-pdf-files-5ff9</link>
      <guid>https://dev.to/burakcank/want-to-compress-your-pdf-files-5ff9</guid>
      <description>&lt;p&gt;Are you tired of scanning images and trying to shrink them under 25 mbs just so you can send them via email ? Look no further, I am here to save you from this trouble. (that kinda rhymed.)&lt;/p&gt;




&lt;p&gt;This basic shell script uses &lt;em&gt;ghostscript&lt;/em&gt; to compress your scanned pdfs significantly. Just yesterday I scanned 100 pages of documents and it was over 90 mbs. I searched for a way to compress them under 25 mbs and voila. Here I was with only 6 mbs of pdfs. &lt;em&gt;Much wow. Such compression.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt; we need it,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast.&lt;/li&gt;
&lt;li&gt;Ez.&lt;/li&gt;
&lt;li&gt;No need to go online. Especially no need to upload company top-secret documents to any website you see on the Internet.&lt;/li&gt;
&lt;li&gt;Possible huge compression without notable loss.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Command usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./shrinkpdf.sh in.pdf out.pdf&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dont-forget-to-install-ghostscript"&gt;
  &lt;/a&gt;
  Don't forget to install &lt;em&gt;ghostscript&lt;/em&gt;.
&lt;/h4&gt;




&lt;p&gt;If you are in a situation exactly like me where there are 100 pdf files under one folder that you want to compress altogether, a simple for loop will suffice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;infolder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;outfolder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"compressed_"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;infolder&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfolder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infolder&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"./shrinkpdf.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run this python script,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python shrink.py pdfs/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and all of your pdfs will be put under &lt;em&gt;compressed_pdfs/&lt;/em&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="http://www.alfredklomp.com/programming/shrinkpdf/"&gt;http://www.alfredklomp.com/programming/shrinkpdf/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the relevant details and more, inside. I humbly wanted to let you know such a useful tool exists.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>python</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Persisting Typed Objects with DataStore</title>
      <author>Layale Matta</author>
      <pubDate>Tue, 25 May 2021 14:28:22 +0000</pubDate>
      <link>https://dev.to/yalematta/persisting-typed-objects-with-datastore-apc</link>
      <guid>https://dev.to/yalematta/persisting-typed-objects-with-datastore-apc</guid>
      <description>&lt;p&gt;In a &lt;a href="https://dev.to/yalematta/datastore-is-the-new-sharedpreferences-8a9"&gt;previous post&lt;/a&gt; we have explored how to use &lt;strong&gt;Preferences DataStore&lt;/strong&gt; to migrate our &lt;strong&gt;SharedPreferences&lt;/strong&gt;. And in this post we will focus on &lt;strong&gt;Proto DataStore&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-proto-datastore-different"&gt;
  &lt;/a&gt;
  What makes &lt;strong&gt;Proto DataStore&lt;/strong&gt; different? 🤔
&lt;/h2&gt;

&lt;p&gt;While both &lt;strong&gt;Preferences&lt;/strong&gt; and &lt;strong&gt;Proto DataStore&lt;/strong&gt; allow saving data, they do this in different ways. One important feature is applied only when using &lt;strong&gt;Proto DataStore&lt;/strong&gt;, and it is &lt;strong&gt;Type Safety&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;Proto DataStore&lt;/strong&gt; we don't have to use keys. Instead we define a schema using Protocol Buffers. And with Protocol Buffers we can persist &lt;strong&gt;strongly typed data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One of the downsides of &lt;strong&gt;SharedPreferences&lt;/strong&gt; and &lt;strong&gt;Preferences DataStore&lt;/strong&gt; is that there is no way to ensure that keys are accessed with the correct type. Using &lt;strong&gt;Proto DataStore&lt;/strong&gt;, we know what types are stored and we will just provide them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-protocol-buffers"&gt;
  &lt;/a&gt;
  What's Protocol Buffers? 🔍
&lt;/h2&gt;

&lt;p&gt;Protocol Buffers were developed by Google for storing and interchanging all kinds of structured information. They are used for &lt;strong&gt;serializing structured data&lt;/strong&gt;. It is similar to XML and other similar data formats, but &lt;strong&gt;it's smaller, faster and simpler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you don't know what serialization is, it's the process of translating a data structure or object state into a format that can be stored, like for example, a file or a memory data buffer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-protocol-buffers-work"&gt;
  &lt;/a&gt;
  How Protocol Buffers work?👷🏻
&lt;/h3&gt;

&lt;p&gt;We need to define how we want our data to be structured once, and the compiler will generate the source code for us to easily read and write the structured data. &lt;/p&gt;

&lt;p&gt;That said, with &lt;strong&gt;Proto Datastore&lt;/strong&gt; we will serialize and save our custom data structure using Protocol Buffers and of course deserialize and read the values whenever we need to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-dive"&gt;
  &lt;/a&gt;
  Let's dive 🤿
&lt;/h3&gt;

&lt;p&gt;In this simple &lt;a href="https://github.com/yalematta/datastore-demo"&gt;project&lt;/a&gt;, we are implementing the same &lt;em&gt;&lt;strong&gt;Remember Me&lt;/strong&gt;&lt;/em&gt; functionality as in the previous post. We are currently using &lt;strong&gt;SharedPreferences&lt;/strong&gt; to store this value and redirect the user to the Welcome screen once it's checked. We will migrate the code to use &lt;strong&gt;Proto DataStore&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To get your hands on the code, consider checking this &lt;a href="https://github.com/yalematta/datastore-demo"&gt;GitHub repo&lt;/a&gt;.&lt;br&gt;
The final code is located in the &lt;a href="https://github.com/yalematta/datastore-demo/tree/proto_datastore"&gt;&lt;em&gt;proto_datastore&lt;/em&gt;&lt;/a&gt; branch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#define-protobuf-schema"&gt;
  &lt;/a&gt;
  Define Protobuf schema 🏷️
&lt;/h2&gt;

&lt;p&gt;In order to use &lt;strong&gt;Proto Datastore&lt;/strong&gt; we will need to define our Protobuf schema in a new &lt;code&gt;.proto&lt;/code&gt; file. So instead of creating a model class in Kotlin, we will define it in a Protobuf schema instead. And there's a &lt;strong&gt;new syntax&lt;/strong&gt; that we need to follow when writing this schema.&lt;/p&gt;

&lt;p&gt;We will install a plugin in Android Studio called &lt;strong&gt;Protocol Buffer Editor&lt;/strong&gt; that will help us write the Proto file. Make sure to install it before creating your proto files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GcvCMxNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yalematta.dev/assets/img/protobuf_plugin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GcvCMxNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yalematta.dev/assets/img/protobuf_plugin.png"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once installed, we switch to our &lt;strong&gt;Project View&lt;/strong&gt; and under &lt;strong&gt;&lt;code&gt;app/src/main&lt;/code&gt;&lt;/strong&gt; we create a new directory called &lt;strong&gt;proto&lt;/strong&gt;. Inside this directory we create a new file &lt;strong&gt;&lt;code&gt;user_prefs.proto&lt;/code&gt;&lt;/strong&gt; where we define our Protocol Buffer schema as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;syntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"proto3"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;java_package&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"com.yalematta.datastore_demo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;java_multiple_files&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;int32&lt;/span&gt; &lt;span class="n"&gt;luckyNumber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me walk you through this syntax:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  1️⃣ Syntax
&lt;/h3&gt;

&lt;p&gt;There are 2 versions for the Protobuff syntax: proto2 and proto3. You can check the &lt;a href="https://developers.google.com/protocol-buffers/docs/proto3"&gt;documention&lt;/a&gt; for more info regarding these two different versions. In our case, we are going to use &lt;strong&gt;proto3&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  2️⃣ Options
&lt;/h3&gt;

&lt;p&gt;Then, we are going to write 2 options:&lt;br&gt;
First, our &lt;strong&gt;&lt;code&gt;java_package&lt;/code&gt;&lt;/strong&gt; name. We need it in order to tell our compiler where to generate our classes from this protocol buffer. &lt;br&gt;
The second option is &lt;strong&gt;&lt;code&gt;java_multiple_files&lt;/code&gt;&lt;/strong&gt;. We will set it to true and this means that we need to create a separate file for each top level &lt;strong&gt;message&lt;/strong&gt; object of this proto file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#message"&gt;
  &lt;/a&gt;
  3️⃣ Message
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;message&lt;/strong&gt; keyword defines the data structure. And inside it, we define the members of this structure. As you may have noticed we have different primitive types  in this syntax. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQYzz8_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yalematta.dev/assets/img/protobuf_types.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQYzz8_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yalematta.dev/assets/img/protobuf_types.png"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;By taking a look at the &lt;a href="https://developers.google.com/protocol-buffers/docs/proto3"&gt;documentation&lt;/a&gt;, we can learn that: int32 in Java represents an Integer, int64 a Long and bool is a Boolean.&lt;/p&gt;

&lt;p&gt;We create an object &lt;strong&gt;UserPreferences&lt;/strong&gt; with 2 member fields: a bool, a string and an int32. Don't be confused when you see these 1, 2 and 3. These are not actual values but unique numbers to identify our fields in the &lt;em&gt;message binary format&lt;/em&gt; and they &lt;strong&gt;should not be changed&lt;/strong&gt; once our message object is in use.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies 🔌
&lt;/h2&gt;

&lt;p&gt;Before we continue let's place this &lt;strong&gt;plugin&lt;/strong&gt; at the top of our build.gradle file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="s2"&gt;"com.google.protobuf"&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s2"&gt;"0.8.12"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to add two dependencies, one for Protobuf and one for Proto DataStore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="c1"&gt;// proto dataStore&lt;/span&gt;
&lt;span class="n"&gt;implementation&lt;/span&gt;  &lt;span class="s2"&gt;"androidx.datastore:datastore:1.0.0-beta01"&lt;/span&gt;
&lt;span class="n"&gt;implementation&lt;/span&gt;  &lt;span class="s2"&gt;"com.google.protobuf:protobuf-javalite:3.10.0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally at the end of our build.gradle file we configure Protobuf and we &lt;strong&gt;sync our project&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;protobuf&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;protoc&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;artifact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"com.google.protobuf:protoc:3.10.0"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Generates the java Protobuf-lite code for the Protobufs in this project. See&lt;/span&gt;
    &lt;span class="c1"&gt;// https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation&lt;/span&gt;
    &lt;span class="c1"&gt;// for more information.&lt;/span&gt;
    &lt;span class="n"&gt;generateProtoTasks&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builtins&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="s1"&gt;'lite'&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have added this plugin, we should be able to see the automatically generated files by this plugin from our &lt;strong&gt;&lt;code&gt;user_prefs.proto&lt;/code&gt;&lt;/strong&gt; file. &lt;/p&gt;

&lt;p&gt;Rebuild the project to see those files inside the java (generated) folder. &lt;/p&gt;

&lt;p&gt;We find a new &lt;strong&gt;UserPrefs&lt;/strong&gt; folder that represents our proto file,  and a &lt;strong&gt;UserPreferences&lt;/strong&gt; class that represents our message object. Inside it we have java code that implements some getters and setters for this UserPreferences message object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serializer"&gt;
  &lt;/a&gt;
  Serializer ↪️
&lt;/h2&gt;

&lt;p&gt;To tell DataStore how to read and write the data type we defined in the proto file, we need to implement a Serializer. The Serializer defines also the default value to be returned if there's no data saved yet.&lt;/p&gt;

&lt;p&gt;Back in our project, we create a class called &lt;strong&gt;UserPreferencesSerializer&lt;/strong&gt; which extends Serializer. We implement its two methods readFrom and writeTo. In these methods we define how we want to read and write this object into our DataStore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesSerializer&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;readFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;InputStream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parseFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;InvalidProtocolBufferException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;CorruptionException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot read proto."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;writeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;OutputStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#datastore-repository"&gt;
  &lt;/a&gt;
  DataStore Repository 🗃️
&lt;/h2&gt;

&lt;p&gt;Next we create our Repository which we call &lt;strong&gt;UserPreferencesRepository&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;){&lt;/span&gt;
    &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-from-datastore"&gt;
  &lt;/a&gt;
  Read from DataStore 📋
&lt;/h3&gt;

&lt;p&gt;We create a new variable called userPreferencesFlow of type Flow. We use our dataStore to read the data and catch exceptions if there is any and emit the default instance of UserPreferences in that case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesFlow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Flow&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="c1"&gt;// dataStore.data throws an IOException when an error is encountered when reading data&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nc"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Error reading sort order preferences."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultInstance&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#write-to-datastore"&gt;
  &lt;/a&gt;
  Write to DataStore 📝
&lt;/h3&gt;

&lt;p&gt;We create the suspend updateUsername function which will update one field from our UserPreferences member values. We will call &lt;strong&gt;&lt;code&gt;preference.toBuilder().&lt;/code&gt;&lt;/strong&gt; and we choose the setter method that we need from our generated class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;P.S: Don't forget to create a method to update each field.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clear-datastore"&gt;
  &lt;/a&gt;
  Clear DataStore 🆑
&lt;/h3&gt;

&lt;p&gt;To clear data, we can either clear the preferences all together or clear a specific preference by its method from our generated class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;clearDataStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;clearUsername&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;clearUsername&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#call-it-from-the-viewmodel"&gt;
  &lt;/a&gt;
  Call it from the ViewModel 🤙🏼
&lt;/h2&gt;

&lt;p&gt;In our &lt;strong&gt;LoginViewModel&lt;/strong&gt;, we create a variable for our &lt;strong&gt;UserPreferences&lt;/strong&gt;, read its data from our DataStore as a Flow and then convert it to LiveData.&lt;/p&gt;

&lt;p&gt;Next we create a new function named &lt;strong&gt;saveUserPreferences&lt;/strong&gt; and we pass to it the values that we want to update. We call viewModel scope and run the following code inside a coroutine since our update functions in our Repository are using Kotlin Coroutines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesFlow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userPreferencesFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;asLiveData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;saveUserPreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;viewModelScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dispatchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateRemember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateLuckyNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;clearUserPreferences&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;viewModelScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dispatchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clearDataStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginViewModelFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesRepository&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModelProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Factory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modelClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modelClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;isAssignableFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Suppress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UNCHECKED_CAST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unknown ViewModel class"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;LoginViewModelFactory&lt;/strong&gt; is a ViewModelProvider.Factory that is responsible to create our instance of &lt;strong&gt;LoginViewModel&lt;/strong&gt; later in our Activity. We will pass to it the &lt;strong&gt;DataStoreRepository&lt;/strong&gt; which is need in &lt;strong&gt;LoginViewModel&lt;/strong&gt;'s constructor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#observe-it-in-the-activity"&gt;
  &lt;/a&gt;
  Observe it in the Activity 🔬
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-datastore"&gt;
  &lt;/a&gt;
  Create DataStore 🗄️
&lt;/h3&gt;

&lt;p&gt;In our Activity, we first create our userPreferencesDataStore and we initialize it and pass to it a file name as well as our Serializer class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;DATA_STORE_FILE_NAME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"user_prefs.pb"&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;dataStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DATA_STORE_FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesSerializer&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#migrate-from-sharedpreferences"&gt;
  &lt;/a&gt;
  Migrate from SharedPreferences 📦
&lt;/h3&gt;

&lt;p&gt;If we are migrating our existing data from the SharedPreferences, when creating our DataStore, we should add a migration based on the SharedPreferences name. &lt;/p&gt;

&lt;p&gt;And when creating the dataStore we need to update the DataStore builder and assign to the migrations parameter a new list that contains an instance of our SharedPreferencesMigration.&lt;/p&gt;

&lt;p&gt;Define the mapping logic from SharedPreferences to UserPreferences inside your SharedPreferencesMigration.&lt;/p&gt;

&lt;p&gt;DataStore will be able to migrate from SharedPreferences to DataStore automatically, for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;USER_PREFERENCES_NAME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"user_preferences"&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;DATA_STORE_FILE_NAME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"user_prefs.pb"&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;dataStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DATA_STORE_FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesSerializer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;produceMigrations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sharedPrefsMigration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sharedPrefsMigration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SharedPreferencesMigration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;USER_PREFERENCES_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;sharedPrefs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SharedPreferencesView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// Define the mapping from SharedPreferences to UserPreferences&lt;/span&gt;
    &lt;span class="n"&gt;currentData&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside our onCreate function, we initialize our ViewModel and we observe our fields' values, so that whenever this data changes we will update it in its corresponding text field. &lt;/p&gt;

&lt;p&gt;And whenever we click our login button, we store the value from our editText and checkBox field and update it in our DataStore using the saveUserPreferences function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ActivityLoginBinding&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;rememberMe&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;luckyNumber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ActivityLoginBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;viewModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ViewModelProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nc"&gt;LoginViewModelFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userPreferencesFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;userPreferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;rememberMe&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;
            &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;
            &lt;span class="n"&gt;luckyNumber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;luckyNumber&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rememberMe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;WelcomeActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isChecked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;luckyNumber&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;isNotEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toInt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;saveUserPreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;WelcomeActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnCheckedChangeListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;compoundButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompoundButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;compoundButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isChecked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clearUserPreferences&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways 💡
&lt;/h2&gt;

&lt;p&gt;Now that we migrated to Preferences DataStore let's recap! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DataStore&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;is a replacement for SharedPreferences addressing most of its downsides&lt;/li&gt;
&lt;li&gt;has a fully asynchronous API using Kotlin coroutines and Flow&lt;/li&gt;
&lt;li&gt;guarantees data consistency&lt;/li&gt;
&lt;li&gt;handles data migration&lt;/li&gt;
&lt;li&gt;handles data corruption&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DataStore has 2 different implementations:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/yalematta/datastore-is-the-new-sharedpreferences-8a9"&gt;&lt;strong&gt;Preferences DataStore&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stores and accesses data using keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Proto DataStore&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ensures Type Safety&lt;/li&gt;
&lt;li&gt;requires defining a schema using Protocol Buffers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#up-next-%E2%8F%AD"&gt;
  &lt;/a&gt;
  Up next ⏭
&lt;/h2&gt;

&lt;p&gt;If this post was of any help to you, or if you'd like me to write about any specific Android related topics, let me know! Drop me a DM on Twitter &lt;a href="https://twitter.com/yalematta"&gt;@yalematta&lt;/a&gt; ✌🏼&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>jetpack</category>
      <category>datastore</category>
    </item>
    <item>
      <title>Best Hosting for Developer (With Free Trial)</title>
      <author>GoOnlineTools</author>
      <pubDate>Tue, 25 May 2021 14:24:58 +0000</pubDate>
      <link>https://dev.to/goonlinetools/best-hosting-for-developer-with-free-trial-di7</link>
      <guid>https://dev.to/goonlinetools/best-hosting-for-developer-with-free-trial-di7</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;If you’re a web developer, you need a web hosting provider that offers the cheapest hosting plan, best hosting features, and as well as excellent support and full backend access.&lt;/p&gt;

&lt;p&gt;I recommend 4 web hosting company that can serve you faster and reliably each time so that your website visitors can have a great experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cloudways-3-days-free"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://bit.ly/3flm4CY"&gt;Cloudways&lt;/a&gt; - 3 Days Free
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3_n5_b7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0xqzfpfye4kyl7bnn1j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3_n5_b7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0xqzfpfye4kyl7bnn1j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloudways is a managed hosting provider that emphasizes performance and simplicity. From the simple server and application launch to the ongoing server maintenance, Cloudways takes away all the hassles of server management so that you can continue to focus on growing your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-linode-100-free-credit"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://bit.ly/2Tj1eMc"&gt;Linode&lt;/a&gt; - 100$ Free Credit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjqbfpjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3w2q6qbm0nimcfmcur8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjqbfpjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3w2q6qbm0nimcfmcur8.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linode is a cloud hosting provider that focuses on providing Linux powered virtual machines to support a wide range of applications. Given its roots, many experts do not see it as a beginner-friendly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-digitalocean-100-free-credit"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://bit.ly/3caXNOn"&gt;DigitalOcean&lt;/a&gt; - 100$ Free Credit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnHxYmfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1sdwyqk1cflaf1ejjgp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnHxYmfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1sdwyqk1cflaf1ejjgp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DigitalOcean is a cloud infrastructure provider that provides cloud computing services to business entities. It is used to scale by deploying DigitalOcean applications that run parallel across multiple cloud servers without compromising performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-vultr-100-free-credit"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://bit.ly/2QQ6EgJ"&gt;Vultr&lt;/a&gt; - 100$ Free Credit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PRcCBU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43vw8jbo6y3kt0caw1nz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PRcCBU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43vw8jbo6y3kt0caw1nz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vultr provides high-performance SSD cloud servers that boast a global footprint. It aims to create the most reliable and efficient service for launching a blazing fast SSD cloud server.&lt;/p&gt;

&lt;p&gt;I tried these 4 hosting presonally for my sites and every hosting perform well but cloud hosting provider doesn't provide contact support only for server, no extra support.&lt;/p&gt;

&lt;p&gt;If you want good contact support and security in cloud hosting then i recommend &lt;a href="https://bit.ly/3flm4CY"&gt;Cloudways&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you manage complete server and server security from your own then you can go with any hosting listed above but i recommend &lt;a href="https://bit.ly/2Tj1eMc"&gt;Linode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you will choose right hosting :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Top 10 (+/-) Linux skills for landing a Linux job</title>
      <author>Denislav Gavrilov 👨‍🚀🤖🤷‍♂️</author>
      <pubDate>Tue, 25 May 2021 14:07:41 +0000</pubDate>
      <link>https://dev.to/asciiden/top-10-linux-skills-for-landing-a-linux-job-1i5m</link>
      <guid>https://dev.to/asciiden/top-10-linux-skills-for-landing-a-linux-job-1i5m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Hey now, you have probably went through numerous job-hunting websites and you memorized all the buzzwords (Junior Sysadmin; Junior Site Reliability Engineer; NOC Engineer; System support; etc.) that can get you in IT with zero experience, or even zero education. Well, let me tell you - you are on the right track! However, there are some insights that a lot of you don't know as you haven't got a real Linux job. Well now, except you are on the right track, you are on the post, as well!&lt;/p&gt;

&lt;p&gt;I am going to note down &amp;amp; explain the top 10 Linux skills (in the opinion of a person who had a Linux job as a first) that you should have before rushing into the interview.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#top-10-linux-skills"&gt;
  &lt;/a&gt;
  TOP 10 (+/-) Linux skills
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Linux skills? But I know a lot of commands already!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is not up to the commands you know but the ability to imply them at the right time and know when &amp;amp; what to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-logs"&gt;
  &lt;/a&gt;
  Reading logs
&lt;/h2&gt;

&lt;p&gt;You should &lt;strong&gt;always&lt;/strong&gt; read logs. Consider logging like the conversation you have with your friend just after you had a fight.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-Hey man, I am not really sure what happened there.&lt;/p&gt;

&lt;p&gt;-Yeah, there was an error in our communication...&lt;/p&gt;

&lt;p&gt;-What do you mean? Could you be a little bit more specific?&lt;/p&gt;

&lt;p&gt;-Well, when you told me to give you reggs from the fridge I was super confused what does reggs mean.&lt;/p&gt;

&lt;p&gt;-Yeah, sorry man, I meant eggs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now lets turn this into a 'Linux logging conversation'&lt;/p&gt;

&lt;p&gt;Case:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You type your Nginx server block but you miss-spell 'root' as 'rot'. You type &lt;code&gt;nginx -t&lt;/code&gt; and the test fails. However, you don't pay much attention to the test and do a &lt;code&gt;/etc/init.d/nginx reload&lt;/code&gt; to turn your new website visible. Nginx crashes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Oh sh*t, my Nginx crashed. Better check the web server (Nginx) logs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh root@server_ip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;less /var/log/nginx/error.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SHIFT+G&lt;/code&gt; (this takes you to the end of the file when using the &lt;code&gt;less&lt;/code&gt; command)&lt;/li&gt;
&lt;li&gt;You will see a line with the following context:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;2021/05/25 12:28:34 [emerg] 28044#28044: unknown directive "rot" in /etc/nginx/sites-enabled/your.website:3&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Oh, I typed 'rot' instead of 'root' in my server block. Alrighty, lets fix that!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano /etc/nginx/sites-available/your.website&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change 'rot' to 'root'&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nginx -t&lt;/code&gt; - all is fine&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/etc/init.d/nginx reload&lt;/code&gt; - all is fine&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a simple example of how the logs can help you. You should always check the logs for each application that you are having a problem with.&lt;/p&gt;

&lt;p&gt;Here comes the investigation skills that are of high importance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#investigation-skills"&gt;
  &lt;/a&gt;
  Investigation skills
&lt;/h2&gt;

&lt;p&gt;Okay, you know you have to check logs. However, there is something additional you probably didn't consider. When your application crashes, there is a huge possibility it is going to rely on many different technologies. That is why you should have an arsenal of plans when something crashes. What I usually do is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Note down the founding error&lt;/li&gt;
&lt;li&gt;Google the error&lt;/li&gt;
&lt;li&gt;Check /var/log/syslog&lt;/li&gt;
&lt;li&gt;Check /var/log/nginx/error.log (if using Nginx)&lt;/li&gt;
&lt;li&gt;Make a connection between the Google results + syslog + nginx error log&lt;/li&gt;
&lt;li&gt;Google if nginx/syslog are related to the founding error&lt;/li&gt;
&lt;li&gt;Choose a resolution from Google &amp;amp; start working on it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, the investigation skills you need are the curiosity to explore in detail. Every small error you bump into, GOOGLE IT!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-commands"&gt;
  &lt;/a&gt;
  Understanding the commands
&lt;/h2&gt;

&lt;p&gt;When you are working with Linux, you will work mainly (if not ONLY) with commands through the terminal. Don't let that scare you but don't be having too much trust in yourself as well.&lt;/p&gt;

&lt;p&gt;When typing commands, always google when you are not sure. There are many flags to the commands that do a lot of different stuff and some of them can hurt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-system-resources"&gt;
  &lt;/a&gt;
  Checking system resources
&lt;/h2&gt;

&lt;p&gt;Linux is just like any other operating system. It has system resources and these resources can impact the performance of our system. Here are some commands that can help you understand what is happening with your server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;top&lt;/code&gt; - This command is the task manager of Linux.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;free -h&lt;/code&gt; - This command is showing how much memory you have and how much of it is being used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;df -h&lt;/code&gt; - This command is showing you how much storage you have left throughout your directories.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;du -sh&lt;/code&gt; - This command is showing you how much memory your files / directories are taking. An example of using this command is &lt;code&gt;du -sh /var/log/*&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#check-the-history"&gt;
  &lt;/a&gt;
  Check the history
&lt;/h2&gt;

&lt;p&gt;This is a super short tip - always check the history because somebody before you could have already had the same issue you had. Linux history is a history of the commands used by the user you are logged in with. You simply type the &lt;code&gt;history&lt;/code&gt; command and you will get an output with line numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHq5QsPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qirt5yh5hfrdb5mr54cq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHq5QsPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qirt5yh5hfrdb5mr54cq.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-basic-directory-architecture"&gt;
  &lt;/a&gt;
  Understanding basic directory architecture
&lt;/h2&gt;

&lt;p&gt;In Linux, there are some main directories which are driving the operating system to function. If I try to explain them in a better way than somebody with years of experience, I would probably fail to deliver you the quality of content you need. For this sole purpose, I am teleporting you to the realm of &lt;a href="https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/"&gt;How To Geek - The Linux Directory Structure, Explained&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-skills"&gt;
  &lt;/a&gt;
  Bonus skills
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#scripting-skills"&gt;
  &lt;/a&gt;
  Scripting skills
&lt;/h2&gt;

&lt;p&gt;It is always great to have more weapons in your arsenal. Scripting skills can be of high importance when you have a recurring task that you could automate. I personally only know how to script in &lt;a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;BASH&lt;/a&gt;. And it has been enough for me for 2 years already. However, if you want to step-up your game, you could look at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.perl.org/"&gt;PERL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/"&gt;GOLANG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mostused-linux-stack"&gt;
  &lt;/a&gt;
  Most-used Linux Stack
&lt;/h2&gt;

&lt;p&gt;A Linux stack is a stack of technologies working together to deliver a solution. The most used Linux stack is the LAMP stack. it consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linux.org/"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://httpd.apache.org/"&gt;Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.php.net/"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first letter of each of these technologies brings us the LAMP abbreviation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monitoring"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h2&gt;

&lt;p&gt;When working with Linux, mostly when you are a systems administrator, you will have a monitoring system in place to keep track of all the systems you are supporting. Some of the most used monitoring software suits are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://newrelic.com/"&gt;Nagios&lt;/a&gt; (my personal favorite as I started with it)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zabbix.com/"&gt;Zabbix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://newrelic.com/"&gt;New Relic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#know-the-distribution-differences"&gt;
  &lt;/a&gt;
  Know the distribution differences
&lt;/h2&gt;

&lt;p&gt;Linux has many distributions with &lt;a href="https://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;, &lt;a href="https://www.debian.org/"&gt;Debian&lt;/a&gt;, &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux"&gt;RHEL&lt;/a&gt; being the most popular ones. Each different distribution has different spelling of some commands and has its own way of working. The best way to understand these differences is to install them separately on a VM and poke around.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In conclusion, the Linux world is a vast and open ocean where you can dive deeper and deeper each day. Every time you find yourself understanding something, there is more information that comes to light. I hope this post lighted up your interest a little &amp;amp; made you consider raising the bar of your Linux skills.&lt;/p&gt;

&lt;p&gt;I wish you all the best &amp;amp; happy exploring!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the author
&lt;/h1&gt;

&lt;p&gt;I am Dennis, going by ASCIIden online and I am a junior DevOps engineer. However, I don't like the title of 'DevOps' to identify myself with. I rather consider myself a futurist &amp;amp; huge tech enthusiast.&lt;/p&gt;

&lt;p&gt;I am doing IT for about 2 years now and I am learning so much I could not express it with words. I am striving to become a helping hand to all juniors in the industry and I am doing my best to provide good and understanding content for you all to enjoy.&lt;/p&gt;

&lt;p&gt;If you want to hit me up for a project or just want to say hi, feel free to do it on any of my social media which you can find in my &lt;a href="https://twitter.com/asciiden"&gt;Twitter profile&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>systems</category>
    </item>
    <item>
      <title>Perl can do that now!</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 25 May 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/perl-can-do-that-now-3doj</link>
      <guid>https://dev.to/mjgardner/perl-can-do-that-now-3doj</guid>
      <description>&lt;p&gt;Last week saw the &lt;a href="https://metacpan.org/release/XSAWYERX/perl-5.34.0"&gt;release&lt;/a&gt; of Perl 5.34.0 (you can &lt;a href="https://www.perl.org/get.html"&gt;get it here&lt;/a&gt;), and with it comes a year’s worth of &lt;a href="https://perldoc.pl/5.34.0/perldelta#Core-Enhancements"&gt;new features&lt;/a&gt;, &lt;a href="https://perldoc.pl/5.34.0/perldelta#Performance-Enhancements"&gt;performance enhancements&lt;/a&gt;, &lt;a href="https://perldoc.pl/5.34.0/perldelta#Selected-Bug-Fixes"&gt;bug fixes&lt;/a&gt;, and other improvements. It seems like a good time to &lt;strong&gt;highlight some of my favorite changes&lt;/strong&gt; over the past decade and a half, especially for those with more dated knowledge of Perl. You can always click on the headers below for the full releases’ &lt;code&gt;perldelta&lt;/code&gt; pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-510-2007"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5100delta"&gt;Perl 5.10&lt;/a&gt; (2007)
&lt;/h2&gt;

&lt;p&gt;This was a big release, coming as it did over five years after the previous major 5.8 release. Not that Perl developers were idle—but it wouldn’t be until version 5.14 that the language would adopt a steady yearly release cadence.&lt;/p&gt;

&lt;p&gt;Due to the build-up time, many &lt;a href="https://perldoc.pl/perl5100delta#Core-Enhancements"&gt;core enhancements&lt;/a&gt; were made but the most important was arguably &lt;a href="https://perldoc.pl/perl5100delta#The-feature-pragma"&gt;the &lt;code&gt;feature&lt;/code&gt; pragma&lt;/a&gt;, &lt;strong&gt;enabling the addition of new syntax&lt;/strong&gt; that would otherwise break Perl’s backward compatibility. 5.10 also introduced the &lt;a href="https://perldoc.pl/perl5100delta#Defined-or-operator"&gt;defined-or operator&lt;/a&gt; (&lt;code&gt;//&lt;/code&gt;), &lt;a href="https://perldoc.pl/perl5100delta#state()-variables"&gt;&lt;code&gt;state&lt;/code&gt; variables&lt;/a&gt; that persist their previous value, the &lt;a href="https://perldoc.pl/perl5100delta#say()"&gt;&lt;code&gt;say&lt;/code&gt; function&lt;/a&gt; for automatically appending a newline on output (so much saved typing), and a large collection of &lt;a href="https://perldoc.pl/perl5100delta#Regular-expressions"&gt;improvements to regular expressions&lt;/a&gt;. In addition, this release introduced &lt;a href="https://perldoc.pl/perl5100delta#Switch-and-Smart-Match-operator"&gt;smart matching&lt;/a&gt; (&lt;code&gt;~~&lt;/code&gt;), though version 5.18 would eventually &lt;a href="https://perldoc.pl/perl5180delta#The-smartmatch-family-of-features-are-now-experimental"&gt;relegate it to experimental status&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-512-2010"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5120delta"&gt;Perl 5.12&lt;/a&gt; (2010)
&lt;/h2&gt;

&lt;p&gt;This release also saw many &lt;a href="https://perldoc.pl/perl5120delta#Core-Enhancements"&gt;new features&lt;/a&gt; added, but if I had to pick one marquee item it would be experimental support for &lt;a href="https://perldoc.pl/perl5120delta#Pluggable-keywords"&gt;pluggable keywords&lt;/a&gt;, which &lt;a href="https://metacpan.org/search?q=Keyword"&gt;enabled authors&lt;/a&gt; to &lt;strong&gt;extend the language itself&lt;/strong&gt; without modifying the core. Previously one would either use plain functions, hacky &lt;a href="https://perldoc.perl.org/perlfilter"&gt;source filters&lt;/a&gt;, or the deprecated &lt;a href="https://metacpan.org/pod/Devel::Declare"&gt;Devel::Declare&lt;/a&gt; module to simulate this functionality. CPAN authors would go on to create all kinds of new syntax, sometimes prototyping features that would eventually make their way into core.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-514-2011"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5140delta"&gt;Perl 5.14&lt;/a&gt; (2011)
&lt;/h2&gt;

&lt;p&gt;5.14 had a big list of &lt;a href="https://perldoc.pl/perl5140delta#Core-Enhancements"&gt;enhancements&lt;/a&gt;, including &lt;a href="https://perldoc.pl/perl5140delta#Unicode"&gt;Unicode 6.0 support&lt;/a&gt; and a gaggle of &lt;a href="https://perldoc.pl/perl5140delta#Unicode"&gt;regular expression features&lt;/a&gt;. My favorite of these was the &lt;code&gt;/r&lt;/code&gt; switch for &lt;a href="https://perldoc.pl/perl5140delta#Non-destructive-substitution"&gt;non-destructive substitutions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But as the &lt;strong&gt;first yearly cadence release&lt;/strong&gt; , the &lt;a href="https://perldoc.pl/5.14.0/perlpolicy"&gt;changes in policy&lt;/a&gt; took center stage. The Perl 5 Porters (p5p) &lt;a href="https://perldoc.pl/5.14.0/perlpolicy#MAINTENANCE-AND-SUPPORT"&gt;explicitly committed&lt;/a&gt; to supporting the two most recent stable release series, providing security patches only for release series occurring in the past three years. They also defined an explicit &lt;a href="https://perldoc.pl/5.14.0/perlpolicy#BACKWARD-COMPATIBILITY-AND-DEPRECATION"&gt;compatibility and deprecation policy&lt;/a&gt;, with definitions for features that may be &lt;a href="https://perldoc.pl/5.14.0/perlpolicy#experimental"&gt;experimental&lt;/a&gt;, &lt;a href="https://perldoc.pl/5.14.0/perlpolicy#deprecated"&gt;deprecated&lt;/a&gt;, &lt;a href="https://perldoc.pl/5.14.0/perlpolicy#discouraged"&gt;discouraged&lt;/a&gt;, and &lt;a href="https://perldoc.pl/5.14.0/perlpolicy#removed"&gt;removed&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-516-2012"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5160delta"&gt;Perl 5.16&lt;/a&gt; (2012)
&lt;/h2&gt;

&lt;p&gt;Another year, another version bump. This time the &lt;a href="https://perldoc.pl/perl5160delta#Core-Enhancements"&gt;core enhancements&lt;/a&gt; were all over the map (although no enhancements to the &lt;a href="https://perldoc.pl/5.16.0/functions/map"&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; function 😉).&lt;/p&gt;

&lt;p&gt;May I highlight another documentation change, though? The &lt;a href="https://perldoc.pl/5.16.0/perlootut"&gt;&lt;code&gt;perlootut&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Object-Oriented Programming in Perl Tutorial&lt;/strong&gt; &lt;a href="https://perldoc.pl/perl5160delta#Old-OO-Documentation"&gt;replaced&lt;/a&gt; the old &lt;a href="https://perldoc.pl/5.14.4/perltoot"&gt;&lt;code&gt;perltoot&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/5.14.4/perltooc"&gt;&lt;code&gt;perltooc&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/5.14.4/perlboot"&gt;&lt;code&gt;perlboot&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://perldoc.pl/5.14.4/perlbot"&gt;&lt;code&gt;perlbot&lt;/code&gt;&lt;/a&gt; pages, providing an introduction to object-oriented design concepts before &lt;a href="https://perldoc.pl/5.16.0/perlootut#PERL-OO-SYSTEMS"&gt;strongly recommending&lt;/a&gt; the use of one of the OO systems from CPAN. Mentioned are &lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt;, its alternative &lt;a href="https://metacpan.org/pod/Mouse"&gt;Mouse&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Class::Accessor"&gt;Class::Accessor&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Object::Tiny"&gt;Object::Tiny&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Role::Tiny"&gt;Role::Tiny&lt;/a&gt;’s usage with the latter two. Later versions of &lt;code&gt;perlootut&lt;/code&gt; would recommend &lt;a href="https://perldoc.pl/perlootut#Moo"&gt;Moo&lt;/a&gt; rather than Mouse.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-518-2013"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5180delta"&gt;Perl 5.18&lt;/a&gt; (2013)
&lt;/h2&gt;

&lt;p&gt;As &lt;a href="#perl510"&gt;mentioned earlier&lt;/a&gt;, Perl 5.18 rendered smartmatch &lt;a href="https://perldoc.pl/perl5180delta#The-smartmatch-family-of-features-are-now-experimental"&gt;experimental&lt;/a&gt;, as well as &lt;a href="https://perldoc.pl/perl5180delta#Lexical-%24_-is-now-experimental"&gt;lexical use&lt;/a&gt; of the &lt;code&gt;$_&lt;/code&gt; variable. With these came a new &lt;a href="https://perldoc.pl/5.18.0/perllexwarn#Category-Hierarchy"&gt;category of warnings&lt;/a&gt; for experimental features and a &lt;a href="https://perldoc.pl/perl5180delta#New-mechanism-for-experimental-features"&gt;method for overriding such warnings&lt;/a&gt; feature-by-feature. Fitting in with the &lt;a href="https://perldoc.pl/perl5180delta#Security"&gt;security&lt;/a&gt; and safety theme, &lt;a href="https://perldoc.pl/perl5180delta#Hash-overhaul"&gt;hashes were overhauled&lt;/a&gt; to &lt;a href="https://perldoc.pl/perl5180delta#Hash-randomization"&gt;randomize&lt;/a&gt; key/value order, increasing their resistance to algorithmic complexity attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But it wasn’t all fencing in bad behavior.&lt;/strong&gt; &lt;a href="https://perldoc.pl/5.18.0/perlsub#Lexical-Subroutines"&gt;Lexical subroutines&lt;/a&gt; made &lt;a href="https://perldoc.pl/perl5180delta#Lexical-subroutines"&gt;their first (experimental) appearance&lt;/a&gt;, and although I confess I haven’t had much call for them in my work, others have &lt;a href="https://rjbs.manxome.org/rubric/entry/2016"&gt;come up with some interesting uses&lt;/a&gt;. Four years later they &lt;a href="https://perldoc.pl/perl5260delta#Lexical-subroutines-are-no-longer-experimental"&gt;became non-experimental&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-520-2014"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5200delta"&gt;Perl 5.20&lt;/a&gt; (2014)
&lt;/h2&gt;

&lt;p&gt;Three new syntax features arrived in 2014: experimental &lt;a href="https://perldoc.pl/perl5200delta#Experimental-Subroutine-signatures"&gt;subroutine signatures&lt;/a&gt; (of which &lt;a href="https://phoenixtrap.com/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/"&gt;I’ve written more about here&lt;/a&gt;), &lt;a href="https://perldoc.pl/perl5200delta#New-slice-syntax"&gt;key/value hash slices and index/value array slices&lt;/a&gt;, and experimental &lt;a href="https://perldoc.pl/perl5200delta#Experimental-Postfix-Dereferencing"&gt;postfix dereferencing&lt;/a&gt;. This last enables &lt;strong&gt;cleaner left-to-right syntax&lt;/strong&gt; when dereferencing variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@{ $array_ref }&lt;/code&gt; becomes &lt;code&gt;$array_ref-&amp;gt;@*&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%{ $hash_ref }&lt;/code&gt; becomes &lt;code&gt;$hash_ref-&amp;gt;%*&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Postfix dereferencing &lt;a href="https://perldoc.pl/perl5240delta#Postfix-dereferencing-is-no-longer-experimental"&gt;became non-experimental in Perl 5.24&lt;/a&gt;, and &lt;a href="https://github.com/Perl/perl5/issues/18537"&gt;vigorous discussion continues&lt;/a&gt; on subroutine signatures’ future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-522-2015"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5220delta"&gt;Perl 5.22&lt;/a&gt; (2015)
&lt;/h2&gt;

&lt;p&gt;Speaking of subroutine signatures, &lt;a href="https://perldoc.pl/perl5220delta#Subroutine-signatures-moved-before-attributes"&gt;their location moved&lt;/a&gt; to between the subroutine name (if any) and the attribute list (if any). Previously they appeared after attributes. The lesson? Remain conscious of experimental features in your code, and be prepared to make changes when upgrading.&lt;/p&gt;

&lt;p&gt;In addition to the &lt;a href="https://perldoc.pl/perl5220delta#Core-Enhancements"&gt;enhancements&lt;/a&gt;, &lt;a href="https://perldoc.pl/perl5220delta#Security"&gt;security updates&lt;/a&gt;, &lt;a href="https://perldoc.pl/perl5220delta#Performance-Enhancements"&gt;performance fixes&lt;/a&gt;, and &lt;a href="https://perldoc.pl/perl5220delta#Deprecations"&gt;deprecations&lt;/a&gt;, developers &lt;a href="https://perldoc.pl/perl5220delta#Deprecations"&gt;&lt;strong&gt;removed the historically notable CGI module&lt;/strong&gt;&lt;/a&gt;. First &lt;a href="https://perldoc.pl/perl5004delta#Module-information-summary"&gt;added to core&lt;/a&gt; in 1997 in recognition of its critical role in enabling web development, it’s been supplanted by &lt;a href="https://metacpan.org/pod/CGI::Alternatives"&gt;better alternatives&lt;/a&gt; on CPAN.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-524-2016"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5240delta"&gt;Perl 5.24&lt;/a&gt; (2016)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#perl520"&gt;Perl 5.20&lt;/a&gt;’s postfix dereferencing was &lt;a href="https://perldoc.pl/perl5240delta#Postfix-dereferencing-is-no-longer-experimental"&gt;no longer experimental&lt;/a&gt;, and developers removed both &lt;a href="https://perldoc.pl/perl5240delta#Lexical-%24_-has-been-removed"&gt;lexical &lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://perldoc.pl/perl5240delta#The-autoderef-feature-has-been-removed"&gt;autodereferencing&lt;/a&gt; on calls to &lt;a href="https://perldoc.pl/functions/push"&gt;&lt;code&gt;push&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/functions/pop"&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/functions/shift"&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/functions/unshift"&gt;&lt;code&gt;unshift&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/functions/splice"&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/functions/keys"&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/functions/values"&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://perldoc.pl/functions/each"&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-526-2017"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5260delta"&gt;Perl 5.26&lt;/a&gt; (2017)
&lt;/h2&gt;

&lt;p&gt;The incorporation of experimental features continued, with &lt;a href="https://perldoc.pl/perl5260delta#Lexical-subroutines-are-no-longer-experimental"&gt;lexical subroutines moving into full support&lt;/a&gt;. I like the &lt;strong&gt;added readability enhancements&lt;/strong&gt; , though: &lt;a href="https://perldoc.pl/perl5260delta#Indented-Here-documents"&gt;indented here-documents&lt;/a&gt;; the &lt;a href="https://perldoc.pl/perl5260delta#New-regular-expression-modifier-/xx"&gt;&lt;code&gt;/xx&lt;/code&gt; regular expression modifier&lt;/a&gt; for tabs and spaces in character classes; and &lt;a href="https://perldoc.pl/perl5260delta#@%7B%5ECAPTURE%7D,-%25%7B%5ECAPTURE%7D,-and-%25%7B%5ECAPTURE_ALL%7D"&gt;&lt;code&gt;@{^CAPTURE}&lt;/code&gt;, &lt;code&gt;%{^CAPTURE}&lt;/code&gt;, and &lt;code&gt;%{^CAPTURE_ALL}&lt;/code&gt;&lt;/a&gt; for regexp matches with a little more self-documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-528-2018"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5280delta"&gt;Perl 5.28&lt;/a&gt; (2018)
&lt;/h2&gt;

&lt;p&gt;Experimental subroutine signature and attribute ordering &lt;a href="https://perldoc.pl/perl5280delta#Subroutine-attribute-and-signature-order"&gt;flipped back&lt;/a&gt; to its Perl 5.20 sequence of attributes-then-signature. Bit of a rollercoaster ride on this one. You could do worse than using something like &lt;a href="https://metacpan.org/pod/Type::Params"&gt;Type::Params&lt;/a&gt; until this settles and get a wide variety of type constraints in the bargain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-530-2019"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5300delta"&gt;Perl 5.30&lt;/a&gt; (2019)
&lt;/h2&gt;

&lt;p&gt;Pour one out for AWK and Fortran programmers migrating to Perl: [the &lt;code&gt;$[&lt;/code&gt; variable](&lt;a href="https://perldoc.pl/variables/%24%5B"&gt;https://perldoc.pl/variables/%24%5B&lt;/a&gt;) for setting the lower bound of arrays could &lt;a href="https://perldoc.pl/perl5300delta#Assigning-non-zero-to-%24%5B-is-fatal"&gt;no longer be set to anything other than zero&lt;/a&gt;. This had a long deprecation cycle &lt;a href="#perl512"&gt;starting in Perl 5.12&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-532-2020"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/perl5320delta"&gt;Perl 5.32&lt;/a&gt; (2020)
&lt;/h2&gt;

&lt;p&gt;In 2020 Perl’s development &lt;a href="https://perldoc.pl/perl5320delta#Perl-is-now-developed-on-GitHub"&gt;moved to GitHub&lt;/a&gt;. And once again, I’m going to &lt;strong&gt;highlight readability enhancements&lt;/strong&gt; : the experimental &lt;a href="https://perldoc.pl/perlop#Class-Instance-Operator"&gt;&lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt; could be used to say:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="nv"&gt;isa&lt;/span&gt; &lt;span class="nn"&gt;Some::&lt;/span&gt;&lt;span class="nv"&gt;Class&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Scalar::&lt;/span&gt;&lt;span class="nv"&gt;Util&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blessed&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;blessed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;isa&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Some::Class&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also &lt;a href="https://perldoc.pl/perl5320delta#Chained-comparisons-capability"&gt;chain comparison operators&lt;/a&gt;, leading to the more mathematically concise &lt;code&gt;if ( $x &amp;lt; $y &amp;lt;= $z ) {...}&lt;/code&gt; rather than &lt;code&gt;if ( $x &amp;lt; $y and $y &amp;lt;= $z ) {...}&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-534-2021"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/5.34.0/perldelta"&gt;Perl 5.34&lt;/a&gt; (2021)
&lt;/h2&gt;

&lt;p&gt;Finally, we come to &lt;strong&gt;last week’s release&lt;/strong&gt; and its introduction of &lt;a href="https://perldoc.pl/5.34.0/perldelta#Experimental-Try/Catch-Syntax"&gt;experimental &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; exception handling syntax&lt;/a&gt;. If you need to support earlier versions of Perl back to 5.14, you can use &lt;a href="https://metacpan.org/pod/Feature::Compat::Try"&gt;Feature::Compat::Try&lt;/a&gt;. Earlier this year I &lt;a href="https://www.perl.com/article/interview-trying-to-catch-paul-leonerd-evans/"&gt;interviewed the feature and module’s author, Paul “LeoNerd” Evans&lt;/a&gt;, for Perl.com. This year also marked the debut of Perl’s new &lt;a href="https://perldoc.pl/perlgov"&gt;governance model&lt;/a&gt; with the appointment of a &lt;a href="https://perldoc.pl/perlgov#The-Core-Team"&gt;Core Team&lt;/a&gt; and a three-member &lt;a href="https://perldoc.pl/perlgov#The-Steering-Council"&gt;Steering Council&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are some of your favorite Perl improvements over the years?&lt;/strong&gt; Check out the &lt;a href="https://perldoc.pl/perlhist"&gt;&lt;code&gt;perlhist&lt;/code&gt; document&lt;/a&gt; for a detailed chronology and refresher with the various &lt;a href="https://perldoc.pl/perl#History"&gt;&lt;code&gt;perldelta&lt;/code&gt; pages&lt;/a&gt; and leave me a comment below.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>languages</category>
    </item>
    <item>
      <title>Coding Goals for 2021: the Reasons to Learn Java</title>
      <author>Alex</author>
      <pubDate>Tue, 25 May 2021 13:59:57 +0000</pubDate>
      <link>https://dev.to/alexxxismyname/coding-goals-for-2021-the-reasons-to-learn-java-5b0p</link>
      <guid>https://dev.to/alexxxismyname/coding-goals-for-2021-the-reasons-to-learn-java-5b0p</guid>
      <description>&lt;p&gt;In terms of a pandemic situation, many large companies were forced to take all their processes online. So, they need someone who can build an enterprise-level server-side application, create website content, and keep up maintaining it promptly. In this case, many projects choose Java to build the apps and, consequently, need as many Java programmers as possible to implement that. So, if you still ask yourself “Why should I learn Java”, this is supposed to be an answer.&lt;/p&gt;

&lt;p&gt;But, this is not the only reason, and I will explain why becoming a Java developer in 2021 is a fresh start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-to-become-a-programmer-in-2021"&gt;
  &lt;/a&gt;
  Why Choose to Become a Programmer in 2021
&lt;/h2&gt;

&lt;p&gt;Right before considering the other reasons for starting to master Java, it makes sense, to begin with fundamentals and discover what’s so good about becoming a programmer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stable-industry"&gt;
  &lt;/a&gt;
  Stable Industry
&lt;/h3&gt;

&lt;p&gt;Software engineering is a fairly stable industry. Even the study of the Bureau of Labor Statistics showed that the &lt;a href="https://www.forbes.com/sites/stuartanderson/2020/06/11/unemployment-rate-for-computer-occupations-fell-in-may/?sh=2e86cf3b16ad"&gt;percentage of unemployed the workforce&lt;/a&gt; in computer and information technology occupations not only remained consistently low but also fell by May 2020. The percentage of unemployed individuals in all other occupations, in its turn, increased up to 13.5%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dfmoXJjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahvjvxlmkm62ny62aqs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dfmoXJjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahvjvxlmkm62ny62aqs4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regardless of industry stability, the technology is still evolving fast, and you won’t be likely to use the same skills you are acquiring today in five or ten years. But this should not prevent you from learning to program. The companies are interested in the constant development of their employees and usually support them in adopting up-to-date technologies, tools, and concepts. So, you can keep up polishing your skills and remain an in-demand programmer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#considerable-income"&gt;
  &lt;/a&gt;
  Considerable Income
&lt;/h3&gt;

&lt;p&gt;I won’t reinvent the wheel if I say that programmers can make considerably more than the specialists of the other mass career choices. The skills of software engineers are wanted by many companies, and the next list of salaries by &lt;a href="https://www.glassdoor.com/index.htm"&gt;Glassdoor&lt;/a&gt; clearly illustrates that statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java developer — $79,137 / yr&lt;/li&gt;
&lt;li&gt;Python developer — $76,526 / yr&lt;/li&gt;
&lt;li&gt;Go developer — $75,715 / yr&lt;/li&gt;
&lt;li&gt;Ruby developer — $75,715 / yr&lt;/li&gt;
&lt;li&gt;C Net developer — $75,715 / yr&lt;/li&gt;
&lt;li&gt;Swift developer — $75,715 / yr&lt;/li&gt;
&lt;li&gt;C++ developer — $76,526 / yr&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#positive-work-culture"&gt;
  &lt;/a&gt;
  Positive Work Culture
&lt;/h3&gt;

&lt;p&gt;There is a black sheep in every flock, and annoying people are everywhere. But, the chance to meet such coworkers and face discrimination in the IT world is still miserable. Apart from that, there is a great variety of job offers on the market, and the rumors spread promptly among local programmers. So, you can easily avoid bad companies, which is hard to do in many other spheres.&lt;/p&gt;

&lt;p&gt;Besides, more and more software companies strive to adopt effective practices that help them care about the level of productivity and well-being of their employers. Feedback sessions, one-to-one meetings, retrospectives are just a small part of the adopted processes that allow managers to stay in touch with a team.&lt;/p&gt;

&lt;p&gt;Many companies hiring Java devs are telecommuter-friendly, they allow flexible working schedules and remote work, so you can accomplish your professional duties from anywhere in the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons-to-learn-java-in-2021"&gt;
  &lt;/a&gt;
  Reasons to Learn Java in 2021
&lt;/h2&gt;

&lt;p&gt;Now you know that becoming a programmer in 2021 is a good prospect for your future career. Let’s move further and talk about why Java is worth selecting for the coming projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#java-remains-a-leading-programming-language"&gt;
  &lt;/a&gt;
  Java Remains a Leading Programming Language
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.tiobe.com/tiobe-index/"&gt;TIOBE Index&lt;/a&gt; has recently come up with new results for December and Java is now the world’s second most popular programming language.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fszxe8U6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjf8pedchvkfzi8lsgv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fszxe8U6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjf8pedchvkfzi8lsgv6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test conducted on Devskiller made Java a winner, while SQL and JavaScript took second and third place, respectively. The reason for being so popular lies in the constant development of Java, which leads to new, up-to-date features. The latter makes the development process easier and more optimized and hence significantly helps developers.&lt;/p&gt;

&lt;p&gt;Among other things, Java is known for its wide application. It is used literally everywhere, be it desktops, mobile platforms, smart cars, and houses, etc. At the moment, the so-called “Java ecosystem” contains about 8 million Java coders all over the world. Because of an extensive pool of experienced specialists, many companies choose to use this language for their projects. This is especially true for large organizations that have demand for building enterprise-level server-side apps, and Java developers are just perfect for that role.&lt;/p&gt;

&lt;p&gt;Java remains popular, despite the fact more and more new technologies pop up, and given the stats, this tendency is not going to change any time soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knowing-java-opens-plenty-of-career-doors"&gt;
  &lt;/a&gt;
  Knowing Java Opens Plenty of Career Doors
&lt;/h3&gt;

&lt;p&gt;When it comes to the employment rate, Java confidently beats many other programming languages. As I’ve already mentioned, it is frequently used in big companies launching big projects and requiring a lot of specialists to join. There is also enough work and money that allow big companies to hire Juniors, so the beginners can land a job right after mastering Java fundamentals.&lt;/p&gt;

&lt;p&gt;These and other projects usually require the following skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring (incl. Spring Boot) and Hibernate&lt;/li&gt;
&lt;li&gt;Unit testing&lt;/li&gt;
&lt;li&gt;Android development&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Servlets&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;JSON/Jackson&lt;/li&gt;
&lt;li&gt;Java API for RESTful Web Services&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Design and architecture patterns&lt;/li&gt;
&lt;li&gt;Build automation tools (Maven, Gradle)&lt;/li&gt;
&lt;li&gt;SQL databases, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whereas the most popular areas of Java application are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enterprise-level server-side applications&lt;/li&gt;
&lt;li&gt;Mobile app development&lt;/li&gt;
&lt;li&gt;Reactive programming&lt;/li&gt;
&lt;li&gt;Work with Big Data&lt;/li&gt;
&lt;li&gt;IoT&lt;/li&gt;
&lt;li&gt;Finance&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;Gaming&lt;/li&gt;
&lt;li&gt;Retail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The mentioned wide Java application allows developers to grow in their career and count on upward mobility. The specialists, working on large projects, often learn other languages to be able to do some part of tasks in Java, and the rest — in another language if needed. Java developers are not afraid of being fired as they are allowed to learn a new language while working (after Java, almost all languages are easy and fast to learn). These and other reasons make the coders satisfied with their working conditions so that they don’t often switch to another profession.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#online-courses-are-for-every-taste-and-budget"&gt;
  &lt;/a&gt;
  Online Courses Are For Every Taste and Budget
&lt;/h3&gt;

&lt;p&gt;Now that you’ve started your programming journey, it’s high time to choose the right learning course. Fortunately, the web is full of many resources that offer interactive classes and challenges. Next, you will find a few I can highly recommend.&lt;/p&gt;

&lt;p&gt;So, let’s get to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codegym"&gt;
  &lt;/a&gt;
  CodeGym
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5FZJuETP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y09t5rsec7nmcapdoy1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5FZJuETP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y09t5rsec7nmcapdoy1a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codegym.cc/"&gt;CodeGym&lt;/a&gt; is known for its practice-based approach to learning Java. The course contains over 1200 tasks to complete, ensures instant verification by the virtual mentor, allows building your own version of classic video games in the Game section, and offers to join the community.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codewars"&gt;
  &lt;/a&gt;
  Codewars
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvYUC9zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ud8x61uznprnuvu3tfok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvYUC9zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ud8x61uznprnuvu3tfok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt; is another online learning platform that allows mastering over 20 programming languages, including Java. You will be offered to train with your peers on challenges called kata, as well as create your own kata and challenge your fellow-developers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cyberdojo"&gt;
  &lt;/a&gt;
  Cyber-Dojo
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jaxlhRFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co5uvsunc34ucjfr4jdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jaxlhRFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co5uvsunc34ucjfr4jdg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider &lt;a href="https://cyber-dojo.org/creator/home"&gt;Cyber-Dojo&lt;/a&gt; if you are in search of an effective gamified source to improve your skills in programming. The platform offers multiple tasks to complete, and each comes with a detailed description and examples of how the result should look.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codechef"&gt;
  &lt;/a&gt;
  CodeChef
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVGQmN3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/240pujpldvtdj1tp96n0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVGQmN3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/240pujpldvtdj1tp96n0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other than teaching you a programming language, &lt;a href="https://www.codechef.com/"&gt;CodeChef&lt;/a&gt; makes it possible for you to hone the skills by participating in coding contests. You can also use this platform to learn more about binary search, algorithms, and other technical topics.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-complete-java-masterclass"&gt;
  &lt;/a&gt;
  The Complete Java Masterclass
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-tQ-Lh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uhjzrss32zj6jp2oj1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-tQ-Lh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uhjzrss32zj6jp2oj1l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an ideal &lt;a href="https://www.udemy.com/course/java-programming-course/"&gt;course&lt;/a&gt; for beginners as it allows learning Java from scratch. As soon as you acquire fundamental topics, you can move to more advanced Java concepts, such as multithreading, OOPs, ArrayList, and others.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#java-programming-for-complete-beginners"&gt;
  &lt;/a&gt;
  Java Programming for Complete Beginners
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5z7BJqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n7hw6lmy6v9xb8tzccr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5z7BJqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n7hw6lmy6v9xb8tzccr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://www.udemy.com/course/java-programming-tutorial-for-beginners/"&gt;course&lt;/a&gt; promises that you’ll master Java programming language in a bit more than 250 steps. It also contains over 200 code challenges, quizzes, and examples you should pass to hone your knowledge and skills.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#java-certification-by-duke-university"&gt;
  &lt;/a&gt;
  Java Certification by Duke University
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B82woRgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmwtxd89vd6zkj50llhl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B82woRgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmwtxd89vd6zkj50llhl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider the other &lt;a href="https://www.coursera.org/specializations/java-programming"&gt;course&lt;/a&gt; that covers Java programming and software engineering fundamentals. Other than learning about arrays, lists, and structured data, principles of software design, and solving problems with software, you can also grasp an idea of programming foundations with JavaScript, HTML, and CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-community-is-evergrowing-active-and-friendly"&gt;
  &lt;/a&gt;
  The Community Is Ever-Growing, Active, and Friendly
&lt;/h3&gt;

&lt;p&gt;Other than a myriad of learning courses, tutorials, books, and challenges, Java is also known for its huge and active community. It plays a key role in the life of everyone who sooner or later joins it — the community supports both newbies and professionals, helps to solve problems, allows sharing knowledge, and remains one of the biggest sources of the latest coding news.&lt;/p&gt;

&lt;p&gt;There are hundreds of active Java forums and groups, but I would like to distinguish just a few of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/"&gt;HackerNews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sitepoint.com/community/"&gt;SitePoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt; channels&lt;/li&gt;
&lt;li&gt;r/programming&lt;/li&gt;
&lt;li&gt;r/learnprogramming&lt;/li&gt;
&lt;li&gt;r/codetogether&lt;/li&gt;
&lt;li&gt;r/programmingtools&lt;/li&gt;
&lt;li&gt;r/gamedev&lt;/li&gt;
&lt;li&gt;r/prograrticles&lt;/li&gt;
&lt;li&gt;r/webdev&lt;/li&gt;
&lt;li&gt;r/dailyprogrammer&lt;/li&gt;
&lt;li&gt;r/java&lt;/li&gt;
&lt;li&gt;r/javahelp&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javaprogrammingforums.com/"&gt;Javaforum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Java community encourages active participation and engagement in discussions, as well as promotes assistance and help. This allows newcomers to feel confident and safe — they will not be left without support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-are-numerous-publicly-available-libraries-at-hand"&gt;
  &lt;/a&gt;
  There Are Numerous Publicly Available Libraries at Hand
&lt;/h3&gt;

&lt;p&gt;Another reason to go ahead with Java is its extensive libraries used by developers from the whole world. Moreover, many non-profit organizations and large companies, such as Google and Apache, continue releasing libraries available in open access. They significantly influence the process of Java development, making it faster, easier, and more efficient.&lt;/p&gt;

&lt;p&gt;Because most libraries are publicly available, newcomers are often recommended to google the needed functionality before even starting to write code. The chances are the functionality already exists across the open-source library and has been previously tested by professional devs.&lt;/p&gt;

&lt;p&gt;If you are casting around for Java libraries to start with, consider several of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/javase/8/docs/api/index.html"&gt;Java standard libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jhipster.tech/"&gt;JHipster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://commons.apache.org/"&gt;Apache Commons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/guava"&gt;Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/gson"&gt;google-gson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hibernate.org/orm/"&gt;Hibernate-ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://junit.org/junit4/"&gt;JUnit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did I manage to answer your question “Why should I learn Java?” Hope a little information about this programming language has convinced you that it is a good option to start with. So, go ahead with Java and make the next year your game changer.&lt;/p&gt;

&lt;p&gt;First published on &lt;a href="https://medium.com/quick-code/coding-goals-for-2021-the-reasons-to-learn-java-3c614579ae7a"&gt;Quick Code&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>The difference between a Cryptocurrency and a Token</title>
      <author>Owanate Amachree</author>
      <pubDate>Tue, 25 May 2021 13:50:46 +0000</pubDate>
      <link>https://dev.to/owans/the-difference-between-a-cryptocurrency-and-a-token-3ee4</link>
      <guid>https://dev.to/owans/the-difference-between-a-cryptocurrency-and-a-token-3ee4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vYNRgP5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm29d7wpl6v4ridoyj4i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vYNRgP5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm29d7wpl6v4ridoyj4i.png" alt="Crypto vs Token Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-digital-asset"&gt;
  &lt;/a&gt;
  What is a Digital Asset?
&lt;/h2&gt;

&lt;p&gt;In broad terms, a digital asset is a non-tangible asset that is created, traded, and stored in a digital format. Using this definition In the context of blockchains, digital assets include cryptocurrency and crypto tokens.&lt;/p&gt;

&lt;p&gt;The blockchain terms; token and cryptocurrency are often used interchangeably, as these are both digital assets on blockchains. The biggest difference between a cryptocurrency and a token is that cryptocurrencies are the native asset of a&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5MywgOKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nenv3kpdgz12znjdich.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5MywgOKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nenv3kpdgz12znjdich.png" alt="Crypto vs Token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;blockchain like BTC, RBTC, or ETH, whereas tokens are built on an existing blockchain, using smart contracts. Most commonly, these are EIP-20 tokens.&lt;/p&gt;

&lt;p&gt;The following chart summarises the similarities between the two:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alJEeX2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td9ysdl9w6pvajn1373z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alJEeX2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td9ysdl9w6pvajn1373z.png" alt="Crypto vs Tokens2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see, these are largely the same from the perspective of the end user. However, there are large technical differences between the two. Let’s dive a little bit deeper into the technical differences:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blockchain-blocks-transactions-and-signatures"&gt;
  &lt;/a&gt;
  Blockchain, Blocks, Transactions, and Signatures
&lt;/h2&gt;

&lt;p&gt;Here’s a whirlwind introduction to blockchain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;End users use public key cryptography to digitally sign information&lt;/li&gt;
&lt;li&gt;This signed information is a transaction&lt;/li&gt;
&lt;li&gt;The transaction is broadcast to a peer-to-peer network of computers running the blockchain node software&lt;/li&gt;
&lt;li&gt;All the nodes have to reach a consensus on whether or not the transaction is valid&lt;/li&gt;
&lt;li&gt;If the transaction is valid, it gets added to a block, which is a set of transactions&lt;/li&gt;
&lt;li&gt;Many computers on the network build these blocks of transactions, but only one block gets added at a time&lt;/li&gt;
&lt;li&gt;These blocks form a single chain, called a blockchain&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that many details have been left out of the above description, for the sake of brevity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Public key cryptography&lt;/strong&gt; is used in blockchain networks, mainly for digitally signing information, and then subsequently verifying those signatures. This was the process of transaction creation and transaction verification. The user possesses both a private key and a public key, and needs to keep the private key a secret, while allowing the public key to be broadcast widely.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transfer-transactions-vs-smart-contract-interaction-transactions"&gt;
  &lt;/a&gt;
  Transfer Transactions vs Smart Contract Interaction Transactions
&lt;/h2&gt;

&lt;p&gt;In Bitcoin, and in many other blockchains, the information being signed was about one account transferring units from itself to another account. These units are encoded into the software protocols of the blockchain software itself, and are known as cryptocurrency. In this system there is only one type of transaction.&lt;/p&gt;

&lt;p&gt;In Ethereum, RSK, and many other blockchains that support smart contracts, the information being signed was about one account transferring units of cryptocurrency from itself to another account too. However, they added a new concept where you could have “smart contracts” which are autonomously executing code and data stored on the blockchain. These smart contracts may be thought of as a special type of account. Now an account could sign information that does &lt;strong&gt;not&lt;/strong&gt; transfer any units of cryptocurrency, but instead contains instructions for a smart contract to execute some code or store some data. In this system, there are two types of transaction. Read more about Smart contracts in &lt;a href="https://developers.rsk.co/guides/full-stack-dapp-on-rsk/part1-overview/"&gt;How to Build a Full Stack dApp on RSK&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tokens"&gt;
  &lt;/a&gt;
  Tokens
&lt;/h2&gt;

&lt;p&gt;Tokens behave very similarly to cryptocurrencies, in the sense that they are a type of currency that exist on a blockchain, and can be transferred from one account to another. However, unlike cryptocurrencies, their behaviour is not built into the blockchain software itself. Instead their behaviour comes about by implementations in smart contracts. These smart contracts tally the units of the token transferred between accounts.&lt;/p&gt;

&lt;p&gt;To transfer units of these tokens, an account signs a transaction telling the smart contract to debit a number of units of the token from its tally, and credit the same number of units of the token to the other account’s tally. Most tokens conform to the EIP-20 token standard, and in fact the majority of all smart contracts on blockchain networks tend to be of this type; making it easy for users, wallets, exchanges, etc to interact with them.&lt;/p&gt;

&lt;p&gt;When interacting with blockchain networks, it is important to be aware of this distinction. On Ethereum, Ether is the cryptocurrency, and other “currencies” are tokens. Likewise, on RSK, RBTC is the cryptocurrency, and other “currencies” are tokens. Some practical reasons to take note of this are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fees (or gas) for transactions are cheaper when transferring the cryptocurrency, and more expensive when transferring tokens.&lt;/li&gt;
&lt;li&gt;Fees (or gas) is always paid for in the cryptocurrency, and therefore when transferring tokens, you will still need some cryptocurrency in the same account.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: When talking about tokens, you will see the terms ERC-20 as well as EIP-20. These are both &lt;strong&gt;the same&lt;/strong&gt;. At the outset, the process for defining standards for Ethereum, and Ethereum-compatible networks, was called “Ethereum Request for Comment”. This process has since been refined and renamed to “Ethereum Improvement Proposal”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visit the &lt;a href="https://developers.rsk.co/"&gt;RSK Developer's Portal&lt;/a&gt; for more info or join the &lt;a href="https://developers.rsk.co/slack/"&gt;Slack Community&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>rsk</category>
      <category>blockchain</category>
      <category>token</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>Linux Command Line for Beginners</title>
      <author>Harvey</author>
      <pubDate>Tue, 25 May 2021 13:50:25 +0000</pubDate>
      <link>https://dev.to/harvey/linux-command-line-for-beginners-16n8</link>
      <guid>https://dev.to/harvey/linux-command-line-for-beginners-16n8</guid>
      <description>&lt;p&gt;The &lt;a href="https://www.linux.com/what-is-linux/"&gt;Linux&lt;/a&gt; command line is for power users. It is not for the faint of heart or for people who are afraid to take a risk. &lt;/p&gt;

&lt;p&gt;If you are new to Linux and are afraid to take the plunge into using the command line interface, then &lt;a href="//practicelinux.com/"&gt;this tutorial&lt;/a&gt; is a good start. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-linux-and-cli-computer"&gt;
  &lt;/a&gt;
  What is Linux and CLI? 💻
&lt;/h2&gt;

&lt;p&gt;Linux is an open source operating system that is used on everything from smart phones to main frame computers. &lt;/p&gt;

&lt;p&gt;Linux provides a command line interface (CLI) that provides a quick and powerful way to control and manipulate your computer. Once mastered, the Linux CLI can save you time and provide a powerful tool to aid in your daily tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h2&gt;

&lt;p&gt;The command line can be intimidating but learning the basics will give you access to a world of scripts and automation tools that will make your life a lot easier and more productive.&lt;/p&gt;

&lt;p&gt;The Basics: You will be using the command line to type various commands and tasks. Commands are what Linux runs. In Linux, the Command Line can be used for various things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_tBU1EWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjwh38xzh6neufqr0hev.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_tBU1EWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjwh38xzh6neufqr0hev.gif" alt="cat enters pc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start, open up a terminal. Now, let's try using some basic Linux commands! &lt;/p&gt;

&lt;p&gt;Most of these commands are applicable for all Linux distributions. Linux is case sensitive (capitalization matters).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls&lt;/code&gt;    List directory&lt;br&gt;
&lt;code&gt;cd DIR&lt;/code&gt; Change the current directory to the DIR directory&lt;br&gt;
&lt;code&gt;cd ~&lt;/code&gt;  Change to home directory&lt;br&gt;
&lt;code&gt;cd /&lt;/code&gt;      Change the current directory to the root directory&lt;br&gt;
&lt;code&gt;cd ..&lt;/code&gt;     Go one directory lower&lt;br&gt;
&lt;code&gt;pwd&lt;/code&gt;   Show name of current working directory &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Commands&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir -p DIR&lt;/code&gt; Create directory DIR &lt;br&gt;
&lt;code&gt;rm FILE&lt;/code&gt; Remove FILE&lt;br&gt;
&lt;code&gt;rm -r DIR&lt;/code&gt; Remove DIR and its contents recursively&lt;br&gt;
&lt;code&gt;rm -f FILE&lt;/code&gt; Force remove FILE &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Info&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;date&lt;/code&gt;  Print or set the system date and time&lt;br&gt;
&lt;code&gt;cal&lt;/code&gt;   Displays a calendar&lt;br&gt;
&lt;code&gt;uptime&lt;/code&gt; Tell how long the system has been running&lt;br&gt;
&lt;code&gt;w&lt;/code&gt;     Show who is logged on and what they are doing&lt;br&gt;
&lt;code&gt;whoami&lt;/code&gt;  Print effective userid &lt;/p&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
