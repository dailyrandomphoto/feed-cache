<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>😎 How to convert a normal React form to use react-hook-form?</title>
      <author>Max Programming</author>
      <pubDate>Mon, 08 Nov 2021 09:11:34 +0000</pubDate>
      <link>https://dev.to/maxprogramming/how-to-convert-a-normal-react-form-to-use-react-hook-form-26g9</link>
      <guid>https://dev.to/maxprogramming/how-to-convert-a-normal-react-form-to-use-react-hook-form-26g9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey-everyone"&gt;
  &lt;/a&gt;
  Hey everyone!
&lt;/h2&gt;

&lt;p&gt;Nice to see you all around again! Today you'll find out how easy it is to use the  &lt;a href="https://react-hook-form.com/"&gt;&lt;code&gt;react-hook-form&lt;/code&gt;&lt;/a&gt;  library for forms instead of the normal method of forms in React.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--35IHSzCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636358413364/vCNnmkq-M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--35IHSzCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636358413364/vCNnmkq-M.png" alt="image.png" width="804" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, the first thing is first, normally, in React we use state, and whenever the value of an input changes, we change the state. This method's good but there is a lot of code. Here's how the code looks like in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// Submit logic&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I personally feel that this is indeed a lot of code that could be made better. That's why you should use &lt;code&gt;react-hook-form&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So to convert this normal one to use &lt;code&gt;react-hook-form&lt;/code&gt;, we install it via NPM or Yarn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i react-hook-form
&lt;span class="c"&gt;# yarn add react-hook-form&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, the first thing we have to do is get rid of the &lt;strong&gt;state we created&lt;/strong&gt;, the &lt;code&gt;onSubmit&lt;/code&gt; function and the &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onChange&lt;/code&gt; props too. &lt;/p&gt;

&lt;p&gt;After we remove that bit of code, we import &lt;code&gt;useForm&lt;/code&gt; from &lt;code&gt;react-hook-form&lt;/code&gt;, and this is how we use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we use the &lt;code&gt;register&lt;/code&gt; function as a prop in the inputs to register each input with a name to get the value of it, like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, for the form submission, we use the &lt;code&gt;handleSubmit&lt;/code&gt; provided by the &lt;code&gt;useForm&lt;/code&gt; hook with our own submit function which provides us the values of the inputs directly. We can also destructure the values from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// OR DESTRUCTURING ({ email, password })&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Submit logic&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* handleSubmit is invoked and onSubmit is passed into it */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, it automatically prevents the page from refreshing on submit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-it-with-typescript"&gt;
  &lt;/a&gt;
  💪 Using it with TypeScript
&lt;/h2&gt;

&lt;p&gt;Using RHF with TypeScript is super easy because firstly, you don't need to install separate type definitions as they come along with RHF.&lt;/p&gt;

&lt;p&gt;You've to define an &lt;code&gt;interface&lt;/code&gt; for the fields you're using, and then pass it in &lt;code&gt;useForm&lt;/code&gt; as generic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LoginFields&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// In component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoginFields&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And while calling the submit function, you've to set the type of the &lt;code&gt;onSubmit&lt;/code&gt; function to the type &lt;code&gt;SubmitHandler&lt;/code&gt; provided directly by RHF.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SubmitHandler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// In component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SubmitHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoginFields&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Submit logic&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way you also get good IntelliSense in your IDE or code editor&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MAvH4vAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636359131717/olZ_U7uCy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MAvH4vAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636359131717/olZ_U7uCy.gif" alt="intellisense.gif" width="757" height="203"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can read a lot more functionalities provided by &lt;code&gt;react-hook-form&lt;/code&gt; on  &lt;a href="https://react-hook-form.com/"&gt;their website&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I hope you liked it! Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me on my &lt;a href="https://youtube.com/MaxProgramming"&gt;YouTube channel&lt;/a&gt; and my  &lt;a href="https://twitter.com/maxprogramming1"&gt;Twitter&lt;/a&gt; 😉&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Until next time, keeping awesome ✌️&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React doesn't need state management tool, I said</title>
      <author>stepan662</author>
      <pubDate>Mon, 08 Nov 2021 08:50:53 +0000</pubDate>
      <link>https://dev.to/stepan662/react-doesnt-need-state-management-tool-i-said-31l4</link>
      <guid>https://dev.to/stepan662/react-doesnt-need-state-management-tool-i-said-31l4</guid>
      <description>&lt;p&gt;From time to time someone still tells me that is using REDUX or similar tool in their project. I usually respond, that I wouldn't use it as now with hooks and context API you don't need it.&lt;/p&gt;

&lt;p&gt;But context API usually brings performance problems and is also a bit awkward to use it properly, so today I'll try to show how to avoid common problems, and also build your own (micro) state management tool, without any compromises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naive-solution"&gt;
  &lt;/a&gt;
  Naive solution
&lt;/h2&gt;

&lt;p&gt;Basic idea is to manage state in one component and pass the whole it by context so it's accessible from all child components, so we can avoid props drilling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StateContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-dispatch"&gt;
  &lt;/a&gt;
  Using dispatch
&lt;/h2&gt;

&lt;p&gt;However you also need some way how to modify the state from children, you could pass individual functions to the context, but I personally don't like that as the state will get complex very fast. I like idea of dispatching events (similarly as in REDUX), so we basically pass one function which you can use to dispatch all different actions that you need. We could pass it through the same context as the state, but I don't like mixing it with the state, so I pass it through a separate context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StateContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DispatchContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CHANGE_STATE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also like creating hook for getting the dispatch function to make it more explicit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically we are separating data from actions - provider component provides data to children. Children can dispatch actions to modify the data, but it's controlled by provider component, so it has control over it. Dispatched actions can be understood similarly as e.g. dom events, except we know who will receive it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WlUxC5_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf16jsa2e8f6w9v5l2v2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WlUxC5_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf16jsa2e8f6w9v5l2v2.png" alt="Image description" width="440" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's look at the performance side as if we want to use this as a replacement of REDUX, it needs to be able to handle big states with a lot of components subscribed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-unnecessary-children-recreation"&gt;
  &lt;/a&gt;
  Avoiding unnecessary children re-creation
&lt;/h2&gt;

&lt;p&gt;In this configuration we are really inefficient, as all the children will get re-rendered every time we change something in the state. This happens because every time we update state in Provider component, all it's children will get re-created. We could use React.memo on children to avoid this, however nicer solution is to pass children from component above, so when the Provider is updated, children will stay the same. And we only update actual context consumers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In parent we do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the provider component is managing the context, but is not managing children (only passing them). It took me a while to understand this subtle difference as it is quite small change in the code, with big consequences.&lt;/p&gt;

&lt;p&gt;The trick is to understand, that when we put &lt;code&gt;&amp;lt;ChildComponent &amp;gt;&lt;/code&gt;, we are basically creating new React.Node every time, so all the children are re-rendered, unless we wrap them in &lt;code&gt;React.memo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So with this change, we update only components which are using the context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-dispatch-causing-rerenders"&gt;
  &lt;/a&gt;
  Avoiding dispatch causing re-renders
&lt;/h2&gt;

&lt;p&gt;Currently dispatch function is re-created every time the state is changed, which mean that all components using it will get re-rended, even though they are not using StateContext. Usually if we want to have stable function react documentation advices to use &lt;code&gt;useCallback&lt;/code&gt;, but in this case it will help us only partially, because, that will basically cause "caching" of dispatch function and we wouldn't be able to use outer scope variables without including them into &lt;code&gt;dependencies&lt;/code&gt; - and then the dispatch function would still get recreated when dependencies change. We will need to use &lt;code&gt;ref&lt;/code&gt; to help us with this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatchRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// new function with every render&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatchRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CHANGE_STATE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// we can use outer scope without restrictions&lt;/span&gt;
        &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// stable dispatch function&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActionType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatchRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dispatchRef&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way stable dispatch function is passed to the &lt;code&gt;DispatchContext&lt;/code&gt; and we can use outer scope without limitations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subscribable-context"&gt;
  &lt;/a&gt;
  Subscribable context
&lt;/h2&gt;

&lt;p&gt;Last optimization we'll need is ability of the component subscribe only to part of the state. Now components can only use whole state and even when they need just small piece (e.g. one boolean value), they'll get notified every we change the state. This is not the best practice as we would still get unnecessary re-renders. The way to solve this is through &lt;a href="https://github.com/dai-shi/use-context-selector"&gt;use-context-selector&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library is quite simple and it allows to use selector function, to "pick" what we want from the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use-context-selector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StateContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContextSelector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use-context-selector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Subscriber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;somePart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContextSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;somePart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Oh, wait that is cheating! You said you will only use Context API!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This library is quite simple wrapper of React.Context api. It uses &lt;code&gt;ref&lt;/code&gt; to wrap passed value, so that components are not re-rendering automatically and then it keeps list of subscribers. When value changes it runs all the subscribed functions and if the value from the selector is different than before it forces the subscribed Component to re-render. Similar concept is used e.g. in redux &lt;a href="https://react-redux.js.org/api/hooks#useselector"&gt;useSelector&lt;/a&gt; hook. So I say, it's quite standard solution and why build a new one, when it already exists?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: there is even a &lt;a href="https://github.com/reactjs/rfcs/pull/119"&gt;open RFC&lt;/a&gt; to add something like this directly into react&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#final-product"&gt;
  &lt;/a&gt;
  Final product
&lt;/h2&gt;

&lt;p&gt;We can wrap this whole functionality to be reusable (+ add typescript types)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContextSelector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use-context-selector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DispatchType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ActionType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DispatchReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActionType&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;DispatchReturn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SelectorType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StateType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StateType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="na"&gt;StateType&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ActionType&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;DispatchReturn&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ProviderProps&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(
  body: (
    props: ProviderProps
  ) =&amp;gt; [state: StateType, dispatch: DispatchType&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ActionType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; DispatchReturn&amp;gt;]
) =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StateContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StateType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DispatchContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;DispatchType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ActionType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DispatchReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ProviderProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatchRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_dispatch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;dispatchRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_dispatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// stable dispatch function&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActionType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatchRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dispatchRef&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DispatchContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStateContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SelectorType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StateType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;useContextSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StateContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStateContext&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usage example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ActionType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CHANGE_STATE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;TranslationsContextProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useTranslationsDispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useTranslationsSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="cm"&gt;/* provider props */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActionType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CHANGE_STATE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;state2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;isLoading&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// don't forget to return state and dispatch function&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets summarize advantages of this solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple usage, nothing new to learn no boilerplate as with REDUX etc.&lt;/li&gt;
&lt;li&gt;More efficient than Context api used naively&lt;/li&gt;
&lt;li&gt;It scales as you have the whole power of hooks&lt;/li&gt;
&lt;li&gt;You can use many instances and scope them only to the part of app that need them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Tolgee.io, we use this on our most complicated view, where we handle translations table and we didn't have any problems with it yet.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: Check &lt;a href="https://tolgee.io/"&gt;Tolgee.io&lt;/a&gt; and give us &lt;a href="https://github.com/tolgee/server"&gt;github stars&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What I've learned from the first free product I've created</title>
      <author>Aptex - we create software</author>
      <pubDate>Mon, 08 Nov 2021 08:30:39 +0000</pubDate>
      <link>https://dev.to/aptex/what-ive-learned-from-the-first-free-product-ive-created-2cka</link>
      <guid>https://dev.to/aptex/what-ive-learned-from-the-first-free-product-ive-created-2cka</guid>
      <description>&lt;p&gt;Since the beginning of the year I've spent an excessive amount of time on tech twitter, slowly and steadily building an audience.&lt;/p&gt;

&lt;p&gt;As a means to give back to the community and in order to build myself a portfolio of free products (which I also plan on expanding to paid products later on) I recently created a &lt;a href="https://aptex.gumroad.com/l/portfolio-template-01"&gt;free portfolio template&lt;/a&gt;, mainly targeted to (beginner) developers.&lt;/p&gt;

&lt;p&gt;From the beginning I knew, I wanted to create a portfolio template as my first product, because I come across of novice developers who are trying to build their portfolio. Often times (frontend) developers can be exceptional problem solvers and write decent code even as juniors, but struggle a lot with (UI) design.&lt;/p&gt;

&lt;p&gt;Since this is something that I consider myself pretty well-versed in, I decided to offer this template to help them showcase their work in a way, that's not only pleasant to look at, but is also accessible at least to some degree.&lt;/p&gt;

&lt;p&gt;I'm in no way an accessibility expert, but I try to apply the knowledge I have to all products I design.The least I can do is aiming for WCAG AA color contrast standards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-audience-first"&gt;
  &lt;/a&gt;
  Ask audience first
&lt;/h2&gt;

&lt;p&gt;So the first thing I did, was to ask people on twitter, what kind of content they'd expect to find in a developer's portfolio.&lt;/p&gt;

&lt;p&gt;The takeaway was, that I portfolio should include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who you are&lt;/li&gt;
&lt;li&gt;What you do&lt;/li&gt;
&lt;li&gt;Examples of your work&lt;/li&gt;
&lt;li&gt;How to get in contact&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also it should be simple to navigate and easily accessible from any device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-first-desgin"&gt;
  &lt;/a&gt;
  The first desgin
&lt;/h2&gt;

&lt;p&gt;Based on the results of my tiny survey, I then started to create a mockup of the template in Figma. I've been using Figma for a while now, both for my personal projects, as well as at my day job and got quite comfortable with it's features.&lt;/p&gt;

&lt;p&gt;Coming from Adobe XD it was super easy to transition to Figma, as both tools are pretty similar. One thing that makes me love Figma is the fact, that it can be fully used in the browser.&lt;/p&gt;

&lt;p&gt;To get some insipiration for the colors, I used &lt;a href="https://colorpalettes.colorion.co/"&gt;Actionable Color Palettes&lt;/a&gt;, decided for a color palette and tweaked the colors a tiny bit to meet the afforementioned a11y standards. For the contrast checking I usually resort to &lt;a href="https://colorable.jxnblk.com/"&gt;colorable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After sketching out the first draft, I decided, that it would be cool, to give people the opportunity to easily customize the accent color used in the template and thus decided to look for some more colors, that fit the overall look and feel of the design.&lt;/p&gt;

&lt;p&gt;As soon as I had something to show, I went back to twitter to showcase my work once more and get some feedback. The overall sentiment seemed to be very positive with minor suggestions in terms of content and increased whitespace in some places.&lt;/p&gt;

&lt;p&gt;I applied the feedback and finished the mockup. Again, I then tweeted the final result, announcing that I would be launching it as a free HTML/CSS/JS template soon after. The reactions were super positive and a lot of people showed interest in the product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-coding"&gt;
  &lt;/a&gt;
  Finally coding
&lt;/h2&gt;

&lt;p&gt;So the next day I sat down and started implementing the portfolio in code. I coded everything from scratch in about 8 hours. The best thing? No dependencies! There's just an HTML, a CSS and a JS file and a few SVG graphics. I wanted something slim and easy to set up and customize. No heavy boilerplating, nothing. If you wanted, you could just open the HTML file in a text editor on your phone, replace the texts and you're ready to deploy.&lt;/p&gt;

&lt;p&gt;I launched it like 15 minutes after writing the last line of code on a saturday evening. Which in retrospect might not have been the best decission. But, I just wanted to get something out there finally! For the next launch I will definitely pick a better time (there are actually less users active on the weekend) and maybe review the code once or twice and let some people take a look at it beforehand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happened-next"&gt;
  &lt;/a&gt;
  What happened next
&lt;/h2&gt;

&lt;p&gt;In 24 hours I gathered 103 views and 19 downloads on gumroad.&lt;br&gt;
Compared to the amount of people that priorly reached out to me and showed interest, it's not that much, but still I'm pretty satisfied with the results. Now almost a week later the product has 142 views and 28 downloads. Also one of them even decided to pay actual money for the FREE template, which is just mind blowing!&lt;/p&gt;

&lt;p&gt;In order to reach all those views and conversions I did several things. First, I DM'ed all of the people on twitter, who previously showed interest in the product. On top of that I reached out to some of my friends on twitter, asking if they would help spreading the word about the free template.&lt;/p&gt;

&lt;p&gt;So as you can see, I haven't done a lot of marketing for the product yet. The next steps will include writing better marketing copy, create marketing images and promote the template not only on twitter, but also on other platforms, such as facebook (especially developer groups on there) and reddit. Of cours, even this blog post is a way of marketing the template!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;After I'm done with all of the marketing experiments, I will then work on transforming the template into a version to use with next.js (maybe also gatsby!) and on top of that I will create a full-fletched WordPress Theme from it. These will probably be paid products, but very low-price ( &amp;lt; $5.00 ). Also, of course there will be more template from me in the future! I plan on creating a template for SaaS-Products next. Also I plan on building an enitre UI library with a lot of page templates, layouts and examples. So stay tuned for that!&lt;/p&gt;

&lt;p&gt;Cheers&lt;br&gt;
Nathan&lt;/p&gt;

&lt;p&gt;You can find the free portfolio template for developers at &lt;a href="https://aptex.gumroad.com"&gt;aptex.gumroad.com&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>portfolio</category>
      <category>html</category>
    </item>
    <item>
      <title>Deploying an Elixir Release to Gigalixir</title>
      <author>Miguel Cobá</author>
      <pubDate>Mon, 08 Nov 2021 08:19:17 +0000</pubDate>
      <link>https://dev.to/miguelcoba/deploying-an-elixir-release-to-gigalixir-2d80</link>
      <guid>https://dev.to/miguelcoba/deploying-an-elixir-release-to-gigalixir-2d80</guid>
      <description>&lt;p&gt;I'll show you how to deploy a Phoenix 1.6 application, with Elixir 1.12 Release to &lt;a href="https://gigalixir.com"&gt;https://gigalixir.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I'll use the  &lt;a href="https://blog.miguelcoba.com/preparing-a-phoenix-16-app-for-deployment-with-elixir-releases"&gt;Elixir Release&lt;/a&gt; we did before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-app-for-gigalixir"&gt;
  &lt;/a&gt;
  Configure the app for Gigalixir
&lt;/h2&gt;

&lt;p&gt;Edit the &lt;code&gt;runtime.exs&lt;/code&gt; file and add the &lt;code&gt;url:&lt;/code&gt; line to the &lt;code&gt;Endpoint&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="ss"&gt;:saturn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SaturnWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;url:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;host:&lt;/span&gt; &lt;span class="no"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"APP_NAME"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;".gigalixirapp.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;port:&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;http:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="c1"&gt;# Enable IPv6 and bind on all interfaces.&lt;/span&gt;
      &lt;span class="c1"&gt;# Set it to  {0, 0, 0, 0, 0, 0, 0, 1} for local network only access.&lt;/span&gt;
      &lt;span class="c1"&gt;# See the documentation on https://hexdocs.pm/plug_cowboy/Plug.Cowboy.html&lt;/span&gt;
      &lt;span class="c1"&gt;# for details about using IPv6 vs IPv4 and loopback vs public addresses.&lt;/span&gt;
      &lt;span class="ss"&gt;ip:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="ss"&gt;port:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PORT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"4000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;secret_key_base:&lt;/span&gt; &lt;span class="n"&gt;secret_key_base&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the config for the buildpacks that Gigalixir uses to compile and deploy the application. &lt;/p&gt;

&lt;p&gt;Create a file named &lt;code&gt;elixir_buildpack.config&lt;/code&gt; on the root of the project and put this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;erlang_version=24.1.2
elixir_version=1.12.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;phoenix_static_buildpack.config&lt;/code&gt; file in the root and put this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_version=14.15.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a file in &lt;code&gt;assets/package.json&lt;/code&gt; and put this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd .. &amp;amp;&amp;amp; mix assets.deploy &amp;amp;&amp;amp; rm -f _build/esbuild"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one is to use npm to use mix to use esbuild to compile our assets and after deploying them, delete the intermediate files!&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;.buildpacks&lt;/code&gt; file and put this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/HashNuke/heroku-buildpack-elixir
https://github.com/gjaldon/heroku-buildpack-phoenix-static
https://github.com/gigalixir/gigalixir-buildpack-releases.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, enough changes. I am creating a branch named gigalixir-deployment and committing all these changes to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; gigalixir-deployment
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Deploying to Gigalixir"&lt;/span&gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin gigalixir-deployment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gigalixir-setup"&gt;
  &lt;/a&gt;
  Gigalixir setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-the-gigalixir-cli"&gt;
  &lt;/a&gt;
  Install the gigalixir CLI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew tap gigalixir/brew
brew &lt;span class="nb"&gt;install &lt;/span&gt;gigalixir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an account in Gigalixir and login&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir signup
gigalixir login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-gigalixir-application"&gt;
  &lt;/a&gt;
  Create a Gigalixir application:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;APP_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;gigalixir create&lt;span class="si"&gt;)&lt;/span&gt;

Created app: harsh-some-cats.
Set git remote: gigalixir.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify your app is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gigalixir apps

[
  {
    "cloud": "gcp",
    "region": "v2018-us-central1",
    "replicas": 0,
    "size": 0.3,
    "stack": "gigalixir-20",
    "unique_name": "harsh-some-cats",
    "version": 2
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command also creates a new remote in your git repo, pointing to gigalixir. Check it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -v

gigalixir   https://git.gigalixir.com/harsh-some-cats.git/ (fetch)
gigalixir   https://git.gigalixir.com/harsh-some-cats.git/ (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#provision-a-database"&gt;
  &lt;/a&gt;
  Provision a database
&lt;/h3&gt;

&lt;p&gt;Let's create a database for our app. This is the free plan so is not suitable for production but it will be good for testing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir pg:create &lt;span class="nt"&gt;--free&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check if the database is running with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir pg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's see the environment variables that Gigalixir created for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"DATABASE_URL"&lt;/span&gt;: &lt;span class="s2"&gt;"ecto://&amp;lt;some user&amp;gt;:&amp;lt;some password&amp;gt;@postgres-free-tier-v2020.gigalixir.com:5432/&amp;lt;some database name&amp;gt;"&lt;/span&gt;,
  &lt;span class="s2"&gt;"POOL_SIZE"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see &lt;code&gt;DATABASE_URL&lt;/code&gt; and &lt;code&gt;POOL_SIZE&lt;/code&gt; are automatically created. Our app also needs the &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt;, &lt;code&gt;PORT&lt;/code&gt; and &lt;code&gt;APP_NAME&lt;/code&gt; but those will be automatically provided when the app starts, we don't need to worry about them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-the-application"&gt;
  &lt;/a&gt;
  Deploy the application
&lt;/h3&gt;

&lt;p&gt;To deploy to Gigalixir, we must push our master branch to the &lt;code&gt;gigalixir&lt;/code&gt; remote. Gigalixir only builds the &lt;code&gt;master&lt;/code&gt; branch and ignore others. We use &lt;code&gt;gigalixir-deployment&lt;/code&gt; as our main branch, so we need to push our branch changes to the master branch on the gigalixir remote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push gigalixir gigalixir-deployment:master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the building of the release on the gigalixir build servers.&lt;/p&gt;

&lt;p&gt;You can see the status with &lt;code&gt;gigalixir ps&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"cloud"&lt;/span&gt;: &lt;span class="s2"&gt;"gcp"&lt;/span&gt;,
  &lt;span class="s2"&gt;"pods"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"lastState"&lt;/span&gt;: &lt;span class="o"&gt;{}&lt;/span&gt;,
      &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"harsh-some-cats-77d577b7cd-2s9c2"&lt;/span&gt;,
      &lt;span class="s2"&gt;"sha"&lt;/span&gt;: &lt;span class="s2"&gt;"5dd02b3af6fc7958615b9ee2cbcd6af934845506"&lt;/span&gt;,
      &lt;span class="s2"&gt;"status"&lt;/span&gt;: &lt;span class="s2"&gt;"Healthy"&lt;/span&gt;,
      &lt;span class="s2"&gt;"version"&lt;/span&gt;: &lt;span class="s2"&gt;"4"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;"region"&lt;/span&gt;: &lt;span class="s2"&gt;"v2018-us-central1"&lt;/span&gt;,
  &lt;span class="s2"&gt;"replicas_desired"&lt;/span&gt;: 1,
  &lt;span class="s2"&gt;"replicas_running"&lt;/span&gt;: 1,
  &lt;span class="s2"&gt;"size"&lt;/span&gt;: 0.3,
  &lt;span class="s2"&gt;"stack"&lt;/span&gt;: &lt;span class="s2"&gt;"gigalixir-20"&lt;/span&gt;,
  &lt;span class="s2"&gt;"unique_name"&lt;/span&gt;: &lt;span class="s2"&gt;"harsh-some-cats"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the build is finished, the app is deployed and started and you'll see log lines like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;remote: Creating release.
remote: Starting zero-downtime rolling deploy.
remote: Please &lt;span class="nb"&gt;wait &lt;/span&gt;a minute &lt;span class="k"&gt;for &lt;/span&gt;the new instance&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; to roll out and pass health checks.
remote: For troubleshooting, See:      http://gigalixir.readthedocs.io/en/latest/main.html#troubleshooting
remote: For &lt;span class="nb"&gt;help&lt;/span&gt;, contact:             &lt;span class="nb"&gt;help&lt;/span&gt;@gigalixir.com
remote: Try hitting your app with:     curl https://harsh-some-cats.gigalixirapp.com/
remote: Check your app logs with:      gigalixir logs &lt;span class="nt"&gt;-a&lt;/span&gt; harsh-some-cats
remote: Check deploy status with:      gigalixir ps &lt;span class="nt"&gt;-a&lt;/span&gt; harsh-some-cats
remote: Updated property &lt;span class="o"&gt;[&lt;/span&gt;core/account].
To https://git.gigalixir.com/harsh-some-cats.git/
 &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;new branch]      gigalixir-deployment -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can open your app in your browser by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you'll see the familiar home screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tuqJ4Cux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dj2x0aluvcla23mjjv4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tuqJ4Cux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dj2x0aluvcla23mjjv4.png" alt="Elixir release running on Gigalixir" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opening-a-remote-console-and-running-migrations"&gt;
  &lt;/a&gt;
  Opening a remote console and running migrations
&lt;/h2&gt;

&lt;p&gt;First we need to add our ssh public key so that we can connect securely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir account:ssh_keys:add &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#opening-a-remote-console"&gt;
  &lt;/a&gt;
  Opening a remote console
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir ps:remote_console

Erlang/OTP 24 &lt;span class="o"&gt;[&lt;/span&gt;erts-12.1.2] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;64-bit] &lt;span class="o"&gt;[&lt;/span&gt;smp:8:1] &lt;span class="o"&gt;[&lt;/span&gt;ds:8:1:10] &lt;span class="o"&gt;[&lt;/span&gt;async-threads:1] &lt;span class="o"&gt;[&lt;/span&gt;jit]

Interactive Elixir &lt;span class="o"&gt;(&lt;/span&gt;1.12.3&lt;span class="o"&gt;)&lt;/span&gt; - press Ctrl+C to &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type &lt;/span&gt;h&lt;span class="o"&gt;()&lt;/span&gt; ENTER &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
iex&lt;span class="o"&gt;(&lt;/span&gt;harsh-some-cats@10.56.18.206&lt;span class="o"&gt;)&lt;/span&gt;1&amp;gt; &lt;span class="nb"&gt;ls&lt;/span&gt;
.bashrc           .profile          .profile.d        bin               erts-12.1.2
lib               releases          saturn.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-migrations"&gt;
  &lt;/a&gt;
  Running migrations
&lt;/h3&gt;

&lt;p&gt;First, let's watch the logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir logs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in another terminal, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gigalixir ps:migrate

Connection to v2018-us-central1.gcp.ssh.gigalixir.com closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2021-11-02T22:45:07.937626+00:00 harsh-some-cats[b&lt;span class="s1"&gt;'harsh-some-cats-77d577b7cd-2s9c2'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: web.1  | 22:45:07.937 &lt;span class="o"&gt;[&lt;/span&gt;info] Running SaturnWeb.Endpoint with cowboy 2.9.0 at :::4000 &lt;span class="o"&gt;(&lt;/span&gt;http&lt;span class="o"&gt;)&lt;/span&gt;
2021-11-02T22:45:07.938503+00:00 harsh-some-cats[b&lt;span class="s1"&gt;'harsh-some-cats-77d577b7cd-2s9c2'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: web.1  | 22:45:07.938 &lt;span class="o"&gt;[&lt;/span&gt;info] Access SaturnWeb.Endpoint at http://harsh-some-cats.gigalixirapp.com:443
2021-11-02T22:47:27.795085+00:00 harsh-some-cats[b&lt;span class="s1"&gt;'harsh-some-cats-77d577b7cd-2s9c2'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: web.1  | 22:47:27.794 &lt;span class="nv"&gt;request_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6ae142c1367400361510a08fb8000235 &lt;span class="o"&gt;[&lt;/span&gt;info] GET /
2021-11-02T22:47:27.799510+00:00 harsh-some-cats[b&lt;span class="s1"&gt;'harsh-some-cats-77d577b7cd-2s9c2'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: web.1  | 22:47:27.798 &lt;span class="nv"&gt;request_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6ae142c1367400361510a08fb8000235 &lt;span class="o"&gt;[&lt;/span&gt;info] Sent 200 &lt;span class="k"&gt;in &lt;/span&gt;4ms
2021-11-02T22:48:38.509918+00:00 harsh-some-cats[b&lt;span class="s1"&gt;'harsh-some-cats-77d577b7cd-2s9c2'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: web.1  | 22:48:38.508 &lt;span class="nv"&gt;request_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bbc52891b40f8bb8ec1c6e96b766c8fd &lt;span class="o"&gt;[&lt;/span&gt;info] GET /
2021-11-02T22:48:38.509940+00:00 harsh-some-cats[b&lt;span class="s1"&gt;'harsh-some-cats-77d577b7cd-2s9c2'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: web.1  | 22:48:38.509 &lt;span class="nv"&gt;request_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bbc52891b40f8bb8ec1c6e96b766c8fd &lt;span class="o"&gt;[&lt;/span&gt;info] Sent 200 &lt;span class="k"&gt;in &lt;/span&gt;1ms
2021-11-02T22:53:33.926744+00:00 harsh-some-cats[b&lt;span class="s1"&gt;'harsh-some-cats-77d577b7cd-2s9c2'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: web.1  | 22:53:33.926 &lt;span class="o"&gt;[&lt;/span&gt;info] Migrations already up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;The  &lt;a href="https://github.com/miguelcoba/saturn/tree/gigalixir-deployment"&gt;source code&lt;/a&gt;  for the saturn project is open source under the MIT license. Use the &lt;code&gt;gigalixir-deployment&lt;/code&gt; branch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;I'm &lt;a href="https://miguelcoba.com"&gt;Miguel Cobá&lt;/a&gt;. Follow me on &lt;a href="https://twitter.com/MiguelCoba_"&gt;Twitter&lt;/a&gt;, subscribe to my &lt;a href="https://newsletter.miguelcoba.com"&gt;newsletter&lt;/a&gt;, or read all my &lt;a href="https://blog.miguelcoba.com"&gt;articles&lt;/a&gt; to learn more info about Elixir, Elm, Web Development, or writing eBooks.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="a%20href="&gt;Christina @ wocintechchat.com&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/server?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt; &lt;/p&gt;

</description>
      <category>elixir</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>deployment</category>
    </item>
    <item>
      <title>Angular Login with Session Authentication</title>
      <author>Tarun Gurang</author>
      <pubDate>Mon, 08 Nov 2021 08:08:38 +0000</pubDate>
      <link>https://dev.to/tarungurang/angular-login-with-session-authentication-noi</link>
      <guid>https://dev.to/tarungurang/angular-login-with-session-authentication-noi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, we'll look at how to handle the login process with Session Authentication. We'll verify if the user is logged in or not, and if he is not, then the route will simply be blocked.&lt;/p&gt;

&lt;p&gt;Let’s go through the following Angular principles for better understanding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular Routing module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Manage the user authentication permission for the Angular path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular Auth Guard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This Angular function helps a lot when it comes to handling authentication. This is an interface that instructs the router whether or not to enable navigation to a specific route. We're using the 'canActivate' guard form in this case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular localStorage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In an Angular program, there are three ways to store data on the client-side.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Session storage&lt;/li&gt;
&lt;li&gt;Local Storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We're using localStorage in this case, which saves data in the client browser. It can only be used in a modern browser. When the window is closed or reopened while in session storage, the data is retained; however, when the tab is closed, the data will be lost. It's easy to &lt;strong&gt;&lt;a href="https://angular.io/tutorial/toh-pt0"&gt;create a new Angular project&lt;/a&gt;&lt;/strong&gt; create a new Angular project using a command. Given is the localStorage syntax which simply helps you to save up to 10MB of data in the browser.&lt;/p&gt;

&lt;p&gt;Using the below command, create a new Angular project.&lt;/p&gt;

&lt;p&gt;npm install bootstrap&lt;/p&gt;

&lt;p&gt;Add the following line to the src/styles.css file after installation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import '~bootstrap/dist/css/bootstrap.min.css';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build two components, one for login and one for the dashboard.&lt;/p&gt;

&lt;p&gt;Create a service called auth.&lt;/p&gt;

&lt;p&gt;Make a new user interface for logging in.&lt;/p&gt;

&lt;p&gt;Using the command lines below, create a new guard called auth.&lt;/p&gt;

&lt;p&gt;The Angular route guard, which can tell the router whether or not to enable navigation to a requested route, is referred to as Angular guard.&lt;/p&gt;

&lt;p&gt;ng g component login&lt;/p&gt;

&lt;p&gt;ng g component dashboard&lt;/p&gt;

&lt;p&gt;ng g service services/auth //Build a service in the Services folder.&lt;/p&gt;

&lt;p&gt;ng g interface interfaces/login //In the interfaces folder, build a new interface.&lt;/p&gt;

&lt;p&gt;ng g guard guards/auth //Build a new guard in the Guards folder.&lt;/p&gt;

&lt;p&gt;In the Login interfaces, add two properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Login.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class ILogin {      
  userid: string;    
  password: string;    
}  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now navigate to guards/Auth.guard.ts. Import the @angular/router package's 'canActivate' interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Auth.guard.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Injectable } from '@angular/core';      
  import { ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate, Router } from '@angular/router';      
  import { Observable } from 'rxjs';      
  @Injectable({      
     providedIn: 'root'      
  })      
  export class AuthGuard implements CanActivate {      
     constructor(private router: Router) { }      
     canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {      
        if (this.isLoggedIn()) {      
        return true;      
        }      
        // navigate to login page as user is not authenticated      
     this.router.navigate(['/login']);      
  return false;      
  }      
  public isLoggedIn(): boolean {      
     let status = false;      
     if (localStorage.getItem('isLoggedIn') == "true") {      
        status = true;      
     }
       else {      
        status = false;      
        }      
     return status;      
     }    
  }    

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import the AuthGuard module into the app.module.ts format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { AuthGuard } from './guards/auth.guard';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, from the @angular/forms package, import ReactiveFormsModule and FormsModule into this file.&lt;/p&gt;

&lt;p&gt;Our app.module.ts file should now look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';    
import { NgModule } from '@angular/core';    
import { AppRoutingModule } from './app-routing.module';    
import { AppComponent } from './app.component';    
import { LoginComponent } from './login/login.component';    
import { DashboardComponent } from './dashboard/dashboard.component';    
import { AuthGuard } from './guards/auth.guard';    
import { FormsModule, ReactiveFormsModule } from '@angular/forms';    

@NgModule({    
   declarations: [    
   AppComponent,    
   LoginComponent,    
   DashboardComponent    
],    
imports: [    
   BrowserModule,    
   AppRoutingModule,    
   FormsModule,    
   ReactiveFormsModule    
],    
   providers: [AuthGuard],    
   bootstrap: [AppComponent]    
})    
export class AppModule { }  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/the-comprehensive-guide-to-angular-performance-tuning"&gt;The Comprehensive Guide To Angular Performance Tuning&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now edit the app-routing.modue.ts file to include login and dashboard routes. To verify user authentication, add the ‘canActivate' attribute here. It will redirect to the login page if the user is not allowed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NgModule } from '@angular/core';  
import { Routes, RouterModule } from '@angular/router';  
import { LoginComponent } from './login/login.component';  
import { DashboardComponent } from './dashboard/dashboard.component'; 
import { AuthGuard } from './guards/auth.guard';  


const routes: Routes = [  
   { path: 'login', component: LoginComponent },  
   { path: 'dashboard', component: DashboardComponent, canActivate : [AuthGuard] }];  
@NgModule({  
   imports: [RouterModule.forRoot(routes)],  
   exports: [RouterModule]  
})  
export class AppRoutingModule { }  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the app.component.html file, add the HTML code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;&amp;lt;div class="container"&amp;gt;  
  &amp;lt;!-- Static navbar --&amp;gt;&amp;lt;nav class="navbar navbar-inverse"&amp;gt;&amp;lt;div class="container-fluid"&amp;gt;&amp;lt;div class="navbar-header"&amp;gt;&amp;lt;button aria-controls="navbar" aria-expanded="false" class="navbar-toggle collapsed" data-target="#navbar" data-toggle="collapse" type="button"&amp;gt;  
                  &amp;lt;span class="sr-only"&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;  
              &amp;lt;a class="navbar-brand" href="#"&amp;gt;Angular Registration&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class="navbar-collapse collapse" id="navbar"&amp;gt;&amp;lt;ul class="nav navbar-nav"&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li routerlinkactive="active"&amp;gt;  
                      &amp;lt;a routerlink="/login"&amp;gt;Login&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li routerlinkactive="active"&amp;gt;  
                      &amp;lt;a routerlink="/dashboard"&amp;gt;Dashboard&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;  
          &amp;lt;!--/.nav-collapse --&amp;gt;&amp;lt;/div&amp;gt;  
      &amp;lt;!--/.container-fluid --&amp;gt;&amp;lt;/nav&amp;gt;  
  &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path of the URL is stored in routerLink, and routeLinkActive adds the class active to the selected menu. According to the route URL, will determine which View to show.&lt;/p&gt;

&lt;p&gt;Import the ILogin interface into the auth.service.ts file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ILogin } from 'src/app/interfaces/login';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within this service class, add a Logout() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Injectable } from '@angular/core';    
import { ILogin } from '../interfaces/login';    

@Injectable({    
   providedIn: 'root'    
})    
export class AuthService {    
   constructor() { }    
   logout() :void {    
   localStorage.setItem('isLoggedIn','false');    
   localStorage.removeItem('token');    
   }    
}   

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now import Router from the @angular/router package into the login.component.ts module. Within this file, import the login interface and the AuthService.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Router } from '@angular/router';  
import { ILogin } from 'src/app/interfaces/login';  
import { AuthService } from '../services/auth.service'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, import the @angular/forms package's FormBuilder, FormGroup, Validators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { FormBuilder, FormGroup, Validators } from '@angular/forms';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the function Object() { [native code] }, create three instances: router, service, and formBuilder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor(  
  private formBuilder : FormBuilder,  
  private router : Router,  
  private authService : AuthService  
) { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set default parameters for a new variable modal as the ILogin interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model: ILogin = { userid: "admnin", password: "admin@123" }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make a loginForm variable with the FormGroup sort. The message is a string, and the returnURL is also a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;loginForm: FormGroup;  
message: string;  
returnUrl: string;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build a new formGroup within the ngOnInit() method and apply the necessary validation to both properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#looking-for-trusted-angularjs-development-company-your-search-ends-here"&gt;
  &lt;/a&gt;
  Looking for Trusted &lt;a href="https://www.ifourtechnolab.com/angular-js-development-company"&gt;AngularJS Development Company&lt;/a&gt;? Your Search ends here.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ngOnInit() {  
  this.loginForm = this.formBuilder.group({  
     userid: ['', Validators.required],  
     password: ['', Validators.required]  
  });  
this.returnUrl = '/dashboard';  
this.authService.logout();  
}  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add a get method to make it easier to access the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;get f() { return this.loginForm.controls; }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside this class, add the Login() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;login() {  
  if (this.loginForm.invalid) {  
     return;  
  }  
  else {  
     if (this.f.userid.value == this.model.userid &amp;amp;&amp;amp; this.f.password.value == this.model.password) {  
        console.log("Login successful");  
        //this.authService.authLogin(this.model);  
        localStorage.setItem('isLoggedIn', "true");  
        localStorage.setItem('token', this.f.userid.value);  
        this.router.navigate([this.returnUrl]);  
     }  
  else {  
     this.message = "Please check your userid and password";  
     }  
    }  
  } 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, login.component.ts would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';  
import { Router } from '@angular/router';  
import { ILogin } from 'src/app/interfaces/login';  
import { AuthService } from '../services/auth.service'  
import { FormBuilder, FormGroup, Validators } from '@angular/forms';  
@Component({  
   selector: 'app-login',  
   templateUrl: './login.component.html',  
   styleUrls: ['./login.component.css']  
   })  
export class LoginComponent implements OnInit {  
   model: ILogin = { userid: "admnin", password: "admin@123" }  6
   loginForm: FormGroup;  
   message: string;  
   returnUrl: string;  
   constructor(  
      private formBuilder: FormBuilder,  
      private router: Router,  
      private authService: AuthService  
   ) { }  
   ngOnInit() {  
      this.loginForm = this.formBuilder.group({  
         userid: ['', Validators.required],  
         password: ['', Validators.required]  
      });  
   this.returnUrl = '/dashboard';  
   this.authService.logout();  
   }  
// convenience getter for easy access to form fields  
get f() { return this.loginForm.controls; }  
login() {  

   // stop here if form is invalid  
   if (this.loginForm.invalid) {  
      return;  
   }  
   else {  
      if (this.f.userid.value == this.model.userid &amp;amp;&amp;amp; this.f.password.value == this.model.password) {  
      console.log("Login successful");  
      //this.authService.authLogin(this.model);  
      localStorage.setItem('isLoggedIn', "true");  
      localStorage.setItem('token', this.f.userid.value);  
      this.router.navigate([this.returnUrl]);  
      }  
   else {  
      this.message = "Please check your userid and password";  
      }  
     }  
  }  
}  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Login.component.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;&amp;lt;div class="container"&amp;gt;&amp;lt;div class="col-md-6 col-md-offset-3 loginBox"&amp;gt;&amp;lt;h3&amp;gt;Log In&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
&amp;lt;form&amp;gt;&amp;lt;div class="form-group clearfix"&amp;gt;    
              &amp;lt;label class="col-md-3 col-sm-5 col-xs-12" for="userid"&amp;gt;Userid&amp;lt;/label&amp;gt;
&amp;lt;div class="col-md-9 col-sm-7 col-xs-12"&amp;gt;    
                  &amp;lt;input class="form-control" formcontrolname="userid" type="text" /&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;Userid is required&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class="form-group clearfix"&amp;gt;    
            &amp;lt;label class="col-md-3 col-sm-5 col-xs-12" for="password"&amp;gt;Password&amp;lt;/label&amp;gt;
&amp;lt;div class="col-md-9 col-sm-7 col-xs-12"&amp;gt;    
                &amp;lt;input class="form-control" formcontrolname="password" type="password" /&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;Password is required&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class="col-xs-12 form-group text-right"&amp;gt;&amp;lt;button class="btn btn-success" type="submit"&amp;gt;Login&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt; 
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dashboard.component.ts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Implement the logout() method inside this.ts format. This page will be inaccessible if the user is not authenticated, and the user will be directed to the login page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';  
import { Router } from '@angular/router';  
import { AuthService } from '../services/auth.service';  

@Component({  
  selector: 'app-dashboard',  
  templateUrl: './dashboard.component.html',  
  styleUrls: ['./dashboard.component.css']  
})  
export class DashboardComponent implements OnInit {  

  id: string;  
  constructor(private router: Router, private authService: AuthService) { }  
  ngOnInit() {  
    this.id = localStorage.getItem('token');  
    //console.log(this.id);  
  } 
  logout() {  
    console.log('logout');  
    this.authService.logout();  
    this.router.navigate(['/login']);  
  } 
} 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dashboard.component.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The logged user's id will be shown within id if the user is registered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;&amp;lt;div class="container"&amp;gt;&amp;lt;div class="col-md-6 col-md-offset-3 loginBox"&amp;gt;    
      Welcome,  {{id}}    
      &amp;lt;a href="javascript:void(0);"&amp;gt;Logout&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;In this blog, we have learned Angular Login with Session Authentication. We can manage user authentication, route access, and the session variable using this method. If the user is not authenticated, we may use this Angular Guard method to prevent requested navigation.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🎊 You don't need SVG! Creating animated loaders for content with Tailwind CSS</title>
      <author>Vic Shóstak</author>
      <pubDate>Mon, 08 Nov 2021 08:01:25 +0000</pubDate>
      <link>https://dev.to/koddr/you-dont-need-svg-creating-animated-loaders-for-content-with-tailwind-css-2cf0</link>
      <guid>https://dev.to/koddr/you-dont-need-svg-creating-animated-loaders-for-content-with-tailwind-css-2cf0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hi, DEV friends! 😁&lt;/p&gt;

&lt;p&gt;Today we'll talk about how to improve the UX of your project by several times by implementing just a content loader in the right format.&lt;/p&gt;

&lt;p&gt;It's not some kind of SVG or JavaScript “magic”, it's just pure HTML, Tailwind CSS built-in classes and some gradient colors.&lt;/p&gt;

&lt;p&gt;Here we go! 🚀&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-main-advantage"&gt;The main advantage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#explanations-of-the-code"&gt;Explanations of the code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-simple-content-loader"&gt;A simple content loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loader-for-the-card-in-the-list"&gt;Loader for the card in the list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-main-advantage"&gt;
  &lt;/a&gt;
  The main advantage
&lt;/h2&gt;

&lt;p&gt;As you have already guessed from the title, this is a purely CSS solution using the &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; &lt;code&gt;v2.2.x&lt;/code&gt; framework. And the main advantage of this approach is that in fact it is just plain HTML and CSS, which is loaded very first in the user's browser. &lt;/p&gt;

&lt;p&gt;There's no “jagged” user experience (UX), where they first see a blank page, then a JavaScript or SVG loader flashes and content shown immediately.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🔥 &lt;strong&gt;Attention!&lt;/strong&gt; UX improvement works should be the &lt;strong&gt;highest priority&lt;/strong&gt; for every frontend developer! Especially when customer loyalty to the business and the brand as a whole depends on it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanations-of-the-code"&gt;
  &lt;/a&gt;
  Explanations of the code
&lt;/h2&gt;

&lt;p&gt;In order not to dwell later on the explanation of some general points in the code, I decided to tell at once about the classes that will be used in the layout of the loaders.&lt;/p&gt;

&lt;p&gt;The first of these is the gradient class itself &lt;code&gt;.gradient-purple-pink-red&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* ./src/assets/css/tailwind.css */&lt;/span&gt;

&lt;span class="c"&gt;/* ... */&lt;/span&gt;

&lt;span class="k"&gt;@layer&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c"&gt;/* Gradient color */&lt;/span&gt;
  &lt;span class="nc"&gt;.gradient-purple-pink-red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;bg-gradient-to-r;&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;from-purple-400&lt;/span&gt; &lt;span class="err"&gt;via-pink-500&lt;/span&gt; &lt;span class="err"&gt;to-red-500;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm used to defining groups of properties, like colors or gradients, in the &lt;code&gt;@layer utilities {}&lt;/code&gt; layer. E.g., “&lt;em&gt;I add a utility to change the color of an element&lt;/em&gt;”. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;😉 &lt;strong&gt;By the way!&lt;/strong&gt; It would be interesting to read in the comments how you work with &lt;code&gt;@layer&lt;/code&gt; and &lt;code&gt;@apply&lt;/code&gt; in your Tailwind CSS projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay. Let's take a closer look at all the properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-gradient-to-{direction}&lt;/code&gt; this property indicates the direction of the gradient (in our case &lt;code&gt;r&lt;/code&gt; equals to &lt;code&gt;right&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;from-{color}&lt;/code&gt; this property indicates the first (&lt;em&gt;start&lt;/em&gt;) color of the gradient (in our case &lt;code&gt;purple&lt;/code&gt; with weight &lt;code&gt;400&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;via-{color}&lt;/code&gt; this property indicates the second (&lt;em&gt;middle&lt;/em&gt;) color of the gradient (in our case &lt;code&gt;pink&lt;/code&gt; with weight &lt;code&gt;500&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;to-{color}&lt;/code&gt; this property indicates the third (&lt;em&gt;end&lt;/em&gt;) color of the gradient (in our case &lt;code&gt;red&lt;/code&gt; with weight &lt;code&gt;500&lt;/code&gt;);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second class I would like to show is &lt;code&gt;.animate-pulse&lt;/code&gt; (which is a standard Tailwind &lt;a href="https://tailwindcss.com/docs/animation#pulse"&gt;class&lt;/a&gt;). Just this class does the magic animation that turns a simple gradient background into a loader:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Animation keyframe */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;pulse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Class for element with animation */&lt;/span&gt;
&lt;span class="nc"&gt;.animate-pulse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pulse&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-content-loader"&gt;
  &lt;/a&gt;
  A simple content loader
&lt;/h2&gt;

&lt;p&gt;The most common loader you'll find on websites is a &lt;strong&gt;content loader&lt;/strong&gt;. It is usually enabled after navigating to a page that has not yet pulled content from the backend.&lt;/p&gt;

&lt;p&gt;A good UX is to show the loader in full compliance with the structure of the content to be loaded. Thus, the user does not have the feeling that &lt;em&gt;he got somewhere wrong&lt;/em&gt;. He will have a visual placeholder instead of content that will be displayed to him in a couple of moments.&lt;/p&gt;

&lt;p&gt;The final version of our loader will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1CjVNW-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk7j1rkl77donv0t2ff9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1CjVNW-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk7j1rkl77donv0t2ff9.gif" alt="content loader" width="600" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems simple, right? Lines are just &lt;code&gt;div&lt;/code&gt; containers with a given height and width… But how do you make a circular element without SVG? Easy! Add any block element symmetric dimensions and the built-in &lt;code&gt;.rounded-full&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Now let's put it all together and build the content loader:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🎯 &lt;strong&gt;Note:&lt;/strong&gt; Please follow comments in the code!&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"animate-pulse"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- First line heading --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-8 h-4 gradient-purple-pink-red rounded-full w-4/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"py-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Text block 1 --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-3 gradient-purple-pink-red rounded-full w-4/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-3 gradient-purple-pink-red rounded-full w-3/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-3 gradient-purple-pink-red rounded-full w-2/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Text block 2 --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-3 gradient-purple-pink-red rounded-full w-5/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-3 gradient-purple-pink-red rounded-full w-4/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-3 gradient-purple-pink-red rounded-full w-2/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- User card (avatar + username) --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-6 flex items-center space-x-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-10 w-10 gradient-purple-pink-red rounded-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 gradient-purple-pink-red rounded-full w-1/12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 gradient-purple-pink-red rounded-full w-1/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Post data --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-6 h-3 gradient-purple-pink-red rounded-full w-1/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📺 Live demo: &lt;a href="https://play.tailwindcss.com/a7Pp2l65hF"&gt;https://play.tailwindcss.com/a7Pp2l65hF&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This example illustrates perfectly how simple and flexible it is to customize the loader to your needs. To consolidate the material, let's look at the following loader.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loader-for-the-card-in-the-list"&gt;
  &lt;/a&gt;
  Loader for the card in the list
&lt;/h2&gt;

&lt;p&gt;Let's move on. Another kind of uploader you've seen, for example, when scrolling through your Instagram feed or your favorite social network. &lt;/p&gt;

&lt;p&gt;Such techniques help high-loaded web services improve the user experience while the data in the feed is being loaded.&lt;/p&gt;

&lt;p&gt;Let's take the feed from the projects on some web service as an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Pqalimc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85v4twhnd7kuyuahyl2i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Pqalimc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85v4twhnd7kuyuahyl2i.gif" alt="card loader" width="540" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This loader looks maximally organic and doesn't make you want to close the page, does it? This is achieved because the loader almost exactly repeats the content of the card (&lt;em&gt;we talked about this earlier&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;All right, let's implement this loader:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"animate-pulse"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Head line --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"gradient-purple-pink-red h-6 rounded-t-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"py-4 px-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- User card (avatar + username) --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center space-x-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-7 w-7 gradient-purple-pink-red rounded-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 gradient-purple-pink-red rounded-full w-1/3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Text block --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- Heading --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 gradient-purple-pink-red rounded-full w-3/4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- Description --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-2 gradient-purple-pink-red rounded-full w-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-2 gradient-purple-pink-red rounded-full w-5/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-2 gradient-purple-pink-red rounded-full w-4/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-2 gradient-purple-pink-red rounded-full w-5/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-2 gradient-purple-pink-red rounded-full w-3/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-2 gradient-purple-pink-red rounded-full w-2/6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- Button --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-11 gradient-purple-pink-red rounded-lg w-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- Post data + time --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-3 my-4 mx-auto gradient-purple-pink-red rounded-full w-1/2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📺 Live demo: &lt;a href="https://play.tailwindcss.com/msRdcHcKne"&gt;https://play.tailwindcss.com/msRdcHcKne&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again there is nothing complicated, thanks to the built-in Tailwind CSS classes, we can do any block variations in a matter of seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Use your forms and styles for the loader to improve the UX of your project. It's simple, but believe me (&lt;em&gt;in my 12+ years of the practical experience&lt;/em&gt;), will bring a lot of positive feedback.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Share your loaders through the &lt;a href="https://play.tailwindcss.com/"&gt;Tailwind Play&lt;/a&gt; service in the comments!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;And think of the users first!&lt;/strong&gt; 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vic Shóstak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

&lt;p&gt;And, of course, you can support me by donating at &lt;a href="https://liberapay.com/koddr/donate"&gt;LiberaPay&lt;/a&gt;. &lt;em&gt;Each donation will be used to write new articles and develop non-profit open-source projects for the community.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://liberapay.com/koddr/donate"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrXDZTNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq8442cqyjq2i1jdeay8.png" alt="Support author at LiberaPay" width="424" height="104"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>css</category>
      <category>html</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Is it feasible in 2021 to run a crowd-sourced website on the side?</title>
      <author>Lamy Fafa</author>
      <pubDate>Mon, 08 Nov 2021 07:58:27 +0000</pubDate>
      <link>https://dev.to/lamy_fafa_f3cc85ee84f4cd6/is-it-feasible-in-2021-to-run-a-crowd-sourced-website-on-the-side-2mia</link>
      <guid>https://dev.to/lamy_fafa_f3cc85ee84f4cd6/is-it-feasible-in-2021-to-run-a-crowd-sourced-website-on-the-side-2mia</guid>
      <description>&lt;p&gt;Last year France passed a law requiring all website operators (not just tech giants) to take down illegal content when a French citizen notifies them. This can be anything illegal, from child porn, to someone writing that Osama Bin Laden did nothing wrong ("apologie du terrorisme") or using a racial slur. &lt;/p&gt;

&lt;p&gt;If you don't remove it within 24 hours (1 hour for child porn), you get a 250k euro fine, and it can go up to a maximum of 50 million euros. You are required to make available a reporting tool for your users&lt;a href="https://developer.apple.com/forums/thread/693985"&gt;,&lt;/a&gt; and the 24 hour timer starts whenever a French citizen reports content using this tool.&lt;/p&gt;

&lt;p&gt;Germany has a similar law, the French law is a copy of it. And now Canada wants to pass a similar law.&lt;/p&gt;

&lt;p&gt;I had planned to create a website that would be a crowd-sourced website about a hobby of mine. People would contribute by signing up and making edits, similar to Wikipedia, but it requires some custom things so I can't just use Fandom or whatever. They would also have their own profile page where they describe themselves.&lt;/p&gt;

&lt;p&gt;I have a full-time job, this would be something on the side, but now that I looked into these laws it doesn't seem possible. If I'm sleeping and someone sends a report in the middle of the night, I can't react to it. I could automatically take down any reported content and manually review it when I wake up, which seems like the equivalent of 100 full-time jobs, but even if I did that it would become a super easy avenue to DDoS the website: just create a bunch of accounts and every couple of days have one flag everything. You could write bot detection scripts to ignore mass-reports&lt;a href="https://www.linkedin.com/in/nightmarketing/"&gt;,&lt;/a&gt; but what if a really illegal thing was among them&lt;a href="https://developer.apple.com/forums/thread/694020"&gt;,&lt;/a&gt; it slips between the cracks and is used to penalize you? What if I'm vacation for 2 weeks, do I have to shut down the website?&lt;/p&gt;

&lt;p&gt;I'm worried that anything more than a static website can't realistically be operated this way anymore unless you're an American living in America. I split my time between Canada and France, so that doesn't help me.&lt;/p&gt;

&lt;p&gt;Does anyone here run their own site that isn't 100% static, and if so, do you worry about this stuff?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>php</category>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>AWS open source news and updates #89</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 08 Nov 2021 07:58:16 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-89-2d9m</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-89-2d9m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#november-8th-2021-instalment-89"&gt;
  &lt;/a&gt;
  November 8th, 2021 - Instalment #89
&lt;/h2&gt;

&lt;p&gt;Newsletter #89.&lt;/p&gt;

&lt;p&gt;This week we have another selection of great new projects for you to take a look at. Kicking things off with the latest open source project from Airbnb, ottr, a Public Key Infrastructure framework that handles end-to-end certificate rotations, the other projects include cloudkey, clock-bound, aws-recon, cdk-dia and more. Make sure you check these out.&lt;/p&gt;

&lt;p&gt;As always, we have a wide selection of new blog posts from the AWS and Community bloggers covering topics from Alphafold, BayerCLAW, and Babelfish to OpenSearch, AWS CDK, ffmpeg, Amazon Corretto, Spring Boot, Bottlerocket, Synk, MariaDB and GitHub actions. &lt;/p&gt;

&lt;p&gt;To finish things off we have a new video covering Suricata on AWS, as well as a new event coming up later this week which you still have time to sign up for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Qi Wang, Tom Roshko, Christos Matskas, Vadivelu Murali Pranavan, Kenneth Yang, Danny Gitelman, Daniel Begimher, Afza Wajid, Sudhir Reddy Maddulapally, Alexey Vorovich, Jesse Butler, Damien Martins, Masahiro Imai, Hidenori Koizumi, Jorge Lanzarotti, Ramesh Kumar Venkatraman, Dave Currie, Frank Dallezotte, Maxwell Moon, Jack Tabaska, Ian Davis, Jani Muuriaisniemi, Jose Juhala, Vacha Shah, Sarat Vemulapalli, Irshad Buchh and Yang Xiao.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-noticeboard"&gt;
  &lt;/a&gt;
  Community noticeboard
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hackathon winners&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Great news from Vadivelu Murali Pranavan last week, where he shared the following updated:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm happy to share with you that myself along with my peers Sanjay Thiyagarajan, Naresh Kumar, Jayanth Vikash S, Xavier Emmanuel and Sri Varmaa won the first place in Amazon Web Services (AWS) Graviton Hackathon 2021 in Migration track. Check out the project they created, &lt;a href="https://aws-oss.beachgeek.co.uk/12a"&gt;Genie&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ottr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/12d"&gt;ottr&lt;/a&gt; this is the latest open source project from Airbnb engineering, Ottr. Ottr is a serverless Public Key Infrastructure framework that handles end-to-end certificate rotations without the use of an agent. You can check out the super detailed blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/12e"&gt;Meet Ottr: A Serverless Public Key Infrastructure Framework&lt;/a&gt; from  Kenneth Yang provides an overview on Ottr with details of the architecture, logical and network flows and details on how to deploy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zznKrp99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AyUXlXD6mzsLGmMEgAGeIhQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zznKrp99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AyUXlXD6mzsLGmMEgAGeIhQ.png" alt="arch" width="880" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cloudkey&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/12p"&gt;cloudkey&lt;/a&gt; this project from Aidan Steele is perfect if you have a Yubikey and want to use it to assume IAM roles to interact with AWS. As Aidan says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I could create certificates on the Yubikey, enrol them into AWS IoT (for free) and assume roles in AWS with no IAM secret access keys stored on disk."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Worth checking out Aidan's &lt;a href="https://aws-oss.beachgeek.co.uk/12q"&gt;thread on twitter, here&lt;/a&gt; for more context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;clock-bound&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/12b"&gt;clock-bound&lt;/a&gt; this new project provides you with a consistent, trusted time service will allow you to compare timestamps to determine order and consistency for events and transactions, independent from the instances’ respective geographic locations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5qJi7S2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws/clock-bound/blob/main/ClockErrorBound.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5qJi7S2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws/clock-bound/blob/main/ClockErrorBound.png%3Fraw%3Dtrue" alt="diagram" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-recon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/12h"&gt;aws-recon&lt;/a&gt; this project from Darkbit is a multi-threaded AWS security-focused inventory collection tool written in Ruby, and was created to facilitate efficient collection of a large amount of AWS resource attributes and metadata. It aims to collect nearly everything that is relevant to the security configuration and posture of an AWS environment. It is being used by some interesting customers, so well worth checking this out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-dia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/12i"&gt;cdk-dia&lt;/a&gt; this project from Tom Roshko looks super neat, it diagrams your CDK provisioned infrastructure using the Graphviz dot language. After getting Graphviz running on my Macbook (thanks Mac Ports) I tried it on one of my projects, and here is the output. What do you think? A great start, so it will be interesting to see how this project evolves and develops. Nice work Tom!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7vdqoWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ricsuepublicresources.s3.eu-west-1.amazonaws.com/images/diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7vdqoWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ricsuepublicresources.s3.eu-west-1.amazonaws.com/images/diagram.png" alt="demo" width="880" height="815"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cdk-github-oidc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/12j"&gt;aws-cdk-github-oidc&lt;/a&gt; is a CDK constructs to use OpenID Connect for authenticating your Github Action workflow with AWS IAM. These constructs allows you to harden your AWS deployment security by removing the need to create long-term access keys for Github Actions and instead use OpenID Connect to Authenticate your Github Action workflow with AWS IAM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bVWa7M8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/aripalo/aws-cdk-github-oidc/4eb53714ec69583f057141afab57c6c2cd7dae0b/assets/github-aws-oidc.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bVWa7M8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/aripalo/aws-cdk-github-oidc/4eb53714ec69583f057141afab57c6c2cd7dae0b/assets/github-aws-oidc.svg" alt="arch" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out last weeks newsletter where Richard Boyd shows you using this new capability of GitHub Actions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fiware-orion-on-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/125"&gt;fiware-orion-on-aws&lt;/a&gt; FIWARE is a curated framework of open source platform components to help with the development of smart applications and solutions. This repository is a reference implementation of one of those components, the Orion Context Broker which uses another component in that project, Cygnus. To help you get started, check out the blog post &lt;a href="https://aws-oss.beachgeek.co.uk/124"&gt;How to build smart cities with FIWARE Orion Context Broker and Cygnus on AWS&lt;/a&gt;from Masahiro Imai, Hidenori Koizumi, and Jorge Lanzarotti&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y5Urrv61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/9e6a55b6b4563e652a23be9d623ca5055c356940/2021/11/02/orion-cygnus-onaws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5Urrv61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/9e6a55b6b4563e652a23be9d623ca5055c356940/2021/11/02/orion-cygnus-onaws.png" alt="arch" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retro corner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Corey Quin for highlighting this tool I had missed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-key-disabler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/129"&gt;aws-key-disabler&lt;/a&gt; this open source project is a small lambda script that will disable access keys older than a given amount of days. Small but perfectly formed, I think this is a great solution if you find yourself needing to automate the vending of your keys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tweet-of-the-week"&gt;
  &lt;/a&gt;
  Tweet of the week
&lt;/h3&gt;

&lt;p&gt;This &lt;a href="https://aws-oss.beachgeek.co.uk/11y"&gt;tweet&lt;/a&gt; from Christos Matskas (&lt;a class="mentioned-user" href="https://dev.to/christosmatskas"&gt;@christosmatskas&lt;/a&gt;
) came up on my timeline last week, where he shared how he was able to use the open sourced NodeJS library for verifying JWTs that I shared in the last episode, and verify AAD access tokens from Azure Active Directory. He also shared the code, which you can check out at &lt;a href="https://aws-oss.beachgeek.co.uk/11z"&gt;here&lt;/a&gt;. Christos also put this post together, &lt;a href="https://aws-oss.beachgeek.co.uk/120"&gt;Open Standards, Security, Azure AD and AWS&lt;/a&gt; which shows you the end to end story. Nice!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Building Software as a Service (SaaS) is an increasingly popular approach for open source projects to provide customers with immediate access to their capabilities. There are several approaches you can take, but being able to well and ensure a good experience during on boarding, you need to have a reliable, fast, and multi-region capable provisioning and software lifecycle management. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/12k"&gt;Parallel and dynamic SaaS deployments with AWS CDK Pipelines&lt;/a&gt; Jani Muuriaisniemi and Jose Juhala describe a deployment system for achieving this using AWS CDK and AWS CDK Pipelines. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwU1rtFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/10/27/figure1-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwU1rtFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/10/27/figure1-1.png" alt="arch" width="880" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BayerCLAW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I shared details of BayerCLAW in a previous newsletter (#86). BayerCLAW a workflow orchestration system for AWS, targeted at bioinformatics pipelines. Jack Tabaska and Ian Davis from the Bayer Crop Sciences team have put together this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/12f"&gt;BayerCLAW – Open-Source, Serverless Orchestrator for Scientific Workflows on AWS&lt;/a&gt; that takes a look at the motivations and technical implementation of BayerCLAW.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvYDkbHZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/10/27/bayer-figure-1-CLAW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvYDkbHZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/10/27/bayer-figure-1-CLAW.png" alt="arch" width="880" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AlphaFold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AlphaFold is an artificial intelligence program developed by Alphabets's/Google's DeepMind which performs predictions of protein structure. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/12m"&gt;Run AlphaFold v2.0 on Amazon EC2&lt;/a&gt;, Qi Wang provides a step-by-step guide on how to install AlphaFold on an EC2 instance with Nvidia GPU.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdiCBIne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/10/25/ML_5671_3Dview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdiCBIne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/10/25/ML_5671_3Dview.png" alt="alpha" width="800" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Babelfish&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the post &lt;a href="https://aws-oss.beachgeek.co.uk/126"&gt;Migrate from SQL Server to Amazon Aurora using Babelfish&lt;/a&gt;, Ramesh Kumar Venkatraman provides and overview of how you can migrate from SQL Server to Babelfish for Aurora PostgreSQL. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYImtU7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/11/04/DBBLOG-1441-image001-cropped.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYImtU7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/11/04/DBBLOG-1441-image001-cropped.png" alt="arch" width="467" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Corretto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dave Currie shares details of the Amazon Corretto support roadmap in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/127"&gt;Announcing Amazon Corretto 17 support roadmap&lt;/a&gt;. Make sure you read this short post and understand what this means for any workloads you have running Amazon Corretto 8 or 11.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/12o"&gt;Build and deploy a Spring Boot application to AWS App Runner with a CI/CD pipeline using Terraform&lt;/a&gt; is the perfect post if you want to learn about how to setup a really nice automated deployment pipeline for your Spring Boot applications on AWS. Irshad Buchh and Yang Xiao walk you through setting up a pipeline for automatic build and deployment onto AWS App Runner. Read on to find out more [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EiLOo3tM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/09/22/springbootapprunner1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EiLOo3tM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/09/22/springbootapprunner1.png" alt="arch" width="879" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jesse Butler opens this post up with the question “Does the OS even matter anymore?” - intrigued? Have your own opinion? Well find out what he thinks in the excellent post, &lt;a href="https://aws-oss.beachgeek.co.uk/123"&gt;Bottlerocket, A Year in the Life&lt;/a&gt; - (and I totally agree, for anyone interested!) [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hWK944HV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/10/25/br_update.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hWK944HV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/10/25/br_update.png" alt="arch" width="680" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Danny Gitelman and Daniel Begimher share how to use tools like Synk in combination with an automated workflow to reduce the risk of downloading new packages from public repositories. Read more in their post, &lt;a href="https://aws-oss.beachgeek.co.uk/121"&gt;How to automate your software-composition analysis on AWS&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/b7eb6c689c037217079766fdb77c3bac3e51cb4c/2021/10/15/software-composition-analysis-architecture-diagram.jpg"&gt;arch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MariaDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SkySQL is a database as a service (DBaaS) solution on AWS that makes it easy for customers to start using MariaDB Enterprise in the cloud. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/122"&gt;MariaDB Collaborates with AWS to Deliver SkySQL on AWS&lt;/a&gt; Afza Wajid and Sudhir Reddy Maddulapally speak with Alexey Vorovich, VP of Engineering for SkySQL at MariaDB Corporation, about the recent SkySQL launch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FFmpeg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Damien Martins shares with you a how-to guide describes the steps to invoke an automatic extraction of media asset metadata through ffprobe (part of the FFmpeg project) in his post, &lt;br&gt;
&lt;a href="https://aws.amazon.com/blogs/media/analyzing-media-files-using-ffprobe-in-aws-lambda/"&gt;Analyzing media files using ffprobe in AWS Lambda&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Actions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Frank Dallezotte and Maxwell Moon have collaborated on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/128"&gt;Building ARM64 applications on AWS Graviton2 using the AWS CDK and Self-Hosted Runners for GitHub Actions&lt;/a&gt; where they show how to configure of a self-hosted GitHub Runner on an EC2 instance with a Graviton2 processor, the required network resources, and a workflow that will run on the Runner on each repository push or pull request for the example application. This will allow you to start to create multi architecture builds so that you can start leveraging Arm based AWS Graviton2 instances and the improved price/performance as well as power characteristics. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e-ZWWxjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/10/25/0_Graviton2GHRunnerArchDrawing-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-ZWWxjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/10/25/0_Graviton2GHRunnerArchDrawing-1.png" alt="arch" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/12n"&gt;Backwards Compatibility Testing for OpenSearch&lt;/a&gt; Vacha Shah and Sarat Vemulapalli show you how backwards compatibility testing works within OpenSearch, something that is used to test and determine the safe upgrade paths from a supported version to the current version.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Amazon Time Sync Service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Time Sync Service now allows you to easily generate and compare timestamps from Amazon EC2 instances with ClockBound, an open source daemon and library. This information is valuable to determine order and consistency for events and transactions across EC2 instances, independent from the instances’ respective geographic locations. ClockBound calculates your Amazon EC2 instance’s clock error bound to measure its clock accuracy and allows you to check if a given timestamp is in the past or future with respect to your instance’s current clock. On every call, ClockBound simultaneously returns two pieces of information: the current time and the associated absolute error range. This means that the actual time of a ClockBound timestamp is within a set range.&lt;/p&gt;

&lt;p&gt;To get started, first make sure you are using Chrony. Then install the ClockBound daemon and library, or build your own library to integrate ClockBound into your application. For the best clock accuracy, we also recommend using the Amazon Time Sync Service. The Amazon Time Sync Service and Chrony are configured by default on Amazon Linux 2 instances.&lt;/p&gt;

&lt;p&gt;Check out the code repo at the top of this post.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Suricata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nick Coval &amp;amp; Adam Palmer presented "&lt;a href="https://aws-oss.beachgeek.co.uk/12l"&gt;Building an Open Source IDS/IPS Service on AWS with Suricata&lt;/a&gt;" at SuriCon, where they talk about how they built a quick-start solution on AWS that creates a Suricata-based solution, powered by AWS Gateway Load Balancer service (GWLB); enabling centralized and distributed deployment models.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2itI5zgXDP4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MLOps: End-to-End Hugging Face Transformers with the Hub &amp;amp; SageMaker Pipelines&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;November 10th 2021 - 6:00 PM (GMT)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Later this week, we have this workshop where you will learn how to build an End-to-End MLOps Pipeline for Hugging Face Transformers from training to production using Amazon SageMaker. Join the always amazing Julien Simon, together with Matteu Desve and Phillip Schmid for this webinar. &lt;a href="https://aws-oss.beachgeek.co.uk/12g"&gt;Read more and register here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Databricks | AWS Lakehouse Dev Day Live Workshop&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;November 16th 9:00 AM PT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Delta Lake is an open source storage layer that provides ACID transactions, scalable metadata handling, and unifies streaming and batch data processing. You can use Delta Lake on top of your existing data lake. During this workshop you will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make your existing Amazon S3 data lakes into a lakehouse with Delta Lake.
&lt;/li&gt;
&lt;li&gt;Provide an easy-to-use platform for analysts to directly query data on your data lake using SQL Analytics&lt;/li&gt;
&lt;li&gt;Simplify and automate data pipelines for streaming and batch data to lower costs and boost productivity for your data teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/zs"&gt;Read more and sign up here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>MERN Stack For Beginner - An Example Shopping App</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Mon, 08 Nov 2021 07:49:42 +0000</pubDate>
      <link>https://dev.to/linhtch90/mern-stack-for-beginner-an-example-shopping-app-4j8d</link>
      <guid>https://dev.to/linhtch90/mern-stack-for-beginner-an-example-shopping-app-4j8d</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGNeqa0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au0hvdmm7tr71lvhyvxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGNeqa0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au0hvdmm7tr71lvhyvxi.png" alt="Image description" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to share with the community the source code of a fullstack web application that I have just developed using MERN (MongoDB, ExpressJS, ReactJS, NodeJS) stack demonstrating basic features of a bookstore.&lt;/p&gt;

&lt;p&gt;I hope this would be a good resource for anyone who enjoys learning Javascript in general and MERN stack in particular.&lt;/p&gt;

&lt;p&gt;The live demo is accessible at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bn-bookstore.herokuapp.com/#/"&gt;https://bn-bookstore.herokuapp.com/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frontend and Backend source code is available at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/linhtch90/bn_bookstore_public_source"&gt;https://github.com/linhtch90/bn_bookstore_public_source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding and if this is useful for you, please give me a Github star for encouragement!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to work as a solo frontend developer</title>
      <author>Davor Tvorić</author>
      <pubDate>Mon, 08 Nov 2021 07:45:25 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/how-to-work-as-a-solo-frontend-developer-dhp</link>
      <guid>https://dev.to/bornfightcompany/how-to-work-as-a-solo-frontend-developer-dhp</guid>
      <description>&lt;p&gt;Working in a team is great. You can progress really fast and learn a lot from your colleagues. Having another set of eyes to proof check your work is a godsend because it can prevent silly things being deployed to production.&lt;br&gt;
But, sometimes, life happens and you have to work alone on a project. Be it a specific technology, budget reasons or something entirely else, it doesn't really matter. Working alone doesn't mean it'll suck or be really stressful if you keep yourself in check.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8Sg2Drk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckoq7wemuqbwmb426o0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8Sg2Drk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckoq7wemuqbwmb426o0u.png" alt="To do list" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I worked on a couple of projects as a solo frontend developer, but I rarely had the feeling like I couldn't do it or that I maybe didn't learn as much as I could have. If you "act" like there is a whole team involved (or that someone new will be joining you on the project), that can force you not to take shortcuts and do everything properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-lazy"&gt;
  &lt;/a&gt;
  Don't be lazy
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#avoid-shortcuts"&gt;
  &lt;/a&gt;
  Avoid shortcuts
&lt;/h3&gt;

&lt;p&gt;It's really easy to skip a couple of steps when working alone because, honestly, is anyone going to notice? The answer should be yes, you'll notice it!&lt;br&gt;
Opening a pull request that will be merged to master immediately might seem illogical, but having everything consistent will surely help you out in the long run. On top of that, you might notice something wrong when you're doing a once-over.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-your-code-neat"&gt;
  &lt;/a&gt;
  Keep your code neat
&lt;/h3&gt;

&lt;p&gt;Keeping your code neat is something you also shouldn’t skimp out on. Linters, prettiers and everything else should be setup as if you were in a team!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-your-own-qa"&gt;
  &lt;/a&gt;
  Be your own QA
&lt;/h3&gt;

&lt;p&gt;Writing tests is a no-brainer. It's always a great relief knowing that stuff works even after a refactor. Not having to constantly think about that will allow you to focus on more important things! That shouldn't change even if you're working alone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation!
&lt;/h2&gt;

&lt;p&gt;It might be boring, but if you don't do it, nobody will. At a first glance, it doesn't seem important since you're the only one that will be reading it. I can tell you that I know for a fact that the future you will thank you for it. It's unrealistic to expect you'll remember every little detail, even though you've written everything yourself. Having a good documentation means that some of the mental burden can be relieved because you can refer to it at any time.&lt;br&gt;
Heck, something might even change within the project and your new teammate will be even faster with the onboarding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-for-help"&gt;
  &lt;/a&gt;
  Ask for help
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#collaborate-with-other-frontend-developers"&gt;
  &lt;/a&gt;
  Collaborate with other frontend developers
&lt;/h3&gt;

&lt;p&gt;I have the benefit that there are other brilliant teammates on other projects. They might not know the domain of my project, but they can offer technical help if you explain it to them. Try to make it easy for them to understand it, and I’m sure that you’ll get new insights. The same goes for asking for help online. Just because you're alone on the project doesn't mean that you have to do everything by yourself.&lt;br&gt;
If you have work colleagues, it's not a bad idea to assign them on a pull request once in a while. You might be surprised how tunnel-visioned you can get!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-about-the-domain-from-backend"&gt;
  &lt;/a&gt;
  Learn about the domain from backend
&lt;/h3&gt;

&lt;p&gt;If there's a backend, I'm sure you can discuss domain issues with them, as well. They probably know a lot and it's a good idea to double-check with them. You might learn about something you weren't aware of!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improve-wherever-you-can"&gt;
  &lt;/a&gt;
  Improve wherever you can
&lt;/h2&gt;

&lt;p&gt;Now that you're alone on the project, you can do anything to improve your development experience. If there is a task that needs to be automated, why wouldn't you automate it? If you can get the budget for it, you'll save time and you'll learn something new. This is a great opportunity to make up for not learning from your teammates. Something that a senior colleague always set up can now be done by you. It might seem  daunting if it's out of your comfort zone, but hey, how else are you going to learn?&lt;br&gt;
From personal experience, these situations taught me some skills I would rarely have the time to research in other projects.&lt;/p&gt;

&lt;p&gt;By sticking to these tips, I've been able to maximise my learning and do quality work as much as I could. Not having a teammate doesn't mean that you really have to be isolated from everything else. And, who knows, you might even get someone working on a project by your side so you want to be proud of what you're capable of doing all on your own, right?&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>JavaScript News and Updates of October 2021</title>
      <author>Pavel Lazarev</author>
      <pubDate>Mon, 08 Nov 2021 07:37:05 +0000</pubDate>
      <link>https://dev.to/plazarev/javascript-news-and-updates-of-october-2021-3ke5</link>
      <guid>https://dev.to/plazarev/javascript-news-and-updates-of-october-2021-3ke5</guid>
      <description>&lt;p&gt;Greetings to all JavaScript adherents! It’s time to discuss the latest news and updates from the JavaScript world. In this article, we’ll talk about the new functionality of Node.js 17 and Gatsby 4, know what TypeScript 4.5 Beta comes up with, and review the latest release of Bootstrap in React. Moreover, we added some useful tips for web developers you can benefit from. Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-tools-and-updates"&gt;
  &lt;/a&gt;
  New Tools and Updates
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#announcing-node-v17"&gt;
  &lt;/a&gt;
  Announcing Node v17
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--74yIIHZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il9qj7f1w21xq5wdpmtn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--74yIIHZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il9qj7f1w21xq5wdpmtn.png" alt="node.js v17 release" width="512" height="313"&gt;&lt;/a&gt;&lt;br&gt;
The latest major version of Node.js brings several improvements to the runtime, as well as additional promisified APIs, OpenSSL 3.0 support, and an update of the JavaScript engine to V8 9.5.&lt;/p&gt;

&lt;p&gt;The team introduces in Node.js 17 promise-based APIs for the Readline module. It provides an interface for reading data from a Readable stream one line at a time. Besides, the new release includes OpenSSL 3.0, which provides QUIC support. However, FIPS support remains available via the new FIPS module. &lt;a href="https://nodejs.org/en/blog/release/v17.0.0/"&gt;Follow the link&lt;/a&gt; to read the full list of updates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-new-in-gatsby-4"&gt;
  &lt;/a&gt;
  What’s New in Gatsby 4
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mqGr_KF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm8vmyt2ke02utk54w3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mqGr_KF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm8vmyt2ke02utk54w3b.png" alt="gatsby-v4-relaese" width="512" height="171"&gt;&lt;/a&gt;&lt;br&gt;
Gatsby is a popular open-source frontend framework that blends the functionality from React, GraphQL, and Webpack. According to the Gatsby team, the recent release is the most impactful one since it provides enhanced user experience and blazing-fast speed for end-users.&lt;/p&gt;

&lt;p&gt;Gatsby 4 introduces two new page rendering modes, Deferred Static Generation (DSG) and Server-Side Rendering (SSR), that cut down long build time and allow developers to choose how content is generated. The release also includes support for Parallel Query Processing, which introduces a multithreaded approach and provides a 40% reduction in build times for some sites.&lt;/p&gt;

&lt;p&gt;Having added SSR and DSG features to Gatsby Cloud, developers have to rebuild infrastructure. As a result, the team noted a significant reduction (by up to 90%) in deploy times for data-intensive websites. Moreover, Gatsby 4 includes new CMS integration APIs and support for React 18. You can read the full release article &lt;a href="https://www.gatsbyjs.com/blog/whats-new-in-gatsby-4/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-bootstrap-20-release"&gt;
  &lt;/a&gt;
  React Bootstrap 2.0 Release
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rpfRMGkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhphu0jvtizfali4z474.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpfRMGkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhphu0jvtizfali4z474.png" alt="react bootstrap 2.0 release" width="158" height="150"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/react-bootstrap/react-bootstrap"&gt;React-Bootstrap&lt;/a&gt; is one of the oldest React libraries that has evolved alongside React. Each component was built from scratch in pure React, so the library can be used instead of Bootstrap JavaScript. The second major release includes full compatibility with Bootstrap 5.1 and goes under the MIT license.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#announcing-typescript-45-beta"&gt;
  &lt;/a&gt;
  Announcing TypeScript 4.5 Beta
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oq-SeaoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/py2332fu3bg6kmthvvpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oq-SeaoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/py2332fu3bg6kmthvvpi.png" alt="announcing typescript" width="512" height="154"&gt;&lt;/a&gt;&lt;br&gt;
Microsoft &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta/"&gt;announced TypeScript 4.5 Beta&lt;/a&gt;, which comes with ECMAScript module support in Node.js, new file extensions, and a new utility type called Awaited type that was designed to help with modeling existing APIs, including JavaScript built-ins.&lt;/p&gt;

&lt;p&gt;Besides, TypeScript 4.5 can narrow values that have template string types as well as recognize template string types as discriminants. Also, to ensure that TypeScript and JavaScript support works well out of the box, TypeScript provides a series of declaration files that represent the available APIs in the JavaScript language and the standard browser DOM APIs. Other updates include CommoJS interop, tail-recursion elimination on conditional types, disabling import elision, import assertion, and much more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-tips-and-articles"&gt;
  &lt;/a&gt;
  Useful Tips and Articles
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-from-beginners-to-advance"&gt;
  &lt;/a&gt;
  Node.js from Beginners to Advance
&lt;/h3&gt;

&lt;p&gt;A great &lt;a href="https://dev.to/aviyel/node-js-from-beginners-to-advance-31id"&gt;post&lt;/a&gt; for those who work with Node.js. The author explains which projects Node.js is most suitable for and shows how to create a simple demo app along with your own server for your project step-by-step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-a-grid-widget-in-javascript"&gt;
  &lt;/a&gt;
  How to Create a Grid Widget in JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KV3wHLEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bni840c5pol5cplxondn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KV3wHLEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bni840c5pol5cplxondn.png" alt="javascript grid" width="880" height="660"&gt;&lt;/a&gt;&lt;br&gt;
DHTMLX Grid can be used to create a data grid with a comprehensive feature set with minimum time and effort. From this &lt;a href="https://dhtmlx.com/blog/how-to-create-grid-in-javascript/"&gt;article&lt;/a&gt;, you’ll know how to build a JavaScript data grid, improve its functionality by adding data editing, filtering, sorting, and customize its appearance according to your project requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-for-javascript-programming-styles"&gt;
  &lt;/a&gt;
  Best Practices for JavaScript Programming Styles
&lt;/h3&gt;

&lt;p&gt;There are certain standards developers should follow when working with JavaScript, especially when they work as a team. Thus, for instance, your code should be not only syntactically correct but also comply with programming styles. From this &lt;a href="https://www.ma-no.org/en/programming/javascript/javascript-programming-styles-best-practices"&gt;article&lt;/a&gt;, you’ll know what exactly programming styles are, why they are so important, and how to choose the most suitable for your team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-modern-website-in-2021"&gt;
  &lt;/a&gt;
  How to build a modern website in 2021
&lt;/h3&gt;

&lt;p&gt;Kent C. Dodds is a highly-experienced JavaScript engineer who rebuilt his blogfolio website with React and decided to share his experience. In the &lt;a href="https://kentcdodds.com/blog/how-i-built-a-modern-website-in-2021"&gt;article&lt;/a&gt;, he overviewed the technologies and libraries he chose and showed how they were used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-one-thing-in-javascript-youve-stopped-doing-as-youve-become-more-experienced"&gt;
  &lt;/a&gt;
  What’s one thing in JavaScript you’ve stopped doing as you’ve become more experienced?
&lt;/h3&gt;

&lt;p&gt;On &lt;a href="https://twitter.com/jamesqquick/status/1448060114053763076"&gt;Twitter&lt;/a&gt;, you can share your experience of programming in JavaScript and discuss what you’ve given up with time.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>Resources to practice web development</title>
      <author>Karthikeyan</author>
      <pubDate>Mon, 08 Nov 2021 07:36:20 +0000</pubDate>
      <link>https://dev.to/imkarthikeyan/resources-to-practice-web-development-ko</link>
      <guid>https://dev.to/imkarthikeyan/resources-to-practice-web-development-ko</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Excellence is not an art. It is the habit of practice — Aristotle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Best way to be good at any piece of tech is to practice it. In order to practice the tech , you need challenges , ideas for side projects. In this blog post , I have compiled a list of sites which provides more challenges and ideas for us to practice web development. &lt;/p&gt;

&lt;p&gt;Doing more side projects is one way of avoiding tutorial hell. &lt;/p&gt;

&lt;p&gt;Let's dive in. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2GjgvS5vA6y08/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2GjgvS5vA6y08/giphy.gif" alt="https://media.giphy.com/media/2GjgvS5vA6y08/giphy.gif" width="500" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#front-end-mentor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.frontendmentor.io/challenges"&gt;Front end mentor&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dOMG9y45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636290954859/vlT0ZI3aL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dOMG9y45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636290954859/vlT0ZI3aL.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Front end mentor has set of challenges to level up your HTML, CSS and Javascript skills . It is one of the best resource which provides design assets and project ideas to build. &lt;/p&gt;

&lt;p&gt;Once you are done with project , you can submit and get feedback for your project, also you can review other developer's work. &lt;/p&gt;

&lt;p&gt;You can also join front-end mentor's  &lt;a href="https://www.frontendmentor.io/slack"&gt;slack&lt;/a&gt;  community to brainstorm and chat with other developers &lt;/p&gt;

&lt;p&gt;Challenges can be filtered based on difficulty level and also based on HTML,CSS, JS and API. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From Front end mentor&lt;/p&gt;

&lt;p&gt;Solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs. Join 247,155 developers building projects, reviewing code, and helping each other get better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#freecodecamp"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/"&gt;Freecodecamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5Q-QbkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636291942935/VUm1tx936.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5Q-QbkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636291942935/VUm1tx936.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Freecodecamp is one of the best web dev resource which has 100's of tutorials and tons of challenges to complete. Once completed , you can test your skills by completing the challenges and once done you will be awarded certification. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codewell"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codewell.cc/"&gt;Codewell&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGQftL-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636292509149/aj_IKMhhgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGQftL-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636292509149/aj_IKMhhgb.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codewell offers real world Figma templates that you can use to improve and level up your HTML, CSS, and Javascript skills. You can even share your solutions and receive feedback on either the website or on the growing Slack community&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codementorio"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codementor.io/projects"&gt;Codementor.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FwLqQEBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636295097092/TQcfvodxh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FwLqQEBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636295097092/TQcfvodxh.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another useful resource which provides you with challenges where you can web development, mobile app development, web scraping and also your programming skills. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By Code mentor &lt;/p&gt;

&lt;p&gt;Improve your programming skills by working on real-world projects. Join our free community to discuss projects, review code, and learn from peers and mentors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#daily-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.dailyui.co/"&gt;Daily UI&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slZrnbph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636295134793/7CxC45BbC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slZrnbph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636295134793/7CxC45BbC.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you sign up to daily ui's newsletter, challenges starts and you will get design challenges  each day. once done you can post them in dribble or behance , so that other &lt;br&gt;
designers can give feedback for your designs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By Daily UI &lt;br&gt;
Daily UI is a series of daily &lt;strong&gt;Design ChallengesInspiration&lt;/strong&gt; and &lt;strong&gt;Surprise Rewards!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#devchallengesio"&gt;
  &lt;/a&gt;
  &lt;a href="https://devchallenges.io/"&gt;Devchallenges.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97qnrCn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636295155373/QnQGyqAQS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97qnrCn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636295155373/QnQGyqAQS.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful resource to practice front-end , back-end and full-stack knowledge by building web  applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-battle"&gt;
  &lt;/a&gt;
  &lt;a href="https://cssbattle.dev/"&gt;CSS Battle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtyN5d8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636295582311/C6OAHRP_x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtyN5d8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636295582311/C6OAHRP_x.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the fun resource where you can use your CSS skills to battle with other fellow developers. &lt;/p&gt;

&lt;p&gt;The battles on there aren't necessarily going to tell you how to create web layouts, but they will definitely help you tackle some of the intermediate CSS properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codepen-challenges"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/challenges"&gt;Codepen Challenges&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCvGvHGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636296180057/yYQqeHuwE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCvGvHGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636296180057/yYQqeHuwE.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each week, you’ll get a new prompt surrounding a monthly theme to work on. The best Pens get picked and featured on the homepage!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codier"&gt;
  &lt;/a&gt;
  &lt;a href="https://codier.io/"&gt;Codier&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsNpLUYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636296199417/ZT2LnQFig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsNpLUYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636296199417/ZT2LnQFig.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codier.io lets you create solutions to their challenge right in the browser and compare them with the community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acefrontend"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.acefrontend.com/"&gt;AceFrontEnd&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3v5JI5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636296219474/wieokoYxH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3v5JI5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636296219474/wieokoYxH.png" alt="image.png" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ace Front End has complete and &lt;strong&gt;practical&lt;/strong&gt; coding challenges, with a detailed walk through of a perfect interview solution&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;That's pretty much it. Thank you for taking the time to read the blog post. If you found the post useful , add ❤️ to it and let me know if I have missed something in the comments section. Feedback on the blog are most welcome.&lt;/p&gt;

&lt;p&gt;Let's connect on twitter : (&lt;strong&gt;&lt;a href="https://twitter.com/karthik_coder"&gt;https://twitter.com/karthik_coder&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/eujb1tWaj3ZxS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eujb1tWaj3ZxS/giphy.gif" alt="https://media.giphy.com/media/eujb1tWaj3ZxS/giphy.gif" width="500" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>resources</category>
    </item>
  </channel>
</rss>
