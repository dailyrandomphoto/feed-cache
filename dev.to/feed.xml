<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I Hacked Cookie Clicker Game with Inspect Element</title>
      <author>Muhammad Furqan Ul Haq</author>
      <pubDate>Tue, 02 Feb 2021 17:58:13 +0000</pubDate>
      <link>https://dev.to/trulyfurqan/how-i-hacked-cookie-clicker-game-with-inspect-element-cd8</link>
      <guid>https://dev.to/trulyfurqan/how-i-hacked-cookie-clicker-game-with-inspect-element-cd8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-i-hacked-cookie-clicker-game-with-inspect-element" class="anchor"&gt;
  &lt;/a&gt;
  How I Hacked Cookie Clicker Game with Inspect Element
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://orteil.dashnet.org/cookieclicker/"&gt;Cookie Clicker&lt;/a&gt; is a very popular browser-based game. It revolves around producing cookies for the world. This game gets more interesting over time which keeps the player engaged.&lt;/p&gt;

&lt;p&gt;Basically, there are a few ways to get cookies. These cookies can then be used to create new buildings or purchase upgrades. At first, I’m going to mention a few genuine ways to earn cookies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By clicking the big “Cookie” shown on the user interface.&lt;/li&gt;
&lt;li&gt;By creating new buildings. There are different types of buildings and each type can only produce a specified number of cookies per second. Initially, all buildings are locked, but they will get unlocked over time as the game progresses.&lt;/li&gt;
&lt;li&gt;By enhancing the efficiency of your cookie store through upgrades.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, here comes the actual hacking stuff you’re waiting for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, this is a browser-based game. Meaning that it is developed using HTML5, CSS3, and JavaScript. All of these are client-side languages that can be modified through programs like &lt;a href="https://developers.google.com/web/tools/chrome-devtools"&gt;Chrome DevTools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s &lt;a href="https://orteil.dashnet.org/cookieclicker/"&gt;open this game&lt;/a&gt; in Google Chrome.&lt;/p&gt;

&lt;p&gt;Now to open Chrome DevTools, right-click anywhere on the game and select “Inspect” from the context menu. For now, we will only be focusing on its functionality that is written in JavaScript. So, open the “Console” tab.&lt;/p&gt;

&lt;p&gt;Another way is to press &lt;strong&gt;Ctrl+Shift+J&lt;/strong&gt; on Windows or &lt;strong&gt;⌘+⌥Option+J&lt;/strong&gt; on Mac.&lt;/p&gt;

&lt;p&gt;You’ve to execute the below-mentioned codes here.&lt;/p&gt;

&lt;p&gt;It’s time to hack different features of this Cookie Clicker game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hack-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Hack Cookies
&lt;/h2&gt;

&lt;p&gt;As everything in this game depends on cookies, so I hacked them!&lt;/p&gt;

&lt;p&gt;Basically, after analyzing its source code, I found that the functionality of this game is written inside a file called “main.js”.&lt;/p&gt;

&lt;p&gt;This file initializes an object &lt;code&gt;Game&lt;/code&gt; through which we can easily access different features of Cookie Clicker. For example, we can modify the number of cookies we have using the &lt;code&gt;Game.cookies&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Let’s do that now!&lt;/p&gt;

&lt;p&gt;Simply copy the below code and paste it inside the “Console” tab of Chrome DevTools. Press “Enter” to execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;57000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once executed, you will get 57000 cookies absolutely FREE. You can add any number here.&lt;/p&gt;

&lt;p&gt;For example, the below code will give you “Infinity Cookies”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#keep-getting-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Keep Getting Cookies
&lt;/h2&gt;

&lt;p&gt;This game also has the functionality of earning cookies per second. &lt;code&gt;Game.cookiesPs&lt;/code&gt; property will give us a specified number of cookies for one second.&lt;/p&gt;

&lt;p&gt;So, why not wrap it inside a &lt;code&gt;setInterval&lt;/code&gt; of one second to continuously get more and more cookies?&lt;/p&gt;

&lt;p&gt;Here’s the code snippet to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookiesPs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code will add 50 cookies to your account every second.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unlock-all-upgrades-and-purchase-them" class="anchor"&gt;
  &lt;/a&gt;
  Unlock All Upgrades and Purchase Them
&lt;/h2&gt;

&lt;p&gt;Finally, the developers of Cookie Clicker have also provided a cheat to get all upgrades for free.&lt;/p&gt;

&lt;p&gt;Basically, the below method will give you all upgrades as well as unlocks all types of buildings. Additionally, you will get 1.000 nonillion cookies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RuinTheFun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Now you might be wondering can we hack other browser-based games too?&lt;/p&gt;

&lt;p&gt;And the answer is "Yes, definitely!"&lt;/p&gt;

&lt;p&gt;You can hack any game no matter whether it is browser-based, Android, or even PC.&lt;/p&gt;

&lt;p&gt;I would like to mention that I learned game hacking from &lt;a href="https://guidedhacking.com/"&gt;guidedhacking.com&lt;/a&gt;. It is the best community forum that helps us understand all the concepts of game hacking in a step-by-step manner.&lt;/p&gt;

&lt;p&gt;Spend some time there!&lt;/p&gt;

&lt;p&gt;You'll find game hacking tutorials and guides right from their main menu. If you find something difficult then you can always ask questions from fellow hackers.&lt;/p&gt;

&lt;p&gt;At last, I would say that game hacking is not very difficult. It just depends on how much time you can dedicate to learn it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>How to Create a React App with a Node Backend: The Complete Guide</title>
      <author>Reed Barger</author>
      <pubDate>Tue, 02 Feb 2021 17:14:33 +0000</pubDate>
      <link>https://dev.to/reedbarger/how-to-create-a-react-app-with-a-node-backend-the-complete-guide-1ple</link>
      <guid>https://dev.to/reedbarger/how-to-create-a-react-app-with-a-node-backend-the-complete-guide-1ple</guid>
      <description>&lt;p&gt;A React frontend connected to a Node backend is a rock-solid combination for any application you want to build. &lt;/p&gt;

&lt;p&gt;This guide is designed to help you create full-stack projects with React as easy as possible.&lt;/p&gt;

&lt;p&gt;Let's see how to set up an entire project using React and Node from scratch and deploy it to the web.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Want to build and deploy React and Node apps of your own? &lt;a href="https://bit.ly/12-react-projects"&gt;Check out my course series&lt;/a&gt; that shows you how to build your own full-stack React projects, like this one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tools-you-will-need" class="anchor"&gt;
  &lt;/a&gt;
  Tools You Will Need
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Make sure Node and NPM installed on your computer. You can download both at &lt;a href="https://nodejs.org"&gt;nodejs.org&lt;/a&gt; (NPM is included in your Node installation)&lt;/li&gt;
&lt;li&gt;Use a code editor of your choice. I am using and would personally recommend using VSCode. You can download VSCode at &lt;a href="https://code.visualstudio.com"&gt;code.visualstudio.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make sure you have Git installed on your computer. This is necessary for deploying our application with Heroku. You can get it at &lt;a href="https://git-scm.com"&gt;git-scm.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An account at &lt;a href="https://heroku.com"&gt;heroku.com&lt;/a&gt;. We will use Heroku to publish our app to the web entirely free.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-your-node-express-backend" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Create your Node (Express) backend
&lt;/h2&gt;

&lt;p&gt;First create a folder for your project, called &lt;code&gt;react-node-app&lt;/code&gt; (for example). &lt;/p&gt;

&lt;p&gt;Then, drag that folder into your code editor.&lt;/p&gt;

&lt;p&gt;To create our Node project, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will create a package.json file which will allow us to keep track of all our app scripts and manage any dependencies our Node app needs.&lt;/p&gt;

&lt;p&gt;Our server code will live in a folder of the same name: &lt;code&gt;server&lt;/code&gt;. Let's create that folder.&lt;/p&gt;

&lt;p&gt;In it, we'll place a single file, out of which we'll run our server: &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We'll use Express to create simple web server for us which runs on port 3001 if no port is provided as an environment variable (Heroku will set this value when we deploy our app).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server/index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then in our terminal, we will install Express as a dependency to use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i express
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then create a script in package.json that will start our web server when we run it with &lt;code&gt;npm start&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;server/package.json&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server/index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we can run our app using this script by running npm start in our terminal and we should see that it is running on port 3001:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; node server/index.js

Server listening on 3001
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ted6sJoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zodbmi8hzrgw7xyowe99.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ted6sJoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zodbmi8hzrgw7xyowe99.gif" alt="Clip 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-an-api-endpoint" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Create an API Endpoint
&lt;/h2&gt;

&lt;p&gt;We want to use our Node and Express server as an API, so that it can give our React app data, change that data or do some other operation only a server can do.&lt;/p&gt;

&lt;p&gt;In our case, we will simple send our React app a message that says "Hello from server!" in a JSON object.&lt;/p&gt;

&lt;p&gt;The code below creates an endpoint for the route /api.&lt;/p&gt;

&lt;p&gt;If our React app makes a GET request to that route, we respond (using &lt;code&gt;res&lt;/code&gt;, which stands for response) with our JSON data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server/index.js&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from server!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Make sure to place this above the &lt;code&gt;app.listen&lt;/code&gt; function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since we've made changes to our Node code, we need to restart our server.&lt;/p&gt;

&lt;p&gt;To do that, end your start script in the terminal by pressing Command/Ctrl + C. Then restart it by running &lt;code&gt;npm start&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;And to test this, we can simply visit &lt;code&gt;http://localhost:3001/api&lt;/code&gt; in our browser and see our message:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjp5HItc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dxj3navm5ca2txazctir.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjp5HItc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dxj3navm5ca2txazctir.gif" alt="Clip 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-create-your-react-frontend" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Create your React frontend
&lt;/h2&gt;

&lt;p&gt;After creating our backend, let's move to the frontend. &lt;/p&gt;

&lt;p&gt;Open another terminal tab and use create-react-app to create a new React project with the name &lt;code&gt;client&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app client
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that, we will have a React app with all of its dependencies installed.&lt;/p&gt;

&lt;p&gt;The only change we have to make is to add a property called &lt;code&gt;proxy&lt;/code&gt; to our package.json file. &lt;/p&gt;

&lt;p&gt;This will allow us to make requests to our Node server without having to provide the origin it is running on (&lt;a href="http://localhost:3001"&gt;http://localhost:3001&lt;/a&gt;) every time we make a network request to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;client/package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"proxy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:3001"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we can start up our React app by running it's start script, which is the same as our Node server. First make sure to &lt;code&gt;cd&lt;/code&gt; into the newly-created client folder.&lt;/p&gt;

&lt;p&gt;After that, will start up on &lt;code&gt;localhost:3000&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client
npm start

Compiled successfully!

You can now view client &lt;span class="k"&gt;in &lt;/span&gt;the browser.

Local:            http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Korx5iE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/klciz2is204lxxikjlid.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Korx5iE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/klciz2is204lxxikjlid.gif" alt="Clip 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-make-http-requests-from-react-to-node" class="anchor"&gt;
  &lt;/a&gt;
  Step 4: Make HTTP Requests from React to Node
&lt;/h2&gt;

&lt;p&gt;Now that we have a working React app, we want to use it to interact with our API.&lt;/p&gt;

&lt;p&gt;Let's see how to fetch data from the /api endpoint that we created earlier.&lt;/p&gt;

&lt;p&gt;To do so, we can head to the &lt;code&gt;App.js&lt;/code&gt; component in our &lt;code&gt;src&lt;/code&gt; folder and make an HTTP request using useEffect.&lt;/p&gt;

&lt;p&gt;We will make a simple GET request using the Fetch API to our and then have our data returned as JSON.&lt;/p&gt;

&lt;p&gt;Once we have the data returned to us, we will get the message property (to grab our greeting that we sent from the server) and then put it in a state variable called &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will allow us to display that message in our page if we have it. We are using a conditional in our JSX to say that if our data is not there yet, show the text "Loading...".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// client/src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-logo"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-0GWOba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n1h1b5w7yjdc04bg4siv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-0GWOba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n1h1b5w7yjdc04bg4siv.gif" alt="Clip 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-deploy-your-app-to-the-web-with-heroku" class="anchor"&gt;
  &lt;/a&gt;
  Step 5: Deploy your app to the web with Heroku
&lt;/h2&gt;

&lt;p&gt;Finally, let's deploy our application to the web. &lt;/p&gt;

&lt;p&gt;First, within our client folder, make sure to remove the Git repo that is automatically initialized by create-react-app. &lt;/p&gt;

&lt;p&gt;This is essential to deploy our app, because we are going to set up a Git repo in the root folder of our project (&lt;code&gt;react-node-app&lt;/code&gt;), not in &lt;code&gt;client&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; .git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we deploy, both our Node backend and React frontend are going to be served on the same domain (i.e. mycoolapp.herokuapp.com).&lt;/p&gt;

&lt;p&gt;We see how our requests are being handled by our Node API, so we need to write some code that will display our React app when it is requested by our user (for example, when we go to the home page of our app).&lt;/p&gt;

&lt;p&gt;We can do this back in &lt;code&gt;server/index.js&lt;/code&gt; by adding the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;// Have Node serve the files for our built React app&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client/build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="c1"&gt;// Handle GET requests to /api route&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from server!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// All other GET requests not handled before will return our React app&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client/build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code will first allow Node to access our built React project using the &lt;code&gt;express.static&lt;/code&gt; function for static files.&lt;/p&gt;

&lt;p&gt;And if a GET request comes in that is not handled by our /api route, our server will send back to our React app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This code allows our React and Node app to be deployed together on the same domain.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then, we can tell our Node App how to do that by adding a &lt;code&gt;build&lt;/code&gt; script to our server package.json file that builds our React app for production:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;server/package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd client &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; npm run build"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would also recommend providing a field called "engines", where you want to specific the Node version you are using to build your project. This will be used for deployment.&lt;/p&gt;

&lt;p&gt;You can get your Node version by running &lt;code&gt;node -v&lt;/code&gt; and you can put the result in "engines" (i.e. 14.15.4):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;server/package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"engines"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"your-node-version"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After this, we're ready to deploy using Heroku, so make sure you have an account at &lt;a href="https://heroku.com"&gt;Heroku.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you are signed in and are looking at your dashboard, you'll select New &amp;gt; Create New App and provide a unique app name.&lt;/p&gt;

&lt;p&gt;After that, you'll want to install the Heroku CLI on your computer so you can deploy your app whenever you make any changes using Git. We can install the CLI by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; heroku
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once that's installed, you will log in to Heroku through the CLI using the &lt;code&gt;heroku login&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;heroku login

Press any key to login to Heroku
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you have logged in, just need to follow the deployment instructions for our created app in the "Deploy" tab.&lt;/p&gt;

&lt;p&gt;The following four commands will initialize a new Git repo for our project, add our files to it, commit them, and add a Git remote for Heroku.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
heroku git:remote &lt;span class="nt"&gt;-a&lt;/span&gt; insert-your-app-name-here
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Deploy app to Heroku"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then the very last step is to publish our app by pushing the Heroku Git remote we just added using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Congratulations! Our full-stack React and Node app is live!&lt;/p&gt;

&lt;p&gt;When you want to make changes to your app going forward (and deploy them), you just have to use git to add your files, commit them and then push to our Heroku remote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"my commit message"&lt;/span&gt;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#want-to-build-realworld-apps-like-youtube-instagram-and-twitter-with-react-heres-how" class="anchor"&gt;
  &lt;/a&gt;
  Want to build real-world apps like YouTube, Instagram, and Twitter with React? Here's how.
&lt;/h2&gt;

&lt;p&gt;At the end of every month, I will be releasing an exclusive course, showing you exactly how to build a complete app clone with React from start to finish.&lt;/p&gt;

&lt;p&gt;Want to be notified when the next course drops? &lt;a href="https://bit.ly/12-react-projects"&gt;&lt;strong&gt;Join the waitlist here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Ideas for Web Developer Portfolio Projects that Standout</title>
      <author>Renaissance Engineer</author>
      <pubDate>Tue, 02 Feb 2021 15:09:24 +0000</pubDate>
      <link>https://dev.to/renaissanceengineer/5-ideas-for-web-developer-portfolio-projects-that-standout-2ka4</link>
      <guid>https://dev.to/renaissanceengineer/5-ideas-for-web-developer-portfolio-projects-that-standout-2ka4</guid>
      <description>&lt;p&gt;Calculators, Todo lists, weather apps&lt;/p&gt;

&lt;p&gt;They've all been done to death as portfolio projects&lt;/p&gt;

&lt;p&gt;Not only are they boring to make, they aren't going to help you stand out when it comes to getting a job. Even if you don't directly make any of these projects, I hope they'll give you some inspiration to create something interesting.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gMoJdjpdHWo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-sure-to-subscribe-if-you-want-to-see-more-project-ideas-and-tutorials" class="anchor"&gt;
  &lt;/a&gt;
  Be sure to subscribe if you want to see more project ideas and tutorials
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#real-time-stock-market-chart-or-game" class="anchor"&gt;
  &lt;/a&gt;
  Real Time Stock Market Chart or Game
&lt;/h2&gt;

&lt;p&gt;Using the &lt;a href="https://pusher.com/"&gt;Pusher API&lt;/a&gt; makes it easy to PUSH real time data to all users of your application. Some examples of how you could use this for projects would be something like a real time dashboard with stock market data or an online video game that requires shared data, like a chess board.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G37Nds4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubpvrqrumb5fhb8fro14.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G37Nds4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubpvrqrumb5fhb8fro14.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congress-net-worth-tracker" class="anchor"&gt;
  &lt;/a&gt;
  Congress Net Worth Tracker
&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href="https://www.opensecrets.org"&gt;Open Secrets&lt;/a&gt; database or API to get all kinds of data on the members of the US congress.&lt;/p&gt;

&lt;p&gt;One example of what you could do is create a data visualization app that shows the assets and net worth of each member of congress and allow comparisons by party or number of years in congress&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQFnAksq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xzsf3odw08p183fnncxs.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQFnAksq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xzsf3odw08p183fnncxs.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automated-invitesletters-for-events" class="anchor"&gt;
  &lt;/a&gt;
  Automated Invites/Letters for Events
&lt;/h2&gt;

&lt;p&gt;Tired of forgetting to send birthday cards for family and friends? Hosting an event and want to send customized invitations without all the work? Using the &lt;a href="https://www.lob.com"&gt;Lob API&lt;/a&gt; you can use code to automate this process with a few lines of code!&lt;/p&gt;

&lt;p&gt;You could create a spreadsheet containing names, addresses, and other data. Then use an image library to make custom images for postcards with the person's name on it. You could also pre-schedule the date you want each letter or postcard sent using a small database&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VYDIc9AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/81pfyd4w0nqrqw1wqi5s.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VYDIc9AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/81pfyd4w0nqrqw1wqi5s.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reddit-user-analyzer" class="anchor"&gt;
  &lt;/a&gt;
  Reddit User Analyzer
&lt;/h2&gt;

&lt;p&gt;Want an easy way to access almost every piece of data on Reddit? The &lt;a href="https://github.com/pushshift/api"&gt;Pushshift API&lt;/a&gt; makes this very easy and is free to use. &lt;/p&gt;

&lt;p&gt;My idea for this is to create a frontend app that queries the API and displays data for the username input. You could use charts and graphs to display the data like most upvoted comments, most frequently posted subreddits, most common words used, and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qO1SPzCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f5fxr3sutuxpig06j76t.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qO1SPzCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f5fxr3sutuxpig06j76t.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#online-reputation-management-tool" class="anchor"&gt;
  &lt;/a&gt;
  Online Reputation Management Tool
&lt;/h2&gt;

&lt;p&gt;Every company is worried about what people are saying about them online, the problem is that it's impossible to manually monitor this. But by using &lt;a href="https://webhose.io"&gt;WebHose&lt;/a&gt; you can automate this process by checking for mentions of keywords using different filters such as date, site URL, and more&lt;/p&gt;

&lt;p&gt;For this project you can create a simple User Interface to allow non-technical users to input keywords that will then be periodically checked and alerts sent to the users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OAm43rsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1z5inn15o19azfdh78c9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAm43rsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1z5inn15o19azfdh78c9.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I'll be putting out more project ideas and tutorials soon so be sure to follow or subscribe to my YT channel if you are interested. If you make anything inspired by this post feel free to leave a comment to the github repo so others can check it out!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is JAMStack? Must know for every developer in 2021!</title>
      <author>Tuomo Kankaanpää</author>
      <pubDate>Tue, 02 Feb 2021 15:03:42 +0000</pubDate>
      <link>https://dev.to/tumee/what-is-jamstack-must-know-for-every-developer-in-2021-26gl</link>
      <guid>https://dev.to/tumee/what-is-jamstack-must-know-for-every-developer-in-2021-26gl</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S6Mtfsl17PQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I first heard the term &lt;em&gt;Jamstack&lt;/em&gt; at the end of last year. Since then I have studied it and gained a basic understanding of how to actually build websites using Jamstack. (I actually updated and wrote &lt;a href="https://www.tuomokankaanpaa.com"&gt;my website&lt;/a&gt; using Jamstack).&lt;/p&gt;

&lt;p&gt;In this blog post I have collected answers to the following questions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Jamstack?&lt;/li&gt;
&lt;li&gt;What are the benefits of using Jamstack? (aka why to use it)&lt;/li&gt;
&lt;li&gt;How to get started with Jamstack?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;If you prefer a video over text, I created a video of this blog posts which you can watch &lt;a href="https://www.youtube.com/watch?v=S6Mtfsl17PQ"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  What is Jamstack?
&lt;/h2&gt;

&lt;p&gt;The name Jamstack comes from Javascript, APIs and Markup. It is an architecture designed to make the web faster, more secure and easier to scale.&lt;/p&gt;

&lt;p&gt;This is done by using pre-rendering and decoupling. Frontend of a Jamstack site is pre-built and pre-rendered at build time to a highly optimized static pages. There are a bunch of &lt;a href="https://jamstack.org/generators/"&gt;popular tools&lt;/a&gt; for generating sites, like &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; and &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;, to mention few.&lt;/p&gt;

&lt;p&gt;These pages can then be delivered with a CDN and there is no need for traditional dynamic web server. This makes the sites fast, cost efficient and highly scalable.&lt;/p&gt;

&lt;p&gt;Here is a great diagram from &lt;a href="https://www.jamstack.org"&gt;jamstack.org&lt;/a&gt; comparing Jamstack sites to traditional websites:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwzzqdQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bauxjxvp1j3s1og6r62c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwzzqdQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bauxjxvp1j3s1og6r62c.png" alt="Jamstack vs traditional"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-using-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  What are the benefits of using Jamstack?
&lt;/h2&gt;

&lt;p&gt;Here is few of the benefeits that come with Jamstack sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance" class="anchor"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;In this day and age user's attention span is super short. If a web page has even a little bit of lag, you have a big chance of losing the user. With Jamstack sites this is not a problem. Since Jamstack sites are static sites hosten on CDN, they are super fast.&lt;/p&gt;

&lt;p&gt;Jamstack sites don't require the server to generate the site once a request hits the server. Because the site is pre-generated in build time, the server only has to serve the static file. So we get super good performance without massive, expensive and complex server infrastructure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;The attack surface is quite small with Jamstack sites. Since we are just serving pages and assets as pre-generated files, this allows a read-only hosting which reduces the attack surface even further.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scale" class="anchor"&gt;
  &lt;/a&gt;
  Scale
&lt;/h3&gt;

&lt;p&gt;If we are getting a huge traffic spike, we can increase our CDN volume to handle the new traffic. Even a huge traffic spikes don't slow down Jamstack sites.&lt;/p&gt;

&lt;p&gt;You also don't have to add any caching logic for popular views and assets by yourself. Jamstack provides this by default if you are hosting the site on a CDN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintainability" class="anchor"&gt;
  &lt;/a&gt;
  Maintainability
&lt;/h3&gt;

&lt;p&gt;Since Jamstack sites are hosted on a CDN, you pretty much don't have any server maintenance tasks. All the work is done in build time and after that you serve the site (the static files) from a CDN, you really don't need any servers that might require updating or other maintenance. The site is stable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#portability" class="anchor"&gt;
  &lt;/a&gt;
  Portability
&lt;/h3&gt;

&lt;p&gt;Jamstack sites are pre-generated making them easy to host. You can use any kind of static hosting solution to host your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-experience" class="anchor"&gt;
  &lt;/a&gt;
  Developer experience
&lt;/h3&gt;

&lt;p&gt;Developer experience with Jamstack is top noch. With Jamstack it is very fast and pleasant to work with and you can use wide variety of popular and modern tools and frameworks. This also guarantees that it shouldn't be too hard to find people that want to work with Jamstack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  How to get started with Jamstack?
&lt;/h2&gt;

&lt;p&gt;I recommend using a site generator to get started with your first Jamstack site. I personally have used &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; and &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;. Next.js offers a bit more functionality compared to Gatsby. With my limited experience with Next.js and Gatsby, I prefer Next.js. That is what I also use with my own &lt;a href="https://www.tuomokankaanpaa.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you are familiar with Javascript and React, I recommend going with Next.js. They have a &lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;great tutorial&lt;/a&gt; up on their site where you actually build a blog.&lt;/p&gt;

&lt;p&gt;Next.js also integrates nicely with &lt;a href="https://www.vercel.com"&gt;Vercel&lt;/a&gt; so deploying your application is super effortless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Jamstack is a great and modern way for building websites. I will be using it for sure in my future projects.&lt;/p&gt;

&lt;p&gt;If you want to get started with Jamstack, there is no better way to learn a new technology than to use it. So go ahead and create something with it. I recommend the &lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;Next.js blog tutorial&lt;/a&gt; for starters.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>I Made $4800 in January 2021</title>
      <author>AdemHodzic</author>
      <pubDate>Tue, 02 Feb 2021 13:39:40 +0000</pubDate>
      <link>https://dev.to/ademhodzic/i-made-4800-in-january-2021-2180</link>
      <guid>https://dev.to/ademhodzic/i-made-4800-in-january-2021-2180</guid>
      <description>&lt;p&gt;It's time for the first update in 2021.&lt;/p&gt;

&lt;p&gt;If you're not familiar with these posts, I'm documenting m journey from $5/hour Fiverr code monkey to $100/hour consultant.&lt;/p&gt;

&lt;p&gt;You can check out my previous updates on my profile or &lt;a href="https://kodeblok.com/categories/monthly-update/"&gt;visit the archive on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although January was a wild month in the world, I had quite a chill one.&lt;/p&gt;

&lt;p&gt;I've restructured the deal with Client #1. &lt;/p&gt;

&lt;p&gt;Some pretty interesting projects came my way.&lt;/p&gt;

&lt;p&gt;And I started making my own product.&lt;/p&gt;

&lt;p&gt;Let's get started with the update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR I made $4800 for 12 days of work on one project. I have two other projects in the pipeline.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects" class="anchor"&gt;
  &lt;/a&gt;
  Projects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#client-1" class="anchor"&gt;
  &lt;/a&gt;
  Client #1
&lt;/h3&gt;

&lt;p&gt;I've already mentioned that Client #1 got funding. Now that they have money, we decided to restructure our deal a bit. &lt;/p&gt;

&lt;p&gt;The First thing is that we switched from charging by the hour to charging by the day. Client #1 currently occupies three days in the week.&lt;/p&gt;

&lt;p&gt;Next up we switched from $35/hour to $400/day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leads" class="anchor"&gt;
  &lt;/a&gt;
  Leads
&lt;/h2&gt;

&lt;p&gt;Two people reached out this month.&lt;/p&gt;

&lt;p&gt;Coincidentally, they both work in finance and want to create their own SaaS product to escape the grind.&lt;/p&gt;

&lt;p&gt;I've had a total of three meetings, two of which were introductions, and one deep-dive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lead-1" class="anchor"&gt;
  &lt;/a&gt;
  Lead #1
&lt;/h3&gt;

&lt;p&gt;Lead #1 wants to make a sales team performance tracker that integrates seamlessly with Stripe. The budget is around $5-$10k.&lt;/p&gt;

&lt;p&gt;I had an introduction meeting with him where I asked if we can get in touch in a week after he creates some mockups so I get a better picture of his vision.&lt;/p&gt;

&lt;p&gt;I've sent one follow-up email to which I haven't got a reply. I'll send another one in the following days.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lead-2" class="anchor"&gt;
  &lt;/a&gt;
  Lead #2
&lt;/h3&gt;

&lt;p&gt;Lead #2 wants to make a platform for discovering new food products. The budget is up to $5k.&lt;/p&gt;

&lt;p&gt;I had two meetings with him.&lt;/p&gt;

&lt;p&gt;It's the same situation as with Lead #1 where I asked for a mockup before I give out a quote.&lt;/p&gt;

&lt;p&gt;I received a mockup this week, had a deep-dive conversation to find more about the project, and I've written him a proposal in Bonsai.&lt;/p&gt;

&lt;p&gt;Bonsai notifies me when someone sees proposals and I got an email that he saw it. I'll follow up with him in a couple of days.&lt;/p&gt;

&lt;p&gt;I have no preference on which project I'd rather work on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-product" class="anchor"&gt;
  &lt;/a&gt;
  My Product
&lt;/h2&gt;

&lt;p&gt;After talking with these two leads, I've realized that I can win the project even if they don't accept the first proposal.&lt;/p&gt;

&lt;p&gt;If they reject the first one, I'll propose another one which will be 10-15 hours shorter but I'll ask them to buy a license for a SaaS starter.&lt;/p&gt;

&lt;p&gt;But there's a problem with that plan. There is no a good SaaS starter kit for Django and Vue.&lt;/p&gt;

&lt;p&gt;My current favorite stack for bootstrapped products like these is Django + Vue.&lt;/p&gt;

&lt;p&gt;I've tried to find a SaaS starter kit for this stack but couldn't find a good one so I've started writing my own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I introduce you to &lt;a href="https://getdjangosaas.com/"&gt;Get Django SaaS&lt;/a&gt;. An opinionated SaaS Starter kit for Django and Vue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far I've:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put up an email capture website&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kodeblok.com/posts/display-ads-saas/"&gt;Ran ads for the product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Setup backend and frontend base projects&lt;/li&gt;
&lt;li&gt;Bootstrapped base layout for frontend&lt;/li&gt;
&lt;li&gt;Written email/password authentication system on the backend&lt;/li&gt;
&lt;li&gt;Created login and register page &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some things I still need to do before I can call this an MVP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wire frontend auth with backend&lt;/li&gt;
&lt;li&gt;Write a system for CRUD scaffolding&lt;/li&gt;
&lt;li&gt;Add email integration with MailChimp and EmailOctopus&lt;/li&gt;
&lt;li&gt;Integrate billing with Stripe and Paddle&lt;/li&gt;
&lt;li&gt;Design and code common components a customer can choose from to customize the base look&lt;/li&gt;
&lt;li&gt;Add teams and email invite system&lt;/li&gt;
&lt;li&gt;Documentation, documentation, and more documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After I implement all this I'll see whether it will fly and if there are freelancers that are struggling with the same problem.&lt;/p&gt;

&lt;p&gt;You must be asking yourself: "&lt;em&gt;Hey Adem, it's awesome that you're building your own product but how did you validate this idea?&lt;/em&gt;".&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There's a ton of SaaS starter kits out there so there's a market for it.&lt;/li&gt;
&lt;li&gt;I'm scratching my own niche. One famous SaaS starter kit is Laravel Spark and its creator, Taylor Otwell, said that he'd be fine if no one was buying it since it's helpful for him. I'm going with the same approach. Even if I don't get any customers, I'll still have an awesome starter kit for future projects.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#expenses" class="anchor"&gt;
  &lt;/a&gt;
  Expenses
&lt;/h2&gt;

&lt;p&gt;Moving on I'll include my expenses for the month.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expenses&lt;/th&gt;
&lt;th&gt;Amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Transaction Fees&lt;/td&gt;
&lt;td&gt;$259.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Taxes&lt;/td&gt;
&lt;td&gt;$495&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Retirement Fund&lt;/td&gt;
&lt;td&gt;$154.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ethereum&lt;/td&gt;
&lt;td&gt;$320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HelloBonsai&lt;/td&gt;
&lt;td&gt;$19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Namecheap&lt;/td&gt;
&lt;td&gt;$8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Github Sponsorship&lt;/td&gt;
&lt;td&gt;$5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Patreon&lt;/td&gt;
&lt;td&gt;$13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;$1274&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#detailed-breakdown" class="anchor"&gt;
  &lt;/a&gt;
  Detailed breakdown
&lt;/h3&gt;

&lt;p&gt;Client #1 uses &lt;a href="https://www.letsdeel.com/"&gt;Deel&lt;/a&gt; to process payroll. I get paid via SWIFT so the transaction fees are SWIFT fees + my local bank fees.&lt;/p&gt;

&lt;p&gt;Lucky for me, in Bosnia taxes are pretty low and they come at a bit over 10%. &lt;/p&gt;

&lt;p&gt;Each month I have to contribute to the retirement fund a small amount of $154 to be eligible for a pension when I get old.&lt;/p&gt;

&lt;p&gt;I buy ETH each month to get the advantage of dollar-cost averaging and compounding effect. This is not an opinion on what should you invest in. I'm breaking down my business expenses because my crypto investments my other pension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hellobonsai.com/freelance-invoice?fp_ref=adem41"&gt;Hello Bonsai&lt;/a&gt; (affiliate link) subscription costs $19. Worth every penny.&lt;/p&gt;

&lt;p&gt;I bought &lt;a href="https://getdjangosaas.com"&gt;getdjangosaas.com&lt;/a&gt; from Namecheap for $8.&lt;/p&gt;

&lt;p&gt;I spend $18 supporting some creators and open-source contributors for the hard work they're doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;January 2021 was one of the better months I had.&lt;/p&gt;

&lt;p&gt;I've made $4800 gross. If we factor in $1274 of expenses, my profit is &lt;strong&gt;$3526&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you want to read these updates as soon as I write them, you can &lt;a href="https://adems-freelance-journey.carrd.co/"&gt;sign up for my newsletter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Want to read previous updates? Visit &lt;a href="https://kodeblok.com/categories/monthly-update/"&gt;Archive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;br&gt;
&lt;a href="https://ademhodzic.com"&gt;Adem Hodzic&lt;/a&gt;&lt;/p&gt;

</description>
      <category>freelancing</category>
      <category>contracting</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 Biggest Remote Tech Jobs Aggregators Comparison</title>
      <author>Natalie Nelson</author>
      <pubDate>Tue, 02 Feb 2021 13:35:50 +0000</pubDate>
      <link>https://dev.to/nataliefdv/10-biggest-remote-tech-jobs-aggregators-comparison-389l</link>
      <guid>https://dev.to/nataliefdv/10-biggest-remote-tech-jobs-aggregators-comparison-389l</guid>
      <description>&lt;p&gt;There is a myriad of articles about where to find remote jobs, particularly in tech. Some of them are outdated and most of them don't provide detailed reviews. So that's why I decided to do my own research. I did a basic search by "React" skill (where possible) and expected to see mostly "Frontend Developer" vacancies. &lt;/p&gt;

&lt;p&gt;In order to make it easier and more clear I developed my own points based system. It is based on the parameters that I find most useful for my job search. Here they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number of remote vacancies: 0 (min) - 10 (max);&lt;/li&gt;
&lt;li&gt;Recency of vacancies: 0 (min) - 10 (max);&lt;/li&gt;
&lt;li&gt;Relevance: 0 (min) - 10 (max);&lt;/li&gt;
&lt;li&gt;Search by Skills: 0 - no; 3 - yes;&lt;/li&gt;
&lt;li&gt;Search by Titles / Categories: 0 - no 3 - yes;&lt;/li&gt;
&lt;li&gt;Location filters : 0 none; 2 - US-only filter; 4 - filter by other locations;&lt;/li&gt;
&lt;li&gt;Other filters: 0 (min) - 3 (max)&lt;/li&gt;
&lt;li&gt;E-mail subscription: 0 - none, 2 - yes, 4 - personalized:&lt;/li&gt;
&lt;li&gt;Extra features: 0 (min) - 5 (max).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here is the final rating:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rJ_M7yF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bPCXkTZ/image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rJ_M7yF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bPCXkTZ/image.png" alt="My personal rating"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bergamot" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://bergamot.io/"&gt;Bergamot&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onbC4hFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/dGm5fRk/screely-1612263446462.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onbC4hFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/dGm5fRk/screely-1612263446462.png" alt="Bergamot screen"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Number of remote vacancies&lt;/strong&gt;: 10 points&lt;br&gt;
&lt;em&gt;3,300+ remote positions found.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies&lt;/strong&gt;: 10 points &lt;br&gt;
&lt;em&gt;First hundred vacancies are published within a recent month.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results)&lt;/strong&gt;: 10 points&lt;br&gt;
&lt;em&gt;All positions are relevant.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;It's possible to choose your Citizenship and the system will automatically filter out all non-relevant vacancies.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;Personalized subscription (filtered by skills, titles) is available.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 3 points &lt;br&gt;
&lt;em&gt;There is an AI-search option available: you can search by inserting your Linkedin profile.&lt;/em&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-48" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 48
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search by multi technologies, titles, citizenship. Smart location filter: Bergamot identifies geo-restrictions for applicants — and is the only aggregator that does it.&lt;/li&gt;
&lt;li&gt;Seems to be the largest remote tech jobs aggregator for now (24k+ jobs).&lt;/li&gt;
&lt;li&gt;Matches vacancies based on your Linkedin profile — you just paste the link.&lt;/li&gt;
&lt;li&gt;Flexible subscription: personal job posts selection in your inbox (you can also subscribe and receive job posts based on your Linkedin profile).&lt;/li&gt;
&lt;li&gt;Only real remote positions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outdated vacancies after the first 10 pages.&lt;/li&gt;
&lt;li&gt;Just appeared on the market.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#workline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://workaline.com/"&gt;Workline&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1-WN-nR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bW189Lf/screely-1612263201190.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1-WN-nR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bW189Lf/screely-1612263201190.png" alt="Workline screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 9 points&lt;br&gt;
&lt;em&gt;1,000+ remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt;  10 points&lt;br&gt;
&lt;em&gt;Over hundred vacancies published during last month.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 7 points &lt;br&gt;
&lt;em&gt;Lots of non-relevant vacancies like Ruby Developer and/or Mobile Developer.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points &lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 0 points &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;em&gt;It's possible to exclude keywords. This is the only website with such an option.&lt;/em&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-41-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 41 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Great selection of jobs sorted by date. So it's very easy to find some fresh publications.&lt;/li&gt;
&lt;li&gt;Not a bad search algorithm: you can include and exclude some keywords.&lt;/li&gt;
&lt;li&gt;Flexible subscription: you can select keywords (include or exclude some) and also sending frequency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign up via Facebook is broken. What is it for?&lt;/li&gt;
&lt;li&gt;All the job posts I've opened were from Stack Overflow.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#remotelypeople" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://remotelypeople.com/"&gt;RemotelyPeople&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_C17uLwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/2tvCh95/screely-1612262940822.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_C17uLwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/2tvCh95/screely-1612262940822.png" alt="RemotelyPeople screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 9 points&lt;br&gt;
&lt;em&gt;1,700+ remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 10 points&lt;br&gt;
&lt;em&gt;All positions are recently added and updated.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 10 points&lt;br&gt;
&lt;em&gt;All positions are relevant.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points &lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Worldwide filter.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt;  1 point&lt;br&gt;
&lt;em&gt;Filter "salary mentioned".&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;No additional filters.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-40-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 40 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of relevant fresh positions.&lt;/li&gt;
&lt;li&gt;Good search options.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's not possible to customize email subscriptions.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#weworkremotely" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://weworkremotely.com/"&gt;WeWorkRemotely&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--soSDGTif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0GQj2Mk/screely-1612262737692.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--soSDGTif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0GQj2Mk/screely-1612262737692.png" alt="WWR screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt;  2 points&lt;br&gt;
&lt;em&gt;52 remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt;  10 points&lt;br&gt;
&lt;em&gt;All positions are recently added and updated.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt;  7 points &lt;br&gt;
&lt;em&gt;Most of the positions are highly relevant, but some include "React Native" (i.e. Mobile Development).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt;  3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt;  3 points &lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt;  4 points&lt;br&gt;
&lt;em&gt;It's possible to filter US/EU and other countries only.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt;  3 points&lt;br&gt;
&lt;em&gt;There are job-type, company and other filters.&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Not possible to personalize based on skills (only by category).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-34-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 34 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexible job search: titles, keywords, job categories, locations, companies, job types.&lt;/li&gt;
&lt;li&gt;Jobs for designers, copyrighters, management, finance, sales, etc.&lt;/li&gt;
&lt;li&gt;More suitable jobs: you can check related jobs when you read more about some relevant position. Additional information about every company: how many job posts published, where the main office is located, link to company's career page etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A rather small selection of vacancies. Or they are just hard to find — 428 job posts for developers active now.&lt;/li&gt;
&lt;li&gt;A huge (!) number of featured job posts, it really annoyed for me.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#remoteok" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://remoteok.io/"&gt;RemoteOK&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZclKk1Xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Q9wFFH2/screely-1612262043620.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZclKk1Xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Q9wFFH2/screely-1612262043620.png" alt="RemoteOK"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;30+ active remote positions found.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 10 points &lt;br&gt;
&lt;em&gt;All positions are recently updated.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 9 points &lt;br&gt;
&lt;em&gt;Most of the positions are highly relevant, but some include *"React Native" (i.e. Mobile Development).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Only "show worldwide" filter available.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-33-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 33 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wide collection of job posts, not only for developers but also for marketers, designers, customer development specialists.&lt;/li&gt;
&lt;li&gt;Subscription: you can subscribe and receive relevant to your search job posts daily or weekly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Awful search feature: it is not possible to use more than one search query filter. For example  "React". You can't add any more technologies or titles. &lt;/li&gt;
&lt;li&gt;Old job posts in the results: when I've entered "React" and I was mostly offered vacancies that are 3-6 months old already.&lt;/li&gt;
&lt;li&gt;Job posts are featured by companies, so usually, you initially see promoted vacancies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#remoteio" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="//remote.io"&gt;Remote.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcxK3VFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/LYP7wxC/screely-1612261843061.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcxK3VFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/LYP7wxC/screely-1612261843061.png" alt="Remoteio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 6 points&lt;br&gt;
&lt;em&gt;300+ remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 10 points&lt;br&gt;
&lt;em&gt;All positions have been updated recently.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 6 points&lt;br&gt;
&lt;em&gt;Lots of non-relevant vacancies like Technical Writer and QA Engineer.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 0 points &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Only by category.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;em&gt;Cool section with tools for remote workers and digital nomads.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-33-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 33 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time zone indicated, but the required citizenship for the application is not.&lt;/li&gt;
&lt;li&gt;Salary is displayed for some positions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keyword search works not so well.&lt;/li&gt;
&lt;li&gt;Limited filters.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#findwork" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://findwork.dev/"&gt;Findwork&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RX3C_AZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/n0JS6bn/screely-1612261262743.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RX3C_AZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/n0JS6bn/screely-1612261262743.png" alt="Findwork"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 6 points&lt;br&gt;
&lt;em&gt;700&lt;/em&gt;+ remote positions found.*&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;First position in search result was published 3 months ago and no longer accepting applications.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;Most positions from search result are "React Native" (i.e. Mobile Development), not "React" (i.e. Frontend Development).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 3 points &lt;br&gt;
&lt;em&gt;There are lots of different filters, i.e. Employment Type, Source, Funding etc.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;Personalization (filtered by skills, titles) is available also.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;em&gt;Glassdoor ratings and Crunchbase info is available for some job posts.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-30-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 30 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cool additional filters: by Glassdoor rating, funding raised, and the number of employees. This is a feature that I really liked.&lt;/li&gt;
&lt;li&gt;Login with Google, Github, Linkedin and set up an email subscription (use keywords, type of employment, and frequency).&lt;/li&gt;
&lt;li&gt;A selection of similar vacancies is displayed inside each job post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outdated vacancies published weeks ago.&lt;/li&gt;
&lt;li&gt;Poor keyword search.&lt;/li&gt;
&lt;li&gt;Not only remote vacancies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#remotive" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://remotive.io/"&gt;Remotive&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fETTOJqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Qmrp2pk/screely-1612260553251.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fETTOJqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Qmrp2pk/screely-1612260553251.png" alt="Remotive"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;130+ active remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 8 points&lt;br&gt;
&lt;em&gt;Some available vacancies are outdated.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 6 points &lt;br&gt;
&lt;em&gt;A lot of non-relevant positions (e.g. .NET Developer).&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 2 points &lt;br&gt;
&lt;em&gt;US-only filter is available.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;It's possible to select only category (no other filters) to subscribe.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-28-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 28 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very clean and neat interface.&lt;/li&gt;
&lt;li&gt;Fast search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not so many React vacancies available.&lt;/li&gt;
&lt;li&gt;Limited filters.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#careervault" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.careervault.io/"&gt;CareerVault&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bil75pvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/b2jZTPY/screely-1612259955018.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bil75pvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/b2jZTPY/screely-1612259955018.png" alt="CareerVault"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 5 points&lt;br&gt;
&lt;em&gt;105 remote positions found.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 7 points&lt;br&gt;
&lt;em&gt;Starting from page #3 there are 2-4 months+ old vacancies.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 9 points&lt;br&gt;
&lt;em&gt;Most of the positions are highly relevant, but some include "React Native" (i.e. Mobile Development).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 0 points &lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;US-only filter is available.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-26-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 26 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fresh selection: job posts published just a few hours ago.&lt;/li&gt;
&lt;li&gt;Aggregates vacancies from not only from job boards but also from companies' career pages.&lt;/li&gt;
&lt;li&gt;Signup (using Google / email) — an opportunity to save some job posts.&lt;/li&gt;
&lt;li&gt;Big selection of job posts: 17k+ at the moment.&lt;/li&gt;
&lt;li&gt;Only remote job posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No full-text search;&lt;/li&gt;
&lt;li&gt;It's not possible to subscribe to get new vacancies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#nodesk" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodesk.co/remote-jobs//"&gt;NoDesk&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXiB469I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/WPJbXvD/screely-1612259171295.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXiB469I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/WPJbXvD/screely-1612259171295.png" alt="NoDesk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 1 points&lt;br&gt;
&lt;em&gt;Only 16 positions.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Not so many recently added vacancies.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Relevance:&lt;/strong&gt; 9 points&lt;br&gt;
&lt;em&gt;Almost all the positions are relevant.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;All posts only.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-24-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 24 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User-friendly interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very small number of jobs.&lt;/li&gt;
&lt;li&gt;Not so many recently added vacancies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#meerkad" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://meerkad.com/"&gt;Meerkad&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ByxhevY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ggTB4Wz/screely-1612259717241.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ByxhevY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ggTB4Wz/screely-1612259717241.png" alt="Meerkad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 7 points&lt;br&gt;
&lt;em&gt;500+ remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 5 points&lt;br&gt;
&lt;em&gt;Lots of outdated positions starting from page #2.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 5 points&lt;br&gt;
&lt;em&gt;Most vacancies are React Native ones (i.e. mobile).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points (but you need to sign-up first)&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-23-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 23 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;None as far that I can see.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OMG it requires you to sign up first in order to be able to search and apply for vacancies. No other website does the same.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Please, share your opinion about job aggregators and the way you find some new opportunities.&lt;/p&gt;

</description>
      <category>career</category>
      <category>react</category>
      <category>womenintech</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Why did I start a YouTube channel as an introverted developer?</title>
      <author>Catalin Pit</author>
      <pubDate>Tue, 02 Feb 2021 13:24:05 +0000</pubDate>
      <link>https://dev.to/catalinmpit/why-did-i-start-a-youtube-channel-as-an-introverted-developer-2p16</link>
      <guid>https://dev.to/catalinmpit/why-did-i-start-a-youtube-channel-as-an-introverted-developer-2p16</guid>
      <description>&lt;p&gt;&lt;strong&gt;The article was first posted &lt;a href="https://catalins.tech/3-reasons-why-i-started-a-youtube-channel-as-an-introverted-developer"&gt;my blog - catalins.tech&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before starting, I want to mention that you can check &lt;a href="https://catalins.tech/youtube"&gt;my channel here&lt;/a&gt;. I also created a video version of the article before. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QBICL3jPiAM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Once in a while, I like to challenge myself and do things that are way out of my comfort zone. Speaking in front of people is out of my comfort zone, and I wanted to change that. &lt;/p&gt;

&lt;p&gt;Thus, here I am, creating YouTube videos. I confront some of my biggest fears by making them, which you will see in this article. But it's not about only fears. Creating videos teaches you useful skills that apply in other areas as well. For example, you learn how to improve your body language.&lt;/p&gt;

&lt;p&gt;Therefore, without further ado, let's continue further!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#youtube-is-everywhere" class="anchor"&gt;
  &lt;/a&gt;
  YouTube is everywhere
&lt;/h1&gt;

&lt;p&gt;One of the reasons why I started a YouTube channel is that YouTube is everywhere. We have it on our smartphones, TVs, tablets, laptops and so on. That means there is a big audience you can reach.&lt;/p&gt;

&lt;p&gt;Let's contrast that with an article. People are more likely to sit on a couch, turn the TV on and watch your video. On the opposite side, how likely is for them to read an article? My point is that a video is more accessible, and it's also easier to digest it. To read an article, you have to put a little bit more effort.&lt;/p&gt;

&lt;p&gt;Therefore, YouTube being everywhere is one of the reasons that pushed me to start a YouTube channel. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-big-introvert" class="anchor"&gt;
  &lt;/a&gt;
  A big introvert
&lt;/h1&gt;

&lt;p&gt;You might be surprised, but I am an introvert in real life. I am not as extrovert as I seem to be online. As a result, I was afraid of speaking in front of people.&lt;/p&gt;

&lt;p&gt;With my YouTube channel's help, I tackle this fear by speaking in front of an online audience. After just a handful of videos, I am not afraid to record and put myself out there anymore. Quite the opposite, I enjoy doing so. That is something I did not know I would say.&lt;/p&gt;

&lt;p&gt;Thus, I would say it might be worth trying things you are afraid of, and the ones that take you out of your comfort zone. You might enjoy them afterwards!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#its-fun" class="anchor"&gt;
  &lt;/a&gt;
  It's fun
&lt;/h1&gt;

&lt;p&gt;For myself, it's fun, and I enjoy it. At first, it was painful to create videos. It would take me hours just to record a 5-minute video. As soon as the camera started, I would forget what I have to say. Or, I would stutter a lot.&lt;/p&gt;

&lt;p&gt;But after tens of videos, you get better at this. Nowadays, I record a video in maximum 2 or 3 takes, in the worst case. Overall, it's a wholesome experience that teaches you lots of things!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-end" class="anchor"&gt;
  &lt;/a&gt;
  The end
&lt;/h1&gt;

&lt;p&gt;I just wanted to write a short article about the reasons behind my YouTube channel. I had the channel for a short time, but I already learnt and improved a lot.&lt;/p&gt;

&lt;p&gt;Also, it's nice to look back and see how far I came. That's why I made this video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/01OKp572TkI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>When not to use instance variables in RSpec</title>
      <author>Tom de Bruijn</author>
      <pubDate>Tue, 02 Feb 2021 13:06:58 +0000</pubDate>
      <link>https://dev.to/tombruijn/when-not-to-use-instance-variables-in-rspec-3jb9</link>
      <guid>https://dev.to/tombruijn/when-not-to-use-instance-variables-in-rspec-3jb9</guid>
      <description>&lt;p&gt;Using RSpec there is some confusion about the differences between &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;let!&lt;/code&gt;, and instance variables in specs. I'd like to focus on how instance variables work in RSpec in combination with &lt;code&gt;before :context&lt;/code&gt; blocks, and in what kind of scenarios you should and should not use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-instance-variables" class="anchor"&gt;
  &lt;/a&gt;
  Why use instance variables?
&lt;/h2&gt;

&lt;p&gt;The advantage of declaring instance variables in &lt;code&gt;before :context&lt;/code&gt; (or &lt;code&gt;before :all&lt;/code&gt;) blocks is that whatever value is assigned is only queried or calculated once for many specs. The &lt;code&gt;before :context&lt;/code&gt; block is only executed once for all specs in that context. Those specs can use the instance variable without repeating the same setup for every spec, which should speed up the test suite.&lt;/p&gt;

&lt;p&gt;Reading the above it might be tempting to put a lot of spec setup in &lt;code&gt;before :context&lt;/code&gt; blocks. A fast test suite creates happy developers, right? But there's a downside to using instance variables in RSpec, which could make for very unhappy developers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;From the &lt;a href="https://github.com/rspec/rspec-core/blob/c6315d6e899796d3d0203dc8b656708a3ebca9a1/lib/rspec/core/hooks.rb#L122-L138"&gt;RSpec docs&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;It is very tempting to use &lt;code&gt;before(:context)&lt;/code&gt; to speed things up, but we recommend that you avoid this as there are a number of gotchas, as well as things that simply don't work.&lt;/p&gt;

&lt;p&gt;[...]&lt;/p&gt;

&lt;p&gt;Instance variables declared in &lt;code&gt;before(:context)&lt;/code&gt; are shared across all the examples in the group. This means that each example can change the state of a shared object, resulting in an ordering dependency that can make it difficult to reason about failures.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The RSpec docs give us a warning about changing values of the instance variable. State can leak between specs using instance variables defined in a &lt;code&gt;before :context&lt;/code&gt; block this way.&lt;/p&gt;

&lt;p&gt;Let's look at some examples of specs using instance variables and in what scenarios in will break.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#specs-sharing-instance-variables" class="anchor"&gt;
  &lt;/a&gt;
  Specs sharing instance variables
&lt;/h2&gt;

&lt;p&gt;In the example below specs only assert if the value of the instance variable matches the expected value. Since the instance variable is not changed, all the specs will pass. If the instance variable value took a long time to query or calculate we have saved that time for two specs in this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/lib/example_1_spec.rb&lt;/span&gt;
&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"Example 1"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="ss"&gt;:context&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# Imagine this being a complex value to prepare&lt;/span&gt;
    &lt;span class="c1"&gt;# This block is only run once in the `describe "Example 1"` block&lt;/span&gt;
    &lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:my_value&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"spec 1"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:my_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"spec 2"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:my_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bundle exec rspec spec/lib/example_1_spec.rb --order defined
Finished in 0.00223 seconds
2 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(&lt;em&gt;I'm using &lt;code&gt;--order defined&lt;/code&gt; in the examples in this post so that the spec execution order is predictable and reproducible.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;But specs can be more complicated than this. They may pass the instance variable to some other part of the app, which modifies the given value. This is where things go wrong, what the RSpec docs warn us about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reassigning-the-instance-variable" class="anchor"&gt;
  &lt;/a&gt;
  Reassigning the instance variable
&lt;/h2&gt;

&lt;p&gt;If changing the instance variable is the problem, let's reassign it and see what happens in other specs.&lt;/p&gt;

&lt;p&gt;In the example below the "spec 1" spec changes the instance variable to test a slightly different scenario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/lib/example_2_spec.rb&lt;/span&gt;
&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"Example 2"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="ss"&gt;:context&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# Imagine this being a complex value to prepare&lt;/span&gt;
    &lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:my_value&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"spec 1"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:new_value&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:new_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"spec 2"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:my_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bundle exec rspec spec/lib/example_2_spec.rb --order defined
Finished in 0.00223 seconds
2 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example "spec 2" does not fail, even though "spec 1"—which runs before "spec 2"—changes the instance variable. There was no need for us to reset the original value of the instance variable at the end of the spec even though we changed it.&lt;/p&gt;

&lt;p&gt;The way that RSpec runs the specs ensures that every spec uses the original instance variables. Every spec in RSpec is its own Ruby class, in which the spec is performed. Before the spec class run, RSpec sets the instance variables from the &lt;code&gt;before :context&lt;/code&gt; block on the spec class. When an instance variable is reassigned in a spec, it only reassigns it on that spec class instance. It doesn't not reassign the instance variable on the same scope as the &lt;code&gt;before :context&lt;/code&gt; instance variables are stored, and so does not interfere with any other specs. An example of how this looks can be found later on in this post.&lt;/p&gt;

&lt;p&gt;This behavior doesn't always quite work though. Let's see what happens if we use a bit more complex value. That way we know the limitations of using instance variables in RSpec.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifying-instance-variable-values" class="anchor"&gt;
  &lt;/a&gt;
  Modifying instance variable values
&lt;/h2&gt;

&lt;p&gt;In the next example the &lt;code&gt;@my_instance_variable&lt;/code&gt; is assigned a more complex value: an array with multiple values. We will intentionally break the spec in this scenario.&lt;/p&gt;

&lt;p&gt;In "spec 1" we're testing a slightly different scenario again, modifying the value before running the assertion. Instead of reassigning the variable we're adding a value to the array on &lt;code&gt;@my_instance_variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/lib/example_3_spec.rb&lt;/span&gt;
&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"Example 3"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="ss"&gt;:context&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:two&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"spec 1"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="ss"&gt;:three&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:two&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:three&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"spec 2"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@my_instance_variable&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:two&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bundle exec rspec spec/lib/example_3_spec.rb
Failures:

  1) Example 3 spec 2
     Failure/Error: expect(@my_instance_variable).to eql([:one, :two])

       expected: [:one, :two]
            got: [:one, :two, :three]

       (compared using eql?)

       Diff:
       @@ -1 +1 @@
       -[:one, :two]
       +[:one, :two, :three]

     # ./spec/lib/example_3_spec.rb:14:in `block (2 levels) in &amp;lt;top (required)&amp;gt;'

Finished in 0.01596 seconds (files took 0.10576 seconds to load)
2 examples, 1 failure

Failed examples:

rspec ./spec/lib/example_3_spec.rb:12 # Example 3 spec 2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Unlike before, the "spec 2" spec has now failed. It fails because the instance variable still has the value from the first spec. State has leaked from "spec 1" into "spec 2". Let's look at how the values from these instance variables have moved between specs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-instance-variables-work-in-rspec" class="anchor"&gt;
  &lt;/a&gt;
  How instance variables work in RSpec
&lt;/h2&gt;

&lt;p&gt;To recap what we learned from the examples earlier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assigning instance variables in &lt;code&gt;before :context&lt;/code&gt; means they'll only be assigned once, as the &lt;code&gt;before :context&lt;/code&gt; block is only once run before all specs in the spec context.&lt;/li&gt;
&lt;li&gt;Every spec in RSpec is performed as its own class, with its own scope. Instance variable from the &lt;code&gt;before :context&lt;/code&gt; block are set on the spec class before it is performed.&lt;/li&gt;
&lt;li&gt;Instance variable values do not leak between specs when the values are basic Ruby objects such as Symbols, numbers, etc.&lt;/li&gt;
&lt;li&gt;Instance variable values do leak between specs when the values are more complex objects such as Arrays, Strings, Class instances, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a closer look at how RSpec handles instance variables for spec classes to see how this could break in our test suite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-rspec-handles-instance-variables" class="anchor"&gt;
  &lt;/a&gt;
  How RSpec handles instance variables
&lt;/h3&gt;

&lt;p&gt;When RSpec runs specs in a context, it first runs the &lt;code&gt;before :context&lt;/code&gt; blocks. After a &lt;code&gt;before :context&lt;/code&gt; block is executed RSpec then stores the list of the instance variables on the class it creates for the context.&lt;/p&gt;

&lt;p&gt;When RSpec then starts a spec in that context it creates a new class for that spec and sets instance variables of that context on the spec class.&lt;/p&gt;

&lt;p&gt;Let's look at how this works using the same scenario from the second example, where we reassigned the instance variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt; &lt;span class="c1"&gt;# RSpec context class&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before_context_ivars&lt;/span&gt;
    &lt;span class="c1"&gt;# Where the `before :context` instance variables are stored&lt;/span&gt;
    &lt;span class="vi"&gt;@ivars&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set_before_context_ivars_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec_instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Set instance variables from `before :context` on spec instance&lt;/span&gt;
    &lt;span class="n"&gt;before_context_ivars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;spec_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spec&lt;/span&gt; &lt;span class="c1"&gt;# RSpec spec class&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="c1"&gt;# During spec&lt;/span&gt;
    &lt;span class="vi"&gt;@var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# Reassign instance variable&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Mock a `before :context` block and&lt;/span&gt;
&lt;span class="c1"&gt;# store an instance variable on the Context class&lt;/span&gt;
&lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before_context_ivars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:@var&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Basic Ruby object value&lt;/span&gt;
&lt;span class="c1"&gt;# Initialize the spec class&lt;/span&gt;
&lt;span class="n"&gt;spec_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="c1"&gt;# Set the `before :context` instance variables on the spec&lt;/span&gt;
&lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set_before_context_ivars_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec_instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Context @var before spec:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before_context_ivars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:@var&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;

&lt;span class="c1"&gt;# Run the spec&lt;/span&gt;
&lt;span class="n"&gt;spec_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Spec @var:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spec_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:@var&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Context @var after spec:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before_context_ivars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:@var&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Simplified example for demonstration purposes.)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Context @var before spec:
1
Spec1 @var:
2
Context @var after spec:
1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;RSpec sets the original value of the instance variable on every spec class instance. Reassigning the instance variable in the spec class does not modify the value of the instance variable on the context. It only changes it on the spec class instance.&lt;/p&gt;

&lt;p&gt;When the instance variable value was modified however, the value stored on the Context class is also modified, as it is still the same value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Using the same context class as from the previous example&lt;/span&gt;

&lt;span class="c1"&gt;# Mock a `before :context` block and&lt;/span&gt;
&lt;span class="c1"&gt;# store an instance variable on the Context class&lt;/span&gt;
&lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before_context_ivars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:@var&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# More complex Ruby object&lt;/span&gt;
&lt;span class="c1"&gt;# Initialize the spec class&lt;/span&gt;
&lt;span class="n"&gt;spec_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="c1"&gt;# Set the `before :context` instance variables on the spec&lt;/span&gt;
&lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set_before_context_ivars_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec_instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Context @var before spec:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before_context_ivars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:@var&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;

&lt;span class="c1"&gt;# Run the spec&lt;/span&gt;
&lt;span class="n"&gt;spec_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Spec @var:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spec_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:@var&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Context @var after spec:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="no"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before_context_ivars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:@var&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Context @var before spec:
[1, 2]
Spec @var:
[1, 2, 3]
Context @var after spec:
[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example we can see the instance variable's value has changed, because the value was modified, rather than the instance variable being reassigned. This value was modified in memory, also changing the value in the context instance variable storage, which causes the modified state to leak into other specs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pointers" class="anchor"&gt;
  &lt;/a&gt;
  Pointers
&lt;/h3&gt;

&lt;p&gt;What happens is, RSpec (or rather Ruby) is assigning pointers to the values in memory when it sets the instance variable values on the spec class instance. Variables in Ruby are pointers to a place in the application's memory. Assigning a value to another variable does not make a copy of it, but points to the same location in memory.&lt;/p&gt;

&lt;p&gt;When RSpec sets the instance variables, it doesn't set a copy of the original Array value. Instead it sets the pointer to the Array value in memory. If the Array in memory has changed during the spec run, it will set not the original value for the next spec, but the modified Array instead. This is part of how Ruby works, this is not something RSpec can "fix". And which is why the RSpec docs warn us about using instance variables in &lt;code&gt;before :context&lt;/code&gt; blocks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives" class="anchor"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h2&gt;

&lt;p&gt;To prevent state from leaking into other specs by modified values, it's possible to &lt;a href="https://ruby-doc.org/core-2.7.1/Object.html#freeze-method"&gt;"freeze" objects in Ruby&lt;/a&gt;. If we freeze an Array, String or other object instance, Ruby will not allow any modifications.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="c1"&gt;# Raises an error to prevent modification&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; FrozenError (can't modify frozen Array: [1, 2])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But this will be more difficult to do for larger objects with nested objects, as it only freezes the top object and not all nested objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inspect&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [[1, 2, 3], [4, 5]] # The nested value was modified&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alternatively it's possible to &lt;a href="https://api.rubyonrails.org/v5.2.4/classes/Object.html#method-i-deep_dup"&gt;deep clone or dup&lt;/a&gt; the object. The problem with this is that it will take up a lot more memory, as every object will be kept in memory multiple times, so I can't recommend it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;RSpec scoping instance variables between specs in classes is a great help from RSpec for basic Ruby objects, but this behavior shouldn't be relied upon for more complex Ruby objects such as Arrays, Strings, and other object instances.&lt;/p&gt;

&lt;p&gt;If a spec is modifying an instance variable value, you can't be sure what the value of that instance variable will be in the next spec. State may leak to other specs, breaking them in unexpected ways. This will be especially difficult to track down when the specs are run in a random order each time.&lt;/p&gt;

&lt;p&gt;Make sure that if you use instance variables, you absolutely do &lt;em&gt;not&lt;/em&gt; modify any value set on the instance variable if you want a predictable and reproducible test suite. And that's something we should all want. I'm all for fast test suites, but what I like more is a stable test suite.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A big thanks to &lt;a href="https://twitter.com/Benoit_Tgt"&gt;Benoit Tigeot&lt;/a&gt; for fact checking this article!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>rspec</category>
      <category>testing</category>
    </item>
    <item>
      <title>Log-Driven Development</title>
      <author>Sergey</author>
      <pubDate>Tue, 02 Feb 2021 12:54:04 +0000</pubDate>
      <link>https://dev.to/alexsergey/log-driven-development-3jmf</link>
      <guid>https://dev.to/alexsergey/log-driven-development-3jmf</guid>
      <description>&lt;p&gt;If we compare the application with the alive organism the bug could be compared with a disease. The cause of this "disease" can be a number of factors, including the environment of a particular user. This is really relevant when we are talking about web platform. Sometimes the reason is very complicated and the bug that was found through testing - the result of a number of actions. &lt;/p&gt;

&lt;p&gt;As with human illnesses, no one can explain their symptoms better than a patient, any tester can tell what happened, better than the program itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-do" class="anchor"&gt;
  &lt;/a&gt;
  What to do?
&lt;/h2&gt;

&lt;p&gt;To understand what is happening, we need to have a history of the actions that the user performed in our application.&lt;/p&gt;

&lt;p&gt;In order for our program to tell us that it hurts, we will take the &lt;a href="https://github.com/AlexSergey/logrock"&gt;logrock&lt;/a&gt; module and link it to ElasticSearch, LogStash, and Kibana for further analysis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logrock" class="anchor"&gt;
  &lt;/a&gt;
  LogRock
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/AlexSergey/logrock"&gt;logrock&lt;/a&gt; module was born when we started working on the &lt;a href="https://www.cleverbrush.com/"&gt;Cleverbrush&lt;/a&gt; product. This is software for working with vector graphics. Working with a graphics editor implies a huge number of application use cases. We are trying to save money and time, so we optimize everything, including testing. Covering each option with test cases is too expensive and irrational, especially since it is impossible to cover all options.&lt;/p&gt;

&lt;p&gt;This module can organize modern logging approach for your application. Basing on the logs we test our application. In this article, I am going to tell you about how you can organize your logging system for searching bugs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elasticstack" class="anchor"&gt;
  &lt;/a&gt;
  ElasticStack
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4wPGYD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4wPGYD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-1.png" alt="ElasticStack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;ElasticSearch&lt;/strong&gt; is a powerful full-text search engine.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;LogStash&lt;/strong&gt; is a system for collecting logs from various sources that can send logs to ElasticSearch as well.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kibana&lt;/strong&gt; is a web interface for ElasticSearch with many addons.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GhSGz1aU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GhSGz1aU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-2.png" alt="App logging system"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case of an error (or just on demand), the application sends logs to the server where they are saved to a file. Logstash incrementally saves data to ElasticSearch - to the database. The user logs to Kibana and sees the saved logs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OUB86xPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUB86xPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-3.png" alt="Kibana"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above you see a well set up Kibana. It displays your data from ElasticSearch. That can help you to analyze your data and understand what happened.&lt;/p&gt;

&lt;p&gt;In this article, I am &lt;strong&gt;NOT&lt;/strong&gt; considering setup ElasticStack!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-logging-system" class="anchor"&gt;
  &lt;/a&gt;
  Creating logging system
&lt;/h2&gt;

&lt;p&gt;For example, we are going to integrate a logging system to single page application based on React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-installation" class="anchor"&gt;
  &lt;/a&gt;
  Step 1. Installation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;logrock &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-setup-react-application" class="anchor"&gt;
  &lt;/a&gt;
  Step 2. Setup React Application
&lt;/h3&gt;

&lt;p&gt;We need to wrap up the application with a component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoggerContainer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logrock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;LoggerContainer&lt;/em&gt; is a component that reacts to errors in your application and forms a stack.&lt;/p&gt;

&lt;p&gt;A stack is an object with information about the user's operating system, browser, which mouse or keyboard button was pressed, and of course, the actions subarray, where all the user actions that he performed in our system are recorded.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LoggerContainer&lt;/em&gt; has settings, consider some of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;
  &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sendToServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;active&lt;/strong&gt; enables or disables the logging.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;limit&lt;/strong&gt; sets a limit on the number of recent actions saved by the user. If the user performs 21 actions, then the first one in this array will be automatically deleted. Thus, we will have the last 20 actions that preceded the error.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;onError&lt;/strong&gt; is a callback that is called when an error occurs. The Stack object comes to it, in which all information about the environment, user actions, etc. is stored. It is from this callback that we need to send this data to ElasticSearch or backend or save it to a file for further analysis and monitoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#logging" class="anchor"&gt;
  &lt;/a&gt;
  Logging
&lt;/h2&gt;

&lt;p&gt;In order to produce high-quality logging of user actions, we will have to cover our code with log calls.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/AlexSergey/logrock"&gt;logrock&lt;/a&gt; module comes with a logger that is linked to the &lt;em&gt;LoggerContainer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For instance, we have a component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setToggleState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`switch &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In order to correctly cover it with a log, we need to modify the toggle method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logrock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`React.Toggle|Toggle component changed state &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setToggleState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`switch &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have added a logger in which the information is divided into 2 parts. &lt;strong&gt;React.Toggle&lt;/strong&gt; shows us that this action happened at the level of React, the Toggle component, and then we have a verbal explanation of the action and the current state that came to this component. This division into levels is not necessary, but with this approach, it will be clearer where exactly our code was executed.&lt;/p&gt;

&lt;p&gt;We can also use the &lt;em&gt;"componentDidCatch"&lt;/em&gt; method, which was introduced in React 16, in case an error occurs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interaction-with-the-server" class="anchor"&gt;
  &lt;/a&gt;
  Interaction with the server
&lt;/h2&gt;

&lt;p&gt;Consider the following example.&lt;/p&gt;

&lt;p&gt;Let's say we have a method that collects user data from the backend. The method is asynchronous, part of the logic is hidden in the backend. How to properly add logging to this code?&lt;/p&gt;

&lt;p&gt;Firstly, since we have a client application, all requests going to the server will pass within one user session, without reloading the page. In order to associate actions on the client with actions on the server, we must create a global &lt;strong&gt;SessionID&lt;/strong&gt; and add it to the header for each request to the server. On the server, we can use any logger that will cover our logic like the example from the frontend, and if an error occurs, send this data with the attached sessionID to ElasticSearch, to the Backend plate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-generating-sessionid-on-the-client" class="anchor"&gt;
  &lt;/a&gt;
  Step 1. Generating &lt;strong&gt;SessionID&lt;/strong&gt; on the client:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SESSION_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`sessionid-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-requests" class="anchor"&gt;
  &lt;/a&gt;
  Step 2. Requests.
&lt;/h3&gt;

&lt;p&gt;We need to set the &lt;strong&gt;SessionID&lt;/strong&gt; for all requests to the server. If we use libraries for requests, it is very easy to do this by declaring a SessionID for all requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({...});&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessionId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SESSION_ID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-connect-sessionid-to-log-stack" class="anchor"&gt;
  &lt;/a&gt;
  Step 3. Connect &lt;strong&gt;SessionID&lt;/strong&gt; to Log stack.
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;LoggerContainer&lt;/em&gt; has a special field for &lt;strong&gt;SessionID&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;
  &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;sessionID&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SESSION_ID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sendToServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-interaction-with-backend" class="anchor"&gt;
  &lt;/a&gt;
  Step 4. Interaction with backend.
&lt;/h3&gt;

&lt;p&gt;The request (on the client) will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`store.getData|User is ready for loading... User ID is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/v1/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`store.getData|User have already loaded. User count is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`store.getData|User loaded fail &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;How it works:&lt;/p&gt;

&lt;p&gt;We write a log, before the request on the client. From our code, we can see that the download of data from the server will start now. We have attached the &lt;strong&gt;SessionID&lt;/strong&gt; to the request. If our backend logs are covered with the addition of this &lt;strong&gt;SessionID&lt;/strong&gt; and the request fails, then we can see what happened on the backend.&lt;/p&gt;

&lt;p&gt;Thus, we monitor the entire cycle of our application, not only on the client but also on the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qa-engineer" class="anchor"&gt;
  &lt;/a&gt;
  QA Engineer
&lt;/h2&gt;

&lt;p&gt;Working with a QA engineer deserves a separate description of the process.&lt;/p&gt;

&lt;p&gt;As we are startup, we have no formal requirements and sometimes not everything is logical.&lt;/p&gt;

&lt;p&gt;If the tester does not understand the behavior, this is a case that at least needs to be considered. Also, often, a tester simply cannot repeat the same situation twice. Since the steps leading to the incorrect behavior can be numerous and non-trivial. In addition, not all errors lead to critical consequences such as Exception. Some of them can only change the behavior of the application, but not be interpreted by the system as an error. For these purposes, at staging, you can add a button in the application header to force the sending of logs. The tester sees that something is wrong, clicks on the button, and sends a &lt;em&gt;Stack&lt;/em&gt; with actions to &lt;strong&gt;ElasticSearch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1iDzgGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1iDzgGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-4.png" alt="BSOD button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case, a critical error has occurred, we must block the interface so that the tester does not click further and get stuck.&lt;/p&gt;

&lt;p&gt;For these purposes, we display the blue screen of death.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gKqg3hA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gKqg3hA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/logrock/article_dev_to/img-5.png" alt="BSOD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see above the text with the Stack of this critical error, and below - the actions that preceded it. We also get the error ID, the tester just needs to select it and attach it to the ticket. Later this error can be easily found in Kibana by this ID.&lt;/p&gt;

&lt;p&gt;For these purposes, the &lt;em&gt;LoggerContainer&lt;/em&gt; has properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;
  &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;bsodActive&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;bsod&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BSOD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sendToServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;bsodActive&lt;/strong&gt; enables / disables BSOD (disabling BSOD applies to production code)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bsod&lt;/strong&gt; is React component. By default, it looks like the above screenshot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To display the button in the UI LoggerContainer, we can use the hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getStackData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;triggerError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoggerApi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;triggerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getStackData&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#user-interaction" class="anchor"&gt;
  &lt;/a&gt;
  User interaction
&lt;/h2&gt;

&lt;p&gt;Some logs are useful to the user. To output the user needs to use the stdout method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;
  &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;bsodActive&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;bsod&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BSOD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sendToServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;LoggerContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;stdout&lt;/strong&gt; is the method that is responsible for printing messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order for the message to become &lt;em&gt;"important"&lt;/em&gt; it is enough to pass true to the logger as the second parameter. Thus, we can display this message to the user in a pop-up window, for example, if the data loading has failed, we can display an error message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something was wrong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tips-and-tricks" class="anchor"&gt;
  &lt;/a&gt;
  Tips and tricks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Log applications, including in production, because no tester will find bottlenecks better than real users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; forget to mention the collection of logs in the license agreement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; log passwords, banking details, and other personal information!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redundancy of logs is also bad, make messages as clear as possible.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When you release an app, life is just beginning for it. Be responsible for your product, get feedback, monitor logs, and improve it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Future JavaScript - Stay ahead of the curve by using new JavaScript features today (1/4 - Intro)</title>
      <author>Ian Holden</author>
      <pubDate>Tue, 02 Feb 2021 12:37:22 +0000</pubDate>
      <link>https://dev.to/ianholden/future-javascript-stay-ahead-of-the-curve-by-using-new-javascript-features-today-1-4-intro-3b78</link>
      <guid>https://dev.to/ianholden/future-javascript-stay-ahead-of-the-curve-by-using-new-javascript-features-today-1-4-intro-3b78</guid>
      <description>&lt;p&gt;JavaScript is one of the most popular programming languages in the world. It is frequently changing to offer new ways of writing code and performing functions over time.&lt;/p&gt;

&lt;p&gt;If you imagine a graph that pins the average number of tools in today's JavaScript engineer's toolkit, you might find yourself wanting to learn more about some of the latest features. I wanted to write this post to show you how you can start using future JavaScript features in your projects today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-future-javascript-features-are-we-going-to-look-at" class="anchor"&gt;
  &lt;/a&gt;
  What future JavaScript features are we going to look at?
&lt;/h2&gt;

&lt;p&gt;Last December, the &lt;a href="https://2020.stateofjs.com/en-US/"&gt;State of JS 2020 survey&lt;/a&gt; published their results. The survey questioned which new JavaScript features are being used in the projects of its correspondents. I wanted to try some of the lesser-used features and explain how you can use them in your projects.&lt;/p&gt;

&lt;p&gt;The survey returned many categorised results. I have created a series of posts to explore three of these categories further. These categories are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;li&gt;Language&lt;/li&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have selected a few results from each category that have not been adopted as much as others, according to the State of JS survey. By doing this, I hope that you can learn about how simple it is to pick these up and become knowledgeable about them which will help put you ahead of the curve as a JavaScript engineer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-we-use-future-javascript-features" class="anchor"&gt;
  &lt;/a&gt;
  How can we use future JavaScript features?
&lt;/h2&gt;

&lt;p&gt;Let's start with a definition. What do I mean by 'future JavaScript'?&lt;/p&gt;

&lt;p&gt;Periodically, ECMA script will release a new edition of their specification. When this happens, browsers that run JavaScript will work to support these new features. Browsers adopt these features at different rates which can make it difficult to use them in our projects. We may come across issues where one browser supports the new feature but another does not.&lt;/p&gt;

&lt;p&gt;We can get around this problem by using a &lt;strong&gt;compiler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To translate one flavour of something to another flavour of something, we need a compiler. In JavaScript, our compiler needs to be responsible for transforming future JavaScript code (ES6+) into JavaScript code that is supported by all browsers (ES5).&lt;/p&gt;

&lt;p&gt;Thankfully, &lt;a href="https://2020.stateofjs.com/en-US"&gt;Babel&lt;/a&gt; is a compiler that will help us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-javascript-compiler-for-your-project" class="anchor"&gt;
  &lt;/a&gt;
  Setting up a JavaScript compiler for your project
&lt;/h2&gt;

&lt;p&gt;Babel is designed to help us in a number of environments. Our project might be a webpage that uses JavaScript in a web browser or it might be running JavaScript on a server that supports Node.js. Whatever our task, it is likely that Babel has the setup option to help us get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6WWwCnux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-2.amazonaws.com/ianholden.co.uk-wordpress-media/wp-content/uploads/2021/02/01170531/Screenshot-2021-02-01-at-17.05.13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6WWwCnux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-2.amazonaws.com/ianholden.co.uk-wordpress-media/wp-content/uploads/2021/02/01170531/Screenshot-2021-02-01-at-17.05.13.png" alt="The current list of tools that Babel supports (as of February 2020)"&gt;&lt;/a&gt;&lt;br&gt;
Because the Babel website has such a long list of setup options and tutorials, I am not going to explain how we can set up our project with Babel in this article.&lt;/p&gt;

&lt;p&gt;If you are using a framework to build your project, you may find that your project uses Babel without you knowing. Frameworks like create-react-app, Gatsby and Parcel, all have Babel configured as soon as you start a project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up-next" class="anchor"&gt;
  &lt;/a&gt;
  Up next
&lt;/h2&gt;

&lt;p&gt;In the next article, we will explore some of the future JavaScript features outlined in the State of JS survey.&lt;/p&gt;

&lt;p&gt;If you would like to be reminded when the next articles in this series are released, give me a follow.&lt;/p&gt;

&lt;p&gt;Please, let me know in the comments if there are any features that you would like to read about in greater detail.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>babel</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to setup Google Analytics 4 on Shopify without an app </title>
      <author>Erman Küplü</author>
      <pubDate>Tue, 02 Feb 2021 11:59:39 +0000</pubDate>
      <link>https://dev.to/analyzify/how-to-setup-google-analytics-4-on-shopify-without-an-app-1e3n</link>
      <guid>https://dev.to/analyzify/how-to-setup-google-analytics-4-on-shopify-without-an-app-1e3n</guid>
      <description>&lt;p&gt;Google Analytics 4 is the new default option for Google Analytics. The analytics community has been waiting for this version for a long time. However, as with every new product, it has some internal and external problems. &lt;/p&gt;

&lt;p&gt;I will start with a quick intro - but feel free to jump into the steps below if you want to go to act immediately! &lt;/p&gt;

&lt;p&gt;GA4 is using a different approach to data collection compared to Universal Analytics (UA), the old version. UA's core function was page views and events would come on top of that. We would use event tracking for specific actions such as form submission, registers, video interaction, button clicks, and so on. &lt;strong&gt;In GA4, even a page view is an event!&lt;/strong&gt; It might not sound like revolutionary change but it actually is. We plan to write another in-depth post on the main differences between GA4 and UA. &lt;/p&gt;

&lt;p&gt;One of the core problems of GA4 is the integrations. The platforms (such as Shopify, Squarespace, Weebly, and so on) are not ready for Google Analytics 4 yet. While GA4 has great features for e-commerce stores; it is very hard to implement it at the moment - especially the ecommerce features. And you can already imagine it makes no sense to use Google Analytics 4 without the sales data for a Shopify (or any kind of) store. There are several apps in the Shopify App store that helps with the setup. However, &lt;strong&gt;there was no free, working solution or tutorial as of last week&lt;/strong&gt;. The tutorials and articles didn't include a way to track e-commerce data. &lt;/p&gt;

&lt;p&gt;That's where we came up with the idea of making a free tool that will allow people to set up Google Analytics 4 on Shopify stores - and also send the e-commerce data. &lt;/p&gt;

&lt;p&gt;I wanted to create content also on dev.to for this wonderful community. I have also created a &lt;a href="https://youtu.be/K0kUtXVi0cE"&gt;video tutorial&lt;/a&gt; in case you prefer a video version. Let's get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-use-ga4-and-how" class="anchor"&gt;
  &lt;/a&gt;
  Should you use GA4 and how?
&lt;/h2&gt;

&lt;p&gt;Google suggests using the old one (UA) and the new one (GA4) together. While you start collecting data and taking advantage of GA4, you still have the UA's known interface and advantages. A quick guide to how to do that: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-the-new-accounts" class="anchor"&gt;
  &lt;/a&gt;
  For the new accounts:
&lt;/h4&gt;

&lt;p&gt;You will see Google Analytics 4 as a default option if you want to create an account now. However, there is an &lt;em&gt;Advanced Setting&lt;/em&gt; that allows you to create both GA4 and Universal Analytics. Go to the "Create Google Analytics Account" screen and find the "Advanced" setting - kindly check the GIF below: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bssn3prg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ifuqeuiy5lg97cj528j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bssn3prg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ifuqeuiy5lg97cj528j.gif" alt="Creating Google Analytics 4 and UA accounts together"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-the-existing-accounts" class="anchor"&gt;
  &lt;/a&gt;
  For the existing accounts:
&lt;/h4&gt;

&lt;p&gt;Upgrade your current account. It won't make you lose any data, don't worry about it. It is actually not "an upgrade"; it will just create a new GA4 account attached to your existing UA account. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22ZkYU-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n76q0kkvqxgqhn5gs2gn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22ZkYU-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n76q0kkvqxgqhn5gs2gn.gif" alt="Upgrading your current account"&gt;&lt;/a&gt;&lt;br&gt;
After you do this, you will find your new GA4 account; under your properties at the top menu. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-get-the-ga4-global-tag" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Get the GA4 Global Tag
&lt;/h2&gt;

&lt;p&gt;As you have the account now, it is time to get the new global tag and insert it into your Shopify store. &lt;br&gt;
Find your new GA account in your Google Analytics, and then &amp;gt;  Click Admin &amp;gt; Data Streams &amp;gt; Click the Tag &amp;gt; And then find Global Tag and copy the full code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uvD_Okvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c60u35qqw4al73mfe8o6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uvD_Okvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c60u35qqw4al73mfe8o6.gif" alt="Copy GA4 Global Tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-insert-the-tag-into-shopifys-main-theme-file" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Insert the tag into Shopify's main theme file
&lt;/h2&gt;

&lt;p&gt;The global tag should be on every page. You should insert that into Shopify theme's main file: theme.liquid - right below &lt;/p&gt;.&lt;br&gt;
Shopify Admin &amp;gt; (left bar) Online Store &amp;gt; Themes &amp;gt; Actions (near your active theme) &amp;gt; Edit Code --- And then find theme.liquid. It should look like this &amp;gt; &lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmN2dqYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8n8toxpblel2u8ac5lfv.jpg" alt="Adding GA4 tag into Shopify theme"&gt;
&lt;h2&gt;
  &lt;a href="#step-3-get-your-checkout-tag-from-analyzify-ga4-wizard" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Get your checkout tag from Analyzify GA4 Wizard
&lt;/h2&gt;

&lt;p&gt;Everything was standard until now. Now we have come to the existing part. Our team has prepared a special code block to be inserted and rendered in your Checkout/thank you page. It includes Shopify's shortcode for order confirmation details such as order ID, revenue, etc - and also GA4's Purchase Event tag including your measurement ID. &lt;br&gt;
Go to our free tool &amp;gt; &lt;a href="https://analyzify.app/google-analytics-4-shopify/"&gt;Analyzify GA4 Wizard for Shopify&lt;/a&gt;, fill the simple form, and get your code. It should look like this &amp;gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cu56KxSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/09y0lhzvhdzyx5h9pkuo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cu56KxSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/09y0lhzvhdzyx5h9pkuo.jpg" alt="Analyzify Google Analytics 4 Shopify Wizard"&gt;&lt;/a&gt; Copy the code and move to the next step. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-paste-the-code-into-shopifys-checkout-screen" class="anchor"&gt;
  &lt;/a&gt;
  Step 4: Paste the code into Shopify's Checkout screen
&lt;/h2&gt;

&lt;p&gt;As this is an e-commerce purchase code, it should be rendered when someone makes a purchase. Shopify allows us to add additional scripts into "Order Processing" and "Thank you" pages. Go to Shopify Admin &amp;gt; Settings &amp;gt; General &amp;gt; Checkout and then find Order Processing &amp;gt; Additional Scripts - and paste it there. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-verify-make-sure" class="anchor"&gt;
  &lt;/a&gt;
  Step 5: Verify - Make Sure!
&lt;/h2&gt;

&lt;p&gt;All good! It should be working perfectly now if you followed the steps properly. You can wait for some purchases to happen in your online store so that you can check if data flows into your new GA4 account. You can also follow &lt;a href="https://youtu.be/K0kUtXVi0cE?t=789"&gt;this video tutorial&lt;/a&gt; to make a test purchase and see if the related events are being triggered and shown in Google Analytics 4. &lt;/p&gt;

&lt;p&gt;I hope you find it useful and feel free to let us know if you have any questions or face any issues. &lt;/p&gt;

</description>
      <category>googleanalytics4</category>
      <category>googleanalytics</category>
      <category>shopify</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Implement a GraphQL API on Top of an Existing REST API</title>
      <author>Tyler Hawkins</author>
      <pubDate>Tue, 02 Feb 2021 11:54:10 +0000</pubDate>
      <link>https://dev.to/thawkin3/how-to-implement-a-graphql-api-on-top-of-an-existing-rest-api-2g9l</link>
      <guid>https://dev.to/thawkin3/how-to-implement-a-graphql-api-on-top-of-an-existing-rest-api-2g9l</guid>
      <description>&lt;p&gt;Where do you keep your dad jokes? In a &lt;em&gt;dadabase&lt;/em&gt; of course! Let’s imagine that you are a site maintainer for the world’s best dad joke database. Your app communicates with the database using a REST API that allows you to retrieve jokes and post ratings for those jokes. Visitors to your site can rate each joke they see via a simple user interface.&lt;/p&gt;

&lt;p&gt;Recently you heard of a fancy new technology called GraphQL that provides the flexibility to request only the data that you need using a single API endpoint. It sounds neat, and you’d like to start using it in your app. But, you’d really prefer not to make any breaking changes to the existing REST API. Is it possible to support both the REST API and the GraphQL API in your app? You’re about to find out!&lt;/p&gt;

&lt;p&gt;In this article we’ll explore what it takes to implement a GraphQL API on top of an existing REST API. This strategy allows you to start using GraphQL in legacy portions of your app without breaking any existing contracts with functionality that may still rely on the original REST API.&lt;/p&gt;

&lt;p&gt;If you’d like to see the end result, you can find the &lt;a href="https://github.com/thawkin3/dad-joke-dadabase-rest-api"&gt;code for the REST API here&lt;/a&gt; and the &lt;a href="https://github.com/thawkin3/dad-joke-dadabase"&gt;code for the frontend and GraphQL API here&lt;/a&gt;. Don’t forget to &lt;a href="https://dad-joke-dadabase.herokuapp.com/"&gt;visit the app&lt;/a&gt; as well to groan at some jokes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-initial-architecture" class="anchor"&gt;
  &lt;/a&gt;
  The Initial Architecture
&lt;/h2&gt;

&lt;p&gt;The app’s backend was originally built using &lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt; and &lt;a href="https://github.com/typicode/json-server"&gt;JSON Server&lt;/a&gt;. JSON Server utilizes &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; to provide a full REST API to a mock database generated from a simple JSON file. A separate Express server takes care of serving the static HTML, CSS, and JavaScript assets for the frontend. The frontend is implemented in vanilla JS and uses the browser’s built-in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;Fetch API&lt;/a&gt; to make the API requests. The app is hosted on &lt;a href="https://devcenter.heroku.com/"&gt;Heroku&lt;/a&gt; to make deployment and monitoring a breeze.&lt;/p&gt;

&lt;p&gt;Our JSON file contains information for a few jokes as well as some ratings. It’s reproduced in full below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;JSON Server takes that file as a starting point for the database and then implements a REST API that includes support for GET, POST, PUT, PATCH, and DELETE requests. The magic of JSON Server is that using this API really does modify the underlying JSON file, so the database is fully interactive. JSON Server can be started directly from an npm script without any additional setup, but in order to provide a little more configuration and a dynamic port, we can instead write a few lines of code like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can test out our mock database by cloning the &lt;a href="https://github.com/thawkin3/dad-joke-dadabase-rest-api"&gt;repo for the API&lt;/a&gt;, running &lt;code&gt;npm install&lt;/code&gt;, and then running &lt;code&gt;npm start&lt;/code&gt;. If you navigate to &lt;a href="http://localhost:3000/jokes"&gt;http://localhost:3000/jokes&lt;/a&gt; you'll see all of the jokes. Navigating to &lt;a href="http://localhost:3000/ratings"&gt;http://localhost:3000/ratings&lt;/a&gt; will display all the ratings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WINU5lSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3524/0%2AhKZlLEM_mzlVLnLE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WINU5lSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3524/0%2AhKZlLEM_mzlVLnLE.png" alt="/jokes API endpoint returns all the jokes when running the app locally"&gt;&lt;/a&gt;&lt;/p&gt;
/jokes API endpoint returns all the jokes when running the app locally



&lt;p&gt;Wonderful! We can run our app’s backend locally in the browser. Now let’s get our API hosted on Heroku. First, we need to &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;install the Heroku CLI&lt;/a&gt;. After that, we can log in, create the app, push it to Heroku, and open the new app in our browser in four easy steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# log in to your Heroku account&lt;/span&gt;
heroku login

&lt;span class="c"&gt;# create the Heroku app&lt;/span&gt;
heroku create dad-joke-dadabase-rest-api

&lt;span class="c"&gt;# deploy the code to Heroku&lt;/span&gt;
git push heroku master

&lt;span class="c"&gt;# open the Heroku app on your machine&lt;/span&gt;
heroku open
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And look, now we have a publicly available API out on the web!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWDfMi0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3500/0%2AUG1tnsWGg6C_EyoX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWDfMi0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3500/0%2AUG1tnsWGg6C_EyoX.png" alt="/jokes API endpoint returns all the jokes when hosting the API on Heroku"&gt;&lt;/a&gt;&lt;/p&gt;
/jokes API endpoint returns all the jokes when hosting the API on Heroku




&lt;h2&gt;
  &lt;a href="#building-the-user-interface" class="anchor"&gt;
  &lt;/a&gt;
  Building the User Interface
&lt;/h2&gt;

&lt;p&gt;Now that we have a working REST API, we can build the frontend to consume that API and display the user interface for viewing and rating jokes. The HTML provides a shell of the page with containers into which the JavaScript will insert content for each joke.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The JavaScript is shown below. The key pieces that interact with the REST API are the two fetch requests. The first fetches all of the jokes from the database by hitting the &lt;code&gt;/jokes?_embed=ratings&lt;/code&gt; endpoint. The second makes a POST request to the &lt;code&gt;/ratings&lt;/code&gt; endpoint to submit a new rating for each joke you rate.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rj95ixdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lf0remusyakuq9icvmu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rj95ixdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lf0remusyakuq9icvmu7.png" alt='Dad joke "dadabase" user interface allows you to rate each joke'&gt;&lt;/a&gt;&lt;/p&gt;
Dad joke "dadabase" user interface allows you to rate each joke






&lt;h2&gt;
  &lt;a href="#setting-up-apollo-server" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up Apollo Server
&lt;/h2&gt;

&lt;p&gt;So, that’s the existing app architecture: a simple frontend that interacts with the database via a REST API. Now how can we begin using GraphQL? We’ll start by installing &lt;a href="https://www.npmjs.com/package/apollo-server-express"&gt;apollo-server-express&lt;/a&gt;, which is a package that allows us to use &lt;a href="https://www.apollographql.com/docs/apollo-server/getting-started/"&gt;Apollo Server&lt;/a&gt; with Express. We'll also install the &lt;a href="https://www.npmjs.com/package/apollo-datasource-rest"&gt;apollo-datasource-rest&lt;/a&gt; package to help us integrate the REST API with Apollo Server. Then we'll configure the server by writing the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;As you can see, we configure Apollo Server with type definitions (&lt;code&gt;typeDefs&lt;/code&gt;), &lt;code&gt;resolvers&lt;/code&gt;, and &lt;code&gt;dataSources&lt;/code&gt;. The &lt;code&gt;typeDefs&lt;/code&gt; contain the &lt;a href="https://www.apollographql.com/docs/apollo-server/schema/schema/"&gt;schema&lt;/a&gt; for our GraphQL API. In it, we'll define types for our jokes and ratings as well as how to query and mutate them. The &lt;code&gt;resolvers&lt;/code&gt; tell the server how to handle various queries and mutations and how those link to our &lt;a href="https://www.apollographql.com/docs/apollo-server/data/data-sources/"&gt;data sources&lt;/a&gt;. And finally, the &lt;code&gt;dataSources&lt;/code&gt; outline how the GraphQL API relates to the REST API.&lt;/p&gt;

&lt;p&gt;Here are the type definitions for the &lt;code&gt;Joke&lt;/code&gt; and &lt;code&gt;Rating&lt;/code&gt; types and how to query and mutate them:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The jokes data source defines methods for calling the original REST API endpoint to create, read, update, and delete jokes from the database:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The ratings data source looks nearly identical, but with “rating” substituted for “joke” in every instance. (&lt;a href="https://github.com/thawkin3/dad-joke-dadabase/blob/master/src/ratingsAPI.js"&gt;Refer to the GitHub repo&lt;/a&gt; if you’d like to see the code for this.)&lt;/p&gt;

&lt;p&gt;Finally, we set up our resolvers to show how to use the data sources:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With that, we have everything in place we need in order to start using our GraphQL API through Apollo Server. To get our new frontend and GraphQL API hosted on Heroku, we’ll create and deploy a second app like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# create the Heroku app&lt;/span&gt;
heroku create dad-joke-dadabase

&lt;span class="c"&gt;# deploy the code to Heroku&lt;/span&gt;
git push heroku master

&lt;span class="c"&gt;# open the Heroku app on your machine&lt;/span&gt;
heroku open
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#replacing-the-endpoint-to-fetch-jokes" class="anchor"&gt;
  &lt;/a&gt;
  Replacing the Endpoint to Fetch Jokes
&lt;/h2&gt;

&lt;p&gt;You’ll recall that we have two endpoints used by the frontend: one to fetch jokes and one to post ratings. Let’s swap out the REST API for our GraphQL API when we fetch the jokes. The code previously looked like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Now to use the GraphQL endpoint, we can write this instead:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We can run the app locally now and verify that the user experience still works properly. In fact, from the user’s point of view, nothing has changed at all. But if you look at the network requests in your browser’s developer tools, you’ll see that we’re now fetching our jokes from the &lt;code&gt;/graphql&lt;/code&gt; endpoint. Amazing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGLTw4vi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2520/0%2AketnaG9b4tR0O0O4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGLTw4vi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2520/0%2AketnaG9b4tR0O0O4.png" alt="The Network tab shows a request is being made to the /graphql endpoint now"&gt;&lt;/a&gt;&lt;/p&gt;
The Network tab shows a request is being made to the /graphql endpoint now






&lt;h2&gt;
  &lt;a href="#replacing-the-endpoint-to-submit-ratings" class="anchor"&gt;
  &lt;/a&gt;
  Replacing the Endpoint to Submit Ratings
&lt;/h2&gt;

&lt;p&gt;One API request down, one to go! Let’s swap out the ratings submission functionality now. The code to post a new joke rating previously looked like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To use our GraphQL API, we’ll now use the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;A quick test gives us some promising results. Once again, the user experience remains unchanged, but now we’re fully using the &lt;code&gt;/graphql&lt;/code&gt; endpoint for both our requests!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We did it! We successfully wrote a GraphQL API endpoint on top of an existing REST API. This allows us to use GraphQL to our heart’s content without breaking existing functionality and without modifying the original REST API. Now we can deprecate the REST API or get rid of it completely at a later date.&lt;/p&gt;

&lt;p&gt;While our dad joke database is entirely fictional, nearly every technology company that existed prior to GraphQL’s release in 2015 will find themselves in this same position of migrating to GraphQL if and when they choose to do so. The good news is that Apollo Server is flexible enough to pull data from a variety of sources, including existing REST API endpoints.&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>heroku</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
