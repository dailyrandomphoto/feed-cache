<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Strengthen your iOS/ANDROID application with MobSF!
</title>
      <author>Sankalp Swami</author>
      <pubDate>Tue, 30 Nov 2021 10:55:44 +0000</pubDate>
      <link>https://dev.to/aviyel/strengthen-your-iosandroid-application-with-mobsf-3mo9</link>
      <guid>https://dev.to/aviyel/strengthen-your-iosandroid-application-with-mobsf-3mo9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7ELZQex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1638256756497-event-announcement-1-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7ELZQex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1638256756497-event-announcement-1-resized.png" alt="MobSF" width="760" height="380"&gt;&lt;/a&gt;&lt;br&gt;
When you are developing a mobile app, the data security for your mobile app is as important as other elements of your mobile app. Every app has some critical and sensitive data like your passcodes, banking information, and more which can be exploited and it is something that you donâ€™t want at any cost. It is your responsibility to build trust with the users and maintain the user's privacy. When you are connected to the web, you don't know what might happen when. These days safety is a prime concern, Aviyel is coming with another valuable and informative event where you will learn how to secure your application before its release.&lt;/p&gt;

&lt;p&gt;Why should one join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will learn the importance of security in general.&lt;/li&gt;
&lt;li&gt;You will learn the role of &lt;a href="https://aviyel.com/projects/7/mobile-security-framework"&gt;MobSF&lt;/a&gt; in mobile application security.&lt;/li&gt;
&lt;li&gt;You will forge ahead with the computer security ecosystem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Habdul Hazeez is coming live on Coffee&amp;amp;Code to help you gain the importance &amp;amp; viability of your mobile application security. Habdul got into technology in 2011starting with computer security reading blogs on The Hacker News, Bruce Schneier's, and Krebs on Security. This interest led to the pursuit of a B.Sc degree in computer science. Currently, Habdul is a tech blogger in Web Development and Computer Security domain. You'll find most of his writings on DEV. He has also contributed articles for the LogRocket blog and CSS-Tricks.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with APIs and &lt;a href="https://aviyel.com/discussions"&gt;open-source&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date: December 4th, 2021&lt;br&gt;
Time: 8.00 AM PST | 11:00 AM EST&lt;br&gt;
Register Here ðŸ‘‰:&lt;/strong&gt; &lt;a href="https://bit.ly/3FXoFxA"&gt;https://bit.ly/3FXoFxA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our &lt;a href="https://aviyel.com/events"&gt;events&lt;/a&gt;!&lt;br&gt;
Letâ€™s build open-source together! ðŸŽ‰&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Habdul Hazeez Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/ziizium"&gt;ziizium&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/ziizium"&gt;ziizium&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a href="https://dev.to/ziizium"&gt;ziizium&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://linkedin.com/in/ziizium"&gt;Habdul Hazeez&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>security</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>ðŸ§° Setting up your username and email in Git at your first dev job</title>
      <author>Stefi Rosca</author>
      <pubDate>Tue, 30 Nov 2021 10:37:15 +0000</pubDate>
      <link>https://dev.to/stefirosca/setting-up-your-username-and-email-in-git-at-your-first-dev-job-13ej</link>
      <guid>https://dev.to/stefirosca/setting-up-your-username-and-email-in-git-at-your-first-dev-job-13ej</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TxsKK3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dub8lvb336t4xu0o4nf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TxsKK3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dub8lvb336t4xu0o4nf3.png" alt="Before and after example with image and name from profile" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the things I had to do when getting my first job was configuring Git. Unless you setup your name and email address Git will take it from the environment. This is important because every Git commit uses this information and if it's not setup correctly it will not be linked to your Github account. Hence if you have a profile picture it won't show.&lt;/p&gt;

&lt;p&gt;There are 2 ways to do it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Globally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open the command line and run the following commands with your name and email.&lt;/p&gt;

&lt;p&gt;To setup your username:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --global user.name "Stefi Rosca"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To setup your email:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --global user.email "stefi.rosca@me.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case you only have to do it once and Git will always use this information for anything you do on that system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Repository-specific&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From the command line, change into a repository directory where you want to make this change and then run the commands as below.&lt;/p&gt;

&lt;p&gt;To setup your username:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config user.name "Stefi Rosca"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To setup your email address:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config user.email "stefi.rosca@me.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test that you set it up correctly you can run in your in a specific Git terminal &lt;code&gt;git config user.email&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure you change the name and email in the example above to yours. &lt;/p&gt;

&lt;p&gt;For more information check out chapter on Getting Started from the &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup"&gt;Pro Git book&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Laravel Envoy setup</title>
      <author>skino</author>
      <pubDate>Tue, 30 Nov 2021 10:20:09 +0000</pubDate>
      <link>https://dev.to/skino2020/laravel-envoy-setup-2m0</link>
      <guid>https://dev.to/skino2020/laravel-envoy-setup-2m0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I'm sure that I'm not the only person like this but i often forget to run certain commands when pulling my blog live from GitHub. The two I'm terrible for are &lt;strong&gt;php artisan&lt;/strong&gt; &lt;strong&gt;migrate&lt;/strong&gt; and &lt;strong&gt;php artisan config:cache&lt;/strong&gt;. I don't know what the reason is for this but its been a pain in the neck for me for a while, i shamefully spent 45 mins trying to figure out why my posts weren't going over to Dev.to and the only error i was getting was "connection refused". Turns out i had not run the config cache to make my .env changes live...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-envoy"&gt;
  &lt;/a&gt;
  Introducing Envoy
&lt;/h3&gt;

&lt;p&gt;Envoy isn't a new package and I've just put off setting it up for no good reason until today.... its time to get the automation of my pull's to live working and it couldn't be easier!.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-one-require-the-package"&gt;
  &lt;/a&gt;
  Step One - Require the package
&lt;/h3&gt;

&lt;p&gt;As with almost all packages worth mentioning with Laravel this has a simple command to install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require laravel/envoy --dev

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ye that's really it for the installation...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-specify-the-server"&gt;
  &lt;/a&gt;
  Step 2 - Specify the server
&lt;/h3&gt;

&lt;p&gt;Envoy uses code from a file in the root of your project (which you need to create) called &lt;strong&gt;Envoy.blade.php&lt;/strong&gt;. In this file we will specify our Server and the jobs required.&lt;/p&gt;

&lt;p&gt;so firs things first we need to specify the server to run the code one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@servers(['localhost' =&amp;gt; '127.0.0.1'])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm setting this up for my blog, so i don't have any replication as at this stage it would be overkill for my simple setup. if you wanted to add more than one server you would need to pass the server names and IP's to the Array like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@servers(['Raspada-web-1' =&amp;gt; '192.168.1.68', 'Raspada-web-2' =&amp;gt; '192.168.1.69'])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-lets-tell-a-story"&gt;
  &lt;/a&gt;
  Step 3 - Lets tell a story!
&lt;/h3&gt;

&lt;p&gt;Thing i like about the way Envoy works is i can set it up and "talk out" my process like i do to my "Coding Duck"... if your Unsure what a coding duck is, quite simply its a rubber duck that when i'm struggling with a problem i talk through my issue with the duck... Sounds mental but it bloody works, often talking through your issue out loud will help you solve it... anyway back to our story. What should i be doing each time i make changes and make them live....&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git pull: Well duh! Merge the branch your working on into the main/master and pull to live&lt;/li&gt;
&lt;li&gt;Migrate: i want to run the migrate command just in case i have made some changes to tables.&lt;/li&gt;
&lt;li&gt;install composer packages for production: i want to install the packages for the live environment... not dev ones.&lt;/li&gt;
&lt;li&gt;Dump-Autoload: i want to clear out any auto-loaded classes that may have changed with my work completed.&lt;/li&gt;
&lt;li&gt;config-cache: i want to ensure all changes i have made to files like .env or saved to cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's our story! so how do we define this? well we use the &lt;a class="mentioned-user" href="https://dev.to/story"&gt;@story&lt;/a&gt;
 code and name our story... for this tutorial were going to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@story('code_update')
// story chapters here
@endstory

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So my story so far is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@servers(['localhost' =&amp;gt; '127.0.0.1'])

@story('code_update')
gitpull
migrate
composerinstall
dumpautoload
savenewconfig
@endstory

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4 - Create the Tasks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our main story for envoy we need to make each individual task with the required code inside.&lt;/p&gt;

&lt;p&gt;So first things first id suggest layout out each task accordingly like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@servers(['localhost' =&amp;gt; '127.0.0.1'])

@story('code_update')
gitpull
migrate
composerinstall
dumpautoload
savenewconfig
@endstory


@task('gitpull')

@endtask

@task('migrate')

@endtask

@task('composerinstall')

@endtask

@task('dumpautoload')

@endtask

@task('savenewconfig')

@endtask

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Starting to get the idea?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-add-the-commands"&gt;
  &lt;/a&gt;
  Step 5 - Add the commands
&lt;/h3&gt;

&lt;p&gt;For this bit you just need to write the commands you would normally run (when you don't forget :S ) inside each of the tasks. when you're finished you should have something like mine below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@task('gitpull')
    git pull
@endtask

@task('migrate')
    php artisan migrate --force
@endtask

@task('composerinstall')
    composer install --no-dev
@endtask

@task('dumpautoload')
    composer dump-autoload
@endtask

@task('savenewconfig')
    php artisan config:cache
@endtask

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-finish-the-story"&gt;
  &lt;/a&gt;
  Step 6 - Finish the story
&lt;/h3&gt;

&lt;p&gt;All good stories come to an end... and envoy isn't any different we need to set the @finished flag&lt;/p&gt;

&lt;p&gt;You could leave this blank if you wanted to but seems a bit daft when Envoy makes it so easy to integrate with platforms like Slack, MS teams and Discord.&lt;/p&gt;

&lt;p&gt;For this im going to be just using some text in the terminal for when i pull.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@finished
    if ($exitCode &amp;gt; 0) {
       &amp;lt;span class="hljs-regexp"&amp;gt;// There were errors in one of the tasks...
    }
@endfinished
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#run-the-envoy-command"&gt;
  &lt;/a&gt;
  Run the Envoy command
&lt;/h3&gt;

&lt;p&gt;So first of we will pull this to our live environment after out branch merge (unless you were naughty and working on main/master!).&lt;/p&gt;

&lt;p&gt;we will then need to run composer install to just get Envoy working on live. and then you can run your full story by typing this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php vendor/bin/envoy run code_update

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first time i ran this i got a bit scared because i seen a wall of red text.... don't worry its fine!... and that it, if you really want to be clever you could alias the command in your terminal to something like deploy-blog, deploy-saas so from anywhere on your server it will CD to the directory and run the command for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#all-done"&gt;
  &lt;/a&gt;
  All done...
&lt;/h3&gt;


&lt;p&gt;Now this will go live and just work and it will make my life easier. i haven't even scratched the surface yet with what i can do with envoy, I've not spoken about queue:restarts as i don't have any queues yet, I've not talked about running the envoy stories on multiple servers at the same time either. there is so much more this package can do!&lt;br&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;Raspada-Blog&lt;/h2&gt;  I post on my blog primarily and share the posts via API, please check out &lt;a href="//www.raspada-blog.co.uk"&gt;Raspada-Blog&lt;/a&gt; for more posts and information. If you have any questions please message me on twitter or use my website contact form.

</description>
      <category>git</category>
      <category>php</category>
      <category>laravelenvoy</category>
    </item>
    <item>
      <title>Django Basics: Views and URLs </title>
      <author>Meet Gor</author>
      <pubDate>Tue, 30 Nov 2021 10:18:32 +0000</pubDate>
      <link>https://dev.to/mr_destructive/django-basics-views-and-urls-3bmm</link>
      <guid>https://dev.to/mr_destructive/django-basics-views-and-urls-3bmm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;After getting familiar with the folder structure of the Django framework, we'll create our first view in an app. The basics of creating and mapping a view with a URL will be cleared by the end of this part. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-views"&gt;
  &lt;/a&gt;
  Creating Views
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Views are the functions written in python as a logic control unit of the webserver &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To create a view or typically-like function, we need to write a function in the &lt;code&gt;views.py&lt;/code&gt; file inside of the application folder. The function name can be anything but should be a sensible name as far as its usability is concerned. Let's take a basic example of sending an HTTP response of 'Hello World'. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameviewspy"&gt;
  &lt;/a&gt;
  project_name/app_name/views.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.http import HttpResponse 

def index(request):
    return HttpResponse('Hello World') 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, we are simply returning an HTTP Response right now, but rendering Templates/HTML Documents is quite similar and easy to grasp in Django. So, this is a view or a piece of logic but there is a piece missing in this. Where should this function be used? Of course a URL i.e a path to a web server. &lt;/p&gt;

&lt;p&gt;We'll see how to map the views to an URL in Django in the next section &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mapping-the-views-to-a-url"&gt;
  &lt;/a&gt;
  Mapping the Views to a URL
&lt;/h2&gt;

&lt;p&gt;We need to first create a &lt;code&gt;urls.py&lt;/code&gt; file in the application folder to create a map of the URL to be mapped with the view. After creating the file in the same app folder as the &lt;code&gt;views.py&lt;/code&gt;, import the function in the view into the file. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameurlspy"&gt;
  &lt;/a&gt;
  project_name/app_name/urls.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from .views import index 
from django.urls import path  

urlpatterns = [     
    path('', index, name='index'), 
] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path can be anything you like but for simplicity, we'll keep it blank('') for now.    &lt;/p&gt;

&lt;p&gt;Now, you have the path for your view to work but it's not linked to the main project. We need to link the app urls to the project urls.  &lt;/p&gt;

&lt;p&gt;To link the urls of your app to the main project folder, you need to just add a single line of code in the &lt;code&gt;urls.py&lt;/code&gt; file of the project folder. &lt;/p&gt;

&lt;p&gt;In projectname folder -&amp;gt; urls.py &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameurlspy"&gt;
  &lt;/a&gt;
  project_name/urls.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin 
from django.urls import path, include 

urlpatterns = [     
    path('admin/', admin.site.urls), 
    path('', include('post.urls')), 
] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to add the line &lt;code&gt;path('', include('post.urls')),&lt;/code&gt; and also import the &lt;code&gt;include&lt;/code&gt; function from &lt;code&gt;django.urls&lt;/code&gt;. This additional statement includes the urls or all the &lt;code&gt;urlpatterns&lt;/code&gt; in the &lt;code&gt;post&lt;/code&gt; app from the &lt;code&gt;urls.py&lt;/code&gt; file into the project's url-routes.  &lt;/p&gt;

&lt;p&gt;Here, the URL path can be anything like &lt;code&gt;'home/'&lt;/code&gt;, &lt;code&gt;'about/'&lt;/code&gt;, &lt;code&gt;'posts/'&lt;/code&gt;, etc. but since we are just understanding the basics, we'll keep it &lt;code&gt;''&lt;/code&gt; i.e. the root URL.  &lt;/p&gt;

&lt;p&gt;You can also see that there is another route in our project &lt;code&gt;'admin/'&lt;/code&gt; which is a path to the admin section. We'll explore this path and the entire Admin Section in some other part of this series. &lt;/p&gt;

&lt;p&gt;Now if you start the server and visit the default URL i.e &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;, you will see a simple HTTP message &lt;code&gt;Hello World&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzlBJSKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638194390/blogmedia/uv1_xf4byq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzlBJSKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638194390/blogmedia/uv1_xf4byq.png" alt="Hello World view" width="529" height="541"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-the-raw-path-endraw-function-in-urlpatterns"&gt;
  &lt;/a&gt;
  Breaking the &lt;code&gt;path&lt;/code&gt; function in urlpatterns
&lt;/h2&gt;

&lt;p&gt;The path function in the urlpatterns takes in at least 2 parameters, i.e. the URL pattern and the view of any other function that can be related to the webserver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path( ' ',   view,    name )        
       ^       ^        ^        
       |       |        |       
       |       |     url_name       
       |   function_name    
    url_path     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#url-path"&gt;
  &lt;/a&gt;
  URL path
&lt;/h3&gt;

&lt;p&gt;The URL Path is the pattern or literally the path which you use in the Browser's search bar. This can be static i.e. some hard-coded text like &lt;code&gt;home/&lt;/code&gt;, &lt;code&gt;user/&lt;/code&gt;, &lt;code&gt;post/home/&lt;/code&gt;, etc. and we can also have dynamic URLs like &lt;code&gt;post/&amp;lt;pk:id&amp;gt;/&lt;/code&gt;, &lt;code&gt;user/&amp;lt;str:name&amp;gt;/&lt;/code&gt;, etc. here the characters &lt;code&gt;&amp;lt;pk:id&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;str:name&amp;gt;&lt;/code&gt; will be replaced by the actual id(integer/primary key) or the name(String) itself.  &lt;/p&gt;

&lt;p&gt;This is used in an actual web application, where there might be a user profile that needs the unique user-id to render it specifically for that user. The User-Profile is just an example, it can anything like posts, emails, products, any form of a content-driven application.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h3&gt;

&lt;p&gt;The view or the function is the name of the function that will be attached to that URL path. That means once the user visits that URL, the function is literally called. &lt;strong&gt;View is just a fancy word for a function(or any logic basically).&lt;/strong&gt; There is a lot to be covered when it comes to &lt;code&gt;View&lt;/code&gt; as there are a lot of ways to create it, there are two types of views, how to use them for various use-cases that can be learned along the way because it is a topic where the crust of Django exists.   &lt;/p&gt;

&lt;p&gt;We'll learn to create different implementations and structure our views, for time-being just consider them as the unit where every operation on the web can be performed. We can create other standalone functions in python to work with the views to make it a bit structured and readable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#url-name"&gt;
  &lt;/a&gt;
  URL Name
&lt;/h3&gt;

&lt;p&gt;This is an optional parameter to the path function as we do not mandatorily need to give the URL map a name. This can be really useful in multi-page application websites where you need to link one page to another and that becomes a lot easier with the URL name. We do not need this right now, we'll touch it when we'll see the Django Templating Language.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-views"&gt;
  &lt;/a&gt;
  Example Views
&lt;/h2&gt;

&lt;p&gt;Let's create some examples to understand the working of Views and URLs. We'll create a dynamic URL and integrate the Python module in the views to get familiarized with the concept. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-urls"&gt;
  &lt;/a&gt;
  Dynamic URLs
&lt;/h3&gt;

&lt;p&gt;We can use the dynamic URLs or placeholder variables to render out the content dynamically. Let's create another set of View and URL map. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameviewspy"&gt;
  &lt;/a&gt;
  project_name/app_name/views.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def greet(request, name):
    return HttpResponse('Welcome, ' + name) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This view or function takes an additional argument called &lt;code&gt;name&lt;/code&gt; and in response, it just says &lt;code&gt;Welcome, name&lt;/code&gt; where the name can be any string. Now after creating the view, we need to map the view to a URL pattern, We'll add a path for this greet function.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameurlspy"&gt;
  &lt;/a&gt;
  project_name/app_name/urls.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path('greet/&amp;lt;str:name&amp;gt;/', greet, name='greet'), 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how we have created the url-pattern here. The greet part is static but the &lt;code&gt;&amp;lt;str:name&amp;gt;&lt;/code&gt; is a variable or just a URL parameter to be passed to the view as the value of the variable &lt;code&gt;name&lt;/code&gt;. We have also given the URL map a name called greet, just for demonstration of its creation.  &lt;/p&gt;

&lt;p&gt;You'll get an error, 100% if you are blindly following me! Didn't you forget something? &lt;/p&gt;

&lt;p&gt;Import the greet function from the views like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from .views import index, greet   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, after we visit the URL &lt;code&gt;https://127.0.0.1:8000/greet/harry&lt;/code&gt;, you should see a response &lt;code&gt;Welcome, harry&lt;/code&gt; as simple as that.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onlCT2vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252762/blogmedia/uv-greet_e2wg5o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onlCT2vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252762/blogmedia/uv-greet_e2wg5o.gif" alt="Greet URL Demo" width="510" height="413"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, how is this working? We see the view first. The function takes two parameters one is most common the request which stores the meta-data about the request, the other parameter is the name that we will be use to respond to the server dynamically. The name variable is used in the string with the HttpResponse function to return a simple string. &lt;/p&gt;

&lt;p&gt;Then, in the URLs, we need to find a way to pass the variable name to the view, for that we use the &lt;code&gt;&amp;lt;string:name&amp;gt;&lt;/code&gt; which is like a URL parameter to the view. The path function automatically parses the name to the appropriate view and hence we call the greet function with the name variable from the URL. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-pythonic-things"&gt;
  &lt;/a&gt;
  Using Pythonic things
&lt;/h3&gt;

&lt;p&gt;We'll use some Python libraries or functions in the Django App. In this way, we'll see it's nearly no-brainer to use Python functions or libraries in the Django framework as indeed all files which we are working with are Python files. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameviewspy"&gt;
  &lt;/a&gt;
  project_name/app_name/views.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from random import randint 

def dice(request):
    number = randint(1,6)     
    return HttpResponse(f"Its {number}") 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This view is using the random module, you can pretty much use other web-compatible modules or libraries. We have used the &lt;code&gt;random.randint&lt;/code&gt; function to generate the pseudo-random number between 1 and 6. We have used the f-string (&lt;code&gt;f"{variable}"&lt;/code&gt;)styled Response string as int is not compatible with the response concatenation. So this is the logic of our map, now we'll need to link it to a URL-path.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameurlspy"&gt;
  &lt;/a&gt;
  project_name/app_name/urls.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path('throw/', dice, name='dice'), 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, import the view name from the views as &lt;code&gt;from .views import dice&lt;/code&gt; also add other views if present. Now if we go to the URL &lt;code&gt;https://127.0.0.1:8000/throw/&lt;/code&gt;, we shall see a random number in the response. This is how we used Python to make the logic of our view. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkQkVTv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252951/blogmedia/uv-dice_bsodzq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkQkVTv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252951/blogmedia/uv-dice_bsodzq.gif" alt="Dice URL Demo" width="510" height="413"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So, that was the basics of creating and mapping views and urls. It is the most fundamental of the workflow in Django project development. You need to get familiar with the process of mapping Views and urls before diving into Templates, Models, and other complex stuff.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From this part of the series, we touched upon the basics of views and URLs. The concept of mapping URLs and views might have been much cleared and it will be even gripping after we explore the Template handling and Static files in the next part. If you have any queries or mistakes I might have made please let me know. Thanks for reading and Happy Coding :) &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>backend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>RudderStack: How Pachyderm Pipelines Help Parse Customer Event Data</title>
      <author>RudderStack</author>
      <pubDate>Tue, 30 Nov 2021 10:18:00 +0000</pubDate>
      <link>https://dev.to/rudderstack/rudderstack-how-pachyderm-pipelines-help-parse-customer-event-data-193p</link>
      <guid>https://dev.to/rudderstack/rudderstack-how-pachyderm-pipelines-help-parse-customer-event-data-193p</guid>
      <description>&lt;p&gt;Astasia from RedPoint Ventures wrote aÂ &lt;a href="https://medium.com/memory-leak/reverse-etl-a-primer-4e6694dcc7fb/"&gt;great post&lt;/a&gt;Â on new technologies supporting "reverse ETL" functionality in the customer data stack.&lt;/p&gt;

&lt;p&gt;We're excited to be innovating in the area of reverse ETL tech (via our Warehouse Actions feature), and our product and engineering teams discuss these topics and industry trends often, so we thought it would be helpful to provide a bit more technical depth on a few of Astasia's points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-data-movement-differs-between-event-streams-and-tabular-data-which-is-an-important-consideration-for-reverse-etl"&gt;
  &lt;/a&gt;
  1) Data Movement Differs Between Event Streams and Tabular Data, Which is an Important Consideration for Reverse ETL
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#differences-in-moving-data"&gt;
  &lt;/a&gt;
  Differences in Moving Data
&lt;/h3&gt;

&lt;p&gt;ETL/ELT solutions all accomplish a similar function, moving data, but there are several foundational differences to keep in mind when it comes to the data. One of those is the difference betweenÂ &lt;em&gt;event stream data&lt;/em&gt;Â andÂ &lt;em&gt;tabular data&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Everyone is familiar with this distinction on the ingestion side of the stack. Ingesting event streams is different from ingesting tabular data from SaaS applications (like Salesforce), not just in how the data is generated, i.e., pulled via API vs. generated by an SDK also in the structure of the data itself.&lt;/p&gt;

&lt;p&gt;This distinction has significant impacts, from real-time requirements to downstream reporting implications. This distinction has led to different vendors doing well in each category (i.e., Segment for event streaming and Fivetran for tabular data), but modern companies have to leverage both.&lt;/p&gt;

&lt;p&gt;At RudderStack, we believe there is an opportunity to do both well, together. In fact, a unified stack to do both can achieve some interesting things, like cross-pipeline identity stitching (i.e., joining Salesforce record IDs with anonymousIDs) and unified data governance. We're building these solutions at RudderStack, but that's a topic for a different post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#event-stream-vs-tabular-data-for-reverse-etl"&gt;
  &lt;/a&gt;
  Event Stream vs. Tabular Data for Reverse ETL
&lt;/h3&gt;

&lt;p&gt;When you hear the term reverse ETL, it's easy to think only of tabular data. The distinction still exists, though, and you can (and should) distinguish between event stream data and tabular data.&lt;/p&gt;

&lt;p&gt;Astasia touched on a few use cases for tabular data, but reverse ETL as an event stream is equally important. One use case we see quite often among our customers is sending events stored in logs (e.g., generated by your back end application and dumped into S3) into destinations like Google Analytics and Amplitude for analytics or platforms like Braze for marketing.&lt;/p&gt;

&lt;p&gt;Many of our customers also perform more advanced processing like data mining or ML modeling of logs before sending them as events, then use RudderStack to pipe the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-table-sync-can-be-modeled-as-an-event-stream"&gt;
  &lt;/a&gt;
  2) Table Sync can be Modeled as an Event Stream
&lt;/h2&gt;

&lt;p&gt;An important point related to tabular vs. event stream data is that tabular data can be modeled as events, but not necessarily the other way around. On the ETL/ELT side, CDC technologies (or incremental pulls) have generated quite a bit of interest because there are advantages of representing that data as events versus doing a batch pull via API.&lt;/p&gt;

&lt;p&gt;Some of those advantages include incremental syncs for real-time updates, maintaining a consistent point-in-time state, and routing the data to streaming technologies (we will cover this topic in more depth in a future post).&lt;/p&gt;

&lt;p&gt;This is possible becauseÂ &lt;em&gt;tabular data are actually a subset of event data&lt;/em&gt;. Similarly, batch processing is a subset of streaming processing. This means that tabular data can be derived from a stream of events and recreate the final state at any point (see event sourcing architecture). This is not true for the inverse, though.&lt;/p&gt;

&lt;p&gt;In fact, the reason the industry adopted the tabular/batch model was primarily technical---it is much more difficult to build and manage streaming data. However, this is changing with technologies like RudderStack.&lt;/p&gt;

&lt;p&gt;At RudderStack, we have modeled table sync as an event stream in our reverse ETL solution.&lt;/p&gt;

&lt;p&gt;At a high level, syncing a row from your warehouse to a 'row' in a cloud application is an "event" that specifies which data points are being mapped. Tools like Segment and RudderStack already accomplish that functionality withÂ &lt;code&gt;.identify&lt;/code&gt;Â calls in the event stream, so there is no inherent limitation of the data model for the use case.&lt;/p&gt;

&lt;p&gt;So, while there are certainly different user experiences for streaming-based solutions like RudderStack vs. table sync solutions like Census, they are primarily variations in UI/UX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-limitations-of-segments-personas-product-for-reverse-etl"&gt;
  &lt;/a&gt;
  3) The Limitations of Segment's Personas Product for Reverse ETL
&lt;/h2&gt;

&lt;p&gt;Astasia made a great point about the distinction between reverse ETL and Segment's Persona's product. Personas are a powerful product feature, but it isn't a reverse ETL solution. The reason is simple: Personas treats the user profile as a first-class object in data sync. The practical implication of this is that all data sync must conform to a contact/account structure. Still, as the recent increase in reverse ETL startups has shown, companies need sync functionality that serves a much wider range of use cases.&lt;/p&gt;

&lt;p&gt;Reverse ETL as an event stream directly from the warehouse is unhindered by those limitations. In fact, with our Warehouse Actions feature, our customers can turn warehouse tables into a flexible, configurable event stream. That includes updating contacts, accounts, and audiences, but can also support sending of cleansed internal events, derived proxy events (events represented by the absence of behavior), and use cases where the data needs to be delivered to other infrastructure via tools like Kafka, Redis or HTTP endpoints.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-reverse-etl-is-still-just-data-movement-and-a-single-pipe-simplifies-your-stack-security-and-data-governance"&gt;
  &lt;/a&gt;
  4) Reverse ETL is Still Just Data Movement, and a Single Pipe Simplifies Your Stack, Security, and Data governance
&lt;/h2&gt;

&lt;p&gt;Our mission at RudderStack is to help data engineers become the heroes of their companies by providing every team with rich data. We want to make their jobs easier, and part of that mission is simplifying data management into one pipeline.&lt;/p&gt;

&lt;p&gt;In the modern stack, the warehouse is king, and many destinations are also becoming sources (and vice versa!).&lt;/p&gt;

&lt;p&gt;For example, sources of data often include&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Events coming from your client or server-side apps&lt;/li&gt;
&lt;li&gt;  Data from your SaaS tools&lt;/li&gt;
&lt;li&gt;  Data from your internal databases&lt;/li&gt;
&lt;li&gt;  Data from your warehouses and data lakes (and...lakehouses)&lt;/li&gt;
&lt;li&gt;  Data from internal event streams (like Kafka).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When all of those sources are also destinations, almost every combination of source and destination is a use case, which creates some important categories of tooling in the customer data stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  App to warehouse/SaaS (event streaming)&lt;/li&gt;
&lt;li&gt;  SaaS to the warehouse ('traditional' ETL/ELT)&lt;/li&gt;
&lt;li&gt;  Warehouse to SaaS (new 'reverse ETL' category)&lt;/li&gt;
&lt;li&gt;  SaaS to SaaS (API to API category)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Increasingly, those categories within the stack need to support important use cases that are becoming standard but are still challenging for many companies to implement from a technical standpoint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Enabling customer-facing ML use-cases by sending live events to a key-value store (like Redis) for real-time personalization&lt;/li&gt;
&lt;li&gt;  Enabling internal ML use-cases by pulling data, enriching ML, then sending it from the warehouse to tools for internal teams (i.e., Salesforce, Marketo, etc.)&lt;/li&gt;
&lt;li&gt;  Streaming internal events from Kafka to SaaS applications&lt;/li&gt;
&lt;li&gt;  Feeding transformed data (features) to feature stores (like Tecton)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you step back and look at those categories and the use cases they must support, it becomes clear that a business could easily have to build or buy a significant number of technologies to enable all of the functionality. In fact, we hear from companies all of the time about the pain of managing multiple technologies and vendors (which means contracts) across data pipelines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:6770012325396262912?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A6770012325396262912%2C6770136342476263424%29/"&gt;One commenter&lt;/a&gt;Â on Astasia's LinkedIn post said it this way:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"I think we have failed as technologists if we need to build different tools to load data into a warehouse and get data out of the warehouse. This is "focus on doing one thing well" and "you must create a new category" gone too far."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We agree. Customers tell us all of the time that when it comes to managing pipelines in the context of the modern data stack, "best of breed" is becoming problematic to manage---after all, it's the same customer data.&lt;/p&gt;

&lt;p&gt;At RudderStack, we're building the complete customer data stack for simplified pipeline management, including the reverse ETL component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app.Â &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.This post explores the customer data stack of business partnerÂ &lt;a href="https://www.pachyderm.com/"&gt;Pachyderm&lt;/a&gt;, which offers a Kubernetes-based ETL (extract, transform, load) tool of the same name. We'll show how Pachyderm leverages real-time customer event data across different sources to gain deeper insights into user behavior in its product and optimize the UX to increase customer adoption.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pachyderm"&gt;
  &lt;/a&gt;
  What is Pachyderm?
&lt;/h2&gt;

&lt;p&gt;PachydermÂ &lt;a href="https://thenewstack.io/pachyderm-aims-displace-hadoop-container-based-collaborative-data-analysis-platform/"&gt;was designed&lt;/a&gt;Â to make building and managing end-to-end ML/AI pipelines easier, regardless of their size and complexity. With Pachyderm, you can track your data lineage and bring together version control for your data with the tools, languages, and frameworks of your choice to build scalable data science pipelines.&lt;/p&gt;

&lt;p&gt;With Pachyderm, there are three easy ways to get up and running with your data science pipelines. You can either deploy Pachyderm in your local environment, on your favorite cloud provider, or use the company's hosted and fully-managed SaaS platform:Â &lt;a href="https://hub.pachyderm.com/"&gt;Pachyderm Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-pachyderm-uses-its-data"&gt;
  &lt;/a&gt;
  How Pachyderm uses its Data
&lt;/h2&gt;

&lt;p&gt;Being a modern data science platform, all the teams within Pachyderm make extensive use of data for all their operations and KPIs. The customer team at Pachyderm uses their customer event data --- collected, routed, and warehoused with RudderStack Event Stream --- to understand user behavior and product usage patterns better. They also use this data to drive effective inbound and outbound marketing campaigns.&lt;/p&gt;

&lt;p&gt;Pachyderm uses product usage data --- again collected, routed, and warehoused with RudderStack Event Stream --- from within the Pachyderm Hub, its SaaS platform, for product analytics and optimizing the platform. They then leverage their event stream and product usage data along with non-event data from their cloud tools like Salesforce, HubSpot, Zendesk, Slack, and Google Analytics --- collected and warehoused with tools like Fivetran and Stitch.&lt;/p&gt;

&lt;p&gt;With a unique combination of customer event data, product usage data, and data from customer tools, along with modern data storage and processing tools, Pachyderm has set up a robust, powerful stack to leverage unlimited data for all activation use-cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pachyderms-customer-data-stack"&gt;
  &lt;/a&gt;
  Pachyderm's Customer Data Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Data Collection and Synchronization:Â RudderStack SDKs, RudderStack Event Stream, RudderStack Warehouse Actions, Stitch, Fivetran&lt;/li&gt;
&lt;li&gt;  Data Warehouse:Â Google BigQuery&lt;/li&gt;
&lt;li&gt;  Data Processing and Business Intelligence:Â Sigma Computing&lt;/li&gt;
&lt;li&gt;  Cloud Toolset for Activation Use-cases:Â HubSpot, Google Analytics, Zendesk, Salesforce, Outreach.io&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-data-flows-through-the-pachyderm-stack"&gt;
  &lt;/a&gt;
  How Data Flows Through the Pachyderm Stack
&lt;/h3&gt;

&lt;p&gt;Here's a visual representation of the data flow through Pachyderm's data stack:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQd4lGnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0vg5o3f7r7c11e42ciz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQd4lGnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0vg5o3f7r7c11e42ciz.png" alt="Pachyderm pipelines" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pachyderm pipelines&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-collection"&gt;
  &lt;/a&gt;
  Data Collection
&lt;/h3&gt;

&lt;p&gt;Pachyderm generates hundreds of gigabytes of data through tracking user interactions and data from cloud sources. All of this data resides in the customer data lake built on top of their data warehouse, Google BigQuery.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-streaming-and-warehousing"&gt;
  &lt;/a&gt;
  Data Streaming and Warehousing
&lt;/h3&gt;

&lt;p&gt;Pachyderm teams mainly use customer event data to track user journeys and trigger various downstream use-cases (such as marketing campaigns). They useÂ &lt;a href="https://rudderstack.com/?utm_content=inline-mention/"&gt;RudderStack&lt;/a&gt;Â Event Stream to route event data to downstream destinations such asÂ &lt;a href="https://rudderstack.com/integration/hubspot/"&gt;HubSpot&lt;/a&gt;Â andÂ &lt;a href="https://rudderstack.com/integration/google-analytics/"&gt;Google Analytics&lt;/a&gt;Â and their data warehouseÂ &lt;a href="https://rudderstack.com/integration/bigquery/"&gt;Google BigQuery&lt;/a&gt;. RudderStack's seamless integration with these platforms allows them to stream near real-time events for their activation use-cases.&lt;/p&gt;

&lt;p&gt;To track and capture event data on their web app, Pachyderm uses theÂ &lt;a href="https://docs.rudderstack.com/rudderstack-sdk-integration-guides/rudderstack-javascript-sdk/"&gt;RudderStack JavaScript SDK&lt;/a&gt;. For server-side capturing, it uses theÂ &lt;a href="https://docs.rudderstack.com/rudderstack-sdk-integration-guides/rudderstack-go-sdk/"&gt;RudderStack Go SDK&lt;/a&gt;. In addition to the SDKs, Pachyderm also uses theÂ &lt;a href="https://docs.rudderstack.com/rudderstack-api-spec/http-api-specification/"&gt;RudderStack HTTP API tracking&lt;/a&gt;Â for seamless recording and capturing of customer events.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"RudderStack has given us better access to our data. Our data was siloed in cloud sources. Now we have it all in a warehouse, making it accessible to everyone."\&lt;br&gt;
--- Dan Baker, Marketing Ops Manager, Pachyderm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#data-from-its-saas-platform-and-cloud-tools"&gt;
  &lt;/a&gt;
  Data from Its SaaS Platform and Cloud Tools
&lt;/h3&gt;

&lt;p&gt;Apart from customer events, Pachyderm collects data from Pachyderm Hub, its SaaS platform. This data mainly includes the customers' workspace usage details and other metrics related to the platform usage and performance. Pachyderm clusters (which host both their open-source and enterprise offerings) also generate a large chunk of the workspace usage data. This data is processed byÂ &lt;a href="https://webhookrelay.com/"&gt;Webhook Relay&lt;/a&gt;Â and streamed directly into the company's data warehouse.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"With RudderStack, there are fewer moving pieces. Having RudderStack means that we don't have to have a bunch of manual processes or APIs that we have to build for and support ourselves."\&lt;br&gt;
--- Dan Baker, Marketing Ops Manager, Pachyderm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pachyderm also pulls different types of data from a variety of cloud sources. Some of these include marketing data from HubSpot, customer and CRM data from tools like Salesforce and Zendesk, messaging data from Slack, advertisement and campaign data from tools like Google Ads, and insights from Google Analytics. To collect this data, Pachyderm uses popular ETL tools like Fivetran and Stitch.&lt;/p&gt;

&lt;p&gt;All of this information is useful for stitching together comprehensive customer profiles and understanding Pachyderm's in-product behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-transformation-and-business-intelligence"&gt;
  &lt;/a&gt;
  Data Transformation and Business Intelligence
&lt;/h3&gt;

&lt;p&gt;Once the data is in its data warehouse, Pachyderm usesÂ &lt;a href="https://www.sigmacomputing.com/"&gt;Sigma&lt;/a&gt;Â --- warehouse-focused analytics and BI tool --- for internal reporting and metrics tracking. Beyond general BI, it also uses Sigma to build queries, join tables, and aggregate the data stored from various sources, to give a single source of truth for customers.&lt;/p&gt;

&lt;p&gt;This transformed data is materialized in BigQuery for storage. The software then uses RudderStack Warehouse Actions to send this transformed data from the warehouse to downstream destinations like HubSpot.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*"*We already have a bunch of uses for Warehouse Actions, and we're only at the tip of the iceberg. Our future plans involve getting more data insights out of the warehouse, and Warehouse Actions will continue to be our go-to solution for this."\&lt;br&gt;
--- Dan Baker, Marketing Ops Manager, Pachyderm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#data-activation-usecases"&gt;
  &lt;/a&gt;
  Data Activation Use-Cases
&lt;/h3&gt;

&lt;p&gt;The way Pachyderm uses transformed data for the activation use-cases is quite interesting. All the customer event data and data coming from the apps and systems is primarily used for lead qualification and analyzing customer journeys and behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lead-qualification"&gt;
  &lt;/a&gt;
  Lead Qualification
&lt;/h3&gt;

&lt;p&gt;When a user first signs up on Pachyderm, the first course of action suggested is to create a workspace. Pachyderm's customer team encourages this action with drip emails. Once the user has created a workspace, an event is sent from the application backend to their data warehouse.&lt;/p&gt;

&lt;p&gt;The team then uses Sigma to determine the total number of workspaces created and workspaces created since the last run and materialize this data on the data warehouse. This information is then sent back to HubSpot with RudderStack Warehouse Actions. Once in HubSpot --- the inbound lead system --- this data is synced with Salesforce --- the outbound lead system. After the behavioral data from the application has made its way into their CRM, they use Outreach.io to drive their personalized messaging and email campaigns, and (in this example) they stop sending drip emails to a user that has created a workspace.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Getting aggregated event data into HubSpot and Salesforce is key for our Sales team to be able to effectively communicate with our customers."\&lt;br&gt;
--- Dan Baker, Marketing Ops Manager, Pachyderm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#customer-journey-and-behavior-analysis"&gt;
  &lt;/a&gt;
  Customer Journey and Behavior Analysis
&lt;/h3&gt;

&lt;p&gt;With event data captured across various customer touchpoints, the Pachyderm teams can now understand their customer's product journey and pinpoint any issues. They also get deeper insights into how their users are using the platform and optimize those specific aspects of the product to improve their customer experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplified-data-access-and-no-data-silos"&gt;
  &lt;/a&gt;
  Simplified Data Access and No Data Silos
&lt;/h2&gt;

&lt;p&gt;Before incorporating RudderStack into their customer data stack, the team at Pachyderm had to do any plumbing in HubSpot to move the data around the data warehouse. This, in turn, created a lot of data silos. They looked at other customer data platforms to solve these problems, but the cost was unjustifiable given what they were getting in return.&lt;/p&gt;

&lt;p&gt;With RudderStack now a core component of their customer data stack, Pachyderm can get all the event data into a centralized location --- the data warehouse --- to be used efficiently for analytics. In addition, RudderStack Warehouse Actions sends insights from the analysis to downstream tools for lead qualification and personalized marketing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app.Â &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>datapipeline</category>
      <category>pachyderm</category>
      <category>customerevents</category>
      <category>eventdata</category>
    </item>
    <item>
      <title>Top 15 Java Frameworks to Use in 2022</title>
      <author>Devesh Chauhan</author>
      <pubDate>Tue, 30 Nov 2021 10:17:11 +0000</pubDate>
      <link>https://dev.to/deveshchauhan04/top-15-java-frameworks-to-use-in-2022-69c</link>
      <guid>https://dev.to/deveshchauhan04/top-15-java-frameworks-to-use-in-2022-69c</guid>
      <description>&lt;p&gt;At a Java development project, you'll have plenty of options to choose from when it comes to frameworks. You might have heard of some, and others may be new to you, but the fact that there are so many available makes it hard to figure out which one might be best for your team or project.&lt;/p&gt;

&lt;p&gt;In this guide, we'll walk you through fifteen of the best Java frameworks currently available, so you can analyze &amp;amp; determine which one will work best with your needs. In no particular order:&lt;/p&gt;

&lt;p&gt;Hereâ€™s the list:&lt;br&gt;
Spring &lt;br&gt;
JSF &lt;br&gt;
Struts&lt;br&gt;
Hibernate&lt;br&gt;
Vaadin &lt;br&gt;
Play &lt;br&gt;
Dropwizard&lt;br&gt;
Blade &lt;br&gt;
Jersey &lt;br&gt;
OSGi &lt;br&gt;
GWT &lt;br&gt;
Spark&lt;br&gt;
Vert. x&lt;br&gt;
Richfaces&lt;br&gt;
Primefaces&lt;/p&gt;

&lt;p&gt;Letâ€™s explore them in detail&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-of-top-15-java-frameworks"&gt;
  &lt;/a&gt;
  List of Top 15 Java Frameworks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Spring Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09Be1bkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ni95ld49lrv4w4qml9ss.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09Be1bkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ni95ld49lrv4w4qml9ss.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Developed by SpringSource, Spring is an application framework that Rod Johnson wrote with flexibility in mind. Unlike many other frameworks before it, Spring wasn't explicitly designed for one type of application or development style. &lt;/p&gt;

&lt;p&gt;Instead, it's adaptable enough to work across different architectures and types of applications. To achieve its flexibility, Spring gives developers a wide range of programming options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Spring Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lightweight Framework&lt;/li&gt;
&lt;li&gt;Flexible libraries&lt;/li&gt;
&lt;li&gt;Powerful abstractions to JEE specifications&lt;/li&gt;
&lt;li&gt;Declarative support&lt;/li&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Top brands using Spring Framework: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accenture&lt;/li&gt;
&lt;li&gt;Deleo Korea&lt;/li&gt;
&lt;li&gt;Zalando&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Java Server Faces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YF5NaMYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u57jg5goo4rovq7a43n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YF5NaMYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u57jg5goo4rovq7a43n.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This framework, built by Sun Microsystems, was once used to create interactive web applications for desktop users. Later on, the development team scaled it down to suit mobile device technology. It is used to construct dynamic HTML user interfaces that are very similar to desktop applications. &lt;/p&gt;

&lt;p&gt;The functionality of these systems includes custom commands and page navigation capabilities, known as action commands. JSF is currently one of four standards included in Enterprise Development Projects under Oracle Development environments.&lt;/p&gt;

&lt;p&gt;It creates a standardized approach to many projects on different devices with different operating systems. These include mobile phones, standard computers, and extensive business servers with complex operating system structures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of JSF Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highly pluggable&lt;/li&gt;
&lt;li&gt;Robust event handling&lt;/li&gt;
&lt;li&gt;Rich managing architecture&lt;/li&gt;
&lt;li&gt;Render kit support&lt;/li&gt;
&lt;li&gt;Multiple vendor implementations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top brands using JSF Framework:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scopeland Technology&lt;/li&gt;
&lt;li&gt;Deutsche Kreditbank&lt;/li&gt;
&lt;li&gt;Insoft.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Struts Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyxebjjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7r8mjo63tro2k1vx9ql.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyxebjjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7r8mjo63tro2k1vx9ql.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Apache Struts is an open-source application framework for developing Java EE web applications. It was initially created by Craig McClanahan and donated to the Apache Software Foundation in 2000.&lt;/p&gt;

&lt;p&gt;Struts combine MVC design pattern, convention over configuration, and architecture-neutral API, thus reducing the development time of java business applications built on it. Struts are widely used for enterprise portal solutions, serving as a server-side component of JavaServer Faces (JSF). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Struts Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MVC structure&lt;/li&gt;
&lt;li&gt;Centralized configuration&lt;/li&gt;
&lt;li&gt;Good documentation&lt;/li&gt;
&lt;li&gt;Faster development&lt;/li&gt;
&lt;li&gt;Built-in capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top brands using Struts Framework&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coinatstar&lt;/li&gt;
&lt;li&gt;Spookies&lt;/li&gt;
&lt;li&gt;Aspen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Hibernate Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6V8dkRG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2lofzl7bhufky0c25lh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6V8dkRG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2lofzl7bhufky0c25lh.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Hibernate (sometimes called Hibernate ORM) is an object-relational mapping (ORM) framework for JVM-based programming languages. Hibernate provides database abstraction and gives your applications a uniform data access layer, making it possible to swap databases without having to rewrite every line of code that uses them.&lt;/p&gt;

&lt;p&gt;It also provides lazy loading of related data, cache support, primary key generation, and more. To start using Hibernate, you have to specify which database you're using in your application configuration file, then write Java classes that represent your tables in terms of objects with methods for storing/retrieving information from/to those objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Hibernate Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open-source&lt;/li&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Fast performance&lt;/li&gt;
&lt;li&gt;Simplifies complex joins&lt;/li&gt;
&lt;li&gt;Database independent query&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top brands using Hibernate Framework:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wealthsimple&lt;/li&gt;
&lt;li&gt;Trade Republic&lt;/li&gt;
&lt;li&gt;Ataccama ONE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. Vaadin Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSEki1Fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt11apwg7t9rvh5pge9e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSEki1Fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt11apwg7t9rvh5pge9e.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
The Vaadin framework is a client-side, open-source web application framework that is compatible with all major browsers. It is built on top of Google Web Toolkit and thus delivers rich features in a fast and reliable way. While it mainly makes modern web applications and business dashboards, it can also create animated desktop applications in Java.&lt;/p&gt;

&lt;p&gt;Available under the LGPL license, Vaadin brings in many benefits to both businesses and individual developers. The wide range of supported browsers enables you to reach larger audiences. At the same time, its unique UI components give you plenty of opportunities to add high-quality design elements to your apps. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Vaadin Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fully object-oriented&lt;/li&gt;
&lt;li&gt;Plug-in supports&lt;/li&gt;
&lt;li&gt;Smooth integration&lt;/li&gt;
&lt;li&gt;Multiple components &amp;amp; layouts&lt;/li&gt;
&lt;li&gt;Gentle learning curve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Top brands using Vaadin Framework: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Motorola&lt;/li&gt;
&lt;li&gt;JPMorgan Chase&lt;/li&gt;
&lt;li&gt;Dell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;6. Play Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4bdkY4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxitbhtifazy53797bce.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4bdkY4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxitbhtifazy53797bce.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Play is a high-productivity web framework for Java and Scala. Play is based on a lightweight, stateless, web-friendly architecture. Built on Akka, Play provides predictable and minimal resource consumption (CPU, memory, threads) for highly-scalable applications.&lt;/p&gt;

&lt;p&gt;Leveraging both HTTP and HTML5 WebSockets, Play Framework offers developers an easy way to build scalable real-time apps in Java &amp;amp; Scala. For that purpose, it takes care of many low-level details such as connection management and protocol implementation so you can focus on business logic instead of dealing with infrastructure code.&lt;/p&gt;

&lt;p&gt;And thanks to its reactive programming model, Play provides developers with tools for asynchronous programming in a simple manner, so your code remains clean when it comes to event handlers &amp;amp; callbacks without much boilerplate or repetition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Play Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Stateless&lt;/li&gt;
&lt;li&gt;Web-friendly&lt;/li&gt;
&lt;li&gt;Highly scalable&lt;/li&gt;
&lt;li&gt;Minimal resource consumption&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Top brands using Play Framework: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LinkedIn&lt;/li&gt;
&lt;li&gt;Accenture&lt;/li&gt;
&lt;li&gt;Glovo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;7. Dropwizard Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AaKV_DkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s85wrm3o9f86m7bwrhyr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AaKV_DkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s85wrm3o9f86m7bwrhyr.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Dropwizard is a new framework that helps you build simple, high-performance, RESTful web services with minimal effort. It borrows ideas from other frameworks and packages them together in a simple, coherent whole. If you are familiar with JUnit or Maven, then you will feel right at home using Dropwizard.&lt;/p&gt;

&lt;p&gt;The code samples are available in both Java and Scala. Don't worry if you are not familiar with either of these languages because it should not take long to become acclimated to them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Dropwizard Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supports multiple independent libraries&lt;/li&gt;
&lt;li&gt;Ops-friendly&lt;/li&gt;
&lt;li&gt;Highly modular&lt;/li&gt;
&lt;li&gt;High performance&lt;/li&gt;
&lt;li&gt;Rapid prototyping&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top brands using Dropwizard Framework:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CRED&lt;/li&gt;
&lt;li&gt;Upwork&lt;/li&gt;
&lt;li&gt;Rent the Runway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;8. Blade Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyiSak8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07j6ptt2nvdztse4bm7r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyiSak8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07j6ptt2nvdztse4bm7r.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
The Blade is a minimal, open-source framework for creating modern web apps using Groovy on top of any Servlet container. The Blade extends Groovy with support for annotations and domain-specific languages that make it easy to build highly expressive APIs quickly.&lt;/p&gt;

&lt;p&gt;At its core, Blade is inspired by Spring MVC's template model but also allows developers to leverage Groovy features like builders, meta-programming, AST transformations, and dependency injection to improve productivity without sacrificing power or performance dramatically.&lt;/p&gt;

&lt;p&gt;It provides full support for annotation-based or convention-over-configuration style development with an intuitive DSL that allows you to create dynamic HTML views directly from your controller code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Blade Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;MVC framework&lt;/li&gt;
&lt;li&gt;Robust pattern&lt;/li&gt;
&lt;li&gt;Highly modular&lt;/li&gt;
&lt;li&gt;Zero invasive receptors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Top brands using Blade Framework: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Meatier&lt;/li&gt;
&lt;li&gt;Vapor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;9. Jersey Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W4EdDfK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1r0azgw9m9ykw4yidku.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4EdDfK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1r0azgw9m9ykw4yidku.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Jersey is a lightweight framework that makes it easy to build RESTful web services. It gets used in several high-profile projects, including Twitter's Bootstrap, Google App Engine, etc. Jersey also provides a simple JAX-RS client API for in-browser applications or other clients that access &lt;a href="https://www.pixelcrayons.com/web-development/java-web-development?utm_source=dev-to&amp;amp;utm_medium=java-web-development&amp;amp;utm_campaign=DC-AR"&gt;Java web development services&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The complete source code for Jersey is available under an Apache 2 open source license, and there are no runtime dependencies on third-party libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Jersey Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lightweight&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open-source&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fast performance&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Personal APIs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additional features &amp;amp; Toolkits&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Top brands using Jersey Framework: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bodybuilding.com&lt;/li&gt;
&lt;li&gt;SnapEngage&lt;/li&gt;
&lt;li&gt;Neko&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;10. OSGi (Open Service Gateway Initiative)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOAWBQe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ixwzukx0aui29l7rqag.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOAWBQe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ixwzukx0aui29l7rqag.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
While other popular frameworks, such as Spring and Hibernate, we can't talk about modern Java frameworks without discussing OSGi. If you've been into Java development for a while, you've probably heard about OSGi. It is one of the most influential &amp;amp; flexible open-source frameworks for developing distributed applications.&lt;/p&gt;

&lt;p&gt;The underlying framework allows components to communicate with each other in very flexible ways by enabling them to publish services for others to consume. This functionality has made it extremely popular among developers over time and makes it one of our top 15 best java frameworks list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of OSGI Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supports rapid project development&lt;/li&gt;
&lt;li&gt;Rapid testing&lt;/li&gt;
&lt;li&gt;Service-oriented architecture&lt;/li&gt;
&lt;li&gt;Facilitates quick modifications &lt;/li&gt;
&lt;li&gt;Creates portable applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Top brands using OSGI Framework: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Liferay&lt;/li&gt;
&lt;li&gt;Business File Manager&lt;/li&gt;
&lt;li&gt;SYSTHEMIS AG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;11. GWT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWsowEfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg523pzn8twiw3pwzrfa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWsowEfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg523pzn8twiw3pwzrfa.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Google Web Toolkit (GWT) is a set of tools that allow you to use your favorite programming language to quickly build complex web applications without having to worry about configuring servers or writing JavaScript code. It also allows for high-speed development by compiling .java files into .gwt.HTML pages at run time. &lt;/p&gt;

&lt;p&gt;Google Web Toolkit is handy when you're building AJAX applications with your favorite IDEâ€”like IntelliJ IDEA, Eclipse, NetBeans, and more. GWT was initially designed for Google's internal use, but it was released as an open-source tool under Apache 2.0 license in 2006.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of GWT Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates highly responsive web apps&lt;/li&gt;
&lt;li&gt;Built-in IDE support&lt;/li&gt;
&lt;li&gt;Standard Java static code&lt;/li&gt;
&lt;li&gt;Optimizes generated code&lt;/li&gt;
&lt;li&gt;Generates cross-browser code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top brands using GWT Framework&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SnapEngage&lt;/li&gt;
&lt;li&gt;Whatfix&lt;/li&gt;
&lt;li&gt;Navatom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;12. Spark Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZFOxWEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wclptldxy44tr10up39j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZFOxWEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wclptldxy44tr10up39j.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Apache Spark is a modern, lightning-fast framework that allows developers to work in a multi-paradigm and build fast and efficient programs in various languages such as Scala, Java, and Python. It has diverse functionalities in machine learning and data analysis, streaming data, etc., with high performance on Hadoop and non-Hadoop environments.&lt;/p&gt;

&lt;p&gt;Additionally, Spark has high flexibility for Hadoop users because of its compatibility with other powerful technologies such as SQL and NoSQL databases. It enables programming in JVM languages such as Scala or Java with support for structured sources like Hive tables or SQL databases through RDD (Resilient Distributed Datasets).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Spark Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High processing speed&lt;/li&gt;
&lt;li&gt;Powerful Analytics&lt;/li&gt;
&lt;li&gt;Advance libraries&lt;/li&gt;
&lt;li&gt;Low-latency in-memory data processing capability&lt;/li&gt;
&lt;li&gt;Supports dynamic development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Top brands using Spark Framework: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Revolut.&lt;/li&gt;
&lt;li&gt;Payjinn.&lt;/li&gt;
&lt;li&gt;AfricanStockPhoto.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;13. Vert. x&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVzhtVSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qjlowgcpug39xmn0zse.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVzhtVSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qjlowgcpug39xmn0zse.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Vert. x is a tool for creating reactive web applications in Java and Scala. You can also use it to replace RESTful calls with no network latency, ideal for data streaming applications, NoSQL databases, and large-scale distributed systems. &lt;/p&gt;

&lt;p&gt;Vert. x gives you all you need to build an event-driven application, allowing you to develop using asynchronous non-blocking input/output (NIO) APIs by utilizing many frameworks such as Netty or Jetty. &lt;/p&gt;

&lt;p&gt;The Framework itself abstracts away thread management and synchronization issues, giving you a more straightforward way to work with concurrency issues in your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Vert. x Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event-driven runtime&lt;/li&gt;
&lt;li&gt;High performance&lt;/li&gt;
&lt;li&gt;Scalable apps&lt;/li&gt;
&lt;li&gt;Reduces overheads&lt;/li&gt;
&lt;li&gt;Well suited to modern apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Top brands using Vert. x: *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bitpanda&lt;/li&gt;
&lt;li&gt;Trade Republic&lt;/li&gt;
&lt;li&gt;Braincube&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;14. Richfaces Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YKX00RW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ug3ywo8bsdcgk2rmiw0x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKX00RW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ug3ywo8bsdcgk2rmiw0x.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Richfaces is a popular Ajax-based UI framework incorporating many industry standards into its design, making it very attractive to developers. It supports rich AJAX for web pages, 3D charts and graphs, drag-and-drop capabilities, sortable lists, and data grids with live updates. &lt;/p&gt;

&lt;p&gt;As a complete MVC solution, Richfaces works well with many Java applications. Since Richfaces is an open-source project hosted on Google Code, developers are encouraged to contribute to its development by reviewing existing code or submitting their additions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Richfaces Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open-source &lt;/li&gt;
&lt;li&gt;Adds ajax capabilities to JSF&lt;/li&gt;
&lt;li&gt;Enhances UI&lt;/li&gt;
&lt;li&gt;Facilitates custom rich components&lt;/li&gt;
&lt;li&gt;Multiple libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;15. PrimeFaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCdE1QSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnykvmiol2kmjuvhywxh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCdE1QSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnykvmiol2kmjuvhywxh.jpg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;
PrimeFaces is an open-source, highly customizable JSF (JavaServer Faces) UI component suite for building rich internet applications. PrimeFaces library includes 140+ UI components. It's easy to use, mobile-ready and tested across all major browsers with complete documentation.&lt;/p&gt;

&lt;p&gt;The latest version of PrimeFaces is 5.1, released on July 9, 2017, along with seven more bug fixes and improvements since the previous release of the 5.0 version. Just like other frameworks available on the Java ecosystem, it's an extensible framework using a plugin system that employs more than 20 open source libraries like jQuery or Google Guava.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of PrimeFaces Framework&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Open-source&lt;/li&gt;
&lt;li&gt;Adds Ajax capabilities to JSF&lt;/li&gt;
&lt;li&gt;Good Documentation&lt;/li&gt;
&lt;li&gt;Multiple libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Final Words&lt;/strong&gt;&lt;br&gt;
It's clear that there are many different frameworks for &lt;a href="https://www.pixelcrayons.com/hire-Java-developers?utm_source=dev-to&amp;amp;utm_medium=hire-java-developers&amp;amp;utm_campaign=DC-AR"&gt;Java developers&lt;/a&gt; to use, but one stands out above all others. Spring offers developers a flexible environment that helps them build robust applications that can scale quickly as your company grows. Spring Framework 4 was recently released and brought many improvements over version 3.&lt;/p&gt;

&lt;p&gt;For example, it's possible to write code once and run it on both Servlet containers and Web servers using the new JavaServer Faces technology introduced in version 4.&lt;/p&gt;

&lt;p&gt;Also, with dependency injection to manage dependencies between classes, you can make adjustments easier by simply adding or removing components without disrupting existing logic.&lt;/p&gt;

&lt;p&gt;Because of these features, we've decided to give Spring Framework 4 our highest recommendation as to the best Framework for creating enterprise-level web applications with Java.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Question: What is a framework?&lt;br&gt;
Answer: A software framework is an abstraction in which software providing generic functionality can be selectively changed by additional user-written code, thus offering application-specific software.&lt;br&gt;
Programs written in a low-level language, such as C, often lack pre-existing software libraries that provide proper functionality. In other cases, programmers may find it challenging to utilize existing libraries because of political reasons or simply a compatibility issue with different library versions.&lt;br&gt;
In both cases, using a framework allows one to develop applications without reinventing or customizing core services or common infrastructure. &lt;/p&gt;

&lt;p&gt;Question: How can I choose the best Java Framework? &lt;br&gt;
Answer: The purpose of a framework is to simplify development by standardizing components that are complex or time-consuming to create. Developers can focus on what makes their application unique rather than reinventing wheels every time they start a new project. &lt;br&gt;
Each Framework has its strengths &amp;amp; weaknesses, but here are some things you should consider when making your choice: platform support, community, accessibility, documentation, ease of use, longevity, and maintenance. &lt;br&gt;
Some frameworks work better for enterprise applications, while others are more appropriate for smaller businesses with fewer technical resources. A few aren't even geared toward business applications at all - they're targeted for use in particular markets like gaming or robotics.&lt;/p&gt;

&lt;p&gt;When it comes to using frameworks, ask yourself these questions: &lt;/p&gt;

&lt;p&gt;What does it bring to my team? &lt;br&gt;
Do I have time for it? &lt;br&gt;
Is my current process streamlined enough to make room for another framework? &lt;br&gt;
And finally, if you're looking into new technology or processes in general (even something simple like replacing an older printer with a newer one), talk with your team and get their buy-in before implementing anything new.&lt;/p&gt;

&lt;p&gt;Question: How many Java frameworks are there?&lt;br&gt;
Answer: There are more than 30 frameworks for the Java programming language. However, most of them are compatible with other programming languages besides Java.&lt;/p&gt;

&lt;p&gt;Question: Why have frameworks become an invincible part of the development projects?&lt;br&gt;
Answer: A framework is a way to structure your code. It's a sort of skeleton, with all of its joints already put together for you. If you're working on a non-web project, several good frameworks for various languages will help keep your code organized and help you develop more quickly.&lt;br&gt;
In my experience, they also enable teams of developers to work together more effectively by providing a standard set of protocols and procedures across each member. &lt;/p&gt;

&lt;p&gt;Question: Is Spring an open-source framework?&lt;br&gt;
Answer: Yes, Spring is an open-source framework. The project was created by Rod Johnson in 1999 and hosted on SourceForge. It went fully open source in 2005, after which it quickly became one of the most popular frameworks for enterprise applications development. And since then, it has only enhanced its relevance and popularity within organizations both large and small. &lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>framework</category>
      <category>javaframeworks</category>
    </item>
    <item>
      <title>The DevRel toolkit for API providers</title>
      <author>Anna Tsolakou</author>
      <pubDate>Tue, 30 Nov 2021 10:09:48 +0000</pubDate>
      <link>https://dev.to/tsolakoua/the-devrel-toolkit-for-api-providers-2aop</link>
      <guid>https://dev.to/tsolakoua/the-devrel-toolkit-for-api-providers-2aop</guid>
      <description>&lt;p&gt;When many people think of DevRel, they think of meetups around the world and tickets to the coolest conferences. Those are perks of the job, sure, but the day-to-day is much different. &lt;/p&gt;

&lt;p&gt;As developer advocate for &lt;a href="https://developers.amadeus.com/"&gt;Amadeus&lt;/a&gt;, I spend most of my time implementing developer tools, building tutorials, and communicating with our users to support them and gather their feedback. To do that effectively and efficiently, you need tools. &lt;/p&gt;

&lt;p&gt;From running API health checks to efficiently handling user feedback, having the proper tooling is key to improvingÂ developer experience andÂ engageÂ with your community. In thisÂ article,Â Iâ€™d like to share the tools we use on daily basis as Developer Advocates for an API product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postman"&gt;
  &lt;/a&gt;
  Postman
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; is an API clientÂ that lets you create, share, test, and document APIs easily. We maintain a Postman collectionÂ of our APIs so developers can playÂ with them without having to write anyÂ code. Developer experience benefits aside, Postman is also a huge time saver for day-to-day DevRel tasks.Â Looking into support queries,Â writing an API tutorial, orÂ even mocking an API to prepare content ahead of launch are all easy using Postman.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runescope"&gt;
  &lt;/a&gt;
  Runescope
&lt;/h3&gt;

&lt;p&gt;It's very important to identify any bugs or issuesÂ with the APIsÂ beforeÂ yourÂ users do.Â &lt;a href="https://www.runscope.com/"&gt;Runescope&lt;/a&gt;Â is an API monitoring tool that continuously checks uptime, performance, correctness, and other factors that indicate the health of your API. Using Runescope helps reassure yourÂ DevRel that allÂ your APIs are running correctly and - more importantly - notifies them immediately when an issue arises so they can start on a fix before your users are affected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apigee"&gt;
  &lt;/a&gt;
  Apigee
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/apigee"&gt;Apigee&lt;/a&gt; is an APIÂ gateway that Amadeus and many other companies use toÂ let developers connect with their data and services.Â As all the traffic passes through Apigee, it's also a great tool to gain insights into your customers and how they're using your APIs. Which of your APIs are used the most? What days do you see the highest traffic? These meaningful insights that Apigee provides are key to helping your DevRel analyze and optimize the developer funnel&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h3&gt;

&lt;p&gt;Amadeus for Developers open sources all its SDKs, code samples, and demo apps on &lt;a href="https://github.com/amadeus4dev"&gt;GitHub&lt;/a&gt;. After all, we love using open-source tools so why not give back to the community? Publishing your code as open- source makes it easy and efficient for developers toÂ integrate your APIs, and is a great way to get contributionsÂ and product feedback fromÂ theÂ developer community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#discord"&gt;
  &lt;/a&gt;
  Discord
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://discord.com/"&gt;Discord&lt;/a&gt;Â isÂ a group-chat platform that helps people create and join communities. For DevRel teams, creating a Discord server is a great way to engage with your users, provide support, or host activities like workshops or networking. Amadeus for Developers created a &lt;a href="https://discord.gg/cVrFBqx"&gt;Discord server&lt;/a&gt; to provide our users - both current and potential - a meeting point to talk, share, and interact with the community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#salesforce"&gt;
  &lt;/a&gt;
  Salesforce
&lt;/h3&gt;

&lt;p&gt;If you ask your marketing team about &lt;a href="https://salesforce.com/"&gt;Salesforce&lt;/a&gt;, they'll tell you it's the world's leading CRM platform. For DevRel, Salesforce's value is in managing support. Salesforce provides tools to help your DevRel team track and solve support tickets in an easy and productive way and it's built-in metrics also give you insight into your users' needs, pain points, and even market trends.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trello"&gt;
  &lt;/a&gt;
  Trello
&lt;/h3&gt;

&lt;p&gt;Most people know &lt;a href="https://trello.com/en"&gt;Trello&lt;/a&gt; as a project management tool, but it's also ideal for handling user feedback. Consolidating and sharing user feedback is one of the main pillars of DevRel, and your team needs to ensure that feedback is passed smoothly from users to product teams. At Amadeus for Developers, we've used Trello to built a complete feedback managemennt framework, complete with rules to help consolidate and prioritize user feedback in a scalable way.&lt;/p&gt;

&lt;p&gt;And this is just the beginning. There are lots of tools on the market today to help you be a more effective developer advocate. Do you have a tool that's making your DevRel life easier? If so, share in the comments below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Project Euler</title>
      <author>Mia</author>
      <pubDate>Tue, 30 Nov 2021 10:08:46 +0000</pubDate>
      <link>https://dev.to/miatemma/the-project-euler-198</link>
      <guid>https://dev.to/miatemma/the-project-euler-198</guid>
      <description>&lt;p&gt;This series will be about the tasks from the &lt;a href="//www.projecteuler.net"&gt;Euler Project&lt;/a&gt;, which is a a project page for mathematical riddles with increasing difficulty. &lt;/p&gt;

&lt;p&gt;After signing up, you can upload your solutions in order to get credits. At the moment there are 725 riddles at 29 levels (25 riddles per level). As you can see, the first task has been solved by almost a Million people (the last one not even by 500...). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W2yPqe5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632209394867/MfIKAht9W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W2yPqe5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632209394867/MfIKAht9W.png" alt="eulertasks.png" width="434" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Euler Community permits sharing the results for task 1-100. &lt;/p&gt;




&lt;p&gt;All of the tasks can be solved on a normal PC within a few minutes if the algorithm is implemented correctly. Many of the tasks have a little twist, meaning that they could be implemented in a straightforward way, but also in a more interesting, "smart" way. &lt;/p&gt;

&lt;p&gt;The roots of functional programming lie in the algorithmic computation of mathematical problems, so it's not surprising that PicoLisp often enables us to write extremely concise and short code in order to solve these tasks. Similarly to the &lt;a href="https://picolisp-blog.hashnode.dev/series/rosetta"&gt;Rosetta code series&lt;/a&gt;, the main purpose of this series is to get more familiar with PicoLisp and its syntax and concepts.&lt;/p&gt;

&lt;p&gt;When we find some interesting functions, we will pick them up for deeper discussion in the &lt;a href="https://picolisp-blog.hashnode.dev/series/intermediate"&gt;"PicoLisp Explored"&lt;/a&gt; Series. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dr8vCc4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632210303235/UUvTm4Faf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dr8vCc4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632210303235/UUvTm4Faf.png" alt="mathematical_symbol_fight.png" width="591" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, that's the plan! &lt;/p&gt;

&lt;p&gt;If you want to prepare, here is the &lt;a href="https://projecteuler.net/problem=1"&gt;task for tomorrow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.&lt;/p&gt;

&lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://projecteuler.net"&gt;https://projecteuler.net&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://imgs.xkcd.com/comics/mathematical_symbol_fight.png"&gt;https://imgs.xkcd.com/comics/mathematical_symbol_fight.png&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>picolisp</category>
      <category>mathematics</category>
    </item>
    <item>
      <title>Refine vs AdminBro - Comparison Admin Panel Framework</title>
      <author>Melih Ekinci</author>
      <pubDate>Tue, 30 Nov 2021 09:53:29 +0000</pubDate>
      <link>https://dev.to/pankod/refine-vs-adminbro-comparison-admin-panel-framework-16g8</link>
      <guid>https://dev.to/pankod/refine-vs-adminbro-comparison-admin-panel-framework-16g8</guid>
      <description>&lt;p&gt;Looking for open source &lt;strong&gt;admin panel framework&lt;/strong&gt;? Here we are going to review two of the best &lt;strong&gt;Open Source admin panel frameworks of 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These frameworks that we will talk about have emerged to offer solutions to the same business demands in general. Although the purpose of these two frameworks is the same, the solutions are different from each other. Our goal in this article is to show you these differences and help you find the appropriate framework for your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refine"&gt;
  &lt;/a&gt;
  Refine
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; is a React-based framework that helps you to develop admin panel, B2B and dashboard that can be fully customized with Ant Design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; directly provides Ant Design components and some hooks to work with those components. These hooks give you the required props for those Ant Design components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; is a collection of helper hooks, components and providers. They are all decoupled from your UI components and business logic, so they never keep you from customizing your UI or coding your own flow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; uses &lt;a href="https://react-query.tanstack.com/"&gt;React Query&lt;/a&gt; for data processing, caching, and state management. In this respect, you do not need to define anything extra for every cases and model.&lt;/p&gt;

&lt;p&gt;Although &lt;strong&gt;refine&lt;/strong&gt; is a newer framework, it is successful in identifying deficiencies in development and producing solutions accordingly. Using new technologies, it offers users more effective and simpler development options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Installation is very simple and customizable options can be added.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx superplate-cli demo-refine-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrOoLXNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbnaxfhyzyi8l2uocqdn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrOoLXNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbnaxfhyzyi8l2uocqdn.gif" alt="Image description" width="809" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Configuration: One-line setup with superplate. Project setup is very simple. Using superplate you can choose the content of your project and the features you want to add. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI: You have full control over the UI elements. Fully customizable, open to use. Works seamlessly with integrated Ant Design System.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Out-of-the-box: Routing, networking, authentication, state managment, i18n and UI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next.js / SSR integration: &lt;strong&gt;refine&lt;/strong&gt; can be used with Next.js to SSR your pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React Location: React Location router provider support &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ssr-nextjs-support"&gt;
  &lt;/a&gt;
  SSR - Next.js Support
&lt;/h3&gt;

&lt;p&gt;refine has support for SSR - Next.js. This is an important feature that separates &lt;strong&gt;refine&lt;/strong&gt; from other frameworks. Thanks to this feature, &lt;strong&gt;refine&lt;/strong&gt; provides the opportunity to develop B2C applications in addition to B2B and admin panel.&lt;/p&gt;

&lt;p&gt;refine can be used with Next.js to SSR your pages. It doesn't get in the way and follows Next.js conventions and also provides helper modules when necessary.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ssrnextjs-setup"&gt;
  &lt;/a&gt;
  SSR-Next.js Setup
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @pankod/refine @pankod/refine-nextjs-router
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ssrnextjs-basic-usage"&gt;
  &lt;/a&gt;
  SSR-Next.js Basic Usage
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Refine&amp;gt;&lt;/code&gt; must wrap your pages in a custom App component. This way your pages are integrated to refine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Refine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dataProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine-simple-rest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;routerProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine-nextjs-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.fake-rest.refine.dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Refine&lt;/span&gt;
            &lt;span class="na"&gt;routerProvider&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routerProvider&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Refine&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://refine.dev/docs/guides-and-concepts/ssr-nextjs/"&gt;For more information on how to add SSR-Next.js to your Refine project -&amp;gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; uses a customized Router Provider to save routes and navigate between pages. &lt;strong&gt;refine&lt;/strong&gt; offers a much more flexible structure thanks to its routerProvider support.&lt;/p&gt;

&lt;p&gt;A router provider must include the following methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routerProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;useHistory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;goBack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Params&lt;/span&gt; &lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;]?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;() =&amp;gt; Params,
    Prompt: React.FC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PromptProps&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;,
    Link: React.FC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;,
    RouterComponent?: React.FC&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;refine includes many  router providers to use in your projects like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Router&lt;/li&gt;
&lt;li&gt;React Location&lt;/li&gt;
&lt;li&gt;Next.js Router&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://refine.dev/docs/api-references/providers/router-provider/"&gt;To take a look at how other router providers are defined and working&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To activate router provider in &lt;strong&gt;refine&lt;/strong&gt;, we have to pass the routerProvider to the &lt;code&gt;&amp;lt;Refine /&amp;gt;&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Refine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;routerProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine-react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Refine&lt;/span&gt; &lt;span class="na"&gt;routerProvider&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routerProvider&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Refine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;routerProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine-react-location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Refine&lt;/span&gt; &lt;span class="na"&gt;routerProvider&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routerProvider&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Refine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;routerProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine-nextjs-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Refine&lt;/span&gt; &lt;span class="na"&gt;routerProvider&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routerProvider&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just need to tell the route of your component to the routerProvider.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-provider-logic"&gt;
  &lt;/a&gt;
  Data Provider Logic
&lt;/h3&gt;

&lt;p&gt;A data provider is the place where a &lt;strong&gt;refine&lt;/strong&gt; app communicates with an API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CagkGH2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oicns3833o6gg59d5lt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CagkGH2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oicns3833o6gg59d5lt1.png" alt="Image description" width="850" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A data provider must include following methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;createMany&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deleteOne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getMany&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getOne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;updateMany&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metaData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;metaData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getApiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Data hooks uses React Query to manage data fetching. React Query handles important concerns like caching, invalidation, loading states etc..&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#graphql-data-provider"&gt;
  &lt;/a&gt;
  GraphQL Data Provider
&lt;/h4&gt;

&lt;p&gt;It is well covered by GraphQL data provider &lt;strong&gt;refine&lt;/strong&gt; and explained step by step in the documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; GraphQL data provider is built with &lt;a href="https://github.com/atulmy/gql-query-builder"&gt;qql-query-builder&lt;/a&gt; and &lt;a href="https://github.com/prisma-labs/graphql-request"&gt;graphql-request&lt;/a&gt;. The purpose here is to send dynamic queries that we can do with qql-query-builder as requests with graphql-request. &lt;/p&gt;

&lt;p&gt;Query builder helps us build queries and mutations. We can use these queries with the getList, getMany and getOne methods in our data provider. On the other hand, the create, createMany, update, updateMany, deleteOne and deleteMany methods generate a mutation to send a request.&lt;/p&gt;

&lt;p&gt;In order to create a query, we need to specify the fields that we will use from our data provider. Thanks to the MetaDataQuery, we pass these fields to our data provider and start using them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basic-graphql-usage"&gt;
  &lt;/a&gt;
  Basic GraphQL Usage
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Refine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;routerProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine-react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dataProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pankod/refine-strapi-graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;API_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Refine&lt;/span&gt;
            &lt;span class="na"&gt;routerProvider&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routerProvider&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When sending the request, we must specify which fields will come, so we send fields in &lt;code&gt;metaData&lt;/code&gt; to hooks that we will fetch data from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IResourceComponentsProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tableProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IPost&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;initialSorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c1"&gt;// highlight-start&lt;/span&gt;
        &lt;span class="na"&gt;metaData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;selectProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelect&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ICategory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;categories&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;metaData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tableProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;rowKey&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;
                    &lt;span class="na"&gt;dataIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;
                    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ID"&lt;/span&gt;
                    &lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;defaultSortOrder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getDefaultSortOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;
                    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;
                    &lt;span class="na"&gt;dataIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;
                    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Title"&lt;/span&gt;
                    &lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;IPost&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    dataIndex="category"
                    title="Category"
                    filterDropdown=&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FilterDropdown&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Select&lt;/span&gt;
                                &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                                &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"multiple"&lt;/span&gt;
                                &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Select Category"&lt;/span&gt;
                                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;selectProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FilterDropdown&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    render=&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                /&amp;gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;IPost&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    title="Actions"
                    dataIndex="actions"
                    render=&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Space&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EditButton&lt;/span&gt;
                                &lt;span class="na"&gt;hideText&lt;/span&gt;
                                &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"small"&lt;/span&gt;
                                &lt;span class="na"&gt;recordItemId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShowButton&lt;/span&gt;
                                &lt;span class="na"&gt;hideText&lt;/span&gt;
                                &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"small"&lt;/span&gt;
                                &lt;span class="na"&gt;recordItemId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DeleteButton&lt;/span&gt;
                                &lt;span class="na"&gt;hideText&lt;/span&gt;
                                &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"small"&lt;/span&gt;
                                &lt;span class="na"&gt;recordItemId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Space&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                /&amp;gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we only make requests for queries that are necessary. As you can see, all you have to do is specify the field you want to select with &lt;code&gt;metaData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://refine.dev/docs/guides-and-concepts/data-provider/graphql/"&gt;Refer to the GraphQL for detailed usage. â†’ &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refine-avaible-providers"&gt;
  &lt;/a&gt;
  Refine Avaible Providers
&lt;/h3&gt;

&lt;p&gt;Connects to any REST or GraphQL custom backend.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NestJs CRUD: &lt;a href="https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud"&gt;https://github.com/pankod/refine/tree/master/examples/dataProvider/nestjsxCrud&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Airtable: &lt;a href="https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable"&gt;https://github.com/pankod/refine/tree/master/examples/dataProvider/airtable&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Strapi: &lt;a href="https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi"&gt;https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Strapi GraphQL: &lt;a href="https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql"&gt;https://github.com/pankod/refine/tree/master/examples/dataProvider/strapi-graphql&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Supabase: &lt;a href="https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase"&gt;https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Hasura: &lt;a href="https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase"&gt;https://github.com/pankod/refine/tree/master/examples/dataProvider/supabase&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Altogic: &lt;a href="https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic"&gt;https://github.com/pankod/refine/tree/master/examples/dataProvider/altogic&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;refine's&lt;/strong&gt; motivation and main purpose are as follows: "Higher-level frontend frameworks can save you a lot time, but they typically offer you a trade-off between speed and flexibility." &lt;/li&gt;
&lt;li&gt;While the admin panel allows you to make dashboard, B2B and B2C applications quickly, we offer you flexibility in your UI or business model.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#uiux-customization"&gt;
  &lt;/a&gt;
  UI/UX Customization:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;refine&lt;/strong&gt;, comes ready-made decoupled from the UI, and is used. &lt;strong&gt;refine&lt;/strong&gt; mostly touches UI components via hooks. The main advantage of this for you is that you can successfully perform any Business request or different case.
#### Logic Customization:&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;refine&lt;/strong&gt;, works flawless with react-query. You don't have to worry about state management in your business model or when you encounter a different situation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h3&gt;

&lt;p&gt;All features of &lt;strong&gt;refine&lt;/strong&gt; are available as &lt;strong&gt;open source&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access Control Provider (RBAC, ABAC, ACL, IP, LDAP, etc...)&lt;/li&gt;
&lt;li&gt;Realtime&lt;/li&gt;
&lt;li&gt;Search &lt;/li&gt;
&lt;li&gt;Navigation and more features are available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to get information about the Enterprise, refine ready to help you for Support and Training.&lt;br&gt;
&lt;a href="https://refine.dev/enterprise/"&gt;For more info about Enterprise-&amp;gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;refine&lt;/strong&gt; Docs &amp;amp; Demo: &lt;a href="https://refine.dev/docs/"&gt;Documentation&lt;/a&gt; - &lt;a href="https://refine.dev/demo/"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adminbro"&gt;
  &lt;/a&gt;
  AdminBro
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://adminbro.com/index.html"&gt;AdminBro&lt;/a&gt; is an open-source package from  that adds an auto-generated admin panel to your Node.js application. You provide database models or schemas and AdminBro generates the user interface for you. &lt;/p&gt;

&lt;p&gt;You can connect your various databases to the admin interface and perform standard CRUD operations  on the records. In this way, it makes it to make changes on your data and provides you with a great deal of convenience.&lt;/p&gt;

&lt;p&gt;You can quickly develop and customize the Admin panel with AdminBro.&lt;/p&gt;

&lt;p&gt;It provides you with solutions and provides convenience when making admin panel and b2b applications. It is an open source project that has been in development and ongoing development for a long time. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;We can say that it is difficult to install, but it is clearly explained step by step in the documentation.&lt;/p&gt;

&lt;p&gt;Since AdminBro uses your existing framework to render its routes - you have to use one of our plugins.&lt;/p&gt;

&lt;p&gt;There are plugins for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Express&lt;/li&gt;
&lt;li&gt;Hapi&lt;/li&gt;
&lt;li&gt;Koa.js&lt;/li&gt;
&lt;li&gt;Nest.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install the AdminBro along with the express plugin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;admin-bro @admin-bro/express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to install some dependencies express and the express-formidable packages. express-formidable is a peer dependency for AdminBro&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; npm &lt;span class="nb"&gt;install &lt;/span&gt;express express-formidable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://adminbro.com/tutorial-installation-instructions.html"&gt;For detailed installation â†’&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can use any data from any source and make changes to the data(create, read, update, delete)&lt;/li&gt;
&lt;li&gt;Custom actions&lt;/li&gt;
&lt;li&gt;Custom resource decorators&lt;/li&gt;
&lt;li&gt;Form validation &lt;/li&gt;
&lt;li&gt;A full-featured control panel can be created.&lt;/li&gt;
&lt;li&gt;Internationalization(i18n)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ssr-nextjs-support%E2%80%8B"&gt;
  &lt;/a&gt;
  SSR - Next.js Supportâ€‹
&lt;/h3&gt;

&lt;p&gt;AdminBro does not support SSR-Next.js. It only helps you develop B2B and admin panel applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;p&gt;Adminbro's routing processes are slightly different than others. You can also define the routes of the components that you have created custom here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AdminBro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin-bro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AdminBroExpress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@admin-bro/express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adminBro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AdminBro&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;databases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;rootPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AdminBroExpress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buildRouter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;adminBro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The concept of routing is handled in a different way and in general all routing operations are defined through this file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-provider-logic"&gt;
  &lt;/a&gt;
  Data Provider Logic
&lt;/h3&gt;

&lt;p&gt;It does not have a data provider exactly like other frameworks. It has a different structure. It has created functions for you to control your data. But there are rules that we must follow and do.&lt;/p&gt;

&lt;p&gt;AdminBro can be connected to many different types of resources. Right now, they support the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mongoose&lt;/li&gt;
&lt;li&gt;Sequelize&lt;/li&gt;
&lt;li&gt;TypeORM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To add resources , you first have to intall an adapter for the resource you want to use.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-the-database-adapter-and-add-resources"&gt;
  &lt;/a&gt;
  Install the Database Adapter and add resources
&lt;/h4&gt;

&lt;p&gt;Let's take a look at an example made with the mongoose adapter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;mongoose @admin-bro/mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AdminBro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin-bro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AdminBroExpress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@admin-bro/express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AdminBroMongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@admin-bro/mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;AdminBro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AdminBroMongoose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb://localhost:27017/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adminBro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AdminBro&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;Databases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;rootPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AdminBroExpress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buildRouter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;adminBro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;adminBro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rootPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Application is up and running under localhost:3000/admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we first installed and connected mongoose. We then created a model and passed it to the AdminBro resource. AdminBro has built an interface for us where we can list our users. You can also add your own &lt;a href="https://adminbro.com/tutorial-writing-custom-adapters.html"&gt;custom adapters&lt;/a&gt; and set up &lt;a href="https://adminbro.com/tutorial-customizing-resources.html"&gt;custom resources&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The logic is well covered and also well explained in the documentation. But we can say that it is complex compared to other frameworks. It can be difficult to use on big data. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#graphql-data-provider"&gt;
  &lt;/a&gt;
  GraphQL Data Provider
&lt;/h4&gt;

&lt;p&gt;There is no native GraphQL support. It can be supported with 3rd party packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/admin-bro-graphql"&gt;https://www.npmjs.com/package/admin-bro-graphql&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/SoftwareBrothers/adminjs/issues/655"&gt;https://github.com/SoftwareBrothers/adminjs/issues/655&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h3&gt;

&lt;p&gt;AdminBro is good at customizing. You can connect your own adapters and customize your resources. These customizations are challenging and complex.&lt;/p&gt;

&lt;p&gt;Some customizable features are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adminbro.com/tutorial-customizing-resources.html"&gt;Customize Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adminbro.com/tutorial-actions.html"&gt;Customize Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adminbro.com/tutorial-actions-validations.html"&gt;Custom Validations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adminbro.com/tutorial-custom-dashboard.html"&gt;Customize dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#uiux-customization%E2%80%8B"&gt;
  &lt;/a&gt;
  UI/UX Customization:â€‹
&lt;/h4&gt;

&lt;p&gt;It automatically offers you an interface option that you can use. You can also develop and customize your own components. You can do your own styling and write your own custom components, but for this customization, you need to follow and apply a few steps. It doesn't speed you up in UI development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adminbro.com/tutorial-writing-react-components.html"&gt;For more information about developing your own components -&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h3&gt;

&lt;p&gt;All features of Adminbro are open source and accessible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Role-Based Access Control&lt;/li&gt;
&lt;li&gt;Content Management System&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AdminBro Docs &amp;amp; Demo: &lt;a href="https://adminbro.com/tutorial-installation-instructions.html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://admin-bro-example-app-staging.herokuapp.com/admin/login"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have examined these two frameworks under some headings. Both help you successfully develop admin panel and B2B applications.&lt;/p&gt;

&lt;p&gt;We suggest asking some questions to find out which one is more suitable for your project.&lt;/p&gt;

&lt;p&gt;At this point, the questions you should ask when choosing these of framework may be as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How flexible are they in offering solutions to the different business demands we may encounter?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How difficult will it be to implement the providers and features we will be using?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If any problem arises, can I easily find a solution from the documentation?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How dependent am I on this framework when using it in my project and does it offer customization possibilities?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What does it offer me as an extra feature?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here &lt;strong&gt;refine&lt;/strong&gt; directly answers some of your questions. &lt;strong&gt;refine&lt;/strong&gt;'s customized structures (API, Router, i18n, GraphQL provider, etc...) provide you convenience from many points, unlike AdminBro bro. This convenience and perspective provided by &lt;strong&gt;refine&lt;/strong&gt; can be preferred for many projects. In addition, you can be limited to internal tool/B2B applications with adminbro.  You can develop many different projects with &lt;strong&gt;refine&lt;/strong&gt;'s rich UI library and SSR support.&lt;/p&gt;

&lt;p&gt;In this article, we tried to answer these questions. By reading this article, you can choose the appropriate framework for your project and use it.&lt;/p&gt;

&lt;p&gt;This comparison table strives to be as accurate and as unbiased as possible. If you use any of these libraries and feel the information could be improved, feel free to suggest changes (with notes or evidence of claims) contact &lt;a href="mailto:info@refine.dev"&gt;info@refine.dev&lt;/a&gt; or you can open a issue on &lt;a href="https://github.com/pankod/refine"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>refine</category>
      <category>adminbro</category>
      <category>react</category>
      <category>adminpanel</category>
    </item>
    <item>
      <title>Living in the Shell; sort [LS#6]</title>
      <author>Babak K. Shandiz</author>
      <pubDate>Tue, 30 Nov 2021 09:53:21 +0000</pubDate>
      <link>https://dev.to/babakks/living-in-the-shell-sort-ls6-3jg9</link>
      <guid>https://dev.to/babakks/living-in-the-shell-sort-ls6-3jg9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-sort-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;sort&lt;/code&gt; ðŸ†Ž
&lt;/h2&gt;

&lt;p&gt;Sorts/randomizes input lines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sort-lexically"&gt;
  &lt;/a&gt;
  Sort lexically
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'Zack\nAdam\nCharles'&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Adam
Charles
Zack
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sort-descending-raw-r-endraw-"&gt;
  &lt;/a&gt;
  Sort descending &lt;code&gt;-r&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'Zack\nAdam\nCharles'&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sort-numerically-raw-n-endraw-"&gt;
  &lt;/a&gt;
  Sort numerically &lt;code&gt;-n&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'10 Zack\n5 Adam\n1 Charles'&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 Charles
5 Adam
10 Zack
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sort-humanreadable-size-numerics-raw-h-endraw-"&gt;
  &lt;/a&gt;
  Sort human-readable size numerics &lt;code&gt;-h&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'1G\n1K\n23MB'&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1K
23MB
1G
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#check-sorted-state-raw-c-endraw-"&gt;
  &lt;/a&gt;
  Check sorted state &lt;code&gt;-c&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'Zack\nAdam\nCharles'&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sort: -:2: disorder: Adam
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;(Exits with a nonzero exit code that indicates unsorted input.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#shufflerandomize-raw-r-endraw-"&gt;
  &lt;/a&gt;
  Shuffle/randomize &lt;code&gt;-R&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'Zack\nAdam\nCharles'&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>productivity</category>
      <category>linux</category>
      <category>bash</category>
      <category>devops</category>
    </item>
    <item>
      <title>Intro to Web Scraping with Selenium in Python</title>
      <author>Ander Rodriguez</author>
      <pubDate>Tue, 30 Nov 2021 09:42:59 +0000</pubDate>
      <link>https://dev.to/anderrv/intro-to-web-scraping-with-selenium-in-python-4011</link>
      <guid>https://dev.to/anderrv/intro-to-web-scraping-with-selenium-in-python-4011</guid>
      <description>&lt;p&gt;Ever heard of &lt;a href="https://en.wikipedia.org/wiki/Headless_browser"&gt;headless browsers&lt;/a&gt;? Mainly used for testing purposes, they give us an excellent opportunity for scraping websites that require Javascript execution or any other feature that browsers offer.&lt;/p&gt;

&lt;p&gt;You'll learn how to use &lt;a href="https://www.selenium.dev/documentation/webdriver/"&gt;Selenium&lt;/a&gt; and its multiple features to scrape and browser any web page. From finding elements to waiting for dynamic content to load. Modify the window size and take screenshots. Or add proxies and custom headers to avoid blocks. You can achieve all of that and more with this headless browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;For the code to work, you will need &lt;a href="https://www.python.org/downloads/"&gt;python3 installed&lt;/a&gt;. Some systems have it pre-installed. After that, install Selenium, &lt;a href="https://www.google.com/chrome/"&gt;Chrome&lt;/a&gt;, and the driver for &lt;a href="https://sites.google.com/chromium.org/driver/downloads"&gt;Chrome&lt;/a&gt;. Make sure to match the browser and driver versions, Chrome 96, as of this writing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;selenium 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other browsers are available (Edge, IE, Firefox, Opera, Safari), and the code should work with minor adjustments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Once set up, we will write our first test. Go to a sample URL and print its current URL and title. The browser will follow redirects automatically and load all the resources - images, stylesheets, javascript, and more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"http://zenrows.com"&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# https://www.zenrows.com/
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Web Scraping API &amp;amp; Data Extraction - ZenRows
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your Chrome driver is not in an executable path, you need to specify it or move the driver to somewhere in the path (i.e., &lt;code&gt;/usr/bin/&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;chrome_driver_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/path/to/chromedriver'&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;executable_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chrome_driver_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You noticed that the browser is showing, and you can see it, right? It won't run headless by default. We can pass options to the driver, which is what we want to do for scraping.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChromeOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headless&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finding-elements-and-content"&gt;
  &lt;/a&gt;
  Finding Elements and Content
&lt;/h2&gt;

&lt;p&gt;Once the page is loaded, we can start looking for the information we are after. Selenium offers several ways to access elements: ID, tag name, class, XPath, and CSS selectors.&lt;/p&gt;

&lt;p&gt;Let's say that we want to search for something on Amazon by using the text input. We could use select by tag from the previous options: &lt;code&gt;driver.find_element(By.TAG_NAME, "input")&lt;/code&gt;. But this might be a problem since there are several inputs on the page. By inspecting the page, we see that it has an ID, so we change the selector: &lt;code&gt;driver.find_element(By.ID, "twotabsearchtextbox")&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;IDs probably don't change often, and they are a more secure way of extracting info than classes. The problem usually comes from not finding them. Assuming there is no ID, we can select the search form and then the input inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://www.amazon.com/"&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CSS_SELECTOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"form[role='search'] input[type='text']"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is no silver bullet; each option is appropriate for a set of cases. You'll need to find the one that best suits your needs.&lt;/p&gt;

&lt;p&gt;If we scroll down the page, we'll see many products and categories. And a shared class that often repeats: &lt;code&gt;a-list-item&lt;/code&gt;. We need a similar function (&lt;code&gt;find_elements&lt;/code&gt; in plural) to match all the items and not just the first occurrence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CLASS_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"a-list-item"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YwI6a30z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og9lyku5xvtuxe3oxufw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YwI6a30z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og9lyku5xvtuxe3oxufw.jpg" alt="Amazon Items" width="816" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to do something with the selected elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interacting-with-the-elements"&gt;
  &lt;/a&gt;
  Interacting with the Elements
&lt;/h2&gt;

&lt;p&gt;We'll search using the input selected above. For that, we need the &lt;code&gt;send_keys&lt;/code&gt; function that will type and hit enter to send the form. We could also type into the input and then find the submit button and click on it (&lt;code&gt;element.click()&lt;/code&gt;). It is easier in this case since the &lt;code&gt;Enter&lt;/code&gt; works fine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CSS_SELECTOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"form[role='search'] input[type='text']"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Python Books'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENTER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the script does not wait and closes as soon as the search finishes. The logical thing is to do something afterward, so we'll list the results using &lt;code&gt;find_elements&lt;/code&gt; as above. Inspecting the result, we can use the &lt;code&gt;s-result-item&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;These items we will just select are &lt;code&gt;div&lt;/code&gt;s with several inner tags. We could take the link's &lt;code&gt;href&lt;/code&gt; values if interested and visit each item - we won't do that for the moment. But the &lt;code&gt;h2&lt;/code&gt; tags contain the book's title, so we need to select the title for each element. We can continue using &lt;code&gt;find_element&lt;/code&gt; since it will work for &lt;code&gt;driver&lt;/code&gt;, as seen before, and for any web element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...
&lt;/span&gt;    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CLASS_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"s-result-item"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TAG_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"h2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Prints a list of around fifty items
&lt;/span&gt;
&lt;span class="c1"&gt;# Learning Python, 5th Edition ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't rely too much on this approach since some tags might be empty or have no title. We should adequately implement error control for an actual use case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#infinite-scroll"&gt;
  &lt;/a&gt;
  Infinite Scroll
&lt;/h3&gt;

&lt;p&gt;For those cases when there is an infinite scroll (Pinterest), or images are lazily loaded (Twitter), we can go down also using the keyboard. Not often used, but scroll using the space bar, "Page Down", or "End" keys is an option. And we can take advantage of that.&lt;/p&gt;

&lt;p&gt;The driver won't accept it directly. We need to find first an element like &lt;code&gt;body&lt;/code&gt; and send the keys there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TAG_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there is still another problem: items will not be present just after scrolling. That brings us to the next part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-for-content-or-element"&gt;
  &lt;/a&gt;
  Wait for Content or Element
&lt;/h2&gt;

&lt;p&gt;Nowadays, many websites are Javascript intense - especially when using modern frameworks like React - and do lots of XHR calls after the first load. As with the infinite scroll, all that content won't be available to Selenium. But we can manually inspect the target website and check what the result of that processing is.&lt;/p&gt;

&lt;p&gt;It usually comes down to creating some DOM elements. If those classes are unique or they have IDs, we can wait for those. We can use the &lt;code&gt;WebDriverWait&lt;/code&gt; to put the script on hold until some criteria are met.&lt;/p&gt;

&lt;p&gt;Assume a simple case where there are no images present until some XHR finishes. This instruction will return the &lt;code&gt;img&lt;/code&gt; element as soon as it appears. The driver will wait for 3 seconds and fail otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support.ui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;
&lt;span class="c1"&gt;# ...
&lt;/span&gt;    &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TAG_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"img"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selenium provides several &lt;a href="https://selenium-python.readthedocs.io/waits.html#explicit-waits"&gt;expected conditions&lt;/a&gt; that might prove valuable. &lt;code&gt;element_to_be_clickable&lt;/code&gt; is an excellent example in a page full of Javascript, since many buttons are not interactive until some actions occur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.support&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;expected_conditions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;EC&lt;/span&gt;
&lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebDriverWait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;EC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element_to_be_clickable&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CLASS_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'my-button'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#screenshots-and-element-screenshots"&gt;
  &lt;/a&gt;
  Screenshots and Element Screenshots
&lt;/h2&gt;

&lt;p&gt;Be it for testing purposes or storing changes, screenshots are a practical tool. We can take a screenshot for the current browser context or a given element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...
&lt;/span&gt;    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'page.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AaI9LwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iqw6pu5auos5n2fbphv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AaI9LwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iqw6pu5auos5n2fbphv.png" alt="Amazon Small Screen" width="880" height="842"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ... 
&lt;/span&gt;    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CLASS_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"a-cardui"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"amazon_card.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cibb2jJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1k0ggjivilbknylo8ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cibb2jJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1k0ggjivilbknylo8ry.png" alt="Amazon Card Element" width="307" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Noticed the problem with the first image? Nothing wrong, but the size is probably not what you were expecting. Selenium loads by default in 800px by 600px when browsing in headless mode. But we can modify it to take bigger screenshots.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#window-size"&gt;
  &lt;/a&gt;
  Window Size
&lt;/h2&gt;

&lt;p&gt;We can query the driver to check the size we're launching in: &lt;code&gt;driver.get_window_size()&lt;/code&gt;, which will print &lt;code&gt;{'width': 800, 'height': 600}&lt;/code&gt;. When using GUI, those numbers will change, so let's assume that we're testing headless mode.&lt;/p&gt;

&lt;p&gt;There is a similar function - &lt;code&gt;set_window_size&lt;/code&gt; - that will modify the window size. Or we can add an options argument to the Chrome web driver that will directly start the browser with that resolution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--window-size=1024,768"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_window_size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c1"&gt;# {'width': 1024, 'height': 768}
&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_window_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1920&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_window_size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c1"&gt;# {'width': 1920, 'height': 1200}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now our screenshot will be 1920px wide.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMwSC1M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bafmahlr7yf1e94vs9wx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMwSC1M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bafmahlr7yf1e94vs9wx.png" alt="Amazon Big Screen" width="768" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-headers"&gt;
  &lt;/a&gt;
  Custom Headers
&lt;/h2&gt;

&lt;p&gt;The options mentioned above provide us with a crucial mechanism for web scraping: custom headers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-agent"&gt;
  &lt;/a&gt;
  User Agent
&lt;/h3&gt;

&lt;p&gt;One of the essential headers to avoid blocks is User-Agent. Selenium will provide an accurate one by default, but you can change it for a custom one. Remember that there are &lt;a href="https://www.zenrows.com/blog/stealth-web-scraping-in-python-avoid-blocking-like-a-ninja?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=selenium_python"&gt;many techniques to crawl and scrape without blocks&lt;/a&gt; and we won't cover them all here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36'&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'user-agent=%s'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TAG_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# UA matches the one hardcoded above, v93
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-important-headers"&gt;
  &lt;/a&gt;
  Other Important Headers
&lt;/h3&gt;

&lt;p&gt;As a quick summary, changing the user-agent might be counterproductive if we forget to adjust some other headers. For example, the &lt;code&gt;sec-ch-ua&lt;/code&gt; header usually sends a version of the browser, and it must much the user-agent's one: &lt;code&gt;"Google Chrome";v="96"&lt;/code&gt;. But some older versions do not send that header at all, so sending it might also be suspicious.&lt;/p&gt;

&lt;p&gt;The problem is Selenium does not support adding headers. A third-party solution like &lt;a href="https://github.com/wkeeling/selenium-wire"&gt;Selenium Wire&lt;/a&gt; might solve it. Install it with &lt;code&gt;pip install selenium-wire&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It will allow us to intercept requests, among other things, and modify the headers we want or add new ones. When changing, we must delete the original one first to avoid sending duplicates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;seleniumwire&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"http://httpbin.org/anything"&lt;/span&gt;
&lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36'&lt;/span&gt;
&lt;span class="n"&gt;sec_ch_ua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"'&lt;/span&gt;
&lt;span class="n"&gt;referer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://www.google.com'&lt;/span&gt;

&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChromeOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headless&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Delete the header first
&lt;/span&gt;    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sec-ch-ua'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sec_ch_ua&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'referer'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;referer&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_interceptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interceptor&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TAG_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#proxy-to-change-the-ip"&gt;
  &lt;/a&gt;
  Proxy to change the IP
&lt;/h2&gt;

&lt;p&gt;As with the headers, Selenium has limited support for proxies. We can add a proxy without authentication as a driver option. For testing, we'll use &lt;a href="https://free-proxy-list.net/"&gt;Free Proxies&lt;/a&gt; although they are not reliable, and the one below probably won't work for you at all. They are usually short-lived.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"http://httpbin.org/ip"&lt;/span&gt;
&lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'85.159.48.170:40014'&lt;/span&gt; &lt;span class="c1"&gt;# free proxy
&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'--proxy-server=%s'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TAG_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# "origin": "85.159.48.170"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more complex solutions or ones in need of auth, Selenium Wire can help us again. We need a second set of options in this case, where we will add the proxy server we want to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_API_KEY"&lt;/span&gt;
&lt;span class="n"&gt;seleniumwire_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'proxy'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"http://&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;proxy_pass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:@proxy.zenrows.com:8001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'verify_ssl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;seleniumwire_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;seleniumwire_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TAG_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For proxy servers that don't rotate IPs automatically, &lt;code&gt;driver.proxy&lt;/code&gt; can be overwritten. From that point on, all requests will use the new proxy. This action can be done as many times as necessary. For convenience and reliability, we advocate for &lt;a href="https://www.zenrows.com/?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=selenium_python"&gt;Smart Rotating Proxies&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Initial proxy
&lt;/span&gt;    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'http'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'http://user:pass@1.2.3.4:5678'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# New proxy
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#blocking-resources"&gt;
  &lt;/a&gt;
  Blocking Resources
&lt;/h2&gt;

&lt;p&gt;For performance, saving bandwidth, or avoiding tracking, blocking some resources might prove crucial when scaling scraping.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://www.amazon.com/"&lt;/span&gt;

&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChromeOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headless&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;experimental_options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"prefs"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"profile.managed_default_content_settings.images"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'amazon_without_images.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxSASfYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbgp265hoan1bxdnlyv9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxSASfYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbgp265hoan1bxdnlyv9.png" alt="Amazon Without Images" width="768" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could even go a step further and avoid loading almost any type. Careful with this since blocking Javascript would mean no AJAX calls, for example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;experimental_options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"prefs"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"profile.managed_default_content_settings.images"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"profile.managed_default_content_settings.stylesheets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"profile.managed_default_content_settings.javascript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"profile.managed_default_content_settings.cookies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"profile.managed_default_content_settings.geolocation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"profile.default_content_setting_values.notifications"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#intercepting-requests"&gt;
  &lt;/a&gt;
  Intercepting Requests
&lt;/h3&gt;

&lt;p&gt;Once again, thanks to Selenium Wire, we could decide programmatically over requests. It means that we can effectively block some images while allowing others. And we also can block domains using &lt;code&gt;exclude_hosts&lt;/code&gt; or allow only specific requests based on URLs matching against a regular expression with &lt;code&gt;driver.scopes&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Block PNG and GIF images, will show JPEG for example
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'.png'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'.gif'&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_interceptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interceptor&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#execute-javascript"&gt;
  &lt;/a&gt;
  Execute Javascript
&lt;/h2&gt;

&lt;p&gt;The last Selenium feature we want to mention is executing Javascript. Some things are easier done directly in the browser, or we want to check that it worked correctly. We can &lt;code&gt;execute_script&lt;/code&gt; passing the JS code we want to be executed. It can go without params or with elements as params.&lt;/p&gt;

&lt;p&gt;We can see both cases in the examples below. There is no need for params to get the User-Agent as the browser sees it. That might prove helpful to check that the one sent is being modified correctly in the &lt;code&gt;navigator&lt;/code&gt; object since some security checks might raise red flags otherwise. The second one will take an &lt;code&gt;h2&lt;/code&gt; as an argument and return its left position by accessing &lt;code&gt;getClientRects&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"return navigator.userAgent"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Mozilla/5.0  ... Chrome/96 ...
&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CSS_SELECTOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"h2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'return arguments[0].getClientRects()[0].left'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headerText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 242.5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Selenium is a valuable tool with many applications, but you have to take advantage of them in your way. Apply each feature in your favor. And many times, there are several ways of arriving at the same point; look for the one that helps you the most - or the easiest one.&lt;/p&gt;

&lt;p&gt;Once you get the handle, you'll want to grow your scraping and get more pages. There is where other challenges might appear: &lt;a href="https://www.zenrows.com/blog/mastering-web-scraping-in-python-crawling-from-scratch?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=selenium_python"&gt;crawling at scale&lt;/a&gt; and &lt;a href="https://www.zenrows.com/blog/stealth-web-scraping-in-python-avoid-blocking-like-a-ninja?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=selenium_python"&gt;blocks&lt;/a&gt;. Some tips above will help you: check the headers and proxy sections. But also be aware that crawling at scale is not an easy task. Please don't say we didn't warn you ðŸ˜…&lt;/p&gt;

&lt;p&gt;I hope you leave with an understanding of how Selenium works in Python (it goes the same for other languages). An important topic that we did not cover is when Selenium is necessary. Because many times you can save time, bandwidth, and server performance by scraping without a browser. Or you can contact us, and we'll be delighted to help you crawl, scrape and scale whatever you need!&lt;/p&gt;

&lt;p&gt;Thanks for reading! Did you find the content helpful? Please, spread the word and share it. ðŸ‘ˆ&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://www.zenrows.com/blog/web-scraping-with-selenium-in-python?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=selenium_python"&gt;https://www.zenrows.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Monolithic and microservices? Which architecture is better</title>
      <author>Adamo Software</author>
      <pubDate>Tue, 30 Nov 2021 09:29:35 +0000</pubDate>
      <link>https://dev.to/adamodigitalco/monolithic-and-microservices-which-architecture-is-better-936</link>
      <guid>https://dev.to/adamodigitalco/monolithic-and-microservices-which-architecture-is-better-936</guid>
      <description>&lt;p&gt;&lt;em&gt;Monolithic and microservices are basic architectures for software design and development. Comparing microservices and monolithic is to define which fits your company.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In recent years, microservices architecture has become so common for its tangible benefits to software developers. These benefits may include an increase in flexibility, scalability, etc. &lt;/p&gt;

&lt;p&gt;Nowadays, high-tech companies such as Netflix, Google, Amazon, and other firms have successfully shifted from monolithic to microservice architecture. Moreover, some corporations consider applying the microservice software architecture as a great way to boost their growth. &lt;/p&gt;

&lt;p&gt;Monolithic architecture, however, is a model for developing a &lt;a href="https://adamosoft.com/our-services"&gt;software solution.&lt;/a&gt; The applications of the monolithic software architecture tend to go down due to codebases, adopting new technologies, scaling, deployment, etc. Thus, is it worth it for businesses to switch the software system from a monolithic to microservices? Whether developing a microservices architecture will help you to reach business goals or not. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article will give you an overview of monolithic and microservices and compare these software architectures to see which is suitable for your business.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-introduction-to-monolithic-and-microservices"&gt;
  &lt;/a&gt;
  An introduction to monolithic and microservices
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#monolithic-architecture"&gt;
  &lt;/a&gt;
  Monolithic architecture
&lt;/h3&gt;

&lt;p&gt;Monolithic architecture is a conventional approach to build software architecture with a single and indivisible element. This &lt;a href="https://adamosoft.com/our-expertise"&gt;technology software solution&lt;/a&gt; usually includes a customer-side application, a server-side interface, and a database. &lt;/p&gt;

&lt;p&gt;These elements will unite all functions that are controlled and served in a place. Regarding monolithic applications, all functionalities of a project appear in a single codebase. People design monolithic applications in different layers such as presentation, service, and persistence, and deploy that codebase in a single file.  &lt;/p&gt;

&lt;p&gt;Monolithic &lt;a href="https://adamosoft.com/blog/mobile-app-architecture/"&gt;applications architecture&lt;/a&gt; shares a large codebase and lacks modularity. If software developers want to change anything, they have to access the same codebase. Thus, software developers will make changes in the whole stack at once. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-monolithic-software-architecture"&gt;
  &lt;/a&gt;
  Benefits of monolithic software architecture
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Less cross-cutting concerns:&lt;/strong&gt; Cross-cutting concerns affect the whole monolithic application regarding logging, handling and performance monitoring. When a project is running, the area of functionality focuses on only an application, making it easier to solve it. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easier for &lt;a href="https://adamosoft.com/"&gt;software developers&lt;/a&gt; to test:&lt;/strong&gt; Monolithic application is easy to debug and test since itâ€™s a single indivisible element. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simple to deploy and develop:&lt;/strong&gt; Between monolithic and microservice, the monolithic architecture is easier to deploy since you donâ€™t have to deal with many deployments, just one file. Besides, this software architecture is a standard way to build software when comparing monolithic and microservice. Any &lt;a href="https://adamosoft.com/about-us"&gt;software developer&lt;/a&gt; has the knowledge and capabilities to develop a monolithic application architecture. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#drawbacks-of-monolithic-application-architecture"&gt;
  &lt;/a&gt;
  Drawbacks of monolithic application architecture
&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Understanding:&lt;/strong&gt;&lt;/em&gt; Between monolithic and microservice, the monolithic architecture seems too hard to understand and manage when scaling up. Software developers need to redeploy the whole application, even a small change. For example, if any developer wants to join the project, itâ€™s hard to understand the logic of existing applications, even for a single functionality. Furthermore, bug tracking and fixing are hard to handle when the monolithic architecture application becomes big and fast development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Making changes:&lt;/em&gt;&lt;/strong&gt; When teams want to make changes for this project, they will face some difficulties. Itâ€™s hard to execute changes in a large and complicated application with tight coupling. Any change will affect the whole application; thus, it requires thorough coordination from team members. That will lead to the overall process lasting much longer than usual. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Scalability:&lt;/strong&gt;&lt;/em&gt; Developers cannot scale indivisible components independently, only the whole monolithic application. If a part of the application is handling traffic, the team needs to deploy the application on many servers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;New software technology barriers:&lt;/em&gt;&lt;/strong&gt; Monolithic architecture applications will get problems when adopting new technologies since &lt;a href="https://adamosoft.com/our-team"&gt;software engineers&lt;/a&gt; have to write the application again. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#microservices-architecture"&gt;
  &lt;/a&gt;
  Microservices architecture
&lt;/h3&gt;

&lt;p&gt;Microservices architecture is an approach for &lt;a href="https://adamosoft.com/website-development"&gt;software development&lt;/a&gt; where an application divides into different components. With each element, software engineers will develop, package and deploy in an individual process. So all services feature their logic, the database and carry out distinctive functions. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This microservices architecture can communicate through mechanisms such as HTTP REST APIs. These different services in a microservices architecture have to write in different programming languages. Between monolithic and microservice, the microservices architecture has more benefits compared to the other. Microservice architecture has an impact on the relationship between the software application and the database. &lt;/p&gt;

&lt;p&gt;Each application will have its database rather than share a single database with other microservices architecture. So it often leads to the duplication of some data; however, itâ€™s important if you want to take advantage of microservices architecture. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#principles-of-microservices-architecture"&gt;
  &lt;/a&gt;
  Principles of microservices architecture
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Taking single responsibility:&lt;/strong&gt; Between monolithic and microservice, single responsibility is one of the most fundamental principles of microservice architecture. It features a single unit, even a method or a class, microservice architecture will take its responsibility. Each microservice architecture takes a single responsibility and also provides a distinctive functionality. The database in a microservice architecture is decentralized and each microservice owns a unique database. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developing around business capabilities:&lt;/strong&gt; There is a technology that will fit best for executing a unique functionality. When comparing monolithic and microservice, applying monolithic architecture is a big drawback. Since software developers canâ€™t use different technologies for each functionality, it has to compromise in specific areas. Nevertheless, a microservice can easily adopt a new technology stack or &lt;a href="https://adamosoft.com/website-development"&gt;backend database storage&lt;/a&gt;. That technology is useful for solving business problems. It means the microservice architecture can utilize different technology depending on business requirements. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ready to deal with failure:&lt;/strong&gt; Comparing monolithic and microservice, this microservice designs for failure cases. It must take advantage of this &lt;a href="https://adamosoft.com/our-services"&gt;software solution&lt;/a&gt;. Fixing one microservice will not affect the whole application, so functionalities remain easily accessible to users. If there is a failure in one module, it results in the collapse of the whole application when applying monolithic architecture. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-microservices-software-architecture"&gt;
  &lt;/a&gt;
  Advantages of microservices software architecture
&lt;/h3&gt;

&lt;p&gt;When comparing monolithic and microservice, microservices can solve the drawbacks of monolithic architecture.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#independent-elements"&gt;
  &lt;/a&gt;
  Independent elements:
&lt;/h4&gt;

&lt;p&gt;Software developers deploy and update related services independently, giving more flexibility. Moreover, if you want to bug one microservice, it has just affected a particular area in the application. Itâ€™s easy to add features to a microservices architecture when comparing monolithic and microservice. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#easy-to-understand"&gt;
  &lt;/a&gt;
  Easy to understand:
&lt;/h4&gt;

&lt;p&gt;Classifying into smaller and simpler elements, microservices architecture is easier to manage and understand. Software developers need to focus on the service related to the business goals. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#having-better-scalability"&gt;
  &lt;/a&gt;
  Having better scalability:
&lt;/h4&gt;

&lt;p&gt;Between monolithic and microservice, the microservice application will scale independently. Thus, the whole process is much more cost-saving and time-effective than using monolithic architecture. When comparing monolithic and microservice applications, monolithic architecture has to be scaled if required. &lt;/p&gt;

&lt;p&gt;Additionally, every monolithic application software has limitations regarding scalability. Therefore, the more users you have, the more troubles you have with using monolithic architecture. Many firms end up rebuilding their monolithic application software. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-a-microservices-software"&gt;
  &lt;/a&gt;
  Disadvantages of a microservices software
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Complexity:&lt;/strong&gt; Between monolithic and microservice, microservice architecture requires more complexity. As a microservice architecture is a distributed software application, developers have to select and build connections amongst modules. Additionally, each microservice software architecture consists of a unique service, so software developers deploy them independently. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Being handled carefully:&lt;/strong&gt; Between monolithic and microservice, this microservice software architecture is a complicated system. So &lt;a href="https://adamosoft.com/dedicated-software-development-team"&gt;skilled software developers&lt;/a&gt; have to connect all of them carefully. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Requiring cross-cutting issues:&lt;/strong&gt; When developing microservice, &lt;a href="https://adamosoft.com/blog/how-to-hire-software-developers-in-vietnam/"&gt;software developers&lt;/a&gt; solve cross-cutting concerns comparing monolithic and microservice. They might include logging, metrics, health checks, etc. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing &amp;amp; checking:&lt;/strong&gt; Between monolithic and microservice, the microservice structure makes the testing and checking processes more complicated and harder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-monolithic-and-microservices-architecture"&gt;
  &lt;/a&gt;
  When to use monolithic and microservices architecture
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#monolithic-application"&gt;
  &lt;/a&gt;
  Monolithic application
&lt;/h3&gt;

&lt;p&gt;Monolithic software architecture may apply in those projects which donâ€™t require a real-time response. It also can withstand downtime in &lt;a href="https://adamosoft.com/blog/web-design-and-web-developments-are-they-different/"&gt;web development&lt;/a&gt;. So these projects will set limitations to a size. If &lt;a href="https://adamosoft.com/blog/clutch-recognizes-adamo-software-amongst-vietnams-top-developers-for-2020/"&gt;software developers&lt;/a&gt; want to expand the size of web applications, microservice architecture can handle it. Web applications use monolithic software architecture. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microservices-application"&gt;
  &lt;/a&gt;
  Microservices application
&lt;/h3&gt;

&lt;p&gt;Microservice architecture is often used in large projects which require either real-time responses or maybe cannot withstand downtime. It can lead to abnormal spikes sometimes. For example, projects can use microservice software architecture such as TV networks, eCommerce platforms, food delivery apps, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#differences-between-monolithic-and-microservices-architecture"&gt;
  &lt;/a&gt;
  Differences between monolithic and microservices architecture
&lt;/h2&gt;

&lt;p&gt;A website development application has two fundamental components regarding a relational database and a server-side application. First of all, the server-side application does the heavy lifting of whatever operations occur. Itâ€™s responsible for dealing with the HTTP requests from customers, retrieving data, updating the databases, and giving  HTML responses to the customers. &lt;/p&gt;

&lt;p&gt;Monolithic architecture is a conventional way to build web applications. All business logic to serve clientsâ€™ requests will package into a single process. For instance, if the web application is in Java, developers will package data in a war file, deploy it to a tomcat or a jetty server. If we use Python Django or Rails, the same web application has to deploy the same structure. &lt;/p&gt;

&lt;p&gt;Now letâ€™s check how &lt;a href="https://adamosoft.com/blog/an-introduction-to-microservices/"&gt;microservices &lt;/a&gt;architecture can handle all drawbacks of monolithic architecture. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monolithic-to-microservices-which-software-architecture-is-suitable-for-your-business-solutions"&gt;
  &lt;/a&gt;
  Monolithic to microservices: Which software architecture is suitable for your business solutions?
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Features&lt;/th&gt;
&lt;th&gt;Monolithic architecture&lt;/th&gt;
&lt;th&gt;Microservice architecture&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1. Basic&lt;/td&gt;
&lt;td&gt;Monolithic architecture with one codebase builds as large distribution systems.&lt;/td&gt;
&lt;td&gt;Microservice architecture creates many small independent modules that fit business functions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2. Scale&lt;/td&gt;
&lt;td&gt;It requires an entire application to scale although only one part of the distribution system is scaled.&lt;/td&gt;
&lt;td&gt;Scaling of each element is possible since each will be decoupled to different services. Software developers can scale the application horizontally and individually.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3. Deployment&lt;/td&gt;
&lt;td&gt;Itâ€™s quite difficult since a small change in the application will require the deployment of the whole application&lt;/td&gt;
&lt;td&gt;Continuing deployment is possible since each service is separate from the other, so deployment as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4. Database&lt;/td&gt;
&lt;td&gt;Itâ€™s a shareable database&lt;/td&gt;
&lt;td&gt;Each module and service will have its database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5. Adopting new technologies&lt;/td&gt;
&lt;td&gt;Itâ€™s hard to change programming languages or technologies since all of them depend on each other.&lt;/td&gt;
&lt;td&gt;Itâ€™s easy to change framework, technology, or language as each module is independent.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#applying-monolithic-architecture"&gt;
  &lt;/a&gt;
  Applying  monolithic architecture
&lt;/h3&gt;

&lt;p&gt;Between monolithic and microservice, each of them will have its advantages and disadvantages. So there will be different projects that will fit with different kinds of software architectures depending on many factors. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Small project: If youâ€™re a startup or working on a small project, you donâ€™t need to solve the complexity of microservice architecture. Comparing monolithic and microservice, the monolithic application can satisfy all business needs. &lt;/li&gt;
&lt;li&gt;Simple web development: Small applications will not require much business logic and large scalability, so choosing a monolithic architecture is your best choice.
&lt;/li&gt;
&lt;li&gt;Thereâ€™s no expertise on microservice: Between monolithic and microservice, the microservice application requires knowledge. If you apply microservice software architecture without any technical expertise, it will waste your resources. &lt;/li&gt;
&lt;li&gt;Fast launch: If you want to develop a &lt;a href="https://adamosoft.com/mobile-application-development"&gt;web or software application&lt;/a&gt; and launch it right away, the monolithic architecture is your best option. It will work well with fewer initial resources and validate your business ideas. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-microservices-architecture"&gt;
  &lt;/a&gt;
  Using microservices architecture
&lt;/h3&gt;

&lt;p&gt;Microservice expertise/knowledge: Developing a &lt;a href="https://adamosoft.com/blog/microservice-architecture/"&gt;microservice software architecture&lt;/a&gt; is extremely risky if you donâ€™t have any support from experts. Besides, knowing software architecture is not enough. You have to get &lt;a href="https://adamosoft.com/devops-services-and-solutions"&gt;DevOps &lt;/a&gt;and Containers knowledge as web development concepts are associated with microservices. Domain modeling knowledge is also important. &lt;/p&gt;

&lt;p&gt;A complicated and scalable application: A microservice architecture scales and adds new capabilities to your web application. Thus, if you want to develop a big application with complicated customer journeys, the microservice architecture is the best option. &lt;/p&gt;

&lt;p&gt;Enough human resources: Between monolithic and microservice, the microservice will require large human resources. Since a project using microservice architecture includes many teams being responsible for many services, engineering skills from the software developer team is a must. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Closing&lt;/strong&gt;&lt;br&gt;
Which software architecture is better between  monolithic and microservice? Each software architecture has its own advantages and disadvantages for every software system distribution. Monolithic architecture fits with a small application and does not have much logic and modules. Meanwhile, microservice architecture fits best with big and complex applications with many things. &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
