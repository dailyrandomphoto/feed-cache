<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Give your terminal a makeover</title>
      <author>Rob OLeary</author>
      <pubDate>Wed, 09 Jun 2021 10:48:28 +0000</pubDate>
      <link>https://dev.to/robole/give-your-terminal-a-makeover-55c3</link>
      <guid>https://dev.to/robole/give-your-terminal-a-makeover-55c3</guid>
      <description>&lt;p&gt;I decided to give my laptop a virtual makeover recently. One thing that stuck out was the terminal. &lt;/p&gt;

&lt;p&gt;A terminal is a dark rectangle with text. It's utilitarian. There isn't a wide array of options for personalization. &lt;/p&gt;

&lt;p&gt;The 3 major things you can do is: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;u&gt;Change the colour scheme&lt;/u&gt;: I made my own colour scheme. If you are searching, &lt;a href="https://github.com/mbadolato/iTerm2-Color-Schemes"&gt;this repo&lt;/a&gt; is a great source for colour schemes for many different terminal apps.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;Pick a font&lt;/u&gt;: I installed a &lt;a href="https://www.nerdfonts.com/"&gt;nerd font&lt;/a&gt;. Nerd fonts add icons to popular monospace fonts. These icons can be used in your text prompt and are used by some command-line applications to give more of modern UI-feel. &lt;a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip"&gt;JetBrainsMono Nerd Font&lt;/a&gt; is my favourite.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;Modify the prompt text&lt;/u&gt;: I installed &lt;a href="https://starship.rs/"&gt;Starship&lt;/a&gt; to make a custom prompt that works in a few different shells. It's got it's own config with a wide array of options to customize the text in every conceivable way. I use it to add git info, low battery indication, and package and versioning info for some languages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I guess these 3 things are what most people do in some shape or form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8z72JqaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jka4qknxyb9k3xbvmk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8z72JqaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jka4qknxyb9k3xbvmk6.png" alt="custom terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is how my terminal looks! Simple and minimal is my preference.&lt;/p&gt;

&lt;p&gt;Beyond that, you can make tweaks to use colours in more places. You can makes aliases which have the &lt;code&gt;--colors=auto&lt;/code&gt; option included. These are the most common ones:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dir --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias vdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'vdir --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias grep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'grep --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;fgrep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fgrep --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;egrep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'egrep --color=auto'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can install command-line applications if you want to augment the appearance of some standard applications. You can use &lt;a href="https://github.com/Peltoche/lsd"&gt;&lt;code&gt;lsd&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://the.exa.website/"&gt;&lt;code&gt;exa&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;ls&lt;/code&gt;. You can use &lt;a href="https://github.com/sharkdp/bat"&gt;&lt;code&gt;bat&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;cat&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You can see that &lt;code&gt;lsd&lt;/code&gt; uses a folder icon from the nerd font for folders, and breaks the list into columns. These applications offer some visual tweaks, but vary on the amount of styling you can do. I chose &lt;code&gt;lsd&lt;/code&gt; because it offers a bit more control over appearance than &lt;code&gt;exa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFSyYJPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2rayfhgqqhkrp7c00bm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFSyYJPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2rayfhgqqhkrp7c00bm.png" alt="lsd output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall, this feels more personal as it is closer to my taste, but it lacks personality. What can I do to add more personality? &lt;/p&gt;

&lt;p&gt;Some people like to make the terminal slightly transparent and show their desktop wallpaper. I don't! I love photography but I find it distracting! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qlkYm1gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bejuxio7jtp6nj6867ud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qlkYm1gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bejuxio7jtp6nj6867ud.png" alt="transparent terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I noticed that some people use &lt;a href="https://github.com/dylanaraps/neofetch"&gt;neofetch&lt;/a&gt; to flash their specs when they open a terminal. It's kind of badge of honour for some Linux enthusiasts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lASyK8hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmyi15llp9j313gwowau.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lASyK8hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmyi15llp9j313gwowau.png" alt="neofetch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seeing specs as kind of a greeting when I open a terminal is not my thing. But the ASCII art for the logo got me thinking. Some of the logos included in neofetch are quite stylish and colourful. And there is a palette to play with (them colorful boxes in the bottom right).&lt;/p&gt;

&lt;p&gt;Could I create something like the logo but with a more polished appearance? Why do people say ASCII art? Don't we have unicode almost everywhere now? So, shouldn't there be more symbols to choose from now to make "better" text art?&lt;/p&gt;

&lt;p&gt;The net result of my experimentation is &lt;strong&gt;&lt;a href="https://github.com/robole/fetching"&gt;fetching&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0EEesSBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7v950l80w5wyml37k3q2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0EEesSBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7v950l80w5wyml37k3q2.png" alt="fetching logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use it to fetch random unicode art. I wanted it to be a bit playful. I want to remind myself that this computer stuff is fun, and to enjoy myself while I'm doing it! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqQRKPw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5go4hffbjvwedjeknih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqQRKPw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5go4hffbjvwedjeknih.png" alt="fetching mario example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The art is &lt;strong&gt;colored based on your terminal color scheme&lt;/strong&gt;. Here are some examples side-by-side using different themes: the top-left theme is &lt;a href="https://draculatheme.com/"&gt;Dracula&lt;/a&gt;, the top-right is &lt;a href="https://ethanschoonover.com/solarized/"&gt;Solarized&lt;/a&gt;, the other two are just me playing around with colors - maybe I'm the first one to make an ultra high contrast Mario! 🤣I think the output has a different personality depending on your color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--us5mwet3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z27aji2yq59y211ha7wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--us5mwet3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z27aji2yq59y211ha7wo.png" alt="mario theme examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I noticed that neofetch squashes the output if your terminal window is a bit narrow. I was able to make my scripts &lt;strong&gt;responsive to the terminal window&lt;/strong&gt;. ✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KBlqJepA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f10rn5z7kl5uzuwnl4oz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBlqJepA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f10rn5z7kl5uzuwnl4oz.png" alt="garbled output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The included image scripts were mostly inspired by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;abstract art, particularly the &lt;a href="https://en.wikipedia.org/wiki/De_Stijl"&gt;De Stijl movement&lt;/a&gt; with its simplified form and limited palette&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pBWWzYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26nsxuwljegu1kr4tm98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pBWWzYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26nsxuwljegu1kr4tm98.png" alt="mondrian"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;computer games, particularly from the 1980's and 1990's&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kH3JlAqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udwrhwckuvbqz4va6miq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kH3JlAqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udwrhwckuvbqz4va6miq.png" alt="space invaders"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;street art&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MNO3IcRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0m1byi21xljdp1xuaxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNO3IcRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0m1byi21xljdp1xuaxb.png" alt="obey"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;star wars&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_0i6jLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8aoyg9rsebj1dm7rwfl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_0i6jLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8aoyg9rsebj1dm7rwfl6.png" alt="groku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I add the command &lt;code&gt;fetching -r&lt;/code&gt; to my &lt;code&gt;.zshrc&lt;/code&gt; to show a random image every time I open a terminal.&lt;/p&gt;

&lt;p&gt;You can run it as a slideshow too if you want with &lt;code&gt;fetching -s 2&lt;/code&gt; , which shows a new image every 2 seconds!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZRRSvJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltu14t1m9w3ey3cfl63.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZRRSvJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltu14t1m9w3ey3cfl63.gif" alt="slideshow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think I have just scratched the surface. Unicode has approxmiately 143,859 unicode characters. These different forms and shapes have the potential for creating very different things. &lt;/p&gt;

&lt;p&gt;I mostly used the &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;Block Elements character set&lt;/a&gt; (as below). It facilitates creating blocky compositions with a smooth texture.  As I practice and try out more characters, I think the output will be better and more variable.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;█ ▉ ▊ ▋ ▌ ▍ ▎ ▏▐ ▕ ▇ ▆ ▅ ▄ ▃ ▂ ▁  ■ ▄ ▀  ▬ ▓ ▒ ░ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check out the repo for more in-depth info. You need to have the Bash shell on your system installed to use it. There is an installation script to make it quick and easy to try it out. So, try it out!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/robole"&gt;
        robole
      &lt;/a&gt; / &lt;a href="https://github.com/robole/fetching"&gt;
        fetching
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of *fetching* unicode art for the terminal.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
  &lt;br&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/title/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Cn6v18---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/title/logo.png" width="301" alt="Fetching"&gt;&lt;/a&gt;
  &lt;br&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A collection of &lt;i&gt;fetching&lt;/i&gt; unicode art for the terminal.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have to be in a state of play to design. If you're not in a state of play, you can't make anything.&lt;/p&gt;
&lt;p&gt;- Paula Scher&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The goal is to add a touch of beauty to your terminal, and trigger a sense of play.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/mario-mytheme.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2ley_Et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/mario-mytheme.png" alt="mario example"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The art is &lt;strong&gt;colored according to your terminal color scheme&lt;/strong&gt;. Here are some examples side-by-side using different themes: uglythe top-left theme is &lt;a href="https://draculatheme.com/" rel="nofollow"&gt;Dracula&lt;/a&gt;,the top-right is &lt;a href="https://ethanschoonover.com/solarized/" rel="nofollow"&gt;Solarized&lt;/a&gt;, the other two are just me playing around with colors! The output can have a different personality depending on your color scheme.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/mario-colors.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zgs_RYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/mario-colors.png" alt="mario colored"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The included scripts are &lt;strong&gt;responsive to the terminal window&lt;/strong&gt;. This prevents distorted output in the random and slideshow modes. 🕶️&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/garbled.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nyHKRno_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/garbled.png" alt="garbled output"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The included scripts are inspired by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;abstract art, particularly the &lt;a href="https://en.wikipedia.org/wiki/De_Stijl" rel="nofollow"&gt;De Stijl movement&lt;/a&gt; with its simplified forms and limited palette&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/mondrian.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMMuxBxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/mondrian.png" alt="mondrian"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;computer games, particularly from the…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/robole/fetching"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is info on making your own images in there. I outline my "process". I don't know how sane or repeatable it is really! I enjoy this type of thing, it may be drudgery to you!&lt;/p&gt;

&lt;p&gt;Let me know what you think. 🙂 If you have styled your terminal, share a screenshot as comment!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Saving a missing referral</title>
      <author>Caio Jhonny</author>
      <pubDate>Wed, 09 Jun 2021 10:29:26 +0000</pubDate>
      <link>https://dev.to/caiojhonny/saving-a-missing-referral-4n56</link>
      <guid>https://dev.to/caiojhonny/saving-a-missing-referral-4n56</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;p&gt;After the &lt;a href="https://gdpr.eu/"&gt;GDPR&lt;/a&gt;, we can no longer enable cookies without user consent. This means that we can no longer save the user's session on their first visit, losing your reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VikGWjrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfrd9o8racioe8xw1h7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VikGWjrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfrd9o8racioe8xw1h7y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-save-the-referral"&gt;
  &lt;/a&gt;
  How can I save the referral?
&lt;/h3&gt;

&lt;p&gt;We can save the referral using the localStorage property at the first access.&lt;/p&gt;

&lt;p&gt;Before saving, we need to check if there is a referral to be saved and if the referral is different from our document.location.origin to avoid saving your website as a referral (This also prevents cases where the user goes to another page of your website).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;referrer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;referrer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;referral&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;referrer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we can retrieve our referral when it's necessary to call our cookie function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get the referral saved on localStorage&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;referral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;referral&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Verify if exists&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;referral&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;referral&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Define your saved referral into document.referrer&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;referrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;get&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;referral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// After that you can call your cookies function, analytics,  facebook pixel, etc...&lt;/span&gt;
&lt;span class="nx"&gt;callCookies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope it's helpful some of you 🙂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>analytics</category>
      <category>referral</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to make your open source project contributor friendly 🤗</title>
      <author>Hendrik</author>
      <pubDate>Wed, 09 Jun 2021 10:19:35 +0000</pubDate>
      <link>https://dev.to/hendr_ik/how-to-make-your-open-source-project-contributor-friendly-4fp7</link>
      <guid>https://dev.to/hendr_ik/how-to-make-your-open-source-project-contributor-friendly-4fp7</guid>
      <description>&lt;p&gt;There are many reasons that may lead you to the decision to run a project in an open source fashion. You might want to make your application code available to public to increase trust, or make it especially easy to distribute your library to increase usage. Another common motivation is to establish &lt;strong&gt;a healthy community of contributors around your project&lt;/strong&gt;, allowing you to solicit feedback, make your project more diverse and maybe also distribute the burden of maintenance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions-are-not-only-about-writing-code"&gt;
  &lt;/a&gt;
  Contributions are not only about writing code
&lt;/h2&gt;

&lt;p&gt;Before we talk about how to be friendly to contributors, let’s take a quick detour to define what a contribution to an open source project actually is in the first place. Oftentimes, contributing to an open source project seems to be synonym with opening a Pull Request that fixes a bug or adds a feature. To us, it means a lot more than that. Opening an issue about how something does not work for you is a meaningful contribution as well. Proofreading documentation is just as important as writing code. Offering help to localize the project in a different language is a major contribution. Leaving product feedback, both praise and criticism contribute to moving a project forward. &lt;strong&gt;So when we talk about a contributor friendly project, we talk about all of these means of contributing, not only about writing code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-we-try-to-do-in-raw-offenoffen-endraw-"&gt;
  &lt;/a&gt;
  Things we try to do in &lt;code&gt;offen/offen&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.offen.dev/?utm_source=socialmedia&amp;amp;utm_campaign=0185"&gt;Offen&lt;/a&gt; is a fair and lightweight alternative to common web analytics tools. It’s self hosted software and all code is available at the &lt;a href="https://github.com/offen/offen"&gt;offen/offen repository on GitHub&lt;/a&gt;. In this constellation, feedback and participation is especially important for us. In this article we’d like to share &lt;strong&gt;what we do to make our repo friendly and welcoming towards any kind of contribution&lt;/strong&gt; from the community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#head-first-in-the-readme-indepth-docs-for-later"&gt;
  &lt;/a&gt;
  Head first in the README, in-depth docs for later
&lt;/h3&gt;

&lt;p&gt;Striking the right balance between a brief introduction and an in-depth introduction is tough. If you have an idea and just want to get started, you don’t want to be bothered to read through detailed setup instructions. But if you have everything up and running, you probably would like to understand the how and the why of the project’s setup at some point.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;offen/offen&lt;/code&gt; we are catering both of those needs in different places. For people who just want to get things running as quickly as possible, we have &lt;a href="https://github.com/offen/offen#feedback-and-contributions-welcome"&gt;a short intro in our README&lt;/a&gt;. More in-depth explanations on the development setup and the application architecture have been collected in a dedicated &lt;a href="https://docs.offen.dev/developing-offen/?utm_source=socialmedia&amp;amp;utm_campaign=0185"&gt;documentation site for developers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This setup is also interesting because it will force you, the project maintainer, to answer two important questions: &lt;strong&gt;Can you get external contributors to get up and running with your setup in a few paragraphs? Can you also explain the setup and the architecture in-depth to outsiders in a way that it makes sense?&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contribution-guidelines-that-are-helpful-and-friendly"&gt;
  &lt;/a&gt;
  Contribution guidelines that are helpful and friendly
&lt;/h3&gt;

&lt;p&gt;An established and recommended practice is to have a &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; file at the root level of your repository that has details about how to contribute to a project. This might seem like a trivial thing to write, but we found in reality it’s a tricky task to come up with something that is both inviting and helpful for potential contributors.&lt;/p&gt;

&lt;p&gt;Often times, documents like this focus on what potential contributors should not do: Don’t open a PR without an issue, don’t open an issue without having searched the existing ones. Those are valid points from a project management perspective and also help the contributors themselves manage the repository. However, &lt;strong&gt;phrasing all of this as a list of "donts" and "only ifs" exclusively will subconsciously deter people from contributing&lt;/strong&gt;. What would you prefer: a duplicate issue from time to time, or no issues at all being raised because users are too scared of doing the wrong thing? Also: do not forget to invite people to making non-code contributions as well.&lt;/p&gt;

&lt;p&gt;Check our &lt;a href="https://github.com/offen/offen/blob/development/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt; for an idea of how we approach this. We also have a &lt;a href="https://github.com/offen/offen/blob/development/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; that defines the way we'd like to interact with people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boring-tech-is-accessible"&gt;
  &lt;/a&gt;
  “Boring tech” is accessible
&lt;/h3&gt;

&lt;p&gt;If you want people to contribute code to your project, the choice of the tech you use is a major factor. Trying to make tech choices boring will help contributors to get started quickly, just because it’s already known to work, and also known how to work with.&lt;/p&gt;

&lt;p&gt;In our example, Offen is built as a server side application with a relatively complex frontend running in the browser. On the server we chose Go as a language and the Gin framework. Those might not be most exciting choices in tech, but they are optimized for easy setup, robustness and plenty of good documentation. As a contributor, this means that when I run into issues setting up the project, I will likely find answers online soon instead of having to wrangle some custom framework the maintainers came up with themselves.&lt;/p&gt;

&lt;p&gt;In our client side application we started out using the great, but slightly esoteric Choo framework, but soon migrated to Preact, just because the React ecosystem (Preact is a lightweight "clone" of React) is so ubiquitous and well-understood by a lot of people. We also do not use any fancy language features, but try to keep things simple so that you don't need to learn about brand new syntax constructs before you can contribute code. Think twice before you add something like TypeScript to a project you want to be accessible. Every additional layer - no matter how great or helpful they are for you who already knows how to use them - will make it harder for others to get started.&lt;/p&gt;

&lt;p&gt;This topic also extends to your project's local development setup. &lt;strong&gt;The more extra tools you need the less likely it is someone will try to get started setting up your project on their machine&lt;/strong&gt;. The setup should also work on all major OSes. A lot of people use Windows, some use Linux, many use a Mac, none of them should be left out. For Offen, we decided to use a &lt;code&gt;docker-compose&lt;/code&gt; based setup, which gives us a reproducible cross-OS setup without people having to install anything other than Docker. You can check the &lt;a href="https://github.com/offen/offen/blob/7e5a8b751db8aff0c347f3134fb586d26d60329d/docker-compose.yml"&gt;compose file&lt;/a&gt; in our repository to see how that looks like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#labels-make-issues-discoverable"&gt;
  &lt;/a&gt;
  Labels make issues discoverable
&lt;/h3&gt;

&lt;p&gt;In case you host your project on a platform like GitHub or GitLab, the repository’s issue tracker will likely be one of the most important ways of interacting with contributors. Writing clear and concise issues that do not require much insider knowledge is one thing, but &lt;strong&gt;how do you make these issues discoverable for anyone who wants to contribute to your project&lt;/strong&gt;? A common approach is to use labels for your issues.&lt;/p&gt;

&lt;p&gt;One aspect of labeling issues is conveying information that is specific to your project. What language would you need to be proficient with to work on the issue? Is the issue not related to code, but an ongoing discussion people could participate in?&lt;/p&gt;

&lt;p&gt;The other aspect of labeling is the external ecosystem that has evolved around GitHub issues. For example, sites like &lt;a href="https://up-for-grabs.net/#/"&gt;Up For Grabs&lt;/a&gt; allow anyone to search for issues labeled &lt;code&gt;help-wanted&lt;/code&gt; across all public repositories on GitHub. &lt;a href="https://goodfirstissue.dev/"&gt;Good first issue&lt;/a&gt; lets you find issues labeled &lt;code&gt;good first issue&lt;/code&gt; that are well suited for beginners. Applying such labels will connect you with others that otherwise wouldn’t know about your project in the first place.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://github.com/offen/offen/issues"&gt;issue tracker&lt;/a&gt; of &lt;code&gt;offen/offen&lt;/code&gt; to see how we label our issues here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternative-means-of-getting-in-touch"&gt;
  &lt;/a&gt;
  Alternative means of getting in touch
&lt;/h3&gt;

&lt;p&gt;We use GitHub for hosting our repository, and while this makes both code and issues publicly visible for anyone, &lt;strong&gt;having a GitHub account should not be a requirement for contributing to the project&lt;/strong&gt;. Whenever we solicit feedback or contributions, we try to make it clear that people can also &lt;a href="//mailto:hioffen@posteo.de"&gt;email us&lt;/a&gt; (bonus points for providing a PGP key for those who prefer to use one), &lt;a href="https://twitter.com/hioffen"&gt;tweet at us&lt;/a&gt; or use &lt;a href="https://fosstodon.org/@offen"&gt;Mastodon&lt;/a&gt; to get in touch. Just because a service like GitHub or GitLab is free, it does not mean anyone can or wants to create an account with it. Having multiple feedback channels lowers the barrier of entry for anyone who wants to contribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-do-to-make-your-project-contributor-friendly"&gt;
  &lt;/a&gt;
  What do you do to make your project contributor friendly?
&lt;/h2&gt;

&lt;p&gt;Do you run an open source project that is geared towards creating a community of contributors? What do you do to make it easy for anyone to make meaningful contributions?&lt;/p&gt;

&lt;p&gt;Let us know what you do, and also do not hesitate to start contributing your ideas and feedback about &lt;a href="https://www.offen.dev/?utm_source=socialmedia&amp;amp;utm_campaign=0185"&gt;Offen&lt;/a&gt;. We’d be happy to have you on board.&lt;/p&gt;

&lt;p&gt;Written by Frederik Ring&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>feedback</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Why so00 DYNAMIC?</title>
      <author>Shakya Peiris</author>
      <pubDate>Wed, 09 Jun 2021 09:35:24 +0000</pubDate>
      <link>https://dev.to/shakyapeiris/why-so-dynamic-181p</link>
      <guid>https://dev.to/shakyapeiris/why-so-dynamic-181p</guid>
      <description>&lt;p&gt;Hello everyone! Hope you are reacting well. So, this is my first post in dev.to and I thought to start with a Next.Js blog. So today let's discuss how to work in dynamic pages using getStaticProps and getStaticPath.&lt;/p&gt;

&lt;p&gt;In Next.Js not like in react, they provide us file based routing and you can see those pages under pages folder. In there you can create new files with .js extension and make sure you have named it with the route you needed. (eg : if you want to have an about page you have to name that page as about.js and for '/' path you must name it as index.js). Also you can define dynamic URLs with as follows and make sure you have defined the parameter inside square brackets.&lt;/p&gt;

&lt;p&gt;eg : [blogId].js&lt;/p&gt;

&lt;p&gt;To access that parameter inside the dynamic URL, we can use useRouter hook which is imported from next/router. Then you can grab the parameter values as follows. But this is not the way we are going to follow today.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to data fetching, if we do data fetching in Next.Js as we do in react components with useEffect, that fetched content do not affect SEO because the page is hydrated from data after it pre-renders and therefor server won't be able to see that fetched data. There for we can use built in functions called as getStaticProps and getServerSideProps to fix that issue. Today I'm going to focus on getStaticProps function which is the most preferred way to do this task.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above getStatic Props async function after the data is fetched we have to return that data inside an object with the key props so that page component will be able to access that data via props.&lt;/p&gt;

&lt;p&gt;Also, in the above page it show only data fetched for the first time to the server. There for even if changd the data in our backend API data in the component does not change. Therefor to fix that issue we can put a revalidate time out inside the returned object with revalidate key as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then how can we access the url parameters? That's simple. You can pass an argument to the function called as context. Context is a nested object. From that, you can access url parameters as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the dev server with npm run dev with above setup you will get an array saying about getStaticPath. Now let's see how we can fix that issue.&lt;/p&gt;

&lt;p&gt;So to fix that issue you have to call a built in next.js function called getStaticPath inside your page and return an object with two keys, fallback (boolean) and paths (array) as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPath&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in the above paths array you can define all the possible parameter values so that if user enters a different value than those defined ones, he/she will be redirected to a 404 page. Also, you can set fallback to false when you are in develop server and make sure you have set it true or "blocking" when you deploy your app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPath&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;blogId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}}})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refer the above code snippet for the complete process.&lt;br&gt;
Github Link for a same sort of project : &lt;a href="https://github.com/shakyapeiris/meetup_web.git"&gt;https://github.com/shakyapeiris/meetup_web.git&lt;/a&gt;&lt;br&gt;
So that's it! Thanks You!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to create an efficient Modal component in React using Hooks and Portals</title>
      <author>CodeBucks</author>
      <pubDate>Wed, 09 Jun 2021 09:33:29 +0000</pubDate>
      <link>https://dev.to/codebucks/how-to-create-an-efficient-modal-component-in-react-using-hooks-and-portals-360p</link>
      <guid>https://dev.to/codebucks/how-to-create-an-efficient-modal-component-in-react-using-hooks-and-portals-360p</guid>
      <description>&lt;p&gt;Modal is a common UX element. A modal is a dialog box/popup window that is displayed on top of the current page. You must have used pop-ups and notifications for your website. For some people pop-ups are really annoying😫 if it doesn't behave as it should. It must have good UI/UX.&lt;/p&gt;

&lt;p&gt;In this article we're going to create an efficient &lt;strong&gt;Modal component&lt;/strong&gt;🤩 from scratch without using any library.&lt;/p&gt;

&lt;p&gt;Demo Link🖤: &lt;a href="https://react-reusable-components.vercel.app/"&gt;https://react-reusable-components.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our main goal is to create an efficient modal which,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has a good layout&lt;/li&gt;
&lt;li&gt;Doesn't break ui when we use overflow in parent component&lt;/li&gt;
&lt;li&gt;Can render content Dynamically&lt;/li&gt;
&lt;li&gt;Clean and Elegant animation &lt;/li&gt;
&lt;li&gt;Looks good (good UI)&lt;/li&gt;
&lt;li&gt;Have more control for User (like clicking outside can close modal) etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;If you prefer video format then you can watch this video 📽👇&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5aG8peJsBVg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Create your react-app using,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app react-modal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For this tutorial i'm going to use &lt;strong&gt;Sass&lt;/strong&gt; so make sure you have installed node-sass package. To install it do,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install node-sass&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-create-basic-modal-component"&gt;
  &lt;/a&gt;
  Let's create Basic Modal component
&lt;/h3&gt;

&lt;p&gt;open App.js file.&lt;/p&gt;

&lt;p&gt;clean🧹 unnecessary code.&lt;/p&gt;

&lt;p&gt;Now create one button in the App.js file to open and close modal just like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="App"&amp;gt;
      &amp;lt;button&amp;gt;
        Modal
      &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create one state to open and close modal.&lt;/p&gt;

&lt;p&gt;Write below 👇 code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 6:&lt;/strong&gt; Contains modal state which is false initially.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 7:&lt;/strong&gt; A Toggle method to toggle modal state from false to &lt;br&gt;
            true and vice-versa. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 11:&lt;/strong&gt; Make sure to connect &lt;code&gt;Toggle()&lt;/code&gt; method to onClick of&lt;br&gt;&lt;br&gt;
             the button.&lt;/p&gt;

&lt;p&gt;Next create &lt;code&gt;Modal.js&lt;/code&gt; file and Write below 👇 code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Modal = () =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      Modal
    &amp;lt;/div&amp;gt;
  );
};

export default Modal;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now import it in the Modal in &lt;code&gt;App.js&lt;/code&gt; file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 17:&lt;/strong&gt; Here we have imported &lt;code&gt;Modal&lt;/code&gt; component. And passed &lt;br&gt;
             modal state as show in the props.&lt;/p&gt;

&lt;p&gt;Now open &lt;code&gt;Modal.js&lt;/code&gt; and write below code 👇&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Line 3:&lt;/strong&gt; Deconstruct Show from the props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 7:&lt;/strong&gt; We will display modal only when show state is true.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 9 to 30:&lt;/strong&gt; This is the whole &lt;strong&gt;Modal layout&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ModalContainer div contains the modal&lt;/li&gt;
&lt;li&gt;In the modal div, There is one header which contains &lt;em&gt;modal title&lt;/em&gt; and &lt;em&gt;close&lt;/em&gt; Button (You can use any icon for close button).&lt;/li&gt;
&lt;li&gt;Main tag contains &lt;em&gt;content&lt;/em&gt; of the modal.&lt;/li&gt;
&lt;li&gt;Footer has 2 buttons one is &lt;em&gt;submit&lt;/em&gt; and another is &lt;em&gt;cancel&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now when you press a button modal will show and on pressing again it will close the modal.&lt;/p&gt;

&lt;p&gt;First Let's add some styling to our modal.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;Modal.scss&lt;/code&gt; file and import it in the &lt;code&gt;Modal.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Copy and paste this styling in the &lt;code&gt;Modal.scss&lt;/code&gt; file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This will give your modal a better look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 21:&lt;/strong&gt; By applying this &lt;code&gt;backdrop-filter&lt;/code&gt; you can make it &lt;br&gt;
             look like frost-glass.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-add-close-event-in-modal"&gt;
  &lt;/a&gt;
  Let's add Close event in modal
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;App.js&lt;/code&gt; file pass toggle method as a props in the modal just like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Modal show={modal} title="My Modal" close={Toggle}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;open &lt;code&gt;Modal.js&lt;/code&gt; file and deconstruct close from the props.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 3:&lt;/strong&gt; Deconstruct Close from the props.&lt;/p&gt;

&lt;p&gt;We have added close method in 3 places:&lt;br&gt;
&lt;strong&gt;Line 16&lt;/strong&gt;: At the close button.&lt;br&gt;
&lt;strong&gt;Line 22&lt;/strong&gt;: At the cancel button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 11&lt;/strong&gt;: We have also added close method here too. Why? because whenever user clicks outside it should close the modal. So here, when user clicks on the modalContainer it closes the modal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 13&lt;/strong&gt;: here we have to stop this click events in the modal else it will close it so for that we have used e.stopPropagation().&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;hint:&lt;/strong&gt; You can also add event Listener and add functionality &lt;br&gt;
            in which when user clicks esc key, It closes the &lt;br&gt;
            modal. (It is good for user experience)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#lets-use-portals-to-render-modal-component"&gt;
  &lt;/a&gt;
  Let's use Portals to render Modal component
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What🧐 is &lt;a href="https://reactjs.org/docs/portals.html"&gt;portals&lt;/a&gt; ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Why🤔 should we use portals?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Sometimes when we use &lt;code&gt;overflow&lt;/code&gt; or &lt;code&gt;z-index&lt;/code&gt; properties in the parent component then we need child component (like modal or dialogues) to break container visually, and portals can be very handy to do that because it renders children outside of DOM hierarchy. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Syntax✍ for to create portal👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ReactDOM.createPortal&lt;br&gt;
( &lt;br&gt;
element, &lt;br&gt;
DOM node where you want to render this element &lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;So let's implement portals in our Modal component.&lt;/p&gt;

&lt;p&gt;To use portal we have to create one more element in the dom.&lt;br&gt;
Generally our whole App renders in the div with the id root.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;index.html&lt;/code&gt; file.&lt;br&gt;
and above the root div create one more div with the id &lt;em&gt;modal&lt;/em&gt;.&lt;br&gt;
Just like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="modal" /&amp;gt;
&amp;lt;div id="root" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Open &lt;code&gt;Modal.js&lt;/code&gt; file and edit it just like this,&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 1&lt;/strong&gt;: Import ReactDom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 6&lt;/strong&gt;: After return create portal using &lt;code&gt;ReactDom.createPortal&lt;/code&gt;, As it's first argument we have passed whole modal component and for the second argument we have passed the dom node where we want to render it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 34&lt;/strong&gt;: We want to render our component in the div with id modal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-make-modal-content-dynamic"&gt;
  &lt;/a&gt;
  Let's make Modal content Dynamic:
&lt;/h3&gt;

&lt;p&gt;open &lt;code&gt;App.js&lt;/code&gt; file and pass title as a props and content inside the component as shown below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Modal show={modal} title="My Modal" close={Toggle}&amp;gt;
        This is Modal content
&amp;lt;/Modal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we have passed title as props and modal content as the children.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;Modal.js&lt;/code&gt; and write,&lt;/p&gt;

&lt;p&gt;(Final Modal.js code)&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 5&lt;/strong&gt;: Deconstruct &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt; from the props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 17&lt;/strong&gt;: Insert title in the curly braces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 22&lt;/strong&gt;: Render children using the curly braces.&lt;/p&gt;

&lt;p&gt;Now if you want to add a little animation in the modal you can watch the video or you can go to the git repository and read📚 code.&lt;/p&gt;

&lt;p&gt;If you have any question just ask in the comments😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks For Reading😄
&lt;/h3&gt;

&lt;p&gt;Feel free to visit my youtube channel: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/channel/UCeYt6blRBKuNrEg_-282fSA"&gt;@CodeBucks&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Plasma Donation Website using MERN stack</title>
      <author>Neha Soni</author>
      <pubDate>Wed, 09 Jun 2021 09:10:13 +0000</pubDate>
      <link>https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5</link>
      <guid>https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5</guid>
      <description>&lt;p&gt;Hello amazing people 👋,&lt;/p&gt;

&lt;p&gt;Welcome to &lt;strong&gt;Plasma Donation&lt;/strong&gt; Website. As we all know, the world is suffering from the COVID-19 crisis. Our government and health care professionals are trying their best to help the patients suffering from COVID-19. Scientists are trying to discover a vaccine to cure people affected with coronavirus. There is a scientific way from which we can help to lower the death ratio or help the COVID 19 affected person. Plasma therapy is an experimental approach to treat COVID-positive patients and help them recover faster. But, in this situation, it is difficult for a patient to find a plasma donor as everybody can’t donate plasma.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-project-goal"&gt;
  &lt;/a&gt;
  Our project goal
&lt;/h2&gt;

&lt;p&gt;The main goal of our project is to make it easier for the COVID-19 patients to get a plasma donor easily as well as donate plasma if they have recovered. The system targets two types of users: the people who want to donate plasma and the people who need plasma. The user can also view the total active cases, nearby vaccine centers, hospitals address. The main objective of developing the website is to make it easier for the COVID-19 patients to get a plasma donor easily and as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-of-the-project"&gt;
  &lt;/a&gt;
  Workflow of the project
&lt;/h2&gt;

&lt;p&gt;The person who wants to donate his/her plasma needs to register in our application providing required information which are name, age, blood group, phone number, and location, etc.&lt;br&gt;
Patients who need plasma can also fill the form to request the plasma. Patients can directly call the donor by taking his/her contact number from the application.&lt;br&gt;
The user can also view the total active cases, recovered cases, vaccine centers in their area, hospital location, and helpline number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uml-diagram"&gt;
  &lt;/a&gt;
  UML diagram
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--etnhm3AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622813954455/DyyGeHtSM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--etnhm3AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622813954455/DyyGeHtSM.png" alt="Screenshot (330).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology-used"&gt;
  &lt;/a&gt;
  Technology Used
&lt;/h2&gt;

&lt;p&gt;In this project, we have used the following technologies :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;b&gt;Frontend&lt;/b&gt; : HTML, CSS, React.JS&lt;/li&gt;
&lt;li&gt; &lt;b&gt;Backend&lt;/b&gt; : NodeJs, Express.Js&lt;/li&gt;
&lt;li&gt; &lt;b&gt;Database&lt;/b&gt; : MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Speed&lt;/b&gt; : This website is fast and offers great accuracy as compared to manual registered keeping.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Maintenance&lt;/b&gt; : Less maintenance is required&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;User Friendly&lt;/b&gt; : It is very easy to use and understand. It is easily workable and accessible for everyone.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Fast Results&lt;/b&gt; :  It would help you to provide plasma donors easily depending
upon the availability of it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Internet&lt;/b&gt; : It would require an internet connection for the working of the 
website.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Auto- Verification&lt;/b&gt; : It cannot automatically verify the genuine users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screenshots-amp-gif"&gt;
  &lt;/a&gt;
  Screenshots &amp;amp; Gif
&lt;/h2&gt;

&lt;h3&gt; 1.) Home Page&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vM_0iTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814397676/44XLJhPJ4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vM_0iTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814397676/44XLJhPJ4.png" alt="HomePage.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 2.) Nearby Vaccine Centres&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_ZzU26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814430478/IOGF4WnKe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_ZzU26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814430478/IOGF4WnKe.png" alt="VaccineCentres.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 3.) Hospitals List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lyxVOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814466628/eDYQSt4IG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lyxVOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814466628/eDYQSt4IG.png" alt="HospitalsList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 4.) Plasma Info&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/d73f39328f32563667a6c5812c0c6d7c5fbe204d9923cc96659ffe22ef85abe4/68747470733a2f2f696d372e657a6769662e636f6d2f746d702f657a6769662d372d3530373333326162666539392e676966" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/d73f39328f32563667a6c5812c0c6d7c5fbe204d9923cc96659ffe22ef85abe4/68747470733a2f2f696d372e657a6769662e636f6d2f746d702f657a6769662d372d3530373333326162666539392e676966" alt="PlasmaInfo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 5.) Donor Form&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZpNH4EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814570484/3Z2QmJ42WT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZpNH4EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814570484/3Z2QmJ42WT.png" alt="DonorForm.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 6.)  Donors List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ5sZTaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814623017/VTHDJiNOM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ5sZTaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814623017/VTHDJiNOM.png" alt="DonorList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 7.) Request Form&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qn8IQQAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814665967/gjGTfr5ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qn8IQQAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814665967/gjGTfr5ua.png" alt="RequestPlasmaForm.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 8.) Requests List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YU-VRPdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814711149/VzF_l5WHw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YU-VRPdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814711149/VzF_l5WHw.png" alt="PlasmaRequestList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-work"&gt;
  &lt;/a&gt;
  Future Work:-
&lt;/h2&gt;

&lt;p&gt;1.) In future, we will try to verify the genuine users.&lt;br&gt;&lt;br&gt;
2.) For now, we have just listed the hospitals in Delhi, but in the future, we will try to add hospitals of each state of India.&lt;/p&gt;

&lt;h3&gt; ✨Team&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href="https://github.com/nehasoni05"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZUFhxoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nehasoni05.png%3Fsize%3D100"&gt;
        Neha Soni
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href="https://github.com/AbhishekJaswal2001"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgLaYtdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AbhishekJaswal2001.png%3Fsize%3D100"&gt;
        Abhishek Jaswal
      &lt;/a&gt;
    &lt;/td&gt;
     &lt;td&gt;
     &lt;a href="https://github.com/kritikakaura1518"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_An2Fyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kritikakaura1518.png%3Fsize%3D100"&gt;
       Kritika Kaura
    &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
     &lt;a href="https://github.com/ridhisood04"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J43KWW6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ridhisood04.png%3Fsize%3D100"&gt;
       Ridhi Sood
    &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;'' YOUR CONTRIBUTION MATTERS ''&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As I am a student so I am not able to add too much functionality to this project. So, if you find any problem, bug (🐞), want to add more features to this website, or want to share any kind of suggestions to improve our work please let us know by creating an  &lt;a href="https://github.com/nehasoni05/Plasma_Donation_Website/issues"&gt;issue here&lt;/a&gt;. I will also try to work more on this project so I will host it somewhere and people find it useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;1.) ReactJS documentation:-  &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt; &lt;br&gt;&lt;br&gt;
2.)  NodeJS documentation:-  &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/"&gt;https://nodejs.org/dist/latest-v14.x/docs/api/&lt;/a&gt; &lt;br&gt;&lt;br&gt;
3.) ExpressJS documentation:- &lt;a href="https://expressjs.com/en/starter/installing.html"&gt;https://expressjs.com/en/starter/installing.html&lt;/a&gt; &lt;br&gt;&lt;br&gt;
4.) MongoDB :-  &lt;a href="https://docs.mongodb.com/manual/tutorial/getting-started/"&gt;https://docs.mongodb.com/manual/tutorial/getting-started/&lt;/a&gt; &lt;br&gt;&lt;br&gt;
5.) Git and Github:-  &lt;a href="https://gist.github.com/hofmannsven/6814451"&gt;https://gist.github.com/hofmannsven/6814451&lt;/a&gt; &lt;br&gt;&lt;br&gt;
6.) W3 School &lt;br&gt;&lt;br&gt;
7.) YouTube &lt;br&gt;&lt;br&gt;
8.) Stack Overflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/nehasoni05/Plasma_Donation_Website"&gt;Plasma Donation Website&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Working Project Video:-&lt;/strong&gt; &lt;a href="https://drive.google.com/file/d/1EFCLIF-TqjJvc2h8EJK2Guxsn3IIA-px/view?usp=sharing"&gt;Plasma Donation Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you liked this project, share it with others! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 🤝🤝
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubts or feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/introduction-to-javascript-basics"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/playing-with-javascript-objects-1"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://nehasoni.hashnode.dev/7-javascript-data-structures-you-must-know"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/digital-clock-using-javascript"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://nehasoni.hashnode.dev/25-javascript-project-with-source-code-to-build-your-skills"&gt;25+ JavaScript Project With Source Code to Build your Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/git-and-github-all-you-need-to-know"&gt;Git &amp;amp; Github: All you need to know&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/introduction-to-reactjs"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>node</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>I make you an esolang</title>
      <author>JavaCode7</author>
      <pubDate>Wed, 09 Jun 2021 08:47:29 +0000</pubDate>
      <link>https://dev.to/javacode7/i-make-you-an-esolang-43de</link>
      <guid>https://dev.to/javacode7/i-make-you-an-esolang-43de</guid>
      <description>&lt;p&gt;Recently, I have taken a break from writing about esolangs and I have to say, those 4 articles have really been successes 😊. I have now decided to find a balance between writing about languages (which you all seem to like 🤔) and writing about esolangs.&lt;/p&gt;

&lt;p&gt;I will make you an esolang &lt;em&gt;unconditionally&lt;/em&gt; (because I'm nice 😂) but within reason.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I will make it in either Python, JavaScript, TypeScript or Lua (you choose)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It cannot be too complex (I will reply to the comment stating if it is)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow up to 3 days 📅 for the creation of the esolang.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I have made about 3, I will write another article showcasing them and providing the code.&lt;/p&gt;

&lt;p&gt;Comment down below!!&lt;/p&gt;

</description>
      <category>esolang</category>
      <category>esoteric</category>
      <category>watercooler</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Memorable Hex codes</title>
      <author>Siddharth</author>
      <pubDate>Wed, 09 Jun 2021 08:38:20 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/memorable-hex-codes-37fg</link>
      <guid>https://dev.to/siddharthshyniben/memorable-hex-codes-37fg</guid>
      <description>&lt;p&gt;Hopefully this will save you a trip to the color picker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;#b00b00 (deep red)&lt;/strong&gt;        - Good for errors&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#de1e7e (pink)&lt;/strong&gt;            - Delete&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#2fa (green)&lt;/strong&gt;              - Looks like tha 2FA was successful&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#ac1d1c (red, obviously)&lt;/strong&gt;  - Warning! Extremely corrosive&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#facade (pink)&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#goodn8 (almost sky blue)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#c0ffee (teal)&lt;/strong&gt;            - Yeah teal coffee&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's a lot more &lt;a href="https://nedbatchelder.com/text/hexcolors.html"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
    <item>
      <title>These Are The Most Popular Songs To Code To</title>
      <author>Amelia Selby</author>
      <pubDate>Wed, 09 Jun 2021 08:17:23 +0000</pubDate>
      <link>https://dev.to/ameliaselby/these-are-the-most-popular-songs-to-code-to-552o</link>
      <guid>https://dev.to/ameliaselby/these-are-the-most-popular-songs-to-code-to-552o</guid>
      <description>&lt;p&gt;We all know that listening to music can help you get into the ‘zone’. It's that powerful state that developers hit from time to time where the only thing that matters is the problem you're working on.&lt;/p&gt;

&lt;p&gt;When you’re trying to focus, music is the best way to keep yourself entertained as it can be difficult to listen to podcasts or watch youtube videos. And whether it’s the passing traffic, a squeaky floorboard or dull office chitter-chatter, a cracking playlist can go a long way to blocking out unwanted noise!&lt;/p&gt;

&lt;p&gt;So, what &lt;em&gt;are&lt;/em&gt; the best songs to listen to get you into that elusive zone?&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ko2.co.uk/most-popular-songs-to-code-to/"&gt;KO2&lt;/a&gt; decided to scrape Spotify for coding playlists and work out which songs and artists are the most popular to programme to. With a list of 58,000 songs from an eclectic mix of genres, they have been able to figure out the winner!&lt;/p&gt;

&lt;p&gt;Intrigued by who made the cut? Well, scroll down to see the results of the most popular songs and artists to code to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-popular-songs-to-code-to"&gt;
  &lt;/a&gt;
  The most popular songs to code to
&lt;/h2&gt;

&lt;p&gt;1.Blinding Lights - The Weeknd - 135 BPM&lt;br&gt;
2.Day One - Hans Zimmer - 96 BPM&lt;br&gt;
2.French Inhale - [bsd.u] - 80 BPM&lt;br&gt;
4.Both of Us - Idealism - 85 BPM&lt;br&gt;
4.Cornfield Chase - Hans Zimmer - 94 BPM&lt;br&gt;
4.Solar Sailer - Daft Punk - 124 BPM&lt;br&gt;
4.Time - Hans Zimmer - 127 BPM&lt;br&gt;
8.[oops] - potsu - 69 BPM&lt;br&gt;
8.Affection - Jinsang - 84 BPM&lt;br&gt;
8.controlla - Idealism - 80 BPM&lt;br&gt;
8.Snowman - WYS - 110 BPM&lt;/p&gt;

&lt;p&gt;Outshining the rest of the competition was The Weeknd’s 2019 hit, ‘Blinding Lights’, which topped the list by featuring on the most coding playlists. Whilst clearly a popular choice with programmers, the song is also a favourite all-round, with Spotify revealing that it is the second most-streamed song on the platform with over 2.2 billion listens.&lt;/p&gt;

&lt;p&gt;Close behind, and tied with [bsd.u], is ‘One Day’ by Hans Zimmer, who nabbed 3 of the top 10 spots. ‘One Day’ was written and produced for the film, Pirates of the Caribbean: At World's End, serving as the romantic theme for the movie and featuring in most of Will and Elizabeth’s scenes. Well, its soft string ostinato is clearly a popular background choice for writing code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-popular-artists-to-code-to"&gt;
  &lt;/a&gt;
  The most popular artists to code to
&lt;/h2&gt;

&lt;p&gt;1.Daft Punk&lt;br&gt;
2.ODESZA&lt;br&gt;
3.M83&lt;br&gt;
4.deadmau5&lt;br&gt;
4.Hans Zimmer&lt;br&gt;
6.Bonobo&lt;br&gt;
6.Jon Hopkins&lt;br&gt;
6.Tycho&lt;br&gt;
9.Ludovico Einaudi&lt;br&gt;
9.The Weeknd&lt;/p&gt;

&lt;p&gt;When looking at which artists are the most popular to code to, Daft Punk takes the top spot with their songs appearing the most frequently across the coding Spotify playlists. The French electronic musicians average over 15 million monthly listeners on the music platform in general.&lt;/p&gt;

&lt;p&gt;Sitting in second place is the American duo ODESZA, known individually as Catacombkid and BeachesBeaches, whose electronic tunes average a respectable 5 million monthly Spotify listeners on Spotify.&lt;/p&gt;

&lt;p&gt;Electronic seems to be a popular music genre for programmers getting in the zone, with The Weeknd and Daft Punk appearing in the top 10 of both lists. This isn’t surprising though, as a consistent beat can help you establish a rhythm while working; the faster the music, the faster you work, maybe?&lt;/p&gt;

&lt;p&gt;But, it’s clearly not only about the upbeat tunes when it comes to coding. The German film composer Hans Zimmer ranks three times in the top 10 of the most popular songs list, and the muted tones of lofi music scores highly in both too. A rather eclectic mix to say the least...&lt;/p&gt;

&lt;p&gt;In fact, the beats per minute (BPM) in the top songs range from a heart-racing 176 BPM in Tycho’s ‘Awake’ right down to a chilled 69 BPM in Potsu’s lofi ‘[oops]’.&lt;/p&gt;

</description>
      <category>music</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I need #UI testing tool #WebApp</title>
      <author>sathishkumarkevin</author>
      <pubDate>Wed, 09 Jun 2021 08:05:27 +0000</pubDate>
      <link>https://dev.to/sathishkumarkevin/i-need-ui-testing-tool-webapp-4p59</link>
      <guid>https://dev.to/sathishkumarkevin/i-need-ui-testing-tool-webapp-4p59</guid>
      <description>&lt;p&gt;Hello,&lt;br&gt;
I would like to know tool for UI testing for modern webapp (react , angular kind of thing). Yep, most of them know tool called "selenium", but its hard to learn and write code. Could pls share tool which use less coding or without coding to create ui testing and also situmulate parallel user session? &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to invalidate a compromised  JWT</title>
      <author>pazvanti</author>
      <pubDate>Wed, 09 Jun 2021 07:23:41 +0000</pubDate>
      <link>https://dev.to/pazvanti/how-to-invalidate-a-compromised-jwt-23ld</link>
      <guid>https://dev.to/pazvanti/how-to-invalidate-a-compromised-jwt-23ld</guid>
      <description>&lt;p&gt;In &lt;a href="https://petrepopescu.tech/2021/02/using-json-web-tokens-for-authorization/"&gt;a past article&lt;/a&gt;, I wrote about JWTs, how to generate one and how to use them for authorization. JSON Web Tokens, however, have one major drawback. Once it is generated and submitted to the client, it can’t be easily made invalid. This is a big problem if the JWT got leaked and it did not expire (or worse, it does NOT have an expiration date). That is why it is important to make sure that your JWT can be invalidated at the server-side and I will show you two methods to do this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-1-blacklisting"&gt;
  &lt;/a&gt;
  Method 1: Blacklisting
&lt;/h3&gt;

&lt;p&gt;The easiest way, at least at first glance, is to have a way of blacklisting a JWT once it is compromised. You can store all compromised JWTs in the database and when an authorization request is received, you check that the JWT used is not part of this list. This approach has one big disadvantage though: the DB can become a bottleneck due to the amount of data that you need to retrieve.&lt;/p&gt;

&lt;p&gt;For small systems, this is not a major problem, but when you have thousands of requests per second, retrieving a full list of JWTs or going to the database to do a search for the one received can really slow down processing. This can be partially mitigated by using in-memory lists and caching the blacklisted JWTs, but this can also pose a problem because you don’t know if the cache is up-to-date. For example, if your cache refreshes at 15 minutes intervals, there still is that 15 minute window when a compromised JWT can still be used.&lt;/p&gt;

&lt;p&gt;To mitigate this you can make a method for invalidating the cache once a new blacklisted JWT is added. Also, what do you do for distributed systems that have multiple instances of the same service? Another problem is that the database has to be cleaned to remove JWTs that have expired and will fail validation even if not black-listed. All these will definitely add to the complexity of the system, will make it more error-prone, and can slow down overall processing, if not done correctly. So, here is a better way!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2-versioning-the-jwt"&gt;
  &lt;/a&gt;
  Method 2: Versioning the JWT
&lt;/h3&gt;

&lt;p&gt;The JWT can hold as much data as we need to validate it. The claims we insert during the build can be used for many purposes. So, let’s use one of the claims to also validate that the JWT is not blacklisted. I am not talking about an expiration date, this is something completely different, but of some information that we can easily correlate with the server and see if it was not marked as being invalid.&lt;/p&gt;

&lt;p&gt;I am thinking of using a “version” for the JWT. When we build the JWT for the first time for an entity (a user, a functionality, or some other category), we also store the version of the JWT for that entity. This can be in the database and it won’t provide a big overhead during processing. I will explain why a bit later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyServer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;generateJwt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Algorithm&lt;/span&gt; &lt;span class="n"&gt;algorithm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Algorithm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;HMAC256&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mySecret"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;JWTCreator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;jwtBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JWT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withIssuer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myServer"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accessGrantedBy"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accessArea"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accessAreas&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"entityId"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jwtBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sign&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, now we have the following additional claims: entityId, version. Keep in mind that the entityId can be the userId if you are generating the access for a specific user. I only used entity to be more generic. When a JWT is received, as part of the validation process, you also check that the version is the same as the one stored on the server. Only then you consider it valid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;hasAccess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DecodedJWT&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;areaToAccess&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entityDao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getJwtVersion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;versionInJwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;entityIdInJwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"entityId"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;entityId&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entityIdInJwt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;versionInJwt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClaim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accessArea"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;areaToAccess&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a JWT is compromised, all you have to do is increment the version on the server by one and the JWT validation will fail.&lt;/p&gt;

&lt;p&gt;You will still need access to the database, but with good design, you won’t need any additional queries than what you will be doing anyway. For example, if the JWT is for a user, will most probably need the user information either way later on. If the JWT version is in the same table, you can retrieve it in one go along with the data you already retrieve. Even if there is no way for the JWT version to be in the same table, the access pattern will be really fast since you will do direct search by a primary key (the entityId) and the data received back is really small: a number.&lt;/p&gt;

&lt;p&gt;Also, don’t stress too much about big number. You don’t need to increment the version every time you generate a new JWT for the entity. If there was no data compromised when the previous JWT has expired, you can reuse the same version. Only if and when a token gets compromised you need to change the version for that entity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-versioning-the-jwt"&gt;
  &lt;/a&gt;
  Advantages of versioning the JWT
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;No need to keep a big blacklist of compromised JWTs&lt;/li&gt;
&lt;li&gt;Easy and direct access to the current version on the server, most probably without any additional DB access&lt;/li&gt;
&lt;li&gt;No need to synchronize data between server instances since this is done automatically by the DB&lt;/li&gt;
&lt;li&gt;No cleanup needed for expired JWTs&lt;/li&gt;
&lt;li&gt;Easy to mass invalidate JWTs in case of a wider system breach&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Article originally posted on my personal site under &lt;a href="https://petrepopescu.tech/2021/03/how-to-invalidate-a-jwt/"&gt;How to invalidate a JWT in Java&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>security</category>
      <category>jwt</category>
    </item>
    <item>
      <title>15 Best Open-Source Autonomous Driving Datasets</title>
      <author>SiaSearch</author>
      <pubDate>Wed, 09 Jun 2021 07:05:45 +0000</pubDate>
      <link>https://dev.to/siasearch/15-best-open-source-autonomous-driving-datasets-2e81</link>
      <guid>https://dev.to/siasearch/15-best-open-source-autonomous-driving-datasets-2e81</guid>
      <description>&lt;p&gt;In recent years, more and more companies and research institutions have made their &lt;a href="https://www.siasearch.io/open-data"&gt;autonomous driving datasets&lt;/a&gt; open to the public. However, the best datasets are not always easy to find, and scouring the internet for them takes time.&lt;/p&gt;

&lt;p&gt;To help, we at SiaSearch have put together a list of the top 15 open datasets for autonomous driving. The resources below collectively contain millions of data samples, many of which are already annotated. We hope this list provides you with a solid starting point for learning more about the field, or for starting your own autonomous driving project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-open-datasets-for-autonomous-driving-projects"&gt;
  &lt;/a&gt;
  Top Open Datasets for Autonomous Driving Projects
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A2D2 Dataset&lt;/strong&gt;&lt;br&gt;
The Audi Autonomous Driving Dataset (A2D2) features over 41,000 labeled with 38 features. Around 2.3 TB in total, A2D2 is split by annotation type (i.e. semantic segmentation, 3D bounding box).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ApolloScape Dataset&lt;/strong&gt;&lt;br&gt;
ApolloScape is an evolving research project that aims to foster innovation across all aspects of autonomous driving, from perception to navigation and control. Via their website, users can explore a variety of simulation tools and over 100K street view frames, 80k lidar point cloud and 1000km trajectories for urban traffic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Argoverse Dataset&lt;/strong&gt;&lt;br&gt;
The Argoverse dataset includes 3D tracking annotations for 113 scenes and over 324,000 unique vehicle trajectories for motion forecasting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Berkeley DeepDrive Dataset&lt;/strong&gt;&lt;br&gt;
Also known as BDD 100K, the DeepDrive dataset gives users access to 100,000 annotated videos and 10 tasks to evaluate image recognition algorithms for autonomous driving. The dataset represents more than 1000 hours of driving experience with more than 100 million frames, as well as information on geographic, environmental, and weather diversity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CityScapes Dataset&lt;/strong&gt;&lt;br&gt;
CityScapes is a large-scale dataset focused on the semantic understanding of urban street scenes in 50 German cities. It features semantic, instance-wise, and dense pixel annotations for 30 classes grouped into 8 categories. The entire dataset  includes 5,000 annotated images with fine annotations, and an additional 20,000 annotated images with coarse annotations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comma2k19 Dataset&lt;/strong&gt;&lt;br&gt;
This dataset includes 33 hours of commute time recorded on highway 280 in California. Each 1-minute scene was captured on a 20km section of highway driving between San Jose and San Francisco. The data was collected using comma EONs, which features a road-facing camera, phone GPS, thermometers and a 9-axis IMU. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Google-Landmarks Dataset&lt;/strong&gt;&lt;br&gt;
Published by Google in 2018, the Landmarks dataset is divided into two sets of images to evaluate recognition and retrieval of human-made and natural landmarks. The original dataset contains over 2 million images depicting 30 thousand unique landmarks from across the world. In 2019, Google published Landmarks-v2, an even larger dataset with 5 million images and 200k landmarks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;KITTI Vision Benchmark Suite&lt;/strong&gt;&lt;br&gt;
First released in 2012 by Geiger et al, the &lt;a href="https://www.siasearch.io/kitti-dataset/"&gt;KITTI dataset&lt;/a&gt; was released with the intent of advancing autonomous driving research with a novel set of real-world computer vision benchmarks. One of the first ever autonomous driving datasets, KITTI boasts over 4000 academic citations and counting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Level 5 Open Data&lt;/strong&gt;&lt;br&gt;
Published by popular rideshare app Lyft, the Level5 dataset is another great source for autonomous driving data. It includes over 55,000 human-labeled 3D annotated frames, surface map, and an underlying HD spatial semantic map that is captured by 7 cameras and up to 3 LiDAR sensors that can be used to contextualize the data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;nuScenes Dataset&lt;/strong&gt;&lt;br&gt;
Developed by Motional, the &lt;a href="https://www.siasearch.io/nuscenes-dataset/"&gt;nuScenes dataset&lt;/a&gt; is one of the largest open-source datasets for autonomous driving. Recorded in Boston and Singapore using a full sensor suite (32-beam LiDAR, 6 360° cameras and radars), the dataset contains over 1.44 million camera images capturing a diverse range of traffic situations, driving maneuvers, and unexpected behaviors.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looking for more datasets? Read the entire blogpost at &lt;a href="https://www.siasearch.io/blog/best-open-source-autonomous-driving-datasets"&gt;https://www.siasearch.io/blog/best-open-source-autonomous-driving-datasets&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>database</category>
      <category>autonomousdriving</category>
    </item>
  </channel>
</rss>
