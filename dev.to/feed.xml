<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Mesmerizing animation using only CSS translations 🪄</title>
      <author>Mustapha Aouas</author>
      <pubDate>Thu, 02 Dec 2021 11:11:14 +0000</pubDate>
      <link>https://dev.to/mustapha/mesmerizing-animation-using-only-css-translations-kgm</link>
      <guid>https://dev.to/mustapha/mesmerizing-animation-using-only-css-translations-kgm</guid>
      <description>&lt;p&gt;Two weeks ago I shared &lt;a href="https://dev.to/mustapha/mesmerizing-animation-using-only-css-rotations-229l"&gt;this animation&lt;/a&gt; using only rotations. This time I'm back at it, but only using translations.&lt;/p&gt;

&lt;p&gt;Newton said time is absolute, Einstein said time is relative. Who's right and who's wrong? I don't know but what I can say is that timing is everything (at least for this animation). What do you see?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TheAngularGuy/embed/RwZBLbZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Disclamer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;On i̶n̶t̶e̶r̶n̶e̶t̶ ̶e̶x̶p̶l̶o̶r̶e̶r̶ iOS safari the animation is not working correctly god knows why. So &lt;a href="https://twitter.com/TheAngularGuy/status/1460302224287051787"&gt;click here&lt;/a&gt; to check it out 👀&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;Follow me on Twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;twitter.com/theAngularGuy&lt;/a&gt; as I tweet (almost) every day about the things I learned in my 6+ years journey in web development ✅&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;Ok so let's start right away. the first thing is to place all the 12 dots one a horizontal container like this (I outlined each line wrapper):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAXWvcOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nlne7mejfhncfe1uo6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAXWvcOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nlne7mejfhncfe1uo6h.png" alt="STEP 1" width="744" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve this, nothing extraordinary, we have a container &lt;code&gt;div&lt;/code&gt; that contains the horizontal wrappers around the dots.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nc"&gt;.line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqnVmQLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9acpshxinngijkuysdqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqnVmQLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9acpshxinngijkuysdqq.png" alt="pendulum" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to simulate this pendulum effect using only translations. For this we need each ball moving left and right and we also need each ball to be at a slightly lower vertical position when it hits its equilibrium position (when it's in the middle of the line wrapper).&lt;/p&gt;

&lt;p&gt;The balls' position starts at the left, so we want them to move to the right the return to the left. So, at the start of the animation, we set &lt;code&gt;left&lt;/code&gt; to 0, at 50% of the animation we set it at 100% (minus the width of the ball so it doesn't overflow), and finally, at 100% we set &lt;code&gt;left&lt;/code&gt; back to 0;&lt;/p&gt;

&lt;p&gt;With this, each ball will hit its equilibrium position at 25% (of the animation) and at 75% (on the return). So at these timings, we need to move the ball to the bottom.&lt;br&gt;
So the animation code looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;25&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;75&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And this is the result we have so far:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZT4O-Ob6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx0z06sx0ms1h2zmluva.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZT4O-Ob6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx0z06sx0ms1h2zmluva.gif" alt="almost there" width="744" height="424"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;We are almost there. We only need two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Decrease the width of each line wrapper from bottom to top (so each line width increase from top to bottom)&lt;/li&gt;
&lt;li&gt;Decrease the animation speed (or increase the animation duration) from top to bottom (because the more a ball is near the bottom the more distance it needs to travel)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can do this in many different ways, I choose to do it using sass &lt;code&gt;for through&lt;/code&gt; loop (there is also the &lt;code&gt;for to&lt;/code&gt; loop but the final number is excluded).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;through&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;12%&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;5ms&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that's it actually. With only these few lines of CSS (or scss 😉) we completed this crazy animation. Here's the final code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nc"&gt;.line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;through&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;12%&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;5ms&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;25&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;75&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;br&gt;
That's it for this post. I hope you liked it. If you did, please share it with your friends &amp;amp; colleagues and follow me on Twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;@theAngularGuy&lt;/a&gt; where I tweet about web development and computer science.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-to-read-next"&gt;
  &lt;/a&gt;
  What to read next?
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rogKjLRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tXIALQ8l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/cb831252-9db8-4f7a-a600-0bf8db47b92f.png" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/5-tips-to-finish-your-side-projects-and-make-money-doing-so-27eo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 tips to finish your side projects (and make money doing so)&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Nov 1 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sideprojects&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Dockerize Vite+ReactJS application</title>
      <author>Aguilera Agustin</author>
      <pubDate>Thu, 02 Dec 2021 11:08:01 +0000</pubDate>
      <link>https://dev.to/agustinaguilera/dockerize-vitereactjs-application-6e1</link>
      <guid>https://dev.to/agustinaguilera/dockerize-vitereactjs-application-6e1</guid>
      <description>&lt;p&gt;This post shows how to dockerize a ReactJS app created with Vite using &lt;code&gt;react-typescript&lt;/code&gt; template. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;In my opinion, the best way to do this goal, is using &lt;strong&gt;nginx&lt;/strong&gt; image&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-config"&gt;
  &lt;/a&gt;
  Project config
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "scripts":  {
 "dev":  "vite",
 "build":  "tsc &amp;amp;&amp;amp; vite build",
 "serve":  "vite preview"
 },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Folders structure&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   | --dist
   | --src
   | --.dockerignore
   | --Dockerfile
   | --package.json
   | --package-lock.json
   | --deploy 
   ----| --nginx
   --------| --nginx.config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;em&gt;nginx.config&lt;/em&gt; file in folder &lt;code&gt;deploy/nginx&lt;/code&gt;&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;map $sent_http_content_type $expires {&lt;br&gt;
 default                    off;&lt;br&gt;
 text/html                  15m;&lt;br&gt;
 text/css                   15m;&lt;br&gt;
 application/javascript     15m;&lt;br&gt;
 ~image/                    15m;&lt;br&gt;
}&lt;br&gt;
server {

&lt;p&gt;listen 80;&lt;br&gt;
 root   /usr/share/nginx/html;&lt;br&gt;
 index  index.html;&lt;br&gt;
 etag on;&lt;br&gt;
 expires $expires;&lt;br&gt;
 location / {&lt;br&gt;
 try_files $uri @prerender;&lt;br&gt;
 }&lt;br&gt;
 location @prerender {&lt;br&gt;
 proxy_set_header X-Prerender-Token GsMLRmorzgxywljuDowD;&lt;/p&gt;

&lt;p&gt;set $prerender 0;&lt;br&gt;
 if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|Screaming Frog SEO Spider") {&lt;br&gt;
 set $prerender 1;&lt;br&gt;
 }&lt;br&gt;
 if ($args ~ "&lt;em&gt;escaped_fragment&lt;/em&gt;") {&lt;br&gt;
 set $prerender 1;&lt;br&gt;
 }&lt;br&gt;
 if ($http_user_agent ~ "Prerender") {&lt;br&gt;
 set $prerender 0;&lt;br&gt;
 }&lt;br&gt;
 if ($uri ~* ".(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {&lt;br&gt;
 set $prerender 0;&lt;br&gt;
 }&lt;/p&gt;

&lt;p&gt;#resolve using Google's DNS server to force DNS resolution and prevent caching of IPs&lt;br&gt;
 resolver 8.8.8.8;&lt;/p&gt;

&lt;p&gt;if ($prerender = 1) {&lt;/p&gt;

&lt;p&gt;#setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing&lt;br&gt;
 set $prerender "service.prerender.io";&lt;br&gt;
 rewrite .* /$scheme://$host$request_uri? break;&lt;br&gt;
 proxy_pass http://$prerender;&lt;br&gt;
 }&lt;br&gt;
 if ($prerender = 0) {&lt;br&gt;
 rewrite .* /index.html break;&lt;br&gt;
 }&lt;br&gt;
 }&lt;br&gt;
 error_page   500 502 503 504  /50x.html;&lt;br&gt;
 location = /50x.html {&lt;br&gt;
 root   /usr/share/nginx/html;&lt;br&gt;
 }&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#dockerfile"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Dockerfile&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mhart/alpine-node:12 AS builder&lt;br&gt;
WORKDIR /app&lt;br&gt;
COPY . .&lt;br&gt;
RUN yarn install&lt;br&gt;
RUN yarn run build&lt;br&gt;
FROM nginx:1.16.0-alpine&lt;br&gt;
COPY --from=builder /app/dist /usr/share/nginx/html&lt;br&gt;
RUN rm /etc/nginx/conf.d/default.conf&lt;br&gt;
COPY deploy/nginx/nginx.conf /etc/nginx/conf.d&lt;br&gt;
EXPOSE 80&lt;br&gt;
CMD ["nginx", "-g", "daemon off;"]&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#documentation"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Documentation&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nginx.com/"&gt;NGINX&lt;/a&gt;&lt;br&gt;
&lt;a href="https://vitejs.dev/"&gt;Vite JS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vite</category>
      <category>react</category>
      <category>docker</category>
      <category>typescript</category>
    </item>
    <item>
      <title>10 Must-Have React Developer Tools to Write Clean Code💻🔥</title>
      <author>Alex Omeyer</author>
      <pubDate>Thu, 02 Dec 2021 10:47:31 +0000</pubDate>
      <link>https://dev.to/alexomeyer/10-must-have-react-developer-tools-to-write-clean-code-1808</link>
      <guid>https://dev.to/alexomeyer/10-must-have-react-developer-tools-to-write-clean-code-1808</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;React is a component-based open-source JavaScript library for building user interfaces.&lt;/p&gt;

&lt;p&gt;React is used for handling the view layer in web and mobile applications, and it is great for building single-page web applications.&lt;/p&gt;

&lt;p&gt;Some of the features of React are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSX: A JavaScript extension language that simplifies building React components&lt;/li&gt;
&lt;li&gt;Virtual DOM: A representation of the real DOM that React uses because manipulating the real DOM can be expensive&lt;/li&gt;
&lt;li&gt;Unidirectional data flow or data binding.&lt;/li&gt;
&lt;li&gt;Uses reusable/composable UI components to develop the view.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we will learn about ten React developer tools that can help us write clean code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-developer-tools"&gt;
  &lt;/a&gt;
  React developer tools
&lt;/h2&gt;

&lt;p&gt;React developer tools are frameworks, libraries, testing utilities, code generators, or debugging extensions designed to simplify building React applications. &lt;/p&gt;

&lt;p&gt;React developer tools help us create clean, robust, and more stable code while saving valuable development time.&lt;/p&gt;

&lt;p&gt;Below are ten must-use React developer tools. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-react-developer-tool"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactjs.org/blog/2019/08/15/new-react-devtools.html"&gt;1. React Developer Tool&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Top of our list is the React developer tool; this is an invaluable tool, useful for both developing and debugging React applications. &lt;/p&gt;

&lt;p&gt;React developer tool or React dev tool gives us easy access to the root components rendered on a page via the components tab. So we can inspect and debug these components easily.&lt;/p&gt;

&lt;p&gt;Also, React dev tools give a visual representation of our component re-renders with accurate time information, using flame graphs. And this is accessible via the profiler tab, and it is great for debugging performance-related issues.&lt;/p&gt;

&lt;p&gt;React Developer tool is available as an extension for both &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;Chrome&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/react-devtools"&gt;Firefox&lt;/a&gt;. However, if you are in another environment --- like a mobile browser, an embedded webview, Safari, or inside an iframe, you can use the &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/react-devtools/"&gt;NPM package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--frXexA6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kngd9xjvimawxnttw97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--frXexA6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kngd9xjvimawxnttw97.png" alt="Image description" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-reactide"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactide.io/"&gt;2. Reactide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Reactide is the first dedicated IDE for React development with hot module reloading and component visualisation right out of the box.&lt;/p&gt;

&lt;p&gt;Reactide offers an extensible development environment that runs an integrated Node server and custom browser simulator. And this eliminates the need to configure any servers, build-tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RxvpMs1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tezp0s3bpo5pnjlvafpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxvpMs1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tezp0s3bpo5pnjlvafpe.png" alt="Image description" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-storybook"&gt;
  &lt;/a&gt;
  &lt;a href="https://storybook.js.org/"&gt;3. Storybook&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Storybook is an open-source tool for building UI components and pages in isolation. It streamlines UI development, testing, and documentation.&lt;/p&gt;

&lt;p&gt;Storybook, in a nutshell, is a development environment and playground for UI components. It enables us to independently create components, and showcase them in an interactive environment. &lt;/p&gt;

&lt;p&gt;The beauty of Storybook is that it runs outside your React application so we can develop UI components without worrying about the business logic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ot-2Ccl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmkhvcn873phfq74he08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ot-2Ccl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmkhvcn873phfq74he08.png" alt="Image description" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-bundle-analyzer"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer"&gt;4. Bundle Analyzer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Bundle analyzer is a Webpack plugin and CLI utility. It gives a visual representation of your application bundle in an interactive and zoomable treemap.&lt;br&gt;
This tool can help us see the content of our bundle and identify what modules take up the most size and what modules to remove.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pEJh4qrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yxtcdnnersvcjio2i0o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pEJh4qrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yxtcdnnersvcjio2i0o.gif" alt="Image description" width="880" height="530"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-why-did-you-render"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/welldone-software/why-did-you-render"&gt;5. Why Did You Render&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;why-did-you-render&lt;/code&gt; is a path for React and React Native to notify developers about avoidable component re-renders. And this enables us to easily identify why and when our components re-renders which is useful for debugging performance-related issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EyZryxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26qn13vx033ph5lp4iak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EyZryxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26qn13vx033ph5lp4iak.png" alt="Image description" width="880" height="754"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-react-testing-library-with-jest"&gt;
  &lt;/a&gt;
  &lt;a href="https://jestjs.io/"&gt;6. React Testing Library With Jest&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Jest is a popular and feature-rich React testing library that is designed to ensure the correctness of your code. &lt;/p&gt;

&lt;p&gt;Jest is focused on simplicity and it aims to work out of the box with zero configs.&lt;br&gt;
Jest is used by Facebook and Twitter among other big tech companies so it is invaluable in your React development toolbox.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-formik-and-yup"&gt;
  &lt;/a&gt;
  &lt;a href="https://formik.org/"&gt;7. Formik&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/yup"&gt;Yup&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As featured on the official website: “Build forms without tears''. Building forms in React involves tedious, annoying tasks such as building controlled components, managing component state, keeping track of component values and handling errors, and events such as &lt;code&gt;onChange&lt;/code&gt;, and &lt;code&gt;onSumit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Formic simplifies things by providing declarative APIs that are easy to debug and test, for these tasks.&lt;/p&gt;

&lt;p&gt;Yup is a JavaScript schema builder for value parsing and validation. And in combination with Formik, we can build advanced React forms with custom validations, without any hassle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-react-hook-form"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-hook-form.com/"&gt;8. React Hook Form&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;React form provides API for building performant, flexible, and extensible forms with easy-to-use validation. It is a minimal but feature-complete library that works without any dependencies.&lt;/p&gt;

&lt;p&gt;React Hook Form features revolutionary APIs implemented that use React uncontrolled components and &lt;code&gt;refs&lt;/code&gt;. This approach makes React Hook Form more performant than other form building libraries in React.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L94ZebIl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl7ziyat48dnbtwhlib7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L94ZebIl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl7ziyat48dnbtwhlib7.png" alt="Image description" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-react-sight"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.reactsight.com/"&gt;9. React Sight&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is a visualisation tool for React with support for Fiber, React Router, and Redux. React Sight gives a live view of the component hierarchy tree of a React application. Consequently, it gives us a complete view of the structure of our application.&lt;/p&gt;

&lt;p&gt;React Sight offers both a &lt;a href="https://github.com/React-Sight/React-Sight#adding-to-chrome"&gt;Chrome&lt;/a&gt; and &lt;a href="https://github.com/React-Sight/React-Sight#firefox"&gt;Firefox&lt;/a&gt; extension and requires the React dev tool to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CoXQVZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xr0f64wazjd0d8hoc3ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CoXQVZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xr0f64wazjd0d8hoc3ts.png" alt="Image description" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-react-proto"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-proto.github.io/react-proto/"&gt;10. React Proto&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is a revolutionary React prototyping tool. It provides a visual interface for React developers and designers to create, drag, and resize components in a React application.&lt;/p&gt;

&lt;p&gt;With React Proto we can define components hierarchy, specify props and state and visualise our application architecture. After this, the architecture can be ejected as application files into a previous project, a new create-react-app project, or a starter template from any repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUbv6Iz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0hh0bdsxj79er9ogx3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUbv6Iz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0hh0bdsxj79er9ogx3v.png" alt="Image description" width="880" height="690"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tool-for-you-healthy-database"&gt;
  &lt;/a&gt;
  🌟&lt;a href="https://www.stepsize.com/?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=react"&gt;Bonus tool for you healthy database&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;High-quality code is critical to creating functional error and bug-free software that is easy to edit and understand.&lt;/p&gt;

&lt;p&gt;Use &lt;a href="https://stepsize.com/r/vscode?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=react"&gt;Stepsize VS Code&lt;/a&gt; or &lt;a href="https://www.stepsize.com/r/jetbrains?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=react"&gt;JetBrains extensions&lt;/a&gt; for your code issues, technical debt, and refactoring work. Stepsize is an issue tracker in your editor which you can use to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create issues from your editor&lt;/li&gt;
&lt;li&gt;Prioritise technical debt with your team&lt;/li&gt;
&lt;li&gt;Add key issues to your sprints with Jira integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--arkUQ8GU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5t17rqdfvem5vfu89rm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--arkUQ8GU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5t17rqdfvem5vfu89rm.gif" alt="Image description" width="800" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;In this article, we learned about 10 React developer tools that enable us to write clean code. &lt;/p&gt;

&lt;p&gt;These tools range from browser extensions to libraries with APIs and GUIs for building React applications. And using these tools, not only speed up development but also enable us to write more stable and maintainable code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was written by &lt;a href="https://dev.to/lawrence_eagles"&gt;Lawrence Eagles&lt;/a&gt; - a full-stack Javascript developer, a Linux lover, a passionate tutor, and a technical writer. Lawrence brings a strong blend of creativity &amp;amp; simplicity. When not coding or writing, he love watching Basketball✌️&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tooling</category>
      <category>codequality</category>
      <category>refactorit</category>
    </item>
    <item>
      <title>Java Programming #1: Getting Started</title>
      <author>luthfisauqi17</author>
      <pubDate>Thu, 02 Dec 2021 10:38:35 +0000</pubDate>
      <link>https://dev.to/luthfisauqi17/java-programming-1-getting-started-119i</link>
      <guid>https://dev.to/luthfisauqi17/java-programming-1-getting-started-119i</guid>
      <description>&lt;p&gt;In this article, I will show you how to getting started in learning java programming language. Before doing anything related to programming, let us consider the environment in which will be use to writing the coding.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-text-editor-or-ide"&gt;
  &lt;/a&gt;
  1. Text Editor or IDE
&lt;/h2&gt;

&lt;p&gt;In general, people usually use either &lt;strong&gt;Text Editor&lt;/strong&gt; (Visual Studio Code, Atom, etc.) or &lt;strong&gt;IDE&lt;/strong&gt; (Intellij, Eclipse, etc.). But in this tutorial, we will use Intellij IDE for the coding environment. You can use either the &lt;strong&gt;Community Edition&lt;/strong&gt; or the &lt;strong&gt;Ultimate Edition&lt;/strong&gt;, as for a side note, Intellij Ultimate Edition is not free, however, if you have student mail account, you can register that account for a &lt;strong&gt;free student license&lt;/strong&gt;. The following the logo of the Intellij IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kKjrTV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnar2yzcc4jk0e0ajk7q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kKjrTV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnar2yzcc4jk0e0ajk7q.png" alt="Intellij Logo, taken from https://commons.wikimedia.org/wiki/File:IntelliJ_IDEA_Icon.svg" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-installation"&gt;
  &lt;/a&gt;
  2. Installation
&lt;/h2&gt;

&lt;p&gt;To perform the installation, you can refer to this page from the official Jetbrain's Intellij IDE &lt;a href="https://www.jetbrains.com/help/idea/installation-guide.html#toolbox"&gt;here&lt;/a&gt;. After installation is completed, you can go create a new project (you can name the project as you like), and create a new &lt;em&gt;class&lt;/em&gt; file called &lt;code&gt;Main.java&lt;/code&gt; inside the &lt;code&gt;src&lt;/code&gt; folder. You can refer to the following screenshot for this step (Let me know if the text is too small or not).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AB5Xuagb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6qpdtngsgc5seu4zv81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AB5Xuagb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6qpdtngsgc5seu4zv81.png" alt="Step.1" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-your-first-program"&gt;
  &lt;/a&gt;
  3. Your First Program
&lt;/h2&gt;

&lt;p&gt;To confirm that you have installed the IDE successfully, you can type the following code inside the &lt;code&gt;Main.java&lt;/code&gt; class that you have made previously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After typing the above code, you might notice that there will be a green play button on the leftside beside the line number. Click that green play button, choose &lt;code&gt;run&lt;/code&gt;, and you will see an output "Hello World" in the terminal below. You can refer to the following screenshot for this step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXf0vGgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/135s4fdqcdio2tifo7ki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXf0vGgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/135s4fdqcdio2tifo7ki.png" alt="Step.2" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the above output match with your output, CONGRATS.. you are a Java Developer now 😎&lt;/p&gt;




&lt;p&gt;I hope that my article helps you to getting started in learning Java programming language. You can give this article some comments, as any feedback is very valuable and important to me (also suggest me some ideas that you think I need to cover). Thank you for reading this article, and have a nice day 😃&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://commons.wikimedia.org/wiki/File:IntelliJ_IDEA_Icon.svg"&gt;https://commons.wikimedia.org/wiki/File:IntelliJ_IDEA_Icon.svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/help/idea/installation-guide.html#toolbox"&gt;https://www.jetbrains.com/help/idea/installation-guide.html#toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://i.picsum.photos/id/8/1920/1080.jpg?hmac=ZWQsrAG-h-Ip98by6rfqjHRyvoEe1IKeeT2rbHCcoH4"&gt;https://i.picsum.photos/id/8/1920/1080.jpg?hmac=ZWQsrAG-h-Ip98by6rfqjHRyvoEe1IKeeT2rbHCcoH4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Brand New Podcast for Engineering Managers 
🎙️</title>
      <author>Vectorly</author>
      <pubDate>Thu, 02 Dec 2021 10:28:18 +0000</pubDate>
      <link>https://dev.to/vectorly/brand-new-podcast-for-engineering-managers-2jk8</link>
      <guid>https://dev.to/vectorly/brand-new-podcast-for-engineering-managers-2jk8</guid>
      <description>&lt;p&gt;Hi everyone! &lt;/p&gt;

&lt;p&gt;I want to share our podcast "Grow This - Grow That", that we make for the dev community.&lt;/p&gt;

&lt;p&gt;Vectorly launches a new series of episodes with Engineering Managers. In this season we touch upon such topics as Productivity, Growth, Leadership, Motivation &amp;amp; Retention in engineering teams. &lt;br&gt;
Here's &lt;a href="https://www.vectorly.team/grow-this-grow-that/engineering-management"&gt;the link to the podcast&lt;/a&gt; for you to check it out! &lt;/p&gt;

&lt;p&gt;Today I want to tell you more about our new episode. Our 3rd episode is definitely special. This time we invited Engineering Leaders from Y Combinator Top Companies - &lt;strong&gt;André Luís&lt;/strong&gt; (GitLab), &lt;strong&gt;David Stanley&lt;/strong&gt; (Webflow), &lt;strong&gt;Andrey Rebrov&lt;/strong&gt; (Scentbird). Each one of our guest is the true specialist with extensive experience in software development and engineering management.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1Nq2JuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoubou7xfwmw91ig4ebs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1Nq2JuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoubou7xfwmw91ig4ebs.png" alt="YC Special Episode" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this episode, we discussed Leadership in Engineering Teams. We talked about how to become a great leader for your team, what skills are required to become one and how to lead your team to a higher performance level. Our guests kindly shared their own experience in building the culture of trust and becoming the leader in their teams.   &lt;/p&gt;

&lt;p&gt;Please Listen &amp;amp; Subscribe! &lt;br&gt;
&lt;a href="https://anchor.fm/gtgt/episodes/Engineering-Leadership-with-Andr-Lus--David-Stanley--Andrey-Rebrov-YC-Special-Episode-e1apvjk"&gt;Anchor&lt;/a&gt;&lt;br&gt;
&lt;a href="https://open.spotify.com/show/20j5B5P2ISw9YiVcNBaIXp"&gt;Spotify&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.breaker.audio/grow-this-grow-that-1"&gt;Breaker&lt;/a&gt;&lt;br&gt;
&lt;a href="https://podcasts.apple.com/ru/podcast/grow-this-grow-that/id1554083171?l=en"&gt;Apple Podcasts&lt;/a&gt;&lt;br&gt;
&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy80ZDMxMmM4Yy9wb2RjYXN0L3Jzcw=="&gt;Google Podcasts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy listening!&lt;/p&gt;

</description>
      <category>management</category>
      <category>leadership</category>
      <category>productivity</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Getting serious with  Firebase V9.  Part 2 - Using the Firebase emulators</title>
      <author>MartinJ</author>
      <pubDate>Thu, 02 Dec 2021 10:25:08 +0000</pubDate>
      <link>https://dev.to/mjoycemilburn/getting-serious-with-firebase-v9-part-2-using-the-firebase-emulators-15ll</link>
      <guid>https://dev.to/mjoycemilburn/getting-serious-with-firebase-v9-part-2-using-the-firebase-emulators-15ll</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;While part 1 of this series (&lt;a href="https://dev.to/mjoycemilburn/getting-serious-with-javascript-development-and-firebase-v9-part-1-moving-to-ecma-javascript-modules-2b7p"&gt;Moving to "ECMA Modules"&lt;/a&gt;) introduced you to the Firebase V9 modular platform, it left you working exclusively into your production Cloud database.&lt;/p&gt;

&lt;p&gt;This is fine while you're getting ready for your first live release, but once you've got real users and have changes to test out you need to think again.&lt;/p&gt;

&lt;p&gt;What you need is some way of doing your testing locally. But just thinking about how you'd go about this, even with the limited range of Firebase services you've seen so far - database and rules - is probably enough to make you go weak at the knees.&lt;/p&gt;

&lt;p&gt;Local testing is never easy to organise. In the past you would have had to sort something out entirely under your own steam - for example, you might have had to install a local SQL server. This would be hard work and would likely create some dangerous inconsistencies due to differences between your test tools and their live equivalents.&lt;/p&gt;

&lt;p&gt;The good news is that the Firebase emulator suite creates a near-perfect local copy of Firebase production arrangements. For example, when you launch the &lt;strong&gt;Firestore&lt;/strong&gt; emulator, you'll find that it looks almost &lt;strong&gt;exactly&lt;/strong&gt; like the live version in the Firebase Console.&lt;/p&gt;

&lt;p&gt;So, lets get started. As a fallback,  if I'm not making things clear enough, you might find it useful to refer to Google's own documentation at &lt;a href="https://firebase.google.com/docs/emulator-suite/install_and_configure"&gt;Install, configure and integrate Local Emulator Suite &lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-the-firebase-emulators"&gt;
  &lt;/a&gt;
  Configuring the Firebase emulators
&lt;/h3&gt;

&lt;p&gt;If you've previously read &lt;a href="https://dev.to/mjoycemilburn/a-beginners-guide-to-javascript-development-using-firebase-v9-part-1-project-configuration-5bo3"&gt;Project Configuration&lt;/a&gt; in this series, you'll find that you've actually been here before. Configuring the Firebase emulators just requires another run through &lt;code&gt;Firebase init&lt;/code&gt; to add a few more parameters to the &lt;code&gt;firebase.json&lt;/code&gt; file. So, open a terminal window for your project and enter the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase init emulators
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've confirmed that &lt;strong&gt;yes&lt;/strong&gt; you &lt;strong&gt;do&lt;/strong&gt; want to proceed, the CLI will ask you which emulators you want to use.&lt;/p&gt;

&lt;p&gt;Because terminal windows don't respond to "point and click" instructions, selecting your emulators from the list presented is a rather cumbersome procedure. You have to proceed by using the arrow keys on your keyboard. I suggest that, for now, you concentrate on just the "Firestore" and "Hosting" emulators - ie those for which you have an immediate requirement.&lt;/p&gt;

&lt;p&gt;So, press the down-arrow key to highlight the corresponding entries in the list and, for each, select the entry by pressing the space bar (this toggles selection on and off). Once you're done, activate your request by pressing the return key.&lt;/p&gt;

&lt;p&gt;Accept the "default ports" offered by the CLI and also respond "y" to the offer to "download the emulators now?". The CLI should then respond with "Firebase initialization complete!".&lt;/p&gt;

&lt;p&gt;You might find it interesting now to see what the CLI has done to your &lt;code&gt;firebase.json&lt;/code&gt; file. This should now look something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "hosting": {
    "public": "public",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ]
  },
  "emulators": {
    "firestore": {
      "port": 8080
    },
    "hosting": {
      "port": 5000
    },
    "ui": {
      "enabled": true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to start the emulators as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase emulators:start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In response you'll see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;i  emulators: Starting emulators: firestore, hosting
!  emulators: It seems that you are running multiple instances of the emulator suite for project fir-expts-app. This may result in unexpected behavior.
i  firestore: Firestore Emulator logging to firestore-debug.log
i  hosting: Serving hosting files from: public
+  hosting: Local server: http://localhost:5000
!  ui: Emulator UI unable to start on port 4000, starting on 4001 instead.
i  ui: Emulator UI logging to ui-debug.log

┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://localhost:4001                │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ localhost:8080 │ http://localhost:4001/firestore │
├───────────┼────────────────┼─────────────────────────────────┤
│ Hosting   │ localhost:5000 │ n/a                             │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub running at localhost:4400
  Other reserved ports: 4500

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may be alarmed at this point to find that your terminal session appears to have stalled. Fret not. What has happened is that your terminal session has become a "server" for your emulator components. It's now waiting for you to start using them.&lt;/p&gt;

&lt;p&gt;To see what's going on, cut and paste the address displayed above as &lt;code&gt;View Emulator UI at http://localhost:4001&lt;/code&gt; into your browser to open the following page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83cpOCaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kt9wxkqhg4rmd3basl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83cpOCaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kt9wxkqhg4rmd3basl2.png" alt="Emulator launchpad" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you've seeing here is a sort of "launchpad" for the various emulator components. Just for the moment, concentrate on the "Firestore emulator" in the middle of the top row and the "Hosting emulator" to the right of the second row. The first of these launches a tool that allows you to create and administer a local Firestore database and the second gives you a quick way of starting your &lt;code&gt;index.html&lt;/code&gt; file in the browser. &lt;/p&gt;

&lt;p&gt;Starting with the "Firestore emulator" box, click the "Go to emulator" button at the bottom right. This will reveal a "Firestore Emulator Suite" page" that should look a bit familiar.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEjTzEpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6cee2k9ho9qc6fn2fhi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEjTzEpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6cee2k9ho9qc6fn2fhi.png" alt="Firestore emulator" width="880" height="494"&gt;&lt;/a&gt;&lt;br&gt;
Yes, this is a fair replica of the procedure you used to create test data in the early days when you were using the Firestore tool in the Cloud Firebase Console.&lt;/p&gt;

&lt;p&gt;Returning to the "launchpad" page and the "Hosting emulator" box, click the "View website" button to the bottom right. This will "serve" your &lt;code&gt;index.html&lt;/code&gt; file as "localhost" in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZO-3FMJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56byc2oowiak9nrzw2nj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZO-3FMJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56byc2oowiak9nrzw2nj.png" alt="Webpage launched from Firebase emulator" width="880" height="116"&gt;&lt;/a&gt;&lt;br&gt;
Take a moment to consider what's happening here. Your &lt;code&gt;index.html&lt;/code&gt; file has been launched directly into the browser with its Firebase code in whatever state you last left it. For example, if you have now moved onto modular imports, it will be referencing the &lt;code&gt;packed_index.js&lt;/code&gt; file you created with &lt;code&gt;webpack&lt;/code&gt;. Even better, it runs! &lt;strong&gt;But&lt;/strong&gt;, this locally hosted webapp is still connecting to your Cloud Firestore collections. We're still not quite where we want to be&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-and-operating-a-local-firestore-database"&gt;
  &lt;/a&gt;
  Creating and operating a local Firestore database
&lt;/h3&gt;

&lt;p&gt;You've now given yourself a way of testing code changes without deploying them into the live system, but this is no help if these changes make a mess of your live data. So, you now need a way to redirect the local code to a local database. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connecting your webapp to a local database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is surprisingly easy to do, though it does require you to make a change to your webapp's code. Just add the following line of code to the &lt;code&gt;index.js&lt;/code&gt; file after you've set up the &lt;code&gt;db&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;connectFirestoreEmulator(db, 'localhost', 8080);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add the &lt;code&gt;connectFirestoreEmulator&lt;/code&gt; function to your &lt;code&gt;firestore&lt;/code&gt; import&lt;/p&gt;

&lt;p&gt;But now the question is "how do you get some data into this local database?"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating and populating a local database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although you've already seen that the emulator gives you a familiar arrangement for defining and populating collections, you may still have grim memories of trying to do this through the live Firebase console. It's not going to be any easier here. In such a situation you'll most likely be looking for a Firebase export/import facility to haul a suitable dataset out of your &lt;strong&gt;live&lt;/strong&gt; database. &lt;/p&gt;

&lt;p&gt;Sadly, I'm afraid that, at least at the time of writing (Nov 2021), you will look in vain. There &lt;strong&gt;is&lt;/strong&gt; a Cloud database export facility but it's designed for Cloud backup and it's not going to be at all helpful in providing you with a local extract file. &lt;/p&gt;

&lt;p&gt;While you're still getting your eye in, I suggest you just add a temporary bit of initialisation code to your application. You can easily comment it out when you want to revert your code for live operation.  Here's an example of what you might write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;buildTestData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;collectionData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ab@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userPurchase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chocolate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ab@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userPurchase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firelighters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;collectionData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;docRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;addDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userShoppingLists&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;collectionData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error in buildTestData &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It shouldn't be too difficult to invent ways of obtaining more elaborate jsons from your production collections. For example you might add a hidden button to your live webapp to print out a json that you can then copy and paste into your code via the clipboard.&lt;/p&gt;

&lt;p&gt;If you're still determined to find more serious ways of importing a collection from your production Cloud Firestore database, you might look at &lt;a href="https://stackoverflow.com/questions/57838764/how-to-import-data-from-cloud-firestore-to-the-local-emulator"&gt;How to import data from cloud firestore to the local emulator?&lt;/a&gt; on Stackoverflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building a library of Test data sets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you've finally succeeded in your bid to create test collections in your local database, you are likely to feel distinctly unhappy when you restart the emulators and find that your data has disappeared! Yes, unless directed otherwise, the Firestore emulator always starts with a clean sheet.&lt;/p&gt;

&lt;p&gt;Actually, when you think about it, this is quite a sensible idea. When you're doing serious testing, you'll want your tests start with a clean database served up from a standard data set.&lt;/p&gt;

&lt;p&gt;To ask the emulator to &lt;strong&gt;save&lt;/strong&gt; your data collections after you've just created them you just issue a one-off command like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase emulators:export ./[collection_backup]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where [collection_backup] is a folder name that you choose yourself. If the [collection_backup] folder doesn't exist, firebase will create it. &lt;/p&gt;

&lt;p&gt;To restart the emulators with a copy of this data you would then use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase emulators:start --import=./[collection_backup]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Management of this arrangement for a serious project is clearly going to be an issue,- I'm sure that by now you'll have realised that you need to be quite organised if you're to use the emulators effectively. &lt;/p&gt;

&lt;p&gt;Precise arrangements beyond this are clearly going to differ from project to project. But you probably need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Plan for an initial test-collection initialisation phase to set up test data sets in a series of [collection_backup] folders.&lt;/li&gt;
&lt;li&gt;Perhaps consider creating a corresponding series of "run_emulation_for_[collection_backup].ps1" scripts to systematise the running of a particular test against the correct data set.&lt;/li&gt;
&lt;li&gt;Plan procedures to ensure that the code changes introduced to rig your source code for testing can't leak into the live system. These arrangements will obviously need to fit into whatever procedures you choose to adopt for version management and are beyond the scope of this particular post.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yes, serious IT is hard!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Applying Rules in the Emulation environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You'll note that while the "Firestore Emulator Suite" page offered facilities to manage &lt;strong&gt;collections&lt;/strong&gt; it said nothing about &lt;strong&gt;rules&lt;/strong&gt;. In the emulation environment you need to specify these separately in a &lt;code&gt;firestore.rules&lt;/code&gt; file (stored at the project root) and provide a pointer to this file in your &lt;code&gt;firebase.json&lt;/code&gt;. This is easy enough to organise - just cut and paste from your live rules page into your &lt;code&gt;firestore.rules&lt;/code&gt; file and add the following to your firebase.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "firestore": {
      "rules": "firestore.rules"
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the example code provided in &lt;a href="https://dev.to/mjoycemilburn/a-beginners-guide-to-javascript-development-using-firebase-v9-part-2-coding-a-simple-webapp-4e5i/edit"&gt;Coding a simple webapp&lt;/a&gt; - the final version with a user-login - my firestore.rules file contained the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /userShoppingLists/{document} {
        allow read, write : if true;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#appendix-using-vscode-terminal-windows"&gt;
  &lt;/a&gt;
  Appendix- using VSCode terminal windows
&lt;/h3&gt;

&lt;p&gt;If you're unfamiliar with VSCode terminal window, here are a few notes that you might find useful:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To open a new terminal window in VSCode, click "terminal/new terminal" on the menu bar and select the folder (project) that you want the session to focus on. You can open multiple windows and, in fact, you will &lt;strong&gt;need&lt;/strong&gt; to open multiple terminals because once you've started the Firebase &lt;strong&gt;emulators&lt;/strong&gt; in a terminal window this will be locked to their server. Meanwhile, you will still need to issue other commands (eg &lt;code&gt;firebase emulators:export ./collection_backup&lt;/code&gt; to backup a collection). You can toggle between terminal sessions using the drop-down list at the head of the terminal window. If you've hidden all your terminal windows, you can reopen the latest one by clicking "view/terminal". &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you start a new terminal it will be opened with the default shell (powershell is a popular choice), but once you've started the emulators, you'll find the terminal type has switched from "powershell" to "node". This is because the original terminal session has started a &lt;code&gt;node&lt;/code&gt; server to deliver the emulator functions. To stop the emulator, use ctrl C, but note that this will likely leave a java service running and clinging onto a port. You can clear this with the command &lt;code&gt;taskkill /f /im java.exe&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can ask a terminal to rerun the last command you gave it by pressing the up-arrow key. Pressing the up-arrow twice will repeat the last but one and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The "select/F8" trick described earlier to run the contents of a script is a bit fiddly. The recommended sequence is to open both your terminal window and your script file, select the script file content you want to run and then, with the cursor still in the script window, press F8. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>Clean Loading Animation</title>
      <author>Jatin Sharma</author>
      <pubDate>Thu, 02 Dec 2021 10:24:28 +0000</pubDate>
      <link>https://dev.to/j471n/clean-loading-animation-4cl9</link>
      <guid>https://dev.to/j471n/clean-loading-animation-4cl9</guid>
      <description>&lt;p&gt;In this article, we are going to build another loading animation with pure CSS. First, let's look at what are we building -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPDCe5tR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/npSZAhG.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPDCe5tR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/npSZAhG.gif" alt="preview" width="433" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's look at the code now - &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loading_container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;loading...&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have the main &lt;code&gt;div&lt;/code&gt; with class &lt;code&gt;loading_container&lt;/code&gt; and it has two children &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;h3&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;loading&lt;/code&gt; - It is the main loader for this animation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h3&lt;/code&gt; : it is the text which you can see in the preview&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Outer Loading Container */&lt;/span&gt;
&lt;span class="nc"&gt;.loading_container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Loader */&lt;/span&gt;
&lt;span class="nc"&gt;.loading&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;animate&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Animation */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;animate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* loading text */&lt;/span&gt;
&lt;span class="nc"&gt;.loading_container&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#codepen"&gt;
  &lt;/a&gt;
  Codepen
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/gOWbjam?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href="https://codepen.io/j471n/pen/gOWbjam"&gt; loading-animation-#3&lt;/a&gt; by Jatin (&lt;a href="https://codepen.io/j471n"&gt;@j471n&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So after that you can use it anywhere in your project. And let me know what do you think about it. If you like it then consider a follow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/curved-css-timeline-5ab3"&gt;Curved Timeline in CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/how-to-use-web-storage-api-3o28"&gt;How to use Web Storage API? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/10-css-resources-that-you-should-bookmark-46l6"&gt;10 CSS Resources that you should bookmark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Bug or a simple error happened in dev.to </title>
      <author>aykacode</author>
      <pubDate>Thu, 02 Dec 2021 09:58:44 +0000</pubDate>
      <link>https://dev.to/aykacode/bug-or-a-simple-error-happened-in-devto-1njf</link>
      <guid>https://dev.to/aykacode/bug-or-a-simple-error-happened-in-devto-1njf</guid>
      <description>&lt;p&gt;Hi, I visited dev.to today and i found this in the home page, it can be some css styling issues but I'm bored right now so here you go:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wNDyvTr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wx7xazjoq1vf4jublf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wNDyvTr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wx7xazjoq1vf4jublf5.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
tell me if i have to delete this post.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>I wrote a book 📖, and here is how</title>
      <author>Yaser Adel Mehraban </author>
      <pubDate>Thu, 02 Dec 2021 09:50:29 +0000</pubDate>
      <link>https://dev.to/yashints/i-wrote-a-book-and-here-is-how-9ch</link>
      <guid>https://dev.to/yashints/i-wrote-a-book-and-here-is-how-9ch</guid>
      <description>&lt;p&gt;I've contributed to the development community in many ways, be it speaking at conferences, writing technical blog posts, getting involved in conferences as volunteer or part of the crew, or helping with Hackatons and Open Hacks. However, writing a book has been in my todo list for quite a while, and honestly, I've been afraid to start due to various reasons, mainly because I heard how much time and energy you need to put into it.&lt;/p&gt;

&lt;p&gt;Regardless, I set it as a goal in 2021 and after a few months working on it, voila, &lt;a href="https://www.amazon.com/author/yas"&gt;it's now listed on Amazon&lt;/a&gt; to be published early next year. I am so excited about it and thought to share my experience and how I reached this milestone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-you-want-to-write-a-book"&gt;
  &lt;/a&gt;
  Why would you want to write a book?
&lt;/h2&gt;

&lt;p&gt;Writing a book might seem like a far fetched goal, in fact there are many smart and talented people out there writing great technical books on various topics which become best sellers. So you might be asking yourself why would I even think about it.&lt;/p&gt;

&lt;p&gt;However, before we go further let me tell you a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anyone can learn to write a book, and I mean anyone!&lt;/li&gt;
&lt;li&gt;If you like writing technical content, be it blog posts or even documentation, you can pull this off easier than you think.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's go back to why you should write a book. I would share my own reasons, but you might find them relatable too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sharing-your-knowledge-with-others"&gt;
  &lt;/a&gt;
  Sharing your knowledge with others
&lt;/h3&gt;

&lt;p&gt;You might be good in a subject and have worked with it for a long time. You might even not have worked with it but be very passionate about it and wanted to share what you learn with others to help them succeed. For this exact reason, I believe it's important to think about writing a book if you have enough in your mind to make it work.&lt;/p&gt;

&lt;p&gt;I have read books before and they have helped me reach where I am because I've always progressed as a self-thought individual rather than being academic or even as a trainee. So it was important for me to give it back somehow and finally it happened, think about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-would-add-to-your-credit-professionally"&gt;
  &lt;/a&gt;
  It would add to your credit professionally
&lt;/h3&gt;

&lt;p&gt;From a professional perspective, writing a book will add to your creditability and establish you as an expert in that field. Who knows, it might also help you land a great job, think about your interviewer when you tell them you have a book on the subject and how positively it can affect the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ticking-a-box-accomplishing-a-new-goal"&gt;
  &lt;/a&gt;
  Ticking a box, accomplishing a new goal
&lt;/h3&gt;

&lt;p&gt;If you have a todo list and have some goals for yourself, why not put writing a book in there too. Think about how accomplished you feel when you actually do it. You will tackle a new challenge and prove to yourself that nothing is impossible if you put your energy into it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-will-learn-a-lot"&gt;
  &lt;/a&gt;
  You will learn a lot
&lt;/h3&gt;

&lt;p&gt;Writing a book can help you learn a lot in a specific subject. When you are writing a book, it becomes important that you validate your knowledge and back everything with facts and data. During this process you will learn new things in every step of the way and that to me is worth all the time and energy you put into it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-might-make-money"&gt;
  &lt;/a&gt;
  You might make money
&lt;/h3&gt;

&lt;p&gt;Not every goal is about money, but if you can make a few extra bucks publishing your book, why not. You have put your time on it and getting rewards in form of a currency (😎) can be very helpful to anybody.&lt;/p&gt;

&lt;p&gt;Now that I mentioned my reasons, think about what else and let me know, I am keen to hear yours too. Enough about reasons, let's talk about the process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-how"&gt;
  &lt;/a&gt;
  The &lt;u&gt;HOW&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;It is no secret that writing a book requires discipline and good time management. But let me tell you it needs a little bit more than that, in my case anyway. You might have to put extra effort or be a bit more proficient than me, so take this with a grain of salt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-a-topic"&gt;
  &lt;/a&gt;
  Finding a topic
&lt;/h3&gt;

&lt;p&gt;First thing you need to do is to find a topic, but you can't find any topic. You need to find something that you're good at it, and you really believe it's important to share it with others. In my case &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/overview"&gt;Azure Bicep&lt;/a&gt; is a new tool, there are not many books written on it, and I am really passionate about how it can help people achieve more by doing less.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to publish your book, you also need to find a topic where there are not many books available by other writers on it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#form-an-outline"&gt;
  &lt;/a&gt;
  Form an outline
&lt;/h3&gt;

&lt;p&gt;It's important to have an outline to be able to tell a story. Yes, you heard me right, even a technical book needs a story if you want it to be effective. You need a &lt;em&gt;beginning&lt;/em&gt;, &lt;em&gt;middle&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; which takes your readers on a journey. Start with simples, then move to advanced areas and then finish off by some best practices or something that compliments your points and helps them a few extra steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-it-yourself"&gt;
  &lt;/a&gt;
  Read it yourself
&lt;/h3&gt;

&lt;p&gt;I can't emphasis enough how important it is to read what you write first. If you feel you're biased, get somebody else to read it and give you feedback. Sometimes we don't realise how we fall into trap of making assumptions and the book turns out to be useless because of that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-a-schedule"&gt;
  &lt;/a&gt;
  Set a schedule
&lt;/h3&gt;

&lt;p&gt;If you are a full time employee like me, you need to set a schedule for yourself and make it a habit. Lock it in your calendar and make sure it's a time with minimal disruptions. I used one hour every night from 10pm to 11pm when my kids were in bed and I had already finished my dad duties. But I kept it like that for 4 months until I finished the book and boy that helps.&lt;/p&gt;

&lt;p&gt;If that doesn't work for you, you can set a goal for how many words need to write each day, week, months, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-writing-tools"&gt;
  &lt;/a&gt;
  Use writing tools
&lt;/h3&gt;

&lt;p&gt;Books are different that blog posts in a sense that they need to be credible. Having grammar errors or spelling mistakes will look really bad, so use a software which helps you proofread your writing.&lt;/p&gt;

&lt;p&gt;And that's all I did to be able to be here writing this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-touches"&gt;
  &lt;/a&gt;
  Finishing touches
&lt;/h2&gt;

&lt;p&gt;It can become a really hard job even from start, so keep yourself motivated. If you face any setbacks or challenges, try to positively face them and work your way around solving those slowly and steadily.&lt;/p&gt;

&lt;p&gt;Reward yourself, give yourself a little treat at the end of every chapter, or section. This definitely helped me, so it will probably help you too.&lt;/p&gt;

&lt;p&gt;I hope this has motivated you to at list think about the possibility of wiring a book. Anyway, I didn't talk about the book itself, so read on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-my-book"&gt;
  &lt;/a&gt;
  About my book
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/gp/product/B09MFY582M/ref=dbs_a_def_rwt_bibl_vppi_i0"&gt;Infrastructure as code with Azure Bicep&lt;/a&gt; is a book which takes you on a journey from what Azure Bicep is, to how it works and its syntax. Then you learn about all the bits and pieces to be able to write maintainable, reusable, modular templates to be able to deploy your resources into your Azure environment with confidence. It also covers the authoring experience and how amazing it is to work with it from Visual Studio Code and its extension. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/gp/product/B09MFY582M/ref=dbs_a_def_rwt_bibl_vppi_i0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snMlC0Wo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl5z8v2kav7at1qgrtfp.jpg" alt="Infrastructure as code with Azure Bicep" width="405" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then it covers how to use it in your CI/CD pipelines both on Azure DevOps and GitHub actions. And at last we will cover some advanced topics to add that extra bit of tidbits which makes you stand out when writing infrastructure as code such as some best practices and patterns when deploying multiple environments.&lt;/p&gt;

&lt;p&gt;So keep an eye out and support me and my book if you can 😍🙏🏽.&lt;/p&gt;

</description>
      <category>books</category>
      <category>azure</category>
      <category>bicep</category>
      <category>devops</category>
    </item>
    <item>
      <title>Version control systems</title>
      <author>Faith_mutitu</author>
      <pubDate>Thu, 02 Dec 2021 09:36:42 +0000</pubDate>
      <link>https://dev.to/faith_mutitu/version-control-systems-3opb</link>
      <guid>https://dev.to/faith_mutitu/version-control-systems-3opb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-version-control"&gt;
  &lt;/a&gt;
  &lt;u&gt;What is version control?&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0bgLDS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv65ou20r422jz6iz3dc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0bgLDS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv65ou20r422jz6iz3dc.png" alt="Image description" width="342" height="325"&gt;&lt;/a&gt; &lt;br&gt;
Version control also known as source control is the practice of tracking and managing changes made to software code.&lt;/p&gt;

&lt;p&gt;Version control systems are software tools that enable developers to manage changes made to source code over time.&lt;br&gt;
By using VCS, developers can find out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Which changes were made&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Who made the changes&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When were the changes made&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Why were changes needed&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VCS keeps track of every modification to the code. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to fix the mistake while minimizing disruption to other team members or users of the code.&lt;/p&gt;

&lt;p&gt;Teams consisting of software developers are continually writing source code or changing existing source code. Version Control Systems protect such source code from catastrophe and casual errors and/or unintended consequences. With VCS, a particular developer may work on a new feature while another developer from the same team may make changes to several parts of the same code.It also has an advantage of breaking geographic barriers in that a team can comprise of developers from different geographic locations and still achieve their goal.&lt;/p&gt;

&lt;p&gt;Version Control System tracks every individual's change by each contributor and helps in preventing each others work from conflicting. However, changes made by different developers in the same team can get incompatible. This issue should be resolved in an orderly manner without blocking the work of the rest of the team.&lt;/p&gt;

&lt;p&gt;Good version control systems should not impose unnecessary limits to its users. It should work on any platform and not dictate what operating system or tool chain to be used. It should facilitate smooth and continuous flow of changes to the code rather than the frustrating and clumsy mechanism of file locking. A good version control software should therefore give green light to a particular developer without blocking the progress of others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-version-control-systems"&gt;
  &lt;/a&gt;
  Why use Version Control Systems?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUXimXVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjz0b95w89siw3rwll4x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUXimXVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjz0b95w89siw3rwll4x.jpg" alt="Image description" width="539" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;mmmmh...still not convinced? Well, here me out&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software teams that do not use any form of version control face problems like not knowing which changes have been made or incompatible changes between two pieces of work. They then have to painstakingly untangle and rework.&lt;br&gt;
If you are a developer and at some point did not use version control, then you may have added versions to your files and  later on had to deal with the new final version. In worse scenarios, you may have commented out some code blocks to disable certain functionalities fearing that you may need the code later. &lt;br&gt;
It is clear how much version controls are important. Once accustomed to the powerful benefits of VC, most developers would never consider working without this tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-version-control-systems"&gt;
  &lt;/a&gt;
  Benefits of version control systems
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It is best practice for high performing software and DevOps teams.&lt;/li&gt;
&lt;li&gt;Helps developers to work faster.&lt;/li&gt;
&lt;li&gt;Allows teams to preserve efficiency and agility even when the team scales to include more developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:&lt;br&gt;
While it is possible to develop software without using any version control, doing so subjects the project to a huge risk that no professional team would advise you to accept.&lt;br&gt;
So the question is not whether to use version control but rather, which version control system to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many choices but the most common version control is git&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIcr9Sz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz4m9dlsbhi2au3b5o44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIcr9Sz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz4m9dlsbhi2au3b5o44.png" alt="Image description" width="880" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What, Why and How to Validate ? </title>
      <author>The Nerdy Dev</author>
      <pubDate>Thu, 02 Dec 2021 09:18:15 +0000</pubDate>
      <link>https://dev.to/thenerdydev/what-why-and-how-to-validate--5g85</link>
      <guid>https://dev.to/thenerdydev/what-why-and-how-to-validate--5g85</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;br&gt;
In this article, let us learn about validation in case of application and learn about &lt;strong&gt;What, Why and How to Validate ?&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on&lt;/em&gt; &lt;a href="https://the-nerdy-dev.com/"&gt;https://the-nerdy-dev.com/&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-why-and-how-to-validate-"&gt;
  &lt;/a&gt;
  What, Why and How to Validate ?
&lt;/h1&gt;

&lt;p&gt;To ensure that the data that you work with is the data in correct format, you need validation for it. &lt;/p&gt;

&lt;p&gt;Let us answer these questiions : &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-should-we-use-validation-"&gt;
  &lt;/a&gt;
  Why should we use validation ?
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#why-would-you-add-data-validation-to-your-application-"&gt;
  &lt;/a&gt;
  Why would you add data validation to your application ?
&lt;/h2&gt;

&lt;p&gt;When we have a user interacting with our website we typically have forms in any web application that we build. The bigger your application is the more data you will need from your users at some point of time. So we have that form which the user of the website interacts with and in the end this form is submitted with the &lt;strong&gt;POST&lt;/strong&gt; request.&lt;/p&gt;

&lt;p&gt;Then a request to the backend is sent along with the form data. &lt;br&gt;
On our backend, we typically interact with the database using our server side logic or we may typically write our data into a file using the &lt;strong&gt;fs&lt;/strong&gt; core module of Node.js. But in the end we take that data we receive and want to store it. This is why the need for data validation and sanitization arises. &lt;/p&gt;

&lt;p&gt;If a user in our application would try to login with something that is not a &lt;em&gt;valid email address&lt;/em&gt;, we should not allow access to the user, so we should prevent the user from entering something incorrect and getting access for that. &lt;/p&gt;

&lt;p&gt;This is where we want validation to kick in. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-validate-and-provide-a-good-user-experience-"&gt;
  &lt;/a&gt;
  How to validate and provide a good user experience ?
&lt;/h2&gt;

&lt;p&gt;Obviously we got a user entering some data onto the form (Form Input) and let us say a Node.js application running on the server. We got a couple of places where we can validate, for example, we can validate on the client side of our application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So right before any request hits the server, we can write some JavaScript, that for example checks the input at every keystroke and checks the input whilst the user is working on the form and then you can display an error right in the browser and this can greatly enhance the user experience on the client side for us.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This type of validation is totally &lt;strong&gt;optional&lt;/strong&gt; because the user can see that code, user can change the validation and user can disable the JavaScript in the browser.&lt;/p&gt;

&lt;p&gt;👉🏻This is not the protection that can secure you against incorrect data being sent to the server. This is not a secure solution it just is there to improve the user experience thing, so just to render proper error messages. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#so"&gt;
  &lt;/a&gt;
  So,
&lt;/h1&gt;

&lt;p&gt;we will focus on &lt;strong&gt;Server Side Validation&lt;/strong&gt;. This is what we do with Node.js. This code can't be used by the user, the user cannot disable this validation code that we define on the server side because this happens on &lt;strong&gt;the server not in the browser&lt;/strong&gt; and this is the crucial part where we need to have validation to filter out incorrect values and this is what we will focus on.  This ensures that we work with valid data in our node application and if we do plan on storing it ultimately we do store correct data in our database. There is also built in validation which we can use in databases like Mongo. This can be last resort. If we have strong validation on the server side no invalid data will be able to reach the database because you already filtered the incorrect data in the server side validation. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Validation at database level is also optional.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You must have to validate at server side at all means. If the validation fails, you must have to return an error message in user interface with helpful message and do not reload the page with the user input intact with the correct error message rendered in our user interface. This is because reloading offers a horrible experience to the end user and this would clear up all your form data and you would have to enter all the data again ! &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#example-discussion-on-validation-for-a-registration-page-"&gt;
  &lt;/a&gt;
  Example - Discussion on Validation for a Registration Page :
&lt;/h1&gt;

&lt;p&gt;Some common validations for validating the form controls of a registration page are these : &lt;/p&gt;

&lt;p&gt;✔ Check for the correctness of the mail. It is according to the format (must not be in bad format). It also must possess @ symbol&lt;br&gt;
✔ Password must be atleast 6 characters long. &lt;br&gt;
✔ Password and ConfirmPassword fields must match. &lt;/p&gt;

&lt;p&gt;etc. etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt; &lt;br&gt;
You are not just restricted to above validations, you could have other validations as well for your form controls. &lt;/p&gt;

&lt;p&gt;If you want to perform validation for your APIs that you have written using Express, you can make use of packages like &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Express Validator&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NAmE4_KQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d4efwslq338iam49yxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NAmE4_KQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d4efwslq338iam49yxz.png" alt="Image description" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though you could also make use of another npm package which is Joi for performing validation. &lt;br&gt;
&lt;strong&gt;2. Joi&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1tk1jBd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqso9w2bhd0sbv8kb5cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1tk1jBd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqso9w2bhd0sbv8kb5cf.png" alt="Image description" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now typically we want to validate for &lt;strong&gt;NON-GET&lt;/strong&gt; requests because generally these are the cases in which the user will send some data to the server. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sanitizing-user-input"&gt;
  &lt;/a&gt;
  Sanitizing user input
&lt;/h2&gt;

&lt;p&gt;We can ensure as an example that there is no extra whitespace in the string that is passed by the user on the left or on the right &lt;br&gt;
You can normalize the email that is converted to lowercase or things like that. There is a couple of things that you can ensure that the data you get back is valid but is also stored in the uniform way without any extra whitespace or anything like that. &lt;br&gt;
This is what we mean by &lt;strong&gt;Sanitization&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Sanitizing input is also that makes sense to be done. For sanitizing the email we can make use of the &lt;strong&gt;normalizeEmail&lt;/strong&gt; method that is available on &lt;strong&gt;express-validator&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MiPTEoa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8v3ymdh58i2jhvtltem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MiPTEoa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8v3ymdh58i2jhvtltem.png" alt="Image description" width="487" height="326"&gt;&lt;/a&gt;&lt;br&gt;
Similarly, for sanitizing the password we can make use of the &lt;strong&gt;trim&lt;/strong&gt; method that is also provided to us by the &lt;strong&gt;express-validator&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Sanitizing data is important to ensure that your data is stored in the uniform format.&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;⚡Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Developing A Game Engine with Perl: Part 6 - A Colourful Telnet Server</title>
      <author>Shawn Holland</author>
      <pubDate>Thu, 02 Dec 2021 09:06:57 +0000</pubDate>
      <link>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g</link>
      <guid>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-2-mouse-input-43nj"&gt;I'll stop reminding you that...&lt;/a&gt; &lt;strong&gt;I DO NOT KNOW WHAT I AM DOING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to start reading from the beginning. Check out the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-3b8"&gt;first article in this series&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ansi-game-engine"&gt;
  &lt;/a&gt;
  What is ANSI Game Engine?
&lt;/h2&gt;

&lt;p&gt;Well, at it's core, &lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine&lt;/a&gt; is a very colourful and interactive telnet server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why telnet!?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I know, right!? I still ask myself the same question today, but at this point, I'm kinda committed. Initially, it all came down to my decision &lt;strong&gt;NOT&lt;/strong&gt; to code the client side. I looked into it, and it just wasn't something I wanted to do. And honestly, it seemed too far outside my comfort level with Perl. I feel much more comfortable, and interested in, working with server side code, as may be true for other Perl dev's out there. That's where &lt;a href="https://www.perl.org/"&gt;Perl&lt;/a&gt; is quite prolific. Since I was going with &lt;a href="https://en.wikipedia.org/wiki/ANSI_art"&gt;ANSI graphics&lt;/a&gt;, they are best known these days, for me at least, to be used in telnet/terminal clients and &lt;a href="https://en.wikipedia.org/wiki/Bulletin_board_system"&gt;BBS's&lt;/a&gt;, which are mainly telnet based now. This being said, it wasn't long searching google before I came across SyncTERM. &lt;a href="https://syncterm.bbsdev.net/"&gt;SyncTERM&lt;/a&gt; is, in my opinion, the best available choice for cross-platform rendering of ANSI graphics over telnet. I've tried many different clients, on Mac, Windows, and Linux. SyncTERM works the most consistent across these platforms, it's been around for a long time and is still actively being developed. So telnet it is!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Telnet.... Fork me...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The engine has to be multiplayer. Depending on the specific game requirements, this does not necessarily mean players interacting with each other, but at least having multiple players connected at the same time to the same server. This is a minimum initial requirement. To me, this is a great opportunity to work with &lt;a href="http://man.he.net/man2/fork"&gt;Fork&lt;/a&gt;. I really like the idea of creating multiple processes with fork that can interact with each other. This is an area I have little experience with and a great opportunity to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you heard of Perl's CPAN?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are a Perl dev, obviously yes. If you code in another language, perhaps you've heard of it. &lt;a href="https://www.cpan.org/"&gt;Comprehensive Perl Archive Network&lt;/a&gt;, or CPAN, is Perl's repository of code modules. If you want to do something, chances are someone has already made a module for that. As of writing this article, CPAN currently has 208,034 Perl modules written by 14,179 authors. It's absolutely amazing!&lt;/p&gt;

&lt;p&gt;This is where I found the modules to develop a telnet server. A forking telnet server, can you believe it? Fork yah! Okokok.... I'll stop making that joke, I promise!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get to coding!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first step was to get a telnet server that could accept multiple simultaneous connections. I read up on how to make a telnet server with Perl and from that reading I quickly learned about &lt;a href="https://metacpan.org/pod/IO::Socket::INET"&gt;IO::Socket::INET&lt;/a&gt;. It wasn't long after I had working code for a telnet server!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;
use warnings;
use IO::Socket::INET;
print "\nBEGIN\n";

print "Setting up listen socket\n";
my $socket = new IO::Socket::INET (
    LocalHost =&amp;gt; '192.168.1.15',
    LocalPort =&amp;gt; '27777',
    Proto =&amp;gt; 'tcp',
    Listen =&amp;gt; SOMAXCONN,
    ReuseAddr =&amp;gt; 1
);

my $player_socket;
my $player_data;

print "Waiting for connection ...\n";
while(1) {

    next unless $player_socket = $socket-&amp;gt;accept();
    print "Incomming Connection!\n";

    my $player_address = $player_socket-&amp;gt;peerhost();
    my $player_port    = $player_socket-&amp;gt;peerport();

    my $response = "Player Connection Info: $player_address : $player_port. ";
    print "$response\n";

    $response .= "Press Any Key To Disconnect...\n";
    $player_socket-&amp;gt;send($response);

    print "Waiting for player to press a key and disconnect...\n";
    while ($player_socket-&amp;gt;connected()) {

        $player_socket-&amp;gt;recv($player_data, 1024);
        if ($player_data) {
            print "Player Disconnecting $player_address : $player_port\n";
            $socket-&amp;gt;close();
            print "Player Disconnected\n";
            last;
        }

    }
    last;
}
print "Good Bye!\n";
exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this code and connecting with SyncTERM shows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:~ # perl telnet_server.pl 

BEGIN
Setting up listen socket
Waiting for connection ...
Incomming Connection!
Player Connection Info: 192.168.1.9 : 55414. 
Waiting for player to press a key and disconnect...
Player Disconnecting 192.168.1.9 : 55414
Player Disconnected
Good Bye!

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEvJGtrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0yb9l6o49xidryn1xg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEvJGtrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0yb9l6o49xidryn1xg.png" alt="Image description" width="880" height="692"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I read my &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;Linux OpenSuSE&lt;/a&gt; server's man page for &lt;a href="https://man7.org/linux/man-pages/man2/listen.2.html"&gt;listen(2)&lt;/a&gt;, and the best I can understand is that the value for SOMAXCONN in  &lt;a href="https://perldoc.perl.org/IO::Socket#Listen"&gt;&lt;code&gt;Listen =&amp;gt; SOMAXCONN&lt;/code&gt;&lt;/a&gt; will allow me to have up to  4096 connections!? I think this is correct. It says the value can be found in &lt;code&gt;/proc/sys/net/core/somaxconn&lt;/code&gt; and doing a &lt;a href="https://man7.org/linux/man-pages/man1/cat.1.html"&gt;cat&lt;/a&gt; of that file shows 4096.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:~ # cat /proc/sys/net/core/somaxconn 
4096

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now we just need to fork!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This process turned out to be a bit more difficult to understand (for me) and a few more lines of code then did the telnet portion. I'll pick up from here in the next article.&lt;/p&gt;

&lt;p&gt;Have you done any telnet programming before? If so, what modules have you found useful? (CPAN or otherwise)&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments please share constructively. Also please visit our social media pages for lots of fun videos and pictures showing the game engine in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine on Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-5-32bit-64bit-perls-storable-5l8"&gt;Prev &amp;lt;&amp;lt; Part 5 - 32bit -&amp;gt; 64bit &amp;amp; Perl's Storable&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Next &amp;gt;&amp;gt; Coming Soon&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
Shawn&lt;/p&gt;

</description>
      <category>perl</category>
      <category>gamedev</category>
      <category>linux</category>
      <category>devjournal</category>
    </item>
  </channel>
</rss>
