<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>EBC - Everything But Code</title>
      <author>Amy Hudspith</author>
      <pubDate>Sat, 18 Sep 2021 15:11:19 +0000</pubDate>
      <link>https://dev.to/huddlespith/ebc-everything-but-code-2lef</link>
      <guid>https://dev.to/huddlespith/ebc-everything-but-code-2lef</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-everything-but-code"&gt;
  &lt;/a&gt;
  Welcome to Everything But Code!
&lt;/h2&gt;

&lt;p&gt;This is going to be a series of posts covering what I feel are the most important/useful topics in programming that aren't writing the actual code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-surely-the-code-is-the-most-important-thing"&gt;
  &lt;/a&gt;
  &lt;em&gt;But surely the code is the most important thing?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;True! Having the slickest workflow means nothing if the code you end up writing doesn't work. But I think that having a good setup can help you to write code more efficiently and accurately, which will ultimately lead to better code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ok-but-i-already-have-a-setup-why-should-i-read-this"&gt;
  &lt;/a&gt;
  &lt;em&gt;Ok, but I already have a setup, why should I read this?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;It is easy to get comfortable with a particular way of coding, and you may think it won't be worth the time adjusting to a new system, especially if you don't know for certain that it will lead to an improvement. I would encourage you to give any concepts you read here a long think before trying so that you spend that precious time on solutions you do feel could improve your coding. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0yeah-but-i-know-i-have-the-best-setup-i-spent-ages-researching-it-4-years-ago"&gt;
  &lt;/a&gt;
  Â &lt;em&gt;Yeah, but, I know I have the best setup, I spent ages researching it 4 years ago!&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;You are probably right that your setup was the best for you ... 4 years ago. But in the four following years not only will new systems and technologies have been created, but you will also have changed. I feel that it is worth having a look at your setup every so often to ensure it is still the best for you that it possibly can.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hold-up-im-a-complete-newbie-can-we-slow-down"&gt;
  &lt;/a&gt;
  &lt;em&gt;Hold up, I'm a complete newbie, can we slow down?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Absolutely! Several of the posts in this series may be discussing things that you have never heard of before. Don't expect yourself to read through everything in one weekend and come out with the best setup ever; take your time and slowly introduce things to your workflow over time. This will allow you to adjust much more easily to each thing you introduce and give you the time and space to make sure you understand how each new introduction works with the systems you already have in place. &lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>5chan - The 4chan clone with NextJs</title>
      <author>Navin Kodag</author>
      <pubDate>Sat, 18 Sep 2021 14:35:42 +0000</pubDate>
      <link>https://dev.to/100lvlmaster/5chan-the-4chan-clone-with-nextjs-3969</link>
      <guid>https://dev.to/100lvlmaster/5chan-the-4chan-clone-with-nextjs-3969</guid>
      <description>&lt;p&gt;This the continuation of the 5chan project : we've already discussed the Design and API&lt;br&gt;
So for the final step I'll create the frontend.&lt;/p&gt;

&lt;p&gt;The flow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New user opens homepage / app&lt;/li&gt;
&lt;li&gt;Gets assigned a random user id until clears data&lt;/li&gt;
&lt;li&gt;Generate random Avatars using @dicebar/avatars&lt;/li&gt;
&lt;li&gt;Can create posts / delete own posts&lt;/li&gt;
&lt;li&gt;Look through posts timeline&lt;/li&gt;
&lt;li&gt;Reply to posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we'll init a nextjs app and install the dependencies we'll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chakra-UI - Components&lt;/li&gt;
&lt;li&gt;swr - Data fetching&lt;/li&gt;
&lt;li&gt;zustand - state management&lt;/li&gt;
&lt;li&gt;@dicebear/avatars - generating avatars

&lt;ul&gt;
&lt;li&gt;formik - manage, validate post create form
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Get the nextjs app template&lt;/span&gt;
npx create-next-app 5chan &lt;span class="nt"&gt;--typescript&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;5chan
pnpm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="c"&gt;# The chakra-ui UI library, icons for chakra-ui &amp;amp; swr &lt;/span&gt;
pnpm add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4 @chakra-ui/icons swr zustand @dicebear/avatars @dicebear/micah formik
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8a1lzp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/WN7mXLD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8a1lzp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/WN7mXLD.png" alt="setup-project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To setup chakra-ui, you'll have to wrap the app with ChakraProvider like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The types.ts for consistent structures:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// types.ts&lt;/span&gt;
&lt;span class="c1"&gt;//User State&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UserStore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// User Object&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Posts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;UpdatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;DeletedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Post Reply&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;UpdatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;DeletedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Generating random user and avatar data then storing them in LocalStorage for later use :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//user.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customAlphabet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nanoid/async&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAvatar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@dicebear/avatars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@dicebear/micah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentUid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;customAlphabet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0123456789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;dataUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The great thing about zustand is that you don't have the wrap the entire app inside a context to use it. It can stay away from the UI code as small stores. So it's easy to use.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//stores.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zustand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserStore&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now the API requests to &lt;code&gt;POST&lt;/code&gt;&amp;amp; &lt;code&gt;GET&lt;/code&gt; replies:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//replies.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchReplies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postReply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_URL&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/replies`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`POST`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The API calls for &lt;code&gt;POST&lt;/code&gt;ing, &lt;code&gt;GET&lt;/code&gt; ing &amp;amp; &lt;code&gt;DELETE&lt;/code&gt;ing  posts:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPostById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_URL&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/posts`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`POST`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletePost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`DELETE`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I6G-wrbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/jIv6pfqKiIvHPYZO6y/giphy.gif%3Fcid%3Decf05e47j5ul5m7839tdh6yoq8eex6vruvzvwij1xryb0ky7%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I6G-wrbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/jIv6pfqKiIvHPYZO6y/giphy.gif%3Fcid%3Decf05e47j5ul5m7839tdh6yoq8eex6vruvzvwij1xryb0ky7%26rid%3Dgiphy.gif%26ct%3Dg" alt="phew.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK now comes the final boring part, designing the UI. but it's ok we only have three pages to code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Index page - intro, how to use.&lt;/li&gt;
&lt;li&gt;Home page  - timeline of posts, discussions.&lt;/li&gt;
&lt;li&gt;Posts page : dynamic page according to post id.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may design them however you want but if you still want to look over the code you can find the source code at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; layout

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/100lvlmaster/5chan/blob/master/layout/container.tsx"&gt;container.tsx&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; components

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/100lvlmaster/5chan/blob/master/components/post_form_button.tsx"&gt;post_form_button.tsx&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;pages

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/index.tsx"&gt;index.tsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/home.tsx"&gt;home.tsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;posts

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/posts/%5Bid%5D.tsx"&gt;[id].tsx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's about all we need right now.&lt;br&gt;
After running the project and deploying it. &lt;br&gt;
Here are the screenshots â¨â¨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AmMEPdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/qWE4dkN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AmMEPdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/qWE4dkN.png" alt="homepage.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4wCOSz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/wF8Qxmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4wCOSz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/wF8Qxmb.png" alt="timelinepage.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEYQbdHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/6luHMRA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEYQbdHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/6luHMRA.png" alt="postpage.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-source-code-of-this-project-lies-at-httpsgithubcom100lvlmaster5chango"&gt;
  &lt;/a&gt;
  The source code of this project lies at: &lt;a href="https://github.com/100lvlmaster/5chan-go"&gt;https://github.com/100lvlmaster/5chan-go&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can find me at:&lt;br&gt;
Website &lt;br&gt;
&lt;a href="https://100lvlmaster.in"&gt;https://100lvlmaster.in&lt;/a&gt;&lt;br&gt;
Github&lt;br&gt;
&lt;a href="https://github.com/100lvlmaster"&gt;https://github.com/100lvlmaster&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>4chan</category>
      <category>react</category>
    </item>
    <item>
      <title>HTTP Refresher: Things You Should Know About HTTP</title>
      <author>Anish Kumar</author>
      <pubDate>Sat, 18 Sep 2021 14:35:34 +0000</pubDate>
      <link>https://dev.to/anishkumar/http-refresher-things-you-should-know-about-http-2bhi</link>
      <guid>https://dev.to/anishkumar/http-refresher-things-you-should-know-about-http-2bhi</guid>
      <description>&lt;p&gt;HTTP(Hyper Text Transfer Protocol) is one of many protocols used for transferring data (think of html pages, text, images, videos and much more) across machines.  There are other application layer protocols like &lt;a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol"&gt;FTP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol"&gt;DHCP&lt;/a&gt; etc. &lt;/p&gt;

&lt;p&gt;HTTP was invented alongside HTML to create the first interactive, text-based web browser: the original World Wide Web. In this article, we'll be covering the key concepts related to HTTP, which all developers should be aware of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-basics"&gt;
  &lt;/a&gt;
  Understanding the basics
&lt;/h2&gt;

&lt;p&gt;Let's start with basics  i.e. understanding how data transfer takes place and overall anatomy of HTTP messages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#osi-model"&gt;
  &lt;/a&gt;
  OSI Model
&lt;/h3&gt;

&lt;p&gt;The OSI (Open Systems Interconnection) is a conceptual framework used to describe the functions of a networking system. It thus helps to see how information is transferred across a network. Here's a diagram depicting various &lt;a href="https://www.comparitech.com/net-admin/osi-model-explained/"&gt;networking layers&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5qdr5or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631948742808/hzelI0mq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5qdr5or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631948742808/hzelI0mq5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Application Layer&lt;/strong&gt;:  It's the layer that user interacts with. This layer uses protocols like HTTP and FTP.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Presentation Layer&lt;/strong&gt; : This layer prepares and translates data from the network format to the application format or vice versa. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Session Layer&lt;/strong&gt;: It's the layer responsible for establishing, maintaining, and ending connections between different applications. Typically youâll see protocols such as NetBios, NFS, RPC, and SQL operating on this layer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transport Layer&lt;/strong&gt;:  It is the layer responsible for transferring data between end systems and hosts. It dictates what gets sent where, and how much of it gets sent. At this level, you see protocols like TCP, UDP, and SPX.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Network Layer&lt;/strong&gt;: It has the job of dealing with most of the routing within a network. In simple terms, the Network Layer determines how a packet travels to its destination. Protocols like TCP/IP, AppleTalk, and IPX operate at this layer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Link Layer&lt;/strong&gt;: The data link provides for the transfer of data frames between hosts connected to the physical link.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Physical Layer&lt;/strong&gt;: It is the hardware layer of the OSI model which includes network elements such as hubs, cables, ethernet, and repeaters. For example, this layer is responsible for executing electrical signal changes like making lights light up.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http-messages"&gt;
  &lt;/a&gt;
  HTTP messages
&lt;/h3&gt;

&lt;p&gt;As mentioned above, HTTP operates in application layer i.e. the layer user directly interacts with. Some key points regarding this protocol:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; HTTP follows the classical &lt;a href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model"&gt;client-server model&lt;/a&gt;. A client opens a connection to issue a request and then waits for the server to respond.&lt;/li&gt;
&lt;li&gt;HTTP is a &lt;a href="https://en.wikipedia.org/wiki/Stateless_protocol"&gt;stateless protocol&lt;/a&gt; i.e. each request has isolated and independent lifecycle. HTTP is not session-less though. For example, HTTP cookies allow the use of stateful sessions.&lt;/li&gt;
&lt;li&gt;HTTP, which is an application layer protocol, rides on top of &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol"&gt;TCP (Transmission Control Protocol)&lt;/a&gt;: a transport layer protocol.&lt;/li&gt;
&lt;li&gt;HTTP is &lt;a href="https://stackoverflow.com/questions/393407/why-http-protocol-is-designed-in-plain-text-way"&gt;text based protocol&lt;/a&gt; i.e data transmission takes place using text format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-requestresponse-anatomy"&gt;
  &lt;/a&gt;
  HTTP request/response anatomy
&lt;/h2&gt;

&lt;p&gt;An HTTP request can consist of four parts: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request method&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;Request headers&lt;/li&gt;
&lt;li&gt;Request body&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the possible HTTP request methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; requests a specific resource in its entirety&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HEAD&lt;/strong&gt; requests a specific resource without the body content&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; adds content, messages, or data to a new page under an existing web resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt; directly modifies an existing web resource or creates a new URI if need be&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt; gets rid of a specified resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TRACE&lt;/strong&gt; shows users any changes or additions made to a web resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;OPTIONS&lt;/strong&gt; shows users which HTTP methods are available for a specific URL&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CONNECT&lt;/strong&gt; converts the request connection to a transparent TCP/IP tunnel&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PATCH&lt;/strong&gt; partially modifies a web resource&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An HTTP request is just a series of lines of text that follow the HTTP protocol. A GET request might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /hello.txt HTTP/1.1
User-Agent: curl/7.63.0 libcurl/7.63.0 OpenSSL/1.1.l zlib/1.2.11
Host: www.example.com
Accept-Language: en
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the server receives the request, It may respond with some data. A sample HTTP response would like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/1.1 200 OK
Date: Wed, 30 Jan 2019 12:14:39 GMT
Server: Apache
Last-Modified: Mon, 28 Jan 2019 11:17:01 GMT
Accept-Ranges: bytes
Content-Length: 12
Vary: Accept-Encoding
Content-Type: text/plain

Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#http-and-security-concern"&gt;
  &lt;/a&gt;
  HTTP and security concern
&lt;/h3&gt;

&lt;p&gt;As stated earlier, HTTP uses text format for data transmission. The problem is this data is not encrypted, so it can be intercepted by third parties to gather data being passed between the two systems. This issue can be addressed using HTTPS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-https"&gt;
  &lt;/a&gt;
  What is HTTPS?
&lt;/h3&gt;

&lt;p&gt;The S in HTTPS stands for "secure." HTTPS uses &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt; (or SSL) to encrypt HTTP requests and responses, so in the example above, instead of the text, an attacker would see a bunch of seemingly random characters.&lt;/p&gt;

&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /hello.txt HTTP/1.1
User-Agent: curl/7.63.0 libcurl/7.63.0 OpenSSL/1.1.l zlib/1.2.11
Host: www.example.com
Accept-Language: en
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The attacker would see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t8Fw6T8UV81pQfyhDkhebbz7+oiwldr1j2gHBB3L3RFTRsQCpaSnSBZ78Vme+DpDVJPvZdZUZHpzbbcqmSW1+dkughdkhkuyi2u3gsJGSJHF/FNUjgH0BmVRWII6+T4MnDwmCMZUI/orxP3HGwYCSIvyzS3MpmmSe4iaWKCOHQ==
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-tls-encrypts-http-messages"&gt;
  &lt;/a&gt;
  How TLS encrypts HTTP messages
&lt;/h3&gt;

&lt;p&gt;TLS uses a technology called &lt;a href="https://www.geeksforgeeks.org/public-key-encryption/"&gt;public key encryption&lt;/a&gt;. In a nutshell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; There are two keys, a public key and a private key.&lt;/li&gt;
&lt;li&gt; The public key is shared with client devices via the server's SSL certificate. &lt;/li&gt;
&lt;li&gt; When a client opens a connection with a server, the two devices use the public and private key to agree on new keys, called session keys, to encrypt further communications between them.&lt;/li&gt;
&lt;li&gt;All HTTP requests and responses are then encrypted with these session keys, so that anyone who intercepts communications can only see a random string of characters, not the plaintext.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a great article on encryption &lt;a href="https://www.cloudflare.com/learning/ssl/what-is-encryption/"&gt;here&lt;/a&gt; if that interests you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evolution-of-http"&gt;
  &lt;/a&gt;
  Evolution of HTTP
&lt;/h2&gt;

&lt;p&gt;The protocol was developed by Tim Berners-Lee and his team between 1989-1991.  The first version: HTTP/0.9 is also referred to as one line protocol. Only &lt;code&gt;GET&lt;/code&gt; request type was supported back then. HTTP/0.9 was very limited and both browsers and servers quickly extended it to be more versatile, resulting in HTTP/1.0. &lt;/p&gt;

&lt;p&gt;HTTP/1.0 brought in quite a few novelties. It introduced concepts of status code, multiple request types(&lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;), request/response headers etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lack-of-persistence"&gt;
  &lt;/a&gt;
  Lack of Persistence
&lt;/h3&gt;

&lt;p&gt;HTTP/1.0 required to open up a new TCP connection for each request (and close it immediately after the response was sent). &lt;br&gt;
TCP connection in turn uses a &lt;strong&gt;three-way handshake&lt;/strong&gt; to establish a reliable connection. The connection is full duplex(two way connection), and both sides synchronize (SYN) and acknowledge (ACK) each other. The exchange of these four flags is performed in three stepsâSYN, SYN-ACK, and ACKâas shown in Figure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQl31b5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631954774758/pBBcHQFCG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQl31b5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631954774758/pBBcHQFCG.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For better performance, it was crucial to reduce these round-trips between client and server. HTTP/1.1 solved this with &lt;strong&gt;persistent connections&lt;/strong&gt;. What's a persistent connection? It's a (network communication) channel that remains open for further HTTP requests and responses rather than closing after a single exchange.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#keepalive-header"&gt;
  &lt;/a&gt;
  Keep-Alive header
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;keep-alive&lt;/code&gt; header was added to HTTP 1.0 to facilitate persistent connection. If the client supports &lt;code&gt;keep-alive&lt;/code&gt;, it adds an additional header to the request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, when the server receives this request and generates a response, it also adds a header to the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following this, the connection is not dropped, but is instead kept open. When the client sends another request, it uses the same connection. This will continue until either the client or the server decides that the conversation is over, and one of them drops the connection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#http11"&gt;
  &lt;/a&gt;
  HTTP/1.1
&lt;/h2&gt;

&lt;p&gt;HTTP/1.1 Introduced critical performance optimizations and feature enhancements. Major offerings are listed below:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#persistent-and-pipelined-connections"&gt;
  &lt;/a&gt;
  Persistent and pipelined connections
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Persistence:&lt;/strong&gt; In HTTP 1.1, all connections are considered persistent unless declared otherwise. The HTTP persistent connections do not use separate &lt;code&gt;keep-alive&lt;/code&gt; messages, they just allow multiple requests to use a single connection by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pipelining:&lt;/strong&gt; is the process of sending successive requests, over the same persistent connection, without waiting for the answer. This avoids latency of the connection.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The image below illustrates difference between short lived, persistent and pipelined connections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3rqqSAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631975902031/_irYKYWhD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3rqqSAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631975902031/_irYKYWhD.png" alt="Screen Shot 2021-09-18 at 8.06.58 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;** Head of line blocking*&lt;em&gt;: Even though pipelining reduces number of requests and re-uses same connection, it still requires the responses to arrive in order. Which means if the first request takes too long to be responded, subsequent requests remain blocked. This is called "Head of line blocking". HTTP/2.0 sloves this using **binary framing&lt;/em&gt;* without sacrificing parallelism. More on this is discussed ahead in this article.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#chunked-transfers-encoding"&gt;
  &lt;/a&gt;
  Chunked transfers encoding
&lt;/h3&gt;

&lt;p&gt;Pipelining makes it difficult for the client to determine where one response ends and the next response begins, particularly during pipelined HTTP operation. This is a serious problem when &lt;code&gt;Content-Length&lt;/code&gt; cannot be used due to streaming. To solve this problem, HTTP 1.1 introduced a chunked transfer coding that defines a last-chunk bit. The last-chunk bit is set at the end of each response so that the client knows where the next response begins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compression-and-decompression"&gt;
  &lt;/a&gt;
  Compression and Decompression
&lt;/h3&gt;

&lt;p&gt;HTTP/1.1 introduced headers that allow transfer of compressed data over the network. It can be done with the help of &lt;code&gt;Accept-Encoding&lt;/code&gt; and &lt;code&gt;Content-Encoding&lt;/code&gt; headers. Here's summary of how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client issues request with &lt;code&gt;Accept-Encoding&lt;/code&gt; header to let server understand the compression schemes it supports:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /encrypted-area HTTP/1.1
Host: www.example.com
Accept-Encoding: gzip, deflate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; If server supports any these compression schemes, it can choose to compress the content and respond with it along with &lt;code&gt;Content-Encoding&lt;/code&gt; header:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/1.1 200 OK
Date: mon, 26 June 2016 22:38:34 GMT
Server: Apache/1.3.3.7 (Unix)  (Red-Hat/Linux)
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
Accept-Ranges: bytes
Content-Length: 438
Connection: close
Content-Type: text/html; charset=UTF-8
Content-Encoding: gzip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HTTP/1.1 Also introduced following concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Virtual hosting:&lt;/strong&gt; a server with a single IP Address hosting multiple domains&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cache support:&lt;/strong&gt; faster response and great bandwidth savings by adding cache support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http20"&gt;
  &lt;/a&gt;
  HTTP/2.0
&lt;/h2&gt;

&lt;p&gt;HTTP/2 is a major revision of the HTTP protocol. It was derived from the earlier experimental &lt;a href="https://en.wikipedia.org/wiki/SPD"&gt;SPDY&lt;/a&gt; protocol, originally developed by Google. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#http2-is-binary-instead-of-textual"&gt;
  &lt;/a&gt;
  HTTP2 is &lt;strong&gt;binary&lt;/strong&gt;, instead of textual
&lt;/h3&gt;

&lt;p&gt;At the core of all performance enhancements of HTTP/2 is the new binary framing layer, which dictates how the HTTP messages are encapsulated and transferred between the client and server. Following are the critical terms associated with framing layer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Frame&lt;/strong&gt;: The &lt;strong&gt;smallest unit of communication&lt;/strong&gt; in HTTP/2, each containing a frame header, which at a minimum identifies the stream to which the frame belongs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt;: A complete &lt;strong&gt;sequence of frames&lt;/strong&gt; that map to a logical request or response message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stream&lt;/strong&gt;: A bidirectional flow of bytes within an established connection, which may carry &lt;strong&gt;one or more messages&lt;/strong&gt; in it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ffvUsYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631958924830/WqtNgMwdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ffvUsYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631958924830/WqtNgMwdi.png" alt="Screen Shot 2021-09-18 at 3.24.57 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image below illustrates how an HTTP/1.x message compares to HTTP/2.0 message (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages"&gt;Source&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69y1HhTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631975935565/hzKruDE2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69y1HhTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631975935565/hzKruDE2l.png" alt="Screen Shot 2021-09-18 at 8.07.06 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiplexing"&gt;
  &lt;/a&gt;
  Multiplexing
&lt;/h3&gt;

&lt;p&gt;In HTTP/2.0, client and server can break down an HTTP message into independent frames, interleave them, and then reassemble them on the other end. This is called multiplexing. It can be understood better by the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZ4gyarN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631959233801/4_jJaIYKd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZ4gyarN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631959233801/4_jJaIYKd1.png" alt="Screen Shot 2021-09-18 at 3.30.27 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parallelism-one-connection-per-origin"&gt;
  &lt;/a&gt;
  Parallelism: One connection per origin
&lt;/h3&gt;

&lt;p&gt;With the new binary framing mechanism in place, HTTP/2 no longer needs multiple TCP connections to multiplex streams in parallel; each stream is split into many frames, which can be interleaved and prioritized. As a result, all HTTP/2 connections are persistent, and only one connection per origin is required, which offers numerous performance benefits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server-push"&gt;
  &lt;/a&gt;
  Server push
&lt;/h3&gt;

&lt;p&gt;Another powerful new feature of HTTP/2 is the ability of the server to send multiple responses for a single client request. That is, in addition to the response to the original request, the server can push additional resources to the client without the client having to request each one explicitly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-of-http-http30"&gt;
  &lt;/a&gt;
  Future of HTTP: HTTP/3.0
&lt;/h2&gt;

&lt;p&gt;HTTP/3.0 is the upcoming major version of HTTP. So far the underlying transport layer mechanism behind HTTP has been TCP.  HTTP/3.0 changes that, even though the core semantics remain unchanged.&lt;/p&gt;

&lt;p&gt;The fundamental difference between HTTP/2 and HTTP/3 is that HTTP/3 runs over &lt;a href="https://en.wikipedia.org/wiki/QUIC"&gt;QUIC&lt;/a&gt;, and QUIC runs over connectionless &lt;a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol"&gt;UDP&lt;/a&gt; instead of the connection-oriented TCP.&lt;/p&gt;

&lt;p&gt;Another significant different is HTTP/3.0 mandates secure transfer of data. HTTP/3 includes encryption that borrows heavily from TLS but isnât using it directly. This change is because HTTP/3 differs from HTTPS/TLS in terms of what it encrypts: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With the older HTTPS/TLS protocol, only the data itself is protected by TLS, leaving a lot of the transport metadata visible. &lt;/li&gt;
&lt;li&gt;In HTTP/3 both the data and the transport protocol are protected. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Most browsers do not support h2c (HTTP/2 without TLS), which means opting for HTTP/2.0 pretty much needs you to opt for TLS if you're hosting a website. Here's a relevant &lt;a href="https://stackoverflow.com/questions/46788904/why-do-web-browsers-not-support-h2c-http-2-without-tls"&gt;stackoverlow thread&lt;/a&gt; on why browsers act this way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The diagram below illustrates fundamental difference between HTTP/3.0 and it's predecessor(&lt;a href="https://ably.com/topic/http-2-vs-http-3"&gt;source&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LqlgHL8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631965955142/AiWibfxf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqlgHL8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631965955142/AiWibfxf4.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x"&gt;https://www.developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.en.wikipedia.org/wiki/HTTP_compression"&gt;https://www.en.wikipedia.org/wiki/HTTP_compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.greenlanemarketing.com/resources/articles/seo-101-http-vs-http2/"&gt;https://www.greenlanemarketing.com/resources/articles/seo-101-http-vs-http2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/http2"&gt;https://developers.google.com/web/fundamentals/performance/http2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.okta.com/books/api-security/tls/how/"&gt;https://developer.okta.com/books/api-security/tls/how/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This article has been originally published at &lt;a href="https://stackfull.dev/http-refresher-things-you-should-know-about-http"&gt;StackFull.dev&lt;/a&gt;. If you enjoyed reading this, you may want to opt for my &lt;a href="https://stackfull.dev"&gt;newsletter&lt;/a&gt;. It would let me reach out to you whenever I publish a new thought!&lt;/p&gt;

</description>
      <category>server</category>
      <category>http</category>
      <category>networking</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5chan API - Golang, GORM, Go-fiber</title>
      <author>Navin Kodag</author>
      <pubDate>Sat, 18 Sep 2021 14:27:26 +0000</pubDate>
      <link>https://dev.to/100lvlmaster/5chan-api-golang-gorm-go-fiber-10gi</link>
      <guid>https://dev.to/100lvlmaster/5chan-api-golang-gorm-go-fiber-10gi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#this-is-the-continuation-of-the-5chan-project"&gt;
  &lt;/a&gt;
  This is the continuation of the 5chan project.
&lt;/h2&gt;

&lt;p&gt;Creating the backend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Setup project and download dependencies in one Ctrl+v-Ctrl-v :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="c"&gt;# Create the 5chan directory&lt;/span&gt;
 &lt;span class="nb"&gt;mkdir &lt;/span&gt;5chan-go
 &lt;span class="c"&gt;# Create main.go&lt;/span&gt;
 &lt;span class="nb"&gt;touch &lt;/span&gt;main.go
 &lt;span class="c"&gt;# Init the go project &lt;/span&gt;
 go mod init github.com/100lvlmaster/5chan-go
 &lt;span class="c"&gt;# Get go-fiber&lt;/span&gt;
 go get github.com/gofiber/fiber/v2
 &lt;span class="c"&gt;# Get GORM&lt;/span&gt;
 go get github.com/gofiber/fiber/v2 
 &lt;span class="c"&gt;# Get air&lt;/span&gt;
 curl &lt;span class="nt"&gt;-sSfL&lt;/span&gt; https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;-b&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;go &lt;span class="nb"&gt;env &lt;/span&gt;GOPATH&lt;span class="si"&gt;)&lt;/span&gt;/bin
 &lt;span class="c"&gt;# Setup air&lt;/span&gt;
 air &lt;span class="nt"&gt;-c&lt;/span&gt; .air.toml
 &lt;span class="c"&gt;# Get godotenv to read env vars [optional]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a directory structure like so:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; controllers 

&lt;ul&gt;
&lt;li&gt; posts.go&lt;/li&gt;
&lt;li&gt; replies.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; database

&lt;ul&gt;
&lt;li&gt; database.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; middleware

&lt;ul&gt;
&lt;li&gt; middleware.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; models

&lt;ul&gt;
&lt;li&gt; post.go&lt;/li&gt;
&lt;li&gt; reply.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; routes

&lt;ul&gt;
&lt;li&gt; routes.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;main.go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YFXZtOEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/q85U73P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YFXZtOEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/q85U73P.png" alt="dir-struct.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#da-code"&gt;
  &lt;/a&gt;
  Da Code:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Creating structs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;models/post.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// models/post.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;
&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`gorm:"primaryKey"`&lt;/span&gt;
&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"title"`&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"author"`&lt;/span&gt;
&lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"body"`&lt;/span&gt;
&lt;span class="n"&gt;Reply&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt; &lt;span class="s"&gt;`json:"replies" gorm:"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;models/reply.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// models/reply.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Reply&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;
&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`gorm:"primaryKey"`&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"author"`&lt;/span&gt;
&lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"body"`&lt;/span&gt;
&lt;span class="n"&gt;PostID&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"postId"`&lt;/span&gt;
&lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="s"&gt;`json:"post" gorm:"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Connecting the databse and creating a singleton of the instance so we can use it everywhere.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// database/database.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="s"&gt;"os"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/models"&lt;/span&gt;
&lt;span class="s"&gt;"gorm.io/driver/postgres"&lt;/span&gt;
&lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="c"&gt;// DBConn is a database connection singleton&lt;/span&gt;
&lt;span class="n"&gt;DBConn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;InitDb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LookupEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DB_DSN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not connect to the database"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not initialize database"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoMigrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not init database"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Database migrated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Creating Controllers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;controllers/posts.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// controllers/posts.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/database"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/models"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="n"&gt;gonanoid&lt;/span&gt; &lt;span class="s"&gt;"github.com/matoous/go-nanoid/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetPostById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Preload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Reply"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreatePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BodyParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gonanoid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0123456789"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;DeletePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Post deleted successfully"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;controllers/replies.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"errors"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/database"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/models"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="n"&gt;gonanoid&lt;/span&gt; &lt;span class="s"&gt;"github.com/matoous/go-nanoid/v2"&lt;/span&gt;
&lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetReplies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;replies&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetRepliesByPostId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;replies&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PostID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreateReply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BodyParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Incorrect input body, please chcek input convention and try again"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/// DB contains post&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;
&lt;span class="n"&gt;hasRecord&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrRecordNotFound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;hasRecord&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Post does not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;///&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gonanoid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0123456789"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Setup routes:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// routes/routes.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// routes/routes.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/controllers"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;RoutesInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hellso, World ð!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPosts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatePost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPostById&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeletePost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/replies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetReplies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/replies/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRepliesByPostId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/replies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateReply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A middleware to limit other methods like &lt;code&gt;POST&lt;/code&gt; &amp;amp; &lt;code&gt;DELETE&lt;/code&gt; to our Frontend. But you're using this you may change them to your liking in the &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;middleware/middleware.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"os"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;/// Limit post requests to the official client&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CustomeMiddleware&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"DELETE"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LookupEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not fetch env vars, call 100lvlmaster"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Your keys are incorrect peasant â¨â¨"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And then tie everything together in the main.go file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;main.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// main.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"os"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/database"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/middleware"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/routes"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2/middleware/cors"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/joho/godotenv"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;godotenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c"&gt;// app.Use(cache.New())&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CustomeMiddleware&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitDb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RoutesInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LookupEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PORT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"8080"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And then run the project using:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;air
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEQ-M4Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/KNtG8BH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEQ-M4Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/KNtG8BH.png" alt="air.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After making some test requests there are the screenshots:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HbLnfXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/q6HJxj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HbLnfXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/q6HJxj5.png" alt="test-1.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69xR8s-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/mfCWt0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69xR8s-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/mfCWt0h.png" alt="test-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code of this project lies at:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpsgithubcom100lvlmaster5chango"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/100lvlmaster/5chan-go"&gt;https://github.com/100lvlmaster/5chan-go&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can find me at:&lt;br&gt;
Website &lt;br&gt;
&lt;a href="https://100lvlmaster.in"&gt;https://100lvlmaster.in&lt;/a&gt;&lt;br&gt;
Github&lt;br&gt;
&lt;a href="https://github.com/100lvlmaster"&gt;https://github.com/100lvlmaster&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>gofiber</category>
      <category>gorm</category>
      <category>5chan</category>
    </item>
    <item>
      <title>5chan - The 4chan clone</title>
      <author>Navin Kodag</author>
      <pubDate>Sat, 18 Sep 2021 14:14:15 +0000</pubDate>
      <link>https://dev.to/100lvlmaster/5chan-the-4chan-clone-1n7p</link>
      <guid>https://dev.to/100lvlmaster/5chan-the-4chan-clone-1n7p</guid>
      <description>&lt;p&gt;This weekend I want to make a clone of 4 chan. It won't be as big as 4chan lol.&lt;br&gt;
But still I'll use this post to design and decide the stack to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-4-chan"&gt;
  &lt;/a&gt;
  What is 4 chan
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;4chan is a simple image-based bulletin board where anyone can post comments and share images. There are boards dedicated to a variety of topics, from Japanese animation and culture to videogames, music, and photography. Users do not need to register an account before participating in the community.  ~ &lt;em&gt;4chan Homepage&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-we-want-5chan-to-be"&gt;
  &lt;/a&gt;
  What we want 5chan to be
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Text based&lt;/li&gt;
&lt;li&gt;Anonymous [ no registration ]&lt;/li&gt;
&lt;li&gt;Posts&lt;/li&gt;
&lt;li&gt;Replies to posts&lt;/li&gt;
&lt;li&gt;Timeline of posts on homepage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-tech-stack-"&gt;
  &lt;/a&gt;
  The tech stack :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Backend

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gofiber.io/"&gt;Go-fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cosmtrek/air"&gt;Air - live reload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gorm.io/"&gt;GORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Frontend 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/"&gt;NextJs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://formik.org/"&gt;Formik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zustand.surge.sh/"&gt;Zustand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Hosting
    - &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hmmm. Thats something I can work out in a day or two for sure.&lt;/p&gt;

&lt;p&gt;So ... LESGOOOO&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fcDMHe1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif%3Fcid%3Decf05e47kq1h576i6japfzxpjvqixjrl4rihalyop04ipgsf%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fcDMHe1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif%3Fcid%3Decf05e47kq1h576i6japfzxpjvqixjrl4rihalyop04ipgsf%26rid%3Dgiphy.gif%26ct%3Dg" alt="cat-ready.gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You can find me at:&lt;/p&gt;

&lt;p&gt;Website : &lt;a href="https://100lvlmaster.in"&gt;https://100lvlmaster.in&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Github : &lt;a href="https://github.com/100lvlmaster"&gt;https://github.com/100lvlmaster&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>go</category>
      <category>gofiber</category>
    </item>
    <item>
      <title>How to Install Kali Linux on VirtualBox: A Step-by-Step Guide</title>
      <author>Piyush Shrivastava</author>
      <pubDate>Sat, 18 Sep 2021 13:01:53 +0000</pubDate>
      <link>https://dev.to/b1tsh3ll/how-to-install-kali-linux-on-virtualbox-a-step-by-step-guide-2fi6</link>
      <guid>https://dev.to/b1tsh3ll/how-to-install-kali-linux-on-virtualbox-a-step-by-step-guide-2fi6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X98LqVwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jdz1ov1tey29xhjj7hk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X98LqVwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jdz1ov1tey29xhjj7hk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Kali Linux is a Debian-based Linux system that was created for penetration testing and is particularly beneficial for security professionals and amateurs. Kali Linux, formerly known as BackTrack Linux, comes with a number of network auditing tools and apps. Kali can be used as a Live DVD or installed as a host operating system (OS) on a computer like any other Linux.However, using Kali as a general-purpose desktop operating system is not recommended. At the same time, settings are not saved after a system reboot when using Kali Live DVD. Virtual machines can be extremely useful in this case. In today's blog post, we'll look at how to set up Kali Linux as a virtual machine in VirtualBox (VM).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software Required To Download&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kali.org/get-kali/#kali-bare-metal"&gt;Kali Linux ISO Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://download.virtualbox.org/virtualbox/6.1.26/VirtualBox-6.1.26-145957-Win.exe"&gt;Virtual Box 6.1.26&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://download.virtualbox.org/virtualbox/6.1.26/Oracle_VM_VirtualBox_Extension_Pack-6.1.26.vbox-extpack"&gt;Virtual Box Extension Pack 6.1.26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download This All Tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kali Linux Installation Image Download&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvUoA9xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h9de9xhx9aerdja4em7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvUoA9xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h9de9xhx9aerdja4em7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cdimage.kali.org/kali-2021.3/kali-linux-2021.3-installer-amd64.iso"&gt;Click Here To Download&lt;/a&gt;&lt;br&gt;
Now, After Downloading Let's Move Ahead!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a New Virtual Machine&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwLzFt1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6qs8decqhngwg2vfv0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwLzFt1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6qs8decqhngwg2vfv0b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Set the following VM parameters:&lt;br&gt;
&lt;strong&gt;Name: Kali Linux&lt;/strong&gt;&lt;br&gt;
Note: You Can Enter Any Name You Want Here I Am Going With Default Name.&lt;br&gt;
&lt;strong&gt;Machine Folder: Default&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Type: Linux&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Version: Debian (64-bit)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Memory size: 4096 MB&lt;/strong&gt;&lt;br&gt;
Note: Here I Have Given 4GB As Ram Size You Can Set As Per Your System Requirements.&lt;br&gt;
Although you should allow enough unallocated memory to operate your host OS, the VM memory capacity must be large enough to run a guest OS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hard disk: Create a virtual hard disk now&lt;/strong&gt;&lt;br&gt;
Hit Create to continue and configure a new virtual hard disk.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQXB1puJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti5cquijei0cwcig5ifb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQXB1puJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti5cquijei0cwcig5ifb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The VM folder is intended for storing virtual disc files (such folder is selected by default).&lt;br&gt;
Set the size of the virtual disc file. It must be at least 20 GB in size.&lt;br&gt;
After creating a new VM, some additional settings must be configured. Select your recently created virtual machine and open the VM settings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1Y2Yy-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge8uiqqtpgv9kottaa40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1Y2Yy-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge8uiqqtpgv9kottaa40.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Display options&lt;/strong&gt;&lt;br&gt;
Go to Display &amp;gt; Screen and set Video Memory to 128 MB. It will prevent installer hanging.&lt;br&gt;
Then, select Enable 3D acceleration from the drop-down menu (optional). It'll come in handy for applications that require 3D acceleration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7PIDOUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhh976q5ezvh2ywvtga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7PIDOUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhh976q5ezvh2ywvtga.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network options&lt;/strong&gt;&lt;br&gt;
Next, navigate to the network settings and pick the virtual network adapter's networking mode. To use the VM network adapter as if it were a physical network adapter on the host machine, select the Bridged mode. The VM network adapter is linked to the same physical network as the host system in this scenario. Additional settings, such as network adapter name and type, can be configured.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dY6BfUSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfp8vn67eui4ik51ukma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dY6BfUSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfp8vn67eui4ik51ukma.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Boot options&lt;/strong&gt;&lt;br&gt;
You must first insert your virtual ISO DVD image into the VM's virtual DVD drive, and then boot from that ISO disc. Go to Storage in the VM settings and select an IDE controller for your virtual optical drive (it is empty by default). Click the empty status, then the disc symbol near IDE Secondary Master, and then Choose Virtual Optical Disk File from the menu that appears.&lt;br&gt;
Look through the Kali Linux installation ISO image you previously downloaded from the official site (kali-linux-2021.3-amd64.iso). To save your settings, click OK.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yIDTpVhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z8l5lthwy0vcy2fi31a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yIDTpVhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z8l5lthwy0vcy2fi31a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You may now start your new VM and begin installing Kali. By Pressing Start Button On The Main Menu Of Virtual Box.&lt;br&gt;
You'll get a boot menu after booting from a virtual DVD, where you can choose from Kali Linux boot choices like Boot from Live DVD, Install, Graphical Install, and so on. Let's go with the Graphical Install option. To continue, press Enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1r8JFE0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evv5krb7d4hlh6plqh0b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1r8JFE0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evv5krb7d4hlh6plqh0b.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose a language.&lt;/strong&gt; Select the language for both the installation procedure and the installed system. For the current installation, English has been chosen. To proceed, click the Continue button on each screen. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmVU9F5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1732yuysdpd9ziwt0pei.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmVU9F5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1732yuysdpd9ziwt0pei.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose a location.&lt;/strong&gt; This option allows you to change your time zone, time format, and other settings. In this case, the United States has been chosen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xe6TSktp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbayhmxopz54ppxsfu1n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xe6TSktp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbayhmxopz54ppxsfu1n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up the keyboard.&lt;/strong&gt; Choose a keyboard layout. The current installation makes use of American English.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T00NUvS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5lthuzxuyjs0wkyis83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T00NUvS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5lthuzxuyjs0wkyis83.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up the network.&lt;/strong&gt; Enter your Linux system's hostname, for example, kali-virtualbox.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xyjM1Thi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc524g29s7uw1tmqv58q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xyjM1Thi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc524g29s7uw1tmqv58q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up the domain name.&lt;/strong&gt; If your network doesn't use a domain, you can leave this box blank.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuFHbjLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf3vq2m1a8w5amncad33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuFHbjLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf3vq2m1a8w5amncad33.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create user accounts and passwords.&lt;/strong&gt; Read the helpful hints on this screen before entering the root password.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0A_sKSI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vvjheck6bg4swq9dpdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0A_sKSI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vvjheck6bg4swq9dpdh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disks for partitioning.&lt;/strong&gt; Disk partitioning can be done manually or with the help of a programme. You can choose Guided â use whole disc for the first time. To create one large partition, the entire drive will be utilised.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qh_Lu9j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2do5014zq5jhas1uyou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qh_Lu9j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2do5014zq5jhas1uyou.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now,&lt;br&gt;
&lt;strong&gt;After This Set EveryThings As Default And Press Continue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select Finish partitioning and write changes to disc from the overview.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-mc-z9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vf3bcjibx4gpv1rawu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-mc-z9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vf3bcjibx4gpv1rawu6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Select Yes and confirm that you would like to write changes to the disk.&lt;br&gt;
Now,&lt;br&gt;
System Will Install Linux For You If &lt;strong&gt;Any Things Are Asked Keep It Default.&lt;/strong&gt;&lt;br&gt;
ENJOY!!!&lt;/p&gt;

</description>
      <category>linux</category>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>WebdriverIO - Complete Beginner Course 2021</title>
      <author>Dilpreet Johal</author>
      <pubDate>Sat, 18 Sep 2021 12:58:11 +0000</pubDate>
      <link>https://dev.to/automationbro/webdriverio-complete-beginner-course-2021-218b</link>
      <guid>https://dev.to/automationbro/webdriverio-complete-beginner-course-2021-218b</guid>
      <description>&lt;p&gt;&lt;strong&gt;WebdriverIO&lt;/strong&gt; is one of the most popular JavaScript test automation frameworks in the industry. It is being used by major companies around the world such Google, Netflix, Microsoft, Mozilla and many more...&lt;/p&gt;

&lt;p&gt;It is extremely &lt;strong&gt;beginner-friendly&lt;/strong&gt;, it has &lt;strong&gt;huge community support&lt;/strong&gt; &amp;amp; is &lt;strong&gt;actively maintained&lt;/strong&gt; by the community. Best of all, it is &lt;strong&gt;free to use&lt;/strong&gt; for anyone (startups to enterprise).&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://www.udemy.com/course/webdriverio-complete-beginner-course/?couponCode=AUTOMATIONBRO-CODE"&gt;course&lt;/a&gt; will take you from the very basics where I will teach you about what WebdriverIO is and how to setup your first test with WebdriverIO, to all the way to teaching how to build a fully functional framework with WebdriverIO. Along the way, I will teach you all the best practices that will put on the path of becoming one of the Top Automation Engineers. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#click-on-the-link-below-to-get-85-off-on-this-course-expires-soon"&gt;
  &lt;/a&gt;
  Click on the link below to get &lt;strong&gt;85% off&lt;/strong&gt; on this course (expires soon...)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/webdriverio-complete-beginner-course/?couponCode=AUTOMATIONBRO-CODE"&gt;https://www.udemy.com/course/webdriverio-complete-beginner-course/?couponCode=AUTOMATIONBRO-CODE&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#heres-what-we-will-be-covering-in-this-course"&gt;
  &lt;/a&gt;
  Here's what we will be covering in this course:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript &amp;amp; HTML/CSSÂ Basics&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What&lt;/strong&gt; is WebdriverIO &amp;amp; &lt;strong&gt;Why&lt;/strong&gt; to use it?&lt;/li&gt;
&lt;li&gt;Setting up your machine for &lt;strong&gt;perfect automation experience&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Installation &amp;amp; Setup&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Step by step guide&lt;/strong&gt; on how to write tests&lt;/li&gt;
&lt;li&gt;Working with &lt;strong&gt;different types of elements&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Learning about how &lt;strong&gt;wait commands&lt;/strong&gt; work&lt;/li&gt;
&lt;li&gt;How to use &lt;strong&gt;assertions&lt;/strong&gt; &amp;amp; advantages of using them&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;debug your tests&lt;/strong&gt; when it fails&lt;/li&gt;
&lt;li&gt;Setting up a &lt;strong&gt;fully functional framework&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Page Object Model&lt;/strong&gt; - What is it &amp;amp; how to set it up?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optimizing&lt;/strong&gt; your framework&lt;/li&gt;
&lt;li&gt;Building beautiful &lt;strong&gt;reports&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Running tests in &lt;strong&gt;BrowserStack&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Running tests in &lt;strong&gt;Jenkins&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;And much more...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the topics are taught with real examples. The course will include exercises &amp;amp;Â quizzes that will challenge you &amp;amp; allow you to practice what you learned.&lt;/p&gt;

&lt;p&gt;This course will get &lt;strong&gt;constantly updated&lt;/strong&gt; so that you no longer have to worry about outdated content.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Become a Pro on WebdriverIO!&lt;/strong&gt; â¬ï¸&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xgDDYeoxQlI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See you inside!&lt;br&gt;
Dilpreet&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Making a pixel art editor</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Sat, 18 Sep 2021 12:50:33 +0000</pubDate>
      <link>https://dev.to/abhirajb/making-a-pixel-art-editor-36lb</link>
      <guid>https://dev.to/abhirajb/making-a-pixel-art-editor-36lb</guid>
      <description>&lt;p&gt;Recently, I came across my elder brother's designing course homework about making pixel art and this idea led me to build Pixellate.&lt;/p&gt;

&lt;p&gt;So what exactly is Pixellate?&lt;/p&gt;

&lt;p&gt;It is a pixel art editor and creator built on HTML canvas, CSS and Javascript. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;before you comment about me not using any frameworks&lt;/em&gt;&lt;br&gt;
I would like to say that I wanted to save time and enhance my core skills.&lt;/p&gt;

&lt;p&gt;It is a Progressive Web App (PWA) with offline compatibility.&lt;br&gt;
It is mobile-friendly and is very easy to use.&lt;/p&gt;

&lt;p&gt;Hosting:&lt;br&gt;
Vercel for app&lt;br&gt;
Netlify for landing page&lt;/p&gt;

&lt;p&gt;I released the app on ProductHunt too some time back and I am happy at the results.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8aRu84X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/featured.svg%3Fpost_id%3D312102%26theme%3Dlight" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8aRu84X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/featured.svg%3Fpost_id%3D312102%26theme%3Dlight" alt="Pixellate - A simple and easy-to-use pixel art creator with offline mode | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So head on over to &lt;a href="https://pixellate.netlify.app"&gt;pixellate.netlify.app&lt;/a&gt; to check out my app.&lt;/p&gt;

&lt;p&gt;If you like the app, maybe star the github &lt;a href="https://github.com/RainboeStrykr/Pixellate"&gt;repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or buy me a coffee maybe?&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also don't forget to leave a review on Product Hunt&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/pixellate?utm_source=badge-review&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-pixellate#discussion-body"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zL00lZ5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/review.svg%3Fpost_id%3D312102%26theme%3Dlight" alt="Pixellate - A simple and easy-to-use pixel art creator with offline mode | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Integrate to Disrupt</title>
      <author>nirala-mehul</author>
      <pubDate>Sat, 18 Sep 2021 12:47:19 +0000</pubDate>
      <link>https://dev.to/niralamehul/integrate-to-disrupt-2c1k</link>
      <guid>https://dev.to/niralamehul/integrate-to-disrupt-2c1k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOqyIGH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8pi89al611xn0hzt4x2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOqyIGH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8pi89al611xn0hzt4x2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey everyone! ð This post is about the awesome experience I had during Integrate to Disrupt Hackathon with Symbl.ai.&lt;/p&gt;

&lt;p&gt;It was a two staged hackathon with Ideation and Prototype phase based on the theme Disrupt Using Conversation Intelligence i.e. Integrate Symbl.aiâs Conversation Intelligence with some of your favorite tools and platforms to create new functionality and/or workflows you think may be disruptive. &lt;/p&gt;

&lt;p&gt;Let's start with with Symbl.ai.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-symblai"&gt;
  &lt;/a&gt;
  What's Symbl.ai?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp9QvuFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619700691318/ahvQ6J8Ip.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp9QvuFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619700691318/ahvQ6J8Ip.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="symbl-ai-social.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Symbl.ai is a Conversation Intelligence platform enabling developers to easily build and extend apps to understand and extract contextual insights from natural human conversations at scale. Symbl.aiâs suite of conversation AI APIs can capture natural human conversations in any format and channel (audio, video, email, chat, social) in real-time or asynchronously and analyze conversations using proprietary machine learning algorithms to highlight intents, sentiments, insights, action items and more - bringing developers a plug and play approach to build powerful contextual conversation intelligence experiences.&lt;br&gt;
ð®The best part is - Itâs without the use of upfront training data, wake words or custom classifiers; hence saving a lot of time. â°&lt;/p&gt;

&lt;p&gt;The entire journey was packed with lots of learning about conversation intelligence. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea ð¡
&lt;/h2&gt;

&lt;p&gt;The project idea the Desk is an office utility service built on the comprehensive suite of APIs provided by symbl.ai. It manages the task/action items discussed over meetings/conversations, maps them to appropriate assignees, and presents a summary table with interactive visualizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prototype"&gt;
  &lt;/a&gt;
  Prototype
&lt;/h2&gt;

&lt;p&gt;The idea passed the first stage to proceed to the Prototype phase. The prototype was as challenging as it was exciting. The Hackathon Session by symbl.ai team were a life saver ð.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-we-did"&gt;
  &lt;/a&gt;
  What we did! ð§âð»
&lt;/h3&gt;

&lt;p&gt;The desk backend consist of a node.js app that connects to symbl.ai to get conversations data from meetings/ telephony sessions.&lt;/p&gt;

&lt;p&gt;The data was stored in MongoDB wrapped under GraphQL for efficient query and transformation.&lt;/p&gt;

&lt;p&gt;Finally the front end acquired info regarding the meetings and presented as a dashboard to aid productivity.&lt;/p&gt;

&lt;p&gt;A submission involved a integration of capabilities from the backend, database &amp;amp; front end.&lt;/p&gt;

&lt;p&gt;And then only one thing was left, waiting for results.&lt;/p&gt;

&lt;p&gt;Our team was declared Winner ð¥³ at the event and won Swags besides Beta tester and Community Ambassador Opportunities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repo"&gt;
  &lt;/a&gt;
  Repo
&lt;/h2&gt;

&lt;p&gt;UI: &lt;a href="https://github.com/mehulnirala/desk-ui.git"&gt;https://github.com/mehulnirala/desk-ui.git&lt;/a&gt;&lt;br&gt;
Backend: &lt;a href="https://github.com/mehulnirala/desk-backend.git"&gt;https://github.com/mehulnirala/desk-backend.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the post, A special thanks to Symbl.ai and HackerEarth and Congratulations ð to all the teams.&lt;/p&gt;

</description>
      <category>symblai</category>
      <category>conversationintelligence</category>
      <category>hackerearth</category>
      <category>buildwithsymbl</category>
    </item>
    <item>
      <title>â¡ Must read Tech news/tools of the day - Digest #17</title>
      <author>Hackertab ð¥ï¸</author>
      <pubDate>Sat, 18 Sep 2021 12:00:12 +0000</pubDate>
      <link>https://dev.to/hackertab/must-read-tech-news-tools-of-the-day-digest-17-2eod</link>
      <guid>https://dev.to/hackertab/must-read-tech-news-tools-of-the-day-digest-17-2eod</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" alt="articleImg"&gt;&lt;/a&gt;Each day we handpick the best web content across different websites eg: Hackernews, Github, Reddit... to help you stay updated with the hottest trends!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#level-up-your-skills-with-these-github-repositories"&gt;
  &lt;/a&gt;
  Level up your ð skills with these Github repositories:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" alt="Github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calendso"&gt;
  &lt;/a&gt;
  ð &lt;a href="https://github.com/calendso/calendso"&gt;calendso&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;ð¤ calendso | â­ +7,028 stars Scheduling infrastructure for absolutely everyone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evobot"&gt;
  &lt;/a&gt;
  ð &lt;a href="https://github.com/eritislami/evobot"&gt;evobot&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;ð¤ eritislami | â­ +939 stars ð¤ EvoBot is a Discord Music Bot built with discord.js &amp;amp; uses Command Handler from discordjs.guide&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freeprogrammingbooks"&gt;
  &lt;/a&gt;
  ð &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;free-programming-books&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;ð¤ EbookFoundation | â­ +205,218 stars ð Freely available programming books&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hottest-devto-posts-"&gt;
  &lt;/a&gt;
  ð ð¥ Hottest Devto posts :
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#hypertext-transfer"&gt;
  &lt;/a&gt;
  ð [Hyper-Text Transfer
&lt;/h3&gt;

&lt;p&gt;Protocol - HTTP 101](&lt;a href="https://dev.to/uzairali10/hyper-text-transfer-protocol-http-101-4jp4"&gt;https://dev.to/uzairali10/hyper-text-transfer-protocol-http-101-4jp4&lt;/a&gt;) ð¤ Uzair | ð +30 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrHniaMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.hackertab.dev/null" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrHniaMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.hackertab.dev/null" alt=""&gt;&lt;/a&gt;What On Earth is HTTP ð¤ HTTP is a request response protocol that define some sets of rules...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unlimited-javascript-or-where-can-i-use-javascript"&gt;
  &lt;/a&gt;
  ð &lt;a href="https://dev.to/patik123/unlimited-javascript-or-where-can-i-use-javascript-3l4c"&gt;Unlimited JavaScript (or where can I use JavaScript)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;ð¤ Patrick | ð +32 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4L3U25NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--t4EqpzAk--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wqtdlw41ezd85qa2csh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4L3U25NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--t4EqpzAk--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wqtdlw41ezd85qa2csh.png" alt=""&gt;&lt;/a&gt;JavaScript is a 25-year-old programming language (it appeared in late 1995) as a language for...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-best-css-border-effect-examples"&gt;
  &lt;/a&gt;
  ð &lt;a href="https://dev.to/stackfindover/25-best-css-border-effect-examples-2i4i"&gt;25+ Best CSS Border Effect Examples&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;ð¤ Stackfindover | ð +25 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ROBofMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Q69vqpCH--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srblghz3nviz98mc9da5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ROBofMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Q69vqpCH--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srblghz3nviz98mc9da5.jpg" alt=""&gt;&lt;/a&gt;Hello Friends, in this article I have listed 25+ Awesome CSS Border Animation Examples. Check out...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keep-an-eye-on-these-cool-products-too"&gt;
  &lt;/a&gt;
  ð Keep an eye on these cool products too:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#kbar"&gt;
  &lt;/a&gt;
  ð§ &lt;a href="https://www.producthunt.com/posts/kbar?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;kbar&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;ðº +119 | ð¬ +13 Add a beautiful &amp;amp; extensible cmd+k interface to your site &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_GwnBX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/866056b4-e9a7-4d67-9102-943b9873f785.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_GwnBX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/866056b4-e9a7-4d67-9102-943b9873f785.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="kbar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#messer"&gt;
  &lt;/a&gt;
  ð§ &lt;a href="https://www.producthunt.com/posts/messer?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;Messer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;ðº +30 | ð¬ +12 Native drag n' drop image resizer for social media and web &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DaFEwSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/0ae6a357-6abc-4e5a-a253-676c03716a4f.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DaFEwSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/0ae6a357-6abc-4e5a-a253-676c03716a4f.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="Messer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shortcut-keeper"&gt;
  &lt;/a&gt;
  ð§ &lt;a href="https://www.producthunt.com/posts/shortcut-keeper?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;Shortcut Keeper&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;ðº +18 | ð¬ +6 Save the keyboard shortcuts you want to remember &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lo6qfXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/159911af-ec5e-4d15-b462-f65cf9287ab7.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lo6qfXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/159911af-ec5e-4d15-b462-f65cf9287ab7.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="Shortcut Keeper"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;ð Wrap Up! That was all for this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-hackertab-on-twitter-for-more-tips-hackertabdev"&gt;
  &lt;/a&gt;
  Follow Hackertab on Twitter for more tips: &lt;a href="https://twitter.com/hackertabdev"&gt;@hackertabdev&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" alt="Hackertab"&gt;&lt;/a&gt;&lt;a href="https://hackertab.dev"&gt;Hackertab&lt;/a&gt; turns your New Tab page into a geeky one that keeps you as a developer updated with the best tools, news, jobs and events.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>hackertab</category>
    </item>
    <item>
      <title>Cloud native - I Beginner guide
</title>
      <author>Ornelio-Chauque</author>
      <pubDate>Sat, 18 Sep 2021 11:58:17 +0000</pubDate>
      <link>https://dev.to/orneliochauque/cloud-native-i-beginner-guide-1bgl</link>
      <guid>https://dev.to/orneliochauque/cloud-native-i-beginner-guide-1bgl</guid>
      <description>&lt;p&gt;If you are the type of person who likes to be updated on the current technology industry and watch video conferences about software development and follow IT gurus on social media like twitter you certainly have heard about cloud native application, cloud native architecture and cloud native infrastructure.&lt;/p&gt;

&lt;p&gt;Nowadays there is a lot of data and information about cloud native ones that are more clear and understandable than others, with this post,  I want to contribute with some useful information (I hope so) about the subject here in discussion. &lt;/p&gt;

&lt;p&gt;Before all other aspects, like  what cloud native are and how to implement it, we must answer what I think is  the genesis, root or basic question: the &lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is crucial and  important to understand the motivation behind the implementation and development of cloud native applications. Although there might exist many other motivations and reasons for implementation and development, &lt;strong&gt;the need to develop applications that take advantage and inherit  the cloud computing feature and capabilities&lt;/strong&gt; was the key factor. &lt;/p&gt;

&lt;p&gt;Those features and capabilities are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Fault tolerance &lt;/li&gt;
&lt;li&gt;Portability &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other features and capabilities that cloud provides to us but the one listed above might be the ones which were the key.&lt;/p&gt;

&lt;p&gt;The cloud gives us infrastructure and resources that allow good scalability, availability, security, portability, fault tolerance, etc. Why not create an architecture and infrastructure that will allow us to take full advantage of all those features and capabilities? So, simply saying, the main reason behind the implementation and adoption of cloud native applications was to create applications with an architecture that takes advantage and inherits those cloud features and capabilities. &lt;/p&gt;

&lt;p&gt;After talking about the why? is important to understand  what cloud native applications are. &lt;/p&gt;

&lt;p&gt;Before we dive deep into cloud native itself, let's have a brief understanding of what native applications are. &lt;/p&gt;

&lt;p&gt;When we talk about native applications we look to applications that are designed to a specific environment or infrastructure. The native applications are the ones that capitalize and take the advantage of the component and resources of the underline environment or infrastructure. This happens when we talk about developing native mobile applications with java, kotlin or developing desktop applications for example with C++ or C. As those tools are designed for those environments, they take full advantage of the existence resources like processing hardware, network and storage. &lt;/p&gt;

&lt;p&gt;On other hand, non native applications mostly known as hybrid applications are those developed to run in more than one specific environment or infrastructure and they are developed with tools and technologies that are not designed with the goal to run on some specific environment or infrastructure. Most of the time, hybrid applications donât take full advantage of the available resource and component and suffer with performance issues because of the need of some middleware component that stands in between the application itself and the environment or infrastructure and this indirection has a cost (performance). &lt;/p&gt;

&lt;p&gt;As we said before, we can create desktop and mobile applications that are not desktop or mobile native, so the same happens on cloud, meaning, we can develop cloud applications that are not cloud native applications.&lt;/p&gt;

&lt;p&gt;There is two main aspect  to note in the explanation above about  native applications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The main aspect is, to be considered native application, the application must be developed with tools and technologies designed to that environment&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The application must take the advantage of the resources and components of that specific environment and infrastructure&lt;/strong&gt;. This second aspect is deeply dependent on the first aspect.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With all that said, is far to conclude that:&lt;/p&gt;

&lt;p&gt;Cloud native applications are those applications designed to run specifically in cloud native infrastructure, developed using tools and technologies that are designed specifically  to develop those types of  applications and must take full advantage of cloud resources and infrastructure features.&lt;/p&gt;

&lt;p&gt;Now we know Why and what cloud native applications are, it is time to understand and to know How they can be implemented.&lt;/p&gt;

&lt;p&gt;For Cloud native applications it is important to understand that it is not only about how we develop the applications, it is about how we deploy  it too.&lt;br&gt;
When we talk about how we develop it, we are talking about cloud native architecture, which specifies  the way the applications are designed and by how we deploy it, we are talking about Cloud native infrastructure, which specifies how the applications should be deployed, a how the components talk and communicate with each other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloud-native-architecture"&gt;
  &lt;/a&gt;
  Cloud native architecture
&lt;/h3&gt;

&lt;p&gt;Before cloud native architecture and all aspects related to cloud native applications, we used to develop cloud applications using âlegacy architectureâ like monolithic. In monolithic when a component on the application crashes, the entire application crashes. Another aspect that monolithic applications donât capitalize very well is the scalability features. Suppose we have monolithic application with many modules, its possible to happen that some module have many request than others and for performance reason we take the action to scale, in monolithic we will have  scale the entire application instead of only the modules really need to scale the one that create need for that scale action.  With those and other reasons,  the need  of creation and implementation of a  new way and architecture to develop cloud applications  had a relevance and importance.  &lt;/p&gt;

&lt;p&gt;To develop cloud native applications that take advantage of the cloud feature and capabilities, we must take another approach and take a new way of thinking and developing cloud applications, like the former  &lt;strong&gt;service oriented applications (SOA)&lt;/strong&gt; and the new one, more robust and more granular implementation of SOA known as &lt;strong&gt;Microservice architecture&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;In service oriented architecture, the applications are segmented in small components called service, which work together to accomplish a specific goal, the communication between them are made by API or message bus solutions implementations. This architecture allows isolated scaling, isolated failure which makes them better than monolithics. &lt;/p&gt;

&lt;p&gt;Cloud native applications are developed using microservice architecture which is a more granular implementation of SOA and another important aspect is that in microservice architecture each micro service is self contained, meaning that these services hold all needed resources to work in isolation which may include on database. By self contained we are not saying that all the application runs in a single container, we are saying that the micro service holds all needed resources to their task without sharing that with other microservice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloud-native-infrastructure"&gt;
  &lt;/a&gt;
  Cloud native infrastructure
&lt;/h3&gt;

&lt;p&gt;As we say before, to take advantage and inherit the cloud native features and capabilities is not only about defining a new way of developing and architecting cloud applications, it's about creating and implementing an environment and infrastructure to deploy and run cloud native applications. We will not have much gain in developing cloud applications and run a legacy infrastructure, that is way cloud native infrastructure is important in cloud native world.&lt;/p&gt;

&lt;p&gt;Nowaday, cloud native infrastructure provides lots of resources that allow  pack and distribute cloud native applications(containerization like Docker), deployment and management/orchestration (Kubernete), communication (Consul), monitoring (prometheus), logging (fluentd)etc. For each type of resource you will find more than one option. Choose which use is up to you.&lt;br&gt;
The Cloud Native Computing Foundation is the entity that manages all those cloud native infrastructure components. I really advise you to take a look at their website to have more information about. &lt;/p&gt;

&lt;p&gt;To finish this article, it is important to note that although the best way to develop cloud native applications is by implementing microservices architecture, it is still possible to use legacy architecture like monolithic to develop cloud application and deploy then in a cloud native infrastructure, but there's a price to pay, for example the scalability and failure or crashes issues that we mention early.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://searchcloudcomputing.techtarget.com/definition/cloud-native-application"&gt;https://searchcloudcomputing.techtarget.com/definition/cloud-native-application&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.redhat.com/en/topics/cloud-native-apps"&gt;https://www.redhat.com/en/topics/cloud-native-apps&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.cncf.io/"&gt;https://www.cncf.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>native</category>
      <category>microservices</category>
      <category>applications</category>
    </item>
    <item>
      <title>Mindfully Commit with a Descriptive Message</title>
      <author>Theodorus Clarence</author>
      <pubDate>Sat, 18 Sep 2021 11:41:23 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/mindfully-commit-with-a-descriptive-message-4e8k</link>
      <guid>https://dev.to/theodorusclarence/mindfully-commit-with-a-descriptive-message-4e8k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Do you do this?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_YxcZZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lubk2wn3jzb5tvm4nmbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_YxcZZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lubk2wn3jzb5tvm4nmbn.png" alt="0-bad-example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stop. Even if you are working alone and nobody reads your commit, you're eventually going to forget your 3-month-old project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Was the X feature added?", "Did I fixed the hamburger menu bug?".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can't really know what feature you are adding, or what bug you are fixing not until you jump into the code to check what changed. Imagine you work as a team, and you have to review 10 commits that are not descriptive, so you need to read the code and the logic on that PR.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-descriptive-commit-message"&gt;
  &lt;/a&gt;
  Step 1: Descriptive Commit Message
&lt;/h2&gt;

&lt;p&gt;The guideline of a descriptive commit message is you should at least know what were you working with just by reading the commit message. The convention is usually using imperative sentences, and present tense.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change aspect ratio for company profile video&lt;/li&gt;
&lt;li&gt;add hamburger menu for mobile&lt;/li&gt;
&lt;li&gt;remove unused imports&lt;/li&gt;
&lt;li&gt;fix hamburger menu not opening on mobile&lt;/li&gt;
&lt;li&gt;add test for helper functions&lt;/li&gt;
&lt;li&gt;refactor remove todo logic&lt;/li&gt;
&lt;li&gt;add documentation on hamburger menu&lt;/li&gt;
&lt;li&gt;install react-icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even without looking at the code changes, you can generally know what is going on.&lt;/p&gt;

&lt;p&gt;By spending 10 seconds to decide what descriptive commit message that we should use, we can save up minutes of looking up code changes in the future.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-2-grouping"&gt;
  &lt;/a&gt;
  Step 2: Grouping
&lt;/h2&gt;

&lt;p&gt;We've learned that using a descriptive commit message helps a lot during code review or revisiting old projects.&lt;/p&gt;

&lt;p&gt;At the first step, we can infer what is going on by looking at the commit message. But, we have to read the full sentence to know if it was a feature that is added or removed, a bug that was fixed, or a package that was installed. Isn't it nicer if we can recognize the function of the commit just by the first word? Also, there are some people that like to use emojis to differentiate. You can if you like, but I'm trying to minimize mental mapping.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a lot of conventions out there, and I usually use Conventional Commit. I will spare you the detailsâshould we use capital or not, should we use past tense or present tense, should we add a full stopâon the later step. But this grouping step roughly follows Conventional Commit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's say that we have these categoriesâonly a small example, you can add more categories if you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;feat&lt;/strong&gt;, for addition or removal of a feature.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fix&lt;/strong&gt;, for squashing bugs&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;chore&lt;/strong&gt;, for installing npm packages&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;test&lt;/strong&gt;, for adding test suites&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;refactor&lt;/strong&gt;, for refactoring code flow but not changing the feature itself&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;style&lt;/strong&gt;, for styling code structure like spacing, reorder or remove unused imports, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our last commit can improve into this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;feat&lt;/strong&gt; change aspect ratio for company profile video&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;feat&lt;/strong&gt; add hamburger menu for mobile&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;style&lt;/strong&gt; remove unused imports&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fix&lt;/strong&gt; hamburger menu not opening on mobile&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;test&lt;/strong&gt; add test for helper functions&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;refactor&lt;/strong&gt; remove todo logic&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;docs&lt;/strong&gt; add documentation on hamburger menu&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;chore&lt;/strong&gt; install react-icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this step, we can be more effective when differentiating commit. We can skim commits and find what category we are looking for.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-3-generating-changelog"&gt;
  &lt;/a&gt;
  Step 3: Generating Changelog
&lt;/h2&gt;

&lt;p&gt;Let's say you are creating an NPM package, and you need to generate a Changelog for your users so they are aware of the changes. For instance, you can look up your git log, and copy all commit message that is in &lt;strong&gt;feat&lt;/strong&gt; and &lt;strong&gt;fix&lt;/strong&gt; category. This 2 category is the most used when creating a changelog because your user doesn't really need to know that you remove unused import, or adding a semicolon to code because you forgot.&lt;/p&gt;

&lt;p&gt;ps: when doing a normal project, you can add more categories to the changelog if you want.&lt;/p&gt;

&lt;p&gt;Handpicking those is grunt work, and nobody wants to do it if you have a bunch of commits. That is why we can use &lt;code&gt;standard-version&lt;/code&gt; to generate the report.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xtiRUMs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx51le6e0gbwd81p1t6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xtiRUMs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx51le6e0gbwd81p1t6k.png" alt="1-standard-version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can easily run a command, and it will automatically bump the version, generate changelog, commit, and add a tag to our project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzEWFCTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrctkltfxhnd63lhttps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzEWFCTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrctkltfxhnd63lhttps.png" alt="2-changelog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the report that is generated only using our commit, we can also specify what categories we want to include.&lt;/p&gt;

&lt;p&gt;But, there is a catch when we are using an auto-generate package like &lt;code&gt;standard-version&lt;/code&gt;. We need to follow certain rules so the &lt;code&gt;standard-version&lt;/code&gt; program is not confused. Let's proceed to step 4.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-4-conventional-commits"&gt;
  &lt;/a&gt;
  Step 4: Conventional Commits
&lt;/h2&gt;

&lt;p&gt;Conventional Commits is a specification for adding human and machine-readable meaning to commit messages.&lt;/p&gt;

&lt;p&gt;Do read up the guide on &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;their website.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This set of rules will help us create a good commit message that we can easily read, and can be auto-generated into a changelog. I usually put up this markdown in the readme file, so others can follow it too. Feel free to read up my summary and copy it to your projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Still, read the &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;guide&lt;/a&gt; on their website, it is more comprehensive there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#commit-message-convention-readme"&gt;
  &lt;/a&gt;
  Commit Message Convention Readme
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Commit Message Convention&lt;/span&gt;

This website follows &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Conventional Commits&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://www.conventionalcommits.org/en/v1.0.0/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

Commit message will be checked using &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;husky and commit lint&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://theodorusclarence.com/library/husky-commitlint-prettier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;, you can't commit if not using the proper convention below.

&lt;span class="gu"&gt;### Format&lt;/span&gt;

@@@text
&lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;[optional scope]: &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;

[optional body]

[optional footer(s)]
@@@

&lt;span class="err"&gt;*&lt;/span&gt;change the @ to &lt;span class="se"&gt;\`&lt;/span&gt;, devto won't allow nested backticks for some reason

Example: &lt;span class="sb"&gt;`feat(pre-event): add speakers section`&lt;/span&gt;

&lt;span class="gu"&gt;### 1. Type&lt;/span&gt;

Available types are:
&lt;span class="p"&gt;
-&lt;/span&gt; feat â Changes about addition or removal of a feature. Ex: &lt;span class="sb"&gt;`feat: add table on landing page`&lt;/span&gt;, &lt;span class="sb"&gt;`feat: remove table from landing page`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; fix â Bug fixing, followed by the issue (not what you do to fix that bug). Ex: &lt;span class="sb"&gt;`fix: illustration overflows in mobile view`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; chore â Installing new dependencies, or bumping deps
&lt;span class="p"&gt;-&lt;/span&gt; docs â Update documentation (README.md)
&lt;span class="p"&gt;-&lt;/span&gt; style â Updating style, and not changing any logic in the code (reorder imports, fix whitespace, remove comments)
&lt;span class="p"&gt;-&lt;/span&gt; refactor â Changes in code, same output, but different approach
&lt;span class="p"&gt;-&lt;/span&gt; ci â Update github workflows, husky
&lt;span class="p"&gt;-&lt;/span&gt; test â Update testing suite, cypress files
&lt;span class="p"&gt;-&lt;/span&gt; revert â when reverting commits
&lt;span class="p"&gt;-&lt;/span&gt; perf â Fixing something regarding performance (deriving state, using memo, callback)
&lt;span class="p"&gt;-&lt;/span&gt; vercel â Blank commit to trigger vercel deployment. Ex: &lt;span class="sb"&gt;`vercel: trigger deployment`&lt;/span&gt;

For breaking change, add (!) after the types. Ex: &lt;span class="sb"&gt;`feat!: drop support for internet explorer`&lt;/span&gt;

&lt;span class="gu"&gt;### 2. Optional Scope&lt;/span&gt;

Labels per page Ex: &lt;span class="sb"&gt;`feat(pre-event): add date label`&lt;/span&gt;

&lt;span class="se"&gt;\*&lt;/span&gt;If there is no scope needed, you don't need to write it

&lt;span class="gu"&gt;### 3. Description&lt;/span&gt;

Description must fully explain what is being done.

&lt;span class="gu"&gt;### Important Rules&lt;/span&gt;

&lt;span class="gs"&gt;**If there are multiple changes, then commit one by one**&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; After colon, there is a single space. Ex: &lt;span class="sb"&gt;`feat: add something`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; When using &lt;span class="sb"&gt;`fix`&lt;/span&gt; type, state the issue. Ex: &lt;span class="sb"&gt;`fix: file size limiter not working`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; Use imperative, and present tense: "change" not "changed" or "changes"
&lt;span class="p"&gt;-&lt;/span&gt; Don't use capitals in front of the sentence
&lt;span class="p"&gt;-&lt;/span&gt; Don't add full stop (.) at the end of the sentence
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using that set of rules will guarantee a working changelog. But still, whether the commit message is going to be meaningful, it is on you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-add-commitlint"&gt;
  &lt;/a&gt;
  Step 5: Add Commitlint
&lt;/h2&gt;

&lt;p&gt;If you are working with some new developers in your team, they might not fully know this convention. While you can give this blog to them ð, it is a great practice to add a linter for your project, so no one can mess up the commit message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw6r2YGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqsm84gkq1e2vc5i6goj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw6r2YGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqsm84gkq1e2vc5i6goj.png" alt="3-commitlint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will enforce the use of conventional commit for your commit message.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href="https://theodorusclarence.com/library/husky-commitlint-prettier#2-add-commitlint"&gt;post&lt;/a&gt; to add Commitlint using Husky&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We learn that we should use a more descriptive commit message, add some category to it, use Conventional Commits rules as a guide so we can generate changelog, and add Commitlint so we can't mess it up.&lt;/p&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
