<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Amazing Course Card
Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Wed, 09 Jun 2021 14:48:17 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-course-card-using-html-css-28g2</link>
      <guid>https://dev.to/nikhil27b/amazing-course-card-using-html-css-28g2</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;How are you today I created a Amazing Course Card with HTML &amp;amp; JS. This is simple course card that for beginners level I use Font awesome for icons and Poppins as a font If you find this useful in a post like and save this post also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/rNyrbdZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React &amp; Tailwind - Open-source Starters and UI Kits</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 09 Jun 2021 14:41:01 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-tailwind-open-source-starters-and-ui-kits-8db</link>
      <guid>https://dev.to/sm0ke/react-tailwind-open-source-starters-and-ui-kits-8db</guid>
      <description>&lt;p&gt;Hello coders!&lt;/p&gt;

&lt;p&gt;This article presents a curated list with open-source &lt;strong&gt;React&lt;/strong&gt; projects styled with &lt;strong&gt;Tailwind&lt;/strong&gt;, a popular and trendy CSS Framework. All products mentioned in this article can be downloaded from Github (without a registration lock) and used without limitations in commercial products. For newcomers, React is a JS library created and actively supported by Facebook.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/"&gt;Admin Dashboards&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;🔥 &lt;a href="https://demos.creative-tim.com/material-tailwind-dashboard-react"&gt;Material Tailwind React&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://windmillui.com/dashboard-react"&gt;Windmill React Tailwind&lt;/a&gt; - Product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/notus-react"&gt;Notus React Tailwind&lt;/a&gt; - Product Page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/material-tailwind-kit-react"&gt;Material Tailwind Kit React&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;🔥 More open-source &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; 🚀🚀 | Dev.to&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#material-tailwind-react"&gt;
  &lt;/a&gt;
  🔥 Material Tailwind React
&lt;/h2&gt;

&lt;p&gt;Material Tailwind Dashboard React is a free Admin Template based on two popular front-end technologies: Tailwind CSS &amp;amp; React. It was built to simplify the developer's work and is comes with a fresh design inspired by Google's Material Design. All its components are built to fit perfectly with each other, while aligning to the material concepts.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/material-dashboard-react"&gt;Material Tailwind React&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/material-tailwind-dashboard-react"&gt;Material Tailwind React&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KktY9GTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wudh5ylou3umjub6oami.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KktY9GTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wudh5ylou3umjub6oami.gif" alt="Material Tailwind - Open-source React Dashboard crafted by Creative Tim."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#windmill-react-dashboard"&gt;
  &lt;/a&gt;
  ✨ Windmill React Dashboard
&lt;/h2&gt;

&lt;p&gt;Windmill Dashboard comes with a blazing fast UI styled with Tailwind, PWA support, and integrations for Charts.js and Heroicons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility-first&lt;/strong&gt; - the product was developed listening to real screen readers, focus traps and keyboard navigation are available everywhere.&lt;/p&gt;

&lt;p&gt;🦮 Throughly accessible (developed using screen readers)&lt;br&gt;
🌗 Dark theme enabled (load even different images based on theme)&lt;br&gt;
🧩 Multiple (custom) components&lt;br&gt;
⚡ Code splitting&lt;br&gt;
UI: Tailwind CSS, Windmill React UI (components library)&lt;br&gt;
PWA-ready: delivering offline-first and app-like experience&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Q-VOJb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjohkcdady571fftq8vf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Q-VOJb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjohkcdady571fftq8vf.png" alt="React Tailwind - Windmill Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#notus-react-tailwind"&gt;
  &lt;/a&gt;
  ✨ Notus React Tailwind
&lt;/h2&gt;

&lt;p&gt;Notus React is built with over frontend 100 individual components, giving you the freedom to choose and combine. All components can take variations in colors that you can easily modify using Tailwind CSS classes. If you like bright and fresh colors, you will love this Free Tailwind CSS Template! It features a huge number of components that can help you create amazing websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/notus-react"&gt;Notus React Tailwind&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/notus-react/"&gt;Notus React Tailwind&lt;/a&gt; - LIVE demo
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NazL8eE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwnrmodpotw5xtdwflp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NazL8eE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwnrmodpotw5xtdwflp3.png" alt="React Tailwind - Notus Design."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#material-tailwind-kit-react"&gt;
  &lt;/a&gt;
  ✨ Material Tailwind Kit React
&lt;/h2&gt;

&lt;p&gt;Material Tailwind Kit React is a free and open-source UI Kit based on two popular front-end technologies: Tailwind CSS &amp;amp; React. It was built to simplify the developer's work in the quest of creating intuitive interfaces.&lt;/p&gt;

&lt;p&gt;Material Tailwind Kit React features over 120 individual components, giving you the freedom of choosing and combining. This means that there are thousands of possible combinations. All components can also take variations in color, which you can easily modify using react.js props.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/material-tailwind-kit-react"&gt;Material Tailwind Kit React&lt;/a&gt; - Product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/material-tailwind-kit-react"&gt;Material Tailwind Kit React&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--haF4X9en--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64iuxj96wvns7yovdn5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--haF4X9en--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64iuxj96wvns7yovdn5y.png" alt="Material Tailwind - Open-source React UI Kit."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for Reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://themesberg.com/blog/tutorial/react-dashboard"&gt;React Dashboard Tutorial&lt;/a&gt; - a comprehensive introduction&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/next-js-templates-a-curated-list-56fo"&gt;Next JS Templates&lt;/a&gt; - a curated list | Dev.to &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>tailwindcss</category>
      <category>opensource</category>
    </item>
    <item>
      <title>CSS nth- Selectors Variable</title>
      <author>David Dal Busco</author>
      <pubDate>Wed, 09 Jun 2021 14:33:28 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/css-nth-selectors-variable-86f</link>
      <guid>https://dev.to/daviddalbusco/css-nth-selectors-variable-86f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QAeNe2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AbCYvMc19HUEZEmZylGOoGg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QAeNe2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AbCYvMc19HUEZEmZylGOoGg.jpeg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@mariogogh?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mario Gogh&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;Using CSS variables, at least when I’m writing these lines in June 2021, is not supported in media queries or selector, e.g. &lt;code&gt;:nth-child(var(--my-variable))&lt;/code&gt; does not work.&lt;/p&gt;

&lt;p&gt;This is a bit unfortunate but, not unsolvable. In some recent development I bypassed this limitation by injecting &lt;code&gt;style&lt;/code&gt; elements in the DOM, into my Web Components, in order to animate block of codes in &lt;a href="https://deckdeckgo.com"&gt;DeckDeckGo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nast1X6dKo8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Stricto sensu the following trick is not reserve to Web Components and, probably works with any elements too. I just only used it so far with such technology 😜.&lt;/p&gt;

&lt;p&gt;I will first display the idea with the help a vanilla component and, end the article with the same approach but, implemented with a &lt;a href="https://stenciljs.com/"&gt;StencilJS&lt;/a&gt; functional component.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#goal-of-the-tutorial"&gt;
  &lt;/a&gt;
  Goal Of The Tutorial
&lt;/h3&gt;

&lt;p&gt;We are going to develop a Web Component which renders a &lt;code&gt;&amp;lt;ul/&amp;gt;&lt;/code&gt; list and, which can animate the display of its entries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BDMQoGvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AV_biZYrvRQsoYUdph7U_qQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BDMQoGvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AV_biZYrvRQsoYUdph7U_qQ.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No semantic elements are going to be added or removed from the DOM once the component is load. The animation will happen by modifying the &lt;code&gt;style&lt;/code&gt; , more precisely by applying a different style on the selected &lt;code&gt;li:nth-child(n)&lt;/code&gt; .&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#vanilla-js"&gt;
  &lt;/a&gt;
  Vanilla JS
&lt;/h3&gt;

&lt;p&gt;To display the idea without anything else than the web, we create an &lt;code&gt;index.html&lt;/code&gt; page. It consumes the Vanilla component we are about to develop. We also add a &lt;code&gt;button&lt;/code&gt; to triggers the animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./my-component.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;my-component&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Next&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                 &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                 &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
              &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a separate file, called &lt;code&gt;my-component.js&lt;/code&gt; , we create the Web Component. At this point without any animation.  We declare it &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;open&lt;/a&gt; to be able to access the shadow DOM (through &lt;code&gt;shadowRoot&lt;/code&gt; ), we create a style to hide all &lt;code&gt;li&lt;/code&gt; and define the &lt;code&gt;transition&lt;/code&gt; . Finally, we add the &lt;code&gt;ul&lt;/code&gt; list and its children &lt;code&gt;li&lt;/code&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initStyle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initElement&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hydrated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// TODO in next chapter&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;initStyle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
          :host {
            display: block;
          }

          li {
            opacity: 0;
            transition: opacity 0.5s ease-out;
          }
        `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;initElement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;li1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;li1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;li2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;li2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cowboy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;li3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;li3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Shelving&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;li1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;li2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;li3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, if we open our example in a browser (&lt;code&gt;npx serve .&lt;/code&gt;), we should find a component, with a hidden content, and a button which has no effect yet. Not much to see, but that’s a start 😁.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8GEtLdYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AODDEgNnoHmsbGwgIPuT5zA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8GEtLdYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AODDEgNnoHmsbGwgIPuT5zA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To develop the animation, we have to keep track of the displayed &lt;code&gt;li&lt;/code&gt; , that’s why we add a state (&lt;code&gt;index&lt;/code&gt;) to the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to it, we can implement the &lt;code&gt;next()&lt;/code&gt; method, the one called from the button we added earlier in the HTML page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not my most beautiful code ever. Let’s agree it has only a demo purpose 😅.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
      li:nth-child(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) {
        opacity: 1;
      }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style#animation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;animation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What’s happening there?&lt;/p&gt;

&lt;p&gt;It first set the next &lt;code&gt;index&lt;/code&gt; , &lt;code&gt;li&lt;/code&gt;, to be displayed and, create a CSS &lt;code&gt;selector&lt;/code&gt; to apply the &lt;code&gt;opacity&lt;/code&gt; styling. In short, this replaces the CSS variable we cannot use.&lt;/p&gt;

&lt;p&gt;Afterwards, we check if the shadowed content of our Web Component already contains a dedicated style to apply the animation. If it does, we update the style with the new value — selector and, if not, we create a new style tag.&lt;/p&gt;

&lt;p&gt;Each time this method is call, a new &lt;code&gt;style&lt;/code&gt; is applied and, therefore another &lt;code&gt;li:nth-child(n)&lt;/code&gt; is displayed.&lt;/p&gt;

&lt;p&gt;If we open again our browser to give it a try, items should be animated among click on our button &lt;code&gt;next&lt;/code&gt; and, if we go further and observe the component in the inspector, we should notice that the shadowed &lt;code&gt;style&lt;/code&gt; element change on each method call.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjlQXrFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AG76KWZf9do9aBnCo2rtLdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjlQXrFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AG76KWZf9do9aBnCo2rtLdw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#stenciljs"&gt;
  &lt;/a&gt;
  StencilJS
&lt;/h3&gt;

&lt;p&gt;Let’s double the fun with the same example but, using a &lt;a href="https://stenciljs.com/"&gt;StencilJS&lt;/a&gt; functional component 🤙.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can start a new project with the command line &lt;code&gt;npm init stencil&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because we are developing the exact same component, we can copy the previous HTML content (declaring the component and, adding a &lt;code&gt;button&lt;/code&gt; ) in the &lt;code&gt;./src/index.html&lt;/code&gt; of the project with an only slight small difference, the method &lt;code&gt;next()&lt;/code&gt; has to be declared and, called with async — await. This is a requirement — best practice of Stencil, public method of components have to be &lt;code&gt;async&lt;/code&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"ltr"&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=5.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Stencil Component Starter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/build/demo-stencil.esm.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nomodule&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/build/demo-stencil.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Same code as in previous chapter --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;my-component&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Next&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;
                             &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Same code as in previous chapter --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also repeat previous steps and, create first a component which does nothing else than rendering a &lt;code&gt;ul&lt;/code&gt; list and, hidden items &lt;code&gt;li&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stencil/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`:host {
      display: block;
    }

    li {
      opacity: 0;
      transition: opacity 0.5s ease-out;
    }
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Spine&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Cowboy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Shelving&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By testing the component (&lt;code&gt;npm run start&lt;/code&gt;) we should get the same result too 😉.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ICxXNkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Aqw2VVn0rZlENtjlYY9Yp1Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ICxXNkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Aqw2VVn0rZlENtjlYY9Yp1Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To keep track of the &lt;code&gt;li&lt;/code&gt; to highlight, we need a state and, the function &lt;code&gt;state&lt;/code&gt; . We add both to our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In comparison to the Vanilla component, because we are using a bundler which simplify the development, we do not have to take care of re-rendering by our selves. Each modification of the &lt;code&gt;state&lt;/code&gt; will trigger a re-render which, ultimately, update the nodes which have to be updated (and only those who have to be updated).&lt;/p&gt;

&lt;p&gt;Still, we do have to implement the CSS selector variable. For such purpose, as briefly mentioned, we are going to use a functional component. It might work with a class component but, I feel like a functional one is well suited for the job.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Animate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FunctionalComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
    li:nth-child(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) {
      opacity: 1;
    }
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component renders a &lt;code&gt;style&lt;/code&gt; element for the value we path as parameter, our &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we have to use the functional component and, bind it to our state value. Doing so, it will be re-rendered each time its value changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Animate&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Animate&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Spine&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Cowboy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Shelving&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Host&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s already it, we were able to replicate the same component 🥳.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bpXsPQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A9DoGPKFedgsKnVMQp5wWIg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bpXsPQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A9DoGPKFedgsKnVMQp5wWIg.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above component in a single block of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FunctionalComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stencil/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Animate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FunctionalComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
    li:nth-child(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) {
      opacity: 1;
    }
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`:host {
      display: block;
    }

    li {
      opacity: 0;
      transition: opacity 0.5s ease-out;
    }
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Animate&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Animate&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Spine&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Cowboy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Shelving&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Host&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;I am honestly not sure that this article will ever find its audience, nor do I think it may be useful to someone some day but, well, I love to use that trick 😜. In addition, it was fun to develop for demo purpose the same piece of code with Vanilla JS or Stencil.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; or my &lt;a href="https://daviddalbusco.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next presentations!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>webcomponents</category>
      <category>css</category>
    </item>
    <item>
      <title>Buckle Up For a Wild Decade in Cloud Computing</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 09 Jun 2021 14:22:19 +0000</pubDate>
      <link>https://dev.to/ben/buckle-up-for-a-wild-decade-in-cloud-computing-1cff</link>
      <guid>https://dev.to/ben/buckle-up-for-a-wild-decade-in-cloud-computing-1cff</guid>
      <description>&lt;p&gt;I’m sure you were affected by &lt;a href="https://www.npr.org/2021/06/09/1004684932/fastly-tuesday-internet-outage-down-was-caused-by-one-customer-changing-setting"&gt;the Fastly outage yesterday&lt;/a&gt;. The company responded quickly, and it wasn’t the end of the world— But it was wild!&lt;/p&gt;

&lt;p&gt;If you’ve been following closely, though, this was by far not the biggest story Fastly got tied into in the past year— Even if they were not really part of the new story by name the last time around. In the last fifteen months, Fastly’s stock has a low of about $14 and a high of about $136, as of writing this it’s sitting at around $60 (up 45% in the past month to boot!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3W8zm3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5otwqx1bvjcgi657b45h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3W8zm3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5otwqx1bvjcgi657b45h.png" alt="Fastly stock price"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What causes a company whose core offering is a configuration layer which allows for slightly more efficient distribution of commodity bytes across the web to have such a chaotic financial journey as a publicly traded company? There are a lot of reasons— A pandemic which made efficient distribution of commodity bytes turn into the way we kept in touch with our loved ones. They are also a fairly young company which has typically not operated profitably, so there is a lot of speculation on their growth potential as opposed to classical evaluation of their track record.&lt;/p&gt;

&lt;p&gt;Those are all contributing factors, but Fastly’s real hurricane came in the form of &lt;a href="https://www.nytimes.com/2020/09/21/business/trump-tiktok-deal.html"&gt;Donald Trump, TikTok and the Chinese government&lt;/a&gt;. Yes— Fastly is the kind of cloud infrastructure company which rises with the tides of its customers and TikTok became a big deal in the past couple years. Its rise in popularity also raised questions about data privacy and hostile international relationships.&lt;/p&gt;

&lt;p&gt;The TikTok fiasco seems like a million years ago. For the average consumer, it played out as a bizarre question over whether the service would continue to exist. Players like Facebook were conveniently aligned in the sentiment that the Chinese government is not to be trusted, and Trump was trying to look like the tough guy— Likely without a greater agenda.&lt;/p&gt;

&lt;p&gt;Following this story was exhausting and there is no public information about how things ultimately played out, but Fastly, the company with servers all over the world responsible for compressing and distributing TikTok’s bytes landed in a fairly untenable position. The company may have had to develop a much more sophisticated philosophy around video storage and distribution with regards to international borders— Or perhaps the chaos of the theatrical bidding war over the whole thing just forced them to change vendors. Fastly— leaders in this nascent space— were both unimportant and critically important to the whole story, depending on your perspective.&lt;/p&gt;

&lt;p&gt;The situation was as fascinating as it was chaotic. The next version of this probably won’t come in the Donald Trump variety, but it will happen. Questions around how data is stored and distributed and how that relates to national sovereignty and security are truly the kind that are unprecedented and unlikely to be addressed in a “greater good” capacity.&lt;/p&gt;

&lt;p&gt;Censorship, spying, hacking, AI— All the stuff that is juicy enough to make the top headline in the news have huge implications in the ever-more geopolitical cloud computing landscape. It now matters where servers are, where the computing happens, and who can access them— Or it doesn’t. Lobbyists for Google, Amazon and Microsoft will certainly work hard to position the debate in whichever way will best support their cloud product suite. &lt;a href="https://www.nytimes.com/2021/05/11/podcasts/the-daily/mark-zuckerberg-tim-cook-facebook-apple.html"&gt;Facebook and Apple will argue&lt;/a&gt; for their best narrative around conscientious stewardship over our privacy and livelihoods.&lt;/p&gt;

&lt;p&gt;Most people won’t follow these stories in any capacity. Some will keep up with &lt;a href="https://podcasts.voxmedia.com/show/pivot"&gt;Scott Galloway and Kara Swisher&lt;/a&gt;’s pseudo-informed takes. And some will keep a close eye on how things unfold because part of their job involves pretending to know how GDPR works. Constructing a mental model for the interplay of government, digital security and cloud infrastructure is challenging and exhausting, on some level we just have to be along for the wild ride.&lt;/p&gt;




&lt;p&gt;I centered some themes of this post in Fastly’s &lt;em&gt;stock price&lt;/em&gt; which is a good measure for chaos, but somewhat unimportant in all of this. But from that financial perspective, they are an interesting study.&lt;/p&gt;

&lt;p&gt;Fastly is on the bleeding edge and big enough to basically take down the whole Internet when a customer enters incorrect input (fun fact, I &lt;em&gt;personally&lt;/em&gt; caused a similar but much smaller outage on Heroku one time— but that is another story), but small enough that they can’t lobby or have a say in the Trump/TikTok madness. All in all I think they are in a great position to keep innovating in edge computing and benefit from this chaos in the end. I’m not a professional investor but I’m long Fastly, for what it’s worth. 😅&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>fastly</category>
      <category>aws</category>
      <category>news</category>
    </item>
    <item>
      <title>Should You Really be Coding in Dark Mode?</title>
      <author>Saji Wang</author>
      <pubDate>Wed, 09 Jun 2021 14:16:51 +0000</pubDate>
      <link>https://dev.to/codesphere/should-you-really-be-coding-in-dark-mode-4ng8</link>
      <guid>https://dev.to/codesphere/should-you-really-be-coding-in-dark-mode-4ng8</guid>
      <description>&lt;p&gt;There are few debates as contentious in the development and UX world as color schemes. Among developers, however, there seems to be a pretty significant skew towards coding in a light on dark mode (&lt;a href="https://css-tricks.com/poll-results-light-on-dark-is-preferred/"&gt;This poll&lt;/a&gt; found that ⅔ of surveyed developers prefer to use a dark mode in their code editor).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UJZ5SGo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wlt8u1cv5hd8ts4nvj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UJZ5SGo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wlt8u1cv5hd8ts4nvj5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dark mode advocates cite a number of benefits, including reduced eye strain, better sleep, and reduced power consumption. While many of the arguments for dark mode undoubtedly have merit, there is far from a scientific consensus on many of its benefits.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#a-little-bit-of%C2%A0history"&gt;
  &lt;/a&gt;
  A Little Bit of History
&lt;/h3&gt;

&lt;p&gt;While we might think of dark mode as a relatively new trend, it was actually the original color scheme that was used for computers. Most early computers used light text on dark background in order to save power. As computers became more consumer-friendly, however, developers began to use black text on white backgrounds to imitate the black ink on white paper that most people were used to.&lt;/p&gt;

&lt;p&gt;More recently, countless devices, websites, and apps have added support for dark mode for both optical and aesthetic reasons. Software developers, who spend most of their work time staring at computer screens, have been some of the most fervent advocates for dark mode.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-eye-strain-and-readability"&gt;
  &lt;/a&gt;
  1. Eye Strain and Readability
&lt;/h3&gt;

&lt;p&gt;The first argument for dark mode that's worth taking a look at the claim that dark mode is better for your eyes. While there is no doubt that using light mode in a dark room can be blinding, there also seems to be evidence that our brains are just better at reading and comprehending black text on a white screen.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href="https://www.researchgate.net/publication/264903980_Smaller_pupil_size_and_better_proofreading_performance_with_positive_than_with_negative_polarity_displays"&gt;A 2013 study&lt;/a&gt; by Psychologist Dr. Cosima Piepenbrock looked at how adults with normal vision performed at visual acuity and proofreading text across dark and light color schemes. The study found that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Pupil sizes were smaller and proofreading performance was better with positive(Dark on Light) than with negative(Light on Dark) polarity displays"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, for substantial digital tasks where you are attentively reading text(Such as coding), *&lt;em&gt;having dark text on a light background (i.e. light mode) can help you focus and comprehend better. *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What this means in practice is that your eyes and brain may have to work harder to read and write code if your IDE is in dark mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-blue-light-and-sleep"&gt;
  &lt;/a&gt;
  2. Blue Light and Sleep
&lt;/h3&gt;

&lt;p&gt;Another commonly cited claim is that using your IDE in dark mode reduces blue light consumption, and therefore can help you sleep. While dark mode definitely does reduce blue light, blue light may not be the primary culprit that actually messes up your sleep schedule.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sciencedaily.com/releases/2019/12/191216173654.htm"&gt;A 2019 study&lt;/a&gt; by the University of Manchester found that blocking blue light only slightly improved people’s sleep patterns. Instead, the real culprit is the use of warmer colors(Like reds and yellows) at night, which trick our brain into thinking it's daytime. &lt;/p&gt;

&lt;p&gt;If you want to get better sleep, &lt;strong&gt;dark mode may in fact help, but the real solution is to not use screens altogether before going to bed.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-power-consumption"&gt;
  &lt;/a&gt;
  3. Power Consumption
&lt;/h3&gt;

&lt;p&gt;Another argument for using dark mode in your IDE is that it can save you money on your power bill. If you are using an OLED display, which most modern monitors do, then this is definitely true. &lt;/p&gt;

&lt;p&gt;It is probably important to note, however, that if you are developing software that is computationally heavy, like rendering 3D graphics or training and using machine learning models, the reduced power consumption from dark mode probably won’t make any sort of noticeable dent in your power bill. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-accessibility"&gt;
  &lt;/a&gt;
  4. Accessibility
&lt;/h3&gt;

&lt;p&gt;Regardless of what you personally prefer while you code, you should always add support for both dark and light modes in the software that you build. Many people who have certain color blindness or eye conditions can find one of these themes extremely hard or even impossible to use. Giving your users flexibility is therefore very important.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In summation, the jury is still out on whether dark mode is actually better for coding. While it might save you a tiny amount of power and, if you are using it at night, marginally help your sleep schedule, these benefits don’t seem to be that substantial. In addition, &lt;strong&gt;reading dark text on a light background may help you read and write code more efficiently.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your theme therefore should come down to what is best for you, because there is not a scientific consensus that one color scheme is going to be better than the other. If you think dark mode looks sleeker and you are doing a lot of coding at night or in the dark, then go ahead and use dark mode. If you prefer the readability of dark text on a light background, then go ahead and use light mode. &lt;/p&gt;

&lt;p&gt;So what do you prefer and why? Personally, I think dark mode is more aesthetically pleasing but I definitely notice how it can be harder to read.&lt;/p&gt;

&lt;p&gt;Let us know in the comments what you think!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>darkmode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python Best Practices</title>
      <author>Arun Kumar</author>
      <pubDate>Wed, 09 Jun 2021 14:05:13 +0000</pubDate>
      <link>https://dev.to/aws-builders/python-best-practices-3mep</link>
      <guid>https://dev.to/aws-builders/python-best-practices-3mep</guid>
      <description>&lt;p&gt;&lt;strong&gt;What are the goals here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Define a set of advice for working with Python in the context of AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In what context is this guide written?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Best practices with Python…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a scripting tool — Boto3 calls to AWS APIs.&lt;/li&gt;
&lt;li&gt;As a language for Lambda in “Serverless” consumable — Lambda function code, with 3rd party dependencies.&lt;/li&gt;
&lt;li&gt;As a language for Lambda in infra pipeline — Housekeeping, CFN Custom Resources.
Compilers, Runners, Deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Required Reading&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Documentation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Python space&lt;br&gt;
[&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;https://www.python.org/dev/peps/pep-0008/&lt;/a&gt;]&lt;br&gt;
[&lt;a href="https://www.python.org/doc/sunset-python-2/"&gt;https://www.python.org/doc/sunset-python-2/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;AWS Space&lt;br&gt;
[&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"&gt;https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html&lt;/a&gt;]&lt;br&gt;
[&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html"&gt;https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html&lt;/a&gt;]&lt;br&gt;
[&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html"&gt;https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for Python Versions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 2 has been Sunsetted — the sunset date has now passed; it was January 1st, 2020.&lt;/li&gt;
&lt;li&gt;Be mindful of external dependencies between Python 2 and 3.
Conclusion: Use Python 3 unless you can’t.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for Tooling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. SublimeText3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/setting-up-sublime-text-3-for-full-stack-python-development/"&gt;https://realpython.com/setting-up-sublime-text-3-for-full-stack-python-development/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;yamllint&lt;/li&gt;
&lt;li&gt;cfn-lint&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mgaitan/sublime-rst-completion%E2%80%8A%E2%80%94%E2%80%8ASee"&gt;https://github.com/mgaitan/sublime-rst-completion — See&lt;/a&gt; “Magic Tables” — so good!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;b. VSCode&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for CLI (i.e. Bash)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use the “if main” statement&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put your script’s logic into a “main” method.&lt;/li&gt;
&lt;li&gt;Then use the “if main” convention to call that method if invoked via the CLI (i.e. python3 myscript.py)
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == '__main__':
    main(__get_args())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Best Practices for AWS APIs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. Use Boto3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has its own retry logic IIRC&lt;/li&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;b. Cater for failure scenarios&lt;/p&gt;

&lt;p&gt;Configuring Boto3&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from botocore.config import Config

__sts_client = boto3.client(
    'sts',
    config=Config(connect_timeout=15, read_timeout=15, retries=dict(max_attempts=10))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Best Practices for AWS Lambda&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can write python code that can work either as CLI or via AWS invocation&lt;/p&gt;

&lt;p&gt;a. Can put a “cli.py” alongside main.py, and invoke that way&lt;/p&gt;

&lt;p&gt;That simulates an AWS Step Function (which usually invokes the Lambda)&lt;/p&gt;

&lt;p&gt;b. Can put an “if main” statement for running via CLI&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be mindful of limits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. Account level&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;250 ENIs per Account (soft limit, talk to your AWS TAM)&lt;/li&gt;
&lt;li&gt;1,000 concurrent executions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;b. Use provisioned concurrency to avoid cold-start workarounds&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Needs Hyperplane&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for Serverless&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Packaging code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a self-contained zip for each lambda, AFTER installing pip modules
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Code:
  S3Key:
    Fn::Pipeline::FileS3Key:
      Path: consumer.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Be mindful of AWS Lambda limitations on max sizes
[&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html"&gt;https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Using common-pip-* modules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A way to share modules between lambdas in the SAME repo&lt;/li&gt;
&lt;li&gt;Can reference 3rd party modules&lt;/li&gt;
&lt;li&gt;Can reference common-pip modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dnspython
git+https://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/common-pip-log@master#egg=common-pip-log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the usage in your main.py code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set the first import path to be the "lib" subfolder of the lambda
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from os.path import dirname, abspath
from os import environ
import sys
sys.path.insert(0, "{}/lib".format(dirname(abspath(__file__))))

import log

log.info('env', dict(os.environ))  # os.environ is not serializable by itself, cast to dictionary.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Best Practices for Code and Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Zen of Python&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“Write with future developers in mind” — they have to clean up your messes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that “future developer” might very well be you, 6 months later after you’ve forgotten everything you did.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Here’s Python’s:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TODO — Go through each one and give reference examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:/Users/ak&amp;gt;python
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt; import this

The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Write your code as modules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be mindful what gets executed when your python file is imported&lt;/li&gt;
&lt;li&gt;This has a direct impact with Sphinx, which imports your code to generate documentation of it&lt;/li&gt;
&lt;li&gt;This allows you to share code, perhaps even creating a “common” module that other programs can import.&lt;/li&gt;
&lt;li&gt;Be careful — that makes you the de-facto maintainer of that module!&lt;/li&gt;
&lt;li&gt;It needs examples&lt;/li&gt;
&lt;li&gt;It needs unit tests&lt;/li&gt;
&lt;li&gt;It needs a CICD process&lt;/li&gt;
&lt;li&gt;It needs a todo list of enhancements (I use README.md to start with)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reduce the scope of your module interface&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use “non-public” (aka “private”) naming convention for internal attributes and methods NOT intended for use outside the module&lt;/li&gt;
&lt;li&gt;This should be your default position, then you slowly refactor stuff to public, as needed over time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[&lt;a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables"&gt;https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables&lt;/a&gt;]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a single leading underscore for “non-public” method names
E.g. &lt;code&gt;_get_file_contents&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dealing with strings as booleans&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You might be passed a string property that is supposed to be a boolean. The value might be boolean-ish — true/True/TRUE/1/Yes/On/etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def _s_to_bool(input):
    """Implicit default of false."""
    return input.lower() in ['1', 'true', 'yes', 'on']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;When writing comments, focus on the “why” rather than the “what”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nothing more frustrating when code doesn’t explain why something has been done — you need context!&lt;/p&gt;

&lt;p&gt;Example, see “ScanIndexForward” below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;response_iterator = dynamodb_paginator.paginate(
    TableName='core-automation-master-api-db-items',
    IndexName='parent-created_at-index',
    ExpressionAttributeNames=expression_attribute_names,
    ExpressionAttributeValues=expression_attribute_values,
    KeyConditionExpression='parent_prn = :v1',
    ProjectionExpression="#p,#n,#s,#c,#u",
    ScanIndexForward=False  # Process newer builds first (descending order) - important for logic!
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If that comment didn’t make it clear to future developers that there’s a reason for ScanIndexForward=False, a bug may be created in future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consider the strategy pattern for running code in different contexts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I.e. maybe you use a strategy with your log module so that you don’t output logs locally in JSON, but in Cloud you do, for CloudWatch&lt;/li&gt;
&lt;li&gt;Another example — in AWS Lambda context, you get credentials from AWS Secrets Manager, or Parameter Store. Locally, you rely on environment variables instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for Data Modelling and Access&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Upsert” is a good feature at the low level&lt;/li&gt;
&lt;li&gt;For Dynamodb — for scripts I generally don’t bother with ORM/etc, I just write Boto3 API calls&lt;/li&gt;
&lt;li&gt;For example use with Marshmallow + PynamoDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Python libraries to help&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marshmallow.readthedocs.io/en/stable/"&gt;https://marshmallow.readthedocs.io/en/stable/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pynamodb.readthedocs.io/en/latest/"&gt;https://pynamodb.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sqlalchemy.org/"&gt;https://www.sqlalchemy.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for Testing&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use pytest for unit-testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good feature set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auto-discovery of tests&lt;/li&gt;
&lt;li&gt;Fixtures&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;li&gt;Coverage reporting etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use Selenium Bindings for Python in CodeBuild&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://selenium-python.readthedocs.io/"&gt;https://selenium-python.readthedocs.io/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for Dependency Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use pipenv to explicitly manage and validate dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helps to keep your dependencies consistent via lockfile (i.e. repeat builds of same code on different days)&lt;/li&gt;
&lt;li&gt;Lockfile also has checksum feature to ensure the correct package is downloaded in future (i.e. can detect future compromises)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for security&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the “safe” methods for YAML/JSON/XML parsers. Example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client = sys.argv[1]

with open('../../{}-config/hosted-zones.yaml'.format(client)) as f:
    client_vars = yaml.safe_load(f.read())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Best Practices for User Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. Use Sphinx&lt;br&gt;
Use an editor plugin to help with formatting, especially tables&lt;/p&gt;

&lt;p&gt;b. Focus on a few key areas:&lt;/p&gt;

&lt;p&gt;Goals / context&lt;br&gt;
High level design&lt;br&gt;
Use cases&lt;br&gt;
Working examples for people to pull apart and re-use&lt;/p&gt;

</description>
      <category>aws</category>
      <category>python</category>
      <category>bestpractices</category>
      <category>boto3</category>
    </item>
    <item>
      <title>5 NPM Packages to Secure Your Node.js Backend in 5 Minutes </title>
      <author>Nitin Ranganath</author>
      <pubDate>Wed, 09 Jun 2021 13:59:17 +0000</pubDate>
      <link>https://dev.to/itsnitinr/5-npm-packages-to-secure-your-node-js-backend-in-5-minutes-2732</link>
      <guid>https://dev.to/itsnitinr/5-npm-packages-to-secure-your-node-js-backend-in-5-minutes-2732</guid>
      <description>&lt;p&gt;When you start to focus on the performance and security of your backend alongside the other features, you know that you're growing and maturing as a developer. It goes without saying but having some sort of security measure against common attacks is essential, even if it's just a hobby project.&lt;/p&gt;

&lt;p&gt;If you're new to security or want to quickly get started with some basic protection, these 5 NPM packages will help you get started in just a few minutes. The best part about these packages is that all you have to do is just install them and use them as middleware. It's that easy! &lt;/p&gt;

&lt;p&gt;In a hurry or just need the list of packages? Here are the 5 NPM packages that I'll be going over:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package Name&lt;/th&gt;
&lt;th&gt;Package Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;helmet&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/helmet"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xss-clean&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/xss-clean"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hpp&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/hpp"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;express-mongo-sanitize&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/express-mongo-sanitize"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;express-rate-limit&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/express-rate-limit"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#helmet"&gt;
  &lt;/a&gt;
  Helmet
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt; Sets security-related HTTP response headers to protect against some well-known web vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; Cross-site scripting attacks, cross-site injections, clickjacking, MIME sniffing and targeted attacks towards Express servers by disabling the &lt;code&gt;X-Powered-By&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install helmet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;helmet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helmet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Using helmet middleware&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helmet&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/helmetjs"&gt;
        helmetjs
      &lt;/a&gt; / &lt;a href="https://github.com/helmetjs/helmet"&gt;
        helmet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Help secure Express apps with various HTTP headers
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Helmet&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://badge.fury.io/js/helmet" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c25e172959765545eb8fd310e4c65007fc913b551ca6fcff4d0ad84b3a74d2b/68747470733a2f2f62616467652e667572792e696f2f6a732f68656c6d65742e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/helmetjs/helmet" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7ab19b285def6c03995b54d1daeb1903512d52fb61d6ad7258ac35d804b2820a/68747470733a2f2f64617669642d646d2e6f72672f68656c6d65746a732f68656c6d65742e737667" alt="npm dependency status"&gt;&lt;/a&gt;
&lt;a href="https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhelmetjs%2Fhelmet?ref=badge_shield" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ca0f62740ff445933e67bfd9ba9f2e419be6549003bfa3b7e2735d7160c74ac6/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f67697425324268747470732533412532462532466769746875622e636f6d25324668656c6d65746a7325324668656c6d65742e7376673f747970653d736869656c64" alt="FOSSA Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Helmet helps you secure your Express apps by setting various HTTP headers. &lt;em&gt;It's not a silver bullet&lt;/em&gt;, but it can help!&lt;/p&gt;
&lt;h2&gt;
Quick start&lt;/h2&gt;
&lt;p&gt;First, run &lt;code&gt;npm install helmet --save&lt;/code&gt; for your app. Then, in an Express app:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;express&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"express"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;helmet&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"helmet"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;app&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;express&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;helmet&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-c"&gt;// ...&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
How it works&lt;/h2&gt;
&lt;p&gt;Helmet is &lt;a href="https://github.com/senchalabs/connect"&gt;Connect&lt;/a&gt;-style middleware, which is compatible with frameworks like &lt;a href="https://expressjs.com/" rel="nofollow"&gt;Express&lt;/a&gt;. (If you need support for other frameworks or languages, &lt;a href="https://helmetjs.github.io/see-also/" rel="nofollow"&gt;see this list&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The top-level &lt;code&gt;helmet&lt;/code&gt; function is a wrapper around 15 smaller middlewares, 11 of which are enabled by default.&lt;/p&gt;
&lt;p&gt;In other words, these two things are equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// This...&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-en"&gt;helmet&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// ...is equivalent to this:&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;helmet&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/helmetjs/helmet"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#xssclean"&gt;
  &lt;/a&gt;
  XSS-Clean
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt; Sanitizes user input coming from POST request body (&lt;code&gt;req.body&lt;/code&gt;), GET request query (&lt;code&gt;req.query&lt;/code&gt;) and URL parameters (&lt;code&gt;req.params&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; Cross-site scripting / XSS attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install xss-clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xssClean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xss-clean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Protect against XSS attacks, should come before any routes&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xssClean&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jsonmaur"&gt;
        jsonmaur
      &lt;/a&gt; / &lt;a href="https://github.com/jsonmaur/xss-clean"&gt;
        xss-clean
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Middleware to sanitize user input
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Node.js XSS-Clean&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/jsonmaur/xss-clean" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2dd601cd11b31f76d0013a8cfc4123ccee1e3771994a200157b9f68df9e2fe52/68747470733a2f2f7472617669732d63692e6f72672f6a736f6e6d6175722f7873732d636c65616e2e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/jsonmaur/xss-clean?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d90a8bb9adc07b9564693134f12f501002bdc8a2be6f3adf64e4e93684dec58e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a736f6e6d6175722f7873732d636c65616e2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Node.js Connect middleware to sanitize user input coming from POST body, GET queries, and url params. Works with &lt;a href="http://expressjs.com/" rel="nofollow"&gt;Express&lt;/a&gt;, &lt;a href="http://restify.com/" rel="nofollow"&gt;Restify&lt;/a&gt;, or any other &lt;a href="https://github.com/senchalabs/connect"&gt;Connect&lt;/a&gt; app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jsonmaur/xss-clean/master/#use"&gt;How to Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jsonmaur/xss-clean/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
How to Use&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install xss-clean --save&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;restify&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'restify'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;xss&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'xss-clean'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;app&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;restify&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;createServer&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;restify&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;bodyParser&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-c"&gt;/* make sure this comes before any routes */&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;xss&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;listen&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;8080&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This will sanitize any data in &lt;code&gt;req.body&lt;/code&gt;, &lt;code&gt;req.query&lt;/code&gt;, and &lt;code&gt;req.params&lt;/code&gt;. You can also access the API directly if you don't want to use as middleware.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;clean&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'xss-clean/lib/xss'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;clean&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;cleaned&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;clean&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-c"&gt;// will return "&amp;amp;lt;script&amp;gt;&amp;amp;lt;/script&amp;gt;"&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/jsonmaur/xss-clean/master/LICENSE"&gt;MIT&lt;/a&gt; © &lt;a href="http://maur.co" rel="nofollow"&gt;Jason Maurer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jsonmaur/xss-clean"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hpp"&gt;
  &lt;/a&gt;
  HPP
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt; Puts the array parameters in &lt;code&gt;req.query&lt;/code&gt; and/or &lt;code&gt;req.body&lt;/code&gt; asides and just selects the last parameter value to avoid HTTP Parameter Pollution attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; Bypassing input validations and denial of service (DoS) attacks by uncaught &lt;code&gt;TypeError&lt;/code&gt; in async code, leading to server crash.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install hpp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hpp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hpp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Protect against HPP, should come before any routes&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hpp&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/analog-nico"&gt;
        analog-nico
      &lt;/a&gt; / &lt;a href="https://github.com/analog-nico/hpp"&gt;
        hpp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Express middleware to protect against HTTP Parameter Pollution attacks
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
HPP&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://expressjs.com" rel="nofollow"&gt;Express&lt;/a&gt; middleware to &lt;strong&gt;protect against HTTP Parameter Pollution attacks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/analog-nico/hpp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/298cb8d2fe348b23f279fed74bc4562a9db6967fe66d2d79576bd5b508149722/68747470733a2f2f7472617669732d63692e6f72672f616e616c6f672d6e69636f2f6870702e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/analog-nico/hpp?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e113d154ed772ef1b38a6db1effb90b05c21f0760f2604e63a06a0d5225a8c43/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616e616c6f672d6e69636f2f6870702f62616467652e706e67" alt="Coverage Status"&gt;&lt;/a&gt; &lt;a href="https://david-dm.org/analog-nico/hpp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/689e89902a1e0e009bfaf93beb54eba92d8b4be4fd3e4fcb8b0a2359622c4fe0/68747470733a2f2f64617669642d646d2e6f72672f616e616c6f672d6e69636f2f6870702e737667" alt="Dependency Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Why?&lt;/h2&gt;
&lt;p&gt;Let &lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=48" rel="nofollow"&gt;Chetan Karande's slides&lt;/a&gt; do the explaining:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=48" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMA1bUE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/analog-nico/hpp/master/img/slide48.jpg" alt="Slide 48"&gt;&lt;/a&gt;
&lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=49" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5GDaL6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/analog-nico/hpp/master/img/slide49.jpg" alt="Slide 49"&gt;&lt;/a&gt;
&lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=50" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDCJhyOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/analog-nico/hpp/master/img/slide50.jpg" alt="Slide 50"&gt;&lt;/a&gt;
&lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=54" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J66qB-13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/analog-nico/hpp/master/img/slide54.jpg" alt="Slide 54"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;...and exploits may allow &lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=57" rel="nofollow"&gt;bypassing the input validation&lt;/a&gt; or even result in &lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=55" rel="nofollow"&gt;denial of service&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
And HPP solves this how exactly?&lt;/h2&gt;
&lt;p&gt;HPP puts array parameters in &lt;code&gt;req.query&lt;/code&gt; and/or &lt;code&gt;req.body&lt;/code&gt; aside and just selects the last parameter value. You add the middleware and you are done.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://npmjs.org/package/hpp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ba639d11a633c34546f0c683c9bc21c63d042f2b511be359f816e8d133c5d7f3/68747470733a2f2f6e6f6465692e636f2f6e706d2f6870702e706e673f646f776e6c6f6164733d74727565" alt="NPM Stats"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a module for node.js and io.js and is installed via npm:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install hpp --save&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;Add the HPP middleware like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// ...&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;hpp&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'hpp'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// ...&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;bodyParser&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;urlencoded&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;// Make sure the body is parsed beforehand.&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;hpp&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;// &amp;lt;- THIS IS THE NEW LINE&lt;/span&gt;

&lt;span class="pl-c"&gt;// Add your own middlewares afterwards, e.g.:&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;get&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'/search'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/analog-nico/hpp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#express-mongo-sanitize"&gt;
  &lt;/a&gt;
  Express Mongo Sanitize
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt; Searches for any keys in objects that begin with a &lt;code&gt;$&lt;/code&gt; sign or contain a &lt;code&gt;.&lt;/code&gt; from &lt;code&gt;req.body&lt;/code&gt;, &lt;code&gt;req.query&lt;/code&gt; or &lt;code&gt;req.params&lt;/code&gt; and either removes such keys and data or replaces the prohibited characters with another allowed character.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; MongoDB Operator Injection. Malicious users could send an object containing a &lt;code&gt;$&lt;/code&gt; operator, or including a &lt;code&gt;.&lt;/code&gt;, which could change the context of a database operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express-mongo-sanitize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoSanitize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express-mongo-sanitize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove all keys containing prohibited characters&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mongoSanitize&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/fiznool"&gt;
        fiznool
      &lt;/a&gt; / &lt;a href="https://github.com/fiznool/express-mongo-sanitize"&gt;
        express-mongo-sanitize
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Sanitize your express payload to prevent MongoDB operator injection.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Express Mongoose Sanitize&lt;/h1&gt;
&lt;p&gt;Express 4.x middleware which sanitizes user-supplied data to prevent MongoDB Operator Injection.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/fiznool/express-mongo-sanitize/workflows/Node.js%20CI/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMzj-Qrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/fiznool/express-mongo-sanitize/workflows/Node.js%2520CI/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/npm/v/express-mongo-sanitize" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/81332616a56d2a94d47eb80447d000e85e7fff4efd97c5629a9fc55fd8cf7279/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f657870726573732d6d6f6e676f2d73616e6974697a65" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/npm/dw/express-mongo-sanitize?color=blue" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b07468e80ac0b87d66712adf814dd07e59219740eb282aeeeb0d7b211674d0c9/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64772f657870726573732d6d6f6e676f2d73616e6974697a653f636f6c6f723d626c7565" alt="npm downloads per week"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/fiznool/express-mongo-sanitize" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/15f78f42f80fe1786b78a51a63021d9c809439a7f937be826fa7a48ef5ffd530/68747470733a2f2f64617669642d646d2e6f72672f66697a6e6f6f6c2f657870726573732d6d6f6e676f2d73616e6974697a652e737667" alt="Dependency Status"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/fiznool/express-mongo-sanitize#info=devDependencies" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a73f4dbb18c9e43dab2c120eaa8a917f988bd807020d9554b4c0ed797e5e722e/68747470733a2f2f64617669642d646d2e6f72672f66697a6e6f6f6c2f657870726573732d6d6f6e676f2d73616e6974697a652f6465762d7374617475732e737667" alt="devDependency Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install express-mongo-sanitize&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Add as a piece of express middleware, before defining your routes.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;express&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'express'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;bodyParser&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'body-parser'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;mongoSanitize&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'express-mongo-sanitize'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;app&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;express&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;bodyParser&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;urlencoded&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;extended&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;bodyParser&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;json&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-c"&gt;// To remove data, use:&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;mongoSanitize&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-c"&gt;// Or, to replace prohibited characters with _, use:&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-s1"&gt;mongoSanitize&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;replaceWith&lt;/span&gt;: &lt;span class="pl-s"&gt;'_'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
&lt;code&gt;onSanitize&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;onSanitize&lt;/code&gt; callback is called after the request's value was sanitized.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-en"&gt;mongoSanitize&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-en"&gt;onSanitize&lt;/span&gt;: &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/fiznool/express-mongo-sanitize"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#express-rate-limit"&gt;
  &lt;/a&gt;
  Express Rate Limit
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What does it do:&lt;/strong&gt; Used to limit IP addresses from making repeated requests to API endpoints. An example would be to rate limit an endpoint that is responsible for sending password reset emails, which can incur additional fees.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; Brute force, denial of service (DoS) and distributed denial of service (DDoS) attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express-rate-limit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rateLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express-rate-limit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Restrict all routes to only 100 requests per IP address every 1o minutes&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rateLimit&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;windowMs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// 10 minutes&lt;/span&gt;
    &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;                     &lt;span class="c1"&gt;// 100 requests per IP&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nfriedly"&gt;
        nfriedly
      &lt;/a&gt; / &lt;a href="https://github.com/nfriedly/express-rate-limit"&gt;
        express-rate-limit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Basic rate-limiting middleware for express
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Express Rate Limit&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/nfriedly/express-rate-limit/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UheL5WKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nfriedly/express-rate-limit/workflows/Node.js%2520CI/badge.svg" alt="Node.js CI"&gt;&lt;/a&gt;
&lt;a href="https://npmjs.org/package/express-rate-limit" title="View this project on NPM" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0c43e9c94efa0ecea3d1640141b634793abe15e682cd8752f45557df2910cd72/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f657870726573732d726174652d6c696d69742e737667" alt="NPM version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/express-rate-limit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b28345c06b227c65085cf4c58dc12507eda3bd9af3963c16cd42c6d6d591e832/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f657870726573732d726174652d6c696d6974" alt="npm downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Basic rate-limiting middleware for Express. Use to limit repeated requests to public APIs and/or endpoints such as password reset.&lt;/p&gt;
&lt;p&gt;Plays nice with &lt;a href="https://www.npmjs.com/package/express-slow-down" rel="nofollow"&gt;express-slow-down&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: this module does not share state with other processes/servers by default. It also buckets all requests to an internal clock rather than starting a new timer for each end-user. It's fine for abuse-prevention but might not produce the desired effect when attempting to strictly enforce API rate-limits or similar. If you need a more robust solution, I recommend using an external store:&lt;/p&gt;
&lt;h3&gt;
Stores&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory Store &lt;em&gt;(default, built-in)&lt;/em&gt; - stores hits in-memory in the Node.js process. Does not share state with other servers or processes, and does not start a separate timer for each end user.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://npmjs.com/package/rate-limit-redis" rel="nofollow"&gt;Redis Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://npmjs.org/package/rate-limit-memcached" rel="nofollow"&gt;Memcached Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/rate-limit-mongo" rel="nofollow"&gt;Mongo Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Alternate Rate-limiters&lt;/h3&gt;
&lt;p&gt;This module was designed to only handle the basics and didn't even support external stores initially. These other options…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nfriedly/express-rate-limit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;With these 5 NPM packages, you can make your Node.js + Express.js application much more secure in just 5 minutes. All of the packages above are extremely easy to use, just export and use as a middleware.&lt;/p&gt;

&lt;p&gt;What security precautions do you take? Or did I miss any of your favorite packages? Let me know in the discussion below and I'll be happy to hear your thoughts.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>security</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Build a Custom Clock Widget in Bonita UI Designer</title>
      <author>Bishal Thapaliya</author>
      <pubDate>Wed, 09 Jun 2021 13:54:44 +0000</pubDate>
      <link>https://dev.to/vishalthapaliya/build-a-custom-clock-widget-in-bonita-ui-designer-1617</link>
      <guid>https://dev.to/vishalthapaliya/build-a-custom-clock-widget-in-bonita-ui-designer-1617</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TS14gu3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d07uu3nz3b30kaiuqucm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TS14gu3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d07uu3nz3b30kaiuqucm.gif" alt="Banner image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A web widget is a component that can be used as a feature on a web page or application. In this article, I will explain how to create a custom analog clock widget in Bonita UI Designer. You’ll see how to create an analog clock widget, change the appearance of the widget when you drag and drop it onto the whiteboard in Bonita UI Designer, and how to add some CSS and JavaScript to make the clock widget functional to the end-users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-clock-widget-and-define-its-appearance"&gt;
  &lt;/a&gt;
  Create a clock widget and define its appearance
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-1-get-started"&gt;
  &lt;/a&gt;
  Step 1: Get started
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Go to the Bonita UI Designer home page.&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Create&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Custom widget&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Give an appropriate name to the widget (eg. AnalogClock).&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Create&lt;/strong&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wlwej46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x2ntjyx1fl3wb5uazb8.PNG" alt="Step 1 image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The custom widget editor window will appear. A custom widget is composed of six sections: &lt;strong&gt;Description&lt;/strong&gt;, &lt;strong&gt;Template&lt;/strong&gt;, &lt;strong&gt;Controller&lt;/strong&gt;, &lt;strong&gt;Assets&lt;/strong&gt;, &lt;strong&gt;Required angular modules&lt;/strong&gt;, and &lt;strong&gt;Properties&lt;/strong&gt;. For this custom widget, we will make some modifications in the &lt;strong&gt;Description&lt;/strong&gt;, &lt;strong&gt;Template&lt;/strong&gt;, &lt;strong&gt;Controller&lt;/strong&gt;, and &lt;strong&gt;Assets&lt;/strong&gt; sections only.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gpjlf6mH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5o245x6wlev7qghwdu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gpjlf6mH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5o245x6wlev7qghwdu7.png" alt="Step 1.1 image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-2-remove-default-information"&gt;
  &lt;/a&gt;
  Step 2: Remove default information
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Remove everything from all the sections. We are going to create this widget from scratch.&lt;/li&gt;
&lt;li&gt;Now, the widget editor window looks like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOcMgTbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p6z8z1yru0j1d5t3p2r.png" alt="Step 2 image"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#step-3-set-the-description"&gt;
  &lt;/a&gt;
  Step 3: Set the description
&lt;/h4&gt;

&lt;p&gt;In the description section, describe the widget and its behavior. This description will be shown when we hover over the widget in the custom widget list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the &lt;strong&gt;Description&lt;/strong&gt; section, write the basic information about the widget. For example;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;“This is a custom analog clock widget built with UI Designer which is useful to display the current time.”&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wlFUI93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30vf74qkb8cnfcdt0lch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wlFUI93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30vf74qkb8cnfcdt0lch.png" alt="Step 3 image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-4-define-the-template-section"&gt;
  &lt;/a&gt;
  Step 4: Define the Template section
&lt;/h4&gt;

&lt;p&gt;In this step, we define how the widget will be displayed in the UI Designer whiteboard. We are going to add some HTML markup to display a clock SVG image only when the "environment" variable is defined, i.e. we are in the UID whiteboard.&lt;/p&gt;

&lt;p&gt;In Step 8 we will add more HTML markup to deal with how the widget should be rendered at runtime, i.e. when the page is actually displayed in an application.&lt;/p&gt;

&lt;p&gt;In the template section, write the following HTML and CSS codes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div ng-if="environment"&amp;gt;
    &amp;lt;svg xmlns='http://www.w3.org/2000/svg' version='1.0' viewBox='0 0 798.000000 794.000000' preserveAspectRatio='xMidYMid meet' style='&amp;amp;#10;'&amp;gt;
        &amp;lt;g transform='translate(0.000000,794.000000) scale(0.100000,-0.100000)' fill='#000' stroke='none'&amp;gt;
            &amp;lt;path d='M3680 7869 c-478 -39 -951 -166 -1378 -370 -187 -89 -294 -150 -482 -275 -221 -146 -400 -293 -595 -489 -322 -321 -571 -672 -764 -1077 -507 -1060 -507 -2296 0 -3356 89 -187 150 -294 275 -482 146 -221 293 -400 489 -595 321 -322 672 -571 1077 -764 1060 -507 2296 -507 3356 0 187 89 294 150 482 275 221 146 400 293 595 489 322 321 571 672 764 1077 507 1060 507 2296 0 3356 -89 187 -150 294 -275 482 -146 221 -293 400 -489 595 -321 322 -672 571 -1077 764 -609 291 -1316 423 -1978 370z m730 -214 c715 -85 1386 -375 1947 -840 138 -115 343 -320 458 -458 468 -564 753 -1228 842 -1957 24 -202 24 -638 0 -840 -52 -429 -162 -803 -349 -1190 -465 -965 -1316 -1672 -2358 -1960 -148 -41 -380 -86 -550 -107 -202 -24 -638 -24 -840 0 -429 52 -803 162 -1190 349 -965 465 -1672 1316 -1960 2358 -41 148 -86 380 -107 550 -24 202 -24 638 0 840 52 429 162 803 349 1190 465 965 1316 1672 2358 1960 207 58 479 103 735 124 109 8 536 -3 665 -19z'/&amp;gt;
            &amp;lt;path d='M3942 7218 c-17 -17 -17 -259 0 -276 7 -7 24 -12 38 -12 45 0 50 15 50 150 0 135 -5 150 -50 150 -14 0 -31 -5 -38 -12z'/&amp;gt;
            &amp;lt;path d='M3724 5860 c-32 -13 -64 -59 -64 -92 0 -16 45 -390 100 -831 56 -441 100 -815 98 -832 -2 -20 -8 -29 -18 -27 -8 1 -638 280 -1398 618 -761 339 -1390 613 -1398 610 -8 -3 -14 -14 -14 -24 0 -16 244 -128 1373 -631 l1372 -611 -1211 0 c-1160 0 -1212 -1 -1227 -18 -22 -24 -21 -65 1 -85 17 -16 119 -17 1258 -17 l1239 0 17 -30 c19 -33 86 -70 128 -70 42 0 108 37 130 72 42 68 35 139 -20 201 -27 32 -28 34 -129 857 -56 454 -106 836 -110 850 -8 27 -64 70 -90 69 -9 0 -26 -4 -37 -9z m316 -1775 c16 -9 36 -29 45 -45 31 -60 10 -137 -45 -165 -110 -57 -222 55 -165 165 29 55 105 76 165 45z'/&amp;gt;
            &amp;lt;path d='M742 4018 c-15 -15 -15 -61 0 -76 8 -8 53 -12 138 -12 135 0 150 5 150 50 0 45 -15 50 -150 50 -85 0 -130 -4 -138 -12z'/&amp;gt;
            &amp;lt;path d='M6942 4018 c-7 -7 -12 -24 -12 -38 0 -45 15 -50 150 -50 135 0 150 5 150 50 0 45 -15 50 -150 50 -85 0 -130 -4 -138 -12z'/&amp;gt;
            &amp;lt;path d='M3942 1018 c-17 -17 -17 -259 0 -276 7 -7 24 -12 38 -12 45 0 50 15 50 150 0 85 -4 130 -12 138 -15 15 -61 15 -76 0z'/&amp;gt;
        &amp;lt;/g&amp;gt;
    &amp;lt;/svg&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the HTML code above, ng-if=”environment” detects that the widget is displayed within the UI Designer whiteboard. This defines how the widget is displayed to the developer within the UI Designer (as opposed to now the widget displayed to the user within a web page at runtime). Additionally, the &lt;code&gt;&amp;lt;svg&amp;gt;&amp;lt;/svg&amp;gt;&lt;/code&gt; tag is used as an SVG image container to draw the paths that generate a clock image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    svg {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 50%;
        width: 50%;
        margin: 0 auto;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The CSS codes must be written inside the &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t8X_kMLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n3bulsjuh9owkp2aoxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t8X_kMLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n3bulsjuh9owkp2aoxg.png" alt="Step 4 image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the Save button.&lt;/li&gt;
&lt;li&gt;We have successfully created a new analog clock widget.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#step-5-pro-tip-define-the-widget-icon-optional"&gt;
  &lt;/a&gt;
  Step 5: Pro tip - Define the widget icon (optional)
&lt;/h4&gt;

&lt;p&gt;It is not mandatory, but useful, to give a realistic look and feel to the analog clock widget icon when it appears on the list of a custom widget. To do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the “customAnalogClockWidget.json” file located inside the Bonita workspace (eg. /workspace/My project/web_widgets/customAnalogClock/customAnalogClock.json).&lt;/li&gt;
&lt;li&gt;Copy and paste the given code below after the “template” line inside the “customAnalogClock.json”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;SVG icon for the widget&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"icon": "&amp;lt;svg xmlns='http://www.w3.org/2000/svg' version='1.0' viewBox='0 0 798.000000 794.000000' preserveAspectRatio='xMidYMid meet' style='&amp;amp;#10;'&amp;gt;&amp;lt;g transform='translate(0.000000,794.000000) scale(0.100000,-0.100000)' fill='#fff' stroke='none'&amp;gt;&amp;lt;path d='M3680 7869 c-478 -39 -951 -166 -1378 -370 -187 -89 -294 -150 -482 -275 -221 -146 -400 -293 -595 -489 -322 -321 -571 -672 -764 -1077 -507 -1060 -507 -2296 0 -3356 89 -187 150 -294 275 -482 146 -221 293 -400 489 -595 321 -322 672 -571 1077 -764 1060 -507 2296 -507 3356 0 187 89 294 150 482 275 221 146 400 293 595 489 322 321 571 672 764 1077 507 1060 507 2296 0 3356 -89 187 -150 294 -275 482 -146 221 -293 400 -489 595 -321 322 -672 571 -1077 764 -609 291 -1316 423 -1978 370z m730 -214 c715 -85 1386 -375 1947 -840 138 -115 343 -320 458 -458 468 -564 753 -1228 842 -1957 24 -202 24 -638 0 -840 -52 -429 -162 -803 -349 -1190 -465 -965 -1316 -1672 -2358 -1960 -148 -41 -380 -86 -550 -107 -202 -24 -638 -24 -840 0 -429 52 -803 162 -1190 349 -965 465 -1672 1316 -1960 2358 -41 148 -86 380 -107 550 -24 202 -24 638 0 840 52 429 162 803 349 1190 465 965 1316 1672 2358 1960 207 58 479 103 735 124 109 8 536 -3 665 -19z'/&amp;gt;&amp;lt;path d='M3942 7218 c-17 -17 -17 -259 0 -276 7 -7 24 -12 38 -12 45 0 50 15 50 150 0 135 -5 150 -50 150 -14 0 -31 -5 -38 -12z'/&amp;gt;&amp;lt;path d='M3724 5860 c-32 -13 -64 -59 -64 -92 0 -16 45 -390 100 -831 56 -441 100 -815 98 -832 -2 -20 -8 -29 -18 -27 -8 1 -638 280 -1398 618 -761 339 -1390 613 -1398 610 -8 -3 -14 -14 -14 -24 0 -16 244 -128 1373 -631 l1372 -611 -1211 0 c-1160 0 -1212 -1 -1227 -18 -22 -24 -21 -65 1 -85 17 -16 119 -17 1258 -17 l1239 0 17 -30 c19 -33 86 -70 128 -70 42 0 108 37 130 72 42 68 35 139 -20 201 -27 32 -28 34 -129 857 -56 454 -106 836 -110 850 -8 27 -64 70 -90 69 -9 0 -26 -4 -37 -9z m316 -1775 c16 -9 36 -29 45 -45 31 -60 10 -137 -45 -165 -110 -57 -222 55 -165 165 29 55 105 76 165 45z'/&amp;gt;&amp;lt;path d='M742 4018 c-15 -15 -15 -61 0 -76 8 -8 53 -12 138 -12 135 0 150 5 150 50 0 45 -15 50 -150 50 -85 0 -130 -4 -138 -12z'/&amp;gt;&amp;lt;path d='M6942 4018 c-7 -7 -12 -24 -12 -38 0 -45 15 -50 150 -50 135 0 150 5 150 50 0 45 -15 50 -150 50 -85 0 -130 -4 -138 -12z'/&amp;gt;&amp;lt;path d='M3942 1018 c-17 -17 -17 -259 0 -276 7 -7 24 -12 38 -12 45 0 50 15 50 150 0 85 -4 130 -12 138 -15 15 -61 15 -76 0z'/&amp;gt;&amp;lt;/g&amp;gt;&amp;lt;/svg&amp;gt;",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6swpSk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jelr8ptdsh1r5m1dybji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6swpSk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jelr8ptdsh1r5m1dybji.png" alt="Step 5 image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The SVG code generates a clock icon for this widget. Make sure to keep the comma (,) at the end of the line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have now successfully changed the icon of the widget. Now, it's time to use this custom widget inside an application page and check if the clock widget has the correct icon and the display when it is placed onto the whiteboard.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-6-check-the-widget"&gt;
  &lt;/a&gt;
  Step 6: Check the widget
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Go to the Bonita UI Designer home page.&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Create&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Application page&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Name the page (eg. ClockPage).&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Create&lt;/strong&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aB5_992x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt7jkl3hk4l3ap4ilep7.png" alt="Step 6 image"&gt;
&lt;/li&gt;
&lt;li&gt;The ClockPage editor window will open.&lt;/li&gt;
&lt;li&gt;Now, in the page editor window, click on the &lt;strong&gt;Custom widgets&lt;/strong&gt; tab  on the left.&lt;/li&gt;
&lt;li&gt;The AnalogClock widget appears in the list and has a clock image as an icon.&lt;/li&gt;
&lt;li&gt;Drag and drop the clock widget onto the whiteboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h4&gt;

&lt;p&gt;The widget on the whiteboard will look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oXiPObot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkraf86lda2b3vk5y5vf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXiPObot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkraf86lda2b3vk5y5vf.png" alt="Step 6 output image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have completed the definition of the custom analog clock widget, and now we are going to make the clock widget functional to end-users.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#make-the-widget-functional-to-the-endusers"&gt;
  &lt;/a&gt;
  Make the widget functional to the end-users
&lt;/h3&gt;

&lt;p&gt;The implementation steps that follow are based on a large device screen resolution (i.e., screen width &amp;gt;= 1200px). You can change the responsiveness of the page by clicking on thedevice screen size icon that appears on the top right corner in Bonita UI Designer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-7-edit-the-widget"&gt;
  &lt;/a&gt;
  Step 7: Edit the widget
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Click and select the custom &lt;strong&gt;AnalogClock&lt;/strong&gt; widget on the whiteboard.&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;“...”&lt;/strong&gt; button next to the widget name on the right.&lt;/li&gt;
&lt;li&gt;Click on Edit. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp_4N-o9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t03dsu3yy0yqubcsg9i.png" alt="Step 7 image"&gt;
&lt;/li&gt;
&lt;li&gt;The widget editor window will appear.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#step-8-define-the-template"&gt;
  &lt;/a&gt;
  Step 8: Define the Template
&lt;/h4&gt;

&lt;p&gt;In the template section in the widget editor window, write the HTML for the widget that will be displayed to the users at runtime. Write the following HTML code after the closing of &lt;code&gt;&amp;lt;div ng-if=”environment”&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="clockFace" ng-if="!environment"&amp;gt;
    &amp;lt;div class="hour"&amp;gt;
        &amp;lt;div class="hourHand"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="minute"&amp;gt;
        &amp;lt;div class="minuteHand"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="second"&amp;gt;
        &amp;lt;div class="secondHand"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the HTML code above, ng-if=”!environment” detects that the widget is to be displayed to the user within a web page at runtime.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XRSKsA5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr3nlmaqval4smr6nu6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XRSKsA5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr3nlmaqval4smr6nu6i.png" alt="Step 8 image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-9-add-assets"&gt;
  &lt;/a&gt;
  Step 9: Add Assets
&lt;/h4&gt;

&lt;p&gt;The Assets section is defined to import the resources (image, CSS, JS) required for the widget. For the clock widget, we will add only an image and a CSS file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clock face image&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the clock image from this &lt;a href="https://drive.google.com/file/d/1QTtewQNBG_Ii1UszARyXjnXZwvEViTjR/view?usp=sharing"&gt;link&lt;/a&gt; here. (image source: Google)&lt;/li&gt;
&lt;li&gt;Go to the AnalogClock widget editor window in the Bonita UI Designer and click on the Add button in the &lt;strong&gt;Assets&lt;/strong&gt; section to upload the image file.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45u-Y56_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cad8pnf0bawxppbd6imk.png" alt="Step 9 image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This clock face image file will be used as a background-image property in the CSS clock class. You can use the image URL directly or download and add as an asset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a CSS file somewhere on your computer (e.g., D:\analog-clock-widget.css) and copy the following CSS code into it:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.clock-container {
    display: flex;
    justify-content: center;
    align-items: center;
}

.clockFace {
    position: relative;
    width: 150px;
    height: 150px;
    display: flex;
    justify-content: center;
    align-items: center;
background-image: url(../img/clock-face.png);
    background-color: #0A4561;
    background-size: cover;
    border: 3px solid #fff;
    border-radius: 50%;
  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.3), 
             inset 0 10px 10px rgba(0, 0, 0, 0.3);
}

.clockFace:before {
    content: '';
    width: 14px;
    height: 14px;
    background: #fff;
    border-radius: 50%;
    z-index: 10000;
}
.clockFace .hour,
.clockFace .minute,
.clockFace .second {
    position: absolute;
}

.clockFace .hour,
.hourHand {
    height: 90px;
}

.clockFace .minute,
.minuteHand {
    height: 105px;
}

.clockFace .second,
.secondHand {
    height: 120px;
}

.hourHand,
.minuteHand,
.secondHand {
    display: flex;
    justify-content: center;
}

.hourHand:before {
    content: '';
    width: 6px;
    height: 50px;
    background: #B52A2A;
    z-index: 10;
    border-radius: 6px 6px 0 0;
}

.minuteHand:before {
    content: '';
    width: 4px;
    height: 60px;
    background: #fff;
    z-index: 11;
    border-radius: 6px 6px 0 0;
}

.secondHand:before {
    content: '';
    width: 2px;
    height: 80px;
    background: #fff;
    z-index: 12;
    border-radius: 6px 6px 0 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some CSS properties such as height, width, background-color, position, etc. can be defined as you wish. In the CSS code above, “.hr:before”, “mn-before”, and “.sc:before” are defined to create hour hand, minute hand, and second hand respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Save the CSS file and close it.&lt;/li&gt;
&lt;li&gt;Go to the AnalogClock widget editor window in the Bonita UI Designer and click on the Add button in the &lt;strong&gt;Assets&lt;/strong&gt; section to upload this CSS file.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwr6YQIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16fb5ijzmiykke7us5c9.png" alt="Step 9 image 2"&gt;
&lt;/li&gt;
&lt;li&gt;As we have added all the required resources, now the Assets section will look like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ogvrsf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tvfyw1ciimrg1ksrxjc.png" alt="Step 9 image 3"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#step-10-set-the-controller"&gt;
  &lt;/a&gt;
  Step 10: Set the Controller
&lt;/h4&gt;

&lt;p&gt;The Controller section is dedicated to implementing the javascript required to make the widget functional.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the Controller section, write the following javascript code.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function ($scope) {
    setInterval(() =&amp;gt; {
    const degree = 6;
    let day = new Date();
    let hour = day.getHours() * 30;
    let minute = day.getMinutes() * degree;
    let second = day.getSeconds() * degree;

document.getElementsByClassName('hourHand').item(0).style.transform = `rotate(${(hour)+(minute/12)}deg)`;
document.getElementsByClassName('minuteHand').item(0).style.transform = `rotate(${minute}deg)`;
document.getElementsByClassName('secondHand').item(0).style.transform = `rotate(${second}deg)`;
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the javascript code needs to be wrapped inside the function ($scope){} method that augments the AngularJS scope and exposes functions that we can use in the template. &lt;/p&gt;

&lt;p&gt;In the code above, we are defining a variable called degree and assigning the value 6 to it, and using the variable to define the minute and second. It is used to rotate the minute hand and the second hand by 6 degrees. Similarly, the hour hand changes its position by 30 degrees when the hour changes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now the controller section will look like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mkSyPlA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xise400txmzgii461ggd.png" alt="Step 10 image"&gt;
&lt;/li&gt;
&lt;li&gt;Click on the Save button to save all the modifications applied to the widget.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-the-custom-analog-clock-to-a-page"&gt;
  &lt;/a&gt;
  Add the custom analog clock to a page
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-11-add-and-set-the-widget-properties"&gt;
  &lt;/a&gt;
  Step 11: Add and set the widget properties
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Go back to the Bonita UI Designer home page.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;ClockPage&lt;/strong&gt; (the page we created previously).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clean the page if there is already a widget on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drag and drop a Title widget onto the whiteboard and set the properties as shown below:&lt;br&gt;
Text = Analog Clock Widget&lt;br&gt;
Title level = Level 2&lt;br&gt;
Alignment = Center&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuq6FjyG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y91n59lznwc9rjpqvnwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuq6FjyG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y91n59lznwc9rjpqvnwj.png" alt="Step 11 image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drag and drop a container widget below the title widget and set the property Width = 4.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YpJhAQ1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igo6eqfe9hytq2173s95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YpJhAQ1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igo6eqfe9hytq2173s95.png" alt="Step 11 image 2"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;strong&gt;Custom widgets&lt;/strong&gt; tab on the left.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The AnalogClock widget appears in the list, and the icon is a the clock that we defined in the pro-tip step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drag and drop the AnalogClock widget next to the container widget and set the properties:&lt;br&gt;
Width = 4&lt;br&gt;
CSS classes = clock-container&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPe-Vp5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifyg7q7hmozim738sd2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPe-Vp5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifyg7q7hmozim738sd2f.png" alt="Step 11 image 3"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drag and drop a container widget next to the clock widget and set the property Width = 4.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WU9-VQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qn9e8i80s9uxbfio6ij7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WU9-VQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qn9e8i80s9uxbfio6ij7.png" alt="Step 11 image 4"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the page and click on Preview to see the result.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;

&lt;p&gt;When you click on the preview button, you will see a clock displaying the current time on your browser.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFXwoj3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6oxgw9xikbotp4ztrqr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFXwoj3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6oxgw9xikbotp4ztrqr.gif" alt="Final result image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt;, you have successfully built your own analog clock widget!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOb2q39W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdcj9fjvqnwip7xeabai.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOb2q39W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdcj9fjvqnwip7xeabai.gif" alt="Hurray image"&gt;&lt;/a&gt;&lt;br&gt;
I will explain in another upcoming article how we can define some properties of the clock widget that will allow us to use the same widget to display the time based on different time zones.&lt;/p&gt;

&lt;p&gt;I would love to know what other kinds of custom widgets you would like to implement with Bonita UI Designer. Please share your tips and examples.&lt;/p&gt;

&lt;p&gt;Stay tuned. Have fun with Bonita!&lt;/p&gt;

</description>
      <category>bonitasoft</category>
      <category>uidesigner</category>
      <category>customwidget</category>
    </item>
    <item>
      <title>D v C++</title>
      <author>JavaCode7</author>
      <pubDate>Wed, 09 Jun 2021 13:52:28 +0000</pubDate>
      <link>https://dev.to/javacode7/d-v-c-5571</link>
      <guid>https://dev.to/javacode7/d-v-c-5571</guid>
      <description>&lt;p&gt;D was created as an alternative to C++. It supposedly "fixed" all the errors in C++. But did it &lt;em&gt;really&lt;/em&gt;? Today we find out in D v C++.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits 😊
&lt;/h4&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/pranavbaburaj"&gt;@pranavbaburaj&lt;/a&gt;
 for some of these points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;C++. By far one of the most well known programming languages. One of its achievements was adding OOP to C. Let's look at some strong (and weak) points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✔  Fast&lt;/li&gt;
&lt;li&gt;✔  Compiled&lt;/li&gt;
&lt;li&gt;✔  Game engine support&lt;/li&gt;
&lt;li&gt;✔  OpenGL support&lt;/li&gt;
&lt;li&gt;✔  Well known&lt;/li&gt;
&lt;li&gt;❌ Somewhat complicated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#d"&gt;
  &lt;/a&gt;
  D
&lt;/h2&gt;

&lt;p&gt;D was made to improve C++ but did it do a good job?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✔  Compiled&lt;/li&gt;
&lt;li&gt;✔  OpenGL support&lt;/li&gt;
&lt;li&gt;❌ No game engine support&lt;/li&gt;
&lt;li&gt;❌ Not very well known&lt;/li&gt;
&lt;li&gt;✔  Simple&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, all of this evidence gives a clear winner. C++. If you disagree however, go comment down below with your reasoning! I would love to hear what you think.&lt;/p&gt;

</description>
      <category>dlang</category>
      <category>cpp</category>
      <category>healthydebate</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>React Native for mobile app development: points to consider in 2021</title>
      <author>Alex</author>
      <pubDate>Wed, 09 Jun 2021 13:48:47 +0000</pubDate>
      <link>https://dev.to/alexanderkdev/react-native-for-mobile-app-development-points-to-consider-in-2021-3i39</link>
      <guid>https://dev.to/alexanderkdev/react-native-for-mobile-app-development-points-to-consider-in-2021-3i39</guid>
      <description>&lt;p&gt;React Native is a cross-platform framework for developing mobile applications born out of the joint efforts of Facebook and enthusiasts. The framework provides engineers with the possibilities of the React library so they can create native applications that have full access to platform system APIs. React Native supports platforms such as Android, Android TV, iOS, macOS, Apple tvOS, Web, Windows, and UWP.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXe73wyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sci05849ouz3haek8wg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXe73wyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sci05849ouz3haek8wg9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
As it gets evident from the graph, the React Native app development is on the rise. The framework was the most popular cross-platform mobile tool both in 2019 and 2020. The world's most reputable brands, such as Facebook, Instagram, or Tesla, use React Native. &lt;/p&gt;

&lt;p&gt;The question needs to be asked: how did the framework manage to become so popular? Here’s a quick recap before we plunge into details: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Native is compact but has a lot to offer to developers;&lt;/li&gt;
&lt;li&gt;The opportunity to write in JavaScript and use React makes it possible to create an application for both platforms quickly. Surely, it’s more profitable for any business;&lt;/li&gt;
&lt;li&gt;The framework provides a large library of native and non-native components;
One can go on with a browser for debugging. Besides, there’s also a hot-reload feature for checking out applied changes. You don’t have to restructure an application if you change the code;&lt;/li&gt;
&lt;li&gt;The native components of the system (all buttons, pictures, and texts) are all standard components of the operating system. It is impossible to distinguish a native application from a native one. In fact, a React Native app is a native app in itself;&lt;/li&gt;
&lt;li&gt;It’s easy to manage your own library for React Native using the native functionality of the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you've decided to develop an app using native languages ​​such as Java, Objective-C, and C#, be sure that  the development process will take considerable time. Besides, if you hire an experienced professional, it will not come cheap. So what your next step might be? Why do so many people consider React Native when developing a mobile app? Let’s find out. &lt;/p&gt;

&lt;p&gt;The pros and cons of React Native&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgwD6pD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc5miled3o1zx28s30rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgwD6pD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc5miled3o1zx28s30rj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In itself, a React Native mobile app shouldn’t be seen as HTML5 or a hybrid one. Instead, it is a mobile application in its own right. True, React Native-based applications may not be as fast as native ones, but you get very close to native performance. I’d say the speed is almost indistinguishable. &lt;/p&gt;

&lt;p&gt;One way or another, you can still improve the performance of a React Native app with native code. When talking about optimization, native code works like a breeze. To get the best out of the performance, use both sources of code. I mean, some features can be built with native code, and some using React Native’s code.&lt;/p&gt;

&lt;p&gt;Convenience &lt;br&gt;
Essentially, an experienced full-stack developer can start creating mobile apps in React Native without going through specialized training. So how can you get started? Well, the first thing to do is to familiarize yourself with writing code in Javascript and know a thing or two about React. However, you need to know the peculiarities of both Android and iOS. These platforms have many similar and specific features, so the risk of confusion in the development process is high. In other words, React Native is simple and convenient if the developer understands what he is doing and what an eventual goal is.&lt;/p&gt;

&lt;p&gt;It’s worth noting that React Native can be added at any time. You can start with RC (greenfield applications) or add it to an existing app (brownfield apps). That basically means that if there is a native application, and you want to update it with common features, it’s unnecessary to do this natively.&lt;/p&gt;

&lt;p&gt;Awesome user interfaces&lt;br&gt;
The framework makes it possible to design aesthetically appealing user interfaces using pre-built components such as Slider, Switch, Picker, or Button. Besides, it’s also possible to develop custom components with TouchableNativeFeedback and TouchableOpacity. Hopefully, there’s a myriad of iOS and Android components that work efficiently on corresponding mobile devices.&lt;/p&gt;

&lt;p&gt;F is for fast &lt;br&gt;
React Native is powerful when it comes to a variety of components. You have all you might need when developing: text, images, keyboard input, animation, clipboard, scrolling lists, progress bar, and links. These components significantly accelerate the development process, not to mention Hot Reloading, which reloads the application without recompiling all the code.&lt;/p&gt;

&lt;p&gt;React Native libraries such as Redux and MobX handle the state of an app, while Awesome React Native - a catalog of components and demos - helps finish the mobile app development faster. Besides, tools like VS Code, WebStorm, and Nuclide for coding, Sentry for monitoring bugs and crashes, and React Developer Tools for debugging also add to the list of React’s advantages. &lt;/p&gt;

&lt;p&gt;Strong community&lt;br&gt;
Here are some amazing stats: React Native has over 2000 contributors with 95,000+ stars on GitHub. Many reputable companies have contributed to the platform. This way, you will easily find many React Native components and libraries built by the developer community on sites like JS.coach and Native Directory. You will always find someone who can help you on StackOverflow, Reddit, Codementor, or the Reactiflux Discord Community.&lt;/p&gt;

&lt;p&gt;Drawbacks &lt;br&gt;
Let’s be honest: there are pros and cons to everything. I've talked about many of the positive aspects of React Native, but it has several problems such as large app size, memory leaks in Android apps due to unnecessary processes running in the background, and a slow app startup problem because of some dependencies. However, you can fix these problems to some extent.&lt;/p&gt;

&lt;p&gt;For instance, you can solve the Android app memory leak issue with scrollable lists like FlatList, SectionList, or VirtualList. Refrain from using ListView to prevent memory leaks. To solve a slow application startup problem, you need to reduce the number of dependencies in your application and use components that work very well. What’s more, Hermes, a JavaScript engine optimized for React Native, helps launch applications faster, owing to build-time precompilation of JavaScript into effective bytecode.&lt;/p&gt;

&lt;p&gt;How we can help you with React Native (+ video case study)&lt;br&gt;
Here at Akveo, we use React Native a lot. We said it once, and we’ll say it again: using React Native is the easiest yet reliable method to reach the market faster. We’ve helped our clients save on development costs while providing them with cross-platform applications that work perfectly on any platform.&lt;/p&gt;

&lt;p&gt;What’s more, as React Native advocates, we developed our own products based on React Native UI Kitten is an open-source and free framework for creating cross-platform mobile applications. Design system-based, UI Kitten brings your product from an MVP to the final product version. &lt;/p&gt;

&lt;p&gt;However, as the title suggests, a picture is worth a thousand words. Let me speak about one of our clients and how we helped them with React Native. Enter the client: Felmo is a German company from the industry of veterinary services. The customer came up with the idea of developing a mobile application that links vet clinics and pet owners that want to receive medical care services online. Using UI Kitten, our team reduced front-end development time by 25% and saved thousands of dollars for the client. The end result of the project is a multifunctional mobile application with a set of custom icons and illustrations.&lt;/p&gt;

&lt;p&gt;To sum up (and take action) &lt;br&gt;
If you want a quick conclusion, it's easy to formulate it in one phrase. React Native is a robust mobile app development tool that allows developers to quickly create products while saving costs on development. When comparing the pros and cons of React Native mobile development, it's a no-brainer to realize that the advantages outweigh the minor drawbacks.&lt;/p&gt;

&lt;p&gt;We know it firsthand, as our React Native expertise is rich. We’re already familiar with all the pain points and workarounds. Besides, we’re professionals in native development as well, so we know for sure when and how to use both methods. Sure, the trends in mobile development may change, but some things always remain in great demand. React Native is widely used by big brands, so don't it won’t disappear any time soon. Contact us (&lt;a href="https://exceed-team.com/"&gt;https://exceed-team.com/&lt;/a&gt;) to get the quote, and let’s build your React Native-based mobile app.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>app</category>
      <category>mobileapp</category>
    </item>
    <item>
      <title>Exciting time ahead.  I joined the Forem🌱 team</title>
      <author>Anuj Bhavsar</author>
      <pubDate>Wed, 09 Jun 2021 13:37:45 +0000</pubDate>
      <link>https://dev.to/anujbhavsar96/exciting-time-ahead-i-joined-the-forem-team-25do</link>
      <guid>https://dev.to/anujbhavsar96/exciting-time-ahead-i-joined-the-forem-team-25do</guid>
      <description>&lt;p&gt;Hello Everyone👋,&lt;/p&gt;

&lt;p&gt;My name is Anuj Bhavsar, based in Ahmedabad, India🇮🇳. And I'm proud to announce that I have recently joined the Forem🌱 team as a Product Designer.&lt;/p&gt;

&lt;p&gt;I'll be working with &lt;a class="mentioned-user" href="https://dev.to/lisasy"&gt;@lisasy&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/pp"&gt;@pp&lt;/a&gt;
 designing the experience for empowering communities.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me😎
&lt;/h3&gt;

&lt;p&gt;I'm a computer science dropped-out student(competitive coding wasn't my cup of tea, and then the creative field came to rescue). I made my way into design industry five years back by self-learning and the help of the online community. I've been working in this industry for the last four years. Before Forem, I've worked with India's biggest Edtech startup Vedantu. Also, I've experience working with a Design studio.&lt;/p&gt;

&lt;p&gt;When I'm not designing, I enjoy binge-watching series &amp;amp; movies 🎬, clicking &amp;amp; editing pictures📸 , and watching cute animals on Instagram. I'm always grooving on some tunes on Spotify🥁 while working.&lt;/p&gt;

&lt;p&gt;Nowadays I'm into cooking🥘, workouts🏋🏻, dog parenting🐶 , and house decorations🏵.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-forem"&gt;
  &lt;/a&gt;
  Why Forem🤔?
&lt;/h3&gt;

&lt;p&gt;Because why not? Where will I find such a dream team dedicated to working towards such a noble and fascinating problem? &lt;/p&gt;

&lt;p&gt;Being a self-taught designer, I know the importance of community. DEV is such an incredible example of that. And Forem is helping creators drive such communities.&lt;/p&gt;

&lt;p&gt;The thing I like about Forem+DEV is open-source and the habit of building in public. Transparency is everything in such time. &lt;/p&gt;




&lt;p&gt;Excited to work with these talented folks and enhance the user experience for Forem🌱&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#where-you-can-find-me"&gt;
  &lt;/a&gt;
  Where you can find me👀
&lt;/h3&gt;

&lt;p&gt;Follow me here on DEV for work-related updates.&lt;br&gt;
&lt;a href="https://twitter.com/anujbhavsar50"&gt;Twitter&lt;/a&gt; • &lt;a href="https://www.instagram.com/anuj.png/"&gt;Instagram&lt;/a&gt; • &lt;a href="https://dribbble.com/anujbhavsar50"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>meta</category>
      <category>design</category>
    </item>
    <item>
      <title>Looking for CSS wizards to contribute</title>
      <author>Przemyslaw Michalak</author>
      <pubDate>Wed, 09 Jun 2021 13:30:18 +0000</pubDate>
      <link>https://dev.to/przemek/looking-for-css-wizards-to-contribute-1d34</link>
      <guid>https://dev.to/przemek/looking-for-css-wizards-to-contribute-1d34</guid>
      <description>&lt;p&gt;Hi everyone. I'm co-creator of the project that you might heard of already. In short - it is automated front-end Studio that works in the browser and has it's own repository of fully customizable Widgets, Live Preview, meta-framework and a much more. You can read about it &lt;a href="https://dev.to/przemek/front-end-studio-powered-by-solidjs-e5o"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the features that comes with the Studio are Widgets. They can be inserted inside of any project within one click. All of them have consistent naming when it comes to their styles which makes them easy to customize by either scoped CSS files or Global Styles.&lt;/p&gt;

&lt;p&gt;Right now we are thinking of implementing the library with pre-made Global Styles that can be inserted inside of the project within one click and give initial look to the app created by developer. Unfortunately neither me or &lt;a href="https://dev.to/chrisczopp"&gt;Chris&lt;/a&gt; are UI designers. But that gives the great opportunity for our community.&lt;/p&gt;

&lt;p&gt;The Studio is offered in FREEMIUM model. So anyone can create their own project for FREE, use as many of basic Widgets (52 at the moment) and style them, use advantage of setup free Live Preview, Implementation Assistant (in context notification system that generate files and necessary glue code while triggered by an user) and export code outside of the Studio to clean and well organized JSX powered by &lt;a href="http://solidjs.com/"&gt;SolidJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that's the deal. We are looking for developers who would be interested in creating Global Styles for the Studio. As a return we will offer 6 months of 'freelancer' plan for free. That gives a great opportunity for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everyone that is looking for alternative fast ways of delivering more competitive products to their customers&lt;/li&gt;
&lt;li&gt;learners who would like to add to their CV/portfolio new project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although you can create projects from simple landing pages to advanced administration panels for absolutely FREE, the 'Freelancer' plan offers a couple of amazing features as automatically generated prerenders that allows to hit over 90% score in well know tools measuring speed of websites (lighthouse for example) or access to repository with more advanced Widgets (34 at the moment).&lt;/p&gt;

&lt;p&gt;How it works?&lt;/p&gt;

&lt;p&gt;You can clone repository from &lt;a href="https://github.com/gluecodes/gluecodes-global-styles"&gt;here&lt;/a&gt; and use it's README as a guideline what exactly needs to be styled. Then you can access the &lt;a href="https://ide.glue.codes/?openedTab=demos"&gt;Studio&lt;/a&gt; boilerplate that I prepared for you. All the Widgets have consistent naming which makes styling of the whole app very fast, smooth and easy. When you finish with everything you can simply copy the CSS or export the project, add it to cloned GitHub repository and commit changes.&lt;/p&gt;

&lt;p&gt;What is worth to know?&lt;/p&gt;

&lt;p&gt;Before you submit your work you can create your thumbnail and short README file where you can leave your name that will be visible for everyone before inserting your styles to their project. Also remember that you don't need to style every single class that you find in the boilerplate.&lt;/p&gt;

&lt;p&gt;If you will need help with anything you can use our group on FB where you can ask any questions related to GlueCodes Studio:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/groups/gluecodesstudio"&gt;https://www.facebook.com/groups/gluecodesstudio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just in case you missed it, here is our website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.glue.codes"&gt;https://www.glue.codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the GitHub repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gluecodes/gluecodes-ide/pull/66"&gt;https://github.com/gluecodes/gluecodes-ide/pull/66&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
