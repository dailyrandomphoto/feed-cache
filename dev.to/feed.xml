<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Note Taking 101</title>
      <author>loren-michael</author>
      <pubDate>Fri, 12 Nov 2021 19:11:33 +0000</pubDate>
      <link>https://dev.to/lorenmichael/note-taking-101-5b05</link>
      <guid>https://dev.to/lorenmichael/note-taking-101-5b05</guid>
      <description>&lt;p&gt;While going through Flatiron's Pre-Work and part of Phase 1, I've been taking notes in a Moleskine. While it's my favorite way to retain information (I learn well by writing things down in my own handwriting) it definitely leaves much to be desired. Writing out JS by hand is a pain if you're trying to show yourself examples of the concept you're studying. It takes up a lot of paper very quickly with how many lines it takes up, and the hand cramps!&lt;/p&gt;

&lt;p&gt;I've started to experiment with different ways to take notes while going through class. My newest method will be to keep notes organized in .js files that give examples of how different functions work. The latest concept I've gone over are Arrow Functions, so I built a file that shows progression from a regular function to a function expression then to an arrow function. It came in handy while doing my lab work, so I will likely continue this to see if it is helpful with more complex concepts.&lt;/p&gt;

&lt;p&gt;Long term I'm hoping it will be a go-to resource of my own notes and code examples so that when I come across these concepts later on I have a file that I can go to if I'm having trouble.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Product developer’s guide to model training: Scaling numerical data</title>
      <author>Mage</author>
      <pubDate>Fri, 12 Nov 2021 18:47:17 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-model-training-scaling-numerical-data-1dk1</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-model-training-scaling-numerical-data-1dk1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h1&gt;

&lt;p&gt;While machines may have an easy time understanding numbers, it means nothing if there’s no meaning behind them. Learn techniques to scale to your numerical data, such as standardization and normalization to better grasp the correlation of your data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Recap&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Numerical data types&lt;/li&gt;
&lt;li&gt;Why we scale&lt;/li&gt;
&lt;li&gt;Types of scaling&lt;/li&gt;
&lt;li&gt;Scaling with Pandas&lt;/li&gt;
&lt;li&gt;Use of numerical data&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h1&gt;

&lt;p&gt;Last time, we looked at qualitative data, where we labeled the categories and assigned weights to data to make it machine readable. This time, we’re going to look at quantifiable data, aka numbers, and assign meanings to them through applying scales.&lt;/p&gt;

&lt;p&gt;We’ll be looking at the different types of numerical data, discrete and continuous, as well as the algorithm or mathematical formula behind it. Finally, we’ll wrap it up by scaling all numerical values in our dataset.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h1&gt;

&lt;p&gt;This guide will use the &lt;a href="https://app.box.com/s/ktd1t87fl925hjxkzsclp1343eq822f1"&gt;big_data&lt;/a&gt; dataset, collected for a marketing campaign. It contains data on a customer’s personal life, to analyze and replicate their decision making. It is recommended to read the introductory guide first to understand how to calculate min, max, and standard deviation as we’ll be using it in our equations to scale the data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#numerical-data-types"&gt;
  &lt;/a&gt;
  Numerical data types
&lt;/h1&gt;

&lt;p&gt;Quantitative data, also known as numerical data, is data that is represented by a numerical value. This can be discrete data, which represents a count of how many times something happened. On the other hand, there’s continuous data that stretches infinitely and is uncountable, such as time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discrete-data"&gt;
  &lt;/a&gt;
  Discrete data
&lt;/h2&gt;

&lt;p&gt;This type of data is fixed and each value in between can be represented as an equal amount of meaning. Due to this, examples of data that answers “how many” make great samples of discrete data. For a marketing campaign, this is usually how many times something is clicked, or how much something costs. &lt;/p&gt;

&lt;p&gt;It’s easy to compare discrete data across two users. A user who clicks more on the webpage is likely to be more engaged than the other user that visits the website and doesn’t click on anything. There’s a bit more special math we can do to assign difference in meanings to discrete data, such as a user clicking on the purchase button versus a user clicking on the logout button, but we won’t go too into detail in this guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuous-data"&gt;
  &lt;/a&gt;
  Continuous data
&lt;/h2&gt;

&lt;p&gt;This data is contrary to discrete. Continuous data doesn’t answer the question of “how many”, because it’s a value that’s measured in a unit that is infinite. Most datasets that have continuous data would be a measure of time. Time is considered to be infinite because the meaning between finishing an hour due before, and hour after starting. For instance, I may want to reward someone for completing early, or take note of someone procrastinating until the last minute. In the end, the treatment or behavioral pattern the data reveals is different.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-we-scale"&gt;
  &lt;/a&gt;
  Why we scale
&lt;/h1&gt;

&lt;p&gt;In order to fully grasp why knowing which type of numerical data matters, we must first understand how machines think. Machines are very literal, as we saw when working with categorical data, numbers will inherently carry a weight, and in practice these numbers can grow large and require a long time to do calculations or plot if left unchecked. This is where scaling comes in. Scaling reduces the values so that the data is easier to calculate, visualize, and remove bias.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#systematic-bias"&gt;
  &lt;/a&gt;
  Systematic bias
&lt;/h2&gt;

&lt;p&gt;Systematic bias occurs when there is a large amount of data with respect to another part of the data. In this case, it can be an outlier, where the data contains areas with anomalies, a datapoint with a larger deviation compared to others. In this case, we can apply a technique called normalization which reduces the impact of outliers on our data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#range-of-data"&gt;
  &lt;/a&gt;
  Range of Data
&lt;/h2&gt;

&lt;p&gt;In addition, scaling plays a big role in training time by shrinking the ranges. By reducing values that are extremely large into smaller values within a much smaller range, the calculations of each value is also decreased which helps with speed. A common example we’ll get into next is normalization, which shrinks all values into the range of [0,1], 0 to 1 inclusive.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-scaling"&gt;
  &lt;/a&gt;
  Types of Scaling
&lt;/h1&gt;

&lt;p&gt;Now that we understand the differences between the two types of numerical data and why we should scale, we may begin to identify a scaling approach that best fits each type of data. There are two scaling methods that we’ll go through, standardization, and normalization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#normalization-minmax"&gt;
  &lt;/a&gt;
  Normalization (Min-Max)
&lt;/h2&gt;

&lt;p&gt;The 1st type of scaling we’ll go over is normalization, which compares the current value against the highest and lowest values and finds the average. Due to needing a max and a min value, Min-Max normalization is used for discrete sets of data which are countable and finite. &lt;/p&gt;

&lt;p&gt;The pros of using Min-Max is that it’s faster to calculate, due to using simple mathematical operations, and easy to graphically view as the result is very linear. &lt;/p&gt;

&lt;p&gt;On the downside, it has many restrictions when choosing to use it. In the case of continuous sets of data, you are unable to use normalization since the meaning behind the difference in values isn’t consistent. In addition, calculating normalization uses the minimum and maximum, so any outliers or abnormal minimums and maximums can greatly skew the output.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CR1kssUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c51daaznyta87aqerpio.png" alt="Image description" width="452" height="256"&gt;&lt;em&gt;Formula for Min-Max Normalization&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#standardization-zscore"&gt;
  &lt;/a&gt;
  Standardization (Z-Score)
&lt;/h2&gt;

&lt;p&gt;Another type of scaling is through standardization. This is useful for continuous datasets that have no end in sight, but can also be used on discrete data. By standardizing the values you can assign meaning with respect to each other datapoint instead of a human assumption. &lt;/p&gt;

&lt;p&gt;For this guide, we’ll be following the Z-score method of standardization, which takes the value and subtracts the mean to find the difference, then divides it by the standard deviation. When choosing standardization, it’s worth noting that since there’s no min or value, outliers won’t affect your data as much.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EodOyQrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e6o4v0vjpvmm8yl5kuz.png" alt="Image description" width="235" height="92"&gt;&lt;em&gt;Formula for Z-Score Standardization&lt;/em&gt;
&lt;/center&gt;
&lt;h1&gt;
  &lt;a href="#scaling-with-pandas"&gt;
  &lt;/a&gt;
  Scaling with Pandas
&lt;/h1&gt;

&lt;p&gt;Looking back at our dataset, we’ll begin to scale the numbers to assign meaning. Starting off by looking at the dataset, let’s break down the columns into only the relevant numerical data. Then break it down further into discrete data that can be normalized, and continuous data which cannot be normalized. Sklearn has functions that calculate &lt;a href="https://scikitlearn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html"&gt;standardization&lt;/a&gt; and &lt;a href="https://scikitlearn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html"&gt;min-max normalization&lt;/a&gt;, but for this guide we’ll be implementing it with the raw functions of Pandas to practice understanding and implementing the equation.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7hK39yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kevg82higxe0mip8voc.png" alt="Image description" width="762" height="840"&gt;&lt;/center&gt;

&lt;p&gt;According to the output of df.info, we’ll want to keep any relevant values that are an int or float data type. This consists of “Year_Birth, Income, Kidhome, Teenhome, Recency, MntWines, MntFruits, MntMeat, MntFish, MntSweet, and NumPurchases”. We exclude ID here because even though it’s a number it has nothing to do with the customer’s behavior. This results in our new filtered data of only numerical data, df_numerical.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YxkNSDqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q88h9f4kjpdvtgygq6rp.png" alt="Image description" width="880" height="54"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLWptgFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pwdlp9fvtadrfepovh4.png" alt="Image description" width="880" height="437"&gt;&lt;em&gt;All the columns are an numerical data type&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#pandas-normalization"&gt;
  &lt;/a&gt;
  Pandas Normalization
&lt;/h2&gt;

&lt;p&gt;First, we take note of the columns that are finite, and countable. In our data, these are the Kidhome, Teenhome, Income, Recency, MntWines, MntFruits, MntFish, MntSweets, and NumPurchases columns.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNp2KnnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81tfmnooy1jb09tb41rr.png" alt="Image description" width="880" height="53"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXNIgbPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tntjy9yavc5xfoglwac6.png" alt="Image description" width="880" height="492"&gt;
&lt;/center&gt;

&lt;p&gt;Once we have the data we want, we can begin normalizing it following the equation.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VsYLks16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upx7rdrxtpr1q19gcqxl.png" alt="Image description" width="880" height="85"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yi60czGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzjaw6afbvuf53c0s9bn.png" alt="Image description" width="880" height="434"&gt;&lt;em&gt;After normalizing, the data should range from [0,1]&lt;/em&gt;
&lt;/center&gt; 

&lt;p&gt;The results don’t look the best, some values like Kidhome and Teenhome turned out to lack in variance. In this case, we can repeat scaling but with standardization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pandas-standardization"&gt;
  &lt;/a&gt;
  Pandas Standardization
&lt;/h2&gt;

&lt;p&gt;All numerical columns can be standardized, so we’ll be looking at all of the data. Following the equation for standardization, we take the value, subtract it by the mean, then divide by the standard deviation.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUNroBCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gds9prcadmrj093f0zq.png" alt="Image description" width="880" height="87"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnpDgroZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4hdzuacfok450lj2rwn.png" alt="Image description" width="880" height="427"&gt;&lt;em&gt;Standardization has no range, but tries to fit in on a bell curve&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Based on the results, creating the best scaled dataset would take a combination of the results from normalization and standardization. We’ll start by concatenating the values from the df_norm that had low variance, then the remainder of numerical columns from df_standard. So we take the Year_Birth, Kidhome, and Teenhome columns from df_standard, and concat them with Income, Recency, MntWines, MntFruits, MntFish, MntSweet, and NumPurchases columns from df_norm.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djBcTQin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6efca0m4dreipapfzt8.png" alt="Image description" width="880" height="431"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vy3CSvKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skgk42hqrh98j7pbq53y.png" alt="Image description" width="880" height="101"&gt;&lt;em&gt;Our fully scaled numerical data&lt;/em&gt;
&lt;/center&gt;
&lt;h1&gt;
  &lt;a href="#use-of-numerical-data"&gt;
  &lt;/a&gt;
  Use of Numerical Data
&lt;/h1&gt;

&lt;p&gt;Machines like numbers a lot, and while humans aren’t able to understand what the 1’s and 0’s represent, they can still define what it means. Likewise, as numbers increase towards infinity, the meaning behind it is blurred for both humans and machines alike. On the other hand, you may want to create a ranking system in place to find out which customers are bringing in the big bucks. All this big data is useful in developing a machine learning model that can rank each of your customers and find out patterns hidden within the data. You’ve converted all the big data, but is all of that data necessary to train a good model? In our next part, we’ll look at how to impute data to clean the data further.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Iniciando com Next.JS</title>
      <author>NuryCaroline</author>
      <pubDate>Fri, 12 Nov 2021 18:29:58 +0000</pubDate>
      <link>https://dev.to/devgirlsmentor/iniciando-com-nextjs-43dm</link>
      <guid>https://dev.to/devgirlsmentor/iniciando-com-nextjs-43dm</guid>
      <description>&lt;p&gt;Olá dev! &lt;/p&gt;

&lt;p&gt;O intuito desse post é explicar um pouquinho o que é Next.js e o que podemos fazer com ele. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-nextjs"&gt;
  &lt;/a&gt;
  O que é Next.js?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;É um &lt;strong&gt;Framework React para Produção&lt;/strong&gt;.&lt;br&gt;
Next.js oferece a melhor experiência de desenvolvedor com todos os recursos de que você precisa para produção: renderização híbrida estática e de servidor, suporte a TypeScript, agrupamento inteligente, pré-busca de rota e muito mais. Nenhuma configuração necessária.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#vantagens"&gt;
  &lt;/a&gt;
  Vantagens:
&lt;/h2&gt;

&lt;p&gt;Next.js tem várias ferramentas para te auxiliar, algumas delas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/basic-features/image-optimization"&gt;Otimização de imagem&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Com o Next.js podemos trocar a tag &lt;code&gt;&amp;lt;img src="" /&amp;gt;&lt;/code&gt; pelo componente &lt;code&gt;&amp;lt;Image  src="" /&amp;gt;&lt;/code&gt;, assim é incluído uma variedade de otimizações como: carregar somente o tamanho utilizado e quando a imagem for utilizada.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/analytics"&gt;Next.js Analytics&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Ao publicar a sua aplicação na &lt;a href="https://vercel.com/home?utm_source=next-site&amp;amp;utm_medium=banner&amp;amp;utm_campaign=next-website"&gt;Vercel&lt;/a&gt; você tem acesso a uma ferramenta de analise em tempo real. Podendo assim, medir quantidade de visitantes, tempo de carregamento da página, entre outros.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/getting-started"&gt;Zero Config&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Utilizando um simples comando no terminal, é criado uma estrutura pronta para iniciar um projeto.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/basic-features/built-in-css-support"&gt;Suporte a CSS e&lt;/a&gt; &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;O CSS Modules nos permitem separar o css em escopos, para evitar colisões.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/routing/introduction"&gt;Roteamento&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A navegação entre paginas é bem simplificado, basta criar um novo arquivo com o nome da pagina desejada e o roteador já identifica como uma página.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;Rotas Api&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Com as Rotas você pode criar endpoints para retornar informações para sua aplicação.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/docs/basic-features/data-fetching"&gt;Híbrido SSG e SSR&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SSR (Server Side Render) - Renderização do lado do Servidor:&lt;/p&gt;

&lt;p&gt;Ao solicitarmos uma página de perfil de usuário, por exemplo, o servidor efetua as buscas necessárias na aplicação e banco de dados, e retorna ao navegador um HTML pronto para ser apresentado ao usuário.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgG8cJeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/ed387a6bc4f3abf8e8bd06bc006cd297a923d8c2/9f11e/images/posts/arquitetura_ssr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgG8cJeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/ed387a6bc4f3abf8e8bd06bc006cd297a923d8c2/9f11e/images/posts/arquitetura_ssr.png" alt="SSR" width="587" height="340"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Fonte: &lt;a href="https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/"&gt;https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSG (Static Site Generator) - Geração de Site Estático:&lt;/p&gt;

&lt;p&gt;São sites que não possuem conteúdos dinâmicos, uma pagina de apresentação de uma empresa, por exemplo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--duy7CQ1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/40b1eaa12605bdfa28328b9dc2ee5f384cbe1632/106dc/images/posts/arquitetura_ssg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duy7CQ1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/40b1eaa12605bdfa28328b9dc2ee5f384cbe1632/106dc/images/posts/arquitetura_ssg.png" alt="SSG" width="388" height="199"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Fonte: &lt;a href="https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/"&gt;https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#como-aprender-nextjs"&gt;
  &lt;/a&gt;
  Como aprender Next.js
&lt;/h2&gt;

&lt;p&gt;No próprio site do Next.js (&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;https://nextjs.org/learn/basics/create-nextjs-app&lt;/a&gt;) há um curso interativo com os fundamentos de Next.js, como monitorar a performance, SEO e outras funcionalidades.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;Nextjs.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://woliveiras.com.br/posts/qual-diferenca-server-side-render-ssr-e-static-site-generator-ssg/"&gt;Qual a diferença entre SSR e SSG&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>An Application for Short Term Planning using a React/Redux frontend and a Rails API backend</title>
      <author>Guosa</author>
      <pubDate>Fri, 12 Nov 2021 18:25:43 +0000</pubDate>
      <link>https://dev.to/guosae/an-application-for-short-term-planning-using-a-reactredux-frontend-and-a-rails-api-backend-3ji3</link>
      <guid>https://dev.to/guosae/an-application-for-short-term-planning-using-a-reactredux-frontend-and-a-rails-api-backend-3ji3</guid>
      <description>&lt;p&gt;I built a weekly planning app which utilized React and Redux for its frontend and a Rails API for its backend.&lt;/p&gt;

&lt;p&gt;I decided to make an application which could be used as a short term planner or scheduler where the main events or activities of the immediate upcoming week could be entered. I figured that this was more relevant than a long term calendar style application for most scheduling/planning that one needs to actually carry out.&lt;/p&gt;

&lt;p&gt;Although I do have long term plans outlined in document files or in notes on my phone, I usually need to make plans or schedule activities for more immediate upcoming events on a short term basis (a week or at most two weeks ahead) since plans are very frequently changed to adapt to changing circumstances or events that come up unexpectedly that need to be taken care of or resolved sooner.&lt;/p&gt;

&lt;p&gt;I thought it would make sense to make an application which could handle this issue in a more organized and simple manner and with a more minimalist approach than keeping dozens of random disorganized notes in a note application for short term planning.&lt;/p&gt;

&lt;p&gt;I decided that each event or activity needed to have a day it was assigned to, a location where it would occur, a name for the event, a description of the importance of the event (such as whether it was a low, medium, or high importance event), and a category for the event (such as whether it was about business, recreation, or was a creative activity for example).&lt;/p&gt;

&lt;p&gt;I set up the Rails API backend for the application by navigating to the directory where I wanted to create the application and entering into terminal the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new planner --api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I set up the necessary migrations, models and controllers for the events and the categories that these activities belonged to.&lt;/p&gt;

&lt;p&gt;I ran the migrations, then defined the models and the necessary methods for the controllers. Then I seeded the database with some example events and event categories. After this I moved all the files and folders except the README.md file into a new backend folder.&lt;/p&gt;

&lt;p&gt;While in the uppermost folder, or root directory, of the application, I used the create-react-app generator to create a new React application in a new frontend folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app planner-frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the src folder in the frontend I created a components folder and then created presentation component files and container component files in that folder. Then I built out the presentation components and part of the container components for the application in JSX. &lt;/p&gt;

&lt;p&gt;I then imported these components to the App.js file, and modified the App.css file to add some CSS styling. Next I installed React Router by running the following code while in the frontend folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-router-dom@5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installed version 5 of React Router. I then imported BrowserRouter and Route into the index.js file and set up three different routes in the index.js file.&lt;/p&gt;

&lt;p&gt;I then installed Redux in order to use it for state management by running the following commands in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install redux

npm install react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also installed Redux Thunk in order to use it for asynchronous requests in my application with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save redux-thunk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From there I continued to build out and design the components of the project until it had the functionality and appearance I needed it to have for its use as a short term planner.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Firebase Authentication with Next</title>
      <author>Chinwendu Agbaetuo</author>
      <pubDate>Fri, 12 Nov 2021 18:15:22 +0000</pubDate>
      <link>https://dev.to/dindustack/firebase-authentication-with-next-4ckp</link>
      <guid>https://dev.to/dindustack/firebase-authentication-with-next-4ckp</guid>
      <description>&lt;p&gt;I had to work on a project that required me to setup Firebase authentication. This is my first time using Firebase, after countless research and numerous YouTube tutorials. I finally got a hang of it, so I would love to share how I was able to configure it as well as setup protected routes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step One: Setup Firebase Console&lt;/strong&gt;&lt;br&gt;
To setup the console this &lt;a href="https://www.youtube.com/watch?v=awd_oYcmrRA&amp;amp;t=528s"&gt;tutorial&lt;/a&gt; was helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step Two: Install Firebase packages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add firebase&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;yarn add react-firebase-hooks&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step Three: Create .env.local file and add setup Firebase configuration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .env.local &lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;AUTH&lt;/span&gt; &lt;span class="nx"&gt;DOMAIN&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_PROJECT_ID&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;PROJECT&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;STORAGE&lt;/span&gt; &lt;span class="nx"&gt;BUCKET&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;SENDER&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_APP_ID&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;APP&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt; &lt;span class="nx"&gt;MEASUREMENT&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step Four: Setup Firebase configuration file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//firebaseClient.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/compat/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/compat/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/compat/firestore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Nextjs Web Firebase configuration&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_PROJECT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_APP_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;measurementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebaseConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="sr"&gt;/already exists/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Firebase initialization error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step Five: Pass firebase auth state where it is needed&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// google-login.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-firebase-hooks/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config/firebaseClient&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;GoogleSignIn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;googleProvider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;                
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; 
                  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;photoURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;              &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;                &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleLogin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nx"&gt;Login&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)}&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step Six: Protected routes&lt;/strong&gt;&lt;br&gt;
Protecting routes that can only be accessed when user is authenticated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// profile.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-firebase-hooks/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config/firebaseClient&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Navigate to login page if user isn't authenticated &lt;/span&gt;
&lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;302&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step Seven: Pass Environment variables&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;.env.local&lt;/code&gt; file is included in the &lt;code&gt;.gitignore&lt;/code&gt; file, that means it needs to be configured on the hosting platform. If hosting with &lt;a href="https://www.vercel.com"&gt;vercel&lt;/a&gt;, got the &lt;code&gt;project settings&lt;/code&gt;, proceed to the &lt;code&gt;Environment Variables&lt;/code&gt; and fill in the Firebase configuration.&lt;/p&gt;

&lt;p&gt;Please, let me know, if this method worked for you, or what can be improved. Thanks for reading!!! &lt;/p&gt;

</description>
      <category>firebase</category>
      <category>authentication</category>
      <category>nextjs</category>
      <category>vercel</category>
    </item>
    <item>
      <title>Kairo.js in depth - 1: `Cell`</title>
      <author>3Shain</author>
      <pubDate>Fri, 12 Nov 2021 17:59:25 +0000</pubDate>
      <link>https://dev.to/3shain/kairojs-in-depth-1-cell-f0b</link>
      <guid>https://dev.to/3shain/kairojs-in-depth-1-cell-f0b</guid>
      <description>&lt;p&gt;&lt;code&gt;Cell&lt;/code&gt; is the most important concept in kairo. &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Cell&lt;/code&gt; is a &lt;strong&gt;readonly reference&lt;/strong&gt; of a &lt;strong&gt;predictable &amp;amp; immutable&lt;/strong&gt; value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;readonly reference&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// literally, a reference, readonly&lt;/span&gt;
  &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;.current&lt;/code&gt; always gives you the latest value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;predictable&lt;/strong&gt; &amp;amp; &lt;strong&gt;immutable&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A constant is definitely predictable
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forty_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;immutable&lt;/strong&gt; &lt;em&gt;state&lt;/em&gt; is predictable
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// mutate the state &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;A derivation declared by predictable expression (&lt;em&gt;referential transparency &amp;amp; side-effect-free&lt;/em&gt;) of predictable value is predictable.
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// given `weight` and `height` are both `Cell&amp;lt;number&amp;gt;`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BMI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The data relationship &lt;strong&gt;always holds&lt;/strong&gt;&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Reaction&lt;/code&gt; can respond to the change of &lt;code&gt;Cell&lt;/code&gt;s&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Reaction&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;changed!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;
  &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// immediatey execute the (side-effects) program and pass the return value &lt;/span&gt;
&lt;span class="c1"&gt;// any tracked dependency change will cause console to output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Plus one caveat: &lt;em&gt;Mutating (Cell) state in dependency tracking context (&lt;code&gt;$ =&amp;gt; {... }&lt;/code&gt;) is forbidden.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That is all definitions of the &lt;em&gt;Cell&lt;/em&gt; primitives.&lt;/p&gt;

&lt;p&gt;It's simple. Isn't it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This blogpost is about the evolution of the interface design and implementation&lt;/strong&gt;. There are plenty of similar "fine-grained reactivity" libraries, and their design can reflect some underlying philosophies in certain degree. However in my (may be biased) opinion, the kairo's is one of the most simple and consistent. And I'll demonstrate the reasons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#readwrite-segregation"&gt;
  &lt;/a&gt;
  Read/Write segregation
&lt;/h2&gt;

&lt;p&gt;In the initial stage, there are several design candidates&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1 mobx like&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// read&lt;/span&gt;
&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// write&lt;/span&gt;

&lt;span class="c1"&gt;// 2 vue like&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// read&lt;/span&gt;
&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// write&lt;/span&gt;

&lt;span class="c1"&gt;// 3 s-js, KO&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// read&lt;/span&gt;
&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// write&lt;/span&gt;

&lt;span class="c1"&gt;// 4 solid-js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getCell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCell&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;getCell&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// read&lt;/span&gt;
&lt;span class="nx"&gt;setCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// write&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact &lt;strong&gt;1 to 3&lt;/strong&gt; are almost identical except for syntax. So the only debate is: &lt;strong&gt;read/write segregation OR not?&lt;/strong&gt; Obviously I've chosen to segregate them, because it's &lt;strong&gt;conceptually simpler&lt;/strong&gt;. It sounds counter-intuitive as we obviously write more bytes of code. So let's do some brain-storming.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Think about the question: "is a Cell always writable?". The answer is not, if the Cell is derived by an expression (computed).

&lt;ul&gt;
&lt;li&gt;But there are some implementations support defining a setter for derived value.&lt;/li&gt;
&lt;li&gt;But is there always a inverse map exsiting? e.g. &lt;code&gt;squared := Math.pow(x,2)&lt;/code&gt;, then what if a negative &lt;code&gt;sqaured&lt;/code&gt; provided? Are you going to find some &lt;em&gt;complex&lt;/em&gt; number? That is not simple (pun here)&lt;/li&gt;
&lt;li&gt;So if a Cell is not always writable, then &lt;em&gt;write(mutate) to a Cell&lt;/em&gt; should be an exceptional case. Then it might be reasonable to define &lt;code&gt;class WriteableCell extends Cell&lt;/code&gt;  and make Cell readonly by default. (But the suprising fact is, in many implementations, &lt;code&gt;ReadonlyXyz&lt;/code&gt; becomes the exception). To define a subclass is still not optimal, see below.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The Rule of Least Power: "Does everyone who has a reference to a Cell has to mutate the Cell (state)?"

&lt;ul&gt;
&lt;li&gt;Encapsulation: &lt;em&gt;Mutation considered harmful&lt;/em&gt;. You should locallize your mutations, like do it inside a local function and export the function (usually called "action"/ or "method" in OOP), instead of giving out the full power.&lt;/li&gt;
&lt;li&gt;Otherwise it could be hard to reason about your program: "where is the state changed?" That's obvious not something comes from simplicity.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's why read/write segregation is chosen and &lt;code&gt;Cell&lt;/code&gt; always has a &lt;em&gt;readonly&lt;/em&gt; attribute: for simplicity (and consistency in certain degree). Although you can still share the setter function somewhere else, at least this design naturally discourage people to do that, comparing to a full-access reference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-tracking"&gt;
  &lt;/a&gt;
  Dependency tracking
&lt;/h2&gt;

&lt;p&gt;Then let's talk about reactivity. Below is a previous design.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// read&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// derive&lt;/span&gt;
&lt;span class="nx"&gt;reaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks expressive. But there is a (abstract) glitch: &lt;code&gt;.value&lt;/code&gt; behaves differently depending on context.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inside &lt;code&gt;computed&lt;/code&gt; or &lt;code&gt;.track&lt;/code&gt;, it retrieves the current value and implicitly &lt;strong&gt;track (log) a dependency&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;In other cases, it just return the latest value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This design is acceptable but far from perfect. There is an edge case: if I what to get the value of Cell but do not track in a dependency tracking context (referential transparency not violated if it is constant). To achieve this, there must be an extra API &lt;code&gt;untrack&lt;/code&gt; to provide a escape hatch and more (unnecesary) explanation on it. Obviously the two contextual operations overlap in functionality but separating them should make it simpler.&lt;/p&gt;

&lt;p&gt;So the design then comes this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// read&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// derive&lt;/span&gt;
&lt;span class="nx"&gt;reaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// DollarScript™️&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hmm.......&lt;/p&gt;

&lt;p&gt;I from the bottom of my heart think this is ........&lt;/p&gt;

&lt;p&gt;I know this looks more "correct" than previous one, but I don't like the design from the perspective of human nature. And there are more behaviors to be defined: what about &lt;code&gt;.$&lt;/code&gt; not in a dependency tracking context? Should it throw or behave the same like &lt;code&gt;.current&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So it soon becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// read&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// derive&lt;/span&gt;
&lt;span class="nx"&gt;reaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// DollarScript 2.0™️&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which is the current design. It looks much better. The &lt;code&gt;$&lt;/code&gt; is just a parameter and you can name it &lt;code&gt;get&lt;/code&gt;,&lt;code&gt;track&lt;/code&gt;, whatever.....&lt;/p&gt;

&lt;p&gt;Out of my expectation it provides more benefits. Firstly it benifits the implementation: it's simplified, because we don't need to manipulate unsafe global variables (to simulate a context closure). Secondly it guarantees the safety of dependency tracking. It becomes &lt;strong&gt;explicit&lt;/strong&gt;, and you are encouraged to clearly declare all the dependencies at top level of &lt;em&gt;tracked function&lt;/em&gt;, so less chances to make mistakes.&lt;/p&gt;

&lt;p&gt;By the way, I didn't cover why &lt;code&gt;.value&lt;/code&gt; becomes &lt;code&gt;.current&lt;/code&gt; in the middle, it's another topic and will be elaborated in another post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h2&gt;

&lt;p&gt;The design part is almost finished. Let's talk about implementation. Let's get start with error handling, which I believe few implementations have made it correct.&lt;/p&gt;

&lt;p&gt;The critical issue is the behavior when an error occurred while computing derived Cell's latest value. Report then ignore or propagate it to downstream dependencies?&lt;/p&gt;

&lt;p&gt;Let's do brain-storming again&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Will an error ever be occured if a proper relationship is defined?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Well, you might have a proper relationship of data but that doesn't mean you will have proper dependency inputs. Your &lt;code&gt;f(x,y,z...)&lt;/code&gt; might have &lt;strong&gt;no definition&lt;/strong&gt; to given sets of inputs (and they might be reflected by errors). e.g. divide by zero (despite JavaScript treats 0/0 as NaN )&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Ignoring and using a stale history value?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is almost identical to &lt;code&gt;empty catch block&lt;/code&gt;. Your program might continue to work but it has been in a &lt;em&gt;bad state&lt;/em&gt;. Then the bad state will eventually reflect as error somewhere else (butterfly effect).&lt;/li&gt;
&lt;li&gt;How to handle the error? You should do something to recover to a &lt;em&gt;good state&lt;/em&gt;, or make the application crash immediately.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Just throw where causes value to update?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then we lose the possibility to recover from the error.&lt;/li&gt;
&lt;li&gt;But it is possible if we treat error as a special kind of value. And the whole system is still &lt;strong&gt;predictable and consistent&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently a Cell can hold a error as value, and whenever you read it, the error will be thrown. Thus a derived Cell depends on error Cell will also becomes an error Cell, and eventually the error will be propagated to &lt;code&gt;.track&lt;/code&gt; and abort the executing side-effects. Then the system could recover if the upstream error is eliminated (because even the error exists, the dependency is still tracked, so will be notified of any future updates). Also you can choose not to recover but let someone else handle it , e.g. React's &lt;code&gt;ErrorBoundary&lt;/code&gt;. In summary, a Cell is always defined (a value or error), so predictable. If you familiar with FP, then you can think about &lt;code&gt;Either&lt;/code&gt; built-in. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Actually this post is not finishied yet.&lt;/p&gt;

&lt;p&gt;To be continue.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Typescript Support For Cypress</title>
      <author>Jordan Powell</author>
      <pubDate>Fri, 12 Nov 2021 17:58:18 +0000</pubDate>
      <link>https://dev.to/cypress/typescript-support-for-cypress-2hme</link>
      <guid>https://dev.to/cypress/typescript-support-for-cypress-2hme</guid>
      <description>&lt;p&gt;For someone who has worked with Typescript for the past 5+ years, I really miss it when it's not there. I find adding types to my javascript code a nice comfort. Writing automated tests with Cypress is no exception. With that being said, adding Typescript support to your Cypress applications is easy peasy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Cypress ships with &lt;a href="https://github.com/cypress-io/cypress/tree/develop/cli/types"&gt;official type declarations&lt;/a&gt; for &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;. This allows you to write your tests in TypeScript. The first thing we need to do is install the &lt;code&gt;typescript&lt;/code&gt; dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to update our &lt;code&gt;tsconfig.json&lt;/code&gt; file with the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dom"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"cypress"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"**/*.ts"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we need to rename all of our &lt;code&gt;.spec.js&lt;/code&gt; integration files to &lt;code&gt;.spec.ts&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-commands"&gt;
  &lt;/a&gt;
  Custom Commands
&lt;/h2&gt;

&lt;p&gt;If you are like me you've found the path to this point super simple! However, if your application is using &lt;a href="https://docs.cypress.io/api/cypress-api/custom-commands"&gt;Cypress's Custom Commands API&lt;/a&gt; your Cypress application is now angry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhkNHuR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn2qv3hx7nrnyxn4nezq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhkNHuR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn2qv3hx7nrnyxn4nezq.png" alt="Typescript Error" width="533" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry this is easy to fix! Let's open the file that contains our custom commands &lt;em&gt;(usually &lt;code&gt;support/commands.ts&lt;/code&gt;)&lt;/em&gt;. This file should contain all of your commands as well as a Cypress namespace with a Chainable Interface. It is in this Interface we will add a reference to our custom command(s).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Cypress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Chainable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getBySel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Chainable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Cypress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getBySel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;Cypress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CanReturnChainable&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[data-test=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voilà our Cypress application is happy and now has full support for Typescript!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-resources"&gt;
  &lt;/a&gt;
  More Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.cypress.io/guides/tooling/typescript-support#Install-TypeScript"&gt;Our complete guide on adding Typescript support to your application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support"&gt;Typescript Support Doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>cypress</category>
      <category>e2e</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Adding tests for my static site generator using Jest</title>
      <author>Tuan Thanh Tan</author>
      <pubDate>Fri, 12 Nov 2021 17:56:31 +0000</pubDate>
      <link>https://dev.to/tuanthanh2067/adding-tests-for-my-static-site-generator-using-jest-2gpc</link>
      <guid>https://dev.to/tuanthanh2067/adding-tests-for-my-static-site-generator-using-jest-2gpc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello everyone, my name is Dustin. Today, I wanted to talk about testing in &lt;strong&gt;nodejs&lt;/strong&gt; project. This is literally one of my first time writing tests using Jest library. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason"&gt;
  &lt;/a&gt;
  Reason
&lt;/h2&gt;

&lt;p&gt;Testing is very important when it comes to a good project. Either your project is small or big, testing should always be important and be paid attention as no developers can cover every potential error or bug. When the project grows, more and more code will be added not only by you but other developers, it is very easy to break things. A new added function seems to work perfectly itself but bringing it to the project is another different story as it involves other factors and sometimes it will break other people's code. However, testing will take care of that as it will help developers fully run the project with every edge cases, and even good cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#experience"&gt;
  &lt;/a&gt;
  Experience
&lt;/h2&gt;

&lt;p&gt;At the beginning, I didn't think that it would take much of the time as it looks very simple and easy to write. But when I started write the very first one, I was like &lt;em&gt;what should I test with this code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Testing is not way too difficult but it has its own challenges. For example, writing a feature in nodejs just takes 15 mins and 30 lines of code, however, writing testings for that feature will take 2 to 3 times that amount, or more. Testing doesn't require much of researching but a lot of thinking to make sure that I've covered enough cases. More testings can be added later when I discover a case that can break your code. I haven't got a chance to finish my testing code but I'll try my best to add more testings for my project.&lt;/p&gt;

&lt;p&gt;As I have around 6 classes, so I'll have 5 to 6 testing files. There's a class that has 2 functions that call an external library, so I don't need to add testings for that class.&lt;/p&gt;

&lt;p&gt;However, there' still a few errors with my testing code as it generates some warnings while testing and I have not done with my e2e testing part. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-test"&gt;
  &lt;/a&gt;
  How to test
&lt;/h2&gt;

&lt;p&gt;Testing the project is easy and can be done by using &lt;code&gt;npm test&lt;/code&gt; to run all the tests, or &lt;code&gt;npm test e2e&lt;/code&gt; to just run end-to-end testing.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tuanthanh2067/cv-ssg"&gt;The project can be found here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Flowbite - open source component library built with Tailwind CSS</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Fri, 12 Nov 2021 17:50:35 +0000</pubDate>
      <link>https://dev.to/themesberg/show-dev-flowbite-open-source-component-library-built-with-tailwind-css-1070</link>
      <guid>https://dev.to/themesberg/show-dev-flowbite-open-source-component-library-built-with-tailwind-css-1070</guid>
      <description>&lt;p&gt;Hello DEV community 👋&lt;/p&gt;

&lt;p&gt;I just wanted to let you know that I helped build an &lt;a href="https://github.com/themesberg/flowbite"&gt;open source component library&lt;/a&gt; built with the utility classes from Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kfzn5mBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91gqecaupx5lgwbgmf5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfzn5mBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91gqecaupx5lgwbgmf5b.png" alt="Flowbite Github repository" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe that it's an important and useful project for those have been using Tailwind CSS as it can give you a pretty solid foundation when you want to build websites.&lt;/p&gt;

&lt;p&gt;I love the utility classes from Tailwind CSS, but the lack of components makes building websites a bit slower in some ways compared to Bootstrap or Bulma.&lt;/p&gt;

&lt;p&gt;With Flowbite you get the best of two worlds: flexibility of using the utility classes but also a set of components to quickly get started.&lt;/p&gt;

&lt;p&gt;The project is open source under the MIT license and you can &lt;a href="https://github.com/themesberg/flowbite"&gt;check it out on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you appreciate the project, a lucky star would be very welcome! 🤗&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>opensource</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn Generators in Python with (Examples)</title>
      <author>Adarsh Rawat</author>
      <pubDate>Fri, 12 Nov 2021 17:47:28 +0000</pubDate>
      <link>https://dev.to/adarshrawat7400/learn-generators-in-python-with-examples-ad3</link>
      <guid>https://dev.to/adarshrawat7400/learn-generators-in-python-with-examples-ad3</guid>
      <description>&lt;p&gt;In this Article we will going to look following topics&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding &lt;strong&gt;Generators&lt;/strong&gt; in Python,with Examples&lt;/li&gt;
&lt;li&gt;Also how to construct our own &lt;em&gt;Generator&lt;/em&gt; function &lt;/li&gt;
&lt;li&gt;Advantages of using &lt;em&gt;Generator&lt;/em&gt; function instead of &lt;em&gt;regular&lt;/em&gt; function in some cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#generators-"&gt;
  &lt;/a&gt;
  Generators :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Generator&lt;/em&gt; are the special function which returns an traversal object which used to iterate over a &lt;em&gt;collection of values&lt;/em&gt;, it is also used to create &lt;em&gt;iterators&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is can also be expressed in a way which is simiar to &lt;em&gt;list compreshension&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just like iterator &lt;em&gt;next()&lt;/em&gt; method we can also iterate over &lt;em&gt;generator&lt;/em&gt; using &lt;em&gt;generator.next()&lt;/em&gt; to iterate over the &lt;em&gt;generator&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-geneartor-"&gt;
  &lt;/a&gt;
  Creating a Geneartor :-
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is simple to create a &lt;em&gt;Generator&lt;/em&gt; function if you have worked with regular function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In &lt;em&gt;Generator&lt;/em&gt; function instead of using &lt;em&gt;return&lt;/em&gt; statement we use yield statement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A function with &lt;em&gt;yield&lt;/em&gt; keyword in it is called a &lt;em&gt;Generator&lt;/em&gt; function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;generator&lt;/em&gt; throws &lt;em&gt;StopIteration&lt;/em&gt; Exception when &lt;em&gt;next()&lt;/em&gt; method called on the last &lt;em&gt;element&lt;/em&gt; in the genearator,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have to &lt;em&gt;explicitly&lt;/em&gt; handle &lt;em&gt;StopIteration&lt;/em&gt; Exception when&lt;br&gt;
  using &lt;em&gt;next()&lt;/em&gt; method with &lt;em&gt;generator&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's use take an example to understand the above points :-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Normal function
def func():
    letters = ['a', 'b', 'c', 'd', 'e']
    for c in letters:
        return c

# Generator function
def generator_func():
    letters = ['a', 'b', 'c', 'd', 'e']
    for c in letters:
        yield c

print("Normal function :-")
print(func())

print("\nGenerator function :-")
print(generator_func())

print("\nIterating over generator using next() method")
gen = generator_func()
print(next(gen))
print(next(gen))
print(next(gen))
print(next(gen))
print(next(gen))
print(next(gen))

Output :-

Normal function :-
a

Generator function :-
&amp;lt;generator object generator_func at 0x00000180318F9A10&amp;gt;

Iterating over generator using next() method
a
b
c
d
e
Traceback (most recent call last):
  File "C:\Users\adars\Desktop\test.py", line 26, in &amp;lt;module&amp;gt;
    print(next(gen))
StopIteration   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now , you can se a normal function return the value which we have return but , &lt;em&gt;Generator&lt;/em&gt; function return &lt;em&gt;generator&lt;/em&gt; object (traversal object)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;we can &lt;em&gt;iterate&lt;/em&gt; over the &lt;em&gt;generator object&lt;/em&gt;, let's see how?&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in generator_func():
    print(i)

Output :-
a
b
c
d
e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we iterated over the generator object in the above code,&lt;/p&gt;

&lt;p&gt;Now you're probably thinking what is the &lt;strong&gt;difference&lt;/strong&gt; between :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;function with return&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;function with yield&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#function-with-return-statement"&gt;
  &lt;/a&gt;
  &lt;strong&gt;function with &lt;em&gt;return&lt;/em&gt; statement&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;when the &lt;em&gt;return&lt;/em&gt; statement called , the function terminates it execution
and return the value, removing the function from the &lt;em&gt;call stack&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#function-with-yield-statement"&gt;
  &lt;/a&gt;
  &lt;strong&gt;function with &lt;em&gt;yield&lt;/em&gt; statement&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;yield&lt;/em&gt; controls the flow of &lt;em&gt;Genearator&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;yield&lt;/em&gt; pauses the function state and  &lt;em&gt;yielded&lt;/em&gt; value to the caller&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;yield&lt;/em&gt; resume the function execution on &lt;em&gt;yield&lt;/em&gt; statement successfully&lt;/li&gt;
&lt;li&gt;there can be multiple &lt;em&gt;yield&lt;/em&gt; statement per &lt;em&gt;Generator&lt;/em&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#generator-with-multiple-yield-statements"&gt;
  &lt;/a&gt;
  Generator with multiple &lt;em&gt;yield&lt;/em&gt; statements
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def generator_func2():
    numbers = [1, 2, '3', '4', 5, 6, '7', 8, 9, '10']
    for num in numbers:
        if type(num) == int:
            yield f"{num} is an integer form"
        elif type(num) == str:
            yield f"{num} is an string form"



for i in generator_func2():
    print(i)


Output :-
1 is an integer form
2 is an integer form
3 is an string form
4 is an string form
5 is an integer form
6 is an integer form
7 is an string form
8 is an integer form
9 is an integer form
10 is an string form
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we created a &lt;em&gt;Generator&lt;/em&gt; function which uses&lt;br&gt;
multiple &lt;em&gt;yield&lt;/em&gt; statments&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-generator-in-one-line"&gt;
  &lt;/a&gt;
  Creating &lt;em&gt;Generator&lt;/em&gt; in one line
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Just like &lt;em&gt;list comprehension&lt;/em&gt; , we can create &lt;em&gt;Generators&lt;/em&gt; in single line&lt;/li&gt;
&lt;li&gt;Instead of &lt;em&gt;[ ]&lt;/em&gt; brackets ,we use &lt;em&gt;( )&lt;/em&gt; to create a &lt;em&gt;generator&lt;/em&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbers_generator = (i for i in range(10))
print(type(numbers_generator))

for num in numbers_generator:
    print(num)

Output :-
0
1
2
3
4
5
6
7
8
9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we have created a &lt;em&gt;Generator&lt;/em&gt; function  which belong to &lt;em&gt;generator&lt;/em&gt; class, in a way similar to &lt;em&gt;list comprehension&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;let's take some more example of &lt;em&gt;generators&lt;/em&gt; function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If your fimilar with &lt;em&gt;range()&lt;/em&gt; function in python , we will going to implement our own &lt;em&gt;range()&lt;/em&gt; function with the help of &lt;em&gt;generators&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def range(start = 0,stop = 0,stepby = 1):
    yield start
    while(start &amp;lt; stop):
        yield start+stepby
        start += stepby

print("range() function implementation :-")
print(type(range(0,10)))


for i in range(0,10):
    print(i)

print("\n---------\n")

for i in range(0,10,2):
    print(i)

Output :-
range() function implementation :-
&amp;lt;class 'generator'&amp;gt;
0
1
2
3
4
5
6
7
8
9
10

---------

0
2
4
6
8
10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have created a simple &lt;em&gt;implementation&lt;/em&gt; of &lt;em&gt;range()&lt;/em&gt; function &lt;br&gt;
using &lt;em&gt;generators&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;We will going to write two implementation of  *fibonacci sequence&lt;/em&gt; using &lt;em&gt;generators&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def fibo_seq_generator(n):

    # Initialize first two Fibonacci Numbers 
    a, b = 0, 1

    # One by one yield next Fibonacci Number
    while a &amp;lt; n:
        yield a
        a, b = b, a + b

print("Fibonacci sequence using generator :- ")
for i in fibo_seq_generator(20):
    print(i)

Output :- 
Fibonacci sequence using generator :-
0
1
1
2
3
5
8
13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have covered many examples of &lt;em&gt;generators&lt;/em&gt; and&lt;br&gt;
learned how to create &lt;em&gt;generators&lt;/em&gt;, now we're going to see &lt;br&gt;
the advantages of generator :-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-genearators"&gt;
  &lt;/a&gt;
  Advantages of &lt;strong&gt;Genearators&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is Easy to Implement a &lt;em&gt;generators&lt;/em&gt; relatively compared to&lt;br&gt;
an iterator , which requires you to implement &lt;strong&gt;&lt;em&gt;iter&lt;/em&gt;_()&lt;/strong&gt; and&lt;br&gt;
&lt;strong&gt;&lt;strong&gt;next&lt;/strong&gt;()&lt;/strong&gt; function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Genearators&lt;/em&gt; are memory efficient when working with large&lt;br&gt;
sequence of numbers because &lt;em&gt;yield&lt;/em&gt; statement give value to&lt;br&gt;
the caller function whenever &lt;em&gt;yield&lt;/em&gt; line gets executed ,&lt;br&gt;
So it doesn't have to store the entire sequence in the memory,&lt;br&gt;
whereas in case of normal function ,it stores the sequence&lt;br&gt;
somewhere in memory(in call stack) before returning the result.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With &lt;em&gt;Generators&lt;/em&gt; we can generate infinite sequence of numbers without needing to worry about computer memory usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Generators&lt;/em&gt; used in &lt;strong&gt;Data Pipeline&lt;/strong&gt; which provides the facility to process large datasets or stream of data without using extra computer memory.   &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with this we have successfully completed&lt;br&gt;
&lt;em&gt;Generators in Python with (Examples) Article&lt;/em&gt; &lt;br&gt;
hope you all have understand the topics&lt;br&gt;
covered in this Article.&lt;/p&gt;

&lt;p&gt;:-)&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>beginners</category>
      <category>generators</category>
    </item>
    <item>
      <title>Tips to improve your django skills  - part 1 </title>
      <author>Snehal Adbol</author>
      <pubDate>Fri, 12 Nov 2021 17:40:05 +0000</pubDate>
      <link>https://dev.to/snehal_02/tips-to-improve-your-django-skills-part-1-25jp</link>
      <guid>https://dev.to/snehal_02/tips-to-improve-your-django-skills-part-1-25jp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#makemigrations-and-then-sqlmigrate"&gt;
  &lt;/a&gt;
  makemigrations and then sqlmigrate
&lt;/h2&gt;

&lt;p&gt;I only now discovered sqlmigrate and regret not having known about it    before. sqlmigrate prints the SQL for your migrations, so run a fast    sqlmigrate after creating a new migration. Very often, you will see    that this migration is not performing any SQL migrations; for    example, if you change a field, you will frequently get the following    sqlmigrate output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BEGIN;  
--  
-- Alter field name on player  
--  
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I recommend giving it a shot if you want to learn more about Django migration. You'll quickly figure out which modifications have an impact on your database and which don't. As a consequence, learning SQL on the go is always a good idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-time-zone-and-stop-using-datetoday"&gt;
  &lt;/a&gt;
  Use time zone and stop using date.today()
&lt;/h2&gt;

&lt;p&gt;Most users don't worry about time zone at the start of a project, so they're content to use datetime.datetime.now() and datetime.date.today() . However, you may eventually encounter strange errors in which certain computations appear to be off by two hours or even a day.&lt;/p&gt;

&lt;p&gt;I know what it's like to attempt to correct all these errors by making all your thousands of now() and today() calls time zone aware, because I've had to do it twice for larger applications. You'll most likely have to do them one at a time, and you'll always run into difficulties where adding a time zone later is difficult.&lt;/p&gt;

&lt;p&gt;This is readily avoided by just using time zones all of the time. Especially because Django is so wonderful at supporting it. So, don't be frightened, and just support time zones, even if you believe you don't need them. Add the setting USE TZ = True and then always call django.utils.timezone.now() or django.utils.timezone.now().date.&lt;/p&gt;

&lt;p&gt;More information about Django's time zones can be found &lt;a href="https://docs.djangoproject.com/en/dev/topics/i18n/timezones/"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-forms-to-views-py"&gt;
  &lt;/a&gt;
  Adding forms to views. py
&lt;/h2&gt;

&lt;p&gt;It is advised that you put all of your forms in a separate &lt;code&gt;forms.py&lt;/code&gt; file, however since forms are merely a method of styling a view, it makes more sense to put each form at the top of its view. You will be working on the view and the form at the same time, so if your &lt;code&gt;models.py&lt;/code&gt; becomes too cluttered, you may transfer some of your models into a second model file. That's true, your models don't all have to be in the same file.&lt;/p&gt;

&lt;p&gt;This configuration enables you to work on both your form and your view at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-notes"&gt;
  &lt;/a&gt;
  Closing notes
&lt;/h2&gt;

&lt;p&gt;Thank you for spending the time to read my blog post! I hope these three tips have aided you in improving your Django work. Please let me know in the comments below whether you found these strategies useful or if you've discovered even better solutions, since I'm really interested in your feedback!&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href="https://github.com/Snehal0203"&gt;github&lt;/a&gt; and &lt;a href="https://mobile.twitter.com/SnehalAdbol"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>programming</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What exactly is IPFS?</title>
      <author>Enoch Chejieh</author>
      <pubDate>Fri, 12 Nov 2021 17:37:02 +0000</pubDate>
      <link>https://dev.to/ecj222/what-exactly-is-ipfs-3a8c</link>
      <guid>https://dev.to/ecj222/what-exactly-is-ipfs-3a8c</guid>
      <description>&lt;p&gt;InterPlanetary File System (IPFS) is a term used to describe a peer-to-peer (p2p) distributed file-sharing system for storing and accessing data.&lt;/p&gt;

&lt;p&gt;IPFS is one of a few projects that are part of the Protocol Labs Organization, which was also founded by Benet. Inter-Planetary Linked Data (IPLD) and Filecoin are two Protocol Labs projects that are closely related to IPFS. The IPLD data model is a data model for distributed data structures such as blockchains. This model makes it simple to store and access blockchain data via IPFS. Users who store data on IPFS will be rewarded with Filecoin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-ipfs-work"&gt;
  &lt;/a&gt;
  How does IPFS work?
&lt;/h3&gt;

&lt;p&gt;Let's imagine you just uploaded some content to IPFS. That content will then be split up into small pieces of data, the data is then given a certain unique fingerprint called a cryptographic hash.&lt;/p&gt;

&lt;p&gt;When multiple people upload the same content to IPFS, it will only be created once and that makes the network very efficient.&lt;/p&gt;

&lt;p&gt;Also when you need to look up content to view or download on IPFS you don't need to remember the hash assigned to that content, every content on IPFS can be found using Inter-Planetary Naming System (IPNS), a human-readable decentralized naming system for IPFS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-ipfs"&gt;
  &lt;/a&gt;
  Why use IPFS?
&lt;/h3&gt;

&lt;p&gt;The internet as it is today is built on technologies like Hypertext Transfer Protocol (HTTP), Domain Name System (DNS), and the way it works is by looking up IP addresses and forwarding the content from the IP address, This is called location-based addressing.&lt;/p&gt;

&lt;p&gt;When a user searches for a website, let's say &lt;a href="http://amazon.com"&gt;amazon.com&lt;/a&gt; for instance the user is trusting that whatever is located at that server to be the content that they want and that could be a problem because theirs nothing stopping the content from changing without the user doing anything about it.&lt;/p&gt;

&lt;p&gt;Another problem is that when there's only one source of content it creates constriction and centralization. On the contrary, IPFS uses content-based addressing. So when a user is requesting a piece of data it retrieves the content and not the location of that content which is more efficient. This really makes the web a lot more robust and protected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Software developers are currently moving to decentralized data networks as a way to build new models around data ownership and to develop a better internet.&lt;/p&gt;

&lt;p&gt;This article is just an introduction to IPFS, there's still a lot to know about this wonderful technology. If you want to know more you can check out their &lt;a href="https://ipfs.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>web3</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
