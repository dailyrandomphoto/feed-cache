<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I started my Opensource journey with just 1 line of code!</title>
      <author>Saharsh Laud</author>
      <pubDate>Tue, 26 Oct 2021 19:00:18 +0000</pubDate>
      <link>https://dev.to/saharshlaud/how-i-started-my-opensource-journey-with-just-1-line-of-code-285k</link>
      <guid>https://dev.to/saharshlaud/how-i-started-my-opensource-journey-with-just-1-line-of-code-285k</guid>
      <description>&lt;p&gt;With the changing times, the recruitment process in many companies has evolved significantly as organizations are now more interested in skills in an individual rather than their educational qualifications. Many companies have even removed the criteria for college degrees in their hiring process and only look at your skills and expertise. &lt;/p&gt;

&lt;p&gt;Now you might think, how can I show my skills and expertise to a recruiter? The most straightforward and powerful answer is Open-source and Github. Contributing to Open-source projects is considered one of the most effective ways to demonstrate your expertise and your ability to take the initiative on your own and collaborate with a community. &lt;/p&gt;

&lt;p&gt;GitHub is the most popular platform for Open-source collaborations, but it might be slightly challenging to get started with Open-source contributions as a beginner. &lt;br&gt;
Worry no more since I have brought the best beginner-friendly GitHub repository to give you the required boost in your Open-source journey.&lt;/p&gt;

&lt;p&gt;So let us get started with the entire process that I've myself used to begin my opensource collaboration journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-familiar"&gt;
  &lt;/a&gt;
  Let's get familiarüòé
&lt;/h2&gt;

&lt;p&gt;Before diving into our open-source contribution on GitHub, let us understand some of the important terms we will come across while contributing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Repository -&lt;/strong&gt; It is a storage space or a directory where your projects can reside. You can keep all your code files, text files, image files, etc., inside a repository.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Fork -&lt;/strong&gt; It is a copy of the GitHub repository under your account that you can manage. This way, you can make changes to a project without affecting the original repository and even fetch updates from or submit changes to the original repository with pull requests.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Clone -&lt;/strong&gt; It is a copy of the repository on &lt;a href="http://github.com/"&gt;GitHub.com&lt;/a&gt; on your local system. Cloning pulls down a full copy of all the online repository data at that point in time, including all versions of every file and folder in the repo.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Branch -&lt;/strong&gt; It is a new version of the repository that diverges from the main working project and can be used to create an isolated development space without affecting other branches. You can merge a branch into another branch using a pull request.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Commit -&lt;/strong&gt; It is similar to the save command except that every time you save, it creates a unique ID (‚ÄúSHA‚Äù or ‚Äúhash‚Äù) that allows you to keep a record of what changes were made, when they were made and by whom.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Push -&lt;/strong&gt; It is the process of uploading or committing changes from your local clone repository to the remote repository (i.e. the online repo). Pushing sends the recent commit history from your local repository up to GitHub.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Pull Request -&lt;/strong&gt; It is a way to notify the maintainers about the changes you have pushed in your branch and ask them to review these changes and merge them with the main repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisitesüßê
&lt;/h2&gt;

&lt;p&gt;Before we begin the process for our open-source contribution, let me quickly tell you some prerequisites for this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Git&lt;/strong&gt; - Git backs all GitHub repositories. Since we will be performing all changes on a local copy and then pushing these to the remote repository, we will definitely require Git installed on our system to clone, create a branch and push changes to the remote branch. You can download Git for your system from this link: &lt;a href="https://git-scm.com/"&gt;Git Download&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;VS Code&lt;/strong&gt; - VS Code is an Integrated Development Environment that will help us to perform actions such as clone, branching, push, publish, etc., with minimal effort. We will also make the required code changes using VS Code. You can download VS Code for your system from this link: &lt;a href="https://code.visualstudio.com/download"&gt;VS Code Download&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#time-to-contribute"&gt;
  &lt;/a&gt;
  Time to Contributeü§©üöÄ
&lt;/h2&gt;

&lt;p&gt;Finally, we can get started with our contribution. The project that we will be contributing to is called &lt;a href="https://github.com/firstcontributions"&gt;&lt;strong&gt;First Contributions&lt;/strong&gt;&lt;/a&gt;, which is primarily meant for beginners to open-source and aims at providing them with a simplified guide to make their first contribution. The repository has more than &lt;strong&gt;21k&lt;/strong&gt; stars and more than &lt;strong&gt;40k&lt;/strong&gt; forks so far, showing how popular it is among beginners in the open-source community.&lt;/p&gt;

&lt;p&gt;Let us begin with the steps to make our first contribution to open-source.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1-forking-the-repository"&gt;
  &lt;/a&gt;
  Step-1 : Forking the Repository
&lt;/h3&gt;

&lt;p&gt;The first step to get started with any open-source contribution through GitHub us forking the main project repository. Go to the &lt;a href="https://github.com/firstcontributions/first-contributions"&gt;first-contributions&lt;/a&gt; GitHub repository and fork it by clicking on the fork icon on the top right corner. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yK11tnHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl8zpgnne6j4vkx88lwj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yK11tnHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl8zpgnne6j4vkx88lwj.jpg" alt="Forking Repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how your forked repository will look like: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rw27VAyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zkt3gc680zugjo8dt8d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rw27VAyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zkt3gc680zugjo8dt8d.jpg" alt="Forked Repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step2-cloning-to-local-system"&gt;
  &lt;/a&gt;
  Step-2 : Cloning to local system
&lt;/h3&gt;

&lt;p&gt;The next step is cloning the forked repository to your local system so that you can easily make the required changes. &lt;br&gt;
For this, head over to your forked repository, click on the &lt;strong&gt;Code&lt;/strong&gt; button and copy the URL shown. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-mxZMcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmaq8kis3j0qyxcwevqk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-mxZMcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmaq8kis3j0qyxcwevqk.jpg" alt="Cloning Repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CAREFUL:&lt;/strong&gt; While cloning the repository make sure that you clone the repo you &lt;strong&gt;forked &lt;em&gt;from&lt;/em&gt;&lt;/strong&gt; rather than cloning your repo. Check your browser's address bar and make sure you are cloning your repo and not the original repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next we'll head over to Visual Studio Code to clone the repository. Open the Command Palette by pressing the shortcut key &lt;strong&gt;F1&lt;/strong&gt; and then type in &lt;code&gt;git clone&lt;/code&gt;, only  &lt;code&gt;git&lt;/code&gt;  or  &lt;code&gt;clone&lt;/code&gt;  (it works like a search). Select the Entry  &lt;code&gt;Git: Clone&lt;/code&gt;  and press  &lt;code&gt;Enter&lt;/code&gt;.&lt;br&gt;
If you have properly installed Git on your system you will automatically see the &lt;code&gt;Git: Clone&lt;/code&gt; option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIc-OJfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gwtkgc92fjehqo0uzmw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIc-OJfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gwtkgc92fjehqo0uzmw.jpg" alt="Git Clone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste the URL of the forked repository that you copied earlier and press Enter. &lt;br&gt;
VS Code asks you to select the location at which you want to store your cloned repository. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft7J64go--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w39ch31rse4umdws19nl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft7J64go--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w39ch31rse4umdws19nl.jpg" alt="Cloning to local system"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the location and the cloning process will start automatically. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Th44b6so--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogbitflvyp73998a6q8e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Th44b6so--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogbitflvyp73998a6q8e.jpg" alt="Cloning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the successful clone, VS Code asks you to Open the cloned repository in the same window or a new window. Select any option to see the contents of your cloned repository. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step3-creating-a-branch"&gt;
  &lt;/a&gt;
  Step-3 : Creating a Branch
&lt;/h3&gt;

&lt;p&gt;Now that you've cloned your repository, it's always a good habit to create a branch when you're doing development work that is somewhat experimental in nature. This way you can work on a feature or an issue and merge and see if many features work well together or not.&lt;br&gt;
Open up the command palette again by pressing &lt;code&gt;F1&lt;/code&gt;. Type in &lt;code&gt;branch&lt;/code&gt; and select the &lt;code&gt;create branch&lt;/code&gt; command from there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lO1dkV08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckurxztaleclih63ea6p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lO1dkV08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckurxztaleclih63ea6p.jpg" alt="Branch option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next dialog box asks for your branch name. Provide a proper branch name and press Enter.  The branch will be created with the given name and it is also already checked out.  &lt;/p&gt;

&lt;p&gt;The git checkout command is used to switch between branches in a repository. It &lt;strong&gt;checks the branches and updates the files in the working directory&lt;/strong&gt; to match the version already available in that branch, and it forwards the updates to Git to save all new commit in that branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nIO8Wm1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76onn09kcdkh9aogfzf4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nIO8Wm1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76onn09kcdkh9aogfzf4.jpg" alt="Branch Created"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step4-making-code-changes"&gt;
  &lt;/a&gt;
  Step-4 : Making code changes
&lt;/h3&gt;

&lt;p&gt;Now its time to add your name as a Contributor to this repository. Open the &lt;code&gt;Contributors.md&lt;/code&gt; file and add your name anywhere in the file. The code in this file is in Markdown language which is a lightweight markup language for creating formatted text using a plain-text editor.&lt;br&gt;
You can also copy-paste anyone of the existing entries and make changes to it. Add your name and GitHub profile link anywhere in the file and save it. You can see that as soon as you save, an icon appears in the source control tab in the left panel indicating that there are changes made to the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C0Ivqadm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb97t06usjpoidenvfgy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0Ivqadm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb97t06usjpoidenvfgy.jpg" alt="Changing Contributor file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step5-commit-amp-push-changes-to-github"&gt;
  &lt;/a&gt;
  Step-5 : Commit &amp;amp; Push changes to GitHub
&lt;/h3&gt;

&lt;p&gt;On the left panel click on the Source Control icon. You can see all the files that have been altered after the last commit. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4D9xsPS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feusvfgd4tc7jror1g6q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4D9xsPS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feusvfgd4tc7jror1g6q.jpg" alt="Source Control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the plus (+) icon to stage the changes. The staging area is a file, in your Git directory, that stores information about what will go into your next commit.&lt;/p&gt;

&lt;p&gt;Type a commit message in the top line and click on the check mark icon to commit changes to your local repository. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z80RxtE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9yjtvo981nwdwfccnxv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z80RxtE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9yjtvo981nwdwfccnxv.jpg" alt="Commit changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After committing the changes, you can see an option for &lt;strong&gt;Publish Changes&lt;/strong&gt; to push your changes back to GitHub. Click on this option to publish your changes back to GitHub. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afg_eO4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hdv26lymii125npumkq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afg_eO4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hdv26lymii125npumkq.jpg" alt="Publish Changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Uh-Oh!&lt;/strong&gt; Something's not right. You must have got an error message as shown below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aHjsY07---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo0eser5vfj1rrna8zdu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aHjsY07---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo0eser5vfj1rrna8zdu.jpg" alt="Git Error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems that you need to tell your identity to Git in order to proceed further. Let's rectify this issue. Head over to the terminal by pressing shortcut key &lt;strong&gt;Ctrl+Shift+`&lt;/strong&gt;.&lt;br&gt;
Then run the following commands to set the global username and global email.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Set your username:  
    git config --global user.name "FIRST_NAME LAST_NAME"
// Set your email address:  
    git config --global user.email "MY_NAME@example.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lGJN6CcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7helzoxevb3ccqb56qq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lGJN6CcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7helzoxevb3ccqb56qq.jpg" alt="Git Config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you don't get any such error, there is nothing to worry. It simply means that your global username and email are already registered with Git.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we have set our global username and email, head back to the &lt;strong&gt;Publish Changes&lt;/strong&gt; option in the Source Control Panel. A dialog box opens that asks you to login to your GitHub account. Login using your GitHub credentials and if all goes well, your commits will be pushed from your local repository to your GitHub repository online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXOdheLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suxukkut6g3yrv2n07t9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXOdheLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suxukkut6g3yrv2n07t9.png" alt="GitHub Login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step6-create-a-pull-request"&gt;
  &lt;/a&gt;
  Step-6 : Create a Pull Request
&lt;/h3&gt;

&lt;p&gt;If you have followed all the above steps correctly, then you should see a message in your forked repository that shows your new branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0L449aYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71bg4bel8imhhblassiq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0L449aYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71bg4bel8imhhblassiq.jpg" alt="Branch Pushed to GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point the changes that you have made reside on your side of the repository. Now we will create a pull request to submit a request to the administrator of the top-level repo to merge your change into the main branch.&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Compare &amp;amp; pull request&lt;/strong&gt; option as shown in the image above. This opens up the Pull Request page where you will edit your Pull Request. &lt;/p&gt;

&lt;p&gt;Here you can also see if your branch can be merged with the main branch or not. You need to provide a title for your pull request and you can also provide some extra comments for the maintainer of the repository. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3Yi9JEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4g10uo4tdgtw662rs02.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3Yi9JEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4g10uo4tdgtw662rs02.jpg" alt="Open Pull Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this your Pull Request will be assigned a number and marked as Open until the maintainer reviews it and merges your code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5VceGhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/res83kezn0ew95kuqtd3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5VceGhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/res83kezn0ew95kuqtd3.jpg" alt="Open Pull Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The maintainer might ask you to make some changes or if everything is fine, your pull request will be successfully accepted and your code changes will be merged into the master branch of this project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVD6mKwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tphpkb5bf7no7z2cgnud.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVD6mKwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tphpkb5bf7no7z2cgnud.jpg" alt="Pull Request Accepted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that your code changes have been merged into the master branch, you can see your name in the Contributor's list. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--801wCLI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f004bkm1bdq0iz21fv3y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--801wCLI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f004bkm1bdq0iz21fv3y.jpg" alt="Final Name Added"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have now successfully made your first open-source contribution with just a single line of code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#made-my-first-contribution-now-what"&gt;
  &lt;/a&gt;
  Made my first contribution now what?
&lt;/h2&gt;

&lt;p&gt;Congratulations! You‚Äôve successfully made your first open-source contribution and completed the standard &lt;em&gt;fork -&amp;gt; clone -&amp;gt; edit -&amp;gt; PR&lt;/em&gt; workflow that you‚Äôll often encounter as a contributor!&lt;/p&gt;

&lt;p&gt;Don‚Äôt let this momentum die! Try to find more repositories based on your skillset and contribute to these projects. The best thing is that you don‚Äôt need to be an expert to contribute to open-source. You can even visit the &lt;a href="https://firstcontributions.github.io/"&gt;First-Contributions website&lt;/a&gt; to see some of the amazing open-source projects you can contribute to.&lt;/p&gt;

&lt;p&gt;I have also published an article that focuses on how you can become an active open-source contributor which you can access &lt;a href="https://dev.to/aviyel/open-source-community-how-to-become-an-active-contributor-f3d"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed my blog. Thanks for reading and keep contributing!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to comment, share and reach out to me on &lt;a href="https://dev.to/saharshlaud"&gt;Dev.to&lt;/a&gt; , &lt;a href="https://twitter.com/saharshlaud"&gt;Twitter&lt;/a&gt; , or &lt;a href="https://in.linkedin.com/in/saharsh-laud"&gt;LinkedIn&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>github</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>Sorting a Dependency Graph in Go</title>
      <author>Andrew Meredith</author>
      <pubDate>Tue, 26 Oct 2021 18:38:37 +0000</pubDate>
      <link>https://dev.to/kendru/sorting-a-dependency-graph-in-go-5f1n</link>
      <guid>https://dev.to/kendru/sorting-a-dependency-graph-in-go-5f1n</guid>
      <description>&lt;p&gt;Recently, I was thinking about how many of the nontrivial problems that I run into with software engineering boil down to a few simple problems.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Dp1ubtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1417343663357710341/rWmULBYo_normal.jpg" alt="Andrew Meredith profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Andrew Meredith
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @a4w_m6h
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm amazed by how many interesting problems ultimately fall into one of the following categories:&lt;br&gt;- Unification&lt;br&gt;- Topological sorting&lt;br&gt;- Snapshotting
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:31 PM - 20 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428817076878299150" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428817076878299150" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428817076878299150" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Just look at any book on algorithms, and the majority of them will be some variation on sorting or searching collections. Google exists because the question of "what documents contain these phrases?" is a genuinely hard problem to solve (okay, that is vastly simplifying the enormous scope of Google's product, but the basic idea still holds).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-topological-sorting"&gt;
  &lt;/a&gt;
  What is Topological Sorting?
&lt;/h2&gt;

&lt;p&gt;One of these common problems that I have run into again and again over the course of my career is topologically sorting the nodes of a dependency graph. In other words, given some directed acyclic graph - think software packages that can depend on other software packages or tasks within a large company project - sort them such that no item in the list depends on anything that comes later in the list. Let's imagine that we are making a cake, and before we can get started, we need some ingredients. Let's simplify things and say we just need eggs and flour. Well, to have eggs, we need chickens (believe me, I'm resisting the urge to make a joke here), and to have flour, we need grain. Chickens also need grain for feed, and grain needs soil and water to grow in. If we consider the graph that expresses all of these dependencies, it looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0xOqr2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kendru.github.io/img/dependency-graph-of-cake.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0xOqr2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kendru.github.io/img/dependency-graph-of-cake.png" alt="The dependency graph of cake" title="The dependency graph of cake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One possible topological order of this graph is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"soil"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"water"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"grain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"chickens"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"flour"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"eggs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cake"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, there are other possible sort orders that maintain topological ordering:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"water"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"soil"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"grain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"flour"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"chickens"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"eggs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cake"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could also put the flour after the eggs, since the only thing that depends on eggs is cake. Since we can rearrange the items, we could also fulfill some of them in parallel while maintaining that no item appears before anything that depends on it. For example, by adding a level of nesting, we can indicate that everything within an inner slice is independent of anything else in that slice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"soil"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"water"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"grain"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"chickens"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"flour"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"eggs"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"cake"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this graph, we get a nice "execution plan" for how to prepare the dependencies for a cake. First, we need to find some soil and water. Next, we grow grain. Then, we simultaneously raise some chickens and make flour. Next, we collect the eggs. Then finally, we can make our cake! That may seem like a lot of work for petit fours, but good things take time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-dependency-graph"&gt;
  &lt;/a&gt;
  Building a Dependency Graph
&lt;/h2&gt;

&lt;p&gt;Now that we understand what we are trying to do, let's think about how to write some code that is able to build this sort of dependency list. We will certainly need to keep track of the elements themselves, and we will need to keep track of what depends on what. In order to make both "What depends on &lt;code&gt;X&lt;/code&gt;?" and "What does &lt;code&gt;X&lt;/code&gt; depend on?" efficient, we will track the dependency relationship in both directions.&lt;/p&gt;

&lt;p&gt;We have enough of an idea of what we need to start writing some code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// A node in this graph is just a string, so a nodeset is a map whose&lt;/span&gt;
&lt;span class="c"&gt;// keys are the nodes that are present.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;nodeset&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c"&gt;// depmap tracks the nodes that have some dependency relationship to&lt;/span&gt;
&lt;span class="c"&gt;// some other node, represented by the key of the map.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;depmap&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;nodeset&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Graph&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="n"&gt;nodeset&lt;/span&gt;

    &lt;span class="c"&gt;// Maintain dependency relationships in both directions. These&lt;/span&gt;
    &lt;span class="c"&gt;// data structures are the edges of the graph.&lt;/span&gt;

    &lt;span class="c"&gt;// `dependencies` tracks child -&amp;gt; parents.&lt;/span&gt;
    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="n"&gt;depmap&lt;/span&gt;
    &lt;span class="c"&gt;// `dependents` tracks parent -&amp;gt; children.&lt;/span&gt;
    &lt;span class="n"&gt;dependents&lt;/span&gt; &lt;span class="n"&gt;depmap&lt;/span&gt;
    &lt;span class="c"&gt;// Keep track of the nodes of the graph themselves.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depmap&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;dependents&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depmap&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This data structure should suit our purposes, since it holds all of the information we need: nodes, "depends-on" edges, and "depended-on-by" edges. Let's think now about creating the API for adding new dependency relationships to the graph. All we need is a method for declaring that some node depends on another, like so: &lt;code&gt;graph.DependOn("flour", "grain")&lt;/code&gt;. There are a couple of cases that we want to explicitly disallow. First, a node cannot depend on itself, and second, if &lt;code&gt;flour&lt;/code&gt; depends on &lt;code&gt;grain&lt;/code&gt;, then &lt;code&gt;grain&lt;/code&gt; must not depend on &lt;code&gt;flour&lt;/code&gt;, otherwise we would create an endless dependency cycle. With that, let's write the &lt;code&gt;Graph.DependOn()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"self-referential dependencies not allowed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// The Graph.DependsOn() method doesn't exist yet.&lt;/span&gt;
    &lt;span class="c"&gt;// We'll write it next.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"circular dependencies not allowed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Add nodes.&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}{}&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}{}&lt;/span&gt;

    &lt;span class="c"&gt;// Add edges.&lt;/span&gt;
    &lt;span class="n"&gt;addNodeToNodeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;addNodeToNodeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addNodeToNodeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt; &lt;span class="n"&gt;depmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will effectively add a dependency relationship to our graph once we implement &lt;code&gt;Graph.DependsOn()&lt;/code&gt;. We could very easily tell whether a node depends on some other node directly, but we also want to know whether there is a transitive dependency. For example, since &lt;code&gt;flour&lt;/code&gt; depends on &lt;code&gt;grain&lt;/code&gt;, and &lt;code&gt;grain&lt;/code&gt; depends on &lt;code&gt;soil&lt;/code&gt;, &lt;code&gt;flour&lt;/code&gt; depends on &lt;code&gt;soil&lt;/code&gt; as well. This will require us to get the direct dependencies of a node, then for each of those dependencies, get its dependencies and so on until we stop discovering new dependencies. In computer science terms, we are computing a fixpoint to find the transitive closure of the "DependsOn" relation on our graph.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dependencies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Dependencies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;nodeset&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;searchNext&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchNext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// List of new nodes from this layer of the dependency graph. This is&lt;/span&gt;
        &lt;span class="c"&gt;// assigned to `searchNext` at the end of the outer "discovery" loop.&lt;/span&gt;
        &lt;span class="n"&gt;discovered&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;searchNext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// For each node to discover, find the next nodes.&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nextNode&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;nextFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// If we have not seen the node before, add it to the output as well&lt;/span&gt;
                &lt;span class="c"&gt;// as the list of nodes to traverse in the next iteration.&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nextNode&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nextNode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}{}&lt;/span&gt;
                    &lt;span class="n"&gt;discovered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;discovered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nextNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;searchNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;discovered&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sorting-the-graph"&gt;
  &lt;/a&gt;
  Sorting The Graph
&lt;/h2&gt;

&lt;p&gt;Now that we have a graph data structure, we can think about how to get the nodes out in a topological ordering. If we can discover the leaf nodes - that is, nodes that themselves have no dependencies on other nodes - then we can repeatedly get the leaves and remove them from the graph until the graph is empty. On the first iteration we will find the elements that are independent, then on each subsequent iteration, we will find the nodes that only depended on elements that have already been removed. The end result will be a slice of independent "layers" of nodes that are sorted topologically.&lt;/p&gt;

&lt;p&gt;Getting the leaves of the graph is simple. We just need to find that nodes that have no entry in &lt;code&gt;dependencies&lt;/code&gt;. This means that they do not depend on any other nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Leaves&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;leaves&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;leaves&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leaves&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;leaves&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final piece of the puzzle is actually computing the topologically sorted layers of the graph. This is also the most complex piece. The general strategy that we will follow is to iteratively collect the leaves and remove them from the graph until the graph is empty. Since we will be mutating the graph, we want to make a clone of it so that the original graph is still intact after we perform the sort, so we'll go ahead and implement that clone:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;copyNodeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;nodeset&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;copyDepmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;depmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;depmap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copyNodeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;copyDepmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;dependents&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;copyDepmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependents&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;copyNodeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to be able to remove a node and all edges from a graph. Removing the node is simple, as is removing the outbound edges from each node. However, the fact that we keep track of every edge in &lt;em&gt;both directions&lt;/em&gt; means that we have to do a little extra work to remove the inbound records. The strategy that we will use to remove all edges is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find node &lt;code&gt;A&lt;/code&gt;'s entry in &lt;code&gt;dependents&lt;/code&gt;. This gives us the set of nodes that depend on &lt;code&gt;A&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For each of these nodes, find the entry in &lt;code&gt;dependencies&lt;/code&gt;. Remove &lt;code&gt;A&lt;/code&gt; from that &lt;code&gt;nodeset&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove node &lt;code&gt;A&lt;/code&gt;'s entry in &lt;code&gt;dependents&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Perform the inverse operation, looking up node &lt;code&gt;A&lt;/code&gt;'s entry in &lt;code&gt;dependencies&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With the help of a small utility that allows us to remove an node from a depmap entry, we can write the method that completely removes a node from the graph.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;removeFromDepmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt; &lt;span class="n"&gt;depmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// The only element in the nodeset must be `node`, so we&lt;/span&gt;
        &lt;span class="c"&gt;// can delete the entry entirely.&lt;/span&gt;
        &lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Otherwise, remove the single node from the nodeset.&lt;/span&gt;
        &lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Remove edges from things that depend on `node`.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dependent&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;removeFromDepmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dependent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Remove all edges from node to the things it depends on.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;removeFromDepmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Finally, remove the node itself.&lt;/span&gt;
    &lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can implement &lt;code&gt;Graph.TopoSortedLayers()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;TopoSortedLayers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c"&gt;// Copy the graph&lt;/span&gt;
    &lt;span class="n"&gt;shrinkingGraph&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;leaves&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;shrinkingGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Leaves&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leaves&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;layers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;leaves&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;leafNode&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;leaves&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;shrinkingGraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leafNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method clearly outlines our strategy for topologically sorting the graph:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone the graph so that we can mutate it.&lt;/li&gt;
&lt;li&gt;Repeatedly collect the leaves of the graph into a "layer" of output.&lt;/li&gt;
&lt;li&gt;Remove each layer once it is collected.&lt;/li&gt;
&lt;li&gt;When the graph is empty, return the collected layers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we can go back to our original cake-making problem to make sure that our graph solves it for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/kendru/darwin/go/depgraph"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;depgraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cake"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"eggs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cake"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"flour"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"eggs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"chickens"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"flour"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"grain"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"chickens"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"grain"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"grain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"soil"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"grain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"water"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DependOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"chickens"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"water"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TopoSortedLayers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// Output:&lt;/span&gt;
    &lt;span class="c"&gt;// 0: soil, water&lt;/span&gt;
    &lt;span class="c"&gt;// 1: grain&lt;/span&gt;
    &lt;span class="c"&gt;// 2: flour, chickens&lt;/span&gt;
    &lt;span class="c"&gt;// 3: eggs&lt;/span&gt;
    &lt;span class="c"&gt;// 4: cake&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of that work was not exactly a piece of cake, but now we have a dependency graph that can be used to topologically sort just about anything. You can find the full code for this post &lt;a href="https://github.com/kendru/darwin/tree/main/go/depgraph"&gt;on GitHub&lt;/a&gt;. There are some notable limitations to this implementation, and I would like to challenge you to improve it so that it can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Store nodes that are not simple strings&lt;/li&gt;
&lt;li&gt;Allow nodes and edges/dependency information to be added separately&lt;/li&gt;
&lt;li&gt;Produce string output for debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed this tutorial! Please let me know what you would like me to cover next.&lt;/p&gt;

</description>
      <category>go</category>
      <category>graphs</category>
      <category>dependencies</category>
    </item>
    <item>
      <title>GitHub CLI extension to preview README.md</title>
      <author>Yusuke Wada</author>
      <pubDate>Tue, 26 Oct 2021 18:27:51 +0000</pubDate>
      <link>https://dev.to/yusukebe/github-cli-extension-to-preview-readmemd-4icc</link>
      <guid>https://dev.to/yusukebe/github-cli-extension-to-preview-readmemd-4icc</guid>
      <description>&lt;p&gt;Have you ever thought want to preview README.md before push to GitHub? I built the &lt;a href="https://cli.github.com"&gt;GitHub CLI&lt;/a&gt; extension to make it come true. It named &lt;code&gt;gh-markdown-preview&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yusukebe/gh-markdown-preview"&gt;https://github.com/yusukebe/gh-markdown-preview&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;NO-dependencies&lt;/strong&gt; - You need &lt;code&gt;gh&lt;/code&gt; command only.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Zero-configuration&lt;/strong&gt; - You don't have to set the GitHub access token.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Looks exactly&lt;/strong&gt; the same - You can see same as GitHub.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Live reloading&lt;/strong&gt; - You don't need reload the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;You have to install GitHub CLI before install.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install gh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gh extension install yusukebe/gh-markdown-preview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gh markdown-preview README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or this command will detect README file in the directory automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gh markdown-preview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZJXayuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83zpvubioa4hee4r2i2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZJXayuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83zpvubioa4hee4r2i2f.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then access the local web server such as &lt;a href="http://localhost:3333"&gt;http://localhost:3333&lt;/a&gt; with Chrome, Firefox, or Safari.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m5og2Y33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79jo7cenpt6h481uhdni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m5og2Y33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79jo7cenpt6h481uhdni.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Available Options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-p, --port     TCP port number of this server (default: 3333)
-r, --reload   Enable live reloading (default: false)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;code&gt;gh markdown-preview&lt;/code&gt; is a GitHub CLI extension to preview your markdown such as README.md. The &lt;code&gt;gh markdown-preview&lt;/code&gt; commnad start a local web server to serve your markdown document file with a GitHub style.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gh markdown-preview&lt;/code&gt; command shows the HTML got from GitHub official markdown API with the CSS extracted from GitHub web site. The styles are almost the same!&lt;/p&gt;

&lt;p&gt;You can see rendered README before uploading to GitHub!&lt;/p&gt;

&lt;p&gt;If you want to have more information, check this repository and give me a star:)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yusukebe/gh-markdown-preview"&gt;yusukebe/gh-markdown-preview: GitHub CLI extension to preview README looks the same as GitHub.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>go</category>
      <category>cli</category>
      <category>markdown</category>
    </item>
    <item>
      <title>Estados: useState()</title>
      <author>Vin√≠cius Neto</author>
      <pubDate>Tue, 26 Oct 2021 18:11:23 +0000</pubDate>
      <link>https://dev.to/viunow/estados-usestate-2e8h</link>
      <guid>https://dev.to/viunow/estados-usestate-2e8h</guid>
      <description>&lt;p&gt;O useState √© um Hook de controle de estado para componentes React, mas o que s√£o hooks? Hooks s√£o fun√ß√µes que permitem a voc√™ ‚Äúligar-se‚Äù aos recursos de state e ciclo de vida do React a partir de componentes funcionais. Hooks n√£o funcionam dentro de classes, eles permitem que voc√™ use React sem classes.&lt;/p&gt;

&lt;p&gt;Digamos que o useState foi criado para dar vida aos estados de um componente e ele poder ser atualizado dinamicamente na p√°gina.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useState&lt;/strong&gt;&lt;br&gt;
Exemplo abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [count, setCount] = useState(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O useState funciona como uma desestrutura√ß√£o de Array, onde temos as vari√°veis count e setCount, a vari√°vel count √© a vari√°vel que guarda o valor original e se o usu√°rio deseja atualizar esse valor, ele vai passar a responsabilidade para a vari√°vel setCount, por conven√ß√£o a vari√°vel que atualiza o valor, recebe a palavra 'set' no inicio, por exemplo: setText, setCount, setUser, etc.&lt;/p&gt;

&lt;p&gt;Imagem para ilustrar o que foi explicado at√© aqui:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mA0ZMsnc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn160dfm52u7qttra0o2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mA0ZMsnc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn160dfm52u7qttra0o2.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Importamos o Hook useState do React. Ele nos permite manter o state local em um componente de fun√ß√£o.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;import React, { useState } from 'react';&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dentro do componente Example, declaramos uma nova vari√°vel de state chamando o Hook useState. Ele retorna um par de valores, no qual damos nomes. Estamos chamando nossa vari√°vel count porque ela mant√©m o n√∫mero de cliques no bot√£o. Inicializamos como zero passando 0 como o √∫nico argumento do useState. O segundo item retornado √© a pr√≥pria fun√ß√£o. Ela nos permite atualizar o count ent√£o nomeamos para setCount.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;const [count, setCount] = useState(0);&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Quando o usu√°rio clica, chamamos setCount com um novo valor. O React ent√£o vai re-renderizar o componente Example, passando o novo valor de count para ele.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;
&amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;Click me&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obrigado por ler o artigo at√© aqui, algumas informa√ß√µes foram retiradas do site oficial do &lt;a href="https://pt-br.reactjs.org/docs/hooks-state.html"&gt;React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E voc√™, j√° utiliza o useState nos seus componentes? At√© a pr√≥xima!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Context in React</title>
      <author>Sahil</author>
      <pubDate>Tue, 26 Oct 2021 18:09:25 +0000</pubDate>
      <link>https://dev.to/mhf/context-in-react-1781</link>
      <guid>https://dev.to/mhf/context-in-react-1781</guid>
      <description>&lt;p&gt;What's this Context in ReactJS everyone's talking about! So according to the &lt;a href="https://reactjs.org/docs/context.html"&gt;React Documentation&lt;/a&gt; &lt;em&gt;" Context provides a way to pass data through the component tree without having to pass props down manually at every level."&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;So we can see it's a way to &lt;strong&gt;pass data through the component tree without props at every level&lt;/strong&gt;. Well isn't it amazing! because it's like having global variables or in react terms something like global props. Let's take an example and go through the Context with React to get a good idea about it.&lt;/p&gt;

&lt;p&gt;Very simple usage for such a feature might be using &lt;strong&gt;Themes&lt;/strong&gt; (Dark Theme/Light Theme) for your React Application. As themes are supposed to be passed to various components to change their appearance on say a click of a button anywhere in the component tree.&lt;/p&gt;

&lt;p&gt;Now if we had usual props used to pass the data we might end up in trouble why? Let's say we have one application with a main component within it a brand component and a cards section inside it as shown below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CN1cUioD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1skbq86k16vybkezk5oi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CN1cUioD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1skbq86k16vybkezk5oi.png" alt="React App Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now say you have a state maintained in Main Component and then use in cards section so you would have to pass it down all through from main to display and then get it in Cards component. This is a very basic structure and this approach is not very practical in web applications with complex structures.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/XbmdBop1Fn6J3dT6U6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XbmdBop1Fn6J3dT6U6/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
That's where the React Context comes to the rescue. Context provides a very simple structure for this purpose. Let's walk through the steps for using Context:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You might have to create a context that we are gonna use for storing the global props and you might wanna do it in a separate component (For example here a theme Context is created).
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Then you have to create a ContextProvider component which would wrap all the components of the app and it must contain all the states that are to be passed to each and every component which is wrapped in it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-gray-100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTextColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cardsBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCardsBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setThemeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setThemeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;cardsBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now that's all left is to use Context where we might wanna use it, but before we do that we would require to import Context wherever we want to use it. To keep all the things simple you might wanna expose a custom hook¬†to keep the import of Context minimal.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useContextTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Finally Now we want to use our created Context, for that we would require the custom hook created by us in the previous step we import it and we are free to use it however we wish!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Import the context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContextTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use inside your component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cardsBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContextTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hurray! you are good to go for creating and using your own Contexts!&lt;br&gt;
&lt;a href="https://i.giphy.com/media/qYGvebgOKGygdQgflY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/qYGvebgOKGygdQgflY/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Is your GitHub empty?</title>
      <author>Eliot Sanford</author>
      <pubDate>Tue, 26 Oct 2021 17:48:12 +0000</pubDate>
      <link>https://dev.to/techieeliot/is-your-github-empty-2gkh</link>
      <guid>https://dev.to/techieeliot/is-your-github-empty-2gkh</guid>
      <description>&lt;p&gt;As a developer, your lack of GitHub contributions does not necessarily indicate that you aren't good at coding, but it can be a wasted opportunity to confirm that you're passionate and good. üü©&lt;/p&gt;

&lt;p&gt;To help change this, here are four ideas to contribute more to GitHub. üí°&lt;/p&gt;

&lt;p&gt;1Ô∏è‚É£. Create a private repo and add at least 1 sentence of what you studied/worked on into a readme at least every weekday. üü©&lt;/p&gt;

&lt;p&gt;Make it your own little journal. üìì&lt;/p&gt;

&lt;p&gt;I did not do this but heard of others who have. &lt;/p&gt;

&lt;p&gt;It would be good practice for #100DaysOfCode or studying algorithms.&lt;/p&gt;

&lt;p&gt;2Ô∏è‚É£. Make a small commit often during the time you code (3 hours a weekday at minimum is best)&lt;/p&gt;

&lt;p&gt;Get something to finally work? Commit üü©&lt;/p&gt;

&lt;p&gt;Ending the day? Commit a WIP (work in progress) üü©&lt;/p&gt;

&lt;p&gt;Branching off and trying something that might break the app? Commit working code first üü©&lt;/p&gt;

&lt;p&gt;3Ô∏è‚É£. Create issues for projects üëç&lt;/p&gt;

&lt;p&gt;See something that needs to be developed‚ùì &lt;/p&gt;

&lt;p&gt;Click "New Issue" and fill in the details. üü©&lt;/p&gt;

&lt;p&gt;Keep tasks small ‚Äî think "Is it doable in a sprint or two?"&lt;/p&gt;

&lt;p&gt;Web devs work with an issue every day, e.g. "feat: create responsive navbar with bootstrap"&lt;/p&gt;

&lt;p&gt;4Ô∏è‚É£. Remember that your GitHub graph is not you or where you find your value, but it doesn't give a good impression if it's completely empty. ‚¨úÔ∏èüò¨&lt;/p&gt;

&lt;p&gt;When your graph is on fire, then people see you as someone who shows up and knows GitHub and git concepts.üî•&lt;/p&gt;

&lt;p&gt;At best, you're a competent professional rather than a novice that must be guided, or worse you're just lazy.&lt;/p&gt;

&lt;p&gt;Take initiative and do something to show what you know, especially if you're self-taught. &lt;/p&gt;

&lt;p&gt;This list isn't exhaustive. There are many ways to contribute like forking a repo, making a pull request, reviewing code, etc.&lt;/p&gt;

&lt;p&gt;I would highly suggest improving your graph with these small steps first, then branching out. üå≥&lt;/p&gt;

&lt;p&gt;Pun intended. üòâ&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>github</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 26 Oct 2021 17:44:35 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4mbg</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4mbg</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettifying-github"&gt;
  &lt;/a&gt;
  Prettifying GitHub
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/yuridevat"&gt;@yuridevat&lt;/a&gt;
 is here with some fantastic tips for making your GitHub profile as unique and wonderful as you are.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/yuridevat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq-regXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--D8eCeSoK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384066/5483b49b-8549-4df1-8a97-f82760b6064f.jpg" alt="yuridevat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/yuridevat/how-to-create-a-stunning-github-profile-2mh5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create a stunning GitHub Profile&lt;/h2&gt;
      &lt;h3&gt;Julia Undeutsch „Éª Oct 24 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#red-light-green-light"&gt;
  &lt;/a&gt;
  Red Light, Green Light üò±
&lt;/h2&gt;

&lt;p&gt;STAY CALM. &lt;a class="mentioned-user" href="https://dev.to/0shuvo0"&gt;@0shuvo0&lt;/a&gt;
 has created a simulation of Squid Game's Red Light, Green Light game using JavaScript. üé≠ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/0shuvo0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/0shuvo0/i-made-squid-game-with-javascript-10j9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I made Squid Game with JavaScript&lt;/h2&gt;
      &lt;h3&gt;Shuvo „Éª Oct 24 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-wellshaped-codebase-without-sacrificing-efficiency"&gt;
  &lt;/a&gt;
  A Well-Shaped Codebase (without sacrificing efficiency)
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/nikmilson"&gt;@nikmilson&lt;/a&gt;
 has loads of great advice about how to refactor your codebase without sacrificing efficiency. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/s2engineers" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbQ0yEJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jcJ1yWF7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2029/7ed5faf1-5170-46b9-8906-316c8ffabffe.png" alt="SinnerSchrader Engineers"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xI6jZp15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8PbGRkC4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/729214/90e33c2a-4d4d-4a46-aa6e-fe5c83749fad.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/s2engineers/how-to-refactor-without-overtime-and-missed-deadlines-351e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to refactor without overtime and missed deadlines&lt;/h2&gt;
      &lt;h3&gt;Nikita Milyanik for SinnerSchrader Engineers „Éª Oct 20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#dev-freelancing-takeaways"&gt;
  &lt;/a&gt;
  Dev Freelancing Takeaways
&lt;/h2&gt;

&lt;p&gt;This whole series by &lt;a class="mentioned-user" href="https://dev.to/saifullahusmani"&gt;@saifullahusmani&lt;/a&gt;
 is worth taking a look at if you've ever considered freelancing as a software developer ‚Äî especially as a self-taught developer. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/saifullahusmani" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6KTbjQP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jntYnEQK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/638356/28c9ddf2-f6c7-474c-9bdb-dbcb244a6179.png" alt="saifullahusmani"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/saifullahusmani/what-i-learned-in-freelancing-as-a-self-taught-developer-n2j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What I learned in freelancing as a self-taught developer.&lt;/h2&gt;
      &lt;h3&gt;Saifullah Usmani „Éª Oct 21 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#finding-joy-as-a-dev"&gt;
  &lt;/a&gt;
  Finding Joy as a Dev
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/dvddpl"&gt;@dvddpl&lt;/a&gt;
 says, &lt;strong&gt;coding is hard&lt;/strong&gt; ‚Äî But that doesn't mean you need to sacrifice your enthusiasm about your career. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dvddpl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UboDmADM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JXv2xuBV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/132615/9bcf8385-383b-4b64-b5cc-d8a9f4f675b8.jpeg" alt="dvddpl"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dvddpl/my-jobs-is-boring-and-everything-sucks-or-not-1lnp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Your jobs is boring and everything sucks - Here are some tips.&lt;/h2&gt;
      &lt;h3&gt;Davide de Paolis „Éª Oct 20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#personalgrowth&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#1-make-the-buttons-look-like-buttons"&gt;
  &lt;/a&gt;
  1. Make the buttons look like buttons.
&lt;/h2&gt;

&lt;p&gt;... and more simple but valuable button design tips from &lt;a class="mentioned-user" href="https://dev.to/imiahazel"&gt;@imiahazel&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/imiahazel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBKwXwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICB5QvkY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/680015/de81baf3-f7c7-45d7-bb7b-c0a6c74d4fed.jpeg" alt="imiahazel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/imiahazel/7-design-tips-for-perfect-buttons-2720" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Design Tips for Perfect Buttons&lt;/h2&gt;
      &lt;h3&gt;Imia Hazel „Éª Oct 19 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#button&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mastering-the-art-of-googling"&gt;
  &lt;/a&gt;
  Mastering the Art of Googling
&lt;/h2&gt;

&lt;p&gt;Most of us here use Google very frequently ‚Äî if not daily. That said, there are many things you can do to be an expert-level Googler. &lt;a class="mentioned-user" href="https://dev.to/ruphaa"&gt;@ruphaa&lt;/a&gt;
 serves up a few. üëÄ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ruphaa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pf-12Q_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UP_Vw_9z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/45891/5472bf96-71b1-4571-8984-3857a16587e5.jpg" alt="ruphaa"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ruphaa/14-tips-to-google-like-a-pro-14jo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;14 tips to Google like a pro&lt;/h2&gt;
      &lt;h3&gt;Ruphaa „Éª Oct 23 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Tina now Supports MDX</title>
      <author>James Perkins</author>
      <pubDate>Tue, 26 Oct 2021 17:34:02 +0000</pubDate>
      <link>https://dev.to/tinacms/tina-now-supports-mdx-2jki</link>
      <guid>https://dev.to/tinacms/tina-now-supports-mdx-2jki</guid>
      <description>&lt;p&gt;The team at Tina is dedicated to revolutionizing the CMS space. We were the first to offer contextual editing in real-time which enabled teams to be more productive. Now we are introducing the world‚Äôs first UI editor for MDX. This empowers content teams to add components to a page with a single click. &lt;/p&gt;

&lt;p&gt;You can see our starter repository on our &lt;a href="https://github.com/tinacms/tina-docs-starter"&gt;GitHub&lt;/a&gt; or select &lt;code&gt;Documentation Starter&lt;/code&gt; when going through our &lt;a href="https://app.tina.io/quickstart?utm_source=blog&amp;amp;utm_medium=link&amp;amp;utm_campaign=mdx_announcement"&gt;quickstart&lt;/a&gt; flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-mdx"&gt;
  &lt;/a&gt;
  Why MDX?
&lt;/h2&gt;

&lt;p&gt;MDX provides the ability to write JSX into Markdown files, which gives developers the ability to create content that is dynamic, interactive, and customizable. The problem with MDX, by nature, is you need to have some technical understanding to be able to both use and create content using MDX. This is where we have empowered non-technical members of your team to leverage reusable components with a single click. This means that content teams can move quickly and developers can focus on other projects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start-using-mdx"&gt;
  &lt;/a&gt;
  How to start using MDX?
&lt;/h2&gt;

&lt;p&gt;We have made the developer experience a breeze, you can check out our &lt;a href="https://tina.io/docs/mdx/"&gt;documentation&lt;/a&gt; or check out the steps to start using MDX :&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-to-the-latest-version-tina"&gt;
  &lt;/a&gt;
  Update to the latest version Tina
&lt;/h3&gt;

&lt;p&gt;You will need to update &lt;code&gt;tinacms&lt;/code&gt; and &lt;code&gt;@tinacms/cli&lt;/code&gt; to the latest versions to use the MDX features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-your-components-you-want-your-content-team-to-use"&gt;
  &lt;/a&gt;
  Create your components you want your content team to use.
&lt;/h3&gt;

&lt;p&gt;Create a component as you normally would and use props for any part you would like to be editable, below is an example of a callout component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Callout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;callout&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CalloutWrapper&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CalloutLabel&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;callout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CalloutLabel&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CalloutText&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;callout&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CalloutText&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CalloutWrapper&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add the fields for your components to your &lt;code&gt;schema.ts&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rich-text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Callout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Callout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="nx"&gt;isBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add the components to your Tina powered pages.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TinaMarkdown&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tinacms/dist/rich-text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Callout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../blocks/callout-block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Callout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Callout&lt;/span&gt; &lt;span class="nx"&gt;callout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Code removed for simplification&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TinaMarkdown&lt;/span&gt; &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDocsDocument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TinaMarkdown&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ready-to-get-started"&gt;
  &lt;/a&gt;
  Ready to get started?
&lt;/h3&gt;

&lt;p&gt;You can see our starter repository on our &lt;a href="https://github.com/tinacms/tina-docs-starter"&gt;GitHub&lt;/a&gt; or select &lt;code&gt;Documentation Starter&lt;/code&gt; when going through our &lt;a href="https://app.tina.io/quickstart?utm_source=blog&amp;amp;utm_medium=link&amp;amp;utm_campaign=mdx_announcement"&gt;quickstart&lt;/a&gt; flow.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>jamstack</category>
      <category>cms</category>
      <category>mdx</category>
    </item>
    <item>
      <title>3 Step Guide to Mine Crypto on Laptop in 2021</title>
      <author>Course Probe</author>
      <pubDate>Tue, 26 Oct 2021 17:25:14 +0000</pubDate>
      <link>https://dev.to/courseprobe/3-step-guide-to-mine-crypto-on-laptop-in-2021-4hil</link>
      <guid>https://dev.to/courseprobe/3-step-guide-to-mine-crypto-on-laptop-in-2021-4hil</guid>
      <description>&lt;p&gt;&lt;em&gt;Easiest tutorial to start mining crypto with Laptops in 2021&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even though this guide is designed for people mining crypto with laptops, &lt;strong&gt;the methodology and software can also be used to mine on Desktop computers&lt;/strong&gt; under Windows, Linux and Mac.&lt;/p&gt;

&lt;p&gt;if you run into any trouble I'm available to help in this discord channel I've created for you: &lt;a href="https://discord.gg/sPbV8kcK"&gt;https://discord.gg/sPbV8kcK&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Get a Wallet and a public address so you can receive funds in the blockchain for the coin you want to mine.&lt;/p&gt;

&lt;p&gt;You have some options for wallets, I personally like the ones that you can install directly into your browser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Metamask.&lt;/li&gt;
&lt;li&gt;Guarda.&lt;/li&gt;
&lt;li&gt;Tronlink.&lt;/li&gt;
&lt;li&gt;Phantom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other options might include &lt;em&gt;Atomic Wallet&lt;/em&gt;, &lt;em&gt;Exodus&lt;/em&gt;, &lt;em&gt;Trustwallet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are paper wallets and other web wallets or free wallets.&lt;/p&gt;

&lt;p&gt;If you chose Metamask.io for example then it is recommended you add some networks to it like the Binance Smart Chain and also Polygon, in this way you will be able to use Metamask to interact with those blockchains.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Download The Unmineable Software.&lt;/p&gt;

&lt;p&gt;Before downloading the file, set some folder exclusions on Windows Defender, in your antivirus and also in your browser so you can download the file without being bothered with notifications of dangerous files.&lt;/p&gt;

&lt;p&gt;Official Unmineable software can be downloaded from this site: &lt;a href="https://www.unmineable.com/miner"&gt;Unmineable Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the MFI version (Miners files included).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Extract and Run Unmineable as Administrator.&lt;/p&gt;

&lt;p&gt;The unmineable software is just one executable file, it already contains all the configurations so it is the best and easiest way to mine any Crypto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run the file as an Administrator in windows.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It looks exactly like this when you run it: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp9_YtUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udmfa63w1l5cccquxx45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp9_YtUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udmfa63w1l5cccquxx45.png" alt="Unmineable Start Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can select GPU cards or CPU.&lt;/p&gt;

&lt;p&gt;It will take you to the second screen where you will enter your Bitcoin Gold BTG Address and also &lt;strong&gt;the code which will allow you to drop your Dev Fee from 1% to 0.75%&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Use the code: &lt;strong&gt;e4xd-wmzl&lt;/strong&gt; to drop your Dev Fee from 1% to 0.75% (it makes a difference).&lt;/p&gt;

&lt;p&gt;Your screen should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cTE_bN6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1d5vuwmmxqk3xmxgmfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cTE_bN6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1d5vuwmmxqk3xmxgmfu.png" alt="Unmineable BTG mining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click on the Start button, you should see a similar screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwOl1eL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yl8vk15ykllxe309mdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwOl1eL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yl8vk15ykllxe309mdb.png" alt="Unmineable Mining Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point I would recommend you to click the option at the bottom to display the logs (Looks like a sheet of paper), here click Force Stop. &lt;/p&gt;

&lt;p&gt;Then click the Settings Icon (Looks like a cog wheel), in the screen that pops up you want to double check a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure the algorithm selected is ETCHASH if you are mining with 4GB cards, use ETHASH for cards with 6GB or more, if you selected CPU everything is ready to start mining no need to select anything.&lt;/li&gt;
&lt;li&gt;Make sure the Code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt; is showing in the referral box (Recommended, not mandatory).&lt;/li&gt;
&lt;li&gt;Set a name for your worker (The computer you are mining from).&lt;/li&gt;
&lt;li&gt;Set your mining Intensity at the top, I would recommend High for those periods when you are not using the computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It looks similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wjec4Fte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjrpff038akqg461zb7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wjec4Fte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjrpff038akqg461zb7w.png" alt="Unmineable Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the Save &amp;amp; Restart button to start mining !!&lt;/p&gt;

&lt;p&gt;Once it starts you can check the speed of your Graphic card or CPU which shows as the Current Hashrate.&lt;/p&gt;

&lt;p&gt;Also you can click on the stats button on the top right to go directly to the Unmineable website where you can check your balance and request a manual payment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; it is recommended you change a few settings in Windows, there's people that disable the Updates and also disable sleeping mode, hibernation or anything that could turn off the computer while it is not in use.&lt;/p&gt;

&lt;p&gt;When using a Laptop, make sure it has some battery or is plugged so it won't shut down.&lt;/p&gt;

&lt;p&gt;Congrats, if you are using Unmineable you are now a miner !!&lt;/p&gt;




&lt;p&gt;A bit more complex strategy might include downloading the Miner software on your own and configuring them to connect with the Unmineable Pool and start mining that way!!&lt;/p&gt;

&lt;p&gt;You can take a look at this previous posts to have a good idea:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mining with CPU:&lt;/strong&gt; &lt;a href="https://dev.to/courseprobe/3-step-guide-to-mine-crypto-with-your-cpu-in-2021-2k1d"&gt;https://dev.to/courseprobe/3-step-guide-to-mine-crypto-with-your-cpu-in-2021-2k1d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mining with GPU:&lt;/strong&gt; &lt;a href="https://dev.to/courseprobe/how-to-mine-ethereum-eth-with-4gb-gpu-cards-in-2021-38ii"&gt;https://dev.to/courseprobe/how-to-mine-ethereum-eth-with-4gb-gpu-cards-in-2021-38ii&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Now you can Log into Unmineable to check your stats:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unmineable.com is a mining Pool which allows you to mine with your CPU using RandomX or GPUS using Etchash or Ethash and pay you in any coin you select. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" alt="Unmineable Site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to check your balance, log into &lt;a href="https://unmineable.com"&gt;Unmineable&lt;/a&gt; and then select the coin you want to mine. In this example, Ripple XRP.&lt;/p&gt;

&lt;p&gt;Then you can select the Tab that reads RandomX or ETCHAS or ETHASH depending on your algo, and enter your address in the box that reads "Enter your address to check your stats:". &lt;/p&gt;

&lt;p&gt;After doing this you will see the balance on your account and you will even be able to request a payment.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;If you are having any difficulties, please join me on discord so I can help you further&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/sPbV8kcK"&gt;https://discord.gg/sPbV8kcK&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you are looking for more information into CPU mining, there's a good guide in a PDF ebook and is Free, get it at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" alt="Mining with CPU"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Referral Disclosure:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Please read the Unmineable Referral Policy at the following link to better understand How the referral code works in detail &lt;a href="https://www.unmineable.com/referrals"&gt;Unmineable Referrals&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mining</category>
      <category>crypto</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>How to finally choose a Javascript framework in 2021</title>
      <author>Tim</author>
      <pubDate>Tue, 26 Oct 2021 17:23:32 +0000</pubDate>
      <link>https://dev.to/tevko/how-to-finally-choose-a-javascript-framework-in-2021-1p1m</link>
      <guid>https://dev.to/tevko/how-to-finally-choose-a-javascript-framework-in-2021-1p1m</guid>
      <description>&lt;p&gt;The JavaScript ecosystem has exploded in the past several years, and shows no sign of slowing down. This trend is especially apparent when looking at the state of front end JavaScript frameworks. Quite simply, there are too many to choose from. &lt;/p&gt;

&lt;p&gt;If you‚Äôre finding yourself in the position of having to choose a front end JavaScript framework in 2021, don‚Äôt worry! Let‚Äôs take a look at a few ways to make this decision with the health and success of your next project in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#throw-a-dart"&gt;
  &lt;/a&gt;
  Throw a dart
&lt;/h3&gt;

&lt;p&gt;At first this might sound like a cruel joke, but if you‚Äôre trying to choose between the top 3 - 5 available options (React, Vue, Svelte, Angular, etc), and you‚Äôre not concerned about the differences in syntax, there‚Äôs a high probability that you‚Äôll be fine choosing from these popular options. Because they‚Äôre widely used and thoroughly tested,  if you run into any trouble, you‚Äôre only a quick Google search away from finding a resolution.&lt;/p&gt;

&lt;p&gt;But what if you need to search from a larger pool of options, or if you're looking for something new entirely?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-dedicated-service-to-review-your-options"&gt;
  &lt;/a&gt;
  Use a dedicated service to review your options
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FSQ_JTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf1cu993fwh0bb9k4r9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FSQ_JTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf1cu993fwh0bb9k4r9p.png" alt="A screenshot of the website, https://openbase.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankfully, there‚Äôs finally a service you can use to get authentic user ratings, insight, and experience, as well as a host of other key metrics related to open source packages. For front end JavaScript frameworks, this service is especially helpful. &lt;a href="https://openbase.com/"&gt;Openbase&lt;/a&gt; has managed to thoroughly categorize nearly any open source package you can find, ensuring that searching for something specific is a breeze.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://openbase.com/js/angular/alternatives"&gt;Looking at alternatives to Angular for example&lt;/a&gt;, we can find a wide array of other options, and even sort them by highest rated, most used, or best maintained! Clicking into a specific option gives access to individual user reviews, as well as package specific metrics like bundle size and type definitions.&lt;/p&gt;

&lt;p&gt;Using Openbase, it becomes very easy to sort through the seemingly infinite list of front end JavaScript frameworks in order to find the perfect option that meets all of your needs. Once you‚Äôve found the perfect option for your project, you can even &lt;a href="https://openbase.com/js/react/tutorials"&gt;find tutorials&lt;/a&gt; to help you get started quickly or work through a technical challenge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copy-from-a-similar-application"&gt;
  &lt;/a&gt;
  Copy from a similar application
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1V8qO69e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/704czsc2fk04xedcdxlw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1V8qO69e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/704czsc2fk04xedcdxlw.jpg" alt="Man in classroom setting looking at a womans desk next to him as if he's cheating on his work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to all but ensure you‚Äôre making the right framework choice, it‚Äôs never a bad idea to look at what other similar applications have done, and make the same technology choices. While it might sometimes be difficult to find a similar application (especially if your idea is new) it‚Äôs always helpful to look to see if any of the challenges you may encounter have been solved, and if so, identify the specific technologies used to solve those challenges.&lt;/p&gt;

&lt;p&gt;A combination of viewing source code in the browser and looking through GitHub will help you decipher which frameworks are being used, but be careful! Without sourcemaps, it might be hard to figure out which framework the minified + compiled code belongs to!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-there-you-have-it"&gt;
  &lt;/a&gt;
  So there you have it!
&lt;/h3&gt;

&lt;p&gt;Three valid options for choosing a front end JavaScript framework in 2021, at a time when there are more frameworks than ever! If you really want to be thorough, it may make the most sense to employ a combination of all three options:&lt;/p&gt;

&lt;p&gt;Look into what similar applications are using&lt;br&gt;
Review Openbase to find user feedback, metrics, maintenance statistics, and alternatives&lt;br&gt;
If you can't choose after you‚Äôve narrowed down 3-5 options, throw a dart!&lt;/p&gt;

&lt;p&gt;Have you recently had to choose a javascript framework? How did you make your decision? Which did you end up going with?&lt;/p&gt;

</description>
      <category>framework</category>
      <category>openbase</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Blazing-fast product search w. MeiliSearch and Medusa</title>
      <author>Zakaria El Asri</author>
      <pubDate>Tue, 26 Oct 2021 17:21:47 +0000</pubDate>
      <link>https://dev.to/medusajs/blazing-fast-product-search-w-meilisearch-and-medusa-3dee</link>
      <guid>https://dev.to/medusajs/blazing-fast-product-search-w-meilisearch-and-medusa-3dee</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Search functionality is one of the most useful and important features in e-commerce platforms. From increasing customer conversion rates to significantly improving the user experience, search engines can enable significant business growth. &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; brings search functionality to your doorstep by leveraging some of the already existing search engines out there.&lt;/p&gt;

&lt;p&gt;We have developed a plugin that will allow you to use the performant, open-source, and feature-rich search engine MeiliSearch. &lt;/p&gt;

&lt;p&gt;MeiliSearch is a super-fast, open-source, search engine built in Rust. It comes with a wide range of features such as typo-tolerance, filtering, sorting, and &lt;a href="https://docs.meilisearch.com/learn/what_is_meilisearch/features.html"&gt;much more&lt;/a&gt;. MeiliSearch also provides a pleasant developer experience, as it is extremely intuitive and newcomer-friendly - so even if you're new to the search engine "ecosystem", you'll have a great time navigating through their documentation. &lt;/p&gt;

&lt;p&gt;Through Medusa flexible plugin system, it is possible to enable search functionality into your medusa applications with minimum hassle by including our new plugin &lt;code&gt;medusa-plugin-meilisearch&lt;/code&gt; to your &lt;code&gt;medusa-config.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;In case you don't have MeiliSearch installed locally on your environment yet, you can run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install MeiliSearch&lt;/span&gt;
curl &lt;span class="nt"&gt;-L&lt;/span&gt; https://install.meilisearch.com | sh

&lt;span class="c"&gt;# Launch MeiliSearch&lt;/span&gt;
./meilisearch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For other installation alternatives, you can head over to Meilisearch's &lt;a href="https://docs.meilisearch.com/learn/getting_started/installation.html"&gt;installation guide&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In order to add the plugin to your medusa project, you will need to first install the plugin using your favorite package manager:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# yarn&lt;/span&gt;
yarn add medusa-plugin-meilisearch

&lt;span class="c"&gt;# npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;medusa-plugin-meilisearch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in your &lt;code&gt;medusa-config.js&lt;/code&gt; file, add the plugin to your &lt;code&gt;plugins&lt;/code&gt; array. For this example, assumption is that you're leveraging MeiliSearch to perform searches on an index called &lt;code&gt;products&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...other options&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;// ...other plugins&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`medusa-plugin-meilisearch`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// config object passed when creating an instance of the MeiliSearch client&lt;/span&gt;
                &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://127.0.0.1:7700&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_master_key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// index name&lt;/span&gt;
                    &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// MeiliSearch's setting options to be set on a particular index&lt;/span&gt;
                        &lt;span class="na"&gt;searchableAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;variant_sku&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="na"&gt;displayedAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;variant_sku&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Et voil√†! That's all it takes to make medusa and MeiliSearch work in great harmony. Please note that you can use any other setting from this &lt;a href="https://docs.meilisearch.com/reference/features/settings.html#settings"&gt;list&lt;/a&gt; such as &lt;code&gt;filterableAttributes&lt;/code&gt;, &lt;code&gt;sortableAttributes&lt;/code&gt;, and &lt;code&gt;synonyms&lt;/code&gt;. We are working on another blog post that will demonstrate how you can make use of these settings to build a great storefront experience, so stay tuned to that!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-usage"&gt;
  &lt;/a&gt;
  Simple Usage
&lt;/h3&gt;

&lt;p&gt;Medusa exposes an API layer that can serve as an abstraction over various search providers. We will now be interacting with one of the search routes parts of that layer, namely, the &lt;code&gt;POST /store/products/search&lt;/code&gt; route. The route will enable you to test out the integration between Medusa and MeiliSearch. The endpoint takes a mandatory &lt;code&gt;q&lt;/code&gt; property and a set of optional parameters which will be passed to MeiliSearch's &lt;code&gt;search()&lt;/code&gt; method as a second argument. The list of the parameters which can be provided can be found in MeiliSearch's &lt;a href="https://docs.meilisearch.com/reference/api/search.html#search-in-an-index-with-post-route"&gt;docs&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let's use Postman for this short demo to get some search results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prgUiT24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eym0vmmw55h4wafz0hgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prgUiT24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eym0vmmw55h4wafz0hgp.png" alt="Postman screenshot showing search request and response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We tried to perform a search query "creneck" to find all crewnecks in our store. Note how the explicit mistake of leaving a "w" out from "crewneck" still yields the correct results.&lt;/p&gt;

&lt;p&gt;Postman is not the most exciting client to use to showcase this, so in the next section, there is a short guide on how you can use React and MeiliSearchh's ecosystem to build something that looks better than JSON.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highlighting-and-pagination-in-a-react-storefront"&gt;
  &lt;/a&gt;
  Highlighting and Pagination in a React Storefront
&lt;/h3&gt;

&lt;p&gt;The Medusa + MeiliSearch integration opens up a lot of capabilities for creating a rich UX for your storefront. The plugin indexes all your products and listens to any updates made on them, so you can then leverage any client-side SDKs developed by the MeiliSearch team to build cool search experiences for storefronts. For example, MeiliSearch exposes a React &lt;a href="https://github.com/meilisearch/meilisearch-react/"&gt;adapter&lt;/a&gt; that can be used with React InstantSearch (made by Algolia) which provides features such as highlighting, filtering, and pagination out of the box. &lt;/p&gt;

&lt;p&gt;In order to leverage this functionality, you'll need to install the corresponding packages by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;react-instantsearch-dom @meilisearch/instant-meilisearch
&lt;span class="c"&gt;# yarn&lt;/span&gt;
yarn add react-instantsearch-dom @meilisearch/instant-meilisearch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then use the MeiliSearch client in your react app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;InstantSearch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Hits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SearchBox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Highlight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-instantsearch-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;instantMeiliSearch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@meilisearch/instant-meilisearch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;instantMeiliSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://127.0.0.1:7700&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_master_key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InstantSearch&lt;/span&gt;
    &lt;span class="na"&gt;indexName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"products"&lt;/span&gt;
    &lt;span class="na"&gt;searchClient&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;searchClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SearchBox&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Hits&lt;/span&gt; &lt;span class="na"&gt;hitComponent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Hit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Pagination&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;InstantSearch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Hit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hit-name"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Highlight&lt;/span&gt; &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;align&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"left"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hit-description"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Snippet&lt;/span&gt; &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hit-info"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;price: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hit-info"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;release date: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;releaseDate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to play around with the various features provided by React InstantSearch you can read more on algolia's &lt;a href="https://www.algolia.com/doc/guides/building-search-ui/what-is-instantsearch/react/"&gt;documentation&lt;/a&gt;. You can also use MeiliSearch's react &lt;a href="https://codesandbox.io/s/ms-react-is-sh9ud?fontsize=14&amp;amp;hidenavigation=1&amp;amp;theme=dark&amp;amp;file=/src/App.js"&gt;demo&lt;/a&gt; for a more interactive example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo-palmes-storefront"&gt;
  &lt;/a&gt;
  Demo: Palmes Storefront
&lt;/h3&gt;

&lt;p&gt;By using the above libraries (React, &lt;code&gt;react-instantsearch-dom&lt;/code&gt;, and &lt;code&gt;instant-meilisearch&lt;/code&gt;) in addition to the medusa plugin, we have successfully integrated the MeiliSearch plugin for one of our customers: Palmes. Following is a short GIF demoing the functionality. &lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/639184340" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enhance-your-development-experience-with-meilisearchs-web-ui"&gt;
  &lt;/a&gt;
  Enhance your development experience with MeiliSearch's Web UI
&lt;/h3&gt;

&lt;p&gt;For a quicker feedback loop on what's happening on your search engine, you can use MeiliSearch's helpful out-of-the-box web interface to run some searches and get live results. It comes with MeiliSearch when you first install it and requires 0 configuration. When integrating the MeiliSearch plugin to existing medusa projects, we also found it to be extremely helpful for debugging&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/639186298" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-to-come"&gt;
  &lt;/a&gt;
  More to come
&lt;/h3&gt;

&lt;p&gt;As briefly mentioned before, we're preparing another blog post that dives a bit deeper into the Medusa Search API and provides a more in-depth walkthrough on how to build a feature-rich search experience that includes filtering, synonyms, stop-words, and more!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>headless</category>
      <category>ecommerce</category>
    </item>
    <item>
      <title>One major key that will amplify your coding prowess.</title>
      <author>Jimster397</author>
      <pubDate>Tue, 26 Oct 2021 17:21:42 +0000</pubDate>
      <link>https://dev.to/jimster397/one-major-key-that-will-amplify-your-coding-prowess-4754</link>
      <guid>https://dev.to/jimster397/one-major-key-that-will-amplify-your-coding-prowess-4754</guid>
      <description>&lt;h1&gt;
  &lt;a href="#onchange-vs-onclick-within-react"&gt;
  &lt;/a&gt;
  OnChange vs OnClick within React:
&lt;/h1&gt;

&lt;p&gt;When traversing through one of the advanced deliverables in my 2nd coding challenge at Flatiron school I realized there is a big difference between OnChange and OnClick. The deliverable asks you to create a sorting feature with a checkbox that changes the orientation of how certain cards are organized. This seemed simple at first to be an OnChange event since the page was changing its state however, the onChange event did not work. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-did-this-happen"&gt;
  &lt;/a&gt;
  Why did this happen?
&lt;/h1&gt;

&lt;p&gt;The state of the page changes yet on onChange did not work. This is due to the special events that happen under the hood of react. The method that was called was .sort() and onChange causes the page to lose focus of the event that you are calling. When an onClick event occurs it allows for the .sort() to happen on the event that you are calling. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-ties-into-the-difference-between-setting-state-and-calling-that-state"&gt;
  &lt;/a&gt;
  This ties into the difference between setting state and calling that state.
&lt;/h1&gt;

&lt;p&gt;When setting the state we use a const variable and set it to  this. const [variable, setVariable]= useState(true). This setVariable is what we use when we want to call the state of the page and in this situation we set it to true. This page will automatically have everything rendered until we set a onClick or onChange to our components. &lt;/p&gt;

&lt;p&gt;Once we call that OnChange event to our page it attempts to find the state of the page and change it order for the change to occur. However, the detriment to this is that the when it changes and attempts to find the state of the page again it fails. Again as previously said it is because onChange loses the focus of what it is changing. Coincidentally, onClick does the same thing without having to continually check the state of the page.&lt;/p&gt;

&lt;p&gt;In conclusion, whenever you need to sort a page through a checkbox it is critical to use onClick however, some other programmers have gotten onChange to work, but it requires more effort and more coding. Knowing the differnce between these two OnChange and OnClick gives insight into how both work and how they interact with useState.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/4471401/getting-value-of-html-checkbox-from-onclick-onchange-events"&gt;Here is the link to a Stack Overflow when encountering this issue.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
