<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>
Here Are 7 Fun, Yet Challenging Front-End Ideas You Can Code 
</title>
      <author>Trevor Lasn</author>
      <pubDate>Thu, 11 Mar 2021 16:32:36 +0000</pubDate>
      <link>https://dev.to/trevorlasn/here-are-7-fun-yet-challenging-front-end-ideas-you-can-code-2k3b</link>
      <guid>https://dev.to/trevorlasn/here-are-7-fun-yet-challenging-front-end-ideas-you-can-code-2k3b</guid>
      <description>&lt;p&gt;Programming is a difficult thing to master. I found one of the best ways to master programming is simply building as much as you can. Hard work pays off - especially with programming.&lt;/p&gt;

&lt;p&gt;If you're new to these articles, they serve more or less as a source of inspiration. Pick a challenge that makes you excited to code and get on with building it.&lt;/p&gt;

&lt;p&gt;You can use any tools you like for the challenges. So if you've got something you'd like to practice, feel free to give it a go.&lt;/p&gt;

&lt;p&gt;If you're in a hurry and never want to run out of coding ideas - &lt;a href="https://gumroad.com/l/IuqKc"&gt;I've compiled a list of over 100 challenges here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: Please check out the original sources for the challenges as well. &lt;/p&gt;

&lt;p&gt;Without further ado, here are the challenges!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-tabbar-animations-built-with-only%C2%A0css" class="anchor"&gt;
  &lt;/a&gt;
  1. "Tabbar animations"- Built with only CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZajKZ93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6gwcwceoc9838qt2g9w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZajKZ93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6gwcwceoc9838qt2g9w.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A beautiful-looking tab that animates the icons when you hover or click them. Pay extra attention to the small animations. &lt;/p&gt;

&lt;p&gt;"Tabbar animation - Only CSS" - By Milan Raring&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://codepen.io/milanraring/pen/qBEPzKB"&gt;https://codepen.io/milanraring/pen/qBEPzKB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the Tabbar animations&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use advanced CSS concepts such as transforms, animations, transitions, etc.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#2-crowdfunding-product%C2%A0page" class="anchor"&gt;
  &lt;/a&gt;
  2. Crowdfunding product page
&lt;/h3&gt;

&lt;p&gt;Code the crowdfunding product page and get it looking as close to the design as possible. Check out the challenge page here for more details and instructions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpicqVBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cilqgbzvr7tkweo7wqh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpicqVBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cilqgbzvr7tkweo7wqh.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Crowdfunding product page"&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.frontendmentor.io/challenges/crowdfunding-product-page-7uvcZe7ZR"&gt;https://www.frontendmentor.io/challenges/crowdfunding-product-page-7uvcZe7ZR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the crowdfunding product page&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See the number of total backers increment by one after confirming a pledge.&lt;/li&gt;
&lt;li&gt;Toggle if the product is bookmarked or not.&lt;/li&gt;
&lt;li&gt;CSS hover states for interactive components.&lt;/li&gt;
&lt;li&gt;CSS and HTML for creating a silky smooth layout.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#3-css-adventure-pack" class="anchor"&gt;
  &lt;/a&gt;
  3. "CSS Adventure Pack"
&lt;/h3&gt;

&lt;p&gt;We're headed back to school -  Coding school that is. Check out this awesome adventure pack Braydon Coyer made with only using CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pH5IfHpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtjdt5rbs87ewj7lutvy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pH5IfHpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtjdt5rbs87ewj7lutvy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"CSS Adventure Pack" - By Braydon Coyer&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://codepen.io/braydoncoyer/pen/KKNRaKQ"&gt;https://codepen.io/braydoncoyer/pen/KKNRaKQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the CSS adventure pack&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use HTML and CSS to draw real-life objects.&lt;/li&gt;
&lt;li&gt;How to use CSS variables.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#4-launch-countdown-timer" class="anchor"&gt;
  &lt;/a&gt;
  4. Launch countdown timer
&lt;/h3&gt;

&lt;p&gt;We've all seen countdown timers. Why not build your own? Try building out the countdown timer and get it looking as close to the design as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QF5ycOY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg16hzo5r9zigw1nwfto.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QF5ycOY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg16hzo5r9zigw1nwfto.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Launch countdown timer"&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.frontendmentor.io/challenges/launch-countdown-timer-N0XkGfyz-"&gt;https://www.frontendmentor.io/challenges/launch-countdown-timer-N0XkGfyz-&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the launch countdown timer&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Countdown timer that ticks down every second&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bonus Points: When a number changes, make the card flip from the middle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#5-substack-reader%C2%A0clone" class="anchor"&gt;
  &lt;/a&gt;
  5. Substack reader clone
&lt;/h3&gt;

&lt;p&gt;Any Substack newsletter you subscribe to will automatically show up in the reader. If you want, you can add third-party RSS feeds, too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J4yud11i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eknrbefquhnhmw576s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4yud11i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eknrbefquhnhmw576s5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: The challenge is to only re-create the front-end layout. Use any dummy data as you see fit.&lt;/p&gt;

&lt;p&gt;Substack reader - &lt;a href="https://reader.substack.com/inbox"&gt;https://reader.substack.com/inbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the Substack reader clone&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use CSS and HTML to re-create a modern-looking app.&lt;/li&gt;
&lt;li&gt;Bonus points: You can use any newsletter aggregator API to make it functional. &lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#6-football-soccer-match-scorecard-component" class="anchor"&gt;
  &lt;/a&gt;
  6. Football (soccer) match scorecard component
&lt;/h3&gt;

&lt;p&gt;Try building out the football match scorecard and get it looking as close to the design as possible. Don't skip on the small details, such as CSS shadows and icons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xE_hGbkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbd23w37chxdmmdhr58m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xE_hGbkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbd23w37chxdmmdhr58m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Football (soccer) match score component" - By Håvard Brynjulfsen&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://codepen.io/havardob/pen/MWKWZxZ"&gt;https://codepen.io/havardob/pen/MWKWZxZ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the Football (soccer) match scorecard component&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use CSS and HTML in harmony to create a beautiful-looking card.&lt;/li&gt;
&lt;li&gt;Advanced CSS features such as shadows and variables.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#7-task-management-ui" class="anchor"&gt;
  &lt;/a&gt;
  7. Task Management UI
&lt;/h3&gt;

&lt;p&gt;Look at the beauty. Don't you wish all apps look as sweet as this one? Check out the working version here. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2lAi1u7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e9qdy1t8aeof1brygl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lAi1u7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e9qdy1t8aeof1brygl2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Task Management UI" - By Aaron McGuire&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://codepen.io/aaronmcg/pen/GRjaRva"&gt;https://codepen.io/aaronmcg/pen/GRjaRva&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the task management UI&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to craft beautiful applications with CSS, HTML, and JavaScript&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Conclusion&lt;br&gt;
Thanks for reading. Happy coding!&lt;/p&gt;

&lt;p&gt;Looking for more coding ideas? Never run out of coding ideas, ever again. &lt;a href="https://gumroad.com/l/IuqKc"&gt;Get access here to a bunch of front-end challenges by me.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>challenge</category>
      <category>react</category>
    </item>
    <item>
      <title>Back to coding with Our Time For Tech</title>
      <author>Sara L.G</author>
      <pubDate>Thu, 11 Mar 2021 16:04:52 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/back-to-coding-with-our-time-for-tech-9lf</link>
      <guid>https://dev.to/ourtimefortech/back-to-coding-with-our-time-for-tech-9lf</guid>
      <description>&lt;p&gt;My journey in Tech started almost 10 years ago when I got my first web developer position at a digital agency. After a few years working I decided to take a small break, and that small break turned into almost 4 years as a stay-at-home mom.&lt;/p&gt;

&lt;p&gt;I always knew sooner or later I would come back so, when I felt it was the right moment to start job-hunting, for a couple of months I used every free minute I had to go over as many freeCodeCamp courses I could and to read as many articles I found and was when I realised I remembered more than I thought.&lt;/p&gt;

&lt;p&gt;But I think knowing how to code is not enough anymore. Nowadays it is much more difficult to find a dev position than it was 10 years ago, when it could be done by knowing some HTML, CSS, Javascript or a CMS like WordPress. Also now I'm looking for a more specific role, it needs to be remote, preferably within a team... That's why when I discovered &lt;a href="https://ourtimefortech.org/"&gt;Our Time For Tech&lt;/a&gt; (A nonprofit online program that empowers early-career &amp;amp; career-changing Women in Tech) and its codeCollab program I knew it was the final push I needed.&lt;/p&gt;

&lt;p&gt;I've been lucky enough to be part of it and I would like to share my journey with you. Over the next 12 weeks we (a group of 5 female coders) with the help of two experienced developers will be building a web app where we not only will develop further our coding skills, but also will learn and develop important ones, like team collaboration and communication, among others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-have-i-done-so-far" class="anchor"&gt;
  &lt;/a&gt;
  So, what have I done so far?
&lt;/h2&gt;

&lt;p&gt;As a brief recap, things I (we) have been working on over the last two weeks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up the environment. Installing Rails 6, Node, Yarn and Postgresql. Dealing with errors during the installation, like the need of a different Ruby version.&lt;/li&gt;
&lt;li&gt;Learning how to make a pull request. During my previous experience as a developer I never had to used them, and even if I had a good knowledge of git I had forgotten most of it. Also I think back at that time pull requests weren't so widely spread in work environments as they are now, but I can be mistaken on this affirmation.&lt;/li&gt;
&lt;li&gt;Reading a lot about Ruby on Rails as I have never used it before, migrations, SQL commands, CLI commands... Searching and going through technical documentation when I get stuck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And last, but not least:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thinking big: we are not only supposed to implement the tasks we are told, we are in charge of deciding (or trying at least) the best way of doing things, what can and cannot to deliver (find the MVP), collaborating and thinking as a group. (With the proper guidance of course). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last point was probably the one I was more worried about at the beginning, but now is probably the one that motivates me more. Looking forward to another week of challenges!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>womenintech</category>
      <category>firstpost</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Day 73 Of 100DaysOfCode: Data Visualization</title>
      <author>Durga Pokharel</author>
      <pubDate>Thu, 11 Mar 2021 15:15:45 +0000</pubDate>
      <link>https://dev.to/iamdurga/day-73-of-100daysofcode-data-visualization-44nm</link>
      <guid>https://dev.to/iamdurga/day-73-of-100daysofcode-data-visualization-44nm</guid>
      <description>&lt;p&gt;This is my 73th day of  #100daysofcode and  #python learning. Today, I keep learning from Datacamp and also completed some assignments. Also, I am present in one bootcamp from &lt;a href="https://dphi.tech/lms/learn/data-analysis-and-visualization-101/870"&gt;dphi&lt;/a&gt; where I did data visualization on data given on assignment, which contained some metropolitan data and publicly available &lt;a href="https://raw.githubusercontent.com/dphi-official/Assignment_Solutions/master/Standard%20Metropolitan%20Areas%20Data%20-%20train_data%20-%20data.csv"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After I got &lt;a href="https://codefornepal.org/fellowship/"&gt;Hawkins Fellowship&lt;/a&gt;, I am learning from Datacamp because I have access to most courses there now. Hence my journey of learning Algorithms from Coursera is in pending state. I am going to write some of assignments I completed today.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dphi-assignment" class="anchor"&gt;
  &lt;/a&gt;
  dphi Assignment
&lt;/h1&gt;

&lt;p&gt;All the assignments were quizz but I had to write code in order to find the right answer and it was quite fun to try.&lt;/p&gt;

&lt;p&gt;I started by reading CSV file using Pandas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://raw.githubusercontent.com/dphi-official/Assignment_Solutions/master/Standard%20Metropolitan%20Areas%20Data%20-%20train_data%20-%20data.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#question-1-what-is-the-mean-area-of-lands" class="anchor"&gt;
  &lt;/a&gt;
  Question 1: What is the Mean area of lands?
&lt;/h2&gt;

&lt;p&gt;Not that hard, just take mean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;land_area&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output of the code is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;2615.7272727272725&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#question-2-what-is-the-crime-rate-among-all-metropolitan-areas" class="anchor"&gt;
  &lt;/a&gt;
  Question 2: What is the crime rate among all Metropolitan Areas?
&lt;/h2&gt;

&lt;p&gt;Again it is the max value of single column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crime_rate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output of the code is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;85.62
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#question-3-what-is-the-average-crime-rate-among-all-metropolitan-areas" class="anchor"&gt;
  &lt;/a&gt;
  Question 3: What is the average crime rate among all metropolitan areas?
&lt;/h2&gt;

&lt;p&gt;Same as previous, find mean of single column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crime_rate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output of the above code is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;55.64303030303031
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#question-4-what-is-the-top-5-data-of-region-4" class="anchor"&gt;
  &lt;/a&gt;
  Question 4: What is the top 5 data of region 4?
&lt;/h2&gt;

&lt;p&gt;Just do boolean masking.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#more" class="anchor"&gt;
  &lt;/a&gt;
  More
&lt;/h2&gt;


&lt;p&gt;I have uploaded a fully loaded &lt;a href="https://github.com/iamdurga/Random-Learning-Stuffs/blob/main/dphi%20-%20Data%20Analysis%20Bootcamp%20Assignment.ipynb"&gt;notebook here&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;br&gt;
&lt;p&gt;Day 73 Of &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; &lt;br&gt;Data Visualization&lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WomenWhoCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#WomenWhoCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/beginner?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#beginner&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://t.co/RF3dNCgAkm"&gt;pic.twitter.com/RF3dNCgAkm&lt;/a&gt;&lt;/p&gt;— Durga Pokharel (@mathdurga) &lt;a href="https://twitter.com/mathdurga/status/1370023238957293578?ref_src=twsrc%5Etfw"&gt;March 11, 2021&lt;/a&gt;&lt;br&gt;
&lt;/blockquote&gt; 

</description>
      <category>womenintech</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10 Tips to Help You Stand Out as a Java Developer</title>
      <author>John Selawsky</author>
      <pubDate>Thu, 11 Mar 2021 15:04:19 +0000</pubDate>
      <link>https://dev.to/selawsky/10-tips-to-help-you-stand-out-as-a-java-developer-91</link>
      <guid>https://dev.to/selawsky/10-tips-to-help-you-stand-out-as-a-java-developer-91</guid>
      <description>&lt;p&gt;Java is has been one of the most popular programming languages for decades. The &lt;a href="https://slashdata-website-cms.s3.amazonaws.com/sample_reports/EiWEyM5bfZe1Kug_.pdf"&gt;number of specialists&lt;/a&gt; who want to become proficient in Java is rapidly growing. Because the competition is fierce, its no longer enough to just be a good Java developer — you need to acquire deep knowledge and get familiar with many concepts to be ahead of the competition. If you’re the one who’s stuck asking yourself “What should I learn to stand out as a Java developer?”, this blog post can help you figure things out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-get-a-solid-base-and-clear-idea-of-oop-principles" class="anchor"&gt;
  &lt;/a&gt;
  1. Get a Solid Base and Clear Idea of OOP Principles
&lt;/h2&gt;

&lt;p&gt;Java is an object-oriented language, so instead of underestimating the OOP principles, developers should make an effort to acquire a deep knowledge of the concept. Learn how to apply OOP principles when programming and gain an in-depth knowledge of object modeling, SOLID principles, design patterns, inheritance, and other concepts. These are things you should bear in mind when writing software, especially in a modern object-oriented language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-read-books-that-cover-those-principles" class="anchor"&gt;
  &lt;/a&gt;
  2. Read Books That Cover Those Principles
&lt;/h2&gt;

&lt;p&gt;Having these concepts under your belt will help you easily build projects applying OOP principles. Many concepts are covered in some classic books that I think are mandatory reading for developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Design Patterns: Elements of Reusable Object-Oriented Software” by “Gang of Four”&lt;/li&gt;
&lt;li&gt;“Clean Code” by “Uncle Bob” Robert Martin&lt;/li&gt;
&lt;li&gt;“Clean Architecture” by “Uncle Bob” Robert Martin&lt;/li&gt;
&lt;li&gt;“Refactoring” (2nd edition) by Martin Fowler and Kent Beck&lt;/li&gt;
&lt;li&gt;“Extreme programming explained” by Kent Beck&lt;/li&gt;
&lt;li&gt;“Test Driven Development: By Example” by Kent Beck&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-get-familiar-with-the-spring-framework" class="anchor"&gt;
  &lt;/a&gt;
  3. Get Familiar with the Spring Framework
&lt;/h2&gt;

&lt;p&gt;The Spring framework plays a significant role in modern Java development. Spring framework components, like Spring MVC and Spring Boot, are commonly used by companies for building microservices or web apps. Developers who understand all the advantages of the Spring framework are more likely to shine in their field, turning a local Java method into a management operation or remote procedure.&lt;/p&gt;

&lt;p&gt;If you’ve never used Spring before, the first step is to familiarize yourself with essential Spring things, like the principles of Dependency Injection (DI), Inversion of Control (IoC), and Spring MVC in general.&lt;/p&gt;

&lt;p&gt;The next big milestone is definitely Spring Boot and the capabilities that it brings to the table for building and running web apps. Learn the main important annotations it provides and their behavior, and consider &lt;a href="https://www.jrebel.com/blog/spring-annotations-cheat-sheet"&gt;Spring annotations in general&lt;/a&gt; (especially if you come from a more XML-based background).&lt;/p&gt;

&lt;p&gt;Such ones as @Repository, @Service, and @Controller or @RequestMapping will become your everyday buddies. Try to &lt;a href="https://spring.io/guides/gs/spring-boot/"&gt;build a small web app&lt;/a&gt; using them. Of course, for this learning, you need a good understanding of design patterns and how the components these annotations define are supposed to interact with each other.&lt;/p&gt;

&lt;p&gt;You will be surprised how easy it is to launch and run your newly created application with Spring Boot, compared to other deployment options you may have used with Java before. This framework is designed to simplify your life enormously and allow you to just obtain a runnable “all-inclusive” .jar file, which you either can run from the command line on your computer, from a Docker container, or deploy as a normal Linux service and put it behind Nginx if you don’t use Docker in production.&lt;/p&gt;

&lt;p&gt;The next Spring component which you will definitely want to learn sooner rather than later is Spring Security. Everything you need to set up proper access to your endpoints and service in general, authentication and authorization, login, registration, and different security providers, you will find there.&lt;/p&gt;

&lt;p&gt;Another pretty big component you also can come across on quite a few projects is Spring Data. It provides a convenient and elegant abstraction for data access. It is not an ORM per se and not a JPA implementation — it just provides a versatile abstraction on top of it, allowing you to reduce the amount of code needed for data manipulation, and make it straightforward and supportable.&lt;/p&gt;

&lt;p&gt;Finally, a component worth mentioning explicitly (don’t forget that the whole Spring is huge) is Spring AOP (Aspect Oriented Programming). It provides a way to include various annotations to control declaratively multiple aspects of your code behavior, such as logging, exceptions, or transactions. Understanding this philosophy and approach will give you a boost at any job interview.&lt;/p&gt;

&lt;p&gt;There’s no doubt that Spring is a big fish in the Java world, but it’s not the only one. Not every Java developer wants to submit to total Spring dominance — some want to be specialized in different technologies and go deeper in different domains. For these developers, I would distinguish Java EE stack. Although old, it is still around, especially in older, large projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-learn-the-most-essential-apis-and-libraries" class="anchor"&gt;
  &lt;/a&gt;
  4. Learn the Most Essential APIs and Libraries
&lt;/h2&gt;

&lt;p&gt;APIs and libraries go next to Java frameworks, so it’s important to know them if you want to stand out. They are an integral part of the Java ecosystem and have the second biggest community on the &lt;a href="https://stackoverflow.com/questions/tagged/java%20api?sort=MostVotes&amp;amp;edited=true"&gt;StackOverflow&lt;/a&gt; Q&amp;amp;A website.&lt;/p&gt;

&lt;p&gt;This is an enormously broad topic that includes many things at once — I could dedicate a dozen of articles to it — but speaking in general, in-depth knowledge of the core APIs, main and third-party libraries, as well as Java Development Kit (JDK), defines a high-skilled Java developer. To prevent confusion, I should say that the specialists are not expected to learn all possible APIs and know every single element in the Library. It’s enough to have a clear understanding of Apache Commons, Guava, Maven, and a few other major APIs and libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-get-deep-knowledge-of-java-11" class="anchor"&gt;
  &lt;/a&gt;
  5. Get Deep Knowledge of Java 11
&lt;/h2&gt;

&lt;p&gt;Recently, the Java developer community witnessed the release of the last version of Java 15. However, the software development flow in the Java domain is usually pretty slow when it comes to adopting new versions of anything — the principle “if it ain’t broke, don’t fix it” is especially embraced in enterprise projects.&lt;/p&gt;

&lt;p&gt;Every small change happening in those projects has to fit with high-security requirements and it is common to use older technologies. For instance, in the bank, airline, or insurance system, you are unlikely to meet any technologies younger than five years or so. This is where older means stable, reliable, and secure.&lt;/p&gt;

&lt;p&gt;Nevertheless, new versions are getting slowly but steadily adopted in these domains too. After every new release, more and more companies will require you to be familiar with the new features. Java 8, which was a big breakthrough for its time, took a few years to become an industry standard. You definitely “shall not pass” any longer without mastering the Stream API, default interface methods, Lambda expressions, Java Time API, and other &lt;a href="https://www.journaldev.com/2389/java-8-features-with-examples"&gt;major features of this version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further Java versions kept up the journey of the active feature adoption. The next LTS version was Java 11 — this is the one you may often meet in job requirements these days. Many companies won’t switch from it until the next LTS is released, which is supposed to be Java 17 coming in September 2021. I definitely don’t recommend you start your job hunt before getting in touch and familiarizing yourself with all of &lt;a href="https://mkyong.com/java/what-is-new-in-java-11"&gt;Java 11 features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The later Java versions, up to 15 as it was mentioned above, are still to some extent or other in the process of gaining wider adoption, but they’re already in use quite a bit. For example, there is already an &lt;a href="https://aws.amazon.com/corretto/"&gt;Amazon Corretto 15&lt;/a&gt; release available.&lt;/p&gt;

&lt;p&gt;Either way, an important practice for a good Java developer is to follow every new release very attentively and get familiar with all the new features promptly. None of them can be ignored.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-focus-on-jvm-and-its-internals" class="anchor"&gt;
  &lt;/a&gt;
  6. Focus on JVM and its Internals
&lt;/h2&gt;

&lt;p&gt;Java doesn’t exist without JVM (Java Virtual Machine). It’s a runtime engine that allows Java apps to run on any possible platform. So, if you want to join a group of good Java developers, understanding the principles of JVM work is a must. Other than that, the knowledge of a virtual machine will help you with problem-solving during development. So, among other things, make sure to master JVM system threads and the way Java is executed in the runtime environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-have-multiple-methodologies-at-hand" class="anchor"&gt;
  &lt;/a&gt;
  7. Have Multiple Methodologies at Hand
&lt;/h2&gt;

&lt;p&gt;If you want to stay ahead of many other Java programmers, you should pay special attention to different methodologies. First of all, get familiar with Agile and especially SCRUM, but also understand Waterfall and get ready to work with it. As long as many developers select the methodology depending on the clients’ preferences, knowing many of them will help you be on top of that.&lt;/p&gt;

&lt;p&gt;Additionally, you can learn extreme programming techniques (the classic book by Kent Beck is mentioned above) to gain richer experience and effective work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-get-used-to-automated-testing" class="anchor"&gt;
  &lt;/a&gt;
  8. Get Used to Automated Testing
&lt;/h2&gt;

&lt;p&gt;The thing that distinguishes a real Java developer from someone trying to look like one is the ability to do automated testing. In simple terms, any kind of testing which is not manual can be considered automated: unit, integration, and others, which need to be improved if you want to be a great Java coder. You should also learn how to deliver projects in such a way that the tests are a part of your CI/CD pipeline and the code doesn’t go to production if some important parts are not covered by tests.&lt;/p&gt;

&lt;p&gt;Here’s how your development and further deployment flow could look like with testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You develop a component of your application and cover it with unit tests until proceeding to the next one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you follow this practice thoroughly, you may notice how it implicitly forces you to keep good modularity of code. A good unit test is something that allows you to run your component’s code in isolation. You cannot use the database, external APIs, or rely on other classes. Only your component is on the scene at the moment.&lt;/p&gt;

&lt;p&gt;You feed it with demo data that you put together accurately, taking in mind all the edge cases like empty or null values and you check that you get the output exactly as expected. After doing that, you can be sure that your component is not a source of failure and you can just rely on its logic in other places. JUnit 5 and Mockito are your best friends here — master and use them every day.&lt;/p&gt;

&lt;p&gt;Also, another advantage is using TDD when you write your test cases and tests even before writing the component code itself. Here’s an interesting &lt;a href="https://daedtech.com/5-things-ive-learned-in-20-years-of-programming/"&gt;story about how much debugging time can the TDD save you sometimes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After all the components are developed like that, you need to provide automated integration testing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In most cases, that just means leveraging your application programmatically with a simple script, running it with some input data, and controlling the output (you will often do this in a Docker container). However, sometimes it means testing separate components or a chain of them, but this time using real external resources like database or file storage.&lt;/p&gt;

&lt;p&gt;Either way, think about what input edge cases you can have globally and check whether your app can handle these cases correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally, you should embed the tests into your CI/CD pipeline.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A classic modern way is that once you submit your code into your Git repository, either on commit, pull request, or merge to a specific branch, a Hook is fired. This runs a deployment script and leverages a Docker container, which tries to build your app, or a Docker image with your app, depending on your deployment.&lt;/p&gt;

&lt;p&gt;Either way, given that the app was built successfully (and you automatically get protected from broken apps in production if it wasn’t), it tries to run all your tests within the container, both unit, and integration. If any of the tests fail, the whole process fails, and Git does not approve the pull request automatically or just fails your build.&lt;/p&gt;

&lt;p&gt;Some details of this flow will vary, but in general, this method of app delivery will bring you unambiguous quality control literally on a per-commit basis, saving you hours of firefighting when your app crashes in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-polish-up-your-coding-skills" class="anchor"&gt;
  &lt;/a&gt;
  9. Polish Up Your Coding Skills
&lt;/h2&gt;

&lt;p&gt;Coding is mainly about practicing. No matter how many books you read, they won’t be as effective as if you had honed your knowledge in practice. Fortunately, coding these days is not that boring as you may think — there are many gamified platforms on the web to make coding engaging and even fun.&lt;br&gt;
Among a whole lot of platforms and courses, I would recommend considering the following.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-codegym" class="anchor"&gt;
  &lt;/a&gt;
  1. CodeGym
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0XwWbng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/743fa8ed-3d31-44cc-8cb8-a229932e88d8/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0XwWbng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/743fa8ed-3d31-44cc-8cb8-a229932e88d8/" alt="0_gkhbyNex5oATKxMD.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning Java by doing is what &lt;a href="https://codegym.cc/"&gt;CodeGym&lt;/a&gt; strongly recommends. Right after joining the course, you will be forced to complete over 1200 hands-on tasks and hence write lots of code. Thanks to an instant verification option, you will have your code reviewed by a virtual mentor so that you know what to improve. You can also join the CodeGym community and communicate with other students sharing your thoughts about practicing Java on the platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-codewars" class="anchor"&gt;
  &lt;/a&gt;
  2. Codewars
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRC-TzmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/2eeba3b8-c78a-4b74-be02-e38b32a32551/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRC-TzmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/2eeba3b8-c78a-4b74-be02-e38b32a32551/" alt="0_Xdj6sySRj0TfIFTY.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt; has been created by community members to let newcomers master over 20 programming languages. The learning is designed in such a way that the students polish up their skills by training with other developers on challenges called kata. As soon as the learners complete every next task, the platform rewards them with honor and ranks and sends you more advanced challenges. Here, at Codewars, you can also build your own kata and ask your peers to resolve them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-cyberdojo" class="anchor"&gt;
  &lt;/a&gt;
  3. Cyber-Dojo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DFlLEcXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/ea6f731e-01b2-4323-ac53-0e0b6cf826f4/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DFlLEcXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/ea6f731e-01b2-4323-ac53-0e0b6cf826f4/" alt="0_5-SLYDeLo_Ozx_RR.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike many other programming courses, &lt;a href="https://www.cyber-dojo.org/creator/home"&gt;Cyber-Dojo&lt;/a&gt; encourages the newbies to focus on improving their skills rather than finishing the game ASAP. Here, you can practice Java individually or join the group session, or even participate in coding sparrings if you already have a technical background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-codechef" class="anchor"&gt;
  &lt;/a&gt;
  4. CodeChef
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBn4vUU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/5bf48e6b-6d8f-4619-8a4f-5e572cbfb2d6/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBn4vUU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/5bf48e6b-6d8f-4619-8a4f-5e572cbfb2d6/" alt="0_E6NpRTRmMFYT0XpG.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Put &lt;a href="https://www.codechef.com/"&gt;CodeChef&lt;/a&gt; on the list if you are keen on coding contests and challenges — this is the perfect place for that. The platform hosts programming contests every month where developers from the whole world show off their skills and try to win trophies. Other than participating in challenges, you can also brush up on your knowledge by joining training sessions related to different technical topics, such as binary search, algorithms, array size, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-codingame" class="anchor"&gt;
  &lt;/a&gt;
  5. CodinGame
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSu6IC_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/1255138f-d26b-4dbd-80f6-59e7060c4f10/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSu6IC_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/1255138f-d26b-4dbd-80f6-59e7060c4f10/" alt="0_4eT9GP_zoHRGJdt0.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codingame.com/start"&gt;Codingame&lt;/a&gt; is an ideal learning platform for developers of all skill levels. You won’t feel bored while practicing Java — the course offers coding quizzes, solo and group challenges, a 5-minute coding battle in Clash of Code, as well as bot programming competitions for advanced developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;Following these tips will help you stand out and join the group of great Java developers. If you know something I haven’t mentioned, feel free to share your thoughts in the comments below.&lt;/p&gt;

&lt;p&gt;Previously published on &lt;a href="https://betterprogramming.pub/10-tips-to-help-you-stand-out-as-a-java-developer-9865516584ae"&gt;Better Programming&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>coding</category>
      <category>programming</category>
    </item>
    <item>
      <title>Deadlift: Showing off Your Strengths in a Job Interview Test Project</title>
      <author>Alexey</author>
      <pubDate>Thu, 11 Mar 2021 13:57:52 +0000</pubDate>
      <link>https://dev.to/lxkuz/deadlift-showing-off-your-strengths-in-a-job-interview-test-project-3958</link>
      <guid>https://dev.to/lxkuz/deadlift-showing-off-your-strengths-in-a-job-interview-test-project-3958</guid>
      <description>&lt;p&gt;Hi everyone! In this article, I’m going to touch on the theme of how to get a job. I want to share with you some of the experience I’ve gained along the way as a programmer. This might be useful even if you’re not a developer, as the ideas I will share are really common for many spheres. &lt;/p&gt;

&lt;p&gt;So, you’ve got your CV ready, and somewhere on your LinkedIn profile there’s a list of all the companies that you used to work for - this list might be long or short. But potential employers will probably want to check your experience out for themselves too - in fact, 99% of the time this is going to be the case. For most jobs, there will be multiple stages to the selection process, but in this article, I’m going to speak about the test project part only. Often, recruiters will set a difficult coding task for applicants, to give them a chance to show off their programming skills. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-trust-me" class="anchor"&gt;
  &lt;/a&gt;
  Why Should You Trust Me?
&lt;/h3&gt;

&lt;p&gt;I’m not afraid to admit that I’ve had several failed attempts at test projects in the past. After that, I had great feedback for my last five completed test projects, from five different companies. In four cases, I got a job offer as a direct result. So now I understand how to do it right, and I think I can safely say that all my subsequent test projects are likely to be successful as well.&lt;/p&gt;

&lt;p&gt;To be honest, I had some doubts myself about whether my ideas would work for less experienced developers. So, just to be totally sure, I ran an experiment (we all know how important it is to test stuff, right?) I introduced all these ideas to a friend of mine, who is a less experienced developer, before she attempted to solve a test question. She followed my advice, and sure enough, she got the job, thanks in a large part to solving a test project. So I’m sure that there’s value in what I’m talking about here because it’s a tried and tested strategy! &lt;/p&gt;

&lt;p&gt;Alright! I can’t wait to share all that I know on this, so let’s get on with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jNyeLZUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13a9xrysf4pnlrl85iwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jNyeLZUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13a9xrysf4pnlrl85iwj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-the-task-several-times" class="anchor"&gt;
  &lt;/a&gt;
  Read the Task Several Times
&lt;/h3&gt;

&lt;p&gt;You should do this every single time, even if the task looks simple. It’s possible that the task includes some pitfall or hidden information that you might miss, even after a second read. While you’re reading it through, you’ll probably be thinking about implementation already. Don’t get ahead of yourself, though - you’ll have enough time to work it all out. Taking your time is actually a pretty good rule of thumb for most of the future tasks you’ll undertake in your dream job. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrong-requirements-make-your-own" class="anchor"&gt;
  &lt;/a&gt;
  Wrong Requirements? Make Your Own!
&lt;/h3&gt;

&lt;p&gt;Sometimes while reading the task, you might notice that there are some inaccuracies or even some negligence on the part of the task author. Remember, skewed problems will lead to skewed solutions and you won’t be proud to show off such a solution. So feel free to make some modifications and go in the right direction. This might even be part of the test. Of course, you should logically explain your decision and make it clear that you didn’t just change it because it was too hard for you to do it as originally requested. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PoXPJ3hO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a365k4o801n1olqx3dun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PoXPJ3hO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a365k4o801n1olqx3dun.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-the-vacancy-description-again-and-research-the-company-thoroughly" class="anchor"&gt;
  &lt;/a&gt;
  Read the Vacancy Description Again and Research the Company Thoroughly
&lt;/h3&gt;

&lt;p&gt;You can get a lot of information about the company you’re hoping to work for by reading public sources. You’ll be able to find out what the perfect candidate looks like, what sort of problems they will be solving, and in what particular ways. Very often your test project will be the same sort of thing but in miniature. It means that you should try to make your solution as close as possible to the original one. &lt;/p&gt;

&lt;p&gt;That’s why it’s so important to understand this kind of background information about the company. This knowledge will definitely help you to address some of the questions about base architecture and tech stack picking and makes sure that your answers will be convincing. This way, when your future employer is reviewing your solution, they’ll just exclaim, “This is it!”  &lt;/p&gt;

&lt;p&gt;Let’s take a basic example. If the company you are applying to work for is a huge enterprise, I would recommend that you pick a mainstream stable technologies set, to show you are aware of the importance of using a reliable product. On the other hand, if it's a small startup company, you’d be better off using brand new technologies. This shows that you’re open to using any modern approaches and that you’re adaptable to change, so that they will feel that you’re on the same wavelength as them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-balance" class="anchor"&gt;
  &lt;/a&gt;
  Code Balance
&lt;/h3&gt;

&lt;p&gt;Let’s move on to some advice that is a bit more specialist and focused on programming. Let me share some code examples to show what I’m talking about. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#university-programming" class="anchor"&gt;
  &lt;/a&gt;
  University Programming
&lt;/h4&gt;

&lt;p&gt;This is the amateur style of programming that everybody uses when they’re just starting to learn programming. It’s the type of code that is just about good enough to solve the problem, but nothing more. Here is an example on Ruby but I guess everyone will understand what I mean, even if they’re not super familiar with Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
    &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shipments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply_coupon?&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is a straightforward approach to trying to calculate an order summary. It doesn’t follow code style rules, including constants and the ABC metric. We probably all wrote this kind of code when we were trying to solve some programming projects at university. I would suggest that you should never write code like this in your test project. 0% of University programming in your test project&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#industrial-programming" class="anchor"&gt;
  &lt;/a&gt;
  Industrial Programming
&lt;/h4&gt;

&lt;p&gt;We could also call this professional programming. Every solution algorithm that springs to mind will initially look like a university-programmed mess. But every professional programmer will rethink the idea and improve it, using best code practices to deliver high-quality code. So let’s briefly try to improve the code of the example above&lt;br&gt;
(FYI I do not pretend that this is the perfect implementation, I just want to show you the way of thinking).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_products_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_shipment_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apply_coupon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;normalize_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_products_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_shipment_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="no"&gt;FREE_SHIPMENT_ORDER_TOTAL&lt;/span&gt;
   &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shipments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_coupon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply_coupon?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt;
  &lt;span class="n"&gt;coupon_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;coupon_value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="no"&gt;COUPON_COVERAGE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;COUPON_COVERAGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coupon_value&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;normalize_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully, you can see that this code is much easier to read and understand. It shows every step of the total order calculation, and you can manage the process by modifying constants, values, and concrete logic parts. Your employer is going to prefer this type of code, as it is much cheaper for businesses to maintain and modify. &lt;/p&gt;

&lt;p&gt;One more example of professional programming is the ability to use foreign code components instead of reinventing the wheel. We could have libraries or services available in our system that are already doing all of this, so let’s just use them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;products_total&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="no"&gt;CalculateShipmentsTotal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;total: &lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;shipments: &lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shipments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ApplyCoupon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;total: &lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;order: &lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;NormalizeOrderTotal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this type of code will show your employer how professional and valuable you are as a developer. &lt;/p&gt;

&lt;p&gt;It’s important to strike a good balance between using existing instruments, configuring them, and writing custom code. This part is important, as it shows how good you are as a developer and demonstrates that you can close off regular tasks. It doesn't matter if the task is simple or complex, big or small. This is probably the most important point, as this type of task will make up 90% of your future work.&lt;/p&gt;

&lt;p&gt;Here is the code balance rule: 90% of industrial programming in your test project. What about the remaining 10%?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#olympiad-programming" class="anchor"&gt;
  &lt;/a&gt;
  Olympiad Programming
&lt;/h4&gt;

&lt;p&gt;This kind of code will demonstrate just how smart you are. It should include some indication of your wider skills. This might include a strong mathematical background, skills in performance optimization, or the ability to implement beautiful infrastructure solutions. And so on. But don’t go overkill on this. Too much use of olympiad programming code might make the employer think that you’ll use overly complex methods to solve simple tasks, which is bad for business. So the rule is this: 10% of olympiad programming in your test project.&lt;/p&gt;

&lt;p&gt;Sometimes, it’s just not possible for test projects to include any olympiad programming, due to the nature of the task. If that’s the case, you should just write 100% industrial programming code and leave it at that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t_6bY91K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erg14n3oqij0g5ursmhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_6bY91K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erg14n3oqij0g5ursmhj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-deadlift-idea" class="anchor"&gt;
  &lt;/a&gt;
  The Deadlift Idea
&lt;/h3&gt;

&lt;p&gt;What if the task is too big? Or the task is too small? In weightlifting, you always need to pick the perfect weight to suit your abilities. Bigger is better, but make sure it’s not beyond your capabilities! I would recommend that you follow the same logic when you’re working on the test project. If the task is too big, you can underline the most important elements and implement those with high-quality solutions. If the task looks too simple, you can add some tech magic to show off your professional skills. But be careful! Don’t punch above your weight - you should find the right level and ensure that you can pull it off with a nice technique, using the code balance explained above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solve-the-main-problem" class="anchor"&gt;
  &lt;/a&gt;
  Solve the Main Problem
&lt;/h3&gt;

&lt;p&gt;Now you know the list of subtasks you need to solve and you know that you need to research the nuances of the business so that you can easily identify which is the most important part of the test project task. This is the element that you should focus on implementing with the most style. Don’t be afraid to rewrite it a couple of times. &lt;/p&gt;

&lt;p&gt;This part of the code will definitely be reviewed, and its quality is what will reveal your main characteristics as a developer. Sometimes it will include the 10% of olympiad programming that I mentioned, but not always. &lt;/p&gt;

&lt;p&gt;You should be looking to use best practices and classical algorithms in solving these kinds of problems; this will give good results, and make your employers sit up and take notice. You’re saying to them, “Hey! I’m the guy you’re looking for!” This part of the project is very important, so don’t be afraid of skipping some low-priority elements in order to spend more time on this. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-commits-in-good-shape" class="anchor"&gt;
  &lt;/a&gt;
  Keep Commits in Good Shape
&lt;/h3&gt;

&lt;p&gt;Your git history shows your thought process. Inconsistent naming and code changes in your commits reflect a mess in your head. So you should be ready to put a lot of work into your git history. I would say at least 30% of the time you have available for the project should be spent on beautiful code changes in your git history. First commits are about infrastructure changes, project init, and adding in some of the most basic stuff. Then, as you get deeper into solving the problem and move from simple to hard, each commit shows each step you have taken. &lt;/p&gt;

&lt;p&gt;Apart from anything else, your git commits prove it’s your own work. Something to consider is that a long commits list shows your motivation to work in the company - for some employers, this is really important and will help you to stand you out amongst the other candidates.&lt;/p&gt;

&lt;p&gt;You should use conversions like this &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;https://www.conventionalcommits.org/en/v1.0.0/&lt;/a&gt; or this &lt;a href="https://seesparkbox.com/foundry/semantic_commit_messages"&gt;https://seesparkbox.com/foundry/semantic_commit_messages&lt;/a&gt; to keep consistent commits messages style.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-code-linters" class="anchor"&gt;
  &lt;/a&gt;
  Use Code Linters
&lt;/h3&gt;

&lt;p&gt;Write clean, readable, scalable, maintainable, secure code. This is obvious advice, but it’s worth mentioning because it’s so important. The code you write shows the level of your skill, and if you don’t demonstrate the required level to meet the requirements of the job, then you may not pass the test. Use code linters to help you avoid any sloppy moments in your code. This will improve the overall impression that you make on the employer when they’re reviewing your test. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-tests" class="anchor"&gt;
  &lt;/a&gt;
  Write Tests
&lt;/h3&gt;

&lt;p&gt;Writing tests is important. The way you cover your code with tests shows how professional you are. Enterprise project developers usually spend more time writing tests than writing actual code. So imagine that you’re already working on the enterprise. Cover everything you know how to cover in the right way. I would even recommend using the TDD approach. Actually, I think you should do this anyway, even if it’s not specifically required or requested in the task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selectively-fix-bugs" class="anchor"&gt;
  &lt;/a&gt;
  Selectively Fix Bugs
&lt;/h3&gt;

&lt;p&gt;The main usage scenario should 100% work. This is actually good advice for QA specialists as well: do test the positive flow. Don’t waste time on fixing tricky bugs and edge effects. You definitely have more important stuff to work on. P.S. Got issues with bugs? Read &lt;a href="https://dev.to/lxkuz/the-art-of-war-how-to-beat-the-bugs-faster-and-harder-2e4g"&gt;my previous article&lt;/a&gt; ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fsw3ZKmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28a7b8h8x50t8gok5mjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fsw3ZKmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28a7b8h8x50t8gok5mjf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readme-is-important" class="anchor"&gt;
  &lt;/a&gt;
  Readme Is Important
&lt;/h3&gt;

&lt;p&gt;When you deliver your test project solution, you should be 100% sure that the inspecting person will see the results and will appreciate them. Well-composed Readme is a key factor in achieving this. Here’s a list of things I usually include in the Readme file:&lt;br&gt;
Step-by-step instructions on how to start the project and see the results. I always assume that the checking person is not a programmer at all, so my steps are quite detailed and accurate. Anyone should just be able to blindly follow the steps and get results. After I finish the project, I test all these steps one more time to make sure that they still work. This is good advice to follow, as I can’t remember a single time when I didn’t update some of the steps after that very last check.&lt;br&gt;
I always include a list of the tech stack I’ve used. This helps to highlight some of the better solutions in the project, as I don’t believe that every line of code will be read. So this helps to prevent the scope of the project from being underestimated. &lt;br&gt;
I might mention some of the best ideas and tactics I’ve used. Don’t be shy - there’s no harm in giving yourself a bit of good PR. I also explain any non-transparent solutions, especially if I had any reason to change the test project conditions. Once again, I am pretty much sure nobody will read ALL your code, so when you explain some of these things, it gives a better understanding and helps the reviewer to appreciate the best elements of the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-words-before-you-go" class="anchor"&gt;
  &lt;/a&gt;
  Last Words Before You Go
&lt;/h3&gt;

&lt;p&gt;There are no cast-iron guarantees here I’m afraid. You could follow all the advice above, and still not get the job if there’s someone else even better than you. But there’s always an opportunity for learning. &lt;/p&gt;

&lt;p&gt;This might not work in every scenario, but don’t be afraid to try something new. When I’m doing a new test project, I often use it as an opportunity to try out different things that I’ve always wanted to do but never had the time before. &lt;/p&gt;

&lt;p&gt;I use modern code style approaches that are popular in the tech stack. I make sure I’m familiar with all the latest versions of the programming language and all libs, frameworks and technologies. I use the latest features and read changelogs looking for new stuff to play with and try new ways of solving known issues. That's how I discover new things. And it helps to keep me interested in my work too. &lt;/p&gt;

&lt;p&gt;If you do everything as perfectly as possible, you’ll fall in love with your project. Even if nobody notices it and nobody calls you back, you know that you can be proud of it anyway. Shit happens, but you’ll have no regrets about the project you created. See it as an opportunity for growth, and success will follow! Good luck!&lt;/p&gt;

</description>
      <category>jobs</category>
      <category>interview</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS Modules vs CSS-in-JS. Who wins?</title>
      <author>Sergey</author>
      <pubDate>Thu, 11 Mar 2021 13:29:36 +0000</pubDate>
      <link>https://dev.to/alexsergey/css-modules-vs-css-in-js-who-wins-3n25</link>
      <guid>https://dev.to/alexsergey/css-modules-vs-css-in-js-who-wins-3n25</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In modern React application development, there are many approaches to organizing application styles. One of the popular ways of such an organization is the CSS-in-JS approach (in the article we will use &lt;strong&gt;styled-components&lt;/strong&gt; as the most popular solution) and CSS Modules. In this article, we will try to answer the question: which is better &lt;em&gt;CSS-in-JS&lt;/em&gt; or &lt;em&gt;CSS Modules&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;So let's get back to basics. When a web page was primarily set for storing textual documentation and didn't include user interactions, properties were introduced to style the content. Over time, the web became more and more popular, sites got bigger, and it became necessary to reuse styles. For these purposes, CSS was invented. Cascading Style Sheets. Cascading plays a very important role in this name. We write styles that lay like a waterfall over the hollows of our document, filling it with colors and highlighting important elements.&lt;/p&gt;

&lt;p&gt;Time passed, the web became more and more complex, and we are facing the fact that the styles cascade turned into a problem for us. Distributed teams, working on their parts of the system, combining them into reusable modules, assemble an application from pieces, like Dr. Frankenstein, stitching styles into one large canvas, can get the sudden result... Due to the cascade, the styles of module 1 can affect the display of module 3, and module 4 can make changes to the global styles and change the entire display of the application in general.&lt;/p&gt;

&lt;p&gt;Developers have started to think of solving this problem. Style naming conventions were created to avoid overlaps, such as Yandex's BEM or Atomic CSS. The idea is clear, we operate with names in order to get predictability, but at the same time to prevent repetitions.&lt;/p&gt;

&lt;p&gt;These approaches were crashed of the rocks of the human factor. Anyway, we have no guarantee that the developer from team A won't use the name from team C.&lt;/p&gt;

&lt;p&gt;The naming problem can only be solved by assigning a random name to the CSS class. Thus, we get a completely independent CSS set of styles that will be applied to a specific HTML block and we understand for sure that the rest of the system won't be affected in any way.&lt;/p&gt;

&lt;p&gt;And then 2 approaches came onto the stage to organize our CSS: &lt;em&gt;CSS Modules&lt;/em&gt; and &lt;em&gt;CSS-in-JS&lt;/em&gt;. Under the hood, having a different technical implementation, and in fact solving the problem of atomicity, reusability, and avoiding side effects when writing CSS.&lt;/p&gt;

&lt;p&gt;Technically, CSS Modules transforms style names using a hash-based on the filename, path, style name. Styled-components handles styles in JS runtime, adding them as they go to the &lt;strong&gt;head&lt;/strong&gt; HTML section (&amp;lt;head&amp;gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approaches-overview" class="anchor"&gt;
  &lt;/a&gt;
  Approaches overview
&lt;/h2&gt;

&lt;p&gt;Let's see which approach is more optimal for writing a modern web application!&lt;/p&gt;

&lt;p&gt;Let's imagine we have a basic React application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       React application title
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS styles of this application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The dependencies are React &lt;strong&gt;16.14&lt;/strong&gt;, react-dom &lt;strong&gt;16.14&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's try to build this application using webpack using all production optimizations.&lt;/p&gt;

&lt;p&gt;we've got&lt;/p&gt;

&lt;p&gt;uglified JS - &lt;strong&gt;129kb&lt;/strong&gt;&lt;br&gt;
separated and minified CSS - &lt;strong&gt;133 bytes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same code in CSS Modules will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       React application title
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;uglified JS - &lt;strong&gt;129kb&lt;/strong&gt;&lt;br&gt;
separated and minified CSS - &lt;strong&gt;151 bytes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The CSS Modules version will take up a couple of bytes more due to the impossibility of compressing the long generated CSS names.&lt;/p&gt;

&lt;p&gt;Finally, let's rewrite the same code under styled-components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
 padding: 20px;
 background-color: #222;
 text-align: center;
 color: white;
 font-size: 1.5em;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       React application title
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;uglified JS - &lt;strong&gt;163kb&lt;/strong&gt;&lt;br&gt;
CSS file is missing&lt;/p&gt;

&lt;p&gt;The more than &lt;strong&gt;30kb&lt;/strong&gt; difference between &lt;strong&gt;CSS Modules&lt;/strong&gt; and &lt;strong&gt;CSS-in-JS (styled-components)&lt;/strong&gt; is due to styled-components adding extra code to add styles to the &amp;lt;head&amp;gt; part of the HTML document.&lt;/p&gt;

&lt;p&gt;In this synthetic test, the CSS Modules approach wins, since the build system doesn't add something extra to implement it, except for the changed class name. Styled-components due to technical implementation, adds dependency as well as code for runtime handling and styling of &amp;lt;head&amp;gt;.&lt;/p&gt;

&lt;p&gt;Now let's take a quick look at the pros and cons of CSS-in-JS / CSS Modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proc-and-cons" class="anchor"&gt;
  &lt;/a&gt;
  Proc and cons
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cssinjs" class="anchor"&gt;
  &lt;/a&gt;
  CSS-in-JS
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#cons" class="anchor"&gt;
  &lt;/a&gt;
  cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The browser won't start interpreting the styles until styled-components has parsed them and added them to the DOM, which slows down rendering.&lt;/li&gt;
&lt;li&gt;The absence of CSS files means that you cannot cache separate CSS.&lt;/li&gt;
&lt;li&gt;One of the key downsides is that most libraries don't support this approach and we still can't get rid of CSS. All native JS and jQuery plugins are written without using this approach. Not all React solutions use it.&lt;/li&gt;
&lt;li&gt;Styles integration problems. When a markup developer prepares a layout for a JS developer, we may forget to transfer something; there will also be difficulty in synchronizing a new version of layout and JS code.&lt;/li&gt;
&lt;li&gt;We can't use CSS utilities: SCSS, Less, Postcss, stylelint, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#proc" class="anchor"&gt;
  &lt;/a&gt;
  proc
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Styles can use JS logic. This reminds me of Expression in IE6, when we could wrap some logic in our styles (Hello, CSS Expressions :) ).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
 padding: 20px;
 background-color: #222;
 text-align: center;
 color: white;
 font-size: 1.5em;
 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secondary&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
   background-color: #fff;
   color: #000;
   padding: 10px;
   font-size: 1em;
 `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When developing small modules, it simplifies the connection to the project, since you only need to connect the one independent JS file.&lt;/li&gt;
&lt;li&gt;It is semantically nicer to use &amp;lt;Title&amp;gt; in a React component than &amp;lt;h1 className={style.title}&amp;gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-modules" class="anchor"&gt;
  &lt;/a&gt;
  CSS Modules
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#cons" class="anchor"&gt;
  &lt;/a&gt;
  cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;To describe global styles, you must use a syntax that does not belong to the CSS specification.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:global&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.myclass&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Integrating into a project, you need to include styles.&lt;/li&gt;
&lt;li&gt;Working with typescript, you need to automatically or manually generate interfaces. For these purposes, I use webpack loader:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@teamsupercell/typings-for-css-modules-loader"&gt;@teamsupercell/typings-for-css-modules-loader&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#proc" class="anchor"&gt;
  &lt;/a&gt;
  proc
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;We work with regular CSS, it makes it possible to use SCSS, Less, Postcss, stylelint, and more. Also, you don't waste time on adapting the CSS to JS.&lt;/li&gt;
&lt;li&gt;No integration of styles into the code, clean code as result.&lt;/li&gt;
&lt;li&gt;Almost 100% standardized except for global styles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So the fundamental problem with the CSS-in-JS approach is that it's not CSS! This kind of code is harder to maintain if you have a defined person in your team working on markup. Such code will be slower, due to the fact that the CSS rendered into the file is processed in parallel, and the CSS-in-JS cannot be rendered into a separate CSS file. And the last fundamental flaw is the inability to use ready-made approaches and utilities, such as SCSS, Less and Stylelint, and so on.&lt;/p&gt;

&lt;p&gt;On the other hand, the CSS-in-JS approach can be a good solution for the Frontend team who deals with both markup and JS, and develops all components from scratch. Also, CSS-in-JS will be useful for modules that integrate into other applications.&lt;/p&gt;

&lt;p&gt;In my personal opinion, the issue of CSS cascading is overrated. If we are developing a small application or site, with one team, then we are unlikely to encounter a name collision or the difficulty of reusing components. If you faced with this problem,  I recommend considering CSS Modules, as, in my opinion, this is a more optimal solution for the above factors. In any case, whatever you choose, write meaningful code and don't get fooled by the hype. Hype will pass, and we all have to live with it. Have great and interesting projects, dear readers!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>React 101 - part 5: Create React App</title>
      <author>Eric Chapman</author>
      <pubDate>Thu, 11 Mar 2021 12:41:23 +0000</pubDate>
      <link>https://dev.to/ericchapman/react-101-part-5-create-react-app-46i8</link>
      <guid>https://dev.to/ericchapman/react-101-part-5-create-react-app-46i8</guid>
      <description>&lt;p&gt;After my Javascript series: &lt;a href="https://dev.to/rickavmaniac/javascript-my-learning-journey-part-1-what-is-javascript-role-and-use-case-49a3"&gt;https://dev.to/rickavmaniac/javascript-my-learning-journey-part-1-what-is-javascript-role-and-use-case-49a3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am now ready to begin my React learning journey :)&lt;/p&gt;

&lt;p&gt;Click follow if you want to miss nothing. I will publish here on Dev.to what I learn from my React course the day before.&lt;/p&gt;

&lt;p&gt;Without further ado here is a summary of my notes for day 5.&lt;/p&gt;

&lt;h2&gt;Create React App&lt;/h2&gt;

&lt;p&gt;Up until now we use React CDN link. But like I say to build real world app and go to production we have to install all those tools and libraries into our machine. &lt;/p&gt;

&lt;p&gt;This installation process it complicated and time consuming, that's why React introduce a tool to do that automatically: The Create React App command.&lt;/p&gt;

&lt;p&gt;Create React App is an officially supported way to create single-page React applications. It offers a modern build setup with no configuration.&lt;/p&gt;

&lt;p&gt;To use this command we need to install node.js (&lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Once node.js is install we can now go into the terminal inside our project folder and execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app my-app-name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command will install React, ReactDOM, ReactScript and many more dependencies.&lt;/p&gt;

&lt;p&gt;Once install, to launch to new project execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-app
yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SIBAP7jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khq1heuhfhdmx1cjqzvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SIBAP7jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khq1heuhfhdmx1cjqzvr.png" alt="React App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To stop the server you can hit ctrl-c&lt;/p&gt;

&lt;p&gt;If you open your code editor you will see the new file structure&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AEa8paX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoewu1kgcf5h939lh96c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AEa8paX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoewu1kgcf5h939lh96c.png" alt="File structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the public folder we have an index.html that is the entry point of our app. In that file there is a div with an id="root". That div is the container for our React Components.&lt;/p&gt;

&lt;p&gt;That link is specified in the index.js file. The ReactDOM.render() will render our React components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./reportWebVitals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The welcome screen you saw when you launch the application was the code include in the App component.&lt;/p&gt;

&lt;p&gt;To see the App component you can open App.js. There we have a function React Component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-logo"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Edit &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;src/App.js&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; and save to reload.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-link"&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://reactjs.org"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Learn React
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code has been create by the create-react-app command. It will be overrite soon with your code.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's it for today. tomorrow the journey continue... If you want to be sure to miss nothing click follow me!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How urls change performance with frameworks and raw http package in node.js?</title>
      <author>Eric</author>
      <pubDate>Thu, 11 Mar 2021 12:10:44 +0000</pubDate>
      <link>https://dev.to/calidion/how-urls-change-performance-with-frameworks-and-raw-http-package-in-node-js-418j</link>
      <guid>https://dev.to/calidion/how-urls-change-performance-with-frameworks-and-raw-http-package-in-node-js-418j</guid>
      <description>&lt;p&gt;I was told that raw http package is much faster than the frameworks. But I don't really trust such claims.&lt;br&gt;
So I make a test on how performance changes on http raw packages and frameworks.&lt;br&gt;
Here is the &lt;a href="https://github.com/aex-ts-node/benchmark"&gt;test code&lt;/a&gt;, so you can get your own result.&lt;/p&gt;

&lt;p&gt;You will see, in my test, as the url getting complicated, the performance difference is getting smaller.&lt;/p&gt;

&lt;p&gt;The detailed result is as follows:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nodejs-framework-benchmarks" class="anchor"&gt;
  &lt;/a&gt;
  Node.js framework Benchmarks
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#root-url-" class="anchor"&gt;
  &lt;/a&gt;
  root url "/"
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;http(raw)&lt;/th&gt;
&lt;th&gt;aex&lt;/th&gt;
&lt;th&gt;express&lt;/th&gt;
&lt;th&gt;koa&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5683.82&lt;/td&gt;
&lt;td&gt;4463.53&lt;/td&gt;
&lt;td&gt;4058.92&lt;/td&gt;
&lt;td&gt;5042.28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5742.87&lt;/td&gt;
&lt;td&gt;4414.53&lt;/td&gt;
&lt;td&gt;4055.42&lt;/td&gt;
&lt;td&gt;5293.72&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5688.20&lt;/td&gt;
&lt;td&gt;4547.68&lt;/td&gt;
&lt;td&gt;3743.78&lt;/td&gt;
&lt;td&gt;5309.73&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5896.43&lt;/td&gt;
&lt;td&gt;4332.36&lt;/td&gt;
&lt;td&gt;3913.13&lt;/td&gt;
&lt;td&gt;5255.86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5917.57&lt;/td&gt;
&lt;td&gt;4104.71&lt;/td&gt;
&lt;td&gt;4058.25&lt;/td&gt;
&lt;td&gt;5280.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6026.36&lt;/td&gt;
&lt;td&gt;4303.74&lt;/td&gt;
&lt;td&gt;4085.23&lt;/td&gt;
&lt;td&gt;5333.55&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5771.18&lt;/td&gt;
&lt;td&gt;4349.19&lt;/td&gt;
&lt;td&gt;4027.74&lt;/td&gt;
&lt;td&gt;5245.15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;the averaged results:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;http(raw)&lt;/th&gt;
&lt;th&gt;aex&lt;/th&gt;
&lt;th&gt;express&lt;/th&gt;
&lt;th&gt;koa&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5818.06&lt;/td&gt;
&lt;td&gt;4359.39&lt;/td&gt;
&lt;td&gt;3991.78&lt;/td&gt;
&lt;td&gt;5251.55&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;visual differences:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AMu1kJUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5y0xmy9y5kt2cuyjzep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AMu1kJUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5y0xmy9y5kt2cuyjzep.png" alt="root url"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#none-root-url-access-url" class="anchor"&gt;
  &lt;/a&gt;
  none root url access "/url"
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;http(raw)&lt;/th&gt;
&lt;th&gt;aex&lt;/th&gt;
&lt;th&gt;express&lt;/th&gt;
&lt;th&gt;koa&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5987.78&lt;/td&gt;
&lt;td&gt;4062.69&lt;/td&gt;
&lt;td&gt;3636.43&lt;/td&gt;
&lt;td&gt;4375.62&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5941.46&lt;/td&gt;
&lt;td&gt;4065.19&lt;/td&gt;
&lt;td&gt;3677.68&lt;/td&gt;
&lt;td&gt;4498.54&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5973.59&lt;/td&gt;
&lt;td&gt;4041.63&lt;/td&gt;
&lt;td&gt;3564.66&lt;/td&gt;
&lt;td&gt;4307.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5942.72&lt;/td&gt;
&lt;td&gt;4075.49&lt;/td&gt;
&lt;td&gt;3429.73&lt;/td&gt;
&lt;td&gt;4427.29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5970.65&lt;/td&gt;
&lt;td&gt;4072.76&lt;/td&gt;
&lt;td&gt;3508.85&lt;/td&gt;
&lt;td&gt;4274.21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5930.92&lt;/td&gt;
&lt;td&gt;4046.41&lt;/td&gt;
&lt;td&gt;3534.67&lt;/td&gt;
&lt;td&gt;4452.34&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;the averaged results:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;http(raw)&lt;/th&gt;
&lt;th&gt;aex&lt;/th&gt;
&lt;th&gt;express&lt;/th&gt;
&lt;th&gt;koa&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5957.85&lt;/td&gt;
&lt;td&gt;4060.70&lt;/td&gt;
&lt;td&gt;3558.67&lt;/td&gt;
&lt;td&gt;4389.22&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;visual differences:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZspXjG5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amgs031sidr0a0u76ano.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZspXjG5o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amgs031sidr0a0u76ano.png" alt="none root url"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parameterized-url-userid" class="anchor"&gt;
  &lt;/a&gt;
  parameterized url "/user/:id"
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;http(raw)&lt;/th&gt;
&lt;th&gt;aex&lt;/th&gt;
&lt;th&gt;express&lt;/th&gt;
&lt;th&gt;koa&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5177.35&lt;/td&gt;
&lt;td&gt;4366.73&lt;/td&gt;
&lt;td&gt;3655.53&lt;/td&gt;
&lt;td&gt;4703.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4935.86&lt;/td&gt;
&lt;td&gt;4290.90&lt;/td&gt;
&lt;td&gt;3722.14&lt;/td&gt;
&lt;td&gt;4811.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5175.58&lt;/td&gt;
&lt;td&gt;4326.33&lt;/td&gt;
&lt;td&gt;3704.04&lt;/td&gt;
&lt;td&gt;4667.66&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5183.80&lt;/td&gt;
&lt;td&gt;4340.19&lt;/td&gt;
&lt;td&gt;3787.27&lt;/td&gt;
&lt;td&gt;4899.29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5188.29&lt;/td&gt;
&lt;td&gt;4362.57&lt;/td&gt;
&lt;td&gt;3797.09&lt;/td&gt;
&lt;td&gt;4896.09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5322.29&lt;/td&gt;
&lt;td&gt;4359.82&lt;/td&gt;
&lt;td&gt;3794.24&lt;/td&gt;
&lt;td&gt;4718.80&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;the averaged results:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;http(raw)&lt;/th&gt;
&lt;th&gt;aex&lt;/th&gt;
&lt;th&gt;express&lt;/th&gt;
&lt;th&gt;koa&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5163.86&lt;/td&gt;
&lt;td&gt;4341.09&lt;/td&gt;
&lt;td&gt;3743.39&lt;/td&gt;
&lt;td&gt;4782.82&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;visual differences:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISwO_UDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aas11gevszdvbkjv5pjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISwO_UDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aas11gevszdvbkjv5pjm.png" alt="parametrised url"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>A Generative SVG Starter Kit</title>
      <author>George Francis</author>
      <pubDate>Thu, 11 Mar 2021 12:09:30 +0000</pubDate>
      <link>https://dev.to/georgedoescode/a-generative-svg-starter-kit-5cm1</link>
      <guid>https://dev.to/georgedoescode/a-generative-svg-starter-kit-5cm1</guid>
      <description>&lt;p&gt;SVG is a fantastic medium for generative art. It can scale to any resolution, is a joy to debug, and has a multitude of incredible filters/effects built-in. &lt;/p&gt;

&lt;p&gt;This post aims to provide you with all the tools you need to start creating your own generative SVG art/design. Unlike my other tutorials, we won't be creating one single example here. Rather, we will be examining a collection of libraries, utility functions, and techniques that once learned can be used to create anything you like!&lt;/p&gt;

&lt;p&gt;Sound good? Let's do it 🎨&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Psst! I wrote this article after talking about generative SVG in the wonderful &lt;a href="https://viewbox.club/"&gt;viewBox newsletter&lt;/a&gt;. Be sure to check out the issue &lt;a href="https://buttondown.email/viewBox/archive/a56db097-f200-4915-bf29-1817df7b517e"&gt;here&lt;/a&gt; for more generative treats. &lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#who-is-this-starter-kit-for%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  Who is this starter kit for? 
&lt;/h2&gt;

&lt;p&gt;Generative art savant, who is somewhat new to SVG? SVG magician, who is dipping their toe into the generative art ocean? There is something here for everyone!&lt;/p&gt;

&lt;p&gt;No prior generative art knowledge is necessary to make the most out of this post. Some basic SVG knowledge (drawing shapes, giving them a fill color, etc) will be helpful, though. To make the most out of this starter kit, you'll need a working knowledge of HTML/CSS/JS, too. &lt;/p&gt;

&lt;p&gt;If you are &lt;em&gt;completely&lt;/em&gt; new to SVG, I recommend reading through this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial"&gt;MDN Tutorial&lt;/a&gt;. Keeping an eye on the docs as a reference, experiment in a &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt;. Draw some simple shapes, move them around, color them in. SVG is a markup language like HTML, and it's a lot less scary than it seems.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#show-me-the-code%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  Show me the code! 
&lt;/h2&gt;

&lt;p&gt;If you would like to skip ahead and dive in with creating using this starter pack, I got you. Here's a CodePen with all the utility functions and HTML/CSS setup included. Hit &lt;code&gt;fork&lt;/code&gt; to get started right away.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/abBQxBj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I know, it doesn't look like much right now, but there's a ton to unpack here... &lt;/p&gt;

&lt;p&gt;Onwards! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-generative-art%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  What is generative art? 
&lt;/h2&gt;

&lt;p&gt;For some folks reading this post, the term &lt;em&gt;“Generative Art”&lt;/em&gt; may be an unfamiliar one. If you are familiar with a generative approach to art/design already, feel free to skip this section. &lt;/p&gt;

&lt;p&gt;If not — here's a quick example...&lt;/p&gt;

&lt;p&gt;Say, you are a painter. You have some dice and 6 colors in your palette. You roll the dice. Based on how the dice lands, you choose one of the 6 colors and paint a stripe on your canvas. If the dice reads “1” you always paint a blue stripe, “2” and you paint a red stripe, and so on. You continue this process until your canvas is full.&lt;/p&gt;

&lt;p&gt;That's all generative art is. Art created with an element of autonomy/chance. There are no rules, aside from the ones &lt;em&gt;you define&lt;/em&gt;. Generative art doesn't even need to digital. Computers only happen to be wonderful companions for this type of creation. Why? They are fantastic at performing repetitive tasks, fast. &lt;/p&gt;

&lt;p&gt;To illustrate the above, here's a simple CodePen that “paints” random stripes on a canvas: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/vYyQMaE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Try clicking the regenerate button. Pretty speedy right? The computer re-renders the image, with a random result, in a matter of milliseconds. Far more efficient than a squishy human painting on a physical canvas! This kind of speed is invaluable when exploring more complex emergent behavior/patterns.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-blank-canvas%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  A blank canvas 
&lt;/h2&gt;

&lt;p&gt;Most paintings start with a blank canvas of some kind. When working with generative SVG, that canvas is an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element on a web page. Here's how I set up the HTML/CSS for almost all my generative SVG work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"canvas"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 200 200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, in the HTML, we have an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element with a single attribute set, &lt;code&gt;viewBox&lt;/code&gt;.  This attribute defines a coordinate space. In our case, the coordinate space has a width of 200 units and a height of 200 units.&lt;/p&gt;

&lt;p&gt;Once defined, we “draw” everything in the SVG element relative to its viewBox. The SVG will then scale its contents to &lt;em&gt;any&lt;/em&gt; resolution. This is one of SVG's most handy features, especially when it comes to generative art. A single SVG can produce a huge physical print or render on a narrow mobile screen!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;I'm keeping things somewhat high-level here. If you would like to read more about the viewBox attribute, check out&lt;/em&gt; &lt;a href="https://css-tricks.com/scale-svg/"&gt;&lt;em&gt;this article&lt;/em&gt;&lt;/a&gt; &lt;em&gt;on CSS tricks.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;96%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, in the CSS, we have a small selection of styles that achieve 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Make sure the SVG element is a perfect square that always fits within the viewport. Slap-bang in the middle. Perfect for CodePens!&lt;/li&gt;
&lt;li&gt; Give the SVG element a white fill, and set the page background to a very light grey color. This is to help visualize the canvas.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! This HTML/CSS setup is everything you need to get started with generative SVG. It's simple, flexible, and will make sure your work looks great on everyone's screen. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;A 200x200 unit canvas is my preference and completely arbitrary. Not feeling the square? Experiment with your own viewBox units and aspect ratios/element sizes.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#an-svg-paintbrush%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  An SVG paintbrush 
&lt;/h2&gt;

&lt;p&gt;If the SVG element is our canvas, &lt;a href="https://svgjs.com/docs/3.0/"&gt;SVG.js&lt;/a&gt; is our paintbrush. When working on generative art, you will need to create elements (such as a &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;) in a dynamic way. &lt;/p&gt;

&lt;p&gt;Say you would like to create shapes as part of a loop. You create a for-loop that iterates 100 times. Within each iteration, you choose a random number between 0 and 1. If that number is greater than 0.5, you draw a rectangle. If it is less than 0.5, you draw a circle.&lt;/p&gt;

&lt;p&gt;As SVG is a markup language, there is no real way of handling this kind of conditional/real-time rendering built-in. That's where JavaScript, by way of SVG.js, comes in to help.&lt;/p&gt;

&lt;p&gt;Scripting SVG with JavaScript alone can be tedious. SVG.js provides a terse, easy-to-use way of creating/removing/updating SVG elements. That's it. It provides close to complete coverage of the SVG spec and is a joy to work with. &lt;/p&gt;

&lt;p&gt;Here's an excerpt of the JS required for the above stripes program, &lt;em&gt;without&lt;/em&gt; SVG.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;stripeWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElementNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.w3.org/2000/svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stripeWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stroke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;svgElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an excerpt of the JS required for the above stripes program, &lt;em&gt;with&lt;/em&gt; SVG.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;stripeWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ah, Much better 🧘&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you would prefer to reduce your dependencies, working with just JavaScript is completely fine. There are likely some more elegant ways of handling the above but personally, I prefer to offload my SVG scripting and focus on the creative stuff.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svgjs-in-the-wild" class="anchor"&gt;
  &lt;/a&gt;
  SVG.js in the wild
&lt;/h3&gt;

&lt;p&gt;To demonstrate what is possible with SVG.js, I have a couple of amazing CodePens here from &lt;a href="https://twitter.com/liamegan"&gt;Liam Egan&lt;/a&gt;. These pens are a fantastic example of how beautiful generative SVG can be, and how powerful SVG.js is in a generative context.&lt;/p&gt;

&lt;p&gt;“Grow 4”&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubniggurath/embed/abByPXz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;“Flare 2”&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubniggurath/embed/poNWONd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href="https://codepen.io/shubniggurath"&gt;Liam's CodePen&lt;/a&gt; for more! 🖊&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-utility-functions-endless-possibilities%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  4 utility functions... endless possibilities 
&lt;/h2&gt;

&lt;p&gt;So, we have a responsive blank canvas and an awesome way of adding to it. What next? Some helpful functions to decide &lt;em&gt;what&lt;/em&gt; to render would be great.&lt;/p&gt;

&lt;p&gt;First off, a quick note. There's a common misconception that generative art is &lt;em&gt;super complex 🤯&lt;/em&gt; and you need to be some kind of math whizz to do it. Well, to quote the great Dwight Shrute... &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FALSE&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don't. I promise it's not as scary as it seems. Armed with the 4 functions/examples taught here you will have all you need to make beautiful works of art. No crazy math skills required. Creativity is the most important ingredient in delicious generative art.&lt;/p&gt;

&lt;p&gt;I have added the source code for all these functions to &lt;a href="https://github.com/georgedoescode/generative-utils"&gt;this repository&lt;/a&gt;. They are also available as an &lt;a href="https://www.npmjs.com/package/@georgedoescode/generative-utils"&gt;NPM package&lt;/a&gt; for ease of installation. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;This is not an “official” library, so please don't expect tests, documentation, etc... yet! 👀&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#random%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  random() 
&lt;/h3&gt;

&lt;p&gt;This is a stone-cold generative classic. My version of &lt;code&gt;random()&lt;/code&gt; can do two things; return a random number within a range, or return a random item from an array. &lt;/p&gt;

&lt;p&gt;Here's how you can use it to produce a random number within a range: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/poNqRxg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's how you can use it to pick a random item from an array: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/WNoLRWb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Cool! This simple function will be a loyal companion on your generative journey. You could use it to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Generate a random radius for a &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Position an object at a random position within an SVG &lt;/li&gt;
&lt;li&gt;  Pick a random fill color from a pre-defined array of values&lt;/li&gt;
&lt;li&gt;  Rotate an element by a random amount &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this function is new to you, fork the starter CodePen and experiment for a while!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#map%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  map() 
&lt;/h3&gt;

&lt;p&gt;This is a super helpful function, especially when dealing with user interaction. It does 1 thing — map a number that usually exists in one range to another. This is a little tricky one to explain, so here's a CodePen:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/RwoEKzE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this example, we use &lt;code&gt;map()&lt;/code&gt; to modulate an ellipse's width/height based on the user's mouse position. Dig into the JavaScript for a practical example of how &lt;code&gt;map()&lt;/code&gt; works 👀&lt;/p&gt;

&lt;p&gt;Although &lt;code&gt;map()&lt;/code&gt; is fantastic for dealing with user input, it can also be helpful in a bunch of other contexts. You could use it to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Set an element's size based on how far it is from another&lt;/li&gt;
&lt;li&gt;  Map temperature data from a weather API to the opacity of a yellow circle... like the sun! &lt;/li&gt;
&lt;li&gt;  Animate an element on scroll by mapping the current scroll position to a more useful (random?) range&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, if this function is new to you, have a play. Fire up a new CodePen and experiment! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spline%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  spline() 
&lt;/h3&gt;

&lt;p&gt;If you have read through any of my tutorials, or checked out my CodePen profile, you have seen &lt;code&gt;spline()&lt;/code&gt; in action. I'm obsessed. It's the best. &lt;/p&gt;

&lt;p&gt;What does it do? It draws a perfect, smooth curve between any set of points. It's incredible for creating organic, soft shapes. Here's a simple example of &lt;code&gt;spline()&lt;/code&gt; in action: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/zYoyZrp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We store an array of random &lt;code&gt;{ x, y }&lt;/code&gt; coordinates (thank you &lt;code&gt;random()&lt;/code&gt;) and use &lt;code&gt;spline()&lt;/code&gt; to draw a smooth curve through them. Nice. You may already see how this could be great for data-visualization, but spline can do so much more. &lt;/p&gt;

&lt;p&gt;In this CodePen, I use &lt;code&gt;spline()&lt;/code&gt; to creating an undulating SVG blob: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/oNzamjV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/georgedoescode/tutorial-build-a-smooth-animated-blob-using-svg-js-3pne"&gt;You can check out the tutorial for this CodePen here. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, I use &lt;code&gt;spline()&lt;/code&gt; to create generative bodies for little blob characters: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/dypjOgv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/georgedoescode/tutorial-generative-blob-characters-using-svg-1igg"&gt;You can check out the tutorial for this CodePen here. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool! As per usual, experiment with this function and see what cool stuff you can create. You could even follow along with one of the above tutorials if you like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pointsinpath%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  pointsInPath() 
&lt;/h3&gt;

&lt;p&gt;This is a new addition to my generative utility belt. It returns an array of equidistant points plotted on an SVG &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; element. This is amazing, as it allows you to create your very own, generative, stroke styles. &lt;/p&gt;

&lt;p&gt;Here's a demo of this technique that I put together for the wonderful viewBox newsletter: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/LYbdXJR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Have a quick look around the source code of the above CodePen. You can see how well &lt;code&gt;random()&lt;/code&gt; works alongside &lt;code&gt;pointsInPath()&lt;/code&gt;. Magical! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#color" class="anchor"&gt;
  &lt;/a&gt;
  Color
&lt;/h2&gt;

&lt;p&gt;Some folks love working in black and white, and that's awesome. Me... I like things to be bright and colorful. I don't have a fixed approach to color in generative art, but I love to use HSL as a format.&lt;/p&gt;

&lt;p&gt;Why? HSL is far more intuitive, to me than HEX or RGB. I won't go on an HSL deep dive here, but I explain how it works in detail in &lt;a href="https://dev.to/georgedoescode/a-beginner-s-guide-to-applying-color-in-ui-design-3904#working-with-hsl%C2%A0"&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using JS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literals&lt;/a&gt; and HSL, one can form generative color palettes in a few lines of code. Here's an example:  &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/BaQvWdo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this example, we are making use of &lt;code&gt;random()&lt;/code&gt; to pick a “base” random hue. We then create 3 template literal colors, each with a hue 120 degrees apart. The technical term for this is a “triadic” color palette. This is a classic, simple, way of choosing colors that look great together.&lt;/p&gt;

&lt;p&gt;You can extend this method to use many other steps of rotation... for more information about color theory, and using a color wheel, check out &lt;a href="https://www.canva.com/colors/color-wheel/"&gt;this article&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Say, for example, you wanted to use an analogous color palette &lt;em&gt;(3 hues, each 30 degrees apart)&lt;/em&gt;, the code would look like this: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/NWbepMb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#animation" class="anchor"&gt;
  &lt;/a&gt;
  Animation
&lt;/h2&gt;

&lt;p&gt;So far, we have only focused on the static creation of visual elements. For a lot of stuff, this is great! I love to create still generative images. Sometimes, though, you gotta get things moving around.&lt;/p&gt;

&lt;p&gt;Generative animation is a huge subject and deserves a post of its own. For now, though, here's an overview of the two primary ways I work with animation...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#method-1-the-animation-loop" class="anchor"&gt;
  &lt;/a&gt;
  Method 1, the animation loop
&lt;/h3&gt;

&lt;p&gt;For some sketches, like the undulating blob I referenced earlier, I use an animation loop. An animation loop in JavaScript usually looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's happening here? The function &lt;code&gt;animate()&lt;/code&gt; calls itself over-and-over again, somewhere around 60 FPS. It does so using the browser method &lt;code&gt;requestAnimationFrame&lt;/code&gt;. Within this function, you can update variables and move things around. &lt;/p&gt;

&lt;p&gt;I won't be diving too deep into &lt;code&gt;requestAnimationFrame&lt;/code&gt; here, but &lt;a href="https://css-tricks.com/using-requestanimationframe/"&gt;here is a great CSS tricks article&lt;/a&gt; if you would like to learn more.&lt;/p&gt;

&lt;p&gt;Here's a simple CodePen to show how you can use an animation loop to move a &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; around the screen: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/eYBbvPr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2-gsap" class="anchor"&gt;
  &lt;/a&gt;
  Method 2, GSAP
&lt;/h3&gt;

&lt;p&gt;Recently, I have been turning to the animation library &lt;a href="https://greensock.com/"&gt;GSAP&lt;/a&gt; to handle some of my animations. GSAP is super powerful, flexible, and lends itself well to generative work. It also has fantastic easing presets baked in. &lt;/p&gt;

&lt;p&gt;I won't go into detail demonstrating GSAP, as it already has comprehensive documentation. It is worth linking, though, to its &lt;a href="https://greensock.com/docs/v3/GSAP/UtilityMethods"&gt;utility functions page&lt;/a&gt;. There's some great stuff here, including some similar functions to the utilities we explored earlier. &lt;/p&gt;

&lt;p&gt;Here's a quick CodePen demonstrating some generative GSAP animation:  &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/qBqLrGG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;You made it to the end! Congratulations. That was a real whirlwind generative tour. You are now set up with all the technical stuff you need to make wonderful generative art. But what about, like... inspiration? &lt;/p&gt;

&lt;p&gt;If I am struggling for ideas, I look to artists/designers I love. I find a piece of theirs I like; examine its structure, the colors, the shapes, the texture, and go from there. How could you make a piece generative? Good artists borrow, etc...&lt;/p&gt;

&lt;p&gt;Another great avenue of exploration if you are stuck for inspiration is &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;. Dribbble is an absolute goldmine of fresh new design trends. This stuff can be a great source of inspiration for generative work.&lt;/p&gt;

&lt;p&gt;Finally, here's a list of generative learning resources. There's enough content here to take you far into your generative journey! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw"&gt;The Coding Train&lt;/a&gt; - I learned to code watching this channel. Dan has fantastic videos on almost every generative subject you could think of.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tylerxhobbs.com/essays"&gt;Tyler Hobbs&lt;/a&gt; - Tyler is a fantastic artist who writes some incredible essays. A veritable banquet of generative treats.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://natureofcode.com/"&gt;The Nature Of Code&lt;/a&gt; - An excellent book on simulating natural systems in code.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/georgedoescode"&gt;More from me!&lt;/a&gt; - Total shameless plug right here. I write a lot of generative tutorials, so if you enjoyed this one be sure to check them out.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#so-long%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  So long! 
&lt;/h2&gt;

&lt;p&gt;Thank you for taking the time to read this article. I hope you have learned some cool new techniques, and I can't wait to see what you make with them! &lt;/p&gt;

&lt;p&gt;If you do make anything with this stuff, please do send it my way. There's nothing I love more than seeing what people do with my tutorials. It's always &lt;em&gt;far&lt;/em&gt; more interesting than what I create to start with! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enjoyed this tutorial? Follow me on Twitter&lt;/strong&gt; &lt;a href="https://twitter.com/georgedoescode"&gt;&lt;strong&gt;@georgedoescode&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;for more front-end/creative coding content 🎨 &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This tutorial took around 10 hours to put together, all in. If you would like to support my work you can&lt;/em&gt; &lt;a href="https://ko-fi.com/georgedoescode"&gt;&lt;em&gt;buy me a coffee.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Warning: Accessing non-existent property 'MongoError' of module exports inside circular dependency  (Solution) mongoose error</title>
      <author>Osman Forhad</author>
      <pubDate>Thu, 11 Mar 2021 11:22:12 +0000</pubDate>
      <link>https://dev.to/osmanforhad/warning-accessing-non-existent-property-mongoerror-of-module-exports-inside-circular-dependency-solution-4ml7</link>
      <guid>https://dev.to/osmanforhad/warning-accessing-non-existent-property-mongoerror-of-module-exports-inside-circular-dependency-solution-4ml7</guid>
      <description>&lt;p&gt;currently, I am working with node js and MongoDB I have been set up everything properly but when I was trying to run the server using npm start via terminal it shows me the warning which is like the below screen-shot: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSowx6Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tefgnnsn5wkswmcz7423.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSowx6Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tefgnnsn5wkswmcz7423.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
I was a little confused why it happens when I try to find out my node and npm version like the below screen-shot:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MPumJmav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekul36nfy9x11z8yoaky.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPumJmav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekul36nfy9x11z8yoaky.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
and I also check my package.json file which is like the below screen-shot: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MipXQWQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc2r6qcrg1hrqa92bhze.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MipXQWQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc2r6qcrg1hrqa92bhze.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
and now finally I realize why this is happening:&lt;br&gt;
Note: This is caused by a deprecation in the current version. Install the previous 5.11.15 version like this&lt;br&gt;
so to solve this warning I installed again mongooses which exect like my package. jon file: to install mongoose again as like the package.json file versions I was type the below command on my terminal:&lt;br&gt;
npm i &lt;a href="mailto:mongoose@5.11.15"&gt;mongoose@5.11.15&lt;/a&gt; &lt;br&gt;
and then again I type npm start on my terminal now everything is okay. which is below screen-shot:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXIxczlv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eo00kziuztt8t5n6lmm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXIxczlv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eo00kziuztt8t5n6lmm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
 there is no warning.&lt;br&gt;
.&lt;br&gt;
Note: here 5.11.15 is my current version which is my package.json file showing me.&lt;br&gt;
 so in the future, if package.json show me the mongoose version is npm i &lt;a href="mailto:mongoose@5.11.16"&gt;mongoose@5.11.16&lt;/a&gt; or any other then I should install like exact same version npm i &lt;a href="mailto:mongoose@5.11.16"&gt;mongoose@5.11.16&lt;/a&gt;&lt;br&gt;
.&lt;br&gt;
that's it.&lt;br&gt;
.&lt;br&gt;
Happy Coding.&lt;br&gt;
osman forhad&lt;br&gt;
Mobile &amp;amp; Web Application Developer💻 &lt;/p&gt;

</description>
      <category>node</category>
      <category>mongodb</category>
      <category>mongoose</category>
    </item>
    <item>
      <title>Nevertheless, she coded: Ida Holz</title>
      <author>Helen Anderson</author>
      <pubDate>Thu, 11 Mar 2021 10:44:38 +0000</pubDate>
      <link>https://dev.to/helenanders26/nevertheless-she-coded-ida-holz-2lno</link>
      <guid>https://dev.to/helenanders26/nevertheless-she-coded-ida-holz-2lno</guid>
      <description>&lt;p&gt;From early computers, to wartime inventions, the beginnings of the internet and beyond. Women have always been innovators in technology and science breaking down barriers in the process. &lt;/p&gt;

&lt;p&gt;In honour of International Women's Day, I've chosen to highlight the women who inspire and influence me. Over the next couple of weeks, I'll be showcasing ten women who &lt;a href="https://www.internationalwomensday.com/theme"&gt;#ChooseToChallenge&lt;/a&gt;, open doors for others, and have changed the world.&lt;/p&gt;




&lt;p&gt;The next woman in my series is computer scientist Ida Holz. Ida is known for her work bringing the internet to Uruguay. This was recognised by the Latin America and Caribbean Network Information Centre with the Lifetime Achievement Award in 2009, and the Internet Hall of Fame in 2013.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7O3GJBBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj9j5dqivxb4w83wcodq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7O3GJBBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tj9j5dqivxb4w83wcodq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Ida was one of the first Uruguayan computer science students while the country was under military rule. She and her family sought exile in Mexico where she became an expert in computer networking. &lt;/p&gt;

&lt;p&gt;After returning to Uruguay she worked for the Central Computer Service for 20 years. During this time she established the top-level country domain and first internet connection for Uruguay in 1993. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“For developing countries like ours, the Internet is a means of collaborating and access to knowledge all around the world alike.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;This groundbreaking work led to collaboration across countries and the formation of the Latin American Network Forum, the Latin American and Caribbean Internet Address Registry, the organisation of Latin American and Caribbean ccTLDs and the Latin American Cooperative of Advanced Networks (RedCLARA). Ida has also given back by creating an initiative to implement the "one laptop per child" model to introduce technology to public schools. &lt;/p&gt;

&lt;p&gt;Ida has truly changed the world for South America and her recognition in the Internet Hall of Fame is incredibly well deserved.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“It was amazing, and it happens in a weird way. I got an email saying, “Dear Ida, we congratulate you…” and I just delete it, because I thought it was one of those emails telling you are a millionaire. One week later, I got another email that called my attention because it was from AISOC (Ibero-American Association of Sociology of Organizations and Communication), asking why I haven’t replied. It was there when I found out about the Hall of Fame.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Gi9fLbEY6ew"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#further-reading" class="anchor"&gt;
  &lt;/a&gt;
  Further reading:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/a-computer-of-ones-own/ida-holz-latin-american-internet-pioneer-22554cd6c7a9"&gt;Ida Holz — Latin-American Internet Pioneer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mujeresconciencia.com/2019/03/14/la-ingeniera-ida-holz-bard-1935-de-uruguay-al-mundo/"&gt;From Uruguay to the world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://otrasvoceseneducacion.org/archivos/258750"&gt;Ida Holz: "We Must Change Everything In Education: From Structures To Forms Of Conduction"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marcapaisuruguay.gub.uy/la-uruguaya-ida-holz-ya-esta-en-el-salon-de-la-fama-de-internet/"&gt;Uruguayan Ida Holz in the Internet Hall of Fame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#read-more" class="anchor"&gt;
  &lt;/a&gt;
  Read more:
&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/helenanders26" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkoi3rh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Sj8yEhMA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/22532/a7383e59-70ad-4141-96b1-19cc6e515599.jpg" alt="helenanders26 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/helenanders26/nevertheless-helen-anderson-coded-4n12" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Nevertheless, she coded&lt;/h2&gt;
      &lt;h3&gt;Helen Anderson ・ Mar  4 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#shecoded&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/helenanders26" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkoi3rh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Sj8yEhMA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/22532/a7383e59-70ad-4141-96b1-19cc6e515599.jpg" alt="helenanders26 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/helenanders26/nevertheless-helen-anderson-coded--1g1l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Nevertheless, she coded&lt;/h2&gt;
      &lt;h3&gt;Helen Anderson ・ Mar  8 '19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#shecoded&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Image: &lt;a href="https://mujeresconciencia.com/2019/03/14/la-ingeniera-ida-holz-bard-1935-de-uruguay-al-mundo/"&gt;Women with Science&lt;/a&gt;&lt;/p&gt;

</description>
      <category>shecoded</category>
      <category>womenintech</category>
      <category>history</category>
    </item>
    <item>
      <title>Depth First Search Binary Tree</title>
      <author>Edwin</author>
      <pubDate>Thu, 11 Mar 2021 10:15:48 +0000</pubDate>
      <link>https://dev.to/edwardcashmere/depth-first-search-binary-tree-1o7c</link>
      <guid>https://dev.to/edwardcashmere/depth-first-search-binary-tree-1o7c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#depthfirst-search" class="anchor"&gt;
  &lt;/a&gt;
  Depth-first search
&lt;/h2&gt;

&lt;p&gt;This approach involves backtracking for traversal and the deepest node is visited first and then backtracks up to the parent. There are three types of DFS traversal:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preorder&lt;/li&gt;
&lt;li&gt;Inorder&lt;/li&gt;
&lt;li&gt;postorder&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#preorder" class="anchor"&gt;
  &lt;/a&gt;
  PreOrder
&lt;/h3&gt;

&lt;p&gt;In pre-order traversal of a binary tree, we first traverse the root, then the left subtree, and then finally the right subtree. We do this recursively to benefit from the fact that left and right subtrees are also trees.&lt;/p&gt;

&lt;p&gt;The steps to follow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a function traverse and call it on the root&lt;/li&gt;
&lt;li&gt;call traverse on the left sub-tree.&lt;/li&gt;
&lt;li&gt;call traverse on the right sub-tree.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#inorder" class="anchor"&gt;
  &lt;/a&gt;
  InOrder
&lt;/h3&gt;

&lt;p&gt;In the In-order traversal of a binary tree, we first traverse the left subtree, then traverse the root, and then finally the right subtree. We do this recursively to benefit from the fact that left and right subtrees are also trees.&lt;/p&gt;

&lt;p&gt;The steps to follow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;call traverse on the left sub-tree.&lt;/li&gt;
&lt;li&gt;Create a function traverse and call it on the root&lt;/li&gt;
&lt;li&gt;call traverse on the right sub-tree.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#postorder" class="anchor"&gt;
  &lt;/a&gt;
  PostOrder
&lt;/h3&gt;

&lt;p&gt;In post-order traversal of a binary tree, we first traverse the left subtree, then the right subtree, and then finally the root. We do this recursively to benefit from the fact that left and right subtrees are also trees.&lt;/p&gt;

&lt;p&gt;JavaScript implementation:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BST&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                        &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                        &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="nx"&gt;DFSPreOrder&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; 

        &lt;span class="nx"&gt;DFSPostOrder&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="nx"&gt;DFSInOrder&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python implementation:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;newNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newNode&lt;/span&gt;
         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
             &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                         &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newNode&lt;/span&gt;
                         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
                     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                         &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; 
                 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                         &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newNode&lt;/span&gt;
                         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
                     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                         &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;  &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;          
                &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
                &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
                    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"not found"&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dfspreorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dfsInorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dfspostorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


&lt;span class="n"&gt;bst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BST&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;175&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bfs&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dfspreorder&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>python</category>
      <category>algorithms</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
