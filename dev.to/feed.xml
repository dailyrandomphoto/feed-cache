<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Project Structure. Repository and folders. Review of approaches.</title>
      <author>Sergey</author>
      <pubDate>Wed, 17 Feb 2021 12:30:32 +0000</pubDate>
      <link>https://dev.to/alexsergey/project-structure-repository-and-folders-review-of-approaches-4kh2</link>
      <guid>https://dev.to/alexsergey/project-structure-repository-and-folders-review-of-approaches-4kh2</guid>
      <description>&lt;p&gt;When we take the first steps in project creation, we need to make many fundamental decisions. One of those steps is a project structure. The project structure is the foundation. The correctness of the choice affects the introduction of new functionality into the project, support, onboarding new people into the project, etc.&lt;/p&gt;

&lt;p&gt;In this article, I would like to review structure's approaches for Frontend applications, especially React-based ones. React-based examples are interesting to review because the folder structure and project organization are very different from project to project.&lt;/p&gt;

&lt;p&gt;There are many ways to organize your project structure. Some developers do not pay enough attention to the structure of the project, placing files without logical connection. Some developers even write JS code in one file. But the purity of our code starts with the project structure. I will describe my experience using different approaches, the impact on the team and development time, and more.&lt;/p&gt;

&lt;p&gt;When you define a project structure and choose a repository approach, you should understand your project goals, the approximate team size, business development paths, etc.&lt;/p&gt;

&lt;p&gt;Let's start our journey with the repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monolith" class="anchor"&gt;
  &lt;/a&gt;
  Monolith
&lt;/h2&gt;

&lt;p&gt;The vast majority of projects are regular GIT repositories. React Component, Website, Single Page Application, Backend API, whatever!&lt;/p&gt;

&lt;p&gt;Working in a regular repository is usually focused on speed. With this approach, the team has a mix of backend, frontend, QA, Business Analyst specialists, as well as an assigned Product Owner or Project Manager. So that, the team is completely independent and holistic, but at the same time small.&lt;/p&gt;

&lt;p&gt;Code splitting is minimal with this approach. For example, when making a website, the project is divided into 2 repositories - SPA, Backend API. Or the frontend part is stored in the server repository. The work going forward, without worrying about versioning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#many-repos" class="anchor"&gt;
  &lt;/a&gt;
  Many Repos
&lt;/h2&gt;

&lt;p&gt;It is a collection of GIT repositories. We can move the UI into a separate repo and use it in several applications, micro services, reusable parts, etc.&lt;/p&gt;

&lt;p&gt;This approach is great for large projects. For projects where we build an ecosystem of many applications. As soon as we choose this approach, it is very important to understand that each repository must have its own command. The team should be like a full-fledged unit, have its own QA, product owner, etc.&lt;/p&gt;

&lt;p&gt;In a multi-repository approach, versioning and understanding breaking changes are very important. Your teams, assigned to their own parts of the system, use other parts of the system as a black box. If the UI command changes the interface of the components, then many applications that depend on these changes will stop working. At the same time, using versioning, the transition to the new version will have a smoother transition.&lt;/p&gt;

&lt;p&gt;It is worth considering that working with multi repositories we can speed up the development process by doing tasks in parallel, increasing the speed. At the same time, due to separate commands for the repository, the costs increase. Integration between major versions becomes more difficult as changes are likely to affect other teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monorepo" class="anchor"&gt;
  &lt;/a&gt;
  Monorepo
&lt;/h2&gt;

&lt;p&gt;This is a repository that includes related modules&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMgrBj5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/articles/project_structure/monorepo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMgrBj5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/articles/project_structure/monorepo.png" alt="Monorepo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a kind of balance between logic separation and simple implementation. Large projects like &lt;strong&gt;Babel&lt;/strong&gt;, &lt;strong&gt;React-Router&lt;/strong&gt; have a mono repo system. Thus, it is easier to add new modules, there is no need to worry too much about backward compatibility, since the current version is taken as a basis, as in option &lt;em&gt;Monolith&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;This approach allows you to avoid unnecessary pull requests, for example, you have updated the UI library and you need to update this dependency in all applications. In the monorepo approach, you only need one PR to accomplish this. In &lt;strong&gt;many repos&lt;/strong&gt;, you need to create a PR for all repos where the dependency needs to be updated.&lt;/p&gt;

&lt;p&gt;This approach is good for a small team on a fairly large project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#folder-structure" class="anchor"&gt;
  &lt;/a&gt;
  Folder structure
&lt;/h1&gt;

&lt;p&gt;The project folder structure should be as intuitive as a map. Showing where and what you have. We will look at examples in SPA React applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#splitting-into-components" class="anchor"&gt;
  &lt;/a&gt;
  Splitting into components
&lt;/h2&gt;

&lt;p&gt;This approach is suitable when you are developing a React module that will integrate into your application. For example, you are making a chat that will be embedded in the site. In this case, the components that will make up the chat will be independent, have their own local state, and will be used by the index.jsx file as a generated module.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UDFHn9Bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/articles/project_structure/components-structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UDFHn9Bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/articles/project_structure/components-structure.png" alt="Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separation-into-entities" class="anchor"&gt;
  &lt;/a&gt;
  Separation into entities
&lt;/h2&gt;

&lt;p&gt;This approach is offered in many frameworks like AngularJS, Angular 2+, etc. I bumped into this approach often both in React and in various other programming languages, especially on the Backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jW2vfe8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/articles/project_structure/entities-structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jW2vfe8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/articles/project_structure/entities-structure.png" alt="Entities"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In large applications, the contents of folders become a dump. It is very difficult to find the required file and determine the dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separation-by-features" class="anchor"&gt;
  &lt;/a&gt;
  Separation by features
&lt;/h2&gt;

&lt;p&gt;Separation by features promotes the idea of separating business logic from the presentation by bringing logic into independent and independent units - features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhfMM8u3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/articles/project_structure/features-structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhfMM8u3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.natrube.net/articles/project_structure/features-structure.png" alt="Features"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we see the routes folder, which corresponds to the routing of the application and collects the entire page structure, components, and interaction with features.&lt;/p&gt;

&lt;p&gt;Features are separated from views. This is a set of logic dealing with state and callbacks that will be delegated to components on routes.&lt;/p&gt;

&lt;p&gt;An example of this approach can be found at the &lt;a href="https://github.com/AlexSergey/rockpack/tree/master/next/web-client/src"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would especially like to note that with the advent of &lt;strong&gt;React hooks&lt;/strong&gt;, this approach fits very succinctly into the structure of the application. The example above uses hooks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#real-life-example" class="anchor"&gt;
  &lt;/a&gt;
  Real life example
&lt;/h2&gt;

&lt;p&gt;A couple of years ago, a friend of mine and I were working on a large project called &lt;a href="https://www.cleverbrush.com/"&gt;Cleverbrush&lt;/a&gt;. It was a startup, we had no money, we needed to release a production-ready application as soon as possible.&lt;/p&gt;

&lt;p&gt;Since the &lt;a href="https://www.cleverbrush.com/"&gt;Cleverbrush&lt;/a&gt; project consisted of several applications (graphics editor, photo collage, admin panel, and landing page), we used the Monorepo approach to bring common parts such as UI, utils, etc. into separate packages. Monorepo allowed us to work faster if we worked in different repositories.&lt;/p&gt;

&lt;p&gt;The folder structure reflected the approach of separating features from views, much like the &lt;a href="https://github.com/AlexSergey/rockpack/tree/master/next/web-client/src"&gt;example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This allowed us to separate our business logic and delegate it to components.&lt;/p&gt;

&lt;p&gt;Also, we had to develop many components from scratch, for this purpose we used the folder structure of option &lt;em&gt;Separation into components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Thus, we mixed different approaches to achieve maximum quality, minimize time to our project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As with all aspects of application development, there is no silver bullet, no one right approach. It all depends on the team, project, time, money. Experiment! Consult with colleagues as the project structure affects the entire team. All good mood and interesting projects!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Image Optimization, Processing and Hosting</title>
      <author>Rodrigo Ramirez</author>
      <pubDate>Wed, 17 Feb 2021 06:30:37 +0000</pubDate>
      <link>https://dev.to/xpromx/image-optimization-processing-and-hosting-2fl6</link>
      <guid>https://dev.to/xpromx/image-optimization-processing-and-hosting-2fl6</guid>
      <description>&lt;p&gt;Hosting images and processing them is quite complicated. It involves many elements to do this correctly and to be sure it scales with your website.&lt;/p&gt;

&lt;p&gt;Hosting images requires 3 key elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A place to &lt;strong&gt;Storage&lt;/strong&gt; your images&lt;/li&gt;
&lt;li&gt;A way to &lt;strong&gt;Resize&lt;/strong&gt; the images on demand&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;CDN&lt;/strong&gt; to cache and deliver the images to your users as fast as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can achieve this by implementing your own solution or delegating all the complexity to a third party service like AWS or Cloudinary.&lt;/p&gt;

&lt;p&gt;Let's analyze each one of these elements and their costs and by the end of this post, you will be able to decide which way is right for your project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#storage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Storage&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A place to host the images uploaded by your users. It could be in your own server or using a third-party service like Amazon S3 or Cloudinary. In each case, you will need to consider the cost of hosting the images, and It depends on the amount and traffic you expect to receive to calculate the final price.&lt;/p&gt;

&lt;p&gt;Here is a simple comparison of storage prices without considering the bandwidth.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vcRYnjCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy7o6wl3y36mvyp6xjc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vcRYnjCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy7o6wl3y36mvyp6xjc4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DigitalOcean:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cheapest Doplet with at least 5GB free for OS+others.&lt;/li&gt;
&lt;li&gt;Up to 50GB is a good option to keep the files on the same server. After that, the prices increase dramatically for storage. It would be better to consider Digital Ocean Spaces at that point.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Amazon S3:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only S3 storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cloudinary:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All in one solution. Difficult to compare individually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEXr9hqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn9cp14cp3ucivgleowu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEXr9hqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn9cp14cp3ucivgleowu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#image-resizing" class="anchor"&gt;
  &lt;/a&gt;
  Image Resizing
&lt;/h2&gt;

&lt;p&gt;After we receive the user's image, you will need to display a resized version on your website. We don't want to make users download a big size image when browsing our website, especially from their mobile devices. Speed is important for UX and SEO purposes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#resizing-strategies" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Resizing Strategies&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;At Upload time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After we store the user's image, you will need to create the resized versions of the original picture. It will require you to know in advance which dimensions are necessary for your website. If later you require a new size, you will need to regenerate all the previous pictures again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Demand&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recommended solutions, but more complex to implement by yourself. &lt;br&gt;
Instead of calling your images directly, you will request them from a special URL that generates the new image, passing in the URL the new size parameters. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://domain.com/image-resize?source={local-path}&amp;amp;width=500&amp;amp;height=500
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implementations" class="anchor"&gt;
  &lt;/a&gt;
  Implementations
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Own Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The cost, in this case, is the development time and the maintenance of the code.&lt;/p&gt;

&lt;p&gt;If you opt to resize the images at the upload time, you will need to consider doing the resizing in the background to don't make your users wait while you are processing the images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With AWS, you will have to create a serverless function that triggers when a new image is uploaded to the S3 bucket or create a URL to execute it on demand and generate the resized images.&lt;/p&gt;

&lt;p&gt;Likely there is a solution provided by amazon that simplifies all these processes and much more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serverless Image Handler
&lt;a href="https://aws.amazon.com/solutions/implementations/serverless-image-handler/"&gt;https://aws.amazon.com/solutions/implementations/serverless-image-handler/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cloudinary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cloudinary includes all these features in their service. But the price is very tricky, be sure to check them very carefully.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloudinary Pricing
&lt;a href="https://cloudinary.com/pricing"&gt;https://cloudinary.com/pricing&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIMcL9aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rprsk9p4q8y8afrbbpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIMcL9aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rprsk9p4q8y8afrbbpi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cdn" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CDN&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Having a CDN between where your images are hosted and your users is a good practice. It will speed up your website by serving the images to your users from their closes location. If you are using a service to host your images, it probably already includes a CDN.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudflare&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose you are hosting the images on your own server. In that case, Cloudflare is the best solution for you, they have a free version, and It not only provides a CDN for your images, but It also does for your entire website as well that offers a security layer between your user and your server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cloudflare.com/"&gt;https://www.cloudflare.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Cloudfront&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CDN solution from AWS. Very easy to connect with an existing S3 bucket. If you are using the "Serverless Image Handler" solution from AWS, It already includes Cloudfront.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cloudfront/"&gt;https://aws.amazon.com/cloudfront/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudinary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Already provide a CDN by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0DvN0VV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p2e9m2m12zkcfvjimeu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0DvN0VV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p2e9m2m12zkcfvjimeu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Here we have the summary of the 3 solutions I have mentioned in this post.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uPqGX8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6er4x5zcir5eghfsdld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uPqGX8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6er4x5zcir5eghfsdld.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#digitalocean-own-server" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;DigitalOcean / Own Server&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅ Good up to 50GB of storage&lt;/p&gt;

&lt;p&gt;✅ Fixed cost&lt;/p&gt;

&lt;p&gt;✅ Cloudflare for CDN and Security&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;❌ Image processing requires your own implementation&lt;/p&gt;

&lt;p&gt;❌ If you need more than 50GB, you will need to consider another alternative.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#aws" class="anchor"&gt;
  &lt;/a&gt;
  AWS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅ Amazon S3 is very cheap&lt;/p&gt;

&lt;p&gt;✅ A popular option for developers to storage files&lt;/p&gt;

&lt;p&gt;✅ Cloudfront for CDN&lt;/p&gt;

&lt;p&gt;✅ Image Server Handler solution from AWS simplifies everything&lt;/p&gt;

&lt;p&gt;✅ It scales infinite, and the prices are low&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;❌ No free options, but very cheap&lt;/p&gt;

&lt;p&gt;❌ You will need to understand the basic of AWS&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#cloudinary" class="anchor"&gt;
  &lt;/a&gt;
  Cloudinary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅ Free up to 25GB = 25 credits&lt;/p&gt;

&lt;p&gt;✅ Simples options&lt;/p&gt;

&lt;p&gt;✅ All in one solution&lt;/p&gt;

&lt;p&gt;✅ Extra features (Widgets, Video Hosting, etc.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;❌ It could get costly&lt;/p&gt;

&lt;p&gt;❌ To have a copy of your files, you will need to pay at least $99 monthl&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>Creating Accessible Accordions with HTML, CSS &amp; JavaScript </title>
      <author>Liz Laffitte</author>
      <pubDate>Wed, 17 Feb 2021 00:37:14 +0000</pubDate>
      <link>https://dev.to/lizlaffitte/creating-an-accordion-with-html-css-javascript-3gmn</link>
      <guid>https://dev.to/lizlaffitte/creating-an-accordion-with-html-css-javascript-3gmn</guid>
      <description>&lt;p&gt;An accordion, in development and design, is a graphical control element that consists of vertically stacked headers and hidden internal content. When clicked, a header's previously collapsed/hidden content box will expand to show its content; often text, images, or other grouped information.&lt;/p&gt;

&lt;p&gt;You've probably seen (or used) an accordion on a FAQ page, with the questions shown in the headers, and the answers to those questions hidden in the content boxes.  &lt;/p&gt;

&lt;p&gt;Accordions can help increase the user experience on web and application pages with lots of information. They allow developers to group all that information on one page, but only display the higher level headers/titles. Users can then glance over all the titles without being overwhelmed by the details. They can more easily find, and click on, the headers/titles that they are interested in, and access the greater detail of the content.&lt;/p&gt;

&lt;p&gt;There are countless widgets, plugins and other code snippets that will auto-magically add an accordion to your website or app. &lt;em&gt;But&lt;/em&gt; you can also build a simple accordion with only HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/LizLaffitte/embed/jOVBzbY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accordion-html" class="anchor"&gt;
  &lt;/a&gt;
  Accordion HTML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul id="accordion"&amp;gt;
  &amp;lt;li&amp;gt;
    &amp;lt;button aria-controls="content-1" aria-expanded="false" id="accordion-control-1"&amp;gt;FAQ 1&amp;lt;/button&amp;gt;
    &amp;lt;div class="acc-item-content" aria-hidden="true" id="content-1"&amp;gt;
      &amp;lt;p&amp;gt;Answer 1!&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;
    &amp;lt;button aria-controls="content-2" aria-expanded="false" id="accordion-control-2"&amp;gt;FAQ 2&amp;lt;/button&amp;gt;
    &amp;lt;div class="acc-item-content" aria-hidden="true" id="content-2"&amp;gt;
      &amp;lt;p&amp;gt;Answer 2&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;
    &amp;lt;button aria-controls="content-3" aria-expanded="false" id="accordion-control-3"&amp;gt;FAQ 3&amp;lt;/button&amp;gt;
    &amp;lt;div class="acc-item-content" aria-hidden="true" id="content-3"&amp;gt;
      &amp;lt;p&amp;gt;Answer 3&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;
    &amp;lt;button aria-controls="content-4" aria-expanded="false" id="accordion-control-4"&amp;gt;FAQ 4 &amp;lt;/button&amp;gt;
    &amp;lt;div class="acc-item-content" aria-hidden="true" id="content-4"&amp;gt;
      &amp;lt;p&amp;gt;Answer 4&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;
    &amp;lt;button aria-controls="content-5" aria-expanded="false" id="accordion-control-5"&amp;gt;FAQ 5&amp;lt;/button&amp;gt;
    &amp;lt;div class="acc-item-content" aria-hidden="true" id="content-5"&amp;gt;
      &amp;lt;p&amp;gt;Answer 5&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the HTML, our entire accordion is housed in an unordered list. Each list item holds a div with the inner content and a button that will toggle the div's visibility. In an effort to make the accordion more accessible, we have &lt;code&gt;aria-expanded&lt;/code&gt; and &lt;code&gt;aria-hidden&lt;/code&gt; attributes, as well as &lt;code&gt;aria-controls&lt;/code&gt; attributes on the buttons that correspond with the ids of the &lt;code&gt;acc-item-content&lt;/code&gt; divs. These attributes will help users using screen readers understand our accordion, and what is and is not visible when the buttons are clicked on.&lt;/p&gt;

&lt;p&gt;I've also got my text in paragraph tags, which will be helpful if you have more than a few sentences in the content divs.&lt;/p&gt;

&lt;p&gt;Hopefully you're using a loop somewhere to dynamically create each list item and its child elements. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accordion-css" class="anchor"&gt;
  &lt;/a&gt;
  Accordion CSS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ul {
  list-style: none;
}

#accordion button:focus {
  border-radius: 0px;
  outline: none;
}
#accordion button {
  outline: none;
  background-color: DarkSeaGreen;
  padding: 10px;
  border: none;
  border-bottom: 1px solid darkslategrey;
  color: white;
  width: 100%;
  text-align: left;
  font-size: 16px;
  border-radius: 0px;
}
#accordion li {
  border: 1px solid DarkSlateGray;
  border-bottom: none;
}
.acc-item:last-child {
  border-bottom: 1px solid DarkSlateGray;
}
#accordion button::after {
  content: "\002B";
  font-weight: 900;
  font-size: 22px;
  float: right;
}

#accordion {
  width: 80%;
  max-width: 800px;
  min-width: 275px;
  margin: auto;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Most of the CSS is for...style. We add background colors, borders and pseudo content to visually indicate that this is an accordion, and that you should click if you want to see more.&lt;/p&gt;

&lt;p&gt;Technically, the only rule set you need is this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.acc-item-content {
  padding: 0px 10px;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It sets the height of the content divs to 0 (hiding them from view); and gives the max-height a transition style and speed. This will come in handy when we get to the JavaScript, where we'll change the max-height values for our divs when the buttons are clicked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accordion-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Accordion JavaScript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.addEventListener("DOMContentLoaded", (event) =&amp;gt; {
  let buttons = document.querySelectorAll("#accordion button");
  buttons.forEach((button) =&amp;gt; {
    let content = button.nextElementSibling;
    button.addEventListener("click", (event) =&amp;gt; {
      if (button.classList.contains("active")) {
        button.classList.remove("active");
        button.setAttribute("aria-expanded", false);
        content.style.maxHeight = null;
        content.setAttribute("aria-hidden", true);
      } else {
        button.classList.add("active");
        button.setAttribute("aria-expanded", true);
        content.style.maxHeight = content.scrollHeight + "px";
        content.setAttribute("aria-hidden", false);
      }
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In pseudo code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;When all the DOM content is loaded...

  Collect all the buttons that are child elements of the element 
  with the id #accordion...

  Loop through each of these buttons...
     Grab the button's sibling element and save it in a variable 
     called content AND

     Add an event listener to each button, so that when the 
     button is clicked...

       If the button has the class active...
           Remove "active" from its class list AND

           Set its aria-expanded attribute to false AND

           Set the content variable's max-height value to null AND

           Set the content variable's aria-hidden attribute to true.

       Otherwise, if the button doesn't have the class active...
            Add "active" to its class list AND

           Set its aria-expanded attribute to true AND

           Set the content variable's max-height value even 
           to the value of the content variable's scroll height 
           (the height of an element's content) AND

           Set the content variable's aria-hidden attribute to false.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that's it: an accessible, simple accordion made with only HTML, CSS and vanilla JavaScript! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Announcing Vite 2.0</title>
      <author>Evan You</author>
      <pubDate>Tue, 16 Feb 2021 22:54:28 +0000</pubDate>
      <link>https://dev.to/yyx990803/announcing-vite-2-0-2f0a</link>
      <guid>https://dev.to/yyx990803/announcing-vite-2-0-2f0a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bp9HIjTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ripvyhwi6xl0gqkvj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bp9HIjTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ripvyhwi6xl0gqkvj9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I'm excited to announce the official release of Vite 2.0!&lt;/p&gt;

&lt;p&gt;Vite (French word for "fast", pronounced &lt;code&gt;/vit/&lt;/code&gt;) is a new kind of build tool for frontend web development. Think a pre-configured dev server + bundler combo, but leaner and faster. It leverages browser's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;native ES modules&lt;/a&gt; support and tools written in compile-to-native languages like &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; to deliver a snappy and modern development experience.&lt;/p&gt;

&lt;p&gt;To get a sense of how fast Vite is, here's a video comparison of booting up a React application on Repl.it using Vite vs. &lt;code&gt;create-react-app&lt;/code&gt; (CRA):&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXDC4out--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1355379294113947652/pu/img/D3Eo9gZZVEfjC3in.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3DYT45P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1292621994534477825/QAhPUcZb_normal.jpg" alt="Amjad Masad ⠕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Amjad Masad ⠕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/amasad"&gt;@amasad&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Create React App vs Vite React on &lt;a href="https://twitter.com/replit"&gt;@replit&lt;/a&gt;. &lt;br&gt;&lt;br&gt;Vite ran before the container could even boot CRA files. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:57 AM - 30 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1355379680275128321" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1355379680275128321" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1355379680275128321" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;If you've never heard of Vite before and would love to learn more about it, check out &lt;a href="https://vitejs.dev/guide/why.html"&gt;the rationale behind the project&lt;/a&gt;. If you are interested in how Vite differs from other similar tools, check out the &lt;a href="https://vitejs.dev/guide/comparisons.html"&gt;comparisons&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-20" class="anchor"&gt;
  &lt;/a&gt;
  What's New in 2.0
&lt;/h2&gt;

&lt;p&gt;Since we decided to completely refactor the internals before 1.0 got out of RC, this is in fact the first stable release of Vite. That said, Vite 2.0 brings about many big improvements over its previous incarnation:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#framework-agnostic-core" class="anchor"&gt;
  &lt;/a&gt;
  Framework Agnostic Core
&lt;/h3&gt;

&lt;p&gt;The original idea of Vite started as a &lt;a href="https://github.com/vuejs/vue-dev-server"&gt;hacky prototype that serves Vue single-file components over native ESM&lt;/a&gt;. Vite 1 was a continuation of that idea with HMR implemented on top.&lt;/p&gt;

&lt;p&gt;Vite 2.0 takes what we learned along the way and is redesigned from scratch with a more robust internal architecture. It is now completely framework agnostic, and all framework-specific support is delegated to plugins. There are now &lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app"&gt;official templates for Vue, React, Preact, Lit Element&lt;/a&gt;, and ongoing community efforts for Svelte integration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-plugin-format-and-api" class="anchor"&gt;
  &lt;/a&gt;
  New Plugin Format and API
&lt;/h3&gt;

&lt;p&gt;Inspired by &lt;a href="https://github.com/preactjs/wmr"&gt;WMR&lt;/a&gt;, the new plugin system extends Rollup's plugin interface and is &lt;a href="https://vite-rollup-plugins.patak.dev/"&gt;compatible with many Rollup plugins&lt;/a&gt; out of the box. Plugins can use Rollup-compatible hooks, with additional Vite-specific hooks and properties to adjust Vite-only behavior (e.g. differentiating dev vs. build or custom handling of HMR).&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://vitejs.dev/guide/api-javascript.html"&gt;programmatic API&lt;/a&gt; has also been greatly improved to facilitate higher level tools / frameworks built on top of Vite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#esbuild-powered-dep-prebundling" class="anchor"&gt;
  &lt;/a&gt;
  esbuild Powered Dep Pre-Bundling
&lt;/h3&gt;

&lt;p&gt;Since Vite is a native ESM dev server, it pre-bundles dependencies to reduce the number browser requests and handle CommonJS to ESM conversion. Previously Vite did this using Rollup, and in 2.0 it now uses &lt;code&gt;esbuild&lt;/code&gt; which results in 10-100x faster dependency pre-bundling. As a reference, cold-booting a test app with heavy dependencies like React Meterial UI previously took 28 seconds on an M1-powered Macbook Pro and now takes ~1.5 seconds. Expect similar improvements if you are switching from a traditional bundler based setup.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstclass-css-support" class="anchor"&gt;
  &lt;/a&gt;
  First-class CSS Support
&lt;/h3&gt;

&lt;p&gt;Vite treats CSS as a first-class citizen of the module graph and supports the following out of the box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Resolver enhancement&lt;/strong&gt;: &lt;code&gt;@import&lt;/code&gt; and &lt;code&gt;url()&lt;/code&gt; paths in CSS are enhanced with Vite's resolver to respect aliases and npm dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;URL rebasing&lt;/strong&gt;: &lt;code&gt;url()&lt;/code&gt; paths are automatically rebased regardless of where the file is imported from.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS code splitting&lt;/strong&gt;: a code-split JS chunk also emits a corresponding CSS file, which is automatically loaded in parallel with the JS chunk when requested.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#serverside-rendering-ssr-support" class="anchor"&gt;
  &lt;/a&gt;
  Server-Side Rendering (SSR) Support
&lt;/h3&gt;

&lt;p&gt;Vite 2.0 ships with &lt;a href="https://vitejs.dev/guide/ssr.html"&gt;experimental SSR support&lt;/a&gt;. Vite provides APIs to to efficiently load and update ESM-based source code in Node.js during development (almost like server-side HMR), and automatically externalizes CommonJS-compatible dependencies to improve development and SSR build speed. The production server can be completely decoupled from Vite, and the same setup can be easily adapted to perform pre-rendering / SSG.&lt;/p&gt;

&lt;p&gt;Vite SSR is provided as a low-level feature and we are expecting to see higher level frameworks leveraging it under the hood.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optin-legacy-browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Opt-in Legacy Browser Support
&lt;/h3&gt;

&lt;p&gt;Vite targets modern browsers with native ESM support by default, but you can also opt-in to support legacy browers via the official &lt;a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy"&gt;@vitejs/plugin-legacy&lt;/a&gt;. The plugin automatically generates dual modern/legacy bundles, and delivers the right bundle based on browser feature detection, ensuring more efficient code in modern browsers that support them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-it-a-try" class="anchor"&gt;
  &lt;/a&gt;
  Give it a Try!
&lt;/h2&gt;

&lt;p&gt;That was a lot of features, but getting started with Vite is simple! You can spin up a Vite-powered app literally in a minute, starting with the following command (make sure you have Node.js &amp;gt;=12):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init @vitejs/app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, check out &lt;a href="https://vitejs.dev/guide/"&gt;the guide&lt;/a&gt; to see what Vite provides out of the box. You can also check out the source code on &lt;a href="https://github.com/vitejs/vite"&gt;GitHub&lt;/a&gt;, follow updates on &lt;a href="https://twitter.com/vite_js"&gt;Twitter&lt;/a&gt;, or join discussions with other Vite users on our &lt;a href="http://chat.vitejs.dev/"&gt;Discord chat server&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vite</category>
    </item>
    <item>
      <title>How to Build A React TS Tailwind Design System</title>
      <author>Yoav Ganbar</author>
      <pubDate>Tue, 16 Feb 2021 22:25:56 +0000</pubDate>
      <link>https://dev.to/hamatoyogi/how-to-build-a-react-ts-tailwind-design-system-1ppi</link>
      <guid>https://dev.to/hamatoyogi/how-to-build-a-react-ts-tailwind-design-system-1ppi</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKSL7zYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl2xcu7d5zoou9givgdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKSL7zYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl2xcu7d5zoou9givgdg.png" alt="Blog post cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-you-would-want-to-do-it-and-a-stepbystep-guide-on-how" class="anchor"&gt;
  &lt;/a&gt;
  Why you would want to do it and a step-by-step guide on how.
&lt;/h1&gt;

&lt;p&gt;What is this❓ Another "how to" article (post)?!&lt;/p&gt;

&lt;p&gt;Yes, it is.&lt;/p&gt;

&lt;p&gt;What's in it for you?&lt;/p&gt;

&lt;p&gt;Hear me out, it's going to be worth it.&lt;/p&gt;

&lt;p&gt;By the end of this post, you will be able to roll out a starting point for your own React + TypeScript + Tailwind + Styled Components design component library. Also, you will learn how to craft a workflow using powerful tools like StoryBook, Chromatic, and TSDX. Besides that, we will see and learn a bit about setting up stuff like React Testing Library and how to fix some of those annoying TS errors we encounter.&lt;/p&gt;

&lt;p&gt;Moreover, I will attempt to explain why and how I went down this same road, presumably, in an entertaining and informing way 🤓.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to skip ahead to the "How to" section &lt;a href="#setting-up-tsdx"&gt;click here&lt;/a&gt;, or if you want to go straight ahead to the final code, &lt;a href="https://github.com/hamatoyogi/react-tw-blog-post"&gt;check out the repository here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The Background&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-cautionary-start"&gt;A Cautionary Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-design-system"&gt;What is a design system?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-the-drawing-board"&gt;To the Drawing Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-tale-of-wind"&gt;A Tale of Wind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enter-tsdx"&gt;Enter TSDX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-ui-feedback-with-chromatic"&gt;Getting UI Feedback with Chromatic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bringing-it-all-together"&gt;Bringing It All Together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How To&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#setting-up-tsdx"&gt;Setting up TSDX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-tailwind"&gt;Installing Tailwind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-styled-components"&gt;Adding Styled Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-react-testing-library"&gt;Adding React Testing Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sanity-check-with-tsdx-example"&gt;Sanity Check with TSDX Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-chromatic"&gt;Setting up Chromatic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preparing-for-production"&gt;Preparing for Production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#viewing-your-tailwind-configuration"&gt;Viewing your Tailwind Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Suffix&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#publishing"&gt;Publishing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-tailwind-in-js-solutions"&gt;Other Tailwind-in-JS Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-cautionary-start" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#a-cautionary-start"&gt;A Cautionary Start&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This whole post started with this tweet:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcC6-7iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1078437791296565249/zh9fg1FC_normal.jpg" alt="Yoav Ganbar profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Yoav Ganbar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/hamatoyogi"&gt;@hamatoyogi&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Thinking about writing another technical blog post about building a design system component library using:&lt;br&gt;- &lt;a href="https://twitter.com/reactjs"&gt;@reactjs&lt;/a&gt; &lt;br&gt;- &lt;a href="https://twitter.com/typescript"&gt;@typescript&lt;/a&gt; &lt;br&gt;- &lt;a href="https://twitter.com/tailwindcss"&gt;@tailwindcss&lt;/a&gt; &lt;br&gt;- &lt;a href="https://twitter.com/hashtag/StyledComponenets"&gt;#StyledComponenets&lt;/a&gt;&lt;br&gt;- &lt;a href="https://twitter.com/storybookjs"&gt;@storybookjs&lt;/a&gt; &lt;br&gt;- &lt;a href="https://twitter.com/chromaui"&gt;@chromaui&lt;/a&gt; &lt;br&gt;- &lt;a href="https://twitter.com/kentcdodds"&gt;@kentcdodds&lt;/a&gt;'s &lt;a href="https://twitter.com/TestingLib"&gt;@TestingLib&lt;/a&gt; &lt;br&gt;- &lt;a href="https://twitter.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt;'s TSDX&lt;br&gt;&lt;br&gt;Peaks anyone's interest?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:15 PM - 28 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1354855711285665799" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1354855711285665799" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1354855711285665799" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Seeing as it got some attention, I was bound by Twitter law to strap in, knuckle down and start typing.&lt;/p&gt;

&lt;p&gt;For me, a lot of things around how I learn are a part necessity, part interest, and always a journey. It is important to understand the journey to realize if you have gotten to your destination.&lt;/p&gt;

&lt;p&gt;So, here I am again, at a new place with new challenges ahead of me... I have written some stories about &lt;a href="https://medium.com/the-hamato-yogi-chronichels/a-tale-of-an-elder-millennial-how-i-started-my-tech-journey-part-1-b07a339957d1"&gt;my humble beginnings&lt;/a&gt;, as well as some tales of &lt;a href="https://medium.com/the-hamato-yogi-chronichels/how-we-moved-from-wordpress-to-react-and-raised-80-million-6e80b88be28f"&gt;other challenges I've faced as an engineer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time it started at a new company I joined not too long ago. About a month in, I was tasked with implementing a white labeling solution for one of the products to a client. For the sake of this post, what the company does is not that important. I was lead down this path because there are about 5 different applications and more in thoughts and planning. Being in the startup world, that's just the way it goes.&lt;/p&gt;

&lt;p&gt;Like I was saying, I started working on white labeling one of the products, not knowing much about what was at my disposal in terms of assets, eg. shared packages, component libraries, etc. I cracked my knuckles and started browsing through the different organizations Github Repos and started talking to people, trying to understand what is there that I can use to achieve the task at hand.&lt;/p&gt;

&lt;p&gt;I ended up finding 3 different "common" React component libraries that weren't used across all the applications, but some... It was divergent... Being a so to speak early-age startup, a lot of the code in the repositories was (and still is) "gung hoed". This is not saying anything critical about other engineers, I've been there, done that...&lt;/p&gt;

&lt;p&gt;All of the front-end apps are built with React and adopted &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; at some point. Some had also SaSS mixed in, some had &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;, and some &lt;a href="https://flow.org/"&gt;Flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had to start working on my task, so I did just that, hoping I could find my way through while learning about why the situation is as it is and how we could improve. To get my task done, I looked into leveraging Styled Components &lt;a href="https://styled-components.com/docs/advanced#theming"&gt;theming functionality&lt;/a&gt;. But what I found out was that there were parts of the theme being passed from the app and some getting overridden by one of the shared packages.&lt;/p&gt;

&lt;p&gt;I also set out to &lt;a href="http://www.twitter.com"&gt;Twitter&lt;/a&gt; to gauge my approach:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcC6-7iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1078437791296565249/zh9fg1FC_normal.jpg" alt="Yoav Ganbar profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Yoav Ganbar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/hamatoyogi"&gt;@hamatoyogi&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Say you're working on an existing &lt;a href="https://twitter.com/hashtag/react"&gt;#react&lt;/a&gt; app with &lt;a href="https://twitter.com/hashtag/styledComponents"&gt;#styledComponents&lt;/a&gt; and you need to start white labeling. (adding different themes or different styles for specific things) &lt;br&gt;&lt;br&gt;How would you go about it?&lt;br&gt;&lt;br&gt;Interested in your take &lt;a href="https://twitter.com/mxstbr"&gt;@mxstbr&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:08 PM - 14 Oct 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1316410473718439936" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1316410473718439936" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1316410473718439936" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In the end, I ended up with a solution I also shared:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WKZhB4zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EkYd5HAXYAI-RO0.png" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcC6-7iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1078437791296565249/zh9fg1FC_normal.jpg" alt="Yoav Ganbar profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Yoav Ganbar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/hamatoyogi"&gt;@hamatoyogi&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/stolinski"&gt;@stolinski&lt;/a&gt; &lt;a href="https://twitter.com/mxstbr"&gt;@mxstbr&lt;/a&gt; A short update on this:&lt;br&gt;&lt;br&gt;1. Defined CSS vars and derive values from &lt;a href="https://twitter.com/hashtag/styledComponents"&gt;#styledComponents&lt;/a&gt; theme.&lt;br&gt;&lt;br&gt;2. Realised would require a lot of rewrites &amp;amp; deadline isn't far.&lt;br&gt;&lt;br&gt;3. Wanted &lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; solution.&lt;br&gt;&lt;br&gt;4. Used tools at disposal, eg css`` helper function.&lt;br&gt;&lt;br&gt;5. Used ${ classname }&lt;br&gt;&lt;br&gt;Tradeoffs...⚖️ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:23 PM - 15 Oct 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1316776818779795456" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1316776818779795456" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1316776818779795456" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It was clear to me that this is an ok solution for now, but this has raised the need to think about what we would need to do if some other client would want a white label of its' own.&lt;/p&gt;

&lt;p&gt;After discussing all the fun I had with the rest of my team and our former discussions around our shared packages, I was aware that there were processes that have started regarding building a design system, but were nipped in the bud for various reasons. I thought it was a good time to get this process going again and my colleagues and engineering leadership (luckily 😅) agreed as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Scattered components across repositories and applications.&lt;/li&gt;
&lt;li&gt;Different teams working on several products.&lt;/li&gt;
&lt;li&gt;No way for developers to know what they can use.&lt;/li&gt;
&lt;li&gt;Designers repeating design or re-designing components that already exist.&lt;/li&gt;
&lt;li&gt;Product has no visibility as to what is available for new features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we aim to solve was reducing the number of components that are being written across the organization, share code, and be able to see what we have, while having a single repository to develop where we can manage versioning and distribution.&lt;/p&gt;

&lt;p&gt;The solution is inevitable - we need a design system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-design-system" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#what-is-a-design-system"&gt;What is a design system?&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There is a lot of material out there about the correct definition of this term, as well as different opinions around, and I've read half a dozen posts and explanations what it is. It seems to be something else for different people in relation to their occupation.&lt;/p&gt;

&lt;p&gt;For developers, this could be a shared component library (or package) like Material-UI, ChakraUI, BaseUI, etc. But, for designers, it could be a sketch file that has all the designs in one place. I've even heard product people call it a UI-Toolkit.&lt;/p&gt;

&lt;p&gt;I think the general definition I liked the most is by &lt;a href="https://medium.com/@audreyhacq"&gt;Audrey Hacq&lt;/a&gt; as stated in her post "&lt;a href="https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969"&gt;Everything you need to know about design systems&lt;/a&gt;":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A Design System is the single source of truth which groups all the elements that will allow the teams to design, realize and develop a product."&lt;/p&gt;
&lt;/blockquote&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPA7btCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/754886061872979968/BzaOWhs1_normal.jpg" alt="Mark Dalgleish profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mark Dalgleish
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/markdalgleish"&gt;@markdalgleish&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a class="comment-mentioned-user" href="https://dev.to/hecktarzuli"&gt;@hecktarzuli&lt;/a&gt;
 &lt;a href="https://twitter.com/hudecek"&gt;@hudecek&lt;/a&gt; &lt;a href="https://twitter.com/tailwindcss"&gt;@tailwindcss&lt;/a&gt; I'm saying the ideal is that your products are built entirely out of your design system components (including its primitives), and that those components don't leak implementation detail (like whether or not they use Tailwind). Ours works this way: &lt;a href="https://t.co/61RMnI3q95"&gt;github.com/seek-oss/braid…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:08 PM - 15 Jan 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1217569188614557696" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1217569188614557696" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1217569188614557696" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Design systems are all the rage nowadays. They are key for product design consistency, better stakeholder communication, and allow rapid development of new applications. Like it or don't they are a curse and a blessing. They help with cross alignment, but they are hard to create, adopt and maintain correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/ft4g37kq"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYZ2RtSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/mDhx5844/Untitled.png" alt="Untitled.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.learnstorybook.com/design-systems-for-developers/react/en/introduction/"&gt;https://www.learnstorybook.com/design-systems-for-developers/react/en/introduction/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#to-the-drawing-board" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#to-the-drawing-board"&gt;To the Drawing Board&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Something I neglected to mention earlier is that one of the shared libraries we had was using &lt;a href="https://bit.dev/"&gt;Bit&lt;/a&gt; and we had a collection of Bit components, which were used sparingly across applications. If you are not familiar with it, the gist is that you can build, version, and distribute components individually through their cloud. A really powerful concept of super modularity. The promises on their webpage get you excited about building something truly composable.&lt;/p&gt;

&lt;p&gt;That's why for the first iteration I came up with this diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/47z2pK9f"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozgFm3X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/V6TyQnsC/Drawing-Borad-1.png" alt="Drawing-Borad-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This appeared to be a sound plan. However, things don't always go according to our plans...&lt;/p&gt;

&lt;p&gt;The short version is it was not worth it for our use case, in my humble opinion. Even so, I've read an article published on Bit's blog "Bit's and Pieces", conveniently titled "&lt;a href="https://blog.bitsrc.io/how-we-build-our-design-system-15713a1f1833"&gt;How we Build a Design System&lt;/a&gt;" which had me truly optimistic at first. Nevertheless, those shiny marketing messages on the Bit homepage fail to fulfill this utopian world of component composition.&lt;/p&gt;

&lt;p&gt;The whole process I went through with this piece of tech is worth a blog post of its own (I've even already written down the title in my notes: "The Bit they don't tell you about Bit" 😅).&lt;/p&gt;

&lt;p&gt;After meticulously crafting a whole workflow based on every shred of documentation and examples I could find, it didn't sit right. Specifically, around the workflow, I imagined increasing the collaboration and velocity of my team and with Bit, there seemed to be too much overhead for any new coming developer to the project.&lt;/p&gt;

&lt;p&gt;The bottom line was, Bit doesn't play nice with Git. In my opinion, having a streamlined process that involves Git, code reviews, and design reviews are crucial.&lt;/p&gt;

&lt;p&gt;Having said that, I have nothing bad to say about Bit. I think it has incredible potential, but it still is not fully there, it does not live up to the promise. I will keep a close eye on them though, they might just surprise us just yet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
  There was a happy ending though...
  &lt;p&gt;A few weeks after writing the above lines, I am happy to say that with the help and perseverance of my good friend and teammate &lt;a href="https://www.linkedin.com/in/yontn/"&gt;Yonatan Katz&lt;/a&gt;, we were able to achieve our desired workflow with Bit. Having a single repo for the entire design system, while publishing each component individually to the &lt;a href="http://bit.dev"&gt;Bit&lt;/a&gt; cloud 😃 . Seeing as changing these paragraphs will break the narrative of the story, I'm choosing to keep things as they are with this small note to share the happy ending of that challenge and thoughts. &lt;/p&gt;

 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for myself, I needed a new plan...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SayN95dD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rpscurriculumandinstruction.weebly.com/uploads/8/1/0/1/81013748/macrafic-big-idea-2-pic-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SayN95dD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rpscurriculumandinstruction.weebly.com/uploads/8/1/0/1/81013748/macrafic-big-idea-2-pic-2.jpg" alt="https://rpscurriculumandinstruction.weebly.com/uploads/8/1/0/1/81013748/macrafic-big-idea-2-pic-2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-tale-of-wind" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#a-tale-of-wind"&gt;A Tale of Wind&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I'm a dev news junkie and a hype-driven development practitioner (😜 ). As such, I could not stop hearing about TailwindCSS. Every second article or tweet I read mentioned how good Tailwind is. Furthermore, every third podcast I listened to had either &lt;a href="https://adamwathan.me/articles/"&gt;Adam Wathan&lt;/a&gt; on it or someone mentioning him.&lt;/p&gt;

&lt;p&gt;This tweet by &lt;a href="https://twitter.com/dabit3"&gt;Nader Dabit&lt;/a&gt; showcases what I went through:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nMhGDRhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Et0wI8eXYAY1-Jn.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOQ8s8sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1268352530423205889/V6Nz7mIt_normal.jpg" alt="Nader Dabit profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nader Dabit
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:18 AM - 10 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1359295621119827968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1359295621119827968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1359295621119827968" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The one piece that stuck with me the most was by &lt;a href="https://mxstbr.com/"&gt;Max Stoiber&lt;/a&gt; titled "&lt;a href="https://mxstbr.com/thoughts/tailwind"&gt;Why I Love Tailwind&lt;/a&gt;". In it, he makes a great case about the key feature of Tailwind being that the core of the framework is its design tokens:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The key to Tailwind's popularity is the painstakingly constructed system of design tokens at the core of the framework."&lt;/p&gt;
&lt;/blockquote&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMEHIMXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EtzZ9kQWYAIBL3A.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOQ8s8sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1268352530423205889/V6Nz7mIt_normal.jpg" alt="Nader Dabit profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nader Dabit
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      CSS: There are 16 million colors to choose from&lt;br&gt;&lt;br&gt;Tailwind developers: 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:01 PM - 09 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1359261039196475401" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1359261039196475401" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1359261039196475401" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Max goes further on about the downsides he sees and suggests a way to use it without them. The answer - &lt;a href="https://github.com/ben-rogerson/twin.macro"&gt;twin.macro&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gnUPchio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1164219021283094530/ACRln2kL_normal.jpg" alt="Tanner Linsley ⚛️ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tanner Linsley ⚛️
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Enjoying Tailwind because:&lt;br&gt;&lt;br&gt;- Limited options = easy consistency&lt;br&gt;- Config encourages intentional, not frivolous, expansion of options&lt;br&gt;- You must *still* build your own visual primitives, thus avoiding the bootstrap effect&lt;br&gt;- &lt;a href="https://t.co/lSg6zmaR2S"&gt;github.com/ben-rogerson/t…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:22 PM - 17 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1350856065210957824" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1350856065210957824" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1350856065210957824" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The gist of it is that it is a Babel macro that runs at build time and creates Tailwinds' critical CSS styles that are necessary for any given page as well as being extendable using CSS in JS libraries such as Styled Components or Emotion.&lt;/p&gt;

&lt;p&gt;Once again, this seemed a solid plan.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some people don't feel the love for Tailwind, and of course, have some valid points. You can read "&lt;a href="https://dev.to/jaredcwhite/why-tailwind-isn-t-for-me-5c90"&gt;Why Tailwind Isn't for Me&lt;/a&gt;" by &lt;a href="https://dev.to/jaredcwhite"&gt;Jared White&lt;/a&gt; from a different point of view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#enter-tsdx" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#enter-tsdx"&gt;Enter TSDX&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kqe223tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tsdx.io/og_image.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kqe223tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tsdx.io/og_image.jpg" alt="og_image.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I decided to ditch Bit, to get the ball rolling on this project I needed a way to build a pattern library, or more simply put a package.&lt;/p&gt;

&lt;p&gt;Being as JavaScript is dead and TypeScript is the successor (I kid of course! 😉), I wanted to find a way to easily start a repo without fidgeting around with configs too much. That is when I found &lt;a href="https://github.com/jaredpalmer"&gt;Jared Plamer&lt;/a&gt;'s project &lt;a href="https://tsdx.io/"&gt;TSDX&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those of you not familiar with Jared, he is behind projects like &lt;a href="https://github.com/formium/formik"&gt;formik&lt;/a&gt; and &lt;a href="https://github.com/jaredpalmer/razzle"&gt;razzle&lt;/a&gt;. Also, he has been heard to be seen sparingly next to a mad beat maker, wearing a neck chain and boxer shorts with an American bald eagle (shout out &lt;a href="https://twitter.com/ken_wheeler"&gt;Kenny&lt;/a&gt;! ✊🏽), while talking into a mic on the &lt;a href="https://undefined.fm/"&gt;Undefined Podcast&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The project's tagline sums it all up beautifully:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"TSDX is a zero-config CLI that helps you develop, test, and publish modern TypeScript packages with ease--so you can focus on your awesome new library and not waste another afternoon on the configuration."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It also comes with templates built-in, one of them was specifically what I was looking for &lt;code&gt;react-with-storybook&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One article that helped me find my feet with TSDX was "&lt;a href="https://dev.to/g_abud/publish-a-typescript-package-in-under-10-minutes-4940"&gt;Build your First Typescript Package in Under 10 Minutes&lt;/a&gt;" by &lt;a href="https://dev.to/g_abud"&gt;Gabriel Abud&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/V5q2Chqq"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JyBRYBHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/nVgx6bMP/4wa3tv.jpg" alt="4wa3tv.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short, it does exactly what it promises with a really low learning curve. Furthermore, something really neat that comes in the mix is the &lt;code&gt;example&lt;/code&gt; directory, which is just a playground React App to test your code. Unlike TSDX, which uses &lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt; bundler, it uses &lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt; to get it running (not super important, I just find it interesting). You can import the bundled package code into there to battle-test it.&lt;/p&gt;

&lt;p&gt;One thing that is good to mention though, is that TSDX comes with preconfigured Github Actions that test and build your package. Something that I didn't know about it and misunderstood was all the matrix testing in &lt;code&gt;.github/workflow/main.yml&lt;/code&gt; which has a node matrix configuration that spins up different types of operating systems to test the package on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be wary that the Github Action minute calculation for OSs is different. This could lead to spending your budget or free minute allocation pretty quickly. Learn from my experience. I had to learn the hard way and eventually migrated all actions to CircleCI. 😳&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-ui-feedback-with-chromatic" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#getting-ui-feedback-with-chromatic"&gt;Getting UI Feedback with Chromatic&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;One other tool I like and recommend using with Storybook is Chromatic. I came across it while reading Storybooks' article "&lt;a href="https://www.learnstorybook.com/design-systems-for-developers/"&gt;Design Systems for Developers&lt;/a&gt;". It helps you better manage the whole workflow of your component library. You can get feedback from your teammates easily, it helps with visual testing (and makes snapshot testing almost redundant, IMO), It becomes part of your PR process, and publishes your Storybook to the cloud. Besides that, it is pretty simple to set up (I'll get to that later).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bringing-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#bringing-it-all-together"&gt;Bringing It All Together&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Alright, I had my tools in place and it was time to start connecting the dots, so to speak. I kicked off a new TSDX project, installed Styled components, and then went on to try and set up &lt;code&gt;twin.macro&lt;/code&gt;. However, I hit a snag there... In the &lt;a href="https://github.com/ben-rogerson/twin.examples"&gt;Twin example repo&lt;/a&gt;, there was no Styled Components + Storybook example, so I configured what seemed to make sense. Then I went on to add some samples, imported them into a new Story, and tried to run Storybook. It didn't work as expected. Some of the code worked and other components that were using the &lt;code&gt;tw&lt;/code&gt; syntax didn't:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twin.macro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
    &lt;span class="c1"&gt;// Use the tw prop to add tailwind styles directly on jsx elements&lt;/span&gt;
    &lt;span class="na"&gt;tw&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'w-32 mb-10 p-5 block opacity-50 hover:opacity-100'&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://github.com/ben-rogerson/twin.macro'&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'_blank'&lt;/span&gt;
    &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'noopener noreferrer'&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TwinSvg&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TwinSvg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'black'&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'0 0 100 35'&lt;/span&gt; &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'http://www.w3.org/2000/svg'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'m31.839 11.667c0-6.2223-3.3515-10.111-10.054-11.667 3.3514 2.3333 4.6082 5.0556 3.7704 8.1667-0.4781 1.7751-1.8653 3.0438-3.4009 4.4481-2.5016 2.2877-5.3968 4.9354-5.3968 10.718 0 6.2223 3.3515 10.111 10.054 11.667-3.3515-2.3333-4.6083-5.0556-3.7704-8.1667 0.478-1.775 1.8653-3.0438 3.4009-4.4481 2.5015-2.2877 5.3967-4.9354 5.3967-10.718z'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'m-2.7803e-7 11.667c1.4828e-7 -6.2223 3.3515-10.111 10.055-11.667-3.3515 2.3333-4.6083 5.0556-3.7705 8.1667 0.47806 1.7751 1.8653 3.0438 3.4009 4.4481 2.5016 2.2877 5.3968 4.9354 5.3968 10.718 0 6.2223-3.3515 10.111-10.054 11.667 3.3515-2.3333 4.6083-5.0556 3.7704-8.1667-0.47805-1.775-1.8653-3.0438-3.4009-4.4481-2.5015-2.2877-5.3967-4.9354-5.3967-10.718z'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'m50.594 15.872h-3.9481v7.6c0 2.0267 1.3373 1.995 3.9481 1.8683v3.0717c-5.2853 0.6333-7.3867-0.8233-7.3867-4.94v-7.6h-2.9292v-3.2933h2.9292v-4.2534l3.4386-1.0133v5.2667h3.9481v3.2933zm21.324-3.2933h3.6297l-4.9988 15.833h-3.3749l-3.3113-10.672-3.3431 10.672h-3.375l-4.9987-15.833h3.6297l3.0884 10.925 3.3431-10.925h3.2794l3.3113 10.925 3.1202-10.925zm7.8961-2.375c-1.2099 0-2.1969-1.0134-2.1969-2.185 0-1.2033 0.987-2.185 2.1969-2.185s2.1969 0.98167 2.1969 2.185c0 1.1717-0.987 2.185-2.1969 2.185zm-1.7193 18.208v-15.833h3.4386v15.833h-3.4386zm15.792-16.245c3.566 0 6.1131 2.4067 6.1131 6.5233v9.7217h-3.4386v-9.3733c0-2.4067-1.401-3.6734-3.566-3.6734-2.2606 0-4.0436 1.33-4.0436 4.56v8.4867h-3.4386v-15.833h3.4386v2.0266c1.0507-1.6466 2.77-2.4383 4.9351-2.4383z'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that, I tried pulling the output code into our helpful example repo, and that seemed to work.&lt;/p&gt;

&lt;p&gt;I went on fiddling and trying stuff, and even reached out to &lt;a href="https://github.com/ben-rogerson"&gt;Ben Rogerson&lt;/a&gt; the creator:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcC6-7iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1078437791296565249/zh9fg1FC_normal.jpg" alt="Yoav Ganbar profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Yoav Ganbar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/hamatoyogi"&gt;@hamatoyogi&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Hey, &lt;a href="https://twitter.com/benrogerson"&gt;@benrogerson&lt;/a&gt; I love twin macro! Inspired by &lt;a href="https://twitter.com/mxstbr"&gt;@mxstbr&lt;/a&gt; - I've been toying around with the idea of creating a component library with twin + React + TS + styled-components (+&lt;a href="https://twitter.com/storybookjs"&gt;@storybookjs&lt;/a&gt; ). I've started something up using &lt;a href="https://twitter.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt;'s TSDX using React storybook template.&lt;br&gt;&lt;br&gt;1/3
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:25 PM - 19 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1340408014390628352" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1340408014390628352" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1340408014390628352" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;He did help me understand how to add some Tailwind intellisense for Twin:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cIo3PDIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1023841034294292481/lzLycd_B_normal.jpg" alt="Ben Rogerson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ben Rogerson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/benrogerson"&gt;@benrogerson&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/HamatoYogi"&gt;@HamatoYogi&lt;/a&gt; Hey there, the tailwind IntelliSense extension works with twin, you'll just need to adjust the config and make sure postcss is installed &lt;a href="https://t.co/QSy2DQptph"&gt;github.com/ben-rogerson/t…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:50 PM - 21 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1341003061431390210" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1341003061431390210" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1341003061431390210" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;But I have still not been able to get the above syntax to work in my library. I set it aside and moved on, as I had plans and willingness in my company to start developing the library. However, I am keen to get back to it at some point.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check out the TSDX-Twin repo &lt;a href="https://github.com/hamatoyogi/twin-tsdx-component-lib/"&gt;here&lt;/a&gt; that has 1 out of 3 components working.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I ended up doing was starting a repo from scratch and just going with Styled Components + Tailwind vanilla.&lt;/p&gt;

&lt;p&gt;I could go on about the process of selling this whole idea back to my team and mention all the discussions around this project... But that's probably not why you're here 😉 ...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OK, story time is over. Let's get down to the brass tax!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/rdRPFZyt"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfG-veLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/JhpVxS9K/Untitled-1.png" alt="Untitled-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-tsdx" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#setting-up-tsdx"&gt;Setting up TSDX&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For the sake of this post, I will start up a new repo and take it one step at a time as I write this. I will commit every step, so you can follow along or just check out the commits.&lt;/p&gt;

&lt;p&gt;Let's start by bootstrapping a new TSDX project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// In your terminal / &lt;span class="nb"&gt;command &lt;/span&gt;line run:

npx tsdx create new-project-name
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This will install all the initial packages and create a &lt;code&gt;new-project-name&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;After that step is done, you will be prompted to choose a template:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/wRQPYtqf"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ioz38-Rv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/5yhMvvZV/Untitled-2.png" alt="Untitled-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &lt;code&gt;react-with-storybook&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Necessary NPM modules will be installed.&lt;/li&gt;
&lt;li&gt;Once it finishes you will get this confirmation:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/ZCJ2FLH1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNgos6uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/xTmQQxzT/Untitled-3.png" alt="Untitled-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we can &lt;code&gt;cd&lt;/code&gt; into the directory and run &lt;code&gt;yarn start&lt;/code&gt; to start developing in watch mode, but as we are working on a React component library and want to practice Storybook driven development (&lt;a href="https://medium.com/nulogy/storybook-driven-development-a3c517276c07"&gt;SDD&lt;/a&gt;) we can just run &lt;code&gt;yarn storybook&lt;/code&gt; and be on our way.&lt;/li&gt;
&lt;li&gt;Spinning up Storybook on a fresh TSDX project will yield the amazing "snozzberies" component:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/rd771XZJ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3xCSGJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/3Rw7H3gP/Untitled-4.png" alt="Untitled-4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much to write home about, but a good start.&lt;/p&gt;

&lt;p&gt;If we open up our project in our editor this is the folder structure we should see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/MMRNtPh8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CQMm5gWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/cH5WxPh6/Untitled-5.png" alt="Untitled-5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's breakdown the folders and files&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.github&lt;/code&gt;: Generated Github actions (If you are unfamiliar with them, I do encourage you to read about them &lt;a href="https://github.com/features/actions"&gt;here&lt;/a&gt;), their purpose is to automate your workflows and achieve CI (&lt;a href="https://www.cloudbees.com/continuous-delivery/continuous-integration"&gt;continuous integration&lt;/a&gt;). Under this folder we have 2 files:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;main.yml&lt;/code&gt;: Instructions for the GitHub action on how to install dependencies, &lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;lint&lt;/a&gt; your code, run tests, and build the package. It runs on a different node version matrix, and different operating systems (important to know this as I've mentioned earlier).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;size.yml&lt;/code&gt;: This little nugget is here to help you keep track of the size of the package using, the configuration set in &lt;code&gt;package.json&lt;/code&gt; under the &lt;code&gt;"size-limit"&lt;/code&gt; property. It is set to 10KB as the default, on the generated output files. You can change it if the need arises. This action runs when you push the code to a Github repository and will fail your checks if you pass the limit.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.storybook&lt;/code&gt;: this is where your Storybook configuration lives. You can read more about it in their &lt;a href="https://storybook.js.org/docs/react/get-started/setup"&gt;Setup section&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.vscode&lt;/code&gt;: This folder is only generated if you use &lt;a href="https://code.visualstudio.com/"&gt;VScode&lt;/a&gt;. As I used it in this project, it was created and has my workbench settings. I've also added recommended extensions, which you can try and use if you decide to clone this repo.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dist&lt;/code&gt;: The bundled output of our library code. This is what will essentially be used by consumers of this package. It holds the minified &lt;code&gt;esm&lt;/code&gt; (&lt;a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/"&gt;ES modules&lt;/a&gt;) and &lt;code&gt;cjs&lt;/code&gt; (&lt;a href="https://en.wikipedia.org/wiki/CommonJS"&gt;Common JS&lt;/a&gt;) files, as well as source maps and &lt;code&gt;TypeScript&lt;/code&gt; type definitions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;example&lt;/code&gt;: Includes our playground React App, which I've mentioned above. This will not be part of the bundle, and will not be published to whatever package manager you choose to use.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;node_modules&lt;/code&gt;: Where all JavaScript installed package modules live.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt;: Here is where the actual magic is. This is the main source file and code that will be compiled out to our &lt;code&gt;dist&lt;/code&gt; folder. Inside of this directory is the &lt;code&gt;index.tsx&lt;/code&gt; file, which is where you want to import all other source files you create. On a newly created TSDX project, you get the code for the aforementioned "snozzberies" component.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stories&lt;/code&gt;: Where your Storybook &lt;a href="https://storybook.js.org/docs/react/get-started/whats-a-story"&gt;stories&lt;/a&gt; live. This is where we want to put the code that we write to display our UI to us. "Snozzberries" component is imported and rendered here.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;test&lt;/code&gt;: In this directory, we will write our tests. When we first open it, a test for the generated component is there under &lt;code&gt;blah.test.tsx&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other than those folders we also have the regular generic files like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; - which shows our dependency list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gitignore&lt;/code&gt; - ignored files from &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;LICENSE&lt;/code&gt; - Automatically generated MIT license, change as you wish.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;README.md&lt;/code&gt; - Generated by TSDX, this file has more information about how to use the tool. If you plan on publishing this project as a package, I encourage you to change this and write down clear instructions on how to install and use your library.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tsconfig.json&lt;/code&gt;: The TypeScript configuration file that was generated by TSDX. It comes preconfigured in an opinionated way by the maintainers. I suggest leaving it as it is unless you know what you're doing or want something specifically different.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-tailwind" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#installing-tailwind"&gt;Installing Tailwind&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Remember: Tailwind CSS requires Node.js 12.13.0 or higher.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get Tailwind into the mix, you can follow along with their &lt;a href="https://tailwindcss.com/docs/installation"&gt;installation docs&lt;/a&gt; (this section will be kind of similar to that, but I think it's helpful to have in this post for ease of use). As I've already done this (several times 😅 ), for TSDX and Storybook compatibility we will need to use the &lt;a href="https://tailwindcss.com/docs/installation#post-css-7-compatibility-build"&gt;PostCSS 7 compatibility build&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt;, in short, it's a tool for transforming CSS with JavaScript and allows us to use "Tomorrow's CSS today". It is a CSS preprocessor, similar to SaSS, but with some &lt;a href="https://stackshare.io/stackups/postcss-vs-sass"&gt;differences&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's install our dependencies by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss@npm:@tailwindcss/postcss7-compat @tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9

&lt;span class="c"&gt;# alternatively: run with npm install -D ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Notice I am installing everything as a dev dependency, as this is a package, we want to keep dependencies to a minimum and allow our tools to do their job. For some things, we might want to update our &lt;code&gt;package.json&lt;/code&gt; "peerDependencies".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we will need to add a &lt;code&gt;postcss&lt;/code&gt; config in the root of our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// postcss.config.js&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;tailwindcss&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="na"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can initialize Tailwind with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That will create a &lt;code&gt;tailwind.config.js&lt;/code&gt; file in the root as well, where you can add and customize your configuration as needed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next up, we need to include Tailwind in our CSS, in our case, there are 2 things we need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To be able to import our CSS into components, we will need to tell TSDX how to include it with our code. For that, we will need to install &lt;code&gt;rollup-plugin-postcss&lt;/code&gt; (as TSDX uses rollup).&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;CSS&lt;/code&gt; file in our &lt;code&gt;src&lt;/code&gt; directory which we will use in any component in which we want to use Tailwind.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alright, so now let's add &lt;code&gt;rollup-plugin-postcss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt; &lt;span class="nx"&gt;rollup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;postcss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;TSDX is &lt;a href="https://tsdx.io/customization"&gt;fully customizable&lt;/a&gt; and you can add any &lt;code&gt;rollup&lt;/code&gt; plugin, but be aware that it overrides the default behavior&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we'll create a &lt;code&gt;tsdx.config.js&lt;/code&gt; file in the root and in it, we'll put the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tsdx.config.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rollup-plugin-postcss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;rollup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./postcss.config.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;insertAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is giving our &lt;code&gt;postCSS&lt;/code&gt; path, which tells it what files we want it to run on. The &lt;code&gt;minimize&lt;/code&gt; key is to allow us to minimize the output. The most important key here is the "&lt;code&gt;inject&lt;/code&gt;". We set it to "&lt;code&gt;top&lt;/code&gt;" to tell &lt;code&gt;postCSS&lt;/code&gt; where inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of our page the CSS will be inserted. It's paramount for Tailwind as it needs to have the utmost priority of any other stylesheet.&lt;/p&gt;

&lt;p&gt;Next, for part 2, we will create a &lt;code&gt;tailwind.css&lt;/code&gt; (can be named anything else) file under the &lt;code&gt;src&lt;/code&gt; directory and paste this in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;tailwind&lt;/span&gt;&lt;span class="nc"&gt;.css&lt;/span&gt;

&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Great! This should allow us to get the job done.&lt;/p&gt;

&lt;p&gt;Let's check it out on the only component we currently have and see if it works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HTMLAttributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ReactChild&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ! Add the CSS import statement !&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tailwind.css`;

// ...

// we&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;ll&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;Tailwind&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;our&lt;/span&gt; &lt;span class="nx"&gt;components&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center justify-center w-5/6 m-auto text-2xl text-center text-pink-700 uppercase bg-blue-300 shadow-xl rounded-3xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;`the snozzberries taste like snozzberries`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we'll run our StoryBook (&lt;code&gt;yarn storybook&lt;/code&gt;) and have a look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/ppZNgSyW"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEFCKebA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/XYMVySbC/Untitled-6.png" alt="Untitled-6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's a nice-looking "snozzberries" component!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/R6H5yVJy"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oysv9oEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/rmhVdDVV/cbc86920aaaca20d9b3c09bda1e7c72b.jpg" alt="cbc86920aaaca20d9b3c09bda1e7c72b.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, it would be a good time to sort and prepare our package a bit so we can have more than 1 component. For that, we'll change the name of the file that holds our beloved "snozzberries" component from &lt;code&gt;index.tsx&lt;/code&gt; to &lt;code&gt;Thing.tsx&lt;/code&gt;. Then, we'll create a new &lt;code&gt;index.tsx&lt;/code&gt; file where we'll export all of our components and let TSDX do its thing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.tsx:&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Thing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// We use the "*" export to get everything out of our file: components and types.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's see we haven't broken anything and see that our test is functioning by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And we get this output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/G45fRnRC"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsgOKxG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/9fmHGcNr/Untitled-7.png" alt="Untitled-7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/bZJ54NKg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqmXuQv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/dVmKkh6b/Untitled-8.png" alt="Untitled-8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering: "What's going on here?"&lt;/p&gt;

&lt;p&gt;Well, Jest doesn't know how to read &lt;code&gt;CSS&lt;/code&gt;. Also, it doesn't really care about it either, so we will have to mock it for him with &lt;a href="https://github.com/keyz/identity-obj-proxy"&gt;&lt;code&gt;identity-obj-proxy&lt;/code&gt;&lt;/a&gt; (to learn more about why go &lt;a href="https://jestjs.io/docs/en/webpack#mocking-css-modules"&gt;here&lt;/a&gt;). Let's add it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; identity-obj-proxy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we will need to point Jest at the correct type of files by adding this snippet to our &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// package.json
...
  &lt;span class="s2"&gt;"jest"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"moduleNameMapper"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$"&lt;/span&gt;: &lt;span class="s2"&gt;"&amp;lt;rootDir&amp;gt;/__mocks__/fileMock.js"&lt;/span&gt;,
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;.(css|less|scss|sass)$"&lt;/span&gt;: &lt;span class="s2"&gt;"identity-obj-proxy"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can run the test again, and behold the new results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/wRY8p8hv"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XLo07Qqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/x8c0L98K/Untitled-9.png" alt="Untitled-9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-styled-components" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#adding-styled-components"&gt;Adding Styled Components&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;So now that we have all that going for us, let's see how Styled Components gets in the mix...&lt;/p&gt;

&lt;p&gt;First, let's install the package and its TypeScript types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; styled-components @types/styled-components
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's keep it simple and start by building a &lt;code&gt;Button&lt;/code&gt; component (original, yes I know...):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/Button.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: blue;
  color: white;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I'm assuming basic knowledge in Styled Components. If you are new to it, &lt;a href="https://styled-components.com/"&gt;check out the doc site&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will need to add it to our &lt;code&gt;index.tsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; from &lt;span class="s1"&gt;'./Thing'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; from &lt;span class="s1"&gt;'./Button'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add a Story for it, so we can see it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// stories/Button.stories.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@storybook/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;argTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SCButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

&lt;span class="nx"&gt;SCButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And voila! Our very ugly button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/Y4VBdm0Q"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DH8P6v0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/k4MMXQdY/Untitled-10.png" alt="Untitled-10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can do better of course... Let's remove our styles and add some Tailwind classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/Button.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'px-8 py-2 font-semibold text-white transition duration-500 ease-in-out transform rounded-lg shadow-xl bg-gradient-to-r from-red-300 to-blue-300 hover:from-pink-400 hover:to-indigo-400'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now we have this handsome fellow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/PCXHJj0v"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1pDhoKfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/bwbw6YTg/Untitled-11.png" alt="Untitled-11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We still have some styles in our Styled Components, which we don't really need, and our JSX is a bit long and messy. If we combine our classes into our Styled Components, that should clean it up and make our concerns a bit more clear. To achieve this, we will use the &lt;code&gt;[attrs&lt;/code&gt; API](&lt;a href="https://styled-components.com/docs/api#attrs"&gt;https://styled-components.com/docs/api#attrs&lt;/a&gt;) which allows us to attach props to our styled component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/Button.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px-8 py-2 font-semibold text-white transition duration-500 ease-in-out transform rounded-lg shadow-xl bg-gradient-to-r from-red-300 to-blue-300 hover:from-pink-400 hover:to-indigo-400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This method allows great flexibility. How so? Say we now want to change the text color by the button "variant". We can do this by adding a prop to our &lt;code&gt;Button&lt;/code&gt;, and we can either change it by changing our used Tailwind class name or use the prop and change it via our Styled Component string interpolation.&lt;/p&gt;

&lt;p&gt;First, we'll add a &lt;code&gt;variant&lt;/code&gt; prop to our component interface, and add 2 possible values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pass it in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// we set our "default" variant to... Um, well, to "default" ¯\_(ツ)_/¯&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hold on now! we have a TypeScript error!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/q6TYFcT6"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ntbMzQT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Y0GHh8DR/Untitled-12.png" alt="Untitled-12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the squiggly line under "variant"? In a nutshell, TS is telling us "you are passing in a parameter I don't know about". Let's fix that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// attr function needs the type, but also the "styled" function itself&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`px-8 py-2 font-semibold text-white transition duration-500 ease-in-out transform rounded-lg shadow-xl bg-gradient-to-r from-red-300 to-blue-300 hover:from-pink-400 hover:to-indigo-400`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// extract the type out from the interface for reuse.&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// There are a ton of other fancy ways of doing this in TS.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Back to business... So, one way to change our text color using our new &lt;code&gt;variant&lt;/code&gt; prop would be just using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literals&lt;/a&gt; and choosing a different Tailwind class name for &lt;code&gt;text&lt;/code&gt;. The other would be to use that same prop in our Styled Components backticks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Option 1️⃣ :&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`px-8 py-2 font-semibold &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
      &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-red-700&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; transition duration-500 ease-in-out transform rounded-lg shadow-xl bg-gradient-to-r from-red-300 to-blue-300 hover:from-pink-400 hover:to-indigo-400`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Option 2️⃣ :&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`px-8 py-2 font-semibold text-white transition duration-500 ease-in-out transform rounded-lg shadow-xl bg-gradient-to-r from-red-300 to-blue-300 hover:from-pink-400 hover:to-indigo-400`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;`
  color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The tradeoff with option &lt;code&gt;2&lt;/code&gt; is not having Tailwinds' utility classes and color themes to help us style things. However, mixing and matching both approaches is mighty powerful if you think about it.&lt;/p&gt;

&lt;p&gt;One last thing that can be helpful is using a library like &lt;code&gt;[tailwind-classnames](https://github.com/muhammadsammy/tailwindcss-classnames)&lt;/code&gt; which helps validate you are using correct class names, and if you don't TS will yell at you. It has the full capability and API of the known &lt;code&gt;[classnames](https://www.npmjs.com/package/classnames)&lt;/code&gt; library, as it is just an extension of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-react-testing-library" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#adding-react-testing-library"&gt;Adding React Testing Library&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I am not going to start explaining &lt;a href="https://kentcdodds.com/blog/introducing-the-react-testing-library"&gt;why you should be using React Testing Library&lt;/a&gt;, or &lt;a href="https://medium.com/@boyney123/my-experience-moving-from-enzyme-to-react-testing-library-5ac65d992ce"&gt;how it's different from Enzyme&lt;/a&gt;. I'll just say that I think It's great and that in my opinion, you should be using it.&lt;/p&gt;

&lt;p&gt;With that out of the way... Let's add it to our project by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @testing-library/react @testing-library/jest-dom
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, let's add a test for our &lt;code&gt;Button&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// test/Button.test.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// This below import is what gives us the "toBeInTheDocument" method&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/jest-dom/extend-expect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// As we are using the Component Story Format we can import it from our&lt;/span&gt;
&lt;span class="c1"&gt;// previously written story.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SCButton&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../stories/Button.stories&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render the button without crashing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// render the button and get the getByRole method&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getByRole&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'test'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// getByRole as its name gets a selector by its role.&lt;/span&gt;
    &lt;span class="c1"&gt;// in this case we're looking for a `button`.&lt;/span&gt;
    &lt;span class="c1"&gt;// then we make sure it's in the document&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We also want to make sure that besides rendering, we can click it. So we'll check that as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... same imports except:&lt;/span&gt;
&lt;span class="c1"&gt;// we've added the fireEvent method to simulate a user click&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//... our former test&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should call the onClick method when a user clicks on the button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// mock out our OnClick function&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getByRole&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'test'&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;mockClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// we store a variable with the button element&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Simulate a user clicking on the button&lt;/span&gt;
    &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockClick&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's try and make sure the tests work with &lt;code&gt;yarn test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what's this 😱 ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/5X7htFwD"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wavAxLLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/tgpp237R/Untitled-13.png" alt="Untitled-13.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test failed due to a TypeScript error... 🤦🏽‍♂️&lt;/p&gt;

&lt;p&gt;No fear! We can fix it... We'll go back to our &lt;code&gt;Button&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/Button.tsx&lt;/span&gt;

&lt;span class="c1"&gt;// add the relevant type import&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ButtonHTMLAttributes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="c1"&gt;// We'll add the relevant missing type by extending our interface:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ButtonHTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLButtonElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// make sure we pass all the rest of the props to our component:&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now we are all green!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/CZdVC4hF"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJmIHqix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/0N02sthJ/Untitled-14.png" alt="Untitled-14.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One more test that is worth demonstrating is for our button with the dynamic Tailwind class. If you recall, we're testing option 2️⃣ :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`px-8 py-2 font-semibold &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
      &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-red-700&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; transition duration-500 ease-in-out transform rounded-lg shadow-xl bg-gradient-to-r from-red-300 to-blue-300 hover:from-pink-400 hover:to-indigo-400`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonVariants&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can easily test that we're expecting to have our &lt;code&gt;text-white&lt;/code&gt; class when we're with the &lt;code&gt;default&lt;/code&gt; variant and that we have the class &lt;code&gt;text-red-700&lt;/code&gt; for the &lt;code&gt;warning&lt;/code&gt; variant. Let's add that test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should have the right text color class name for variants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// we extract the "rerender" method to test both variants&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rerender&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'test'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// if you recall, passing no variant, defaults to "default" variant.&lt;/span&gt;
  &lt;span class="c1"&gt;// this is a bit robust, but it serves to illustarte the point&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-red-700&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// render the other "warning" variant&lt;/span&gt;
  &lt;span class="nx"&gt;rerender&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'warning'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// test the opposite of the above:&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-red-700&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you add any dynamic CSS styles with Styled Components use &lt;a href="https://github.com/styled-components/jest-styled-components"&gt;&lt;code&gt;jest-styled-components&lt;/code&gt;&lt;/a&gt; for testing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sanity-check-with-tsdx-example" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#sanity-check-with-tsdx-example"&gt;Sanity Check with TSDX Example&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we've tested our newly added component, if we'd like to gain more confidence that our button will work with our outputted and bundled code, we can use the TSDX example repo.&lt;/p&gt;

&lt;p&gt;For that, we'll build our code with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn build
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we can move to our &lt;code&gt;example&lt;/code&gt; folder and install our dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;example &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we'll import our Button and add it to our example App:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// example/index.tsx

import &lt;span class="s1"&gt;'react-app-polyfill/ie11'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
import &lt;span class="k"&gt;*&lt;/span&gt; as React from &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
import &lt;span class="k"&gt;*&lt;/span&gt; as ReactDOM from &lt;span class="s1"&gt;'react-dom'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
// the importing location is automatically &lt;span class="sb"&gt;`&lt;/span&gt;dist&lt;span class="sb"&gt;`&lt;/span&gt; folder
import &lt;span class="o"&gt;{&lt;/span&gt; Thing, Button &lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'../.'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

const App &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
    &amp;lt;div&amp;gt;
      &amp;lt;Thing /&amp;gt;
      &amp;lt;Button &lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

ReactDOM.render&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;App /&amp;gt;, document.getElementById&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We'll boot up the example app with &lt;code&gt;yarn start&lt;/code&gt;, then we'll visit &lt;code&gt;http://localhost:1234&lt;/code&gt; and we should see this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/4ncsFwzy"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JLV13Jf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/QN4CCyCQ/Untitled-15.png" alt="Untitled-15.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, there we have our Button under our "snozzberries" component. Looks like it's all working!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkB0yDPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.gfycat.com/CheapFeistyDassierat-mobile.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkB0yDPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.gfycat.com/CheapFeistyDassierat-mobile.jpg" alt="https://thumbs.gfycat.com/CheapFeistyDassierat-mobile.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-chromatic" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#setting-up-chromatic"&gt;Setting up Chromatic&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As I've mentioned, Chromatic is the perfect tool to &lt;a href="https://www.chromatic.com/solutions/design-systems"&gt;build, test, and collaborate on design systems&lt;/a&gt;. To get up and running, you can &lt;a href="https://www.chromatic.com/docs/setup"&gt;follow along with their docs&lt;/a&gt;, or just go and sign up at the &lt;a href="https://www.chromatic.com/"&gt;Chromatic site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you've finished signing up, go ahead to your dashboard and create a project, you can choose an existing GitHub repo to start with. Once the project has been created, you'll need to install the Chromatic package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; chromatic
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you can publish your Storybook with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx chromatic &lt;span class="nt"&gt;--project-token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;your_project_token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This process will also guide you to complete the process and create an &lt;code&gt;npm&lt;/code&gt; script for you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/PPKc68FN"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eYf5Bn7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/13ZQ3GG0/Untitled-16.png" alt="Untitled-16.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Opening the "continue setup" link we get to this screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/QKcD9xX1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDRAiPC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/MHFpLvNP/Untitled-17.png" alt="Untitled-17.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can test and show how Chromatic works but clicking the "Catch a UI change" button. For that, let's change something in one of our components. Good ol' "Snozzberries" background is a good enough candidate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/Thing.jsx&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="c1"&gt;// I've changed the bg-blue-300 class to bg-yellow-300 which is the background color:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'flex items-center justify-center w-5/6 m-auto text-2xl text-center text-pink-700 uppercase bg-yellow-400 shadow-xl rounded-3xl'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;`the snozzberries taste like snozzberries`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once again, let's run the Chromatic script, but now we can use our newly added &lt;code&gt;npm&lt;/code&gt; script that has our project token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn chromatic
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This time, at the end of the process we'll see a message and an error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/47DZxhTX"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6kqASKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/yxdNnFQ3/Untitled-18.png" alt="Untitled-18.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then going back to the Chromatic website this is what we see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/gxsYHJ3K"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBvmACmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/bvcs8SJ4/Untitled-19.png" alt="Untitled-19.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click on the "Welcome" component (our "snozzberries" component, that we should have renamed in its story 😬 ), which will lead us to the comparison screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/phhRvJ40"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6km8RfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/G2z2kMQ1/Untitled-20.png" alt="Untitled-20.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the right, we can see the new "state" of the component highlighted by green. Note, that this isn't the actual color we put, but just "what has changed". The three buttons on the top right can be toggled to show the actual new visual, click on the "Diff" will show us just that:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/hXcDmxQj"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OpcvGnpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/bw2sK9zQ/Untitled-21.png" alt="Untitled-21.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can click "Accept change + continue", which leads us to more explanations of the feedback process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/wtB9fpVY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R92i6qD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/9fdzfXw0/Untitled-22.png" alt="Untitled-22.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chromatic allows us to create a workflow around building a UI library, where you can collaborate with your developer teammates and designers to streamline better communication. To achieve this, it is highly recommended to &lt;a href="https://www.chromatic.com/docs/ci"&gt;integrate this with your CI&lt;/a&gt;. In doing so, you can make this part of a PR process: when reviewing code changes, you review the UI changes as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparing-for-production" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#preparing-for-production"&gt;Preparing for Production&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After we've finished developing, we want to make sure our package is ready to be published and consumed properly. For that, one more handy tool TSDX offers us is its &lt;code&gt;size&lt;/code&gt; check script. The default size limit for our package is defined in our &lt;code&gt;package.json&lt;/code&gt; under the &lt;code&gt;size-limit&lt;/code&gt; property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;size-limit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist/react-tw-blog-post.cjs.production.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;limit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10 KB&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist/react-tw-blog-post.esm.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;limit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10 KB&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To run it we should make sure all of the code is built, and then we can run the &lt;code&gt;size&lt;/code&gt; script by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn size
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But what's this?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/N57YQMCw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-y9yNle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/DyRzd4qm/Untitled-23.png" alt="Untitled-23.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We only have 2 components and the size is over 300KB??? That doesn't seem right.&lt;/p&gt;

&lt;p&gt;This is happening, because we missed something in our configuration... To be more exact, we forget about a key config when &lt;a href="https://tailwindcss.com/docs/optimizing-for-production"&gt;preparing any project using Tailwind for production&lt;/a&gt; - purging our CSS. Without this step, our CSS bundle consists of &lt;code&gt;294.0KB&lt;/code&gt; (Gziped).&lt;/p&gt;

&lt;p&gt;Following Tailwinds "&lt;a href="https://tailwindcss.com/docs/optimizing-for-production#removing-unused-css"&gt;Remove unused CSS&lt;/a&gt;" section, we can add this configuration to our package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/components/**/*.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// This is a convention for files that only include Styled Components.&lt;/span&gt;
    &lt;span class="c1"&gt;// If you don't use this convention feel free to skip it.&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/components/**/*.styled.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another important note is that for Tailwind to actually run the purging process, it must be run with &lt;code&gt;NODE_ENV&lt;/code&gt; that is set to &lt;code&gt;production&lt;/code&gt;. So, let's modify our build script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ..&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NODE_ENV=production tsdx build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we can rerun &lt;code&gt;yarn build &amp;amp;&amp;amp; yarn size&lt;/code&gt;. Now our output will be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/QHrhL5bb"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8y98J64X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/7Y562nJp/Untitled-24.png" alt="Untitled-24.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Still not under the TSDX default of &lt;code&gt;10KB&lt;/code&gt;, but much much better. Like the green text in the CLI output says, you can increase your limits as needed.&lt;/p&gt;

&lt;p&gt;There are many more things to do to optimize your bundle size output, most of them around how and what you use out of Tailwind. For example, you can disable the &lt;a href="https://tailwindcss.com/docs/preflight"&gt;preflight&lt;/a&gt; setting which will remove all the CSS resets and share off some more KBs.&lt;/p&gt;

&lt;p&gt;In the end, you should consolidate and minimize what you use from the default Tailwind configuration. Adjust for your needs, and try to get your designers to choose and minimize the options. You probably don't need &lt;code&gt;[84&lt;/code&gt; colors](&lt;a href="https://tailwindcss.com/docs/customizing-colors"&gt;https://tailwindcss.com/docs/customizing-colors&lt;/a&gt;) for your project...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-your-tailwind-configuration" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#viewing-your-tailwind-configuration"&gt;Viewing your Tailwind Configuration&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;One more nifty tool that can help developers and designers alike working on a project like this is &lt;a href="https://github.com/rogden/tailwind-config-viewer"&gt;&lt;code&gt;tailwind-config-viewer&lt;/code&gt;&lt;/a&gt;. As stated on the repo's page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A local UI tool for visualizing your Tailwind CSS configuration file."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It helps see what you've chosen as your Tailwind configuration. You can use &lt;code&gt;npx&lt;/code&gt; on any project that has a &lt;code&gt;tailwind.config.js&lt;/code&gt; file and just see what it has. Just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwind-config-viewer
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://postimg.cc/Lgkd4CTV"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4OJrIV03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/WzCsnxqx/Untitled-25.png" alt="Untitled-25.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides showcasing your chosen config, you can hover over any class and just copy it with a click of a mouse.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#publishing"&gt;Publishing&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this post I am not going to dive into this subject, it deserves a post of its own. However, with the setup I've mentioned here, publishing to &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;github&lt;/code&gt; packages has some more setup and configuration entailed, but not much. The build artifact following these aforementioned steps is ready to be taken and put on any registry.&lt;/p&gt;

&lt;p&gt;I plan on doing a follow-up post on how to publish using Github packages + CircleCI / Github Actions + &lt;a href="https://github.com/atlassian/changesets"&gt;Changesets&lt;/a&gt;. Perhaps, I'll even address how to publish to &lt;code&gt;Bit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is already a far too long post as it is 😅.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-tailwindinjs-solutions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#other-tailwind-in-js-solutions"&gt;Other Tailwind-in-JS Solutions&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I've already mentioned &lt;code&gt;twin.macro&lt;/code&gt;, and just recently learned about &lt;a href="https://compiledcssinjs.com/"&gt;Compiled CSS in JS&lt;/a&gt;, which apparently should work with it as well.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJIu2RKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1361092693737099271/HuWI9Bl4_normal.jpg" alt="Compiled CSS-in-JS profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Compiled CSS-in-JS
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @compiledcss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/HamatoYogi"&gt;@HamatoYogi&lt;/a&gt; &lt;a href="https://twitter.com/benrogerson"&gt;@benrogerson&lt;/a&gt; &lt;a href="https://twitter.com/saschatandel"&gt;@saschatandel&lt;/a&gt; &lt;a href="https://twitter.com/tailwindcss"&gt;@tailwindcss&lt;/a&gt; you can use the TW macro with me 😎🙏
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:11 AM - 15 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1361226725053460481" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1361226725053460481" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1361226725053460481" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Another very Intriguing project is &lt;code&gt;Twind&lt;/code&gt;. Which, I've learned about after tweeting my plans about writing this post. One of the project maintainers, &lt;a href="https://twitter.com/saschatandel"&gt;Sascha Tandel&lt;/a&gt;, reached out to me and asked me to consider writing a little bit about it as well. I have not had the chance to dig into it too much and try it out, but I did read the docs and it is quite interesting.&lt;/p&gt;

&lt;p&gt;Here's what Sascha had to say about it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"&lt;a href="https://twind.dev/"&gt;Twind&lt;/a&gt; is a no-build-step tailwind-first CSS-in-JS library which allows seamless integration with existing Tailwind HTML using the &lt;a href="https://twind.dev/docs/handbook/getting-started/using-the-shim.html"&gt;twind/shim module&lt;/a&gt;. This feature can be used together with your favorite framework without any additional setup. &lt;code&gt;twind/shim&lt;/code&gt; dynamically detects used Tailwind classes within the HTML document, creates the corresponding CSS rules, and injects these into a stylesheet. Here is &lt;a href="https://esm.codes/#aW1wb3J0ICdodHRwczovL2Nkbi5za3lwYWNrLmRldi90d2luZC9zaGltJwoKZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBgCiAgPG1haW4gY2xhc3M9Imgtc2NyZWVuIGJnLXB1cnBsZS00MDAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIiPgogICAgPGgxIGNsYXNzPSJmb250LWJvbGQgdGV4dChjZW50ZXIgNXhsIHdoaXRlIHNtOmdyYXktODAwIG1kOnBpbmstNzAwKSI+CiAgICAgIFRoaXMgaXMgVHdpbmQhCiAgICA8L2gxPgogIDwvbWFpbj4KYA=="&gt;an example&lt;/a&gt; to play with. By shipping the compiler (rather than the resultant output) there is a known and fixed cost associated with styling. No matter how many styles you write or how many variants you use, all that your users will ever have to download is approximately 12KB of code (which is less than styled-components or your average purged Tailwind build). On the server, we can use &lt;a href="https://twind.dev/docs/modules/twind_shim_server.html"&gt;twind/shim/server&lt;/a&gt; to generate the initial CSS to be included in the HTML. &lt;br&gt;&lt;br&gt;&lt;br&gt;
Unlike Tailwind, Twind is not limited to the restrictions of a class name strings as input. One pain-point commonly felt when using utility CSS is long and unwieldy lines of code consisting of class names, often denoting styles at various breakpoints, which are quite hard to comprehend. It is not uncommon for a single element to have tens of rules applied to it. Twind provides a grouping syntax to combine common variants or prefixes. Both responsive and pseudo variants are supported in various combinations: &lt;code&gt;bg-red-500 shadow-xs md:(bg-red-700 shadow) lg:(bg-red-800 shadow-xl)&lt;/code&gt;. &lt;br&gt;&lt;br&gt;&lt;br&gt;
Because Twind is generating CSS during runtime there is no need to restrict the usage of variants. Every variant can be applied to every class. Additionally, variants can be stacked like &lt;code&gt;hover:focus:text-blue-700&lt;/code&gt;. The Twind documentation site contains an overview of &lt;a href="https://twind.dev/docs/handbook/getting-started/tailwind-extensions.html"&gt;all extensions&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;br&gt;
As a convenient escape hatch for all those one-off styles which aren't supported by Tailwind, Twind allows &lt;a href="https://twind.dev/docs/handbook/getting-started/css-in-js.html"&gt;writing arbitrary CSS&lt;/a&gt; making it a full CSS-in-JS solution."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some more appealing things that came out of our DMs were that the team is working on a &lt;code&gt;[styled&lt;/code&gt; module](&lt;a href="https://github.com/tw-in-js/twind/pull/7"&gt;https://github.com/tw-in-js/twind/pull/7&lt;/a&gt;) and &lt;a href="https://github.com/tw-in-js/typescript-plugin"&gt;TypeScript support&lt;/a&gt;. Also, the package has its own "CSS-in-JS" baked in, so no need for Styled Components, Emotion, or Goober.&lt;/p&gt;

&lt;p&gt;Twin has a similar API to &lt;code&gt;twin.macro&lt;/code&gt; and granted, it is still in early versions (v0.15.1 at the time of writing), however, it might have a great future ahead of it. I for one, can't wait to try it out! For now, &lt;a href="https://codesandbox.io/s/twind-apply-react-typescript-73pm9"&gt;here is a Codesandbox with React&lt;/a&gt; to play around with yourself 😃: &lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/73pm9"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I hope I helped guide you through how to get a project like this going. I know I've enjoyed writing this, and I've learned a lot by doing so. I think the tooling I've mentioned in this post is pretty solid and absolutely helps boost productivity, but I know it's not so easy to set up. That is why I wrote this down, so someone doesn't have to go through the same hassles I did.&lt;/p&gt;

&lt;p&gt;Surely, some tweaks and improvements can be made to this approach. Obviously, this is an opinionated way of building something like this. After all, I am one person and I have, like, you know, my opinion, man.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/6yd6Tz3g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAiMupUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/CL2RPQVh/you-opinion.png" alt="you-opinion.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully (🤞🏽) if you've read this down to here, you've enjoyed this post. If you did, please share this around, comment, like, and push the subscribe button 😜.&lt;/p&gt;

&lt;p&gt;Cheers! 🍻&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="#resources"&gt;Resources&lt;/a&gt;:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hamatoyogi/react-tw-blog-post"&gt;Blog post Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learnstorybook.com/design-systems-for-developers/"&gt;Design Systems For Developers/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tsdx.io/"&gt;TSDX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chromatic.com/"&gt;Chromatic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twind.dev/docs/index.html"&gt;Twind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ben-rogerson/twin.macro"&gt;twin.macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kentcdodds.com/blog/build-vs-buy-component-libraries-edition"&gt;Build vs Buy: Component Libraries edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adele.uxpin.com/"&gt;Adele - Design Systems and Pattern Libraries Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://gist.github.com/hamatoyogi/728e696772d8c91ddfac7f8648340b51"&gt;Helper functions for Tailwind CSS variable colors&lt;/a&gt; I wrote.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>react</category>
      <category>typescript</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>How To Know If An Element Is Visible In Viewport.</title>
      <author>Lucius Emmanuel Emmaccen</author>
      <pubDate>Tue, 16 Feb 2021 21:57:54 +0000</pubDate>
      <link>https://dev.to/emmaccen/how-to-know-if-an-element-is-visible-in-viewport-c45</link>
      <guid>https://dev.to/emmaccen/how-to-know-if-an-element-is-visible-in-viewport-c45</guid>
      <description>&lt;p&gt;In this article, we're going to learn how to know/detect if an element is visible in the browser's viewport.&lt;/p&gt;

&lt;p&gt;Before we start, I'd like to clarify what a &lt;strong&gt;viewport&lt;/strong&gt; is, relative to our browser engine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Viewport&lt;/strong&gt; is the area (ordinarily rectangular) of our computer graphics (Screen) that is currently being viewed. In other words, it's the area of your computer screen that is currently visible to you (physically). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Viewport"&gt;MDN docs&lt;/a&gt; for an in-depth explanation, if mine is not clear enough.&lt;/p&gt;

&lt;p&gt;Now, why would this be useful to you? Why would you want to know if an element is currently visible in the browser's viewport? &lt;/p&gt;

&lt;p&gt;You might find it useful in situations like :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You want to show an overlay asking your customers to subscribe to your newsletter when they scroll to the footer of your website (e.g If its a blog site, this might indicate they just finished reading and you want them to subscribe)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You want to increase counter values that read when an element becomes visible to users&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2a9qz6su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lenbal8ef1suc7ta8ia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2a9qz6su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lenbal8ef1suc7ta8ia.png" alt="counter image by emmaccen"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trigger animations when e.g "section A" on your webpage comes to view, fadeIn animations, etc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a progress bar at the top of the screen that tells you how much content is left to view on a page (You might have seen it used on blog sites or any site that involves reading through a long text content).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do some Javascript magic, like play a video, show some short popup ads, toggle a help "BOT" 🤖 etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Am sure by now, you're seeing useful things that can be done with this in your mind too and at the end of this article, you'll get even more insight and ideas. So... let's get to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough" class="anchor"&gt;
  &lt;/a&gt;
  Walkthrough
&lt;/h2&gt;

&lt;p&gt;We can achieve this by using the &lt;strong&gt;getBoundingClientRect()&lt;/strong&gt; function on an element which returns a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRect"&gt;DOMRect&lt;/a&gt; object providing information about the size of an element and its position relative to the viewport.&lt;br&gt;
so we have something like &lt;code&gt;yourElement.getBoundingClientRect()&lt;/code&gt; or &lt;code&gt;elementInfo = yourElement.getBoundingClientRect()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;DOMRect&lt;/strong&gt; describes the size and position of a rectangle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;DOMRect&lt;/strong&gt; Object returned from &lt;code&gt;getBoundingClientRect()&lt;/code&gt; are key-values &lt;em&gt;(in pixels)&lt;/em&gt; that can be used to compute our goal and is the smallest rectangle which contains the entire element, including its padding and border-width.&lt;br&gt;
The Object returned looks something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; {
      x: 20,
      y: 5.5,
      width: 882,
      height: 198.890625,
      top: 5.5,
      right: 902,
      bottom: 204.390625,
      left: 20,
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's go through the explanation in more detail. I've separated the visual presentation in order to avoid confusion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#domrect-keyvalues-in-pixels" class="anchor"&gt;
  &lt;/a&gt;
  DOMRect Key-Values (in pixels)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;X and Left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Represents the distance from the &lt;strong&gt;left&lt;/strong&gt; between the viewport (browser screen) and the &lt;strong&gt;top-left&lt;/strong&gt; area of the DOMRect (yourElement).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pzjqhRP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ars41gsgehj3rzicww0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzjqhRP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ars41gsgehj3rzicww0.png" alt="getBoundingClient-X and Left"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Y and Top&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Represents the distance from the &lt;strong&gt;top&lt;/strong&gt; of the viewport (browser screen) and the &lt;strong&gt;top&lt;/strong&gt; of the DOMRect (yourElement).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44QqN7pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jc1rw8m1yaw1szhjsytn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44QqN7pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jc1rw8m1yaw1szhjsytn.png" alt="getBoundingClient-Y and Top"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Width&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Represents the width of the DOMRect&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Height&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Represents the height of the DOMRect&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The width and height properties of the &lt;strong&gt;DOMRect object&lt;/strong&gt; returned by the method include the &lt;strong&gt;padding&lt;/strong&gt; and &lt;strong&gt;border-width&lt;/strong&gt;, not only the content &lt;strong&gt;width/height&lt;/strong&gt;. In the standard box model, this would be equal to the &lt;strong&gt;width&lt;/strong&gt; or &lt;strong&gt;height&lt;/strong&gt; property of the element + padding + border-width. But if &lt;strong&gt;box-sizing: border-box&lt;/strong&gt; is set for the element this would be directly equal to its width or height.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can check the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing"&gt;MDN Docs&lt;/a&gt; on box-sizing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bottom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Represents the distance from the &lt;strong&gt;top&lt;/strong&gt; of the viewport (browser screen) and the &lt;strong&gt;bottom&lt;/strong&gt; of the DOMRect (yourElement).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Li-ZWW08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jf58kd3ye9bayedskpmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Li-ZWW08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jf58kd3ye9bayedskpmr.png" alt="getBoundingClient-bottom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Represents the distance from the &lt;strong&gt;left&lt;/strong&gt; of the viewport (browser screen) and the &lt;strong&gt;right&lt;/strong&gt; (bottom-right) of the DOMRect (yourElement). It has the same value as &lt;strong&gt;x + width&lt;/strong&gt;, or &lt;strong&gt;x&lt;/strong&gt; if &lt;strong&gt;width&lt;/strong&gt; is negative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QH2N44cb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/275u0uqwgsiji2qj29a2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QH2N44cb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/275u0uqwgsiji2qj29a2.png" alt="getBoundingClient-right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-diagram" class="anchor"&gt;
  &lt;/a&gt;
  Full Diagram
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyRm2q9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m4iodvr8ofgu705qzyxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyRm2q9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m4iodvr8ofgu705qzyxg.png" alt="getBoundingClient value/angles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you're wondering where I got all these diagrams from, I designed them in Figma&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-useful-tips" class="anchor"&gt;
  &lt;/a&gt;
  Some Useful Tips
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Calculating Partial Visibility &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say we want to know if an element is partially visible in the viewport, and we've assigned an evenListner that triggers each time we scroll through the page e.g something like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.addEventListener("scroll", () =&amp;gt; {
        //Some javascript magic here...
      });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;we can achieve this by simply subtracting the &lt;strong&gt;top/y&lt;/strong&gt; value from viewport height (screen) and also doing a check to make sure the &lt;strong&gt;bottom&lt;/strong&gt; value is greater than &lt;strong&gt;0&lt;/strong&gt;.&lt;br&gt;
The viewport height can be gotten using &lt;code&gt;window.innerHeight&lt;/code&gt; or &lt;code&gt;document.documentElement.clientHeight&lt;/code&gt; but usually, it's safer to combine them due to the browser compatibility of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight#browser_compatibility"&gt;innerHeight&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement#browser_compatibility"&gt;documentElement&lt;/a&gt;&lt;br&gt;
So you might use something like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const height = 
window.innerHeight || document.documentElement.clientHeight;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So partial visibility would pass for the condition :&lt;br&gt;
&lt;strong&gt;viewportHeight - top&lt;/strong&gt; is greater than &lt;strong&gt;0&lt;/strong&gt; and &lt;strong&gt;bottom&lt;/strong&gt; is also greater than &lt;strong&gt;0&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const viewportHeight =
            window.innerHeight || document.documentElement.clientHeight;
// condition 
(viewportHeight - top &amp;gt; 0 &amp;amp;&amp;amp; bottom &amp;gt; 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If this is getting a little rough, it might be helpful to use the diagram and a pen and paper (I definitely did).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Calculating Full Visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, this part is almost as easy. The conditions required for full visibility is: &lt;br&gt;
&lt;strong&gt;bottom&lt;/strong&gt; is greater than &lt;strong&gt;0&lt;/strong&gt; and &lt;strong&gt;bottom&lt;/strong&gt; is less than or equal to &lt;strong&gt;viewportHeight&lt;/strong&gt; and &lt;strong&gt;top&lt;/strong&gt; is greater than or equal to &lt;strong&gt;0&lt;/strong&gt;&lt;br&gt;
So it looks something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bottom &amp;gt; 0 &amp;amp;&amp;amp; bottom &amp;lt;= viewportHeight &amp;amp;&amp;amp; top &amp;gt;= 0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this point, I think it would be nice to have us view a &lt;a href="https://emmaccen.github.io/isElementInView/"&gt;live website&lt;/a&gt; that computes the values of &lt;code&gt;getBoundingClientRect()&lt;/code&gt; in real-time.&lt;/p&gt;

&lt;p&gt;It'll also help you understand how all the conditions/checks we did earlier passes the visibility test. Just scroll through the page and watch the magic.&lt;br&gt;
Its a super simple webpage with a nicely cooked and understandable code 😎.&lt;br&gt;
Feel free to clone/fork the &lt;a href="https://github.com/Emmaccen/isElementInView"&gt;gitHub repo&lt;/a&gt; if you want to get familiar with the code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now, it's evident that everything we've done so far accounts for the vertically scrollable element (scroll-top-bottom &amp;amp; scroll-bottom-top), but what about horizontally scrollable elements (scroll-left-right &amp;amp; scroll-right-left)?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We'll have to pair the condition with the browser width using :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(window.innerWidth || document.documentElement.clientWidth) 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So we'll have something that looks like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(right &amp;gt; 0 &amp;amp;&amp;amp; right &amp;lt;= width)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#browser-compatibility" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRect#browser_compatibility"&gt;Browser Compatibility&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SYpLdQjz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhbaepxny9rbraswiu76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SYpLdQjz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhbaepxny9rbraswiu76.png" alt="Browser Compatibility of getBoundingClientRect()"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it and we've come to the end of this tutorial. I hope you found it useful. If you'd like to revisit/keep this post for reference, please, do bookmark and leave a like/unicorn 🙂. Let me know what you think in the comment/discussion section below (improvements, your thoughts, etc). Cheers 🥂.&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding Docker: part 31 – Volumes</title>
      <author>Aurélie Vache</author>
      <pubDate>Tue, 16 Feb 2021 21:19:21 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-part-31-volumes-5f39</link>
      <guid>https://dev.to/aurelievache/understanding-docker-part-31-volumes-5f39</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker. I think it could be a good way, more visual, to explain Docker (and other technologies like Kubernetes and Istio).&lt;/p&gt;

&lt;p&gt;We continue the series of Docker sketchnotes with a focus about volumes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgaEo-B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/74natm8gxronya1e029w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgaEo-B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/74natm8gxronya1e029w.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BC0oMJum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/euuj9r7l4yd9brrl1tyh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BC0oMJum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/euuj9r7l4yd9brrl1tyh.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9QDMBiwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qlh3attzhtixtf4el745.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9QDMBiwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qlh3attzhtixtf4el745.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9abk0zKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8x3nvw4n67y3ief433y8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9abk0zKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8x3nvw4n67y3ief433y8.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Docker (and new ones!) to make a "book" of 93 pages: &lt;a href="https://gumroad.com/aurelievache#YTLzM"&gt;"Understanding Docker in a visual way"&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How to convert any website/webpage into an installable progressive web app (PWA)</title>
      <author>Shashwat verma</author>
      <pubDate>Tue, 16 Feb 2021 19:44:38 +0000</pubDate>
      <link>https://dev.to/zippytyro/how-to-convert-any-website-webpage-into-an-installable-progressive-web-app-pwa-59ai</link>
      <guid>https://dev.to/zippytyro/how-to-convert-any-website-webpage-into-an-installable-progressive-web-app-pwa-59ai</guid>
      <description>&lt;p&gt;Hi there!&lt;br&gt;
Thinking about how to convert any website/webpage to an &lt;strong&gt;installable progressive web app&lt;/strong&gt;? read on.&lt;/p&gt;

&lt;p&gt;In this tutorial, we are going to convert an HTML5 based game into an installable web application, which can be installed on Android or iOS devices.&lt;/p&gt;

&lt;p&gt;Made this classic &lt;a href="https://simons-game.now.sh/"&gt;simon game,&lt;/a&gt; which is really simple in nature but quite addictive. You can &lt;a href="https://github.com/zippytyro/Simon-game"&gt;fork&lt;/a&gt; this repository to make it your own or suggest any further improvements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3sEYuCVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/le1898nzynyo1lgtm3qf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sEYuCVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/le1898nzynyo1lgtm3qf.jpg" alt="Simon-game PWA screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-a-pwa" class="anchor"&gt;
  &lt;/a&gt;
  What is a PWA?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A progressive web app (PWA) is the set of mobile web application development techniques that entails building apps that feel and look like native ones. Using a web stack (JS, HTML, and CSS), progressive web apps combine rich functionality and a smooth user experience associated with native apps. Simply put, PWA is the web app with the native-app flavor: After the installation, a user clicks on its icon on a device's home screen and gets straight to the website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the best features of PWA's is that it is installable on user's devices like native apps, and work in offline mode too.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#steps-to-take-" class="anchor"&gt;
  &lt;/a&gt;
  Steps to take -
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a service worker file.&lt;/li&gt;
&lt;li&gt;Update the main document to check if the functionality is supported.&lt;/li&gt;
&lt;li&gt;Create manifest.json for app metadata.&lt;/li&gt;
&lt;li&gt;Use Chrome dev tools to debug the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#1-service-worker" class="anchor"&gt;
  &lt;/a&gt;
  1. Service worker
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;service-worker.js&lt;/code&gt; file in the root directory of the project, it is important to put it in the root directory to help us store static content in cache storage. You can almost store any kind of media in cache storage like mp3, mp4, video maybe? and obviously the static file HTML, CSS, and JS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Installing service worker&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CACHE_NAME&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Simon-game&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Add relative URL of all the static content you want to store in
 * cache storage (this will help us use our app offline)*/&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;resourcesToCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./img/game.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./game.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CACHE_NAME&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resourcesToCache&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: change the &lt;code&gt;CACHE_NAME&lt;/code&gt; const to your own app's name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add two more event listeners -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Cache and return requests&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Update a service worker&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cacheWhitelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Simon-game&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheNames&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;cacheNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheWhitelist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: Replace the &lt;code&gt;cacheWhiteList&lt;/code&gt; variable with your own app's name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-check-for-availability-update-indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  2. Check for availability (update index.html)
&lt;/h3&gt;

&lt;p&gt;In the case of a static website, update the main HTML document to check for the availability of service workers, and register our app using the &lt;code&gt;service-worker.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serviceWorker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/service-worker.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Service worker is not supported&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-create-manifestjson-file" class="anchor"&gt;
  &lt;/a&gt;
  3. Create manifest.json file
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;manifest.json&lt;/code&gt; file, we need to link that to our main HTML document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"manifest.json"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, this file contains metadata about our app, like App name, icons reference, URL to open on the opening of the app, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Simon Game"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"short_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Simon Game"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"background_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFDCB5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#1E003D"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"img/512.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"maskable any"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"img/192.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"192x192"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"maskable any"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"orientation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"portrait"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Copy/paste the above code in the manifest and change your app details. You can reference a single icon or use icons of multiple sizes, as devices differ in screen sizes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-use-dev-tools-to-debug" class="anchor"&gt;
  &lt;/a&gt;
  4. Use dev tools to debug
&lt;/h3&gt;

&lt;p&gt;Now open the chrome dev tool (&lt;code&gt;ctrl+shirt+i&lt;/code&gt;) and click on the applications tab to check if the service worker and manifest file are detected by the browser.&lt;br&gt;
As you can see below the logo and name of the app are shown. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--npFbEh0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/34z8tr2ryyo31686iygm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--npFbEh0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/34z8tr2ryyo31686iygm.PNG" alt="Dev tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;background_color&lt;/code&gt; property sets the splash screen color and &lt;code&gt;theme_color&lt;/code&gt; the notification bar.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1nVbqsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rievmmshxb9i1n33f0gr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1nVbqsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rievmmshxb9i1n33f0gr.jpg" alt="Splash screen simon-game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check if your app meets the standard for PWA, in the lighthouse tab and click generate the report.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RBssbw0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/37dp1pwumgocpd5kt9bd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBssbw0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/37dp1pwumgocpd5kt9bd.PNG" alt="Lighthouse tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will also help you to add things that you might forget like adding this line for iPhone/Apple users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"img/game.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZDzqi_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cp6qlpmo3cxij7pmys6i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZDzqi_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cp6qlpmo3cxij7pmys6i.PNG" alt="PWA compatible"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BOOM, we are done! You have successfully converted a website/game into a PWA.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install-on-devices" class="anchor"&gt;
  &lt;/a&gt;
  How to install on devices?
&lt;/h3&gt;

&lt;p&gt;On chrome, you'll have this small add icon on the URL bar, which prompts you to install the app on your device.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whFuCBqC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hdf24jzpaz0qmfjwvueb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whFuCBqC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hdf24jzpaz0qmfjwvueb.PNG" alt="Install icon on URL bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On mobile devices, you'll get a prompt (Chrome)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RC4JukZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l8goowq3i6yo382w845z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RC4JukZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l8goowq3i6yo382w845z.PNG" alt="Install prompt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If not then click on the 3 dots in the top right corner, an "Install app" option appears.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jsrSqi3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfz9631sfrc1ywng02hg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jsrSqi3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfz9631sfrc1ywng02hg.jpg" alt="3 dot menu on chrome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it helped. Give a like :)&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Shashwat&lt;/p&gt;

</description>
      <category>pwa</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>webapp</category>
    </item>
    <item>
      <title>Web Application Security Checklist (2021)</title>
      <author>Teo Selenius</author>
      <pubDate>Tue, 16 Feb 2021 19:10:59 +0000</pubDate>
      <link>https://dev.to/appsecmonkey/web-application-security-checklist-2021-5266</link>
      <guid>https://dev.to/appsecmonkey/web-application-security-checklist-2021-5266</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;It's scary out there for developers! One mistake in the code, one vulnerability in a dependency, one compromised developer workstation, and your database is in Pastebin and you're on the news.&lt;/p&gt;

&lt;p&gt;So where to look for guidance? &lt;a href="https://owasp.org/www-project-top-ten/"&gt;OWASP's top 10 list&lt;/a&gt; is just too short and focuses more on listing vulnerabilities than defenses. Whereas the &lt;a href="https://owasp.org/www-project-application-security-verification-standard/"&gt;ASVS&lt;/a&gt; list is rather cryptic and vague for practical purposes.&lt;/p&gt;

&lt;p&gt;This article is an attempt at the golden mean. We'll go through some practical steps that you can take to secure your web application from all angles. Let's begin!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-the-browser-side"&gt;Defending Threats On The Browser Side&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#use-https-and-only-https-to-protect-your-users-from-network-attacks"&gt;Use HTTPS and only HTTPS to protect your users from network attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-hsts-and-preloading-to-protect-your-users-from-ssl-stripping-attacks"&gt;Use HSTS and preloading to protect your users from SSL stripping attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-cookies-with-the-secure-attribute-to-protect-your-user-from-network-attacks"&gt;Serve cookies with the 'Secure' attribute to protect your user from network attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#generate-html-safely-to-avoid-xss-vulnerabilities"&gt;Generate HTML safely to avoid XSS vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-javascript-safely-to-avoid-xss-vulnerabilities"&gt;Use JavaScript safely to avoid XSS vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sanitize-and-sandbox-untrusted-content-to-avoid-xss-vulnerabilities"&gt;Sanitize and sandbox untrusted content to avoid XSS vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#implement-an-effective-content-security-policy-to-protect-your-users-from-xss-and-other-vulnerabilities"&gt;Implement an effective Content Security Policy to protect your users from XSS and other vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-cookies-with-the-httponly-attribute-to-protect-them-from-xss-attacks"&gt;Serve cookies with the HttpOnly attribute to protect them from XSS attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-downloads-with-a-proper-content-disposition-header-to-avoid-xss-vulnerabilities"&gt;Serve downloads with a proper Content-Disposition header to avoid XSS vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-api-responses-with-a-proper-content-disposition-header-to-avoid-reflected-download-vulnerabilities"&gt;Serve API responses with a proper Content-Disposition header to avoid reflected download vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-your-platforms-anti-csrf-mechanism-to-avoid-csrf-vulnerabilities"&gt;Use your platform's anti-CSRF mechanism to avoid CSRF vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#validate-the-oauthoidc-state-parameter-to-avoid-csrf-vulnerabilities"&gt;Validate the OAuth/OIDC state parameter to avoid CSRF vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-http-verbs-properly-to-avoid-csrf-vulnerabilities"&gt;Use HTTP verbs properly to avoid CSRF vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-cookies-with-the-samesite-attribute-to-protect-your-users-from-csrf-vulnerabilities-and-optionally-defend-xss-as-well"&gt;Serve cookies with the SameSite attribute to protect your users from CSRF vulnerabilities and optionally defend XSS as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-fresh-session-id-on-login-to-protect-against-session-fixation-attacks"&gt;Create a fresh session ID on login to protect against session fixation attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#name-your-cookies-right-to-protect-against-session-fixation-attacks"&gt;Name your cookies right to protect against session fixation attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-proper-cache-control-headers-to-protect-your-users-data-from-subsequent-computer-users"&gt;Serve proper Cache-Control headers to protect your user's data from subsequent computer users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-serve-a-clear-site-data-header-upon-log-out-to-protect-your-users-data-from-subsequent-computer-users"&gt;Serve a Clear-Site-Data header upon log out to protect your user's data from subsequent computer users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#log-your-users-out-properly-to-protect-their-data-from-subsequent-computer-users"&gt;Log your users out properly to protect their data from subsequent computer users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-sessionstorage-for-javascript-secrets-to-protect-your-users-data-from-subsequent-computer-users"&gt;Use SessionStorage for JavaScript secrets to protect your user's data from subsequent computer users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-transmit-sensitive-data-in-the-url-because-urls-are-not-designed-to-be-secret"&gt;Don't transmit sensitive data in the URL because URLs are not designed to be secret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-use-a-referrer-policy-to-prevent-url-addresses-from-leaking-to-other-websites"&gt;Use a referrer policy to prevent URL addresses from leaking to other websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-a-unique-domain-name-for-your-application-to-protect-it-from-other-applications-under-the-same-origin-and-vice-versa"&gt;Use a unique domain name for your application to protect it from other applications under the same origin (and vice versa)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-use-cors-unless-you-have-to-and-if-you-have-to-be-careful-with-it"&gt;Don't use CORS unless you have to, and if you have to, be careful with it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-websockets-properly-to-avoid-csrf-and-other-vulnerabilities"&gt;Use WebSockets properly to avoid CSRF and other vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-u2f-tokens-or-client-certificates-to-protect-your-critical-users-from-phishing-attacks"&gt;Use U2F tokens or client certificates to protect your critical users from phishing attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---application"&gt;Defending Threats On Server Side - Application&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#validate-input-properly-to-protect-your-application-from-so-many-vulnerabilities"&gt;Validate input properly to protect your application from... so many vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#catch-exceptions-gracefully-to-avoid-leaking-technical-details"&gt;Catch exceptions gracefully to avoid leaking technical details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-do-authentication-yourself"&gt;Don't do authentication yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authenticate-everything-to-reduce-the-attack-surface"&gt;Authenticate everything to reduce the attack surface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-mfa-in-your-application-to-break-the-trust-relationship-to-the-identity-provider"&gt;Use MFA in your application to break the trust relationship to the identity provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-strict-access-controls-to-prevent-unauthorized-access-to-data-or-functionality"&gt;Use strict access controls to prevent unauthorized access to data or functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-proper-tools-and-techniques-to-avoid-injection-vulnerabilities"&gt;Use proper tools and techniques to avoid injection vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#construct-database-queries-safely-to-avoid-sql-injection-vulnerabilities"&gt;Construct database queries safely to avoid SQL injection vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-you-must-run-os-commands-do-it-right-to-avoid-command-injection-and-related-vulnerabilities"&gt;If you must run OS commands, do it right to avoid command injection and related vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avoid-xml-vulnerabilities-by-configuring-your-parsers-properly"&gt;Avoid XML vulnerabilities by configuring your parsers properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avoid-url-injection-vulnerabilities-by-using-proper-class-for-url-construction"&gt;Avoid URL injection vulnerabilities by using proper class for URL construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avoid-path-traversal-vulnerabilities-by-using-a-proper-class-to-construct-the-paths"&gt;Avoid path traversal vulnerabilities by using a proper class to construct the paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-use-the-filesystem-for-untrusted-content-eg-uploads-if-you-can-avoid-it"&gt;Don't use the filesystem for untrusted content (e.g. uploads) if you can avoid it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-execute-dynamic-code-to-avoid-remote-code-execution-vulnerabilities"&gt;Don't execute dynamic code to avoid remote code execution vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-serialization-carefully-to-avoid-deserialization-vulnerabilities"&gt;Use serialization carefully to avoid deserialization vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---infrastructure"&gt;Defending Threats On Server Side - Infrastructure&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#use-a-waf"&gt;Use a WAF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configure-your-web-server-carefully-to-avoid-http-desync-attacks"&gt;Configure your web server carefully to avoid HTTP desync attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-containers"&gt;Use containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-selinuxapparmor"&gt;Use SELinux/AppArmor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-service-accounts-with-minimum-privileges"&gt;Use service accounts with minimum privileges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#restrict-egress-network-connections"&gt;Restrict egress network connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keep-track-of-your-dns-records-to-prevent-subdomain-takeovers"&gt;Keep track of your DNS records to prevent subdomain takeovers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---architecture"&gt;Defending Threats On Server Side - Architecture&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-an-internal-api-for-accessing-data-sources-to-get-rid-of-dangerous-trust-boundaries"&gt;Create an internal API for accessing data sources to get rid of dangerous trust boundaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encrypt-and-authenticate-all-connections"&gt;Encrypt and authenticate all connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manage-secrets-centrally"&gt;Manage secrets centrally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---monitoring"&gt;Defending Threats On Server Side - Monitoring&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#collect-analyze-alert"&gt;Collect, analyze, alert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-application-security-events"&gt;Collect application security events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-runtime-security-logs"&gt;Collect runtime security logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-selinuxapparmor-logs"&gt;Collect SELinux/AppArmor logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-webserver-events"&gt;Collect webserver events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-waf-logs"&gt;Collect WAF logs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---incident-response"&gt;Defending Threats On Server Side - Incident Response&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#have-a-plan"&gt;Have a plan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#secure-development-considerations"&gt;Secure Development Considerations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#threat-model"&gt;Threat model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#force-peer-review-in-source-control"&gt;Force peer review in source control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automate-the-ci-pipeline-and-restrict-mere-mortal-access-to-it"&gt;Automate the CI pipeline and restrict mere mortal access to it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sign-the-build-artifacts"&gt;Sign the build artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-a-static-application-security-scanner-as-part-of-the-ci-pipeline"&gt;Run a static application security scanner as part of the CI pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verify-dependencies-on-build-and-keep-them-at-a-minimum"&gt;Verify dependencies on build and keep them at a minimum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-a-dependency-security-scanner-as-part-of-the-ci-pipeline"&gt;Run a dependency security scanner as part of the CI pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-a-container-image-security-scanner-as-part-of-the-ci-pipeline"&gt;Run a container image security scanner as part of the CI pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automate-deployments-and-validate-signatures"&gt;Automate deployments and validate signatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#have-a-security-champion"&gt;Have a security champion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-the-browser-side" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On The Browser Side
&lt;/h2&gt;

&lt;p&gt;There are a couple of threats on the end user's side that you as a developer can help mitigate. They include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attacks through malicious websites/links in the user's browser.&lt;/li&gt;
&lt;li&gt;Attacks on the user's local network.&lt;/li&gt;
&lt;li&gt;Attacks where someone accesses a shared web browser before or after the user (for example if sensitive information is left in the browser cache then subsequent computer users will be able to retrieve it even if the previous user has logged out).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#use-https-and-only-https-to-protect-your-users-from-network-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use HTTPS and only HTTPS to protect your users from network attacks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-eNzeRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixaiyyw75i5dq7rg3biy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-eNzeRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixaiyyw75i5dq7rg3biy.png" alt="https"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one you probably already knew. Encrypt &lt;strong&gt;all&lt;/strong&gt; connections between your user's web browser and your web server. Doesn't hurt to also disable some of the older cipher suites and protocols.&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;not&lt;/strong&gt; enough to encrypt the "sensitive" portions of a website. A single unencrypted HTTP request anywhere under the &lt;em&gt;domain&lt;/em&gt; can be intercepted by an attacker on the network, who can then forge a response from the server with malicious content in it.&lt;/p&gt;

&lt;p&gt;Luckily HTTPS is easy these days, you can get both the certificate (LetsEncrypt) and tools for automatic certificate creation/management (CertBot) free of charge.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ssl.com/guide/ssl-best-practices/"&gt;SSL/TLS Best Practices for 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://letsencrypt.org/"&gt;LetsEncrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://certbot.eff.org/"&gt;CertBot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-hsts-and-preloading-to-protect-your-users-from-ssl-stripping-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use HSTS and preloading to protect your users from SSL stripping attacks
&lt;/h3&gt;

&lt;p&gt;HSTS or &lt;code&gt;Strict-Transport-Security&lt;/code&gt; is a header that can be used to tell web browsers that &lt;em&gt;from here on always use an encrypted connection (HTTPS) when connecting to this domain&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This will prevent so-called &lt;em&gt;SSL stripping&lt;/em&gt; attacks where an attacker on the network intercepts the very first HTTP request made by a browser (which is often unencrypted), and forges a reply to that unencrypted HTTP request right away, pretending to be the server and downgrading the connection to intercepted plaintext HTTP from then on.&lt;/p&gt;

&lt;p&gt;One caveat is that HSTS will only protect an application if the user has already successfully visited it before. To overcome this limitation you should submit your site to &lt;a href="https://hstspreload.org"&gt;https://hstspreload.org&lt;/a&gt; so browser vendors can hard code your domain to the HSTS list.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Strict-Transport-Security&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;max-age=63072000; includeSubDomains; preload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#warning" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-exclamation-triangle"&gt;&lt;/i&gt; Warning
&lt;/h4&gt;

&lt;p&gt;Be mindful when implementing HSTS. It &lt;em&gt;will&lt;/em&gt; force encrypted traffic to your website and if you still have plain text your website could break. So start with a small &lt;code&gt;max-age&lt;/code&gt; and ramp it up once you're confident that everything still functions properly. And leave preloading as the last step because it's painful to cancel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hstspreload.org"&gt;hstspreload.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.kali.org/information-gathering/sslstrip"&gt;sslstrip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-cookies-with-the-secure-attribute-to-protect-your-user-from-network-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve cookies with the 'Secure' attribute to protect your user from network attacks
&lt;/h3&gt;

&lt;p&gt;Configure your cookies with the &lt;code&gt;Secure&lt;/code&gt; attribute. This will prevent them from being leaked over an (accidental or forced) unencrypted connection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo=bar; ...other options... Secure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies"&gt;Secure Cookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#generate-html-safely-to-avoid-xss-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Generate HTML safely to avoid XSS vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To avoid XSS (Cross-Site Scripting) vulnerabilities, use one of the following: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Completely static websites (e.g. JavaScript SPA + backend API). The most effective way to avoid problems with generating HTML is not to generate HTML at all.&lt;/li&gt;
&lt;li&gt;A template engine. If you have a traditional web application where HTML is generated and parameterized on the backend server, &lt;strong&gt;do not&lt;/strong&gt; craft HTML through string concatenation. Instead use a template engine such as &lt;code&gt;Twig&lt;/code&gt; for PHP, &lt;code&gt;Thymeleaf&lt;/code&gt; for Java, &lt;code&gt;Jinja2&lt;/code&gt; for Python, and so on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you use a template engine, ensure it's configured correctly to automatically encode parameters properly, and don't use any "insecure" functions that bypass the automatic encoding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twigphp/Twig"&gt;Twig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thymeleaf.org/"&gt;Thymeleaf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jinja2docs.readthedocs.io/en/stable/"&gt;Jinja2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-javascript-safely-to-avoid-xss-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use JavaScript safely to avoid XSS vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To avoid XSS (Cross-Site Scripting) vulnerabilities on the JavaScript side, don't pass any untrusted data into functions or properties that could end up executing code. You have to use common sense here but some of the usual suspects are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;innerHTML&lt;/code&gt;, React's &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onClick&lt;/code&gt;, &lt;code&gt;onMouseEnter&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;href&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;location&lt;/code&gt;, &lt;code&gt;location.href&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://portswigger.net/web-security/cross-site-scripting/dom-based"&gt;DOM-based XSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#sanitize-and-sandbox-untrusted-content-to-avoid-xss-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Sanitize and sandbox untrusted content to avoid XSS vulnerabilities
&lt;/h3&gt;

&lt;p&gt;It's best to just avoid untrusted content. But sometimes you have to retrieve raw HTML from e.g. a remote source and then render it on your website. Or maybe you have to allow your users to write posts with a WYSIWYG editor. There are many use cases.&lt;/p&gt;

&lt;p&gt;To avoid XSS (Cross-Site Scripting) vulnerabilities in these scenarios, sanitize the content first with &lt;code&gt;DOMPurify&lt;/code&gt; and then render it inside a sandboxed frame.&lt;/p&gt;

&lt;p&gt;Even if your WYSIWYG library claims to remove evilness from the HTML, you can break this trust relationship &lt;em&gt;"I trust my WYSIWYG library to sanitize the content"&lt;/em&gt; by re-purifying and sandboxing the content nevertheless. The more trust relationships you break the more secure your application gets.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cure53/DOMPurify"&gt;DOMPurify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox"&gt;Sandboxed Frames&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implement-an-effective-content-security-policy-to-protect-your-users-from-xss-and-other-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Implement an effective Content Security Policy to protect your users from XSS and other vulnerabilities
&lt;/h3&gt;

&lt;p&gt;A Content Security Policy (CSP) serves as excellent protection against XSS (Cross-Site Scripting) attacks. It also protects against clickjacking attacks among other things.&lt;/p&gt;

&lt;p&gt;So make sure to use it! CSP by default prevents pretty much everything so the fewer things you put in it the better. For example, the following is a good policy to start with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Content-Security-Policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default-src 'self'; form-action 'self'; object-src 'none'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It allows loading scripts, styles, images, fonts, etc. from the web application's origin but nothing else. Most notably it will prevent inline scripts (&lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt;), which makes exploiting XSS vulnerabilities difficult.&lt;/p&gt;

&lt;p&gt;Additionally, the &lt;code&gt;form-action: 'self'&lt;/code&gt; directive prevents creating malicious HTML forms on the website (think "Your session has expired please enter your password here") and submitting them to the attacker's server.&lt;/p&gt;

&lt;p&gt;Whatever you do, do not specify  &lt;strong&gt;script-src: unsafe-inline&lt;/strong&gt; because then your CSP will lose its mojo.&lt;/p&gt;

&lt;p&gt;And finally, if you have concerns about CSP breaking something in production you can first deploy in &lt;code&gt;Report-Only&lt;/code&gt; mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Content-Security-Policy-Report-Only&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default-src 'self'; form-action 'self'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Clickjacking"&gt;Clickjacking Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-cookies-with-the-httponly-attribute-to-protect-them-from-xss-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve cookies with the HttpOnly attribute to protect them from XSS attacks
&lt;/h3&gt;

&lt;p&gt;Configure your cookies with the &lt;code&gt;HttpOnly&lt;/code&gt; attribute. This will prevent them from being accessed by JavaScript code, which in turn makes them harder for an attacker to steal in the event of a successful XSS (Cross-Site Scripting) attack. Of course for the cookies that need to be accessed by JavaScript, you cannot do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo=bar; ...other options... HttpOnly&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies"&gt;HttpOnly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-downloads-with-a-proper-contentdisposition-header-to-avoid-xss-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve downloads with a proper Content-Disposition header to avoid XSS vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To avoid XSS (Cross-Site Scripting) vulnerabilities when serving downloads to your users, send them with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition"&gt;Content-Disposition&lt;/a&gt; header that indicates an attachment. This way the file won't render in the end user's browser directly, which could result in an XSS vulnerability in the case of e.g. HTML or SVG files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Content-Disposition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;attachment; filename="document.pdf"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you &lt;em&gt;want&lt;/em&gt; some specific files to open in the browser (like perhaps PDF documents for usability reasons), and you know that it's safe to do so, you can omit the header or change &lt;code&gt;attachment&lt;/code&gt; to &lt;code&gt;inline&lt;/code&gt; for that particular file extension/extensions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition"&gt;Content-Disposition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-api-responses-with-a-proper-contentdisposition-header-to-avoid-reflected-download-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve API responses with a proper Content-Disposition header to avoid reflected download vulnerabilities
&lt;/h3&gt;

&lt;p&gt;There is an attack called reflected file download (RFD) which works by crafting an URL that downloads as a malicious file extension from your API, reflecting a malicious payload inside it.&lt;/p&gt;

&lt;p&gt;You can prevent this attack by returning a &lt;code&gt;Content-Disposition&lt;/code&gt; header with a safe &lt;code&gt;filename&lt;/code&gt; in your API HTTP responses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Content-Disposition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;attachment; filename="api.json"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@Johne_Jacob/rfd-reflected-file-download-what-how-6d0e6fdbe331"&gt;Reflected File Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition"&gt;Content-Disposition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-your-platforms-anticsrf-mechanism-to-avoid-csrf-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use your platform's anti-CSRF mechanism to avoid CSRF vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To protect against &lt;a href="https://owasp.org/www-community/attacks/csrf"&gt;Cross-Site Request Forgery&lt;/a&gt; (CSRF) vulnerabilities, ensure that your platform's anti-CSRF mechanism is enabled and working as intended.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/csrf-attack-and-prevention/"&gt;CSRF Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#validate-the-oauthoidc-state-parameter-to-avoid-csrf-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Validate the OAuth/OIDC state parameter to avoid CSRF vulnerabilities
&lt;/h3&gt;

&lt;p&gt;There is a kind of CSRF attack related to OAuth/OIDC where the attacker unwittingly logs the user in with the attacker's account. If you are using OAuth/OIDC, avoid this by ensuring that you are using a properly configured and reliable software library for handling the authentication flow so that the &lt;code&gt;state&lt;/code&gt; parameter gets validated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc6819#section-4.4.2.5"&gt;state CSRF in OAuth threat model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-http-verbs-properly-to-avoid-csrf-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use HTTP verbs properly to avoid CSRF vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Never use anything except for &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; for making &lt;em&gt;any&lt;/em&gt; changes. &lt;code&gt;GET&lt;/code&gt; requests for example are usually not covered by anti-CSRF mechanisms.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/csrf-attack-and-prevention/"&gt;CSRF Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-cookies-with-the-samesite-attribute-to-protect-your-users-from-csrf-vulnerabilities-and-optionally-defend-xss-as-well" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve cookies with the SameSite attribute to protect your users from CSRF vulnerabilities and optionally defend XSS as well
&lt;/h3&gt;

&lt;p&gt;Configure your cookies with the &lt;code&gt;SameSite&lt;/code&gt; attribute. This will prevent most CSRF (Cross-Site Request Forgery) vulnerabilities, where a malicious website submits e.g. a form on behalf of your unwitting user, from being successfully exploited by an attacker. There are two modes, &lt;code&gt;Lax&lt;/code&gt; and &lt;code&gt;Strict&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Lax&lt;/code&gt; mode (with the exception of Lax+Post mitigation, see link below) is just fine for preventing most CSRF attacks, except GET-based CSRF vulnerabilities where you make the mistake of making changes (e.g. modifying some database record) in a GET request handler. The &lt;code&gt;Strict&lt;/code&gt; mode prevents that sort of blunders from being exploited as well.&lt;/p&gt;

&lt;p&gt;However the &lt;code&gt;Strict&lt;/code&gt; mode has another powerful side effect, it makes reflected XSS (Cross-Site Scripting) vulnerabilities practically impossible to exploit as well.&lt;/p&gt;

&lt;p&gt;With that said, the &lt;code&gt;Strict&lt;/code&gt; mode is not well suited for most applications because it breaks authenticated links, that is, if your user is logged in and opens a link on another website to the application then in the tab/window that opens the user will not be logged in (because the session cookie was not sent along with the request due to the strict mode).&lt;/p&gt;

&lt;p&gt;But at least implement &lt;code&gt;SameSite&lt;/code&gt; in &lt;code&gt;Lax&lt;/code&gt; mode, there's no harm in doing that and it serves as a fantastic safeguard in case a CSRF vulnerability creeps into your codebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo=bar; ...other options... SameSite=Lax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...or:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo=bar; ...other options... SameSite=Strict&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/csrf-attack-and-prevention/"&gt;CSRF Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite"&gt;SameSite cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chromium.org/updates/same-site/faq"&gt;Lax + Post mitigation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#create-a-fresh-session-id-on-login-to-protect-against-session-fixation-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Create a fresh session ID on login to protect against session fixation attacks
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An attacker sneaks a cookie, say, &lt;code&gt;JSESSIONID=ABC123&lt;/code&gt; into your user's browser. There are many ways the attacker can go about this.&lt;/li&gt;
&lt;li&gt;Your user logs in with their credentials, submitting the attacker's chosen &lt;code&gt;JSESSIONID=ABC123&lt;/code&gt; cookie in the login request.&lt;/li&gt;
&lt;li&gt;Your application authenticates the cookie, and the user will be logged on from that point onwards.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The attacker who also has the cookie, is also logged on as the user from that point onwards&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So to prevent this, create a fresh, authenticated session ID and return that to the user, instead of authenticating the existing cookie which might have been compromised.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Session_fixation"&gt;Session Fixation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#name-your-cookies-right-to-protect-against-session-fixation-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Name your cookies right to protect against session fixation attacks
&lt;/h3&gt;

&lt;p&gt;This is not very widely known, but when it comes to cookies, name matters! Name your cookies &lt;code&gt;__Host-Something&lt;/code&gt; and web browsers will...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not allow for the cookie to be set over an unencrypted connection which protects against session fixation attacks and other threats related to an attacker forcing a cookie into the user's browser.&lt;/li&gt;
&lt;li&gt;Not allow for subdomains to overwrite the cookie, which protects against similar attacks from compromised/malicious subdomains.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;__Host-foo=bar ...options...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#cookie_prefixes"&gt;Cookie Prefixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Session_fixation"&gt;Session Fixation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-proper-cachecontrol-headers-to-protect-your-users-data-from-subsequent-computer-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve proper Cache-Control headers to protect your user's data from subsequent computer users
&lt;/h3&gt;

&lt;p&gt;By default web browsers cache everything they see to speed up page loads and save network bandwidth.&lt;/p&gt;

&lt;p&gt;Caching is a synonym for &lt;em&gt;storing visited websites and downloaded files on disk unencrypted until someone manually deletes them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Your application users should be able to trust that once they hit "log out" then subsequent computer users will no longer be able to access their information (think shared library computers, friend's pc, etc).&lt;/p&gt;

&lt;p&gt;For this reason, there is a header called &lt;code&gt;Cache-Control&lt;/code&gt; which you should return appropriately in all HTTP responses that contain non-public/non-static content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Cache-Control&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;no-store, max-age=0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control"&gt;Cache-Control&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-a-clearsitedata-header-upon-log-out-to-protect-your-users-data-from-subsequent-computer-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt;  Serve a Clear-Site-Data header upon log out to protect your user's data from subsequent computer users
&lt;/h3&gt;

&lt;p&gt;Another useful header for ensuring that user data is cleared upon logout is the new &lt;code&gt;Clear-Site-Data&lt;/code&gt; header. You can send it in an HTTP response when the user logs out, and the browser will clear the cache, cookies, storage, and execution contexts (JavaScript variables, etc. probably by refreshing all relevant tabs, this has not yet been implemented at the time of this writing) for the domain. Most browsers support it, Safari notably still doesn't.&lt;/p&gt;

&lt;p&gt;You can send it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Clear-Site-Data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Clear-Site-Data"&gt;Clear-Site-Data&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#log-your-users-out-properly-to-protect-their-data-from-subsequent-computer-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Log your users out properly to protect their data from subsequent computer users
&lt;/h3&gt;

&lt;p&gt;Ensure that logging out invalidates the access token/session identifier so that when it later leaks to an attacker from browsing history/cache/memory/etc. it will no longer be usable.&lt;/p&gt;

&lt;p&gt;Additionally, if there is an SSO then don't forget to call the single logout endpoint properly, otherwise logging out would be in vain since merely clicking the "log in" button would automatically log the user back in as the SSO session is still active.&lt;/p&gt;

&lt;p&gt;Finally clear any cookies, HTML5 storage, etc. that you might have stored the user's information in. The &lt;code&gt;Clear-Site-Data&lt;/code&gt; mentioned above is not yet supported by Safari for example so you will have to clear the data manually as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-sessionstorage-for-javascript-secrets-to-protect-your-users-data-from-subsequent-computer-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use SessionStorage for JavaScript secrets to protect your user's data from subsequent computer users
&lt;/h3&gt;

&lt;p&gt;It's like LocalStorage but unique for each tab and clears after the browser/tab is closed. So there's a chance of user data leaking to the next computer user.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
If you want to have your user be authenticated in multiple tabs of your application without having to log in again, you will have to use events to sync the sessionStorage between the tabs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"&gt;Session Storage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dont-transmit-sensitive-data-in-the-url-because-urls-are-not-designed-to-be-secret" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't transmit sensitive data in the URL because URLs are not designed to be secret
&lt;/h3&gt;

&lt;p&gt;URL addresses are not designed to be secret. They are for example displayed on the screen, saved to browsing history, leaked with referrer-headers, and saved on server logs. So don't put secrets in there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-referrer-policy-to-prevent-url-addresses-from-leaking-to-other-websites" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt;  Use a referrer policy to prevent URL addresses from leaking to other websites
&lt;/h3&gt;

&lt;p&gt;By default when you link to a website from your application, and a user clicks the link, web browsers will send a &lt;code&gt;Referrer&lt;/code&gt; header along with the request to tell the website which website linked to it. This header includes the entire URL which can be a privacy issue at the least.&lt;/p&gt;

&lt;p&gt;You can disable this behavior by specifying a &lt;code&gt;Referrer-Policy&lt;/code&gt; header in your HTTP responses:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Referrer-Policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;no-referrer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"&gt;Referrer-Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-a-unique-domain-name-for-your-application-to-protect-it-from-other-applications-under-the-same-origin-and-vice-versa" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use a unique domain name for your application to protect it from other applications under the same origin (and vice versa)
&lt;/h3&gt;

&lt;p&gt;It is dangerous to host applications like this: &lt;code&gt;https://www.example.com/app1/&lt;/code&gt; and &lt;code&gt;https://www.example.com/app2/&lt;/code&gt;. This is because browsers consider both of them to be of the same &lt;code&gt;origin&lt;/code&gt; (same host, port, and scheme), which means that they will have full access to each other and as such any vulnerabilities/malicious content affecting app1 would then also put app2 into danger.&lt;/p&gt;

&lt;p&gt;For this reason, give each application an origin of their own. So the solution could be &lt;code&gt;https://app1.example.com/&lt;/code&gt; and &lt;code&gt;https://app2.example.com/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
 Subdomains that share a parent can still &lt;em&gt;set&lt;/em&gt; cookies for the entire domain. For example, &lt;code&gt;app1.example.com&lt;/code&gt; can set a cookie on &lt;code&gt;example.com&lt;/code&gt; which will then also be sent to &lt;code&gt;app2.example.com&lt;/code&gt;. This can make certain session fixation vulnerabilities possible.&lt;/p&gt;

&lt;p&gt;And if you are now wondering if all applications under &lt;em&gt;.herokuapp.com are vulnerable, the answer is no because of the public suffix list. Also, cookies can be protected from getting overwritten by subdomains by naming your cookies `__Host-&lt;/em&gt;`. This mechanism is described later in this article.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;Same Origin Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#cookie_prefixes"&gt;Cookie Prefixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Session_fixation"&gt;Session Fixation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://publicsuffix.org/learn/"&gt;Public Suffix List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#dont-use-cors-unless-you-have-to-and-if-you-have-to-be-careful-with-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't use CORS unless you have to, and if you have to, be careful with it
&lt;/h3&gt;

&lt;p&gt;The web browser's security model is largely based on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;Same Origin Policy&lt;/a&gt; which prevents &lt;code&gt;evil.example.com&lt;/code&gt; from reading your emails but still allows you to use jQuery from &lt;code&gt;code.jquery.com&lt;/code&gt;. CORS or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross Origin Resource Sharing&lt;/a&gt; is a means by which you can allow another website to violate that policy.&lt;/p&gt;

&lt;p&gt;So if you decide that you need it, make sure you know what you are doing.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#validate-the-origin" class="anchor"&gt;
  &lt;/a&gt;
  Validate the origin
&lt;/h4&gt;

&lt;p&gt;If you have &lt;code&gt;api.example.com&lt;/code&gt; that needs to be accessed by GET requests from &lt;code&gt;www.example.com&lt;/code&gt; then you can specify the following header on &lt;code&gt;api.example.com&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://www.example.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have a public API (let's say a calculator that you want the entire Internet to use from client-side JavaScript) then you can specify a wildcard origin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have multiple domains that you want to allow but not all (say you want to allow only Google and Facebook to access your API) then you will have to read the &lt;code&gt;Origin&lt;/code&gt; header from the request, compare it to a list of allowed domains and then return a header as appropriate. It is recommended to use a well-vetted library for this instead of messing with the headers manually because a lot could go wrong.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-mindful-about-the-allow-credentials-option" class="anchor"&gt;
  &lt;/a&gt;
  Be mindful about the "allow credentials" option
&lt;/h4&gt;

&lt;p&gt;CORS by default does not allow &lt;em&gt;credentialed&lt;/em&gt; requests, that is, requests that carry the user's (session) cookies. But this can be allowed by the webserver by specifying headers such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://www.example.com&lt;/span&gt;
&lt;span class="na"&gt;Access-Control-Allow-Credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is dangerous as it would allow &lt;code&gt;https://www.example.com&lt;/code&gt; to fully access the website that specified the header just as the logged-in user would. So if you have to use it be very careful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#validate-the-method" class="anchor"&gt;
  &lt;/a&gt;
  Validate the method
&lt;/h4&gt;

&lt;p&gt;It's a good practice to minimize the attack surface and only allow the HTTP methods that you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GET&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note" class="anchor"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't need CORS then just don't use it, by default it's not enabled.&lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross-Origin Resource Sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;Same Origin Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-websockets-properly-to-avoid-csrf-and-other-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use WebSockets properly to avoid CSRF and other vulnerabilities
&lt;/h3&gt;

&lt;p&gt;WebSockets are still pretty new, a bit scarcely documented and there are dangers involved when using them. So read the following carefully.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-encrypt-the-connection" class="anchor"&gt;
  &lt;/a&gt;
  1. Encrypt the connection
&lt;/h4&gt;

&lt;p&gt;Just like you should use &lt;code&gt;https://&lt;/code&gt; instead of &lt;code&gt;http://&lt;/code&gt;, use &lt;code&gt;wss://&lt;/code&gt; instead of &lt;code&gt;ws:///&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HSTS also affects WebSockets and will automatically upgrade unencrypted WebSocket connections to &lt;code&gt;wss://&lt;/code&gt;! Hail HSTS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#2-authenticate-the-connection" class="anchor"&gt;
  &lt;/a&gt;
  2. Authenticate the connection
&lt;/h4&gt;

&lt;p&gt;If you use cookie-based authentication and the WebSocket server is on the same domain as the application, you can keep using the existing session for the WebSocket connection as well. &lt;strong&gt;Just heed the next section about origin validation or you will be screwed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If not then you could create a ticket in the application, that is, a single-use, time-limited authentication token bound to the user's IP address that can be used to authenticate the WebSocket connection.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-verify-the-origin-of-the-connection" class="anchor"&gt;
  &lt;/a&gt;
  3. Verify the origin of the connection
&lt;/h4&gt;

&lt;p&gt;A crucial thing to understand about WebSockets is that they are not bound by the Same Origin Policy. This means that any website out there can open a WebSocket connection to your application, and if you use cookie-based authentication, access the logged-in user's information.&lt;/p&gt;

&lt;p&gt;For this reason, you must verify the origin of the connection in the WebSocket handshake. You can do this by validating the &lt;code&gt;Origin&lt;/code&gt; request header.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want double security, throw in a CSRF token as a URL parameter but create a single-use unique token for the job, do not use the CSRF token that you use to secure the rest of the application (because sending something in the URL can leak in many places).&lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/rfc6455/?include_text=1"&gt;WebSockets Specification (check section 10)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-u2f-tokens-or-client-certificates-to-protect-your-critical-users-from-phishing-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use U2F tokens or client certificates to protect your critical users from phishing attacks
&lt;/h3&gt;

&lt;p&gt;If your threat model includes phishing attacks, that is, &lt;strong&gt;"what if an attacker creates a fake website that steals the username, password and the MFA code from our administrator/CEO/etc"&lt;/strong&gt;, then you should protect against such attacks with &lt;a href="https://www.yubico.com/authentication-standards/fido-u2f/"&gt;U2F tokens&lt;/a&gt; or client certificates, neither of which can be forged even if the attacker has the username, the password, and the MFA code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Enforcing phishing protection is usually overkill for regular users, although there is nothing wrong with offering the &lt;em&gt;possibility&lt;/em&gt; for the end-users to use e.g. their YubiKeys with the service if they so choose. What you can always do though is show the users a general heads up about phishing attacks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;br&gt;
&lt;a href="https://www.yubico.com/blog/creating-unphishable-security-key/"&gt;Creating the Unphishable Security Key&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-application" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#validate-input-properly-to-protect-your-application-from-so-many-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Validate input properly to protect your application from... so many vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Validate all input as strictly as you can. This will make many vulnerabilities difficult to find and exploit for attackers. Reject invalid input, do not sanitize it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use restrictive data types. DateTime for dates, Integer for numbers, and so on. Use Enums for lists of possible values. Avoid using String when you can.&lt;/li&gt;
&lt;li&gt;When you do have to use String, put a length limit to it if you can.&lt;/li&gt;
&lt;li&gt;When you do have to use String, restrict the character set to the minimum.&lt;/li&gt;
&lt;li&gt;If you process JSON, use a JSON schema.&lt;/li&gt;
&lt;li&gt;If you process XML, use an XML schema.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#catch-exceptions-gracefully-to-avoid-leaking-technical-details" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Catch exceptions gracefully to avoid leaking technical details
&lt;/h3&gt;

&lt;p&gt;Never show stack traces or similar debugging information to end-users. Have a global exception handler ready that catches otherwise unhandled exceptions and displays a generic error message to the browser. This will make it more difficult for an attacker to find and exploit vulnerabilities in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-do-authentication-yourself" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't do authentication yourself
&lt;/h3&gt;

&lt;p&gt;There are just too many things that can go wrong when authenticating users. Defending against different kinds of password guessing and user enumeration attacks, managing password resets, storing the credentials, etc. is not easy. It's almost like with cryptography: mere mortals shouldn't do it by themselves.&lt;/p&gt;

&lt;p&gt;Instead use an identity provider such as &lt;code&gt;auth0&lt;/code&gt; for authenticating the users and implement the protocol (usually &lt;code&gt;OpenID connect&lt;/code&gt;) in your application using widely used and secure software components. If you don't want to use a third party IDP like auth0 then you can self-host something like &lt;code&gt;KeyCloak&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://auth0.com/"&gt;auth0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openid.net/connect/"&gt;OpenID connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.keycloak.org/"&gt;KeyCloak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#authenticate-everything-to-reduce-the-attack-surface" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Authenticate everything to reduce the attack surface
&lt;/h3&gt;

&lt;p&gt;Configure your application so that &lt;strong&gt;everything&lt;/strong&gt; is authenticated by default. Then create the necessary exceptions for static assets and perhaps some endpoints like a landing page or a "signed out" page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-mfa-in-your-application-to-break-the-trust-relationship-to-the-identity-provider" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use MFA in your application to break the trust relationship to the identity provider
&lt;/h3&gt;

&lt;p&gt;If you want to include &lt;em&gt;"what if someone fully compromises the IDP (Identity Provider)?"&lt;/em&gt; into your threat model, use some form of MFA (Multi-Factor Authentication) &lt;em&gt;in your application&lt;/em&gt;. This way even if the IDP gets hacked and the attacker can authenticate as anyone there, the attacker will still not know the user's MFA secrets for the application itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-strict-access-controls-to-prevent-unauthorized-access-to-data-or-functionality" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use strict access controls to prevent unauthorized access to data or functionality
&lt;/h3&gt;

&lt;p&gt;Access control is not always easy but it can be done right. Just be centralized about it so that you won't end up with an IDOR (Insecure Direct Object Reference) vulnerability because you forgot to check the user's access in some individual controller function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prevent access to all controller methods (or equivalent) by default.&lt;/li&gt;
&lt;li&gt;Allow access to individual controllers by role.&lt;/li&gt;
&lt;li&gt;Use method level security to also restrict access to e.g. service functions.&lt;/li&gt;
&lt;li&gt;Use a centralized permission evaluator to prevent unauthorized access to individual records.&lt;/li&gt;
&lt;li&gt;Use a centralized permission evaluator to filter objects returned to the client.&lt;/li&gt;
&lt;li&gt;Use an architecture with e.g. a frontend web app and a backend API then implement the same access controls in every app/API, not just the Internet-facing parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To clarify the permission evaluator approach a little bit, here's the crux of it: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your data records extend a class that has some property that you use for access control. For example &lt;code&gt;int ownerId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Your authenticated user has an ID.&lt;/li&gt;
&lt;li&gt;You have a permission evaluator class, which knows that users can have access to objects if the object's &lt;code&gt;ownerId&lt;/code&gt; equals the user's &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You then plug that permission evaluator into your application platform's access control system, such as Spring Security's PreAuthorize, PostAuthorize, PreFilter, PostFilter, etc.&lt;/li&gt;
&lt;li&gt;If you need more complex access control than &lt;code&gt;ownerId&lt;/code&gt; or similar, then you can setup (for example) a full ACL system.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html"&gt;Insecure Direct Object References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/spring-deny-access"&gt;Deny access by default (Spring Security))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/spring-security-method-security#3-using-preauthorize-and-postauthorize-annotations"&gt;PreAuthorize &amp;amp; PostAuthorize (Spring Security)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/spring-security-prefilter-postfilter#writing-security-rules"&gt;PreFilter &amp;amp; PostFilter (Spring Security)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-proper-tools-and-techniques-to-avoid-injection-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use proper tools and techniques to avoid injection vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Multiple vulnerabilities fall under the category "injection" and they're all alike. These include SQL injection, HTML injection (a form of XSS), XML injection, XPath injection, LDAP injection, command injection, template injection, SMTP injection, response header injection... there are so many "different" vulnerabilities that are in reality the same issue with the same remedy: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Issue: Using string concatenation/formatting to construct a parameterized message of protocol X.&lt;/li&gt;
&lt;li&gt;Solution: Use a proper, well (security) tested software library for the job and use it properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We won't go through each of the injection vulnerabilities in this article since the list would be infinite, so just remember this rule whatever protocol you're constructing. We'll cover some of the more prevalent/interesting ones though, such as SQL injection which is next on our list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#construct-database-queries-safely-to-avoid-sql-injection-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Construct database queries safely to avoid SQL injection vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To avoid SQL Injection vulnerabilities, never construct SQL queries by string concatenation. Use an ORM (Object Relational Mapper) if you can, this will make development quicker and the application more secure.&lt;/p&gt;

&lt;p&gt;If you want to have granular control over your queries, use a low-level ORM (often referred to as a query builder).&lt;/p&gt;

&lt;p&gt;If you cannot for any reason use an ORM then go for prepared statements, but be careful as they are far more prone to human error than an ORM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#warning" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-exclamation-triangle"&gt;&lt;/i&gt; Warning
&lt;/h4&gt;

&lt;p&gt;ORM frameworks are not a silver bullet in two senses.&lt;/p&gt;

&lt;p&gt;First is that they still have functionality for supporting raw SQL queries/parts of queries. Just don't use those features and you're golden.&lt;/p&gt;

&lt;p&gt;The second is that ORM frameworks have vulnerabilities from time to time, just like any other software package. So follow other good practices: validate all input, use a WAF and keep your packages up to date, and you're golden.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/sql-injection-attack-and-prevention"&gt;SQL Injection Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#if-you-must-run-os-commands-do-it-right-to-avoid-command-injection-and-related-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; If you must run OS commands, do it right to avoid command injection and related vulnerabilities
&lt;/h3&gt;

&lt;p&gt;If you can avoid it, don't execute OS commands at all. It's always a bit dodgy.&lt;/p&gt;

&lt;p&gt;If you have to do it, you can avoid command injection vulnerabilities and related issues by following these guidelines: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a proper library/function to construct and parameterize the command. The parameters should be of the &lt;code&gt;list&lt;/code&gt; datatype. Never create the command as a single string.&lt;/li&gt;
&lt;li&gt;Do not use a shell to invoke the command.&lt;/li&gt;
&lt;li&gt;Predetermine the parameters that you feed into the command. Using &lt;code&gt;curl&lt;/code&gt; as an example, by allowing the user to specify the &lt;code&gt;-o&lt;/code&gt; parameter you would allow the attacker to write to the local filesystem.&lt;/li&gt;
&lt;li&gt;Understand what the program does and validate the parameters appropriately. Again using &lt;code&gt;curl&lt;/code&gt; as the example, you might want to allow the user to retrieve websites such as &lt;code&gt;https://www.appsecmonkey.com/&lt;/code&gt; but what if the attacker retrieves &lt;code&gt;file:///etc/passwd&lt;/code&gt; instead?&lt;/li&gt;
&lt;li&gt;Think through. Even if you validate that the parameter starts with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;, would you like for the attacker to access &lt;code&gt;http://192.168.0.1/internal_sensitive_service/admin&lt;/code&gt; or do a port scan of the internal network?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Really&lt;/strong&gt; think through. Even if you validate that the parameter is a valid DNS hostname that doesn't contain e.g. &lt;code&gt;yourcompany.local&lt;/code&gt;, is there anything preventing the attacker from creating a public DNS record that points &lt;code&gt;www.example.com&lt;/code&gt; to &lt;code&gt;192.168.0.1&lt;/code&gt;? The answer is... no. It can be done.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Command_Injection"&gt;Command Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#avoid-xml-vulnerabilities-by-configuring-your-parsers-properly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Avoid XML vulnerabilities by configuring your parsers properly
&lt;/h3&gt;

&lt;p&gt;XML is a dangerous markup language that contains features for accessing system resources, and some implementations of XSLT even support embedded code. For this reason, you must be extremely cautious when processing it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoid accepting XML/XSLT from untrusted sources if you can.&lt;/li&gt;
&lt;li&gt;If you parameterize XML, XSLT, or XPath expressions, use a proper software component for doing so. This is to avoid injection vulnerabilities. Don't use string concatenation/formatting/etc.&lt;/li&gt;
&lt;li&gt;Use a well known and thoroughly (security) tested software component for parsing XML/XSLT. This is crucial. &lt;strong&gt;Do not&lt;/strong&gt; use a bad library or your code for handling XML. Furthermore, under any circumstances do not attempt to create a custom implementation for handling XML signatures (such as SAML), because there are so many things that can go wrong.&lt;/li&gt;
&lt;li&gt;Configure your parser properly. Disable &lt;code&gt;document&lt;/code&gt; for XSLT. Disable &lt;code&gt;xinclude&lt;/code&gt;. Disable document type definitions. Disable external entities. Enable DOS protection. The specific options will vary on the implementation, do some research on your chosen parser.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bugcrowd.com/blog/advice-from-a-bug-hunter-xxe/"&gt;Hunting XXE For Fun And Profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ws-attacks.org/Web_Service_Attacks_By_Category"&gt;WS Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#avoid-url-injection-vulnerabilities-by-using-proper-class-for-url-construction" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Avoid URL injection vulnerabilities by using proper class for URL construction
&lt;/h3&gt;

&lt;p&gt;URL injections happen when you have something like this: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;python&lt;br&gt;
flavour = request.getParam("flavour");&lt;br&gt;
url = "https:/api.local/pizzas/" + flavour + "/";&lt;br&gt;
return get(url).json();&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And someone enters a value like this: &lt;br&gt;
&lt;code&gt;&lt;br&gt;
../admin/all-the-sensitive-things/&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This results in the API call returning a response for &lt;code&gt;https://api.local/admin/all-the-sensitive-things/&lt;/code&gt; instead of the pizza endpoint like the developer intended.&lt;/p&gt;

&lt;p&gt;And the solution, as always, is to use a proper URL construction library to parameterize the URL so that the values get properly encoded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-path-traversal-vulnerabilities-by-using-a-proper-class-to-construct-the-paths" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Avoid path traversal vulnerabilities by using a proper class to construct the paths
&lt;/h3&gt;

&lt;p&gt;Just like URL addresses, file paths can also end up pointing to unwanted locations if an attacker manages to sneak a &lt;code&gt;../../../&lt;/code&gt; sequence somewhere in the path. To avoid this, create a class that constructs the path safely and validates that the final path is in the intended directory. Avoid using untrusted data in the file path, or better yet, avoid using the filesystem altogether and prefer e.g. cloud storage instead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Path_Traversal"&gt;Path Traversal Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dont-use-the-filesystem-for-untrusted-content-eg-uploads-if-you-can-avoid-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't use the filesystem for untrusted content (e.g. uploads) if you can avoid it
&lt;/h3&gt;

&lt;p&gt;There is an infinite list of things that can go wrong when allowing your users to write the server's filesystem. Use cloud storage instead, or if that doesn't work for you, use binary blobs in a database.&lt;/p&gt;

&lt;p&gt;If you absolutely must access the disk, these guidelines could help you be safe: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Be very careful not to allow any untrusted data to affect any part of the internal file path.&lt;/li&gt;
&lt;li&gt;Keep the files in an isolated directory far from e.g. the webroot.&lt;/li&gt;
&lt;li&gt;Validate that the file contents match the expected format before writing to disk.&lt;/li&gt;
&lt;li&gt;Set your filesystem permissions properly to prevent writing to unwanted locations.&lt;/li&gt;
&lt;li&gt;Don't extract compressed (e.g. ZIP) archives, as they can contain any files including symlinks and paths to anywhere on the system.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#dont-execute-dynamic-code-to-avoid-remote-code-execution-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't execute dynamic code to avoid remote code execution vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Don't use &lt;code&gt;eval&lt;/code&gt; or equivalent functions. Find a way to achieve your goals without them. Otherwise, there will be a risk that untrusted data reaches the function call and someone will execute arbitrary code on your server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-serialization-carefully-to-avoid-deserialization-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use serialization carefully to avoid deserialization vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Deserialization of untrusted data is a dangerous operation and can easily lead to remote code execution.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don't use serialization if you can avoid it.&lt;/li&gt;
&lt;li&gt;If you can serialize the objects on the server-side, then sign them digitally. And when it's time to deserialize them again, validate the signature before proceeding with deserialization.&lt;/li&gt;
&lt;li&gt;Use a well-known software component for the job and keep it rigorously up to date. Vulnerabilities are discovered in many deserialization libraries all the time. &lt;a href="https://github.com/google/gson"&gt;GSon&lt;/a&gt; is not a bad choice.&lt;/li&gt;
&lt;li&gt;Use a simple text format such as JSON instead of binary formats. Also, problematic formats like XML should be avoided because then you have XML vulnerabilities to worry about in addition to deserialization ones.&lt;/li&gt;
&lt;li&gt;Validate the serialized object before processing it. For example in the case of JSON, validate the JSON document against a strict JSON schema before proceeding with deserialization.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"&gt;OWASP deserialization cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-infrastructure" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Infrastructure
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-a-waf" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use a WAF
&lt;/h3&gt;

&lt;p&gt;Put a web application firewall product in front of your application. This will make many vulnerabilities significantly harder to find and exploit. ModSecurity is a good open-source option.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://modsecurity.org/rules.html"&gt;ModSecurity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#configure-your-web-server-carefully-to-avoid-http-desync-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Configure your web server carefully to avoid HTTP desync attacks
&lt;/h3&gt;

&lt;p&gt;There is an attack called "HTTP Desync" or "Request Smuggling", which could allow for an attacker to do all sorts of nasty things, such as steal HTTP requests of random users collecting to the web application, if the following conditions are true: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is a frontend web server, such as a load balancer/any reverse proxy, that accepts requests with &lt;em&gt;both&lt;/em&gt;, &lt;code&gt;Content-Length&lt;/code&gt; and &lt;code&gt;Transfer-Encoding&lt;/code&gt; headers, and passes them on without normalizing the request.&lt;/li&gt;
&lt;li&gt;The next web server on the line, such as an application web server, uses, or can be tricked to use, a different mechanism than the frontend webserver to determine where the HTTP request begins and where it ends, e.g. the frontend would use &lt;code&gt;Content-Length&lt;/code&gt; whereas the application server would use &lt;code&gt;Transfer-Encoding&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The front-end web server reuses the connection to the backend web server.&lt;/li&gt;
&lt;li&gt;The frontend web server uses HTTP/1 (instead of HTTP/2) in the backend server connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So how to protect yourself? Depends on the product but in general: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Consult the documentation/vendor of the e.g. reverse proxy products that you are using and ensure that they are actively defending against the attack.&lt;/li&gt;
&lt;li&gt;Configure the front-end webserver to use HTTP/2 in backend connections.&lt;/li&gt;
&lt;li&gt;Configure the front-end webserver to prevent aggregation of HTTP requests from separate client-side TCP streams into the same server-side connection.&lt;/li&gt;
&lt;li&gt;Use a WAF (Web Application Firewall) and ensure it has a module for thwarting request smuggling attempts&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn"&gt;HTTP Desync Attacks: Request Smuggling Reborn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-containers" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use containers
&lt;/h3&gt;

&lt;p&gt;Run your application in isolation so that in the event of a breach the attacker will not have unnecessary access to unwanted file-, system-, or network resources. So preferably use something like Kubernetes or a cloud serverless stack for deploying your application. If you are for any reason forced to use a bare server then manually run e.g. Docker to constrain the application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/101-tutorial"&gt;Docker 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-selinuxapparmor" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use SELinux/AppArmor
&lt;/h3&gt;

&lt;p&gt;Even if you run your application in a container, it's worthwhile to further constrain it with an SELinux or AppArmor policy. This will make exploiting container escape vulnerabilities very difficult, among other benefits.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mairin/selinux-coloring-book"&gt;SELinux Coloring Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.ubuntu.com/AppArmor"&gt;AppArmor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-service-accounts-with-minimum-privileges" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use service accounts with minimum privileges
&lt;/h3&gt;

&lt;p&gt;This will usually limit damage when something goes wrong. Again an exhaustive list is impossible, but here are a couple of examples to get the idea: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even if you use Docker, and even if you use SELinux/AppArmor, do not run the application as root. This will make container escape/kernel vulnerabilities and other nasty tricks harder for an attacker to exploit. Create a specific user for the application with minimal permissions.&lt;/li&gt;
&lt;li&gt;If you have databases, ensure the application's database user has minimum access to tables, columns and dbms functionality.&lt;/li&gt;
&lt;li&gt;If you integrate with API's, ensure the application has minimum permissions to access the API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#restrict-egress-network-connections" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Restrict egress network connections
&lt;/h3&gt;

&lt;p&gt;An attacker often needs some kind of reverse communication channel to establish a command &amp;amp; control channel and/or to exfiltrate data. Also, several vulnerabilities require an egress network connection to be discovered and exploited.&lt;/p&gt;

&lt;p&gt;For this reason, you should not allow arbitrary connections from your application to the outside world, and this includes DNS. If you can run &lt;code&gt;nslookup www.example.com&lt;/code&gt; successfully from your server then you haven't restricted egress properly.&lt;/p&gt;

&lt;p&gt;How you would go about this depends on your infrastructure.&lt;/p&gt;

&lt;p&gt;Egress TCP/UDP/ICMP can usually be disabled with one or more of the following:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A gateway level firewall if you have one.&lt;/li&gt;
&lt;li&gt;Local firewall (e.g. iptables or Windows Firewall) if you have a old-fashioned server.&lt;/li&gt;
&lt;li&gt;iptables if you run Docker on your server.&lt;/li&gt;
&lt;li&gt;NetworkPolicy definitions if you use Kubernetes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DNS is a bit more tricky since often times it is required to allow it for some hosts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you can get away with a local hosts-file then perfect, this is a simple solution and you can disable DNS completely (with any of the techniques in the previous list).&lt;/li&gt;
&lt;li&gt;If not, then you have to configure a private zone in your upstream DNS and limit access on network level to that DNS server only. The zone should only resolve a predetermined list of hostnames.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#keep-track-of-your-dns-records-to-prevent-subdomain-takeovers" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Keep track of your DNS records to prevent subdomain takeovers
&lt;/h3&gt;

&lt;p&gt;Subdomain takeovers happen like this: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have a domain &lt;code&gt;example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You buy another domain &lt;code&gt;www.my-cool-campaign.com&lt;/code&gt; for a campaign and you create a &lt;code&gt;CNAME&lt;/code&gt; from &lt;code&gt;campaign.example.com&lt;/code&gt; to &lt;code&gt;www.my-campaign.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Your campaign ends, and eventually &lt;code&gt;www.my-cool-campaign.com&lt;/code&gt; expires.&lt;/li&gt;
&lt;li&gt;You still have the &lt;code&gt;CNAME&lt;/code&gt; pointing &lt;code&gt;campaign.example.com&lt;/code&gt; to the expired domain.&lt;/li&gt;
&lt;li&gt;An attacker buys the expired domain, and now there is a DNS record under &lt;em&gt;your&lt;/em&gt; domain (&lt;code&gt;campaign.example.com&lt;/code&gt;) which is pointing to an attacker controlled domain.&lt;/li&gt;
&lt;li&gt;The attacker hosts malicious content under &lt;code&gt;www.my-cool-campaign.com&lt;/code&gt; which will be accessible from &lt;code&gt;https://campaign.example.com&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So be mindful about your DNS records. If you have to deal with lots of domain names like this, an automated solution for monitoring is highly recommended.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subdomain_takeovers"&gt;Subdomain Takeovers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Architecture
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-an-internal-api-for-accessing-data-sources-to-get-rid-of-dangerous-trust-boundaries" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Create an internal API for accessing data sources to get rid of dangerous trust boundaries
&lt;/h3&gt;

&lt;p&gt;You shouldn't put too much trust in your Internet-facing web application. For example, it shouldn't have direct access to a database. Otherwise, when someone breaks into the Internet-facing application your entire database will be lost.&lt;/p&gt;

&lt;p&gt;Instead separate your architecture into multiple components, for example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your web application on &lt;code&gt;www.example.com&lt;/code&gt; will authenticate your users on &lt;code&gt;auth0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Your web application on &lt;code&gt;www.example.com&lt;/code&gt; is allowed to connect to the internal API &lt;code&gt;api.example.local&lt;/code&gt; with the authenticated user's &lt;code&gt;access-token&lt;/code&gt; (obtained from &lt;code&gt;auth0&lt;/code&gt;) which will then be passed as the &lt;code&gt;Authorization&lt;/code&gt; header when making calls to the internal API.&lt;/li&gt;
&lt;li&gt;Your API on &lt;code&gt;api.example.local&lt;/code&gt; will enforce access controls based on the (end user's) access token and read/write the database appropriately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if an attacker fully compromises your &lt;code&gt;www.example.com&lt;/code&gt; application, the attacker will not have full access to the entire database, but only individual user's data whose access tokens happen to be in the memory at the time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encrypt-and-authenticate-all-connections" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Encrypt and authenticate all connections
&lt;/h3&gt;

&lt;p&gt;Do not trust your internal network to be secure, there are many ways in which it could be compromised. Encrypt all system-to-system connections with TLS (that is, use HTTPS) and authenticate the connections preferably on both, network and application-level: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Web App -&amp;gt;&lt;/strong&gt; API: &lt;em&gt;This is my client certificate. It's signed by the CA that we trust, and it says "CN=WebApp".&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Web App &lt;strong&gt;&amp;lt;- API&lt;/strong&gt;: &lt;em&gt;And this is my server certificate. It's signed by the CA that we trust, and it says "CN=API"&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web App -&amp;gt;&lt;/strong&gt; API: &lt;em&gt;This is my access token that is signed by the IDP that we trust, I got it with OAuth2 client credentials grant flow.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web App -&amp;gt;&lt;/strong&gt; API: &lt;em&gt;...and this is the access token of the logged-in user "John Doe" on whose behalf I'm making this request that was also signed by the IDP that we trust.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web App -&amp;gt;&lt;/strong&gt; API: &lt;em&gt;...so could you give me John Doe's information, please?&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Web App &lt;strong&gt;&amp;lt;- API&lt;/strong&gt;: &lt;em&gt;Gladly. Since this is an encrypted and mutually authenticated connection network level, and because you seem to be "Web App" on the application level, and because you seem to be operating with the permissions of "John Doe".&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#manage-secrets-centrally" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Manage secrets centrally
&lt;/h3&gt;

&lt;p&gt;Without a proper secrets management solution it is not easy to keep credentials short-lived, audit-logged, and not to expose them to human eyes. For this reason (and many others) it is recommended to use a tool such as HashiCorp vault to centrally manage integration secrets, encryption keys, and the like.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.vaultproject.io/"&gt;HashiCorp Vault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-monitoring" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#collect-analyze-alert" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect, analyze, alert
&lt;/h3&gt;

&lt;p&gt;Collect logs centrally to a system, such as a SIEM (Security Information and Event Monitoring), where you can trigger alerts for specific events that indicate a vulnerability or an attack. Configure alert channels so that the relevant people will know immediately when a significant threat occurs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collect-application-security-events" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect application security events
&lt;/h3&gt;

&lt;p&gt;Probably the most important log source is your application itself. You should raise exceptions when suspicious behavior happens, log the events and possibly even automatically lock out users/IP addresses that seem to be causing trouble.&lt;/p&gt;

&lt;p&gt;Such events can be (these are just examples, the specific cases depend heavily on your application): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input validation errors (e.g. trying to give values for parameters that shouldn't have been possible through the UI).&lt;/li&gt;
&lt;li&gt;Access control errors (e.g. trying to access a record which shouldn't have been possible through the UI).&lt;/li&gt;
&lt;li&gt;Database syntax errors indicate that someone has discovered a SQL injection vulnerability and you need to move fast.&lt;/li&gt;
&lt;li&gt;XML errors indicate that someone has discovered an XML injection vulnerability or possibly is trying to find/exploit an XXE (XML External Entities) vulnerability.&lt;/li&gt;
&lt;li&gt;Bad request errors that indicate the end user sent something which was rejected by the application. Spring framework's RequestRejectedException is an example of this.&lt;/li&gt;
&lt;li&gt;CSRF token validation errors usually mean that someone is looking for vulnerabilities in your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collect-runtime-security-logs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect runtime security logs
&lt;/h3&gt;

&lt;p&gt;Use a runtime security monitoring tool such as Falco to detect anomalous system calls. Falco is especially useful if you happen to use Kubernetes. Remotely collect and monitor these logs as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://falco.org/"&gt;Falco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#collect-selinuxapparmor-logs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect SELinux/AppArmor logs
&lt;/h3&gt;

&lt;p&gt;If you have an SELinux policy that prevents outgoing connections, and your application suddenly tries to make an HTTP request to e.g. &lt;code&gt;burpcollaborator.net&lt;/code&gt;, it would be very useful to know about it right away. Or perhaps your application tries to access &lt;code&gt;/etc/passwd&lt;/code&gt;. Both of these would indicate that someone has already found a serious vulnerability in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collect-webserver-events" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect webserver events
&lt;/h3&gt;

&lt;p&gt;Collect at least access logs and error logs from your web server software and send them to the central logging server as well. This will help in mapping the timeline in incident response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collect-waf-logs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect WAF logs
&lt;/h3&gt;

&lt;p&gt;If you use a WAF like recommended above, collect those logs as well. But don't necessary trigger alerts from them because generally WAF products get bombarded with all sorts of crap from the Internet that most of the time you won't have to worry about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-incident-response" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Incident Response
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#have-a-plan" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Have a plan
&lt;/h3&gt;

&lt;p&gt;Once you have your monitoring and hardening in place, vulnerabilities will not be easy for attackers to find, vulnerabilities will be slow to successfully exploit, and you will know about the attempts quickly. Good place to be.&lt;/p&gt;

&lt;p&gt;But knowing about attacks and slowing down attackers is not enough, you still have to do something about them. So have the people, tools, and processes ready for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quickly analyzing the logs and understanding what is happening and what needs to be done&lt;/li&gt;
&lt;li&gt;Quickly restricting individual URL addresses or parameters in e.g. an application firewall product&lt;/li&gt;
&lt;li&gt;Quickly shutting down the application if needed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#secure-development-considerations" class="anchor"&gt;
  &lt;/a&gt;
  Secure Development Considerations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#threat-model" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Threat model
&lt;/h3&gt;

&lt;p&gt;Go through a process of thinking "what could go wrong" and then do something about it. Preferably do this from the get-go when you start designing a system, but it's never too late to begin, and at any rate you should re-visit this process when you introduce changes into the system.&lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: What if an attacker breaches the Internet facing web server?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: Well then we'd be royally screwed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: Okay so we have a trust relationship there, we trust that the Internet facing web server will not be pwned. Can we really trust that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: Well no, there are a gazillion things that could result in that thing getting hacked, for example vulnerabilities in our own code, or vulnerabilities in a dependency that we use, or perhaps vulnerabilities in our web server software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: Right. So let's break that trust relationship. But how?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: Let's break the monolith and create an internal API that does the actual database access. Then the frontend web server will not have access to everything at once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: Great idea. So what else could go wrong?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: Well what if an attacker breaches our internal network?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: All would be lost, the server-to-server connections are all unencrypted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is threat modeling and it doesn't have to be complex or scary. Use it to discover dangerous trust relationships and then break those relationships.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#force-peer-review-in-source-control" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Force peer review in source control
&lt;/h3&gt;

&lt;p&gt;Implement a technical control that prevents code from entering the repository without at least one or two other developers approving it. This is the basis of your secure development lifecycle because now two things happen: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If an attacker compromises the workstation of a developer, or the developer goes rogue, it will not be possible to directly push malicious code into the repository.&lt;/li&gt;
&lt;li&gt;If a developer makes a mistake and tries to introduce vulnerable code into the repository, there is a good chance that the other developers reviewing the code will catch the error before it gets merged.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/ee/user/project/merge_requests/merge_request_approvals.html#required-approvals"&gt;GitLab - Required Approvals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confluence.atlassian.com/bitbucketserver/checks-for-merging-pull-requests-776640039.html"&gt;BitBucket - Checks for merging pull requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops"&gt;Azure DevOps - Improve code quality with branch policies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#automate-the-ci-pipeline-and-restrict-mere-mortal-access-to-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Automate the CI pipeline and restrict mere mortal access to it
&lt;/h3&gt;

&lt;p&gt;Individual developers should be able to trigger e.g. a Jenkins build, but Jenkins should be configured to allow that and nothing else. Individual developers should not be able to introduce arbitrary code into the build phase. You can however keep the Jenkinsfile in source control as long as the peer review process is technically forced like recommended above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sign-the-build-artifacts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Sign the build artifacts
&lt;/h3&gt;

&lt;p&gt;Sign the artifacts. For example, if you are building a container image, sign the image as part of the build. Store the signing keys safely. The build phase needs to access the keys but they &lt;strong&gt;shouldn't&lt;/strong&gt; be stored in version control with the Jenkinsfile. Preferably keep the keys in e.g. HashiCorp vault and pull them at build time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/security/trust/trust_automation/"&gt;Automation with Content Trust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plugins.jenkins.io/hashicorp-vault-plugin/"&gt;Jenkins - HashiCorp Vault Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#run-a-static-application-security-scanner-as-part-of-the-ci-pipeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Run a static application security scanner as part of the CI pipeline
&lt;/h3&gt;

&lt;p&gt;Run a tool such as SpotBugs + FindSecBugs (or a similar tool applicable to your technology of choice) in your CI pipeline. This will help you spot some known vulnerabilities in your code before deploying it.&lt;/p&gt;

&lt;p&gt;You can additionally run these tools on the developer's workstation (as an IDE plugin for example) to catch issues even before checking them to version control.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spotbugs.github.io/"&gt;SpotBugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://find-sec-bugs.github.io/"&gt;Find-Sec-Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#verify-dependencies-on-build-and-keep-them-at-a-minimum" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Verify dependencies on build and keep them at a minimum
&lt;/h3&gt;

&lt;p&gt;Every software package that you depend on is a risk. You are pulling code from someone elses' repository and executing it on your application server. So be mindful about what and how you depend on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keep the dependencies at a minimum.&lt;/li&gt;
&lt;li&gt;Only use dependencies that you trust. They should all be widely used and reputable.&lt;/li&gt;
&lt;li&gt;Use a build framework that supports dependency verification, and make sure the verification is enabled.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As additional hardening restrict egress connections from your application server (described earlier in this article) to prevent any backdoors from "calling home".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gradle.org/current/userguide/dependency_verification.html"&gt;Gradle Dependency Verification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#run-a-dependency-security-scanner-as-part-of-the-ci-pipeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Run a dependency security scanner as part of the CI pipeline
&lt;/h3&gt;

&lt;p&gt;Run a tool such as OWASP DependencyCheck as part of your CI pipeline to catch some dependencies you might be using that have known security issues in them.&lt;/p&gt;

&lt;p&gt;You run these tools on the developer's workstation as well (but also run them in the CI pipeline that's the most important thing).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-project-dependency-check/"&gt;OWASP DependencyCheck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#run-a-container-image-security-scanner-as-part-of-the-ci-pipeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Run a container image security scanner as part of the CI pipeline
&lt;/h3&gt;

&lt;p&gt;If you use containers, use a tool such as Trivy to scan the created container image for known vulnerabilities.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy"&gt;Trivy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#automate-deployments-and-validate-signatures" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Automate deployments and validate signatures
&lt;/h3&gt;

&lt;p&gt;Individual developers could well have the right to deploy to production, but only the specific images built and signed in the previous stages should be deployable. Access to production secrets or direct access to the servers should not be possible. Validate signature of the deployment image, for example, if you are using Kubernetes then validate the container signature via e.g. Notary and Open Policy Agent.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/security/trust/"&gt;Docker Content Trust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://siegert-maximilian.medium.com/ensure-content-trust-on-kubernetes-using-notary-and-open-policy-agent-485ab3a9423c"&gt;Ensure Content Trust on Kubernetes using Notary and Open Policy Agent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#have-a-security-champion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Have a security champion
&lt;/h3&gt;

&lt;p&gt;There is a limit to how much a single person can obsess about. You cannot expect every developer to be a masterful penetration tester or security engineer. Just as you can't expect all security professionals to be outstanding developers.&lt;/p&gt;

&lt;p&gt;So it's generally a great idea to introduce people to your team with a security focus, for sparring with developers, architects etc. and helping to secure your applications and spread security awareness within the team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSVut7eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vtdk9kdl5h3qdbawwfk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSVut7eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vtdk9kdl5h3qdbawwfk.png" alt="security champion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://resources.infosecinstitute.com/topic/what-is-a-security-champion-definition-necessity-and-employee-empowerment/"&gt;What is a security champion?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is much more to securing your application than avoiding vulnerabilities. To summarize some of the main ideas: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use up to date, modern, well-known software components for performing risky operations such as authentication, access control, cryptography, accessing a database, or parsing XML. And make sure you have configured those components properly, for example by disabling external entities in your XML parser.&lt;/li&gt;
&lt;li&gt;Use the security controls offered by your platform, for example, CSRF protection.&lt;/li&gt;
&lt;li&gt;Use the security controls offered by web browsers, such as HSTS, SameSite cookies, and Content Security Policy.&lt;/li&gt;
&lt;li&gt;Centralize your security controls, especially authentication and access control, to avoid vulnerabilities where you "forget to add security" to some controller function, etc.&lt;/li&gt;
&lt;li&gt;Use a web application firewall to make finding and exploiting many classes of vulnerabilities in your application difficult.&lt;/li&gt;
&lt;li&gt;Contain your application by restricting its access to file-, network-, and system resources.&lt;/li&gt;
&lt;li&gt;Threat model to discover any dangerous trust relationships in your architecture, then break them. This could include for example source control policies to break the trust relationship to the integrity of each developer's workstation, and a clever architecture to break the full trust in frontend webserver not getting compromised.&lt;/li&gt;
&lt;li&gt;Monitor vigorously and have a plan when something goes south.&lt;/li&gt;
&lt;li&gt;Use code/image/dependency vulnerability scanners in both development environments and the CI pipeline.&lt;/li&gt;
&lt;li&gt;Educate developers, architects, etc. about security and have a security champion on the team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appsec-adventure-awaits" class="anchor"&gt;
  &lt;/a&gt;
  AppSec adventure awaits!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://eepurl.com/hqAGt5"&gt;Subscribe&lt;/a&gt; to the AppSec monkey mailing list and be among the first to get fresh content.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>4 ways to accelerate JSON processing with Rails and PostgreSQL</title>
      <author>Kevin Gilpin</author>
      <pubDate>Tue, 16 Feb 2021 18:18:57 +0000</pubDate>
      <link>https://dev.to/kgilpin/4-ways-to-accelerate-json-processing-with-rails-and-postgresql-nfa</link>
      <guid>https://dev.to/kgilpin/4-ways-to-accelerate-json-processing-with-rails-and-postgresql-nfa</guid>
      <description>&lt;p&gt;&lt;a href="https://appland.org"&gt;AppLand&lt;/a&gt; is an open source framework that developers can use to record, analyze, and optimize end-to-end code and data flows. The framework provides client agents for Ruby, Java and Python (beta) that record running code and generate JSON files called AppMaps. Users can view and analyze AppMaps locally using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap extension for VS Code&lt;/a&gt;, and also push AppMaps to the AppLand server for analytics, sharing, discussion etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdOg08vL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlknh6trb3qk3edsqrdh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdOg08vL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlknh6trb3qk3edsqrdh.gif" alt="AppMap for VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AppLand server is built to ingest and process large AppMap JSON files. Our stack is vanilla Rails and PostgreSQL. Naturally, we use the powerful JSONB data type to store the JSON data in the database. In the initial development period of AppLand, AppMap files typically ranged from a few KB up to a few hundred KB. But before long, AppLand users started to record some very large apps, including monolithic Java and Ruby repos with up to 1 million lines of code. As hundreds, and then thousands of JSON files were generated from these large repos and pushed into AppLand, our server became stressed and we had to dig in and optimize. In this post, I’m describing some of the ways that we scaled up our architecture to handle these large JSON files. &lt;/p&gt;

&lt;p&gt;So, without further ado, here are four ways to accelerate JSON processing with Rails and PostgreSQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-skip-rails-json-parsing-on-post" class="anchor"&gt;
  &lt;/a&gt;
  1. Skip Rails JSON parsing on POST
&lt;/h2&gt;

&lt;p&gt;When AppMap data is received by the AppLand server, we want to get it into PostgreSQL as fast as possible. When Rails receives an HTTP request with content type &lt;code&gt;application/json&lt;/code&gt;, it parses the request JSON into Ruby objects and then passes this data, as &lt;code&gt;params&lt;/code&gt;, to the controller. Since all we want to do is insert the data into PostgreSQL, and PostgreSQL can parse the JSON itself, we don’t need Rails to do any parsing. So, we disable Rails JSON parsing behavior by sending content type &lt;code&gt;multipart/mixed&lt;/code&gt; instead of &lt;code&gt;application/json&lt;/code&gt;. In this way, we minimize the amount of request processing that’s performed in the application tier. The JSON data is loaded efficiently into PostgreSQL, without having to sacrifice all the benefits provided by the Rails framework.&lt;/p&gt;

&lt;p&gt;Here’s an example of our &lt;a href="https://github.com/applandinc/appland-cli/blob/446b6d78c5242c9f8ba3b2a230be2b46a191f35e/internal/appland/client.go#L236"&gt;Go client code sending &lt;code&gt;multipart/mixed&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-pay-attention-to-algorithm-design" class="anchor"&gt;
  &lt;/a&gt;
  2. Pay attention to algorithm design
&lt;/h2&gt;

&lt;p&gt;With a few hundred KB of data, most simple algorithms will perform about the same. But as the data grows to dozens of MB and beyond, algorithm design becomes very important. We discovered that one of our AppMap post-processing algorithms had an &lt;a href="https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/#on-1"&gt;O(n²) running time&lt;/a&gt;. We were able to rewrite this algorithm as O(n). Here’s what that difference looks like in a graph of time and memory vs data size:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qLNDSKN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2ztrfo9xqdiywn3vsu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qLNDSKN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2ztrfo9xqdiywn3vsu0.png" alt="Performance optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep those computer science fundamentals in mind, especially as the data gets bigger! There’s no point in trying to optimize a poor algorithm by writing faster code. This algorithm performs just fine in plain Ruby now that it’s inherently efficient. It’s doing in 22 seconds what used to take 3 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-use-indexes-and-generated-columns-to-speed-up-access-to-big-json-objects" class="anchor"&gt;
  &lt;/a&gt;
  3. Use indexes and generated columns to speed up access to big JSON objects
&lt;/h2&gt;

&lt;p&gt;The beauty of JSONB is that you don’t have to choose between the flexibility of “schema less” JSON and the power of SQL and relations. &lt;/p&gt;

&lt;p&gt;As I describe earlier, the AppMap data is written directly into the database by the controller. Later, we want to make this data easily to query and retrieve.  Two PostgreSQL techniques help us to make these operations efficient.&lt;/p&gt;

&lt;p&gt;First, a sometimes we want to reach into AppMaps and search by a particular field, such as “labels” or “metadata.name”. We can make this this efficient by adding indexes on the JSONB data. &lt;/p&gt;

&lt;p&gt;Second, there are situations where we want to retrieve a subset of the JSONB data, and we don’t want to have to parse many megabytes of JSONB data just to pluck out a few fields. So, when the data is loaded, we copy (or denormalize) some of the JSON data into columns in the same record. &lt;a href="https://www.postgresql.org/docs/12/ddl-generated-columns.html"&gt;Generated columns&lt;/a&gt; make this fast and efficient, and ensure that the denormalized data is always up to date. &lt;/p&gt;

&lt;p&gt;For more details on these techniques, check out my companion post &lt;a href="https://dev.to/kgilpin/effective-sql-indexing-and-denormalizing-jsonb-1bhm"&gt;Effective SQL - Indexing and denormalizing JSONB&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-process-jsonb-in-the-database-using-sql-functions" class="anchor"&gt;
  &lt;/a&gt;
  4. Process JSONB in the database using SQL functions
&lt;/h2&gt;

&lt;p&gt;Databases aren’t just for storing data, they are great for processing it as well. In the case of JSONB, PostgreSQL provides a full range of functions and operators that you can use to filter and transform data before you SELECT it out. By processing data in the database, you can use each tool for what it does best: PostgreSQL for data crunching, Ruby for gluing the front-end to the back-end. Here are some examples of data operations that we perform entirely in the database: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finding all AppMaps that contain a particular package, class, or function.&lt;/li&gt;
&lt;li&gt;Building a package and class hierarchy of all the code used in multiple AppMaps.&lt;/li&gt;
&lt;li&gt;Building a dependency map of packages and classes across multiple AppMaps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By doing these computations in the database, we operate efficiently on the data very close to the storage, and we don’t transmit unnecessary data from the database to the application tier. &lt;/p&gt;

&lt;p&gt;Well, that’s our list. I hope you find something helpful in here! If you have your own JSON optimization to share, please tell us about it in the comments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Most of the optimizations described in this post were designed and developed by our long-time wizard, and friend, &lt;a href="https://github.com/dividedmind"&gt;Rafał Rzepecki&lt;/a&gt;. Thanks, Rafał!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honorable-mention" class="anchor"&gt;
  &lt;/a&gt;
  Honorable mention
&lt;/h2&gt;

&lt;p&gt;As a bonus, here are a couple of smaller tips!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limit-the-size-of-sql-log-messages" class="anchor"&gt;
  &lt;/a&gt;
  Limit the size of SQL log messages
&lt;/h3&gt;

&lt;p&gt;By default, the Rails framework logs all the SQL statements. When the application is inserting large JSON files into the database, it’s not helpful to see megabytes of SQL INSERT logged to the console. &lt;/p&gt;

&lt;p&gt;So we created this Sequel extension which truncates the log messages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="c1"&gt;# Sequel database extension to truncate too long log entries.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# SQL statements longer than +sql_log_maxlen+ will get ellipsized in the logs.&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TruncatedLogging&lt;/span&gt;
  &lt;span class="no"&gt;DEFAULT_SQL_LOG_MAXLEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;
  &lt;span class="n"&gt;private_constant&lt;/span&gt; &lt;span class="ss"&gt;:DEFAULT_SQL_LOG_MAXLEN&lt;/span&gt;

  &lt;span class="nb"&gt;attr_writer&lt;/span&gt; &lt;span class="ss"&gt;:sql_log_maxlen&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sql_log_maxlen&lt;/span&gt;
    &lt;span class="vi"&gt;@sql_log_maxlen&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;DEFAULT_SQL_LOG_MAXLEN&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_connection_yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql_log_maxlen&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'...'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sql_log_maxlen&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:truncated_logging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;TruncatedLogging&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#skip-activesupportjson-when-generating-json-with-sequel" class="anchor"&gt;
  &lt;/a&gt;
  Skip ActiveSupport::JSON when generating JSON with Sequel
&lt;/h3&gt;

&lt;p&gt;ActiveSupport::JSON &lt;a href="https://github.com/rails/rails/blob/130c128eae233bf71231c73b9c3c3b3f3ede918b/activesupport/lib/active_support/json/decoding.rb#L47"&gt;detects dates and times&lt;/a&gt; using a regexp, and parses date values into Ruby objects. We don’t use this functionality, so it’s disabled with another Sequel extension:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/application.rb&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sequel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after_connect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extension&lt;/span&gt; &lt;span class="ss"&gt;:truncated_logging&lt;/span&gt;
      &lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extension&lt;/span&gt; &lt;span class="ss"&gt;:core_to_json&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class="c1"&gt;# lib/sequel/extensions/core_to_json.rb&lt;/span&gt;

&lt;span class="c1"&gt;# ActiveSupport adds some pure ruby manipulation to #to_json&lt;/span&gt;
&lt;span class="c1"&gt;# which isn't useful here and hurt performance. Use JSON.generate&lt;/span&gt;
&lt;span class="c1"&gt;# directly to bypass it.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;Sequel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;object_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>rails</category>
      <category>postgres</category>
      <category>architecture</category>
      <category>ruby</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 16 Feb 2021 18:15:16 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-48pj</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-48pj</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#senior-developers-theyre-just-like-us" class="anchor"&gt;
  &lt;/a&gt;
  Senior Developers — They're Just Like Us!
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/kevinhickssw"&gt;@kevinhickssw&lt;/a&gt;
 touches on an important facet of being alive: that no matter your experience level, nobody is immune from impostors syndrome — not even senior devs.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kevinhickssw" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0-V4_uL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--O3jGw5f---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/465329/f1c828fd-48a0-44ff-8453-bbf369f4fc22.jpeg" alt="kevinhickssw image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kevinhickssw/even-senior-developers-have-imposter-syndrome-4e8f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Even Senior Developers Have Imposter Syndrome&lt;/h2&gt;
      &lt;h3&gt;Kevin Hicks ・ Feb 13 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#demystifying-front-end-vs-back-end" class="anchor"&gt;
  &lt;/a&gt;
  Demystifying front end vs back end
&lt;/h3&gt;

&lt;p&gt;Thanks for this explainer on the differences between front and back end development, &lt;a class="comment-mentioned-user" href="https://dev.to/lanrewaju"&gt;@lanrewaju&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lanrewaju" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8miyHrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--W7brPpCW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/406769/59f367fa-770c-48ce-b5b7-9e3969f8b3fd.jpeg" alt="lanrewaju image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lanrewaju/front-end-vs-back-end-web-development-4olb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Front-End VS Back-End Web Development&lt;/h2&gt;
      &lt;h3&gt;Lanre Fagbeyiro ・ Feb 11 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#a-race-to-the-solution" class="anchor"&gt;
  &lt;/a&gt;
  A race to the solution
&lt;/h3&gt;

&lt;p&gt;If you've ever gotten stuck on the &lt;code&gt;can’t perform a React state update on an unmounted component&lt;/code&gt; warning, this thorough guide from &lt;a class="comment-mentioned-user" href="https://dev.to/saranshk"&gt;@saranshk&lt;/a&gt;
 will be a life-saver.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/saranshk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zUTDTd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4cAVPx1M--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/206018/f6190cc3-cda8-4178-b743-4a7cb17086b5.jpg" alt="saranshk image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/saranshk/avoiding-race-conditions-and-memory-leaks-in-react-useeffect-3mme" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Avoiding race conditions and memory leaks in React useEffect&lt;/h2&gt;
      &lt;h3&gt;saransh kataria ・ Feb 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#the-how-when-and-why-behind-refactoring" class="anchor"&gt;
  &lt;/a&gt;
  The how, when, and why behind refactoring
&lt;/h3&gt;

&lt;p&gt;After refactoring, &lt;a class="comment-mentioned-user" href="https://dev.to/notsidney"&gt;@notsidney&lt;/a&gt;
's team now has a more solid foundation to build more features on, they squashed a few tricky bugs, &lt;em&gt;and&lt;/em&gt; they came out of it with a guide on how contributors can write new field types. Great job, team Firetable!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/notsidney" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTu1qrY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Zahc0vTo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/184714/e6738198-675b-492d-86f5-ed761a1cee94.jpg" alt="notsidney image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/notsidney/we-refactored-10k-lines-of-code-in-our-open-source-react-project-1a9a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;We Refactored 10K Lines of Code in Our Open-Source React Project&lt;/h2&gt;
      &lt;h3&gt;sidney alcantara ・ Feb  9 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#your-aws-study-buddy" class="anchor"&gt;
  &lt;/a&gt;
  Your AWS study buddy
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/scrummastert"&gt;@scrummastert&lt;/a&gt;
 passed the AWS Certified Developer Associate exam with flying colors (96%!). In this post, they share how they did it so you can be better prepared if you're studying for this certification. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/scrummastert" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_munTHsL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nG-c9goG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/311858/25321e92-9715-4e9f-b540-cf8b08f54366.png" alt="scrummastert image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/scrummastert/how-i-passed-the-aws-certified-developer-associate-exam-1336" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I passed the AWS Certified Developer - Associate Exam&lt;/h2&gt;
      &lt;h3&gt;Tom Milner ・ Feb 14 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#delivering-on-promises" class="anchor"&gt;
  &lt;/a&gt;
  Delivering on promises
&lt;/h3&gt;

&lt;p&gt;"Do you remember stumbling on your first &lt;code&gt;Promise {pending}&lt;/code&gt;?" asks &lt;a class="comment-mentioned-user" href="https://dev.to/spartakyste"&gt;@spartakyste&lt;/a&gt;
 "Putting a &lt;code&gt;.then&lt;/code&gt; just to see if it will magically work?" — If so, this article is for you.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/spartakyste" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVI7H5N---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0PViu94T--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/482747/7ae8da93-a18c-4910-b8ab-9dae8f4c8c34.jpeg" alt="spartakyste image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/spartakyste/the-promises-guide-i-would-have-loved-as-a-junior-developper-3621" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Promises guide I would have loved as a junior developper&lt;/h2&gt;
      &lt;h3&gt;Chandelier Axel ・ Feb  9 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#covid-crawler" class="anchor"&gt;
  &lt;/a&gt;
  COVID Crawler
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/kaylasween"&gt;@kaylasween&lt;/a&gt;
 wanted a way to track the moving average of COVID cases per day in their home state, Mississippi. To do it automatically on an ongoing basis, they wrote up a crawler to get all the important data from the state’s Department of Health website. Nice work!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kaylasween" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ENGHhHzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MX9WtqTq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/187691/a39de9e8-186c-485a-b4b6-a4ef158c0476.jpeg" alt="kaylasween image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kaylasween/i-wrote-a-crawler-for-the-first-time-58l3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I  wrote a crawler for the first time.&lt;/h2&gt;
      &lt;h3&gt;Kayla Sween ・ Feb 12 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Performance Tools</title>
      <author>Laurie</author>
      <pubDate>Tue, 16 Feb 2021 18:10:52 +0000</pubDate>
      <link>https://dev.to/laurieontech/performance-tools-4clf</link>
      <guid>https://dev.to/laurieontech/performance-tools-4clf</guid>
      <description>&lt;p&gt;If you've worked on browser-based apps before, you may be familiar with a tool called Lighthouse.&lt;/p&gt;

&lt;p&gt;Lighthouse is an auditing tool that gives you a series of "scores" for various metrics, e.g. Accessibility, Performance, SEO. It's available in chrome devtools and can also be run via CLI (command line interface).&lt;/p&gt;

&lt;p&gt;In this post we're going to focus on how Lighthouse measures performance and how that differs from other tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lighthouse-in-devtools" class="anchor"&gt;
  &lt;/a&gt;
  Lighthouse in devtools
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQLVeo_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbprdwhpyilx9lqxhm9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQLVeo_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbprdwhpyilx9lqxhm9u.png" alt="Lighthouse auditing tool in chrome devtools."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; runs your site to calculate metrics and judge how performant it is. However, there are different ways to run Lighthouse reports and Lighthouse itself provides different modes!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Devtools throttling (sometimes referred to as request-level throttling)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this mode, Lighthouse attempts to mimic your site behavior on a slow device. Lighthouse accomplishes this by throttling the connection and cpu, replicating something like a nexus 4g on a slow 4g connection. They do this via the Chrome browser (this is a google tool, so it's only testing on the google browser). While this helps test site performance on a slow device it isn't an exact simulation. That's because this "slowness" is relative to the speed of your local device.&lt;/p&gt;

&lt;p&gt;If you're running a high powered Mac with a really strong internet connection it's going to register a better score than running the same simulation using an older mobile device.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simulated throttling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The aim of this mode is the same as devtools throttling, mimic your site behavior on a slow device/connection. However, Lighthouse runs against a fast device and then calculates what experience a slow device would have. We'll dive into this more in the next section on Page Speed Insights.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Packet-level throttling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this mode Lighthouse does not throttle and expects that the operating system is doing it. We'll explain this mode more in the section on Webpage Test.&lt;/p&gt;

&lt;p&gt;What is interesting about these modes is that depending on which tool you're using to access Lighthouse reports, you may be running a different mode.&lt;/p&gt;

&lt;p&gt;By default, running a Lighthouse audit in chrome devtools uses the first mode. Running via the chrome extension uses the second. The CLI version of Lighthouse allows you to pass a flag, &lt;code&gt;throttling-method&lt;/code&gt;, to specify which mode you'd like to use. It uses simulated throttling by default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-speed-insights" class="anchor"&gt;
  &lt;/a&gt;
  Page Speed Insights
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzc21iwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnnx6tecf4gffd9lh56j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzc21iwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnnx6tecf4gffd9lh56j.png" alt="PSI landing page screenshot."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Page Speed Insights&lt;/a&gt; (PSI) is another Google-provided tool. It uses the simulated throttling mentioned above.&lt;/p&gt;

&lt;p&gt;PSI uses lab data which means it runs against Google servers instead of being influenced by the specs of your local machine. It gets metrics using a fast device and then artificially calculates what a slow device would experience. This is the fastest way, of the three throttling methods above, to calculate performance metrics.&lt;/p&gt;

&lt;p&gt;Why does it matter if it's fast? Well, PSI is run for millions of pages in order to support &lt;a href="https://dev.to/laurieontech/a-primer-on-seo-49n1"&gt;SEO&lt;/a&gt;. We'll talk about that at the end.&lt;/p&gt;

&lt;p&gt;But because of this, the calculations need to be fast rather than perfect. So this multiplier is easier than devtools throttling and typically just as accurate or better. Note that it can be worse in &lt;a href="https://docs.google.com/document/d/1BqtL-nG53rxWOI5RO0pItSRPowZVnYJ_gBEQCJ5EeUE/edit"&gt;certain edge cases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another thing about PSI is that, for some sites, you can get a &lt;a href="https://developers.google.com/web/tools/chrome-user-experience-report"&gt;CRUX (Chrome User Experience Report)&lt;/a&gt;. This is a report that uses real user monitoring (RUM) and bases the page metrics on how real users interact with a page. This is the most accurate type of data and produces the metrics that most directly reflect user experience of performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webpage-tests" class="anchor"&gt;
  &lt;/a&gt;
  Webpage Tests
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zma-Oa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq8oofcd1sj9wpntozc3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zma-Oa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq8oofcd1sj9wpntozc3.png" alt="Webpage test landing page screenshot."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last automated performance tool is &lt;a href="https://www.webpagetest.org/"&gt;webpage test&lt;/a&gt;. This tool uses packet-level throttling which means it runs performance benchmarks against real hardware in a real location. As a result, it isn't influenced by your local machine the way devtools throttling is.&lt;/p&gt;

&lt;p&gt;It simulates the connection, but it does so at the operating system level, making it more accurate. However, it can also introduce &lt;a href="https://docs.google.com/document/d/1BqtL-nG53rxWOI5RO0pItSRPowZVnYJ_gBEQCJ5EeUE/edit"&gt;more variance&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-this-matter" class="anchor"&gt;
  &lt;/a&gt;
  Why does this matter?
&lt;/h2&gt;

&lt;p&gt;It seems like there are a lot of tools to test performance, but why does this matter? Do milliseconds really make a difference?&lt;/p&gt;

&lt;p&gt;Well, Google is an ecosystem. And most of us are familiar with it because of Google search. Ranking highly on google search is important for a lot of websites. Per Google, site performance impacts a site's ranking.&lt;/p&gt;

&lt;p&gt;Specifically, site performance and its impact on ranking is based on core web vitals. So we'll talk about that in the next post.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
