<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why I love building with Next.js — a fireside chat with Cassidy Williams of Netlify</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Thu, 02 Sep 2021 19:07:50 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/why-i-love-building-with-next-js-a-fireside-chat-with-cassidy-williams-of-netlify-40pj</link>
      <guid>https://dev.to/whitep4nth3r/why-i-love-building-with-next-js-a-fireside-chat-with-cassidy-williams-of-netlify-40pj</guid>
      <description>&lt;p&gt;In this fireside chat, I joined &lt;a href="https://twitter.com/cassidoo"&gt;Cassidy Williams of Netlify&lt;/a&gt; to talk about the performance benefits of &lt;a href="https://nextjs.org/docs"&gt;Next.js&lt;/a&gt;, and how developers can make the most of the framework.&lt;/p&gt;

&lt;p&gt;Next.js has a lot of options when it comes to data fetching methods, which can be both a blessing and a curse. Learn about how to think about data fetching methods in Next.js to build performant static sites that create dynamic user experiences. We also cover why we personally use Next.js for projects, the best way to style a Next.js app — and I decided to bring back the phrase “surf the web.”&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BqQcgHEif5s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more-about-nextjs"&gt;
  &lt;/a&gt;
  Learn more about Next.js
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt="whitep4nth3r"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/a-next-js-complete-beginner-tutorial-using-the-spotify-api-3756" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Next.js complete beginner tutorial using the Spotify API&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor ・ Aug 5 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt="whitep4nth3r"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/how-i-set-up-my-new-next-js-projects-with-a-handy-bash-script-58o0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I set up my new Next.js projects with a handy bash script&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor ・ Jul 9 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/contentful" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XBFNG6UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--leQM9WN9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/390/6233b08f-25c6-4d56-98bb-10a1ea51bad0.png" alt="Contentful"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/contentful/how-to-add-algolia-instantsearch-to-your-next-js-application-4lcg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to add Algolia InstantSearch to your Next.js application&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor for Contentful ・ Jul 5 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt="whitep4nth3r"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/how-to-avoid-using-relative-path-imports-in-next-js-eki" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to avoid using relative path imports in Next.js&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor ・ Jul 12 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/contentful" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XBFNG6UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--leQM9WN9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/390/6233b08f-25c6-4d56-98bb-10a1ea51bad0.png" alt="Contentful"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/contentful/paginating-your-contentful-blog-posts-in-next-js-with-the-graphql-api-10f6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Paginating your Contentful blog posts in Next.js with the GraphQL API&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor for Contentful ・ Apr 26 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>nextjs</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React+Typescript App with ESBuild</title>
      <author>Mrinalini Sugosh (Mrina)</author>
      <pubDate>Thu, 02 Sep 2021 18:42:38 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/react-typescript-app-with-esbuild-1bmo</link>
      <guid>https://dev.to/ibmdeveloper/react-typescript-app-with-esbuild-1bmo</guid>
      <description>&lt;p&gt;There is a project called &lt;a href="https://esbuild.github.io/"&gt;ESBuild&lt;/a&gt;, basically a bundler like web-pack or rollup, and it has been making a lot of noise in the Front-End Development space. Why? Primarily because of its promise to deliver extremely high performance. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OosmKl1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1vlbt8aykw9t19t3lt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OosmKl1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1vlbt8aykw9t19t3lt1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#source-httpsesbuildgithubio"&gt;
  &lt;/a&gt;
  Source - &lt;a href="https://esbuild.github.io/"&gt;https://esbuild.github.io/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;I would say this is especially great for large projects or large teams. In fact, it even supports Typescript out of the box which is why I am interested in it. In this blog, we will explore ESBuild and use it to build a simple Typescript+React app. &lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-project"&gt;
  &lt;/a&gt;
  Setup the Project
&lt;/h2&gt;

&lt;p&gt;First, let's create a new directory and initialize a new &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir sample-ts-react-app
cd sample-ts-react-app/
npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NND6hHml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t683imzis60eus0uhf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NND6hHml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t683imzis60eus0uhf2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the only thing we need to install to set up our bundler is &lt;code&gt;esbuild&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i esbuild
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KcaNY8dP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7kskzfrtgkzfpn3gm0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcaNY8dP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7kskzfrtgkzfpn3gm0s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are building a react app we are going to install React and ReactDom along with the type definitions for these two packages and the typescript compiler as folllows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react react-dom @types/react @types/react-dom typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n2ufAzjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk0qf38flky6xz466fpq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2ufAzjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk0qf38flky6xz466fpq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the installation is complete, let's use the Typescript Compiler to initialize a new &lt;code&gt;tsconfig.json&lt;/code&gt;. Here we will also specify that all of our source files will be under the &lt;code&gt;src/&lt;/code&gt; folder and that we will be using &lt;code&gt;react&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tsc --init --rootDir src --jsx react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vH7TkwF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix408d3fugrgav8zy7mg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vH7TkwF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix408d3fugrgav8zy7mg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! We have setup our project, now let's open up the the folder in an IDE, I am using Visual Studio, but you can use one of your choice. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-up-the-sample-app"&gt;
  &lt;/a&gt;
  Write up the sample app
&lt;/h2&gt;

&lt;p&gt;Let's create application entry point under the&lt;code&gt;src&lt;/code&gt; folder as &lt;code&gt;app.tsx&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3I3yajHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t9p0kqllk29fdioaget.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3I3yajHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t9p0kqllk29fdioaget.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's write some basic code. Here we import some of the common libraries and hooks including: &lt;code&gt;React&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;useState&lt;/code&gt;, and &lt;code&gt;ReactDOM&lt;/code&gt;. Our app will consist of a simple component that will take a message as a prop, have an internal state for a counter that is initialized to 0, a callback function that increments the count by 1, and simple UI that shows this information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's render out this app component with a simple message using the ReactDOM onto the root element within our html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World! Simple Counter App built on ESBuild + React + Typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course the next step is to actually create this HTML that our app will sit on. We will do this by creating a sibling folder to &lt;code&gt;src&lt;/code&gt; called &lt;code&gt;public/index.html&lt;/code&gt;. This file will contain a simple div with an id root which we will render the previous React App component to and a script to load the JS Bundler.&lt;/p&gt;

&lt;p&gt;That's it for our app!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bundle-app-with-esbuild"&gt;
  &lt;/a&gt;
  Bundle App with ESBuild
&lt;/h2&gt;

&lt;p&gt;Next step is to use ESBuild to bundle our app.tsx. If you have worked with webpack or rollup, you know this process. &lt;/p&gt;

&lt;p&gt;Before we bundle, I will first add a script in the &lt;code&gt;package.json&lt;/code&gt; called &lt;code&gt;build&lt;/code&gt; which will invoke ESBuild and pass in the entry point for the app along with a few flags (bundle, minify, and sourcemap) and an output target &lt;code&gt;public/bundle.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//pacakage.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbuild src/app.tsx --bundle --minify --sourcemap --outfile=public/bundle.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oila and just like that when you run &lt;code&gt;npm run build&lt;/code&gt; we should be able to complete building our app almost in a blink of an eye (30ms!!!)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04B_eCv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhknxqq4shgoxf82m75j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04B_eCv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhknxqq4shgoxf82m75j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally running the app should be simple enough. Just point to the index.html file and it should run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;open index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-does-es-build-achieve-such-speeds"&gt;
  &lt;/a&gt;
  How does ES Build achieve such speeds?
&lt;/h2&gt;

&lt;p&gt;ESBuild compiler actually targets the Javascript Ecosystem but it is written in Go. Now I am personally a fan of bootstrap projects, for example, the typescript compiler being written in typescript. However, this level of performance improvement a Go compiler for Javascript project does make it worthwhile for me.&lt;/p&gt;

&lt;p&gt;You might have also noticed that ESBuild is also much more lower level when compared to something like webpack. If you want the same level of developer ergonomics as webpack, like webpack dev-server, you might have to combine ESBuild with something like &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; or &lt;a href="https://www.snowpack.dev/"&gt;Snowpack&lt;/a&gt;. In fact, these tools actually use ESBuild under the hood!&lt;/p&gt;

&lt;p&gt;All in all, ESBuild is still a great starting point to test how fast you can potentially build your application. Of course, you are free to explore using this skeleton code and build on it. I am personally looking forward to hearing your thoughts and experiences on ESBuild!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>esbuild</category>
    </item>
    <item>
      <title>The 5-minute trick </title>
      <author>Clever coder</author>
      <pubDate>Thu, 02 Sep 2021 18:41:12 +0000</pubDate>
      <link>https://dev.to/yusuf_software/the-5-minute-trick-312k</link>
      <guid>https://dev.to/yusuf_software/the-5-minute-trick-312k</guid>
      <description>&lt;p&gt;The 5-minute trick&lt;br&gt;
Learning to code is hard. In fact, learning any new technology / programming language / framework / library is hard.&lt;/p&gt;

&lt;p&gt;It's also important - that we keep learning. The development industry is always evolving, and the way we create websites today is vastly different from how we did it 20, 10 or even 5 years ago. That's why being able to learn new stuff and adapt to changes is critical: to increase your hireability and make sure you're always doing the best you can.&lt;/p&gt;

&lt;p&gt;But then comes the tricky part, because how are you supposed to stay on top of everything and actually pick up new skills?&lt;/p&gt;

&lt;p&gt;The answer is consistency.&lt;/p&gt;

&lt;p&gt;You simply need to tap away at something, bit by bit, for a long time. It's the only way to properly learn and store new concepts in your brain. Especially difficult concepts like coding.&lt;/p&gt;

&lt;p&gt;That raises the next question, though: how can you stay consistent? It's a great idea in theory, but you need a strategy to carry it out.&lt;/p&gt;

&lt;p&gt;Enter: The 5-minute trick.&lt;/p&gt;

&lt;p&gt;And what's that, I hear you ask? Well the name is something I just coined, so you won't get far Googling it. But it's actually a pretty simple strategy I've used to improve my skills for years.&lt;/p&gt;

&lt;p&gt;The idea is that, whatever you're learning or want to get better at, you set aside 5 minutes every single day to work on that thing. Easy, right? And when I say work, I mean actively working on it (not just consuming a video/article etc.).&lt;/p&gt;

&lt;p&gt;The point is to force your brain to enter "learning mode" every day. And 5 minutes is the perfect number, because no day exists where you don't have 5 minutes to yourself. Regardless of your responsibilities, job, family etc., I believe that 5 daily minutes is doable for everybody.&lt;/p&gt;

&lt;p&gt;How you use the time isn't as important, and depends on what you're learning. If you're learning to code, 5 minutes is enough to get you to open your code editor and write a few lines of code. It's enough to have you play around with one new concept you aren't familiar with. And here's the key: Now that you're in "code-mode", there's nothing stopping you from keeping it going.&lt;/p&gt;

&lt;p&gt;So if you got the time, absolutely keep crushing it and blow right past the 5 required minutes. That will only accelerate your growth. On the flipside, if you've had a busy day/week and have to stop after 5 minutes, that's fine too - you'll be back tomorrow.&lt;/p&gt;

&lt;p&gt;I find this strategy incredibly useful to help me stay consistent. By building the daily habit, picking up new skills become second nature. And that's exactly what will help you excel in your development career 🔥&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>mobile</category>
      <category>newbie</category>
    </item>
    <item>
      <title>How to Create Stopwatch Using HTML, CSS and JavaScript.</title>
      <author>Ajay Sharma</author>
      <pubDate>Thu, 02 Sep 2021 18:09:39 +0000</pubDate>
      <link>https://dev.to/ajaysharma12799/how-to-create-stopwatch-using-html-css-and-javascript-1c99</link>
      <guid>https://dev.to/ajaysharma12799/how-to-create-stopwatch-using-html-css-and-javascript-1c99</guid>
      <description>&lt;p&gt;Hello Everyone, In this Post We Will be Seeing How to Create Stopwatch Using HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;Here is The Live Link of Page &lt;a href="https://stopwatch-using-js.netlify.app/"&gt;https://stopwatch-using-js.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow Me on LinkedIn &lt;a href="https://www.linkedin.com/in/ajaysharma12799/"&gt;https://www.linkedin.com/in/ajaysharma12799/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow Me on Github &lt;a href="https://www.github.com/ajaysharma12799/"&gt;https://www.github.com/ajaysharma12799/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Steps to Create :-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose Any Text Editor (VSCode Recommended).&lt;/li&gt;
&lt;li&gt;Create 3 Files in Current Project Directory, index.html, style.css and app.js.&lt;/li&gt;
&lt;li&gt;Use Below HTML, CSS and JS Code To Build Your Page.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Stopwatch&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
        &amp;lt;div class="watch"&amp;gt;
            &amp;lt;div class="hourDiv"&amp;gt;
                &amp;lt;h3 class="hour"&amp;gt;01&amp;lt;/h3&amp;gt;
                &amp;lt;p class="hourTitle"&amp;gt;Hour&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="minuteDiv"&amp;gt;
                &amp;lt;h3 class="minute"&amp;gt;30&amp;lt;/h3&amp;gt;
                &amp;lt;p class="minuteTitle"&amp;gt;Min&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="secondDiv"&amp;gt;
                &amp;lt;h3 class="second"&amp;gt;01&amp;lt;/h3&amp;gt;
                &amp;lt;p class="secondTitle"&amp;gt;Sec&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="milliSecondDiv"&amp;gt;
                &amp;lt;h3 class="milliSecond"&amp;gt;99&amp;lt;/h3&amp;gt;
                &amp;lt;p class="milliSecondTitle"&amp;gt;Millis&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="buttons"&amp;gt;
            &amp;lt;button class="start button"&amp;gt;Start&amp;lt;/button&amp;gt;
            &amp;lt;button class="pause button"&amp;gt;Pause&amp;lt;/button&amp;gt;
            &amp;lt;button class="stop button"&amp;gt;Reset&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="./app.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        let bodyWidth = screen.width;
        if(bodyWidth === 250) {
            alert("Web App Not Compatiable Choose Device Above 300 Width Otherwise UI Design Will be Messy.");
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Zen+Loop&amp;amp;display=swap');
:root {
    --mainColor1: #3DBE29;
    --mainColor2: #EDC126; 
}
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html {
    height: 100%;
    width: 100%;
}
body {
    font-family: 'Zen Loop', cursive;
    background-color: #CAD5E2;
    text-transform: uppercase;
    min-height: 100%;
    overflow: hidden;
}
.container {
    width: 60%;
    height: 100%;
    margin: 0 auto;
}
.watch {
    text-align: center;
    font-size: 5rem;
    font-weight: lighter;
    color: #fff;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.hourDiv, 
.minuteDiv, 
.secondDiv, 
.milliSecondDiv {
    width: 20%;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
}
.hour, 
.minute, 
.second, 
.milliSecond {
    padding: 5px;
    background-color: var(--mainColor1);
}
.hourTitle, 
.minuteTitle, 
.secondTitle, 
.milliSecondTitle {
    background-color: var(--mainColor2);
    font-size: 3rem;
    padding: 5px;
    font-weight: bold;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
}
.button {
    border: none;
    border-radius: 10px;
    font-size: 3rem;
    padding: 10px;
    width: 180px;
    font-weight: bold;
    font-family: 'Zen Loop', cursive;
}
.start {
    margin-right: 5%;
    color: var(--mainColor1);
    transition: 0.5s ease-in-out;
}
.start:hover {
    background-color: var(--mainColor2);
    color: #fff;
}
.pause {
    transition: 0.5s ease-in-out;
}
.pause:hover {
    background-color: #E03B8B;
    color: #fff;
}
.stop {
    margin-left: 5%;
    color: var(--mainColor2);
    transition: 0.5s ease-in-out;
}
.stop:hover {
    background-color: var(--mainColor1);
    color: #fff;
}
.buttons {
    margin-top: 2%;
    margin-bottom: 2%;
    display: flex;
    justify-content: center;
    align-items: center;
}
@media screen and (max-width: 768px) {
    .container {
        width: 100%;
    }
    .watch {
        font-size: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .hourTitle, 
    .minuteTitle, 
    .secondTitle, 
    .milliSecondTitle {
        font-size: 2rem;
    }
    .button {
        margin-top: 5%;
        margin-bottom: 5%;
        width: 50%;
    }
    .start, .stop {
        margin: 0;
    }
    .buttons {
        margin-top: 10%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }
}
@media screen and (max-width: 550px) {
    .watch {
        font-size: 2rem;
    }
    .hourTitle, 
    .minuteTitle, 
    .secondTitle, 
    .milliSecondTitle {
        font-size: 1.5rem;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Timer Field
let hourElement = document.querySelector(".hour");
let minuteElement = document.querySelector(".minute");
let secondElement = document.querySelector(".second");
let millisecondElement = document.querySelector(".milliSecond");

// Button Field
let startButton = document.querySelector(".start");
let pauseButton = document.querySelector(".pause");
let stopButton = document.querySelector(".stop");

// Counter Variable
let hour = 00;
let minute = 00;
let second = 00;
let millisecond = 00;
let interval;

window.onload = () =&amp;gt; clearFields();

startButton.onclick  = function() {
    clearInterval(interval); // If Some Error Happen and Interval is Setup, It Will Clear That Interval
    interval = setInterval(startTimer, 10); // 
};
pauseButton.onclick = function() { 
    clearInterval(interval); // On Clicking Pause Buttom We Will Clear Interval
};
stopButton.onclick = function() {
    clearInterval(interval); // Clear Interval
    clearFields(); // Clear Timer Fields
}
function startTimer() {
    millisecond++;
    if(millisecond &amp;lt; 9) {
        millisecondElement.innerText = "0" + millisecond;
    }
    if(millisecond &amp;gt; 99) {
        second++;
        secondElement.innerText = "0" + second;
        millisecond = 0;
        millisecondElement.innerText = "0" + millisecond;
    }
    if(second &amp;gt; 60) {
        minute++;
        minuteElement.innerText = "0" + minute;
        second = 0;
        secondElement.innerText = "0" + second;
    }

    if(millisecond &amp;gt; 9) {
        millisecondElement.innerText = millisecond;
    }
    if (second &amp;gt; 9){
        secondElement.innerText = second;
    }
    if (minute &amp;gt; 9){
        minuteElement.innerText = minute;
    }
    if(hour &amp;gt; 9) {
        hourElement.innerText = hour;
    }
}

function clearFields() {
    hourElement.innerText = "00";
    minuteElement.innerText = "00";
    secondElement.innerText = "00";
    millisecondElement.innerText = "00";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Data type in python</title>
      <author>oladejo abdullahi</author>
      <pubDate>Thu, 02 Sep 2021 17:54:07 +0000</pubDate>
      <link>https://dev.to/maxwizardth/data-type-in-python-52mb</link>
      <guid>https://dev.to/maxwizardth/data-type-in-python-52mb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;Variables are containers for storing data values.&lt;br&gt;
Python has no command for declaring a variable. the moment  you assign a value to any word or letter, variable is created.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#example1"&gt;
  &lt;/a&gt;
  Example1
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;codes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Maxwizard"&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"25years"&lt;/span&gt;
&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;07045225718&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So in example1 above x,name,age and phone are variable name. and can be called anytime to refers to the value they stored.&lt;br&gt;
i.e whenver you called 'x' you are actually mean 6. while "phone" always means "07045225718".&lt;br&gt;
Variables do not need to be declared with any particular type,&lt;br&gt;
 and can even change type after they have been set. let assume &lt;br&gt;
 we need to call them we will use print() function. Note that &lt;br&gt;
 &lt;code&gt;print()&lt;/code&gt; is one of the function to display your output when you write codes. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example2"&gt;
  &lt;/a&gt;
  Example2
&lt;/h3&gt;

&lt;p&gt;write the following code and run it.&lt;br&gt;
&lt;strong&gt;codes&amp;gt;&amp;gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Maxwizard"&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"25years"&lt;/span&gt;
&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;07045225718&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&amp;gt;&amp;gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Maxwizard
07045225718
15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;can you see the result, we just ask the interpreter to print name,phone and x+y. and it printed what they stored.&lt;/p&gt;

&lt;p&gt;**How to Declare Variable Name&lt;br&gt;
🔥 Variable Names&lt;br&gt;
A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rules for R variables:&lt;/strong&gt;&lt;br&gt;
🔥 A variable name must start with a letter&lt;br&gt;
🔥 A variable name cannot start with a number&lt;br&gt;
🔥 A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )&lt;br&gt;
🔥 Variable names are case-sensitive (age, Age and AGE are three different variables)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;variable can be categorize into different categories base on the type of data they stored. they are:&lt;/p&gt;

&lt;p&gt;Built-in Data Types&lt;br&gt;
In programming, data type is an important concept.&lt;br&gt;
Variables can store data of different types, and different types can do different things.&lt;br&gt;
the following data types are built-in by default, in these categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Text Type:   str&lt;/li&gt;
&lt;li&gt;Numeric Types:   int, float, complex&lt;/li&gt;
&lt;li&gt;Set Types:   set, frozenset&lt;/li&gt;
&lt;li&gt;Boolean Type:    bool&lt;/li&gt;
&lt;li&gt;Binary Types:    bytes, bytearray, memoryview&lt;/li&gt;
&lt;li&gt;Sequence Types:  list, tuple, range&lt;/li&gt;
&lt;li&gt;Mapping Type:    dict&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;💥 1. Character/String: they are non-number that is they are always alphabetic word or alpha-numeric or symbols.&lt;br&gt;
Examples: "a", "everyone",'of' "u2CanCode","*$%#@^!"&lt;/p&gt;

&lt;p&gt;💥 2. floats&lt;br&gt;
– These are the decimal numbers  default type when dealing with numbers.&lt;br&gt;
Examples: 3.531, 1.0, 42.5, 4/9&lt;/p&gt;

&lt;p&gt;💥 3. Integers: these are the counting number which must be whole number. &lt;br&gt;
– Examples: 1, 2, 42&lt;/p&gt;

&lt;p&gt;💥 4. Complex: they are the imaginary number where their i represent the square root of -1&lt;br&gt;
– Example: 4 + 2i , 5 - 5i&lt;/p&gt;

&lt;p&gt;💥 5. Boolean: &lt;br&gt;
– Two possible values: TRUE and FALSE&lt;br&gt;
– You can also use T and F, but this is not recommended.&lt;br&gt;
– NA is also considered logical.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;

&lt;p&gt;💥 6. List: these are used to store multiple items in a single variable.they are created using square brackets "[]":&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples:
&lt;/h4&gt;

&lt;p&gt;name=["maxwizard","sesan",'Timothy','Wareez']&lt;br&gt;
age=[12,14,18,20,23]&lt;br&gt;
💥 7. Tuple: these are used to store multiple items in a single variable. they are created using round bracket. and they are usullay ordered and unchangeable.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h5&gt;

&lt;p&gt;Code&amp;gt;&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jss1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"jss2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"jss3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"ss1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"ss2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"ss3"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;school&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'oxford'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"uni-Ibadan"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;school&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result&amp;gt;&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"jss1","jss2","jss3","ss1","ss2","ss3"
oxford',"uni-Ibadan"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💥 8. Set: these are used to store multiple items in a single &lt;br&gt;
A set is a collection which is both unordered and unindexed.&lt;br&gt;
Sets are written with curly brackets "{}".&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h5&gt;

&lt;p&gt;class_in_secondary={"jss1","jss2","jss3","ss1","ss2","ss3"}&lt;br&gt;
school={'oxford',"uni-Ibad"}&lt;br&gt;
print(school)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;💥 9. Dictionaries are used to store data values in key:value pairs.&lt;br&gt;
A dictionary is a collection which is unordered, changeable and does not allow duplicates.&lt;br&gt;
Dictionaries are written with curly brackets, and have keys and values:&lt;br&gt;
Example&lt;br&gt;
** Codes&amp;gt;&amp;gt;**&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;biodata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Oladejo Abdullahi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"sex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"male"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"single"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"school"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"university of Ibadan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;biodata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;biodata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"school"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;biodata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&amp;gt;&amp;gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{'name': 'Oladejo Abdullahi', 'sex': 'male', 'status': 'single', 'school': 'university of Ibadan', 'Age': 25}
University of Ibadan
single

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;study the codes and the results above. the keys are : sex,status,school and age. while their values are what you see after column. &lt;br&gt;
so the wholecodes is like saying &lt;br&gt;
&lt;strong&gt;"name":&lt;/strong&gt; "Oladejo Abdullahi" means name=Oladejo&lt;br&gt;
&lt;strong&gt;"sex"&lt;/strong&gt;:"male" means sex=male&lt;br&gt;
&lt;strong&gt;"status"&lt;/strong&gt;: "single" means status = single&lt;br&gt;
&lt;strong&gt;"school"&lt;/strong&gt;: "university of Ibadan" means school = university&lt;br&gt;
&lt;strong&gt;"Age"&lt;/strong&gt;:25 means age=25&lt;br&gt;
the only different is that you have to join it with biodata. &lt;br&gt;
Above are the most important data type that we used in python. &lt;br&gt;
we shall do fully discussion on each one of them in the next lesson. I hope you find this helpful?? consider to share and like you can also comment below if you have addition or question. chat me up on 09153036869. or on &lt;a href="https://web.facebook.com/abdullai.oladejo"&gt;Facebook&lt;/a&gt; you can also follow me on &lt;a href="https://www.instagram.com/maxwizardth/"&gt;Instagram&lt;/a&gt; for more update&lt;/p&gt;

</description>
      <category>html</category>
      <category>devops</category>
    </item>
    <item>
      <title>Game setup in C++. add() and remove() methods</title>
      <author>Tristan Elliott</author>
      <pubDate>Thu, 02 Sep 2021 17:39:48 +0000</pubDate>
      <link>https://dev.to/theplebdev/game-setup-in-c-add-and-remove-to-an-array-3j77</link>
      <guid>https://dev.to/theplebdev/game-setup-in-c-add-and-remove-to-an-array-3j77</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This series is going to be dedicated to first understanding the basics of C++ syntax and then evolve into learning data structures and algorithms in C++. For this series I will be reading &lt;code&gt;Data Structures and algorithms in C++ Fourth edition&lt;/code&gt; by Adam Drozek. The book is very expensive on Amazon by this is the internet, so I am sure you can find a cheaper PDF version.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#quick-note"&gt;
  &lt;/a&gt;
  quick note
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I will be continuing on from my last post where we built a GameEntry and a Score class. In this section will are going to implement the add() and remove() methods of the Score class.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#adde-method"&gt;
  &lt;/a&gt;
  add(e) method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The implementation of the add method is as follows
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void Scores::add(const GameEntry&amp;amp; e) {
    int newScore = e.getScore();
    if (numEntries == maxEntries) {
        if (newScore &amp;lt;= entries[numEntries - 1].getScore()) {
            return;
        }
    }
    else {
        numEntries++;

        int i = numEntries - 2; // the second to last element
        while (i &amp;gt;= 0 &amp;amp;&amp;amp; newScore &amp;gt; entries[i].getScore()) {
            entries[i + 1] = entries[i];
            i--;
        }
        entries[i + 1] = e;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The basic logic of the code above follows these steps:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) :&lt;/strong&gt; Check to see if the array is already full.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) :&lt;/strong&gt; If the array is full, then check whether the score at the last entry in the array(which is as entries[maxEntries -1]) is at least as large as the newScore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) :&lt;/strong&gt; If the newScore is not larger than the last element's score, then we return immediately since newScore is not high enough to replace any of the existing high scores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) :&lt;/strong&gt; If the array is not full yet, we know that newScore will be added to the array so increment the numEntries value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) :&lt;/strong&gt; Identify all entries whose scores are smaller than newScore's score and shift them one entry to the right to avoid overwriting existing array entries&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) :&lt;/strong&gt; The loop continuously until we encounter an entry whose score is not smaller than newScore's score or we fall off the frontend of the array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removee-method"&gt;
  &lt;/a&gt;
  remove(e) method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The implementation of the remove method is as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GameEntry Scores::remove(int i) throw(std::out_of_range){
    if (i &amp;lt; 0 || i &amp;gt; numEntries) {// valid index check
        throw "there is a error";
    }
    GameEntry e = entries[i];
    for (int j = i+1; j &amp;lt; numEntries; j++) {
        entries[j - 1] = entries[i]; //moves everything over;
    }
    numEntries--;
    return e;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The basic logic of the code above follows these steps:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) :&lt;/strong&gt; Check to see if the index i is outside the boundary at the entries array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) :&lt;/strong&gt; If true throw an exception&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) :&lt;/strong&gt; Otherwise the entries array is updated to remove the object at index i&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) :&lt;/strong&gt; All objects previously stored at indices higher than i are "shifted left" to fill in for the removed object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With those two methods implemented, we finally have our array class all setup and ready to use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Thank you for taking the time out of your day to read this blog post of mine. If you have any questions or concerns please comment below or reach out to me on &lt;a href="https://twitter.com/TristAndroidDev"&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>LeetCode Sep' 21 Challenge Series | Day 1 | Largest Time for Given Digits</title>
      <author>geetcloud</author>
      <pubDate>Thu, 02 Sep 2021 17:29:10 +0000</pubDate>
      <link>https://dev.to/geetcloud/leetcode-sep-21-challenge-series-day-1-largest-time-for-given-digits-1glp</link>
      <guid>https://dev.to/geetcloud/leetcode-sep-21-challenge-series-day-1-largest-time-for-given-digits-1glp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#largest-time-for-given-digits"&gt;
  &lt;/a&gt;
  Largest Time for Given Digits
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;p&gt;Given an array &lt;code&gt;arr&lt;/code&gt;  of 4 digits, find the latest 24-hour time that can be made using each digit  &lt;strong&gt;exactly once&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;24-hour times are formatted as  &lt;code&gt;"HH:MM"&lt;/code&gt;, where  &lt;code&gt;HH&lt;/code&gt; is between &lt;code&gt;00&lt;/code&gt; and &lt;code&gt;23&lt;/code&gt;, and &lt;code&gt;MM&lt;/code&gt; is between &lt;code&gt;00&lt;/code&gt; and &lt;code&gt;59&lt;/code&gt;. The earliest 24-hour time is  &lt;code&gt;00:00&lt;/code&gt;, and the latest is  &lt;code&gt;23:59&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Return  &lt;em&gt;the latest 24-hour time in &lt;code&gt;"HH:MM"&lt;/code&gt;  format&lt;/em&gt;. If no valid time can be made, return an empty string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr = [1,2,3,4]
Output: "23:41"
Explanation: The valid 24-hour times are "12:34", "12:43", "13:24", "13:42", "14:23", "14:32", "21:34", "21:43", "23:14", and "23:41". Of these times, "23:41" is the latest.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr = [5,5,5,5]
Output: ""
Explanation: There are no valid 24-hour times as "55:55" is not valid.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr = [0,0,0,0]
Output: "00:00"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr = [0,0,1,0]
Output: "10:00"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; `arr.length == 4`
 `0 &amp;lt;= arr[i] &amp;lt;= 9`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h3&gt;

&lt;p&gt;Our main goal is to solve the problem and at the same time achieve the best linear time complexity with minimal space complexity. If you are a beginner to problem solving or trying data structure problems, I suggest you start with a brute force approach and then try to optimize your solution to the best time/space complexity.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h3&gt;

&lt;p&gt;Let's start analysing the problem statement. Given the array of 4 digits, we need to find out the latest 24-hour time that can be made using each digit "only once".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PTEpuy_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/eYFXkFqaTrAAAAAi/thinking-think.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTEpuy_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/eYFXkFqaTrAAAAAi/thinking-think.gif" alt="thinking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before jumping into a solution or pseudocode, read the problem statement a couple of times and make sure to understand it well.
&lt;/li&gt;
&lt;li&gt;Based on the problem statement, we understand that we need to compute all the possible combinations of the four digits to find the answer. This will give us a hint immediately that this problem falls under "Dynamic Programming".  It's a very interesting topic to learn all the different approaches to tackle these kind of similar "Permutation &amp;amp; Combination" problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G1tmwCsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630558872941/fzgc3z44d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G1tmwCsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630558872941/fzgc3z44d.png" alt="White Simple Music Icon Etsy Banner (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try to identify the  keywords like "each digit" can be used "only once".  This is our first clue.  We exactly have four digits to make our "hh:mm" latest hour (final answer).&lt;/li&gt;
&lt;li&gt;Second clue we can think of is to check each digit or hold the digit occurrences of all hh:mm combinations to compare with the array to get our final answer.&lt;/li&gt;
&lt;li&gt;Since we want the latest hour, max hour and minute in a day (24 hour time format) we need to start from the max (23 hr and 59 minute respectively) and iterate backwards to get the latest hour.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So with all these hints and analysis, let's start writing our algorithm or pseudocode.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#algorithm-pseudocode"&gt;
  &lt;/a&gt;
  Algorithm | Pseudocode
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Start iterating from the max hour:minute max time (23:59) and hold all of the 4 digits combinations for each iteration&lt;/li&gt;
&lt;li&gt;Initialise a latest_hour boolean flag at the start to "true".&lt;/li&gt;
&lt;li&gt;If the 4 digits of the single iteration not matching with the 4 elements of the input array, we have not reached the latest_hour. So set the latest_hour flag to false.&lt;/li&gt;
&lt;li&gt;Iterate and continue till we find the latest hour. i.e until the 4 digits combinations match with the 4 elements of the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start writing the solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Loop through every hour and digit combination. If we find the exact&lt;br&gt;
four array elements. That's it. That is our answer. &lt;br&gt;
&lt;strong&gt;The Latest 24-hour Time!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#solution-in-java"&gt;
  &lt;/a&gt;
  Solution (in Java)
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;largestTimeFromDigits&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;latest_hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;                

                   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(--&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;latest_hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;

                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latest_hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
                      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%02d:%02d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h3&gt;

&lt;p&gt;Time Complexity =&amp;gt; O(23 x 59 x 4)  ==&amp;gt; O(1)&lt;br&gt;
Space Complexity =&amp;gt;  O(1)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This problem is a very good example of Dynamic Programing. Do check out for more examples in this category for further learning. Dynamic Programming has two methods, Top-down and Bottom-up approach. Be on the lookout for a future article where I explain the two and their differences!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;The LeetCode Problem in this article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/554/week-1-september-1st-september-7th/3445/"&gt;https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/554/week-1-september-1st-september-7th/3445/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LeetCode September 2021 Challenge&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/"&gt;https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h3&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share! Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for related content.&lt;/p&gt;

&lt;p&gt;Happy learning! &lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>leetcode</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>MoSCoW: The Best Code Review Technique You're Not Using</title>
      <author>Simon Barker</author>
      <pubDate>Thu, 02 Sep 2021 17:28:51 +0000</pubDate>
      <link>https://dev.to/allthecode/moscow-the-best-code-review-technique-you-re-not-using-2b0e</link>
      <guid>https://dev.to/allthecode/moscow-the-best-code-review-technique-you-re-not-using-2b0e</guid>
      <description>&lt;p&gt;We've all been there. You've got comments on your code from a reviewer and it feels like you might as well rewrite everything from scratch. It's demoralising and feels like a waste of time, especially since you know it works and fulfils the requirements of the task. &lt;/p&gt;

&lt;p&gt;Situations like this can lead to you cherry picking your reviewers, having endless back and forths about a &lt;code&gt;forEach&lt;/code&gt; vs a &lt;code&gt;for&lt;/code&gt;, and generally feeling a bit fed up with the whole process.&lt;/p&gt;

&lt;p&gt;Well, let me introduce you to a system that lets the reviewer express their thoughts in a manner that indicates exactly how important each comment is and how much attention you need to pay to it. &lt;/p&gt;

&lt;p&gt;MoSCoW, taken from the world of project management is the name given to a list of requirements laid out as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Musts&lt;/li&gt;
&lt;li&gt;Shoulds&lt;/li&gt;
&lt;li&gt;Coulds&lt;/li&gt;
&lt;li&gt;Woulds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won't dwell on what they mean exactly in the world they originate from because it's not relevant and the system is so self explanatory you've probably already worked out where I'm going.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mscw"&gt;
  &lt;/a&gt;
  M/S/C/W
&lt;/h2&gt;

&lt;p&gt;Each comment should begin with &lt;code&gt;M:&lt;/code&gt;, &lt;code&gt;S:&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt; or &lt;code&gt;W:&lt;/code&gt; and then the comment. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Must&lt;/strong&gt;: this has to be changed to be approved. These are errors that either go against the coding standards of the team or are clearly just incorrect and will lead to a bug. These can't be ignored.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Should&lt;/strong&gt;: these are things that would be an obvious and clear improvement. You have to give a reason to ignore this and the code reviewer has to agree. A third party can be brought in if needs be.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Could&lt;/strong&gt;: these are for niceties that the reviewer thinks would improve the codebase in some way but are probably going above and beyond what the task requires. If they have an idea for a slightly better function name or they want to leave a comment but aren't all that bothered if you take the advice then this is the prefix to use. These can be ignored without a reason given.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Would&lt;/strong&gt;: these are reserved for the "I wouldn't have done it this way" comments that require lots of rework but are 100% personal preference. These rarely get used because a would is really just the reviewer being given space to express their thoughts. An ideal usage of this is to educate a junior member of the team and perhaps follow up with a conversation around it post review.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the example above about a for loop I would say:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;S: Use forEach here to avoid off by one errors and aid understanding of loop conditions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Introduce this at your next team meeting, get a clear understanding of your musts and a rough idea of some shoulds and you will see how liberating this is for everyone involved in the code review process.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codereview</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Make everyone in your project write beautiful commit messages using commitlint and commitizen 🚀</title>
      <author>Sohan Dutta</author>
      <pubDate>Thu, 02 Sep 2021 17:21:04 +0000</pubDate>
      <link>https://dev.to/sohandutta/make-everyone-in-your-project-write-beautiful-commit-messages-using-commitlint-and-commitizen-1amn</link>
      <guid>https://dev.to/sohandutta/make-everyone-in-your-project-write-beautiful-commit-messages-using-commitlint-and-commitizen-1amn</guid>
      <description>&lt;p&gt;When working on a project many people don't have the time to write meaningful commit messages. For me, I have to work with many other developers which involve reviewing their commits, reviewing merge requests, creating and fixing stuff, etc. And all that simultaneously for multiple projects. Often their commit message does not describe what changes did they did in that current commit, and I have to dig through their code to understand that, and it can be a nightmare sometimes.&lt;/p&gt;

&lt;p&gt;Even if they write a good message, many people have their own style or convention of writing their commit messages. To solve this particular problem I started using &lt;code&gt;commitlint&lt;/code&gt; along with &lt;code&gt;commitizen&lt;/code&gt; so that my team adheres to a commit convention.&lt;/p&gt;

&lt;p&gt;Sneak peek to the end result 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oy2BM-TH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh8aasjdgi0427oxmkx5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oy2BM-TH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh8aasjdgi0427oxmkx5.gif" alt="commitizen"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-setup-raw-husky-endraw-and-raw-commitlint-endraw-"&gt;
  &lt;/a&gt;
  Step 1: Setup &lt;code&gt;husky&lt;/code&gt; and &lt;code&gt;commitlint&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Firstly, you will need &lt;code&gt;husky&lt;/code&gt;, which is used for writing git hooks. &lt;a href="https://typicode.github.io/husky/#/"&gt;See More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install &lt;code&gt;husky&lt;/code&gt; to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky-init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or, if you prefer yarn like me&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx husky-init &amp;amp;&amp;amp; yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we are going to install &lt;a href="https://commitlint.js.org/"&gt;commitlint&lt;/a&gt; and &lt;a href="https://github.com/arvinxx/gitmoji-commit-workflow"&gt;commitlint-config-gitmoji&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @commitlint/cli commitlint-config-gitmoji
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @commitlint/cli commitlint-config-gitmoji
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;@commitlint/cli&lt;/code&gt; will be used to check if our commit message follows the convention we configured for the project and the &lt;code&gt;commitlint-config-gitmoji&lt;/code&gt; is the commit convention preset we will be using. There are other conventions as well which you can use.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;commitlint-config-gitmoji&lt;/code&gt; follows the below convention.&lt;/p&gt;

&lt;p&gt;You need to provide a emoji (or &lt;a href="https://gitmoji.dev/"&gt;gitmoji&lt;/a&gt;) then a type, following a scope (not mandatory), and then the subject, which is your actual commit message. You can add a body and footer too if you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:gitmoji: type(scope?): subject
body?
footer?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✨ feat(api): add middleware for user authentication&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we need to define the commitlint config for our project. Create a file named &lt;code&gt;commitlint.config.js&lt;/code&gt; and define your config given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gitmoji&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header-max-length&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can customize the rules of your commit message per you like similarly to eslint. &lt;a href="https://commitlint.js.org/#/reference-rules"&gt;See here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-raw-commitlint-endraw-checking-as-a-git-hook"&gt;
  &lt;/a&gt;
  Step 2: Add &lt;code&gt;commitlint&lt;/code&gt; checking as a git hook
&lt;/h2&gt;

&lt;p&gt;Next, we need to add &lt;code&gt;commitlint&lt;/code&gt; as a git hook using &lt;code&gt;husky&lt;/code&gt; to check our commit message before every commit. To do this run the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn husky add .husky/commit-msg &lt;span class="s1"&gt;'yarn commitlint --edit "$1"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky add .husky/commit-msg &lt;span class="s1"&gt;'npx --no-install commitlint --edit "$1"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a file named &lt;code&gt;commit-msg&lt;/code&gt; inside your project inside &lt;code&gt;.husky&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;husky&lt;/code&gt; by default creates a &lt;code&gt;pre-commit&lt;/code&gt; file, which runs &lt;code&gt;npm test&lt;/code&gt;. If you don't have a test script defined in your &lt;code&gt;package.json&lt;/code&gt; it will throw an error. You can remove the &lt;code&gt;npm test&lt;/code&gt; line from the &lt;code&gt;pre-commit&lt;/code&gt; file or add a valid test script.&lt;/p&gt;

&lt;p&gt;Now try to do a commit 😏&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n8AE0O2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630248528640/xDEjJPoPP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n8AE0O2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630248528640/xDEjJPoPP.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well now my fellow teammates cannot commit unless they write a proper commit message 😈.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;commitlint&lt;/code&gt; prevents us from doing a commit if the commit message does not adhere to the structure provided by &lt;code&gt;commitlint-config-gitmoji&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-adding-raw-commitizen-endraw-cli-for-composing-commit-messages"&gt;
  &lt;/a&gt;
  Step 3: Adding &lt;code&gt;commitizen&lt;/code&gt; cli for composing commit messages
&lt;/h2&gt;

&lt;p&gt;Coming to the last part, now we will create a CLI helper to generate the commit message using &lt;code&gt;commitizen&lt;/code&gt;. Also we are using &lt;a href="https://github.com/leoforfree/cz-customizable"&gt;&lt;code&gt;cz-customizable&lt;/code&gt;&lt;/a&gt; to customize the CLI helper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; commitizen cz-customizable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; commitizen cz-customizable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add a commitizen config in your &lt;code&gt;package.json&lt;/code&gt; like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;....&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"config"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"commitizen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cz-customizable"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a file in your root folder named &lt;code&gt;.cz-config.js&lt;/code&gt; to customize the options of the CLI helper, and paste the below config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:sparkles: feat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✨ feat:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Adding a new feature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:bug: fix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🐛 fix:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Fixing a bug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:memo: docs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;📝 docs:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Add or update documentation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:lipstick: style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💄 style:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Add or update styles, ui or ux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:recycle: refactor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;♻️  refactor:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Code change that neither fixes a bug nor adds a feature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:zap: perf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;⚡️ perf:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Code change that improves performance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:white_check_mark: test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✅ test:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Adding tests cases&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:truck: chore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🚚 chore:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Changes to the build process or auxiliary tools&lt;/span&gt;&lt;span class="se"&gt;\n\t\t&lt;/span&gt;&lt;span class="s1"&gt;and libraries such as documentation generation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:rewind: revert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;⏪️ revert:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Revert to a commit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:construction: wip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🚧 wip:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Work in progress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:construction_worker: build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👷 build:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Add or update regards to build process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:green_heart: ci&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💚 ci:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;Add or update regards to build process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;

  &lt;span class="na"&gt;scopes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ui&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;android&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;planner&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;settings&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;

  &lt;span class="na"&gt;scopeOverrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;merge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hotfix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;allowCustomScopes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;allowBreakingChanges&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;feat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="c1"&gt;// skip any questions you want&lt;/span&gt;
  &lt;span class="na"&gt;skipQuestions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;subjectLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, add a npm script to run the &lt;code&gt;commitizen&lt;/code&gt; cli.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cm"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cz"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can modify the config as per your choice. &lt;a href="https://github.com/leoforfree/cz-customizable"&gt;See here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now run the script to see &lt;code&gt;commitizen&lt;/code&gt; in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn cm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ta-da, now you and everyone in your team can easily write beautiful conventional commit messages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YsQBDHxd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630253335632/w-j33BgXR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YsQBDHxd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630253335632/w-j33BgXR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>node</category>
      <category>commit</category>
    </item>
    <item>
      <title>Answers To Study Guide: ReactJS + Redux Part II</title>
      <author>Adriana DiPietro</author>
      <pubDate>Thu, 02 Sep 2021 16:53:55 +0000</pubDate>
      <link>https://dev.to/am20dipi/answers-to-study-guide-reactjs-redux-part-ii-3a06</link>
      <guid>https://dev.to/am20dipi/answers-to-study-guide-reactjs-redux-part-ii-3a06</guid>
      <description>&lt;p&gt;This is part 2 of a follow-up, answer guide to my blog post &lt;a href="https://dev.to/am20dipi/study-guide-reactjs-redux-2a2g"&gt;Study Guide: ReactJS + Redux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;☁️This study guide extends vocabulary and key concepts from React, Redux, and JavaScript. Enjoy!💿&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check out part 1 answers&lt;a href="https://dev.to/am20dipi/answers-to-study-guide-reactjs-redux-part-i-54on"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I've broken it down into a few subtopics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#LIFECYCLE"&gt;LIFECYCLE HOOKS + LIFECYCLE METHODS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#REDUX"&gt;REDUX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#JWT"&gt;JWT AUTHENTICATION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lifecycle-hooks-lifecycle-methods"&gt;
  &lt;/a&gt;
  LIFECYCLE HOOKS + LIFECYCLE METHODS &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What is a Lifecycle Hook? Name + describe some examples.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A method used in a functional component to set + update state.
&lt;/li&gt;
&lt;li&gt; useState is a Hook that lets you add React state to function components. &lt;/li&gt;
&lt;li&gt;useEffect tells React that your component needs to do something after render. React will remember the function you passed, and call it later after performing the DOM updates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is a Lifecycle Method? Name + describe some examples.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A method used in a class component to set + update state.
&lt;/li&gt;
&lt;li&gt;componentDidMount() method allows us to execute the React code when the component is already placed in the DOM. This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is mounting? What is unmounting?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mounting: the inserting of a component onto the DOM. &lt;/li&gt;
&lt;li&gt;Unmounting: the removing of a component from the DOM&amp;gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there a difference between Lifecycle Hooks and Lifecycle Methods?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Besides syntax, there is ultimately no difference. &lt;/li&gt;
&lt;li&gt;Both achieve setting + updating state in a React component, as well as the mounting or unmounting of a component to + from the DOM. &lt;/li&gt;
&lt;li&gt;Hooks have the reputation of drying up code!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  REDUX &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What is Redux? Name some core features. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redux is a state management library. It takes all of an application's state and stores it in a single location (the store) outside of the application. &lt;/li&gt;
&lt;li&gt;Core features include: the store, reducers, actions, action creators...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the Redux "store"?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The location where all of an application's state is stored. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is an action? How do actions work? What do they return?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A plain JavaScript object that describes the change that is to occur to state. &lt;/li&gt;
&lt;li&gt;Since actions are JS objects, they have key-value properties. Actions must have a key of "type" that describes the action. They must also have a key of "payload" (which can be named anything) that holds the data of the change. &lt;/li&gt;
&lt;li&gt;Redux actions do not return anything. They just trigger changes to the global state.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is a reducer? How do reducers work? What do they return?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function that takes in an action object to invoke the change described by the action object. &lt;/li&gt;
&lt;li&gt;Reducers return a new state. They DO NOT return the old state modified. &lt;/li&gt;
&lt;li&gt;Reducers are pure functions -- they must output the same result given the same input. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How does React and Redux communicate?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They communicate through the node package 'react-redux'. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is an action creator?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function that returns an action object. &lt;/li&gt;
&lt;li&gt;Calling an action creator returns nothing but an object, so you have to either bind it to the store beforehand, or dispatch the result of calling your action creator.&lt;/li&gt;
&lt;li&gt;Action Creator functions give us place to make FETCH API requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is dispatching?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function given to us from the Redux store. &lt;/li&gt;
&lt;li&gt;It takes in an action and passes it to the reducer to invoke the reducer. &lt;/li&gt;
&lt;li&gt;Dispatching returns the new state. &lt;/li&gt;
&lt;li&gt;When we invoke dispatch and pass in an action object, the dispatch function calls our reducer and passes in the current state and the action object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How does the store get updated?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The store gets updated through dispatching an action to a reducer to perform that action. &lt;/li&gt;
&lt;li&gt;Once dispatched, the action goes inside the reducer function and returns the new state to the store. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is mapPropsToState()?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function given to us from Redux. &lt;/li&gt;
&lt;li&gt;It takes in the current state and returns a JavaScript object with key-value pairs. &lt;/li&gt;
&lt;li&gt;Each key represents its own separate prop/ &lt;/li&gt;
&lt;li&gt;Each key can then be used for state calls instead of calling props. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is mapDispatchToState()?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function given to us from Redux. &lt;/li&gt;
&lt;li&gt;It takes in dispatch as an argument. &lt;/li&gt;
&lt;li&gt;It returns a JS object with key-value pairs. &lt;/li&gt;
&lt;li&gt;Each key has a value of a dispatched action to be used as a prop. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is connect()?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function given to us from the Redux store. &lt;/li&gt;
&lt;li&gt;It connects a React component to the store.&lt;/li&gt;
&lt;li&gt;mapState and mapDispatch can optionally be passed in. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Redux, when do components get rerendered?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every time the state is updated. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is THUNK?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A middleware that allows us to use functions inside an actio ("action creators"). &lt;/li&gt;
&lt;li&gt;It is given to us from redux-thunk node package. &lt;/li&gt;
&lt;li&gt;It looks at every action that passes through the system, and if it’s a function, it calls that function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is "Provider"? What does "Provider" do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provider is a component given to use from the react-redux node package. &lt;/li&gt;
&lt;li&gt;It takes in the store as an attribute as to avoid passing the store as props. &lt;/li&gt;
&lt;li&gt; component makes the Redux store available to any nested components that need to access the Redux store.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#jwt-authentication"&gt;
  &lt;/a&gt;
  JWT AUTHENTICATION &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What is JWT?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON WEB TOKEN&lt;/li&gt;
&lt;li&gt;Authorization: Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the JWT structure?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JWT is broken down into 3 main parts: header, payload, and signature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the JWT header?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the JWT payload?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(set of claims): contains verifiable security statements, such as the identity of the user and the permissions they are allowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the JWT signature?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;used to validate that the token is trustworthy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How does JWT work?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In authentication, when the user successfully logs in using their credentials, a JSON Web Token will be returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is a token?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a JSON encoded representation of a claim(s) that can be transferred between two parties(server and client).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;💿Thank you for reading along!💿&lt;br&gt;
☁️Comment below for any suggestions!☁️&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>redux</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>JSPS: A VS Code extension for more powerful codebase searches</title>
      <author>Isaac Lyman</author>
      <pubDate>Thu, 02 Sep 2021 16:49:37 +0000</pubDate>
      <link>https://dev.to/isaacdlyman/jsps-a-vs-code-extension-for-more-powerful-codebase-searches-25md</link>
      <guid>https://dev.to/isaacdlyman/jsps-a-vs-code-extension-for-more-powerful-codebase-searches-25md</guid>
      <description>&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=IsaacLyman.js-powered-search"&gt;JS Powered Search&lt;/a&gt; is a VS Code extension that lets you search your codebase using the full power of JavaScript. It's powerful, flexible, stateful, and fast. Today I'm going to briefly walk through what it does and how it works. But first:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-another-search-tool"&gt;
  &lt;/a&gt;
  Why another search tool?
&lt;/h2&gt;

&lt;p&gt;In my mind there are three levels of complexity when it comes to codebase searches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"I need to find every instance of the word ScrollingModalComponent."&lt;/p&gt;

&lt;p&gt;Okay, no problem. Click the Search icon and do a text search. VS Code lets you toggle case sensitivity and whole-word searching, which is a pretty great starting point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"I need to find every instance of ScrollingModal, RollingModal, ScrollingModalComponent, and RollingModalComponent, case insensitive. I don't want to find ChildScrollingModal."&lt;/p&gt;

&lt;p&gt;Sounds like you need a Regular Expression. Something like &lt;code&gt;\b(sc)?rollingmodal(component)?\b&lt;/code&gt; should do the trick. Click the RegEx toggle in VS Code's search pane, pop in the RegEx, and you're all set. RegExes are pretty useful and will usually do what you need, but their logical abilities are very limited. And if you don't write them very often, it can be time-consuming to figure out the right syntax. (Pro tip: use &lt;a href="https://regexr.com/"&gt;RegExr&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"I need to find every TypeScript file that's at least 100 lines long, exports a ScrollingModalComponent, uses a &lt;code&gt;.filter&lt;/code&gt; method two or more times, and does &lt;em&gt;not&lt;/em&gt; contain the term RollingModal."&lt;/p&gt;

&lt;p&gt;Granted, perhaps you could figure out a RegEx for this. And if you're an avid RegEx golfer, maybe you even want to. But for most of us this sounds like a headache. Especially if Level 2 was already a headache.&lt;/p&gt;

&lt;p&gt;Be honest: you're going to end up doing a plain-text search for "ScrollingModalComponent" and checking each file by hand. If the search only comes back with ten or so results, no big deal. But if there are tens or hundreds of results? That's going to take up the rest of your day for sure.&lt;/p&gt;

&lt;p&gt;You may wonder, "why can't I just write some custom &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;&lt;code&gt;Array.filter&lt;/code&gt;&lt;/a&gt; logic and run all my files through it?"&lt;/p&gt;

&lt;p&gt;Now you can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-jsps-do"&gt;
  &lt;/a&gt;
  What does JSPS do?
&lt;/h2&gt;

&lt;p&gt;JSPS has two main operations: Scaffold and Search.&lt;/p&gt;

&lt;p&gt;Scaffold produces a template file that you can alter to define the search functionality you need. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;includeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// globs to include, e.g. ['**/*.ts']. Searches all files by default.&lt;/span&gt;
  &lt;span class="nl"&gt;excludeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// globs to exclude.&lt;/span&gt;
  &lt;span class="nl"&gt;includeNodeModules&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: false) true if node_modules should be searched. Strongly discouraged.&lt;/span&gt;
  &lt;span class="nl"&gt;maxFileSizeInKB&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: 1000) any files larger than this will be skipped.&lt;/span&gt;
  &lt;span class="nl"&gt;onlyTestLinesInMatchingFiles&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: false) true if searchByLine should only be used on files that pass searchByFile&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getSettings&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;SearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// includeFilePatterns: [],&lt;/span&gt;
    &lt;span class="c1"&gt;// excludeFilePatterns: [],&lt;/span&gt;
    &lt;span class="c1"&gt;// includeNodeModules: false,&lt;/span&gt;
    &lt;span class="c1"&gt;// maxFileSizeInKB: 1000,&lt;/span&gt;
    &lt;span class="c1"&gt;// onlyTestLinesInMatchingFiles: false&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LineSearchMetadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LineSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A function that accepts a line of text and determines whether it matches your search.&lt;/span&gt;
  &lt;span class="c1"&gt;// If you only want to search by file, set this method to undefined.&lt;/span&gt;
  &lt;span class="nl"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LineSearchMetadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchByLine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;LineSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exactly what I'm looking for&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileSearchMetadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// The file text as an array of lines&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A function that accepts a file (as a text string) and determines whether the file matches your search.&lt;/span&gt;
  &lt;span class="c1"&gt;// If you only want to search by line, set this method to undefined.&lt;/span&gt;
  &lt;span class="nl"&gt;doesFileMatchSearch&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FileSearchMetadata&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchByFile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;FileSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;doesFileMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;another thing I'm looking for&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Three functions are exported. One returns your desired search settings, one returns a function for matching by line, and one returns a function for matching by file.&lt;/p&gt;

&lt;p&gt;So if you want to find every instance of "ScrollingModalComponent" in your codebase, that's a three-step process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delete the &lt;code&gt;doesFileMatchSearch&lt;/code&gt; function. We won't need it here.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;doesLineMatchSearch&lt;/code&gt; to the following:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ScrollingModalComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 . Run the JSPS Search command.&lt;/p&gt;

&lt;p&gt;All the search settings have sensible defaults, so you most likely won't need to change them for simple searches. And in seconds, you'll have a full list of search results. You can click any of them to jump to the file and line in question.&lt;/p&gt;

&lt;p&gt;Let's revisit that level 3 search.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I need to find every TypeScript file that's at least 100 lines long, exports a ScrollingModalComponent, uses a &lt;code&gt;.filter&lt;/code&gt; method two or more times, and does &lt;em&gt;not&lt;/em&gt; contain the term RollingModal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JSPS can do that without breaking a sweat. Here's what the search definition would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;includeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// globs to include, e.g. ['**/*.ts']. Searches all files by default.&lt;/span&gt;
  &lt;span class="nl"&gt;excludeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// globs to exclude.&lt;/span&gt;
  &lt;span class="nl"&gt;includeNodeModules&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: false) true if node_modules should be searched. Strongly discouraged.&lt;/span&gt;
  &lt;span class="nl"&gt;maxFileSizeInKB&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: 1000) any files larger than this will be skipped.&lt;/span&gt;
  &lt;span class="nl"&gt;onlyTestLinesInMatchingFiles&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: false) true if searchByLine should only be used on files that pass searchByFile&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getSettings&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;SearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;includeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;**/*.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// excludeFilePatterns: [],&lt;/span&gt;
    &lt;span class="c1"&gt;// includeNodeModules: false,&lt;/span&gt;
    &lt;span class="c1"&gt;// maxFileSizeInKB: 1000,&lt;/span&gt;
    &lt;span class="na"&gt;onlyTestLinesInMatchingFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LineSearchMetadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LineSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A function that accepts a line of text and determines whether it matches your search.&lt;/span&gt;
  &lt;span class="c1"&gt;// If you only want to search by file, set this method to undefined.&lt;/span&gt;
  &lt;span class="nl"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LineSearchMetadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchByLine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;LineSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;export&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ScrollingModalComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileSearchMetadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// The file text as an array of lines&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A function that accepts a file (as a text string) and determines whether the file matches your search.&lt;/span&gt;
  &lt;span class="c1"&gt;// If you only want to search by line, set this method to undefined.&lt;/span&gt;
  &lt;span class="nl"&gt;doesFileMatchSearch&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FileSearchMetadata&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchByFile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;FileSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;doesFileMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.filter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RollingModal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what happens when you run this as a JSPS Search:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9M8ZN33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9quchjok9ve0g2dyut8z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9M8ZN33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9quchjok9ve0g2dyut8z.gif" alt="Running a JSPS Search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again, you have the results you need and all you had to do was write a bit of string logic; no RegEx required (although if case sensitivity was an issue, you might need some RegEx for word boundaries or something).&lt;/p&gt;

&lt;p&gt;The final low-key superpower of JSPS is that search definition files are totally saveable and reusable. You can commit a few to your repo as a "table of contents" for new developers; you can collaborate on one with VS Code Live Share; you can send a JSPS file to your team to show them the impact of a large refactor; you can keep advanced searches on your hard drive in case you need them later. It's totally up to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;VS Code has a very developer-friendly &lt;a href="https://code.visualstudio.com/api/references/vscode-api"&gt;extension API&lt;/a&gt; with above-average documentation (I have some complaints about its Googleability, but that's a topic for another day). Creating a file based on a template is pretty ho-hum stuff with the &lt;code&gt;vscode.window&lt;/code&gt; and TextDocument APIs, so the scaffolding part didn't take long to set up.&lt;/p&gt;

&lt;p&gt;The Search command was more difficult. JSPS has to grab the full text of the current editor window, transpile it to JavaScript, then compile it into a dynamic JavaScript module. On-the-fly transpilation is a basic feature of the &lt;code&gt;typescript&lt;/code&gt; package, but compiling a string to a JavaScript module isn't a basic feature of anything. For that I'm using undocumented features of the &lt;code&gt;Module&lt;/code&gt; package (which is built into Node) via the &lt;code&gt;require-from-string&lt;/code&gt; NPM package. It's not a best practice, but it works--with the caveat that I'm pretty sure &lt;code&gt;import&lt;/code&gt; won't work in search definition files. That's on the &lt;a href="https://github.com/isaaclyman/js-powered-search#wishlist"&gt;roadmap&lt;/a&gt; to look at later.&lt;/p&gt;

&lt;p&gt;From that point, all JSPS has to do is validate your search definition, find files in the workspace that match the provided &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; globs (which is easy, thanks again to the VS Code API), and test each one with the functions you wrote.&lt;/p&gt;

&lt;p&gt;Of course, a search utility like this has a lot of UI and error reporting needs. Luckily, the VS Code API has a ton of UI features to choose from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;There are some &lt;a href="https://github.com/isaaclyman/js-powered-search#known-issues"&gt;known issues&lt;/a&gt; with JSPS, but from my testing over the last few days it works pretty well. I'm going to be refining it and fixing edge cases for a while (you're welcome to join in at the &lt;a href="https://github.com/isaaclyman/js-powered-search"&gt;official GitHub repo&lt;/a&gt;) before I take it out of preview and publish version 1.0.&lt;/p&gt;

&lt;p&gt;In the meantime, I'd love to have your feedback. Do you see an opportunity to improve performance or UX? Does it break on a particular OS or with particular types of files? What features would you like to see added?&lt;/p&gt;

&lt;p&gt;Long-term, I think a find-and-replace feature that capitalizes on the power of JSPS Search would make a lot of sense, so that's something I want to build soon.&lt;/p&gt;

&lt;p&gt;I hope JSPS is useful when your codebase searches need a power boost. Enjoy!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Laravel Boilerplate for SaaS Application </title>
      <author>Harish Patel</author>
      <pubDate>Thu, 02 Sep 2021 16:31:43 +0000</pubDate>
      <link>https://dev.to/hrsptl_143/laravel-boilerplate-for-saas-application-la3</link>
      <guid>https://dev.to/hrsptl_143/laravel-boilerplate-for-saas-application-la3</guid>
      <description>&lt;p&gt;I have search for open source SaaS Application boilerplate for developer and found two interesting Open source project which will save your lots of time.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://craterapp.com/"&gt;https://craterapp.com/&lt;/a&gt;
Complete Invoicing Solution
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5H5CPybT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyo7q29z8mayzx6byu1n.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Crater is an open-source web &amp;amp; mobile app that helps you track expenses, payments &amp;amp; create professional invoices &amp;amp; estimates.&lt;/p&gt;

&lt;p&gt;Web Application is made using Laravel &amp;amp; VueJS while the Mobile Apps are built using React Native.&lt;/p&gt;

&lt;p&gt;Crater Provides Mobile application as well. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://devdojo.com/wave"&gt;https://devdojo.com/wave&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOVSZ_is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6tiwy49jugi2nls08xe.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wave is the ultimate Software as a Service Starter Kit packed with awesome features like authentication, subscriptions, invoices, announcements, user profiles, and so much more!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>saas</category>
      <category>vue</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
