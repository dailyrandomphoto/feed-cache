<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a chat in the command line with Ruby</title>
      <author>Aurelie Verrot</author>
      <pubDate>Tue, 12 Jan 2021 17:08:47 +0000</pubDate>
      <link>https://dev.to/aurelieverrot/create-a-chat-in-the-command-line-with-ruby-2po9</link>
      <guid>https://dev.to/aurelieverrot/create-a-chat-in-the-command-line-with-ruby-2po9</guid>
      <description>&lt;p&gt;Last weekend I learned how to create a chat application in the command line. The idea was to open at least 3 tabs in the terminal: one for the server that will handle the connexion between the users, and X number of tabs for the users to communicate, at least 2.&lt;/p&gt;

&lt;p&gt;This project made me discover two built-in classes in Ruby that we don't really use when we do a full stack application with Rails:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Socket&lt;/li&gt;
&lt;li&gt;Thread&lt;/li&gt;
&lt;li&gt;ARGV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will talk about them later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-the-server" class="anchor"&gt;
  &lt;/a&gt;
  Let's talk about the server
&lt;/h2&gt;

&lt;p&gt;So what do we need exactly to create this chat? We talked about a server, so we will need a file for this that will be called server.rb&lt;br&gt;
What do we need to do here? We need to establish the connexion through the port of our choice. For this we will need the class Socket, and we have to require it at the beginning of the file.&lt;br&gt;
To understand what this method offers, make sure to understand what a socket is. Here is a definition provided by Oracle docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A socket is one endpoint of a two-way communication link between two programs running on the network. A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Requiring Socket will give us access to other classes and methods to create our server (&lt;a href="https://ruby-doc.org/stdlib-2.7.0/libdoc/socket/rdoc/Socket.html"&gt;see the Ruby documentation for Socket&lt;/a&gt;).&lt;br&gt;
Our first line of command will be to create a TCP server on the port we want, and to make sure it's launched I will print a confirmation text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'socket'&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="c1"&gt;# Server bound to port 2000&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"I'm ready to accept new clients on port 2000"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our server is working, now we need it to listen to whatever connexion is coming up from a client, and we need to do it constantly. So we need to create a loop. We also want the server to handle multiple clients, and give information to users. So we will create an array to store them, and append every new client to the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# we wait for a client to connect, and assign it to client&lt;/span&gt;
  &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;
  &lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It is now time to introduce Thread. We use a thread to split a program and have a tasks that will run simultaneously (or pseudo-simultaneously). Creating a thread will allow our program to run two processes in the same time (&lt;a href="https://ruby-doc.org/core-2.7.0/Thread.html"&gt;see documentation for Thread&lt;/a&gt;)&lt;br&gt;
We need it because while the server is waiting for a client to connect in the loop, we also need to constantly handle the messaging between the clients already connected. &lt;br&gt;
We do that by writing &lt;code&gt;Thread.new {}&lt;/code&gt;. The block will be used to tell the program what to do with this thread. &lt;br&gt;
So what do we need from it? We need to know who connects to it, to receive and display text to others. We also need to detect when a client disconnect and remove it from the &lt;code&gt;clients&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;It's a lot, so let's create a method for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# for this method I need the new client, and the list of existing clients.&lt;/span&gt;

  &lt;span class="c1"&gt;# client_name will take whatever name the client put when it will connect to the server. We will see later how it's sent from the client perspective.&lt;/span&gt;
  &lt;span class="n"&gt;client_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

  &lt;span class="c1"&gt;# here we will display a welcome message and show how many clients are already connected&lt;/span&gt;
  &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;! Clients connected: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="c1"&gt;# this method is described below. It announces to all clients who is the new client.&lt;/span&gt;
  &lt;span class="n"&gt;announce_to_everyone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; joined!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# this is another loop. gets will take any text coming from the client...&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;
    &lt;span class="n"&gt;incoming_data_from_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
    &lt;span class="c1"&gt;#... and this text will be shared to all the clients. A little bit of formatting to indicate who said what.&lt;/span&gt;
    &lt;span class="n"&gt;announce_to_everyone&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;incoming_data_from_client&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# it will close the client connexion and remove it from the clients array. And other clients will receive a notification.&lt;/span&gt;
  &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
  &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;announce_to_everyone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; left!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# this method takes the text sent by a client, and the clients connected. For each client from clients, the text will be displayed&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;announce_to_everyone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are done with &lt;code&gt;server.rb&lt;/code&gt;. The server is running, and waiting to get clients connexions. It will receive messages and display them to all connected clients, and give them cool info for a better user experience (well, from the terminal... for what it's worth).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-the-client" class="anchor"&gt;
  &lt;/a&gt;
  Let's talk about the client
&lt;/h2&gt;

&lt;p&gt;The idea here is to open let say 3 terminal tabs to simulate 3 clients / users, we will launch the client's program from each tab.&lt;br&gt;
For that we need to create a file that we will call &lt;code&gt;client.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First we need to make sure our client will create a connexion on the server. Previously, on server side, we used &lt;code&gt;TCPServer.new&lt;/code&gt;. This time, we will create an instance of &lt;code&gt;TCPSocket&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'socket'&lt;/span&gt;
&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPSocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;  
&lt;span class="c1"&gt;# bound to port 2000, like the server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we connect to the chat, we want a way to enter the user name. There is a simple way to do that. &lt;br&gt;
From the terminal, we can write &lt;code&gt;$ruby client.rb Aurelie&lt;/code&gt;, where &lt;code&gt;Aurelie&lt;/code&gt; is an argument passed to the script.&lt;br&gt;
In our file, first thing to do is to grab this argument and assign it to a variable. For that we need to use the ARGV built-in class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;ARGV takes all the arguments you pass to a script, and put them into an array in order of apparition. And #shift will use the first one of the array.&lt;/p&gt;

&lt;p&gt;Do you remember how we assigned the client's name in &lt;code&gt;server.rb&lt;/code&gt; above? &lt;br&gt;
Here we will use &lt;code&gt;name&lt;/code&gt;, and do a &lt;code&gt;puts&lt;/code&gt; applied to the socket. The first connexion to the server through the socket will be to send the name to the server, and that's how the server will pick-up &lt;code&gt;name&lt;/code&gt; with its &lt;code&gt;gets&lt;/code&gt; and assign it to &lt;code&gt;client_name&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we need a way to take what the user types in the client and send it to the server, but we also need to keep receiving whatever messages other clients send to us. Two processes at a time, it's time to use Thread again!&lt;/p&gt;

&lt;p&gt;We will create one thread for the local typing, and one for what the client receives from the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;local_typing_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;local_typing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;receive_from_server_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;receive_from_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Two things here, we assign each thread to a variable for a later use, and we pass in each thread a method to handle our processes.&lt;/p&gt;

&lt;p&gt;Let's talk about the &lt;code&gt;local_typing&lt;/code&gt; method.&lt;br&gt;
This method needs to know which socket to use to give information to the server. It also needs to constantly check for what to send, so we need a loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_typing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# when a user sends a message, this message will appear in the user client preceded by a little string that shows it's the user's message. For example: (me)&amp;gt; Hey it's me!&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"(me)&amp;gt; "&lt;/span&gt;
    &lt;span class="n"&gt;text_to_send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;text_to_send&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we need to tackle the &lt;code&gt;receive_from_server&lt;/code&gt; method.&lt;br&gt;
Again, it needs to know about the socket. And again, we want it to constantly capture all the messages sent to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;receive_from_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# read the lines coming from the socket, and write them in the terminal&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, since we created two separate threads, we need to make them join, and we need to close the socket when we are done&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;local_typing_thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
&lt;span class="n"&gt;receive_from_server_thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;

&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Tadaa! We created a little chat in the terminal, on localhost.&lt;br&gt;
See what it looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zL02rui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jjhm48b7otnpdbdx77zu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zL02rui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jjhm48b7otnpdbdx77zu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the files in my repo &lt;a href="https://github.com/aurelieverrot/ruby-chat"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The React Roadmap 🏁 10 Steps to Become a React Developer in 2021</title>
      <author>Reed Barger</author>
      <pubDate>Tue, 12 Jan 2021 16:20:09 +0000</pubDate>
      <link>https://dev.to/reedbarger/the-react-roadmap-10-steps-to-become-a-react-developer-in-2021-2945</link>
      <guid>https://dev.to/reedbarger/the-react-roadmap-10-steps-to-become-a-react-developer-in-2021-2945</guid>
      <description>&lt;p&gt;Learning how to become a confident React developer takes hard work, but not knowing the right way to become one can make it much harder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning React doesn't have to be a chore.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's break down the 10 steps that will make your time and effort becoming a React developer easier and more fun. All while delivering consistent, career-changing results along the way.&lt;/p&gt;

&lt;p&gt;If you want to watch this article as an interactive video (along with some extra bonuses), be sure to check out the &lt;a href="https://bit.ly/react-bootcamp-email-course"&gt;&lt;strong&gt;3-day React email course&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-commit-to-45-hours-of-coding-per-weekday" class="anchor"&gt;
  &lt;/a&gt;
  Step 1. Commit to 4-5 hours of coding per weekday
&lt;/h2&gt;

&lt;p&gt;The most important factor in deciding how soon you will be able to learn React is time and how you use it.&lt;/p&gt;

&lt;p&gt;You need to keep a regular schedule of coding throughout the week. Without this, it will be almost impossible to reach your goals in coding on time. The truth is most people will never excel at React because they cannot to dedicate enough time and focus to coding.&lt;/p&gt;

&lt;p&gt;If you plan on coding every day from nine to five once you’re on the job you need to have a similar schedule for yourself while learning. Ideally, you should spend around four to five hours of focused coding every weekday. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why exactly four to five hours?&lt;/em&gt; I'll cover that in step 3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-spend-your-time-doing-focused-coding" class="anchor"&gt;
  &lt;/a&gt;
  Step 2. Spend your time doing focused coding
&lt;/h2&gt;

&lt;p&gt;What do I mean by focused coding? Focused coding is coding without distraction. In a separate quiet space, where you can sit upright at your computer, and focus entirely on the process of coding.&lt;/p&gt;

&lt;p&gt;During this time, much of what you’re doing will not be 100% coding. As you code, you’ll be reading documentation, reading an article, taking notes, et cetera.&lt;/p&gt;

&lt;p&gt;If you’re focused on your work, four to five hours should be all that you need. The idea of coding 12 hours a day is not realistic, especially if you are getting started. If you can spend more time and you do feel focused, go ahead. But it’s very hard to code and consume new information while you’re already tired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-use-the-pomodoro-technique-for-optimal-time-management" class="anchor"&gt;
  &lt;/a&gt;
  Step 3. Use the Pomodoro technique for optimal time management
&lt;/h2&gt;

&lt;p&gt;There is a special technique that will help you make the most out of that four to five hours. It’s called the &lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro technique&lt;/a&gt;. It’s an approach that’s made for optimal productivity and it consists of working in 25 minute periods at a time.&lt;/p&gt;

&lt;p&gt;You start your timer and after each period or &lt;em&gt;pomodoro&lt;/em&gt;, you take a five minute break. During this break, get up from your chair. Have something to drink. Adjust your focus away from your computer or your phone. In short, take a real mental &lt;em&gt;and&lt;/em&gt; physical break from what you’re doing.&lt;/p&gt;

&lt;p&gt;Taking breaks with purpose and giving your brain and body a rest will help you make the most of your time. Instead of trying to work for hours on end. And after every fourth 25 minute period or pomodoro, you take a longer 15 minute break.&lt;/p&gt;

&lt;p&gt;If you do 8-10 pomodoros of solid work, you will have a very productive day, guaranteed. I use this technique every day I code and it is the best technique to ensure consistent results day-in and day-out. Consistent results are the only thing that is going to make the difference between learning React in months versus a year or more.&lt;/p&gt;

&lt;p&gt;There are many free pomodoro timers that you can find online. I’ll link to a couple of them below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/be-focused-focus-timer/id973130201"&gt;Be Focused - Pomodoro Timer for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pomofocus.io/"&gt;Online Pomodoro Timer - Pomofocus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-4-read-through-reactjsorg-from-front-to-back" class="anchor"&gt;
  &lt;/a&gt;
  Step 4. Read through ReactJS.org from front to back
&lt;/h2&gt;

&lt;p&gt;We’ve talked how to work and the amount of time to spend working, but how do you approach learning the skills needed to be a React developer? &lt;/p&gt;

&lt;p&gt;Many developers would recommend diving right into whatever you can find. To look through various websites, articles, YouTube videos, and ebooks. In fact, there’s one best place to go to first of all to start working with and learning React. And that is &lt;a href="https://reactjs.org"&gt;reactjs.org&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Go through their documentation from front to back. It’s the best guide that you will find online and every working React developer relies upon it. It’s guaranteed to be up to date, will get you familiar with the concepts you need, and best of all, give you a lot of examples to work with. As you read through the site, take the code examples they provide and run them yourself.&lt;/p&gt;

&lt;p&gt;How do you run the React code you find? Instead of trying to create a React application on your own computer, create a React app in the browser. To create a new react app in two seconds, go to &lt;a href="https://react.new"&gt;react.new&lt;/a&gt;. It will create a brand new React app in your browser that you can start working with. Then start experimenting with examples from the React.js documentation. On your own, type in the code from the guides, run it and see what works and what doesn’t.&lt;/p&gt;

&lt;p&gt;Instead of reading a book and being told what code does, run the code yourself. See what happens when you try different things. To test the boundaries of React and what it can do is the best thing possible to understand how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-start-small-build-small-apps-and-learn-to-add-features-as-you-go" class="anchor"&gt;
  &lt;/a&gt;
  Step 5. Start small. Build small apps and learn to add features as you go
&lt;/h2&gt;

&lt;p&gt;Once you have gone through the documentation at reactjs.org, start building small things. Try to build a todo application from scratch. If not a todo application, a basic &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; application, a note-taking application, etc. Make a complete app, that consists of simple, clearly divisible parts.&lt;/p&gt;

&lt;p&gt;As you build your project, you'll encounter the questions all React developers ask themselves throughout their app planning: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;How do I go about making this app? Are there any extra packages do I need besides React?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What basic features do I need to build out?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What components will I need and how are they organized?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Where will my app data live?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/join"&gt;Sign up for a Github account&lt;/a&gt; if you don’t have one already. Not only to save your React projects to your Github for easy access, but it will allow you to search for how other people built similar apps themselves. &lt;/p&gt;

&lt;p&gt;Once you have something small you’ve built, add more features. If you’re making a todo app, you might ask:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;How can I search through todos?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How can I save my todos between visits?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How do I add authentication to my todo app (to make it for only authenticated users)?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How do I add different pages to my app?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How do I style it with a component library like Material UI?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add new features based around what you want to learn. The possibilities are endless and will drive your learning forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-asking-questions-is-essential-always-ask-questions" class="anchor"&gt;
  &lt;/a&gt;
  Step 6. Asking questions is essential. Always ask questions.
&lt;/h2&gt;

&lt;p&gt;Be aware that it’s fine to search the web when you have a question or when you're stuck in your coding. It’s what all React developers do by searching sites like &lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt; or Github. &lt;em&gt;Asking your own questions is essential.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Make sure to keep track the questions you ask. Whenever I have a problem with a React project that I need to solve, I write it down and search for the answer. When I find the solution to it, I make sure to record the answer and bookmark it in my browser for future reference. &lt;/p&gt;

&lt;p&gt;To record your questions and the answers you find for them is essential. If you have a problem once, &lt;em&gt;I can almost guarantee&lt;/em&gt; that you will run into the same problem sometime in the future. Recording your questions and answers will not only serve as a great resource, but also save you large amounts of time and frustration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-actively-coding-is-your-key-to-success" class="anchor"&gt;
  &lt;/a&gt;
  Step 7. Actively coding is your key to success
&lt;/h2&gt;

&lt;p&gt;This approach we’ve been talking about is very different than reading a book or article. &lt;/p&gt;

&lt;p&gt;Reading or consuming information alone is called &lt;strong&gt;passive learning&lt;/strong&gt; and is much slower. Actively coding yourself is &lt;strong&gt;active learning&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Active learning is what will drive you to code more, ask questions, fail more often in the short term, but succeed and grow faster in the long term.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-build-apps-similar-the-ones-you-use-daily-and-know-well" class="anchor"&gt;
  &lt;/a&gt;
  Step 8. Build apps similar the ones you use daily (and know well)
&lt;/h2&gt;

&lt;p&gt;After building your todo app, ask yourself can I make a small version of Twitter? Can I build a small version of Facebook or some other social network? Can I build a small version of Instagram? &lt;/p&gt;

&lt;p&gt;Try to build something more other apps that you use and are familiar with. You’ll be able to see that as time goes on, these applications all share similar features. Being able to see common features among apps and develop them yourself is what will take you from an average to an impressive, self-directed developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-9-deploy-your-best-work-and-put-it-on-your-resume-for-employers" class="anchor"&gt;
  &lt;/a&gt;
  Step 9. Deploy your best work and put it on your resume for employers
&lt;/h2&gt;

&lt;p&gt;And finally, after building larger and larger applications, make sure to put all these projects on your resume. To do that, you’ll need to deploy them to the web first. &lt;/p&gt;

&lt;p&gt;Deploying React apps is very simple. You need only learn how to use basic hosting services like &lt;a href="https://www.freecodecamp.org/news/how-to-deploy-a-react-application-to-netlify-363b8a98a985/"&gt;Netlify&lt;/a&gt; or Heroku which are free and as simple as can be. &lt;/p&gt;

&lt;p&gt;Include links to each project on your resume as well as a description of the app and the technologies you used to build it. Doing so will immediately show the value that you can bring to potential employers.&lt;/p&gt;

&lt;p&gt;If you’re interested in becoming an independent app developer, try turning one of these projects into an actual business. You’d be surprised how many people are able to do that. They learn React, start building projects, and turn one of them into an app or service which they sell for a profit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-10-have-fun" class="anchor"&gt;
  &lt;/a&gt;
  Step 10. Have fun!
&lt;/h2&gt;

&lt;p&gt;I'll be the first to admit it: learning React can be very frustrating. Even once you become a professional developer, it will &lt;em&gt;still&lt;/em&gt; be very frustrating at times. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There will be problems you come across as you become a skilled React developer, but none that can't be overcome.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My final advice to you is to become involved with fun, engaging React projects that you want to build or be a part of. You will not only learn more easily, but discover what you like most about being a React developer. All of which will give you confidence and help take you where you want to be in your career.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-this-post-join-the-react-bootcamp" class="anchor"&gt;
  &lt;/a&gt;
  Enjoy this post? Join The React Bootcamp
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;The React Bootcamp&lt;/a&gt;&lt;/strong&gt; takes everything you should know about learning React and bundles it into one comprehensive package, including videos, cheatsheets, plus special bonuses.&lt;/p&gt;

&lt;p&gt;Join thousands of developers learning how to become a React pro in record time:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when it opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Svelte for Appwrite</title>
      <author>Torsten Dittmann</author>
      <pubDate>Tue, 12 Jan 2021 16:06:40 +0000</pubDate>
      <link>https://dev.to/torstendittmann/svelte-for-appwrite-4fkg</link>
      <guid>https://dev.to/torstendittmann/svelte-for-appwrite-4fkg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#%E2%96%B6-introduction" class="anchor"&gt;
  &lt;/a&gt;
  ▶ Introduction
&lt;/h1&gt;

&lt;p&gt;I've been a fan of Svelte for a long time now and started every project I came up with in 2020 with the &lt;a href="https://github.com/sveltejs/template"&gt;sveltejs/template&lt;/a&gt;. While working on these ideas, I discovered a self-hosted Firebase alternative called Appwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-appwrite" class="anchor"&gt;
  &lt;/a&gt;
  ❓ What is Appwrite?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FkiMU6mE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5ltvzuemkjv1iwfqagju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FkiMU6mE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5ltvzuemkjv1iwfqagju.png" alt="68747470733a2f2f61707077726974652e696f2f696d616765732f6769746875622e706e67"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source backend-as-a-service server that abstracts and simplifies complex and repetitive development tasks behind a very simple to use REST API. Appwrite aims to help you develop your apps faster and in a more secure way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you haven't heard of Appwrite before, you should really &lt;a href="https://appwrite.io"&gt;check it out&lt;/a&gt;! 👀&lt;/p&gt;

&lt;p&gt;If you ask yourself, why you should use Appwrite over something like Firebase, I've written down my reasons here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/torstendittmann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0B4hzSYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fSaWYjcZ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/206882/20323e85-2ed6-4239-a5b6-4ae557bb943b.jpg" alt="torstendittmann image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/torstendittmann/why-i-moved-from-baas-to-appwrite-self-hosted-backend-1e6b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why I moved from BaaS to Appwrite (self-hosted Backend)&lt;/h2&gt;
      &lt;h3&gt;Torsten Dittmann ・ Apr 13 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#appwrite&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#backend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#%E2%AC%85-back-to-the-topic" class="anchor"&gt;
  &lt;/a&gt;
  ⬅ Back to the topic
&lt;/h2&gt;

&lt;p&gt;Hooked by the concept, I started contributing to Appwrite, became part of its community, and in 2021 I became a fulltime Core Member.&lt;/p&gt;

&lt;p&gt;Using the Javascript SDK worked right away, but didn't really fit the component driven approach of Svelte. So I sat down, inspired by &lt;a href="https://github.com/codediodeio/sveltefire"&gt;sveltefire&lt;/a&gt;, and worked out a collection of components which feel at home in Svelte projects. This resulted in the project &lt;code&gt;svelte-appwrite&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comparison" class="anchor"&gt;
  &lt;/a&gt;
  🔎 Comparison
&lt;/h1&gt;

&lt;p&gt;Enough talking, let's start with a code comparison between &lt;code&gt;appwrite&lt;/code&gt; and &lt;code&gt;svelte-appwrite&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZebEjLU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4o36tarfr9uvvyo5uuyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZebEjLU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4o36tarfr9uvvyo5uuyh.png" alt="picture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Short isn't always better, except in this case. Let's take a look at the shorter variant, the &lt;code&gt;svelte-appwrite&lt;/code&gt; one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AuthEmail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost/v1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5ffc6c043586d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Appwrite&lt;/span&gt; &lt;span class="err"&gt;{...&lt;/span&gt;&lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;User&lt;/span&gt; &lt;span class="na"&gt;let:user&lt;/span&gt; &lt;span class="na"&gt;let:actions&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello {user.name}!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{actions.logout}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;AuthEmail&lt;/span&gt; &lt;span class="na"&gt;let:authorize&lt;/span&gt; &lt;span class="na"&gt;on:success=&lt;/span&gt;&lt;span class="s"&gt;{actions.reload}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{email}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{password}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{authorize(email,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="err"&gt;)}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    Login
                &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/AuthEmail&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/User&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Appwrite&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This small snippet handles Initialization and Authentication via E-Mail with an &lt;a href="https://appwrite.io"&gt;Appwrite&lt;/a&gt; project for you with just a few lines.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-break-it-down" class="anchor"&gt;
  &lt;/a&gt;
  🧬 Let's break it down
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#-raw-ltappwrite-configgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;Appwrite {...config}&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;Appwrite /&amp;gt;&lt;/code&gt; component initializes the SDK for your Appwrite project and must wrap every &lt;code&gt;svelte-appwrite&lt;/code&gt; component. You can simply spread a configuration like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost/v1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5f4938898667e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;de&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltuser-letuser-letactionsgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;User let:user let:actions&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;User/&amp;gt;&lt;/code&gt; component requests the currently logged in user and provides you 2 &lt;a href="https://svelte.dev/docs#slot_let"&gt;let:directives&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;let:user&lt;/li&gt;
&lt;li&gt;let:actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;user&lt;/code&gt; directive provides you with the currently logged-in user and &lt;code&gt;actions&lt;/code&gt; with following set of functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reload()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logout()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logoutFrom(session: string)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logoutAll()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, everything inside the &lt;code&gt;&amp;lt;User /&amp;gt;&lt;/code&gt; component is only shown when a user is logged in. By using the &lt;code&gt;error&lt;/code&gt; &lt;a href="https://svelte.dev/docs#slot"&gt;slot&lt;/a&gt; we can show content when a user is not logged in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;User&lt;/span&gt; &lt;span class="na"&gt;let:user&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello {user.name}!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{user.email}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    You are not logged in!
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Loading...
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/User&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltauthemail-letauthorize-onsuccessgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;AuthEmail let:authorize on:success&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The last component we used lets users authenticate via e-mail with the provided &lt;code&gt;authorize(email, password)&lt;/code&gt; method. This component can also emit &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;AuthEmail&lt;/span&gt; &lt;span class="na"&gt;let:authorize&lt;/span&gt; &lt;span class="na"&gt;on:success=&lt;/span&gt;&lt;span class="s"&gt;{actions.reload}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{email}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{password}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{authorize(email,password)}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/AuthEmail&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see in the example above, the &lt;code&gt;on:success&lt;/code&gt; event points to the &lt;code&gt;reload()&lt;/code&gt; function from &lt;code&gt;&amp;lt;User /&amp;gt;&lt;/code&gt;. This way, when a successful login happens, the component will fetch the user from Appwrite and renders the default slot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-find-more-components-here" class="anchor"&gt;
  &lt;/a&gt;
  You can find more components &lt;a href="https://github.com/appwrite/sdk-for-svelte"&gt;here&lt;/a&gt;
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  👆 Conclusion
&lt;/h1&gt;

&lt;p&gt;Of course, there are many more components that cover all the functionalities (except teams, that's coming) of Appwrite. This library allows you to kickstart ideas in no time with Svelte. If you have any feedback you'd like to share with me, I'd be glad to read your comments!&lt;/p&gt;

&lt;p&gt;To support this claim, a tutorial series will be published in the coming weeks, in which I will present all aspects of this library and Appwrite itself by building an Instagram clone. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/sdk-for-svelte"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/svelte-appwrite"&gt;npm Package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>svelte</category>
      <category>appwrite</category>
      <category>baas</category>
      <category>selfhosted</category>
    </item>
    <item>
      <title>Get to Know A of MEAN Stack</title>
      <author>Farhat Sharif</author>
      <pubDate>Tue, 12 Jan 2021 15:08:24 +0000</pubDate>
      <link>https://dev.to/farhatsharifh/get-to-know-a-of-mean-stack-3bjf</link>
      <guid>https://dev.to/farhatsharifh/get-to-know-a-of-mean-stack-3bjf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#angular" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Angular&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://angular.io/docs"&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/a&gt; is a component based web application framework used to build efficient front-end solutions. Angular simplifies the ways of creating single-page client-side applications using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML"&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://www.typescriptlang.org/docs/"&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/a&gt; (a superset of JavaScript).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Overview&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Angular app consists of &lt;a href="https://angular.io/guide/architecture#modules"&gt;&lt;strong&gt;module(s)&lt;/strong&gt;&lt;/a&gt;. Every module represents a particular functionality and organizes related components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angular.io/guide/architecture#components"&gt;&lt;strong&gt;Components&lt;/strong&gt;&lt;/a&gt; are the building blocks of an Angular app. Every component defines an angular view. Components use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML templates to define the view part of the component. These templates contain Angular &lt;a href="https://angular.io/guide/template-syntax"&gt;&lt;strong&gt;template syntax&lt;/strong&gt;&lt;/a&gt; to alter the views dynamically according to the app logic, state and data. &lt;/li&gt;
&lt;li&gt;Classes (written in TypeScript) to define components’ logic to handle data and functionality.&lt;/li&gt;
&lt;li&gt;Component-specific styles for the UI design.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then there are &lt;a href="https://angular.io/guide/architecture#services-and-dependency-injection"&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;/a&gt;, i.e. classes used to define the functionality that is not associated with a view. Services can be injected into components with a mechanism known as &lt;a href="https://angular.io/guide/architecture-services#dependency-injection-di"&gt;&lt;strong&gt;dependency injection&lt;/strong&gt;&lt;/a&gt;. Services are shared across components. &lt;/p&gt;

&lt;p&gt;The TypeScript code is translated to JavaScript instructions by the framework’s compiler at build time. It brings all the efficiency associated with JavaScript to the Angular app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Benefits&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Angular supports &lt;strong&gt;highly scalable systems&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Angular produces &lt;strong&gt;high-performance apps&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Angular provides the ability to design &lt;a href="https://angular.io/guide/accessibility"&gt;&lt;strong&gt;accessible apps&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://material.angular.io/"&gt;&lt;strong&gt;Angular Material library&lt;/strong&gt;&lt;/a&gt;, for people with visual or motor impairments.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>meanstack</category>
    </item>
    <item>
      <title>The &lt; kbd &gt; HTML Tag</title>
      <author>Braydon Coyer</author>
      <pubDate>Tue, 12 Jan 2021 14:19:39 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/the-kbd-html-tag-2n2o</link>
      <guid>https://dev.to/braydoncoyer/the-kbd-html-tag-2n2o</guid>
      <description>&lt;p&gt;Welcome to part two of the  &lt;a href="https://hashnode.com/series/uncommon-html-tags-ckjiqctar042xzgs1bei2e9a3"&gt;Uncommon HTML Tag series&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;With each article in this series, I will introduce a widely unknown HTML tag, discuss compatibility across browsers and cover some real-world use cases with the element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-lt-kbd-gt-tag" class="anchor"&gt;
  &lt;/a&gt;
  The &amp;lt; kbd &amp;gt; Tag
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;kbd&amp;gt;&amp;lt;/kbd&amp;gt;&lt;/code&gt; tag defines user input on your document and, by default, uses the browser's monospace font for visual distinction. &lt;/p&gt;

&lt;p&gt;While the most common use-case for using this tag is to denote keyboard input, it can also be used for input such as voice or other commands.&lt;/p&gt;

&lt;p&gt;Let's take a look at how it's used!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;To open a new tab on Mac, press 
   &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;Cmd&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt; + &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;T&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt;.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;To open a new tab on Windows, press 
   &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;Ctrl&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt; + &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;T&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt;.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PhQHNTsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123792192/MXExc-oWS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PhQHNTsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123792192/MXExc-oWS.png" alt="Screen Shot 2021-01-08 at 10.35.54 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both the opening and closing tags are mandatory and, unlike some of the other HTML tags we've discussed, does not contain any unique attributes (global attributes can be used).&lt;/p&gt;

&lt;p&gt;If you want to have the content of the tag stand out a little more, consider applying some custom CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbVHspL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123799122/9IRGM_RSs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbVHspL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123799122/9IRGM_RSs.png" alt="Screen Shot 2021-01-08 at 10.36.23 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to play around with the tag, feel free to fork the pen below!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/braydoncoyer/embed/RwGBpPm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatibility" class="anchor"&gt;
  &lt;/a&gt;
  Compatibility
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;kbd&amp;gt;&amp;lt;/kbd&amp;gt;&lt;/code&gt; tag is part of the HTML Living Standard and is supported on all major web browsers! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--33Vhw9Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123865495/0KAlfI3qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--33Vhw9Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123865495/0KAlfI3qf.png" alt="Screen Shot 2021-01-08 at 10.37.30 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading! Have you ever used the &lt;code&gt;&amp;lt;kbd&amp;gt;&amp;lt;/kbd&amp;gt;&lt;/code&gt; tag in a project? Let me know in the comments below!&lt;/p&gt;

&lt;p&gt;If you liked this article and want more content like this, read some of my &lt;a href="https://blog.braydoncoyer.dev/"&gt;other articles&lt;/a&gt; , subscribe to my newsletter and make sure to follow me on &lt;a href="https://twitter.com/BraydonCoyer"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Basic Hooks in React - useEffect()</title>
      <author>Olena Drugalya</author>
      <pubDate>Tue, 12 Jan 2021 14:18:20 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/basic-hooks-in-react-useeffect-4719</link>
      <guid>https://dev.to/olenadrugalya/basic-hooks-in-react-useeffect-4719</guid>
      <description>&lt;p&gt;This blog post continues the series about &lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here we are exploring one of basic and very important hooks in React - &lt;strong&gt;useEffect()&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-useeffect" class="anchor"&gt;
  &lt;/a&gt;
  What is useEffect()?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;useEffect()&lt;/strong&gt; is JavaScript function, which lets you perform side-effects in &lt;em&gt;functional component&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;Under &lt;em&gt;side-effects&lt;/em&gt; we understand operations such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data fetching&lt;/li&gt;
&lt;li&gt;subscriptions&lt;/li&gt;
&lt;li&gt;manually changing the DOM etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are called "side-effects" because can affect other components and can’t be done during rendering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-and-when-use-useeffect" class="anchor"&gt;
  &lt;/a&gt;
  How and when use useEffect()
&lt;/h2&gt;

&lt;p&gt;To use this hook, you need to import it first from React library like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use this hook without import as well like this - &lt;code&gt;React.useEffect()&lt;/code&gt;, for me it's just more convenient to import and destructure first this function and then use it when need in the code.&lt;/p&gt;

&lt;p&gt;You use it in your &lt;em&gt;functional component&lt;/em&gt; same as you would use life-cycle methods &lt;code&gt;componentDidMount()&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt; in &lt;em&gt;class-based component&lt;/em&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Similar to componentDidMount and componentDidUpdate:&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Perform necessary side-effects here&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example, let's consider we are building an application which with get data from API (fetching data is a side-effect).  Our app will get a list of articles about Redux and display it.&lt;/p&gt;

&lt;p&gt;First step is writing our component and defining state - an array of articles in our case, which we are going to fetch from API. Than we simply display it on the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Second step is to use &lt;code&gt;useEffect()&lt;/code&gt; and fetch the needed data inside this hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://hn.algolia.com/api/v1/search?query=redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here useEffect() will fetch the data with axios from the API and  set the data to the state of the component with the state hook's update function. The promise resolving happens with async/await.&lt;/p&gt;

&lt;p&gt;But, if we run our app like it has written above, we are going to fall into an infinite loop. Why? Let's find out :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#characteristics-and-features" class="anchor"&gt;
  &lt;/a&gt;
  Characteristics and features
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;useEffect()&lt;/strong&gt; function can accept 2 parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;callback function (provides logic for side-effect)&lt;/li&gt;
&lt;li&gt;dependencies array (provides list of dependencies of your side-effect: being props or state values.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &lt;em&gt;dependencies array&lt;/em&gt; is omitted (like in our example above), then useEffect() will be invoked on every render. Why?&lt;/p&gt;

&lt;p&gt;As written above, &lt;code&gt;useEffect()&lt;/code&gt; behaves in &lt;em&gt;functional component&lt;/em&gt; same as life-cycle methods &lt;code&gt;componentDidMount()&lt;/code&gt; and &lt;code&gt;componentDidUpdate()&lt;/code&gt; in &lt;em&gt;class-based component&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;That means that effect hook runs not only when component mounted, but also when component is being updated. In our example we update the state inside the hook right after we have fetched data, which means effect hook will run again because component was updated. &lt;/p&gt;

&lt;p&gt;This is something we don't need, because we get our data only once the page is loaded and then we use it in app. &lt;/p&gt;

&lt;p&gt;In our case we need that dependencies array to avoid the above-described situation and run only once, so we can re-write our effect hook like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://hn.algolia.com/api/v1/search?query=redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, to sum up about &lt;code&gt;useEffect()&lt;/code&gt;dependencies array :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not provided: the side-effect runs after every rendering
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Runs after EVERY rendering&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;2.An empty array []: the side-effect runs once after the initial rendering&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Runs ONCE after initial rendering&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;3.Has props or state values [prop1, prop2, ..., state1, state2]: the side-effect runs only when any dependancies value changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Runs ONCE after initial rendering&lt;/span&gt;
    &lt;span class="c1"&gt;// and after every rendering ONLY IF `prop` changes&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use multiple &lt;code&gt;useEffect()&lt;/code&gt; hooks in one component, each implementing its own logic. You can create customs hooks and use &lt;code&gt;useEffect()&lt;/code&gt; inside it. Once you get more confidence and practice with this hook, you can do magic!&lt;/p&gt;

&lt;p&gt;Resources used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dmitripavlutin.com/react-useeffect-explanation/"&gt;https://dmitripavlutin.com/react-useeffect-explanation/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;https://reactjs.org/docs/hooks-effect.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Serverless Containers with Next.js, AWS Fargate, and AWS Amplify</title>
      <author>Nader Dabit</author>
      <pubDate>Tue, 12 Jan 2021 13:49:23 +0000</pubDate>
      <link>https://dev.to/dabit3/serverless-containers-with-next-js-aws-fargate-and-aws-amplify-17fe</link>
      <guid>https://dev.to/dabit3/serverless-containers-with-next-js-aws-fargate-and-aws-amplify-17fe</guid>
      <description>&lt;p&gt;AWS Amplify &lt;a href="https://aws.amazon.com/blogs/mobile/zero-effort-container-deployment-for-graphql-and-rest-apis-and-web-hosting-with-amplify-cli/"&gt;recently announced&lt;/a&gt; support for containers using AWS Fargate. Using the new feature, you are able to deploy APIs (REST &amp;amp; GraphQL) as well as hosting to AWS Fargate directly from the Amplify CLI.&lt;/p&gt;

&lt;p&gt;In this post, I will walk you through how to deploy a Next.js app to AWS Fargate with a custom domain using the Amplify CLI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a complete walkthrough of this tutorial, check out &lt;a href="https://www.youtube.com/watch?v=rA5l82vypXc"&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;To follow this tutorial, you will first need to &lt;a href="https://docs.amplify.aws/cli/start/install"&gt;install and configure&lt;/a&gt; the Amplify CLI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, create a new Next.js app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app nextonfargate
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Next, initialize a new Amplify project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify init

? Enter a name &lt;span class="k"&gt;for &lt;/span&gt;the project: nextonfargate
? Enter a name &lt;span class="k"&gt;for &lt;/span&gt;the environment: dev
? Choose your default editor: &amp;lt;your-default-text-editor&amp;gt;
? Choose the &lt;span class="nb"&gt;type &lt;/span&gt;of app that youre building: javascript
? What javascript framework are you using: react
? Source Directory Path: &lt;span class="nb"&gt;.&lt;/span&gt;
? Distribution Directory Path: .next
? Build Command:  npm run-script build
? Start Command: npm run-script start

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; When prompted, choose the AWS profile you&lt;span class="s1"&gt;'d like to use for this project.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Next, reconfigure the project to enable container deployments:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify configure project

? Enter a name &lt;span class="k"&gt;for &lt;/span&gt;the project nextonfargate
? Choose your default editor: &amp;lt;your-default-text-editor&amp;gt;
? Choose the &lt;span class="nb"&gt;type &lt;/span&gt;of app that youre building javascript
? What javascript framework are you using react
? Source Directory Path:  &lt;span class="nb"&gt;.&lt;/span&gt;
? Distribution Directory Path: .next
? Build Command:  npm run-script build
? Start Command: npm run-script start
? Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;container-based deployments? Yes
? Do you want to update or remove the project level AWS profile? No
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-domain-to-route53" class="anchor"&gt;
  &lt;/a&gt;
  Adding the domain to Route53
&lt;/h2&gt;

&lt;p&gt;Next, open the &lt;a href="https://console.aws.amazon.com/route53"&gt;Route53 dashboard&lt;/a&gt; and click on &lt;strong&gt;Hosted zones&lt;/strong&gt; in the left-hand menu.&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create Hosted Zone&lt;/strong&gt; and enter the name of the domain that you will be using, then click &lt;strong&gt;Create hosted zone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNyjhL-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jwlj333sabav8i67knx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNyjhL-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jwlj333sabav8i67knx.png" alt="Create Hosted Zone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Route53 should now give you 4 nameservers that you can use for configuring the DNS of your domain name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20bZH9-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/42w9mrnryz71o71gkzmf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20bZH9-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/42w9mrnryz71o71gkzmf.jpg" alt="Configuring nameservers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, visit your domain name registration service and configure your domain with these nameservers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PgaWa8FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vbhfoa8m7wc3qpokkf0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PgaWa8FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vbhfoa8m7wc3qpokkf0m.png" alt="Configuring nameservers"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-fargate-hosting" class="anchor"&gt;
  &lt;/a&gt;
  Adding Fargate Hosting
&lt;/h2&gt;

&lt;p&gt;Next, add Fargate Hosting by running the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add hosting

? Select the plugin module to execute Container-based hosting with AWS Fargate
? Provide your web app endpoint: www.yourdomain.com
? Do you want to automatically protect your web app using Amazon Cognito Hosted UI No
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This should configure your project locally, and you should now see a &lt;strong&gt;Dockerfile&lt;/strong&gt; created at the root of the project.&lt;/p&gt;

&lt;p&gt;Update the Dockerfile with the following and save the file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploying" class="anchor"&gt;
  &lt;/a&gt;
  Deploying
&lt;/h2&gt;

&lt;p&gt;You should now be ready to deploy. To do so, you can run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify publish
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the deployment is successful, you should be able to view the app on your live domain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging" class="anchor"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h3&gt;

&lt;p&gt;You should be able to view the deployment and build happening as well as any error logging in the &lt;a href="https://console.aws.amazon.com/codesuite/codebuild/projects"&gt;CodeBuild&lt;/a&gt; dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-updates" class="anchor"&gt;
  &lt;/a&gt;
  Deploying updates
&lt;/h3&gt;

&lt;p&gt;Once you make a change and are ready to deploy, you should be able to run &lt;code&gt;amplify publish&lt;/code&gt; at any time to deploy updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video" class="anchor"&gt;
  &lt;/a&gt;
  Video
&lt;/h2&gt;

&lt;p&gt;Check out this video for a complete walkthrough of this process.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rA5l82vypXc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>containers</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Linux Basics </title>
      <author>Rudrakshi</author>
      <pubDate>Tue, 12 Jan 2021 13:44:42 +0000</pubDate>
      <link>https://dev.to/rudrakshi99/linux-basics-2onj</link>
      <guid>https://dev.to/rudrakshi99/linux-basics-2onj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; is a family of open-source Unix-like operating systems based on the Linux kernel developed by &lt;strong&gt;Linus Torvalds&lt;/strong&gt;. It’s essential for a software developer to at least have an idea of how Linux works and how to use it. In this article, you’ll find some insights into the Linux OS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HrWGumi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6nxcimzhqk1fzyety9hs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HrWGumi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6nxcimzhqk1fzyety9hs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-commands" class="anchor"&gt;
  &lt;/a&gt;
  Basic Commands
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. pwd&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;pwd&lt;/code&gt; command to print the working directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. ls&lt;/strong&gt;&lt;br&gt;
To list the contents of a directory, you use the &lt;code&gt;ls&lt;/code&gt; command (short for list). When you run the &lt;code&gt;ls&lt;/code&gt; command without any arguments, it lists the contents of the present working directory by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. cd&lt;/strong&gt;&lt;br&gt;
You can change to a different directory using the &lt;code&gt;cd&lt;/code&gt; command (short for change directory).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. rm&lt;/strong&gt;&lt;br&gt;
It is used to remove objects such as computer files, directories, and symbolic links from file systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. cat&lt;/strong&gt;&lt;br&gt;
It reads files sequentially, writing them to standard output. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-linux-directory-structure" class="anchor"&gt;
  &lt;/a&gt;
  The Linux Directory Structure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ABYvXaHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhc3hiyfli6efyf9es74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABYvXaHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhc3hiyfli6efyf9es74.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's understand the naming conventions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9zioOxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9pq7kvzj7ftxs3b2o53x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9zioOxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9pq7kvzj7ftxs3b2o53x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#path" class="anchor"&gt;
  &lt;/a&gt;
  Path
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PATH&lt;/strong&gt; is an environmental variable in Linux and other Unix-like operating systems that tells the shell which directories to search for executable files (i.e., ready-to-run programs) in response to commands issued by a user.&lt;/p&gt;

&lt;p&gt;There are two basic types of paths:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Absolute path&lt;/strong&gt;&lt;br&gt;
It is also known as &lt;strong&gt;full path&lt;/strong&gt;. It is the location of a filesystem object relative to the root directory. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Relative Path&lt;/strong&gt;&lt;br&gt;
Relative paths are relative to the present working directory. A list of special relative paths is listed in the table below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggaBkOjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhx6jnq3ayrlz02x42kr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggaBkOjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhx6jnq3ayrlz02x42kr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flags" class="anchor"&gt;
  &lt;/a&gt;
  Flags
&lt;/h2&gt;

&lt;p&gt;Linux commands can be tuned to our requirements by providing flags along with the command when calling them. These are usually a hyphen (-) followed by an alphabet eg: -a, -B etc or double-hyphen (--) followed by text eg: --all, --color&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flags&lt;/strong&gt; are a way to set options and pass in arguments to the commands you run. Commands you run will change their behavior based on what flags are set.&lt;/p&gt;

&lt;p&gt;But, how will we find a flag for our purpose?&lt;/p&gt;

&lt;p&gt;Commands come with a "Manual" as well. We can access it using the &lt;code&gt;man&lt;/code&gt; command followed by the name of the command we need to see the manual of. For &lt;code&gt;ls&lt;/code&gt;, we do &lt;code&gt;man ls&lt;/code&gt; and you will get this-.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xMq0Q08E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2xc9zdjzocxs87psb3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMq0Q08E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2xc9zdjzocxs87psb3i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NAME&lt;/strong&gt; - name of the command &amp;amp; short description of what it does&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SYNPOSIS&lt;/strong&gt; - how the command is used&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DESCRIPTION&lt;/strong&gt; - detailed info on the usage of the command&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#linux-filesystems" class="anchor"&gt;
  &lt;/a&gt;
  Linux filesystems
&lt;/h2&gt;

&lt;p&gt;A Linux file system is a structured collection of files on a disk drive or a partition. A partition is a segment of memory and contains some specific data. In our machine, there can be various partitions of the memory. Generally, every partition contains a file system. &lt;/p&gt;

&lt;p&gt;The Linux file system contains the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The entire Linux directory structure starting at the top (/) root directory. &lt;/li&gt;
&lt;li&gt;A specific data storage format (EXT3, EXT4, BTRFS, XFS and so on)&lt;/li&gt;
&lt;li&gt;A partition or logical volume having a particular file system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Linux filesystem security model helps to ensure that users only have access to their own files and not those of others or the operating system itself.&lt;/p&gt;

&lt;p&gt;The final building block is the software required to implement all of these functions. Linux uses a two-part software implementation as a way to improve both system and programmer efficiency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNzPHTrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3lng7pe475d2iq9r4cgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNzPHTrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3lng7pe475d2iq9r4cgt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check &lt;a href="https://opensource.com/life/16/10/introduction-linux-filesystems"&gt;this link&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#directory-structure" class="anchor"&gt;
  &lt;/a&gt;
  Directory structure
&lt;/h3&gt;

&lt;p&gt;In Linux and many other operating systems, directories can be structured in a tree-like hierarchy. The Linux directory structure is well defined and documented in the &lt;strong&gt;Linux Filesystem Hierarchy Standard&lt;/strong&gt; (FHS). Referencing those directories when accessing them is accomplished by using the sequentially deeper directory names connected by forward slashes (/) such as /var/log and /var/spool/mail. These are called paths.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-permissions" class="anchor"&gt;
  &lt;/a&gt;
  File Permissions
&lt;/h2&gt;

&lt;p&gt;When we used &lt;code&gt;ls -l&lt;/code&gt; in the terminal, it shows the file permissions. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh1bQnXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66xof127dt1dewwyccbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh1bQnXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66xof127dt1dewwyccbd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's understand it with a sample output of &lt;strong&gt;ls -lh&lt;/strong&gt; which is given below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiHusup7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q2sbvci7z4ewewjw5s62.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiHusup7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q2sbvci7z4ewewjw5s62.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For effective security, Linux divides authorization into 2 levels.&lt;/p&gt;

&lt;p&gt;1.Ownership&lt;br&gt;
2.Permission&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ownership of Linux files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every file and directory on your Unix/Linux system is assigned 3 types of owners, given below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;&lt;br&gt;
A user is the owner of the file. By default, the person who created a file becomes its owner. Hence, a user is also sometimes called an owner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Group&lt;/strong&gt;&lt;br&gt;
A user- group can contain multiple users. All users belonging to a group will have the same Linux group permissions access to the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;br&gt;
Any other user who has access to a file. This person has neither created the file, nor he belongs to a usergroup who could own the file. Practically, it means everybody else. Hence, when you set the permission for others, it is also referred as set permissions for the world.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Permissions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Linux divides the file permissions into &lt;strong&gt;read&lt;/strong&gt;, &lt;strong&gt;write&lt;/strong&gt; and &lt;strong&gt;execute&lt;/strong&gt; denoted by r,w, and x.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5LLqSK5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ymi0wqr6cgrfmz54xnfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LLqSK5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ymi0wqr6cgrfmz54xnfb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;r:&lt;/strong&gt; read permission&lt;br&gt;
&lt;strong&gt;w:&lt;/strong&gt; write permission&lt;br&gt;
&lt;strong&gt;x:&lt;/strong&gt; execute permission&lt;/p&gt;

&lt;p&gt;Octal values are used to represent permissions.&lt;/p&gt;

&lt;p&gt;4 -&amp;gt; read permission&lt;br&gt;
2 -&amp;gt; write permission&lt;br&gt;
1 -&amp;gt; execute permission&lt;/p&gt;

&lt;p&gt;Refer to &lt;a href="https://www.pluralsight.com/blog/it-ops/linux-file-permissions"&gt;this link&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Thanks for reading, I hope you liked this article. If you find it beneficial then don’t forget to like and share among your peers :).&lt;/p&gt;

</description>
      <category>linux</category>
      <category>commandline</category>
      <category>terminal</category>
    </item>
    <item>
      <title>Simple Script Cut 50% Size Of My React Website</title>
      <author>Minh-Phuc Tran</author>
      <pubDate>Tue, 12 Jan 2021 13:12:08 +0000</pubDate>
      <link>https://dev.to/phuctm97/simple-script-cut-50-size-of-my-react-website-dm3</link>
      <guid>https://dev.to/phuctm97/simple-script-cut-50-size-of-my-react-website-dm3</guid>
      <description>&lt;p&gt;Hi friends, it's &lt;a href="https://twitter.com/phuctm97"&gt;@phuctm97&lt;/a&gt; again. It has been 3 days since my last post, it's my first week at my new job so things have been a little hectic 🤓. Anyway, today article is a very simple but kinda mindblowing script that I did a couple&lt;br&gt;
of days ago in &lt;a href="https://phuctm97.com"&gt;my Next.js/React website&lt;/a&gt; that cut my site's bundle size from 90kb to a little less than 50kb.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uoCramMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7skdtej3amtzbimmuj3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uoCramMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7skdtej3amtzbimmuj3g.png" alt="Before"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fn_jgtRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/15ab8c079t3tevajg159.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fn_jgtRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/15ab8c079t3tevajg159.png" alt="After"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here is how.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: my site is built on top of Next.js (and React).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#preact" class="anchor"&gt;
  &lt;/a&gt;
  Preact
&lt;/h2&gt;

&lt;p&gt;It's all possible thanks to &lt;a href="https://preactjs.com"&gt;Preact&lt;/a&gt;. Preact is a 3kb alternative implementation of React that provides 100% compatible APIs to React, what it means is that Preact and React are interchangeable but Preact is &lt;a href="https://bundlephobia.com/result?p=preact@10.5.9"&gt;4kb&lt;/a&gt; whereas React is &lt;a href="https://bundlephobia.com/result?p=react-dom@17.0.1"&gt;40kb&lt;/a&gt;. You may be skeptical about whether it's stable, see this &lt;a href="https://preactjs.com/about/we-are-using"&gt;list of companies&lt;/a&gt;, you'll be confident using it.&lt;/p&gt;

&lt;p&gt;So, it's kinda no-brainer to use Preact. However, do keep in mind that the team implementing Preact and React are separate and we aren't sure about what will happen in the future. Also, Preact devtools support is currently quite limited in comparison to React.&lt;/p&gt;

&lt;p&gt;So, I figure the best way to use it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dev with React and simply swap React and Preact in production bundle, no changes to my dependency tree - I got the best of both worlds, amazing devtools and ecosystem of React and smallest bundle size of Preact for my users 🔥.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#nextjs-plugin" class="anchor"&gt;
  &lt;/a&gt;
  Next.js plugin
&lt;/h2&gt;

&lt;p&gt;My website is powered by &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt;, however the same concept is appliable to any other React-based project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withPreact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// Use Preact only in client production bundle.&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;react&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/compat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/compat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;create-react-class&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact-compat/lib/create-react-class&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom-factories&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact-compat/lib/react-dom-factories&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withMDX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@next/mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withPreact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Any other Next.js config. MDX is used as an example for compatibility here.&lt;/span&gt;
  &lt;span class="nx"&gt;withMDX&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;pageExtensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that I'm able to use other React-based technologies, too, (&lt;a href="https://mdxjs.com"&gt;MDX&lt;/a&gt; in this case).&lt;/p&gt;

&lt;p&gt;Also, you'll need to have Preact installed in your &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add preact
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alright, that is it! I'm using it in &lt;a href="https://phuctm97.com"&gt;my website&lt;/a&gt;, it's really a no-brainer using Preact this way. Don't worry, I'll let you know whenever my website is not functioning correctly 😉.&lt;/p&gt;

&lt;p&gt;Hope it is simple and useful enough to help you save half of your site tomorrow, too!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Create Lumen development environment in 1 minute</title>
      <author>Mạnh Đạt</author>
      <pubDate>Tue, 12 Jan 2021 09:11:36 +0000</pubDate>
      <link>https://dev.to/datmt/create-lumen-development-environment-in-1-minute-5gf9</link>
      <guid>https://dev.to/datmt/create-lumen-development-environment-in-1-minute-5gf9</guid>
      <description>&lt;p&gt;So recently I need to study lumen (from Laravel). I used Laravel back in version 4.2. A lot of things has changed. I need to setup the environment very quickly and dive right into writing application. &lt;/p&gt;

&lt;p&gt;Having not so pleasant setting up Laravel (with Homestead, Vagrant...) I decide to find a method that help me (and other people like me) to get started quickly. After a few hours, I finally have the setup I really like.&lt;/p&gt;

&lt;p&gt;TLDR:&lt;br&gt;
Here is the video:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=nympC_8CWwE&amp;amp;feature=youtu.be"&gt;https://www.youtube.com/watch?v=nympC_8CWwE&amp;amp;feature=youtu.be&lt;/a&gt;&lt;br&gt;
Here is the git repo:&lt;br&gt;
&lt;a href="https://github.com/datmt/docker-microservices"&gt;https://github.com/datmt/docker-microservices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the patient reader, read on.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-0-clone-the-repo" class="anchor"&gt;
  &lt;/a&gt;
  Step 0: Clone the repo
&lt;/h1&gt;

&lt;p&gt;This is a must.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-1-choose-a-domain-name-put-in-your-hosts-file" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: choose a domain name, put in your hosts file.
&lt;/h1&gt;

&lt;p&gt;Don't worry, you don't need to buy any domain. You can pick any domain, even &lt;code&gt;google.com&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In  my case, I used &lt;code&gt;cnn.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rPqXbcOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t8vmbhly1zsilrpvtoud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rPqXbcOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t8vmbhly1zsilrpvtoud.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-2-update-the-domain-in-defaultconf-file" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Update the domain in default.conf file
&lt;/h1&gt;

&lt;p&gt;Now, in the lumen-dev folder, there is a file called default.conf. This is the default configuration for nginx server. &lt;/p&gt;

&lt;p&gt;Find the part says &lt;code&gt;cnn.com&lt;/code&gt; and replace it with your own domain.&lt;/p&gt;

&lt;p&gt;This is the content of the default.conf file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    root   /usr/share/nginx/html;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php_server:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
    # concurs with nginx's one
    #
    location ~ /\.ht {
        deny  all;
    }
}


server {
    listen 80 default_server;


    root /usr/share/nginx/html/public;
    index index.php index.html index.htm;

    server_name cnn.com;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php_server:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }


}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-install-composer-packages" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Install composer packages
&lt;/h1&gt;

&lt;p&gt;cd to &lt;code&gt;src&lt;/code&gt; folder and run &lt;code&gt;composer install&lt;/code&gt;. In case you don't have composer installed, download the &lt;code&gt;lumen.tar.gz&lt;/code&gt; file under &lt;code&gt;archives&lt;/code&gt; and extract it. There is a vendor folder there. &lt;br&gt;
Copy that vendor folder to &lt;code&gt;src/&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-4-edit-your-port" class="anchor"&gt;
  &lt;/a&gt;
  Step 4: Edit your port
&lt;/h1&gt;

&lt;p&gt;My default configuration use port 8089. If you want to use other port, change it accordingly. One caution if you use port 80 is to make sure that port is free. Many applications use port 80 so you may not be able to start the application.&lt;br&gt;
This is the docker-compose.yml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3.8'

services:
    nginx:
        image: nginx:1.19.6
        container_name: nginx
        volumes:
            - ./src:/usr/share/nginx/html
            - ./default.conf:/etc/nginx/conf.d/default.conf
        ports:
            - 8089:80
        links:
            - php_server
    php_server:
        container_name: php_server
        image: php:7.4.14-fpm-buster
        volumes:
            - ./src:/usr/share/nginx/html


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-5-use-dockercompose-to-start-the-app" class="anchor"&gt;
  &lt;/a&gt;
  Step 5: Use docker-compose to start the app
&lt;/h1&gt;

&lt;p&gt;In &lt;code&gt;lumen-dev&lt;/code&gt; folder (where you have docker-compose.yml file), run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, you can open your browser and access your application at the port you choose. &lt;/p&gt;

&lt;p&gt;Have questions? Please let me know&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to integrate ReactGrid with Chart.js?</title>
      <author>Patryk Eliasz</author>
      <pubDate>Tue, 12 Jan 2021 08:51:18 +0000</pubDate>
      <link>https://dev.to/reactgrid/how-to-integrate-reactgrid-with-chart-js-3f75</link>
      <guid>https://dev.to/reactgrid/how-to-integrate-reactgrid-with-chart-js-3f75</guid>
      <description>&lt;p&gt;&lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt; is a React.js component for displaying and editing data in a spreadsheet-like way. This guide shows you how to integrate it with the well-known pure Javascript library - &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Va6Jp2_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64i93s5pbjf05j7dgo9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Va6Jp2_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64i93s5pbjf05j7dgo9d.png" alt="Audiogram app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-reactgrid" class="anchor"&gt;
  &lt;/a&gt;
  Why ReactGrid?
&lt;/h2&gt;

&lt;p&gt;There are plenty of different data tables available on the Internet, which perform great if you want to display one object per row. &lt;br&gt;
Each of these objects has to have exactly the same static properties, which are mapped to columns in the table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt; was designed to be independent of your data model.&lt;br&gt;
It doesn't care about your schema. You can render anything in any cell and thus you are able to display things the way you like it.&lt;/p&gt;

&lt;p&gt;Unlike other grid components, &lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt; also performs great on mobile devices or those with a touch capability and provides the same experience as on a desktop.&lt;/p&gt;

&lt;p&gt;Before we get started let's list three main tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;displaying the collected data will be achieved with &lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt;. To be &lt;strong&gt;reactive&lt;/strong&gt; we will re-render the view only when the source data has changed.
In this example, raw data comes from an audiometer - a device that is used for making hearing tests.
In a nutshell, audiometer measures multiple hearing difficulties at many frequencies,  and the audiogram is a way of visualizing such disorders.&lt;/li&gt;
&lt;li&gt;visualize the collected data on the line chart using &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; and its React wrapper,&lt;/li&gt;
&lt;li&gt;add a possibility to enter a new value and rerender the whole view with an updated state.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#lets-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's code!
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Initialize the project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nothing simpler - just type one of the commands below into your terminal to initiate a React app with Typescript support.&lt;br&gt;
'Create React App' will take care of all the necessary stuff.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Define useful interfaces and types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, we need to declare a few interfaces and types that help us to keep everything in the right place and order.&lt;br&gt;
In this particular example, we know all about the data that we want to process.&lt;br&gt;
A good idea is to 'be as narrow' as possible.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Mark the columns and rows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Relying on those interfaces now we can introduce &lt;code&gt;getColumns&lt;/code&gt; function. &lt;br&gt;
In our app, we got a &lt;code&gt;Line&lt;/code&gt; column, and after that, we got columns which are related to a particular frequency from 0Hz to 16000Hz.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The next stage is mapping all the rows. We make it in a similar way to previous examples.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Define the data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we defined our data, it's time to define our data that we are working on. &lt;code&gt;getData&lt;/code&gt; function returns an object whose each key must exist within the &lt;code&gt;RowsMap&lt;/code&gt; interface. Each key of this object contains an array of &lt;code&gt;Freq&lt;/code&gt; objects.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Map the data to ReactGrid&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we are ready to generate rows that directly feed into &lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt;.  Each row contains the same amount of cells, but all of them can be arbitrarily placed in any order.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The main component - &lt;code&gt;Audiogram&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is time to create the main component - &lt;code&gt;Audiogram&lt;/code&gt; and wrap up already written code. &lt;br&gt;
As you can see we stored our data inside React &lt;code&gt;useState&lt;/code&gt; hook. &lt;br&gt;
&lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt; always expects two props - &lt;code&gt;columns&lt;/code&gt; (they are constant and don’t change over time) and &lt;code&gt;rows&lt;/code&gt; (they are calculated every time the &lt;code&gt;Audiogram&lt;/code&gt; component is rerendered).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All that's left is to render the component with:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8HhEIB12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yge9zdk86yiams491hjr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8HhEIB12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yge9zdk86yiams491hjr.png" alt="ReactGrid displaying the data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-changes-with-the-cell-editor" class="anchor"&gt;
  &lt;/a&gt;
  Apply changes with the cell editor
&lt;/h2&gt;

&lt;p&gt;There are two things left to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a header row to mark the data (devices and all the frequencies);&lt;/li&gt;
&lt;li&gt;Add possibility to edit data with &lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt;'s cell editor;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Adding the header row&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To add it we have to create a short function called &lt;code&gt;getHeaderRow&lt;/code&gt;. As an argument, it gets a column order (as keys of columns) and returns a row object that contains only a cell of the &lt;code&gt;header&lt;/code&gt; type. We also added some green background to those cells.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKUp-0FK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kpn2rik57wk9ccej62j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKUp-0FK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kpn2rik57wk9ccej62j6.png" alt="ReactGrid with a header row"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Editing frequency values in cell editor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this moment &lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt; behaves as a read-only. To change that we updated the &lt;code&gt;Audiogram&lt;/code&gt; component by adding our handler function called &lt;code&gt;handleChanges&lt;/code&gt;. We expect that only &lt;code&gt;NumberCell&lt;/code&gt; will be changed, therefore we marked the &lt;code&gt;changes&lt;/code&gt; argument as &lt;code&gt;CellChange&amp;lt;NumberCell&amp;gt;[]&lt;/code&gt;. Our task is to change data on the basis &lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt; has been rendered.&lt;/p&gt;

&lt;p&gt;Cell editor opens when it receives double-click action or the Enter key is pressed. &lt;br&gt;
Then you can type a new value in and then commit the change. If we &lt;code&gt;console.log(changes)&lt;/code&gt; we get an array of objects as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To change our raw data we have to find &lt;code&gt;rowId&lt;/code&gt; where the change takes place. &lt;br&gt;
Then loop over all frequency samples and apply a new value (&lt;code&gt;change.newCell.value&lt;/code&gt;) to an appropriate cell or just return without changes.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#data-visualization-with-chartjs" class="anchor"&gt;
  &lt;/a&gt;
  Data visualization with Chart.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; library delivers plenty of components to visualize data, but this time we focus on a single one - &lt;code&gt;Line&lt;/code&gt; from &lt;a href="https://github.com/reactchartjs/react-chartjs-2"&gt;&lt;code&gt;react-chartjs-2&lt;/code&gt;&lt;/a&gt; that we can use as a React component.&lt;/p&gt;

&lt;p&gt;We have to create two functions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;getChartData&lt;/code&gt; - this function should return an object that contains two fields. The &lt;code&gt;labels&lt;/code&gt; - which is an array of frequency title label and then &lt;code&gt;datasets&lt;/code&gt; field to provide the &lt;code&gt;data&lt;/code&gt; field which contains an array of values for each frequency. 
You can also style your line by setting for example a &lt;code&gt;backgroundColor&lt;/code&gt; or &lt;code&gt;pointRadius&lt;/code&gt; for a better experience.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;getChartOptions&lt;/code&gt; - here we return an object that is compatible with &lt;code&gt;ChartOptions&lt;/code&gt; interface. 
We want to disable legend, set the title, display, and adjust axes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all! The job is done, now you can check the result below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mqoTcyvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l0f0raio6h7qdgq951et.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mqoTcyvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l0f0raio6h7qdgq951et.png" alt="Complete app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/reactgrid-chartjs-audiogram-gtlgr?module=src/Audiogram.tsx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;What you learned after completing this guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what is &lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt; and how to do a fully functional app; &lt;/li&gt;
&lt;li&gt;how you can use it in a reactive way;&lt;/li&gt;
&lt;li&gt;why Typescript is also helpful in a small-scale project to avoid the most common mistakes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you see integrating &lt;a href="https://reactgrid.com/?utm_source=devto&amp;amp;utm_medium=post&amp;amp;utm_campaign=blogcharts"&gt;ReactGrid&lt;/a&gt; with other libraries like &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; is not so hard. Of course, you don't need to start a Typescript project and make all data mappings to compose a predictable solution.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>datatable</category>
    </item>
    <item>
      <title>DevOps Trends to Anticipate in 2021
</title>
      <author>Pavan Belagatti</author>
      <pubDate>Tue, 12 Jan 2021 07:34:01 +0000</pubDate>
      <link>https://dev.to/pavanbelagatti/devops-trends-to-anticipate-in-2021-4cfd</link>
      <guid>https://dev.to/pavanbelagatti/devops-trends-to-anticipate-in-2021-4cfd</guid>
      <description>&lt;p&gt;This is a round-up article where we collected opinions from 15 DevOps experts on what they think will be a trend in 2021 with context to DevOps.&lt;/p&gt;

&lt;p&gt;DevOps has come a long way, and there is no doubt it will continue to shine this year. Since many companies are looking for best practices around their digital transformation, it's important to see where leaders think the industry is going. In that sense, the following article is a collection of responses from the DevOps leaders on DevOps trends to watch for in 2021.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-see-what-each-one-of-them-has-to-say-about-devops-in-the-year-to-come" class="anchor"&gt;
  &lt;/a&gt;
  Let’s see what each one of them has to say about DevOps in the year to come.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#1-migrating-to-microservice-will-become-a-must-lead-devops-engineer-at-wipro-limited" class="anchor"&gt;
  &lt;/a&gt;
  1. Migrating to microservice will become a must - Lead DevOps Engineer at &lt;a href="https://www.wipro.com/"&gt;Wipro Limited&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“Migrating from monolithic to microservice and containerized architecture will be a must for all the company for their Digital Transformation journey. It's not going to be a choice or option anymore. This is where the adoption of Kubernetes will be on rise and when organizations will adopt multi-cloud, Terraform will be the ultimate choice to automate Infrastructure.” - Sachidananda Pattnaik, Lead DevOps Engineer at Wipro Limited&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-hybrid-will-become-the-deployment-norm-vp-of-developer-relations-at-jfrog" class="anchor"&gt;
  &lt;/a&gt;
  2. Hybrid will become the deployment norm - VP of Developer Relations at &lt;a href="https://jfrog.com/"&gt;JFrog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“2020 accelerated remote work, expedited the migration to cloud, and turned DevOps from a best practice to an essential part of every business. As we move into 2021 the industry will &lt;a href="https://www.tfir.io/the-future-of-tech-events-is-hybrid-stephen-chin-jfrog/"&gt;embrace hybrid&lt;/a&gt; on multiple facets. First, businesses will fully embrace hybrid workforces that combine the advantages of remote work and on-site team collaboration. Second, business models will become hybrid, such as conferences that merge virtual scale with local networking. Finally, hybrid will become the deployment norm as companies modernize their stack to take advantage of cloud-native technologies, but realize that not everything can move off-prem. The winners in 2021 will be companies who embrace hybrid across their business, model, and products.” - Stephen Chin, VP of Developer Relations at JFrog&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-dataops-will-boom-senior-devops-engineer-at-rakuten" class="anchor"&gt;
  &lt;/a&gt;
  3. DataOps will boom - Senior DevOps Engineer at &lt;a href="https://www.rakuten.com/"&gt;Rakuten&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“DataOps will definitely boom in 2021, and COVID might play a role in it. Due to COVID and WFH situation, consumption of digital content is skyrocket high which demands a new level of automation for self-scaling and self-healing systems to meet the growth and demand.&lt;/p&gt;

&lt;p&gt;So far, DevOps are setting up systems for Logging, Monitoring, and Alerting only (ELK/EFK Stacks, Prometheus/Grafana/Alertmanager, and so on) Now, it is high time for DevOps to step up and use available data and metrics to generate valuable insights, learn and apply machine learning models to predict incidents or outages, develop automation which learns itself from the data and forecast capacity to improve budget planning. Many have already started calling MLOps/AIOps to this part.” - Nirav Chotai, Senior DevOps Engineer at Rakuten&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-resilience-testing-will-become-mainstream-head-of-product-at-neotys" class="anchor"&gt;
  &lt;/a&gt;
  4. Resilience testing will become mainstream - Head of Product at &lt;a href="https://www.neotys.com/"&gt;Neotys&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“The intersection between Observability, Performance Testing, and Resilience Testing will become mainstream from my point of view. With the recent Ops issues of WW leaders such as AWS and Google, and digital transformation accelerating in all verticals, the market will come to realize that infinite scalability provided by public or private cloud flavors is not enough.” - Patrick Wolf, Head of Product at Neotys&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-gitops-will-become-a-norm-principal-architect-at-macys" class="anchor"&gt;
  &lt;/a&gt;
  5. GitOps will become a norm - Principal Architect at &lt;a href="https://www.macys.com/"&gt;Macy's&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“A “you build it, you own it” development process requires tools that developers know and understand. GitOps is the name for how DevOps use developer tooling to drive operations.&lt;/p&gt;

&lt;p&gt;GitOps is a way to do Continuous Delivery. More specifically, it is an operating model for building Cloud Native applications that unify Deployment, Monitoring, and Management. It works by using Git as a source of truth for declarative infrastructure and applications. Automated CI/CD pipelines roll out changes to your infrastructure when commits are pushed and approved in Git. It also makes use of diff tools to compare the actual production state with what’s under source control and alerts you when there is a divergence. The ultimate goal of GitOps is to speed up development so that your team can make changes and updates safely and securely to complex applications running in Kubernetes.” - Soumen Sarkar, Principal Architect at Macy's&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-there-will-be-more-migrations-to-serverless-site-reliability-engineering-manager-at-lifion-by-adp" class="anchor"&gt;
  &lt;/a&gt;
  6. There will be more migrations to serverless - Site Reliability Engineering Manager at &lt;a href="https://lifion.com/"&gt;Lifion by ADP&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“2021 will be a year to watch for more migrations to serverless .. if containers and orchestration were Generation Z .. live loads on serverless will be Gen z+ .. pay per use will go to pay only when you use model .. pay per use and pay only when you use may appear the same ..but think of running k8s pod-based microservice to running the same on serverless when you need.” - Shivaramakrishnan G, Site Reliability Engineering Manager at Lifion by ADP&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-noops-comes-to-the-scene-ceo-at-clickit-smart-technologies" class="anchor"&gt;
  &lt;/a&gt;
  7. NoOps comes to the scene - CEO at &lt;a href="https://www.clickittech.com/"&gt;ClickIT Smart Technologies&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“I envision more managed services appearing and reducing our DevOps operations and reducing OPEX in customers. More Serverless apps, more serverless services like Aurora Serverless, Fargate, Amazon S3, and serverless static websites. Amazon ECS/EKS in data centers(new release re:invent 2020), and cloud management services that allow you to reduce maintenance and development in data centers. In the same lines, more cloud-native principles and features ported to data-centers, Ex. Knative.” - Alfonso Valdes, CEO at ClickIT Smart Technologies&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-bizdevops-will-emerge-big-time-devops-manager-at-petco" class="anchor"&gt;
  &lt;/a&gt;
  8. BizDevOps will emerge big time - DevOps Manager at &lt;a href="https://www.petco.com/shop/en/petcostore"&gt;Petco&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“The movement toward cost optimization with regard to architectures and corporate hierarchies - as business GROKS the value from DevOps.&lt;/p&gt;

&lt;p&gt;Focus on flexible, cloud-native, architectures and tooling that land capabilities once reserved for the "big guys" in packaging palatable for smaller organizations (Snowflake or Hazelcast vs Oracle/Teradata)&lt;/p&gt;

&lt;p&gt;FaaS is just getting started (serverless, Lambda etc) - the operational issues are being sorted out and people are realizing the potential.” - Chad Prey, DevOps Manager at Petco&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-infrastructure-as-code-iac-will-take-its-stand-even-higher-senior-solutions-architect-at-volvo-cars" class="anchor"&gt;
  &lt;/a&gt;
  9. Infrastructure as Code (IaC) will take its stand even higher - Senior Solutions Architect at &lt;a href="https://www.volvocars.com/"&gt;Volvo Cars&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“&lt;a href="https://stackify.com/what-is-infrastructure-as-code-how-it-works-best-practices-tutorials/"&gt;Infrastructure as code (IaC)&lt;/a&gt;: A core tenet of DevOps in the cloud. Your infrastructure—i.e. servers, networks, and storage devices whether on-premises or in the cloud—defined as a code. This allows a company to automate and simplify its infrastructure. IaC also delivers a straightforward infrastructure version control system that allows teams to roll back to the “last configuration that worked” in case of a catastrophic failure. That means rapid recovery and reduced downtime.” - Niraj Tripathi, Senior Solutions Architect at Volvo Cars&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-automation-amp-chaos-engineering-become-much-important-group-development-manager-at-gibraltar-india-development-center" class="anchor"&gt;
  &lt;/a&gt;
  10. Automation &amp;amp; chaos engineering become much important - Group Development Manager at &lt;a href="https://www.gibraltarindia.com/"&gt;Gibraltar India Development Center&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“Everything automated - Build, deploy, test, infra and release.&lt;/p&gt;

&lt;p&gt;Single line of going to Production with required quality gates. Faster, Repeatable, Customisable and Reliable automation is key to the success of any project. Chaos engineering - Very critical aspect in today's hybrid infra world. System behavior and Customer Experience are tightly coupled, the sooner you test this and better experience you provide to your customers.” - Nikhil Bhandari, Group Development Manager at Gibraltar India Development Center&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-cloudnative-approaches-will-be-standardized-ben-sapp" class="anchor"&gt;
  &lt;/a&gt;
  11. Cloud-native approaches will be standardized - Ben Sapp
&lt;/h3&gt;

&lt;p&gt;“Since the cloud space has gotten really advanced (the last 10 years or so) and containerization has become the norm, everything is pretty standardized almost like the mainframe era.&lt;/p&gt;

&lt;p&gt;Sure, there will be trends and money to be made. But I don't see what the next big disruptor is. Everything now is essentially the same as best practices from five years ago but just a little more reliable. I suppose more and more folks will continue to move from pets to cattle, leaving tools like Ansible and puppet for just packer and cloud init to build container hosts.&lt;/p&gt;

&lt;p&gt;It's kind of a golden age for software development, imo. The DevOps and cloud native approach has achieved a lot of its goals. Pipelines, hosting, storage, load balancing... all of that is resolved in 5 minutes these days.” - Ben Sapp&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-security-will-become-a-high-priority-cloudskiff" class="anchor"&gt;
  &lt;/a&gt;
  12. Security will become a high priority - &lt;a href="https://cloudskiff.com/"&gt;CloudSkiff&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“Definitely tracking uncontrolled changes in your infras in a DevSecOps perspective. Infrastructure as code is awesome, but there are too many moving parts : codebase, state file, actual cloud state. Things tend to drift. Those changes can have multiple causes: from developers creating or updating infrastructure through the web console without telling anyone, to uncontrolled updates on the cloud provider side. Handling infrastructure drift vs the codebase can be challenging.” - CloudSkiff&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-chaos-engineering-will-become-an-increasingly-more-important-cto-at-international-technology-ventures-in" class="anchor"&gt;
  &lt;/a&gt;
  13. Chaos Engineering will become an increasingly more important - CTO at International Technology Ventures, In
&lt;/h3&gt;

&lt;p&gt;“Chaos Engineering will become an increasingly more important (and common) consideration in the DevOps planning discussions in more organizations. Chaos Engineering - which is the discipline of experimenting on a software system in production in order to build confidence in the system's capability to withstand turbulent and unexpected conditions - is generally not practiced by most organizations.&lt;/p&gt;

&lt;p&gt;If we think of DevOps within a framework of a traditional five levels of maturity model - Chaos Engineering would be a a 4th or 5th level discipline that would be included within the umbrella of DevOps practices. Just as the traditional role of a separate Testing / Quality Assurance group is folded into the discipline of DevOops - so too should Chaos Engineering.” - Kelvin Meeks, Consulting Architect/CTO at International Technology Ventures, In&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-more-focus-on-instant-logs-to-quickly-validate-success-or-failure-director-platform-stability-at-adesa" class="anchor"&gt;
  &lt;/a&gt;
  14. More focus on instant logs to quickly validate success or failure - Director, Platform Stability at &lt;a href="https://www.adesa.com/"&gt;ADESA&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“The use of logs in post deploys to validate the release was successful, or had critical errors. The biggest connection people need to make is defining the manual processes and then the big leap to automation. One click to deploy, instant logs to quickly validate success or fail and then trigger the rollback. The complication then comes along with cross service dependencies and if something can be rolled back or if it needs to have further testing on other services. Imagine 100 microservices (aka pipelines and even another 100 containers.&lt;/p&gt;

&lt;p&gt;As one item, I always celebrate the successful rollback since it isn’t service impacting and was successful.” - Craig Schultz, Director, Platform Stability at ADESA&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-devsecops-will-become-a-default-part-of-devops-devops-architect-at-jfrog" class="anchor"&gt;
  &lt;/a&gt;
  15. DevSecOps will become a default part of DevOps - DevOps Architect at &lt;a href="https://jfrog.com/"&gt;JFrog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;“The "Sec'' part of &lt;a href="https://jfrog.com/devops-tools/what-is-devsecops/"&gt;DevSecOps&lt;/a&gt; will become more and more an integral part of the Software Development Lifecycle. A real security "shift left" approach will be the new norm. There will be less dedicated security steps in the CI/CD pipelines and security automatic awareness and actions will be part of all pipeline steps. Starting from developer's IDE, into the dependency and static code analysis. A software component will not be released without proper (automatic?) mediation of these issues. Customers will be delivered with true security issues free software.” - Eldad Assis, DevOps Architect at the CTO office at JFrog&lt;/p&gt;

&lt;p&gt;Hope you enjoyed our expert round-up responses on the DevOps trends to watch for in 2021. If you think we are missing something that should be considered, please share your views in the comments.&lt;/p&gt;

</description>
      <category>devops</category>
    </item>
  </channel>
</rss>
