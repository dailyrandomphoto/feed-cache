<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Speaking Is The Ultimate Expression Of Emotional Intelligence</title>
      <author>Jacqueline Nagle</author>
      <pubDate>Wed, 17 Nov 2021 06:27:44 +0000</pubDate>
      <link>https://dev.to/jacquelinenagle/speaking-is-the-ultimate-expression-of-emotional-intelligence-1g1j</link>
      <guid>https://dev.to/jacquelinenagle/speaking-is-the-ultimate-expression-of-emotional-intelligence-1g1j</guid>
      <description>&lt;p&gt;Young, impressionable, and ambitious, when working in recruitment and consulting in 1998 I (&lt;a href="https://mustamplify.com/bondappetit162/"&gt;Jacqueline Nagle&lt;/a&gt;) stumbled on Daniel Goleman's book Emotional Intelligence and instantly felt he had unlocked the mysteries to building great places of work.&lt;/p&gt;

&lt;p&gt;I became obsessed, and over the next three years became accredited in as many EI and EQ assessment tools as I possibly could, taking each accreditation as far as possible without actually being a qualified and licensed psychologist.&lt;/p&gt;

&lt;p&gt;That world was vastly different. Even when EI caught your attention as a concept, you were still caught in a world of change, fighting sometimes to bring understanding to the shift from IQ to EQ and EI and just how critical it was in creating great spaces to work, live and play in the future.&lt;/p&gt;

&lt;p&gt;Now, Emotional Intelligence and Emotional Competence spill out of our mouths as easily as 'do you want me to grab a coffee?' and our attention has shifted to the next coming intelligence - Artificial Intelligence, and its impact on leadership, the way we work, and the way we interact with the world around us.&lt;/p&gt;

&lt;p&gt;Google 'The Impact of Artificial Intelligence on work' and Dr Google will deliver 157,000,000 search results in less than a second. Google 'The impact of Artificial Intelligence on Leadership' and the good Dr will bring you back more than 25,000,000 search results.&lt;/p&gt;

&lt;p&gt;Skim, read, or deep dive; consume the articles written and participate in the conversations and you will see the consensus which has rapidly formed - from high performance organisations, defence, researchers, thought leaders, practitioners in the space, and commentators on the future of leadership and of work - AI and everything it brings with it means there is one intelligence that will become critical in navigating the world unfolding before us:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Emotional Intelligence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ability to develop a deep level of self-awareness, to be aware of others emotions, and to bring that information together in a powerful way to navigate and manage both the relationship you hold with yourself, and the relationships you hold with others.&lt;/p&gt;

&lt;p&gt;But how do we see who is emotionally intelligent, who isn't, and who is still building the muscle of emotional intelligence?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is in how they speak.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Through the words they use. The way their articulate their message. The ability to build a picture in someone else's mind, to distil a vision, a way of thinking.&lt;/p&gt;

&lt;p&gt;The ability to wrap us up in the dramatic, the unacceptable, in hope and possibility, to challenge us to think and act differently. To inspire, to coach and to mentor.&lt;/p&gt;

&lt;p&gt;It is the ability to rapidly assess when in crisis, to identify where we stand right now, the possibilities before us, and to articulate the solution - rapidly.&lt;/p&gt;

&lt;p&gt;It is the ability to use our words to instill confidence, to destroy belief, to create consensus, and to build momentum.&lt;/p&gt;

&lt;p&gt;It is in how we craft our ability to influence, to dissolve conflict, to lead the people surrounding us through adaptive change.&lt;/p&gt;

&lt;p&gt;It is how the great speakers and orators transport us to an alternate reality, a world of possibility, where we fall in love with both people and message - or choose to exit stage right.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The great speakers and orators understand they are the curators of the greatest emotional incubators in the world… the places where people gather to listen, be told, inspired, find answers, unlock courage and hope.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is in how they:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-Create connection through story, weaving empathy, similarity and familiarity into their messages.&lt;/p&gt;

&lt;p&gt;-Take a vision and recreate it in the minds of their audience through the words they use, their flow, and the charisma with which they deliver it.&lt;/p&gt;

&lt;p&gt;-Understand the privilege of the platform, the opportunity to impact lives, to serve in creating a better world - starting as the individual, then causing a ripple effect of global impact.&lt;/p&gt;

&lt;p&gt;-Deeply understand the responsibility they hold for the emotional state of the room in front of them, being completely aware of the power they have to create an environment of their choosing.&lt;/p&gt;

&lt;p&gt;-Articulate messages which are digestible, which wrap all of us up, and allow them to enter someone else's world with empathy.&lt;/p&gt;

&lt;p&gt;-Use their words with volition and on purpose, to navigate their own path. And in doing so, create a path which their audience can easily follow should they choose to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The greatest speakers and orators - on any stage in any room - have spent the time honing their craft.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is far beyond crafting great content and building, it is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-A high level of emotional self-awareness and its impact&lt;/p&gt;

&lt;p&gt;-Striving to bring emotional balance, to speak with strength and grace&lt;/p&gt;

&lt;p&gt;-Holding a deep understanding that even when raw they must deliver a level of hope and insight&lt;/p&gt;

&lt;p&gt;-Building sensory acuity to be able to adapt to environment and nuances rapidly to deliver consistency&lt;/p&gt;

&lt;p&gt;-Infusing everything they do with incremental improvement, to push through to the next level&lt;/p&gt;

&lt;p&gt;-Building empathy, rapport, understanding, and relatability rapidly through the words they use&lt;/p&gt;

&lt;p&gt;-Understanding the power of influence, and the opportunities to educate and coach in the moment&lt;/p&gt;

&lt;p&gt;-Knowing when to inspire, to agitate, to instigate, to ignite and how to do it with strength and grace&lt;/p&gt;

&lt;p&gt;They are emotionally intelligent, and it shows in the way that they speak.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Original Source: &lt;a href="https://jacquelinenagle.com/speaking-is-the-ultimate-expression-of-emotional-intelligence/"&gt;jacquelinenagle.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>selfawareness</category>
      <category>emotionalintelligence</category>
      <category>artificialintelligence</category>
      <category>jacquelinenagle</category>
    </item>
    <item>
      <title>100+ JavaScript One-Liners That Will Help You Code Like a Pro</title>
      <author>Jdk</author>
      <pubDate>Wed, 17 Nov 2021 06:25:07 +0000</pubDate>
      <link>https://dev.to/h8g/100-javascript-one-liners-that-will-help-you-code-like-a-pro-2mii</link>
      <guid>https://dev.to/h8g/100-javascript-one-liners-that-will-help-you-code-like-a-pro-2mii</guid>
      <description>&lt;p&gt; &lt;span&gt;JavaScript keeps growing and growing20 JavaScript One-Liners That Will Help You Code Like, opening doors for new “to be tech geeks” in the market as it’s one of the easiest languages to start. (is it really?)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It’s true that JavaScript can do a lot of blazing things! and there is just so much to learn.&lt;/p&gt;
&lt;p&gt;And whether you’re new to JavaScript or more of a professional developer it’s always good to learn something new.&lt;/p&gt;
&lt;p&gt;I’m gonna go over some really helpful one-liners (20 + Bonus) that can help you boost your productivity and can help in debugging code. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-javascript-one-liners-that-will-help-you-code-like-a-pro/&amp;amp;ved=2ahUKEwip-5yjmNPzAhXk_XMBHd2yDaMQFnoECAkQAQ&amp;amp;usg=AOvVaw285TovlnD0Mc9Cm8Rcycp3"&gt;100+ JavaScript One-Liners That Will Help You Code Like a Pro&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Understanding React Hooks</title>
      <author>MikeKetterling</author>
      <pubDate>Wed, 17 Nov 2021 06:05:28 +0000</pubDate>
      <link>https://dev.to/mikeketterling/understanding-react-hooks-39gj</link>
      <guid>https://dev.to/mikeketterling/understanding-react-hooks-39gj</guid>
      <description>&lt;p&gt;One of the great tools that was made available to React developers in the 16.8 release was Hooks.  I'll go into greater detail about what hooks are, why they were developed and how to use them.  Hopefully by the end of this read you will feel more comfortable with the concepts and use-cases of Hooks, allowing you to dive deeper into coding problems, and solving these more complex problems you may run across.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-hooks-were-implemented"&gt;
  &lt;/a&gt;
  Why Hooks Were Implemented
&lt;/h2&gt;

&lt;p&gt;Hooks allow developers to use state and other react features without writing classes.  Hooks are able to solve a lot of different problems in React.  You can take stateful logic from components so the logic can be reused and implemented independently.  This allows developers to reuse this logic without changing your component order or hierarchy, making it pretty seamless to share hooks with multiple components.&lt;/p&gt;

&lt;p&gt;Another problem that React developers run into is dealing with large, complex components with lots of stateful logic and side effects.  Without hooks related code can be changed together, gets split apart, and completely unrelated code can end up combines in single methods causing lots of bugs and inconsistencies.  With large components like these examples, the stateful logic is all over the place making it hard to refactor or break down components to more manageable sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-hooks-do"&gt;
  &lt;/a&gt;
  What Hooks do
&lt;/h2&gt;

&lt;p&gt;Hooks allow you to split a component into smaller functions within the component based on which code blocks are related.  Hooks also allow developers to use more React features without using classes.  Classes have been known to confuse newer developers and over-complicate code.  Classes are much different then other languages handle classes, unstable syntax and verbose code makes classes a struggle for most developers, especially if they are new to JavaScript.&lt;/p&gt;

&lt;p&gt;Hooks embrace functions which is the basis of what components are made of.  This alignment allows developers to learn react and component functionality without getting caught up with complex functional or reactive programming techniques.&lt;/p&gt;

&lt;p&gt;Hooks are functions that “hook into” React state and features from inside components.  React provides built in hooks, and allow you to create your own hooks for re-usable stateful behavior between components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples-of-popular-hooks"&gt;
  &lt;/a&gt;
  Examples of popular Hooks:
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#state-hook"&gt;
  &lt;/a&gt;
  State Hook
&lt;/h4&gt;

&lt;p&gt;The useState hook can be called within a component to add local state to it and protect it during application re-renders.  You can call the setState function from within the component or even passed to other components through props, allowing information and code to be transferred and maintained across components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [count, setCount] = useState(0);

return (
  &amp;lt;div&amp;gt;
    &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;ClickMe&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is a simple example of setting your const UseState variables; count, and setCount as well as setting your useState to 0.  What this means is that the variable count is currently set to 0 because we have given useState the value of 0.  the way our anonymous function in our button works is that onClick we will re-set our count to "count + 1" by calling setCount, and passing in the current count variable and adding 1 to it.  This will continually update our count variable because we are re-setting this variable with the setCount function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#effect-hook"&gt;
  &lt;/a&gt;
  Effect Hook
&lt;/h4&gt;

&lt;p&gt;The useEffect hook adds the ability to perform side effects from within a component.  Side effects can be data fetching, DOM rendering, or actions like subscriptions.  When you call useEffect your basically telling React to run your effect function after sending changes to the DOM.  By default, the effects will be running after every render.  The useEffect also has the ability to clean up after itself by returning a cleanup function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(()=&amp;gt; {
  fetch('http://localhost:3000')
  .then(res =&amp;gt; res.json())
},[])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is a prime example of using the Effect Hook.  when we are fetching data we are telling the component to fetch the data after rendering.  React remembers our fetch function and calls on it after performing DOM updates.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-your-own-hooks"&gt;
  &lt;/a&gt;
  Building your own Hooks
&lt;/h4&gt;

&lt;p&gt;Custom Hooks are more of a convention than a specific feature.  The flexibility of custom hooks allows us to cover a wide range of use-Cases from form handling, timers, and many other options.  Its really up to the developer on how they want to implement custom hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from 'react';

function useStatus(friendID) {
  const [isOnline, setIsOnline] = useState(null);

  function handleStatusChange(status) {
    setIsOnline(status.isOnline);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example of custom hook that we have called useStatus.  we can use this hook in other components and the state for each component will be completely independent like so...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function FriendStatus(props) {
  const isOnline = useStatus(props.friend.id);

  if (isOnline === null) {
    return 'Loading...';
  }
  return isOnline ? 'Online' : 'Offline';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function FriendListItem(props) {
  const isOnline = useStatus(props.friend.id);

  return (
    &amp;lt;li style={{ color: isOnline ? 'green' : 'black' }}&amp;gt;
      {props.friend.name}
    &amp;lt;/li&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It even give us the option to call on a custom Hook twice within the same component, this is because each call to a Hook has a completely isolated state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-hooks"&gt;
  &lt;/a&gt;
  Other Hooks
&lt;/h4&gt;

&lt;p&gt;There are many other hooks that you will come across like useContext, useRef, and useReducer.  For the purpose of this article, I wont go into all of the many hooks that React has implemented.  The number of hooks that are available, and the flexibility that comes with their use is just another example of how great of a tool hooks are.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hooks are part of the new evolvement of code, making code reusable and effective in a  variety of situations.  Technology continues on focusing on problem solving and in some cases addressing problems that have yet to turn up.  the flexibility of hooks allows us as developers to creatively solve problems and situations in new ways.  The greater understanding we have of functionality like hooks will allow us to apply them on a larger scale and discover these new ways to solve problems efficiently. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state"&gt;MDN Documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What Will Be The Full Stack Web Developer Hourly Rate in 2022</title>
      <author>Steven Davis</author>
      <pubDate>Wed, 17 Nov 2021 06:04:46 +0000</pubDate>
      <link>https://dev.to/steven_d_gital/what-will-be-the-full-stack-web-developer-hourly-rate-in-2022-4k8j</link>
      <guid>https://dev.to/steven_d_gital/what-will-be-the-full-stack-web-developer-hourly-rate-in-2022-4k8j</guid>
      <description>&lt;p&gt;Do you want to do a robust software development project? I must say, you would definitely come into contact with Full stack developer who have the ability to bring your unique vision into the beautiful reality with the maximum advantages of robust technologies.&lt;/p&gt;

&lt;p&gt;Moreover, I want you to be aware that finding the right talent Full stack web developer who is able to cater all your requirements will be a somewhat tricky process. When you develop your in-house team for a software development project, you need to take care of the many dynamics to run the project smoothly. So, I suggest you to outsource software development projects for better and quality results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-stack-development-budget"&gt;
  &lt;/a&gt;
  Full Stack Development Budget.
&lt;/h2&gt;

&lt;p&gt;To get the pleasant development work, the success path starts from hiring a full stack developer from a trusted full stack development company. I would suggest you to do research in more detail before making any early commitment.&lt;/p&gt;

&lt;p&gt;For any kind of software development work, budget always plays an important role and you must be aware of the hourly and monthly rates of Full stack developer. To have a good start of any level of software development work, you need to estimate the budget to make the development work more efficient. Efficient plans allow you to set the targets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-developer-hourly-rates-globally"&gt;
  &lt;/a&gt;
  Web Developer Hourly Rates Globally.
&lt;/h2&gt;

&lt;p&gt;I have listed down the various hourly rates by doing the analysis of globally renowned full stack development companies in the USA and India offering the services across the software development industry.&lt;/p&gt;

&lt;p&gt;Around the world, there are few basic models that are followed by the various software development companies to outsource the project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hourly base model&lt;/li&gt;
&lt;li&gt;Monthly base model&lt;/li&gt;
&lt;li&gt;Fixed price model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These models are based on the renowned full stack development companies which offer the top of the line performance with their talented full stack developer team residing in countries like the USA and Canada.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-skills-to-look-for-in-a-full-stack-developer"&gt;
  &lt;/a&gt;
  Technical Skills To Look For In A Full Stack Developer
&lt;/h2&gt;

&lt;p&gt;Full stack developer — the name itself tells you that full stack developer have the skills of all the technologies and have the expertise knowledge of all the technologies. You must look for the following skill sets when you outsource your software development project to a full stack developer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML, CSS, and JavaScript&lt;/li&gt;
&lt;li&gt;Version control&lt;/li&gt;
&lt;li&gt;Programming languages&lt;/li&gt;
&lt;li&gt;Deployment and hosting&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;Third-party APIs/services&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#full-stack-developer-hourly-rates-in-2022"&gt;
  &lt;/a&gt;
  Full Stack Developer Hourly Rates in 2022
&lt;/h2&gt;

&lt;p&gt;Hourly rates generally depend on the expertise you require for your software development projects. On average hourly rates are between $25 to $50, depending on the junior full stack developer to senior full stack developer. Pricing can be different based on the project expertise, number of developers, experience.&lt;/p&gt;

&lt;p&gt;$23-$60/Hourly(USD) — you will offer a fully signed NDA for your project’s confidentiality&lt;/p&gt;

&lt;p&gt;$2960 -$7500/Monthly(USD) — here we provide you Full stack developers with 5+ Years of Exp. for 160 hours&lt;/p&gt;

&lt;p&gt;You can feel that it’s quite logical and you surely think about the final deal. However, Cost to Hire full stack developer depends on the following factors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project goals&lt;/li&gt;
&lt;li&gt;Aim behind the project development&lt;/li&gt;
&lt;li&gt;Skill set or experience, you are looking for.&lt;/li&gt;
&lt;li&gt;Business niche&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Up to here, We get to know about the rates of dedicated full stack developers. Implementing the magical visual appeal with full stack development, gains the users’ attention on your business website. If you still feel doubtable, Contact the globally recognized full stack development companies and &lt;a href="https://www.bacancytechnology.com/hire-full-stack-developer"&gt;&lt;strong&gt;Hire Full Stack developer&lt;/strong&gt;&lt;/a&gt; for your software development project.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Many free and useful AWS official Dev and User guides!</title>
      <author>Walter Lee</author>
      <pubDate>Wed, 17 Nov 2021 05:59:59 +0000</pubDate>
      <link>https://dev.to/aws-builders/many-free-and-useful-aws-official-dev-and-user-guides-54ci</link>
      <guid>https://dev.to/aws-builders/many-free-and-useful-aws-official-dev-and-user-guides-54ci</guid>
      <description>&lt;p&gt;Many official and free Amazon Web Services User and Developer Guides are available at Amazon.com kindle store at &lt;a href="https://www.amazon.com/kindle-dbs/entity/author/B007R6MVQ6"&gt;https://www.amazon.com/kindle-dbs/entity/author/B007R6MVQ6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Super easy to get it and start reading with 1-click:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USdkUIPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i67qchf7d7dugd3whb2u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USdkUIPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i67qchf7d7dugd3whb2u.jpg" alt="Image description" width="880" height="729"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Kindle library is now filled with all these good and useful references. I can find and search them easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rJ1jjJQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5l5t4wvt2e3e9jg6rz3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJ1jjJQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5l5t4wvt2e3e9jg6rz3.jpg" alt="Image description" width="880" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e.g. I need to install Cilium CNI in EKS, then just search it in Kindle EKS ebook and find it with the link to &lt;a href="https://docs.cilium.io/en/v1.7/gettingstarted/k8s-install-eks/"&gt;https://docs.cilium.io/en/v1.7/gettingstarted/k8s-install-eks/&lt;/a&gt;&lt;br&gt;
(Above CNI latest version is v1.9, so hope AWS writers can update the guides more often!) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p4oNxyiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2maegu08tz203k2u6p3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p4oNxyiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2maegu08tz203k2u6p3.jpg" alt="Image description" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>books</category>
      <category>webdev</category>
    </item>
    <item>
      <title>100+ Amazing Tips &amp; Tricks to Work with Linux</title>
      <author>Jdk</author>
      <pubDate>Wed, 17 Nov 2021 05:21:31 +0000</pubDate>
      <link>https://dev.to/h8g/100-amazing-tips-tricks-to-work-with-linux-ceo</link>
      <guid>https://dev.to/h8g/100-amazing-tips-tricks-to-work-with-linux-ceo</guid>
      <description>&lt;p&gt;&lt;span&gt;Linux terminal can seem quite overwhelming for new users and even for experienced users without the knowledge of Linux tips &amp;amp; tricks. Linux is an incredibly flexible operating system.&lt;/span&gt;&lt;br&gt;&lt;span&gt;However, it is difficult to remember all the commands and their appropriate usage. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Our amazing tricks will allow you to use Linux like a pro! &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/linux-tips-and-tricks/&amp;amp;ved=2ahUKEwjkuY-rmp30AhUMfd4KHXqgDNA4ChAWegQIGxAB&amp;amp;usg=AOvVaw2vL5nt8T_VTPRnDsEINvCc"&gt;100+ Amazing Tips &amp;amp; Tricks to Work with Linux&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>300+ Linux Basic Commands Every Linux User Should Know</title>
      <author>Jdk</author>
      <pubDate>Wed, 17 Nov 2021 05:20:52 +0000</pubDate>
      <link>https://dev.to/h8g/300-linux-basic-commands-every-linux-user-should-know-381m</link>
      <guid>https://dev.to/h8g/300-linux-basic-commands-every-linux-user-should-know-381m</guid>
      <description>&lt;p&gt;When hearing about Linux, most people think of a complicated operating system that is only used by programmers. But it’s not as scary as it seems.&lt;/p&gt;
&lt;p&gt;Linux is an entire family of open-source Unix operating systems, that are based on the Linux Kernel. This includes all of the most popular Linux based systems like Ubuntu, Fedora, Mint, Debian, and others. More accurately, they’re called distributions or distros.&lt;/p&gt;
&lt;p&gt;Since Linux was first released in &lt;strong&gt;1991&lt;/strong&gt;, it has continued to gain popularity due to its open-source nature. People can freely modify and redistribute it under their own name.&lt;/p&gt;
&lt;p&gt;When operating a Linux OS, you need to use a shell — an interface that gives you access to the operating system’s services. Most Linux distributions use a graphic user interface (GUI) as their shell, mainly to provide ease of use for their users.&lt;/p&gt;
&lt;p&gt;That being said, it’s recommended to use a command-line interface (CLI) because it’s more powerful and effective. Tasks that require a multi-step process through GUI can be done in a matter of seconds by typing commands into the CLI.&lt;/p&gt;
&lt;p&gt;So if you’re considering using Linux, learning basic command lines will go a long way. In this article, you’ll learn &lt;strong&gt;3&lt;/strong&gt;4 basic Linux commands that will undoubtedly help you navigate through Linux as a newbie. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/linux-command-list/&amp;amp;ved=2ahUKEwjNpNHKuZ70AhXUfX0KHdW3DYcQFnoECAQQBQ&amp;amp;usg=AOvVaw1uQ6tgG22BKIKrq41PP3wF"&gt;300+ Linux Basic Commands Every User Should Know&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;





</description>
    </item>
    <item>
      <title>How to secure your server with SSL in less than 10 minutes </title>
      <author>Neil James</author>
      <pubDate>Wed, 17 Nov 2021 04:23:07 +0000</pubDate>
      <link>https://dev.to/nljms/how-to-secure-your-server-with-ssl-in-less-than-10-minutes-49nc</link>
      <guid>https://dev.to/nljms/how-to-secure-your-server-with-ssl-in-less-than-10-minutes-49nc</guid>
      <description>&lt;p&gt;This is a quick guide for engineers who doesn't have broad knowledge in setting up SSL together with nginx from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-to-be-familiar-with"&gt;
  &lt;/a&gt;
  Things to be familiar with:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Node (Can be any web framework)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;I won't be tackling in depth topics about docker, nginx, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-were-gonna-build"&gt;
  &lt;/a&gt;
  What we're gonna build
&lt;/h2&gt;

&lt;p&gt;A simple microservice that serves up a backend service which is served in nginx inside the &lt;a href="https://docs.linuxserver.io/general/swag"&gt;swag&lt;/a&gt; container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-dive-into-it"&gt;
  &lt;/a&gt;
  Let's dive into it!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QOPST4zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.swim-west.com/wp-content/uploads/2018/04/swimming-dive-swim-west-9-1365x1024.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOPST4zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.swim-west.com/wp-content/uploads/2018/04/swimming-dive-swim-west-9-1365x1024.jpg" alt="dive" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-web-server"&gt;
  &lt;/a&gt;
  Setting Up a Web Server
&lt;/h2&gt;

&lt;p&gt;We're going to create a simple web server using &lt;a href="https://expressjs.com/"&gt;Express JS&lt;/a&gt; or you can clone the repository here and &lt;a href="https://github.com/nljms/linux-server-swag-demo/"&gt;https://github.com/nljms/linux-server-swag-demo/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the server is up and running let's proceed to the next step 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dw018fli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://memegenerator.net/img/instances/64336657.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dw018fli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://memegenerator.net/img/instances/64336657.jpg" alt="Let's go!" width="400" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerizing-the-services-we-need"&gt;
  &lt;/a&gt;
  Dockerizing the services we need.
&lt;/h2&gt;

&lt;p&gt;In order to build our microservices, we have to create their images first. If you have cloned the repository given above, you'll notice that there were two &lt;code&gt;Dockerfiles&lt;/code&gt; (the &lt;code&gt;Dockerfile&lt;/code&gt; which serves as the node application image, and the &lt;code&gt;Dockerfile.swag&lt;/code&gt; which is a custom image of &lt;a href="https://hub.docker.com/r/linuxserver/swag"&gt;linuxserver.io/swag&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I mentioned before that we're gonna be using nginx on this project. Since we're going to secure the server with letsencrypt, I found an easier way on how to do it in just a few steps with linuxserver/swag image.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can read more about the documentation here on their &lt;a href="https://docs.linuxserver.io/general/swag"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LMY3H3dC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38kciolm279lahjq766a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LMY3H3dC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38kciolm279lahjq766a.png" alt="Image description" width="193" height="40"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the first image is only about the containerized node application. I'll only be discussing the custom swag image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Dockerfile.swag&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ghcr.io/linuxserver/swag&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./default.conf /config/nginx/site-confs/default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we only do here is that we replace the default configuration of the nginx inside the image since we're just going to reverse proxy our &lt;code&gt;demo_api&lt;/code&gt; service which is here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;   &lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://demo_api:3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: I only modified the nginx configuration which I copied inside the &lt;code&gt;swag&lt;/code&gt; image and put it inside &lt;code&gt;nginx/default.conf&lt;/code&gt; file (you can name it whatever you want but just make sure to apply the changes the Dockerfile).&lt;/p&gt;

&lt;p&gt;Additional Note: If you notice that we're proxying &lt;code&gt;demo_api&lt;/code&gt; instead of a local address, in &lt;code&gt;docker-compose&lt;/code&gt; we can have a default network or create a network for the services to communicate by their &lt;code&gt;hostname&lt;/code&gt; identical to their &lt;code&gt;container name&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can check out the compose file &lt;a href="https://github.com/nljms/linux-server-swag-demo/blob/main/docker-compose.yml"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux-server-swag-image-usage"&gt;
  &lt;/a&gt;
  Linux Server SWAG image usage:
&lt;/h2&gt;

&lt;p&gt;Inside our compose file, we have the swag service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;swag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./Dockerfile.swag&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;swag&lt;/span&gt;
    &lt;span class="na"&gt;cap_add&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NET_ADMIN&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;PUID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;# required&lt;/span&gt;
      &lt;span class="na"&gt;PGID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;# required&lt;/span&gt;
      &lt;span class="na"&gt;TZ&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Singapore&lt;/span&gt; &lt;span class="c1"&gt;# required&lt;/span&gt;
      &lt;span class="na"&gt;URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${YOUR_DOMAIN}'&lt;/span&gt; &lt;span class="c1"&gt;# required&lt;/span&gt;
      &lt;span class="na"&gt;VALIDATION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt; &lt;span class="c1"&gt;# required&lt;/span&gt;
      &lt;span class="na"&gt;DEFAULT_CONF&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${DEFAULT_CONF}'&lt;/span&gt; &lt;span class="c1"&gt;# required&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;swag:/config&lt;/span&gt; &lt;span class="c1"&gt;# I created a volume named swag to persist the config directory inside the container&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;443:443&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;80:80&lt;/span&gt; &lt;span class="c1"&gt;#optional&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local-network&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You only have to provide the &lt;code&gt;URL&lt;/code&gt; environment variable which in your case was your domain name (Please make sure that your domain name is available), then run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to build the dockerfiles and run it on detach mode. And that's it! Your server is now secured! &lt;/p&gt;

&lt;p&gt;You can check the full documentation of linuxserver/swag &lt;a href="https://docs.linuxserver.io/images/docker-swag"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVrOPjOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mklf2z125rnt0st968jj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVrOPjOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mklf2z125rnt0st968jj.png" alt="Image description" width="340" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you so much for reading and I hope I helped you in such a little way. Have a great day!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Opensource Covid Tracker - India</title>
      <author>CoderZ90</author>
      <pubDate>Wed, 17 Nov 2021 04:00:08 +0000</pubDate>
      <link>https://dev.to/official_fire/opensource-covid-tracker-india-57nk</link>
      <guid>https://dev.to/official_fire/opensource-covid-tracker-india-57nk</guid>
      <description>&lt;p&gt;Live Website - &lt;a href="https://covid-tracky.vercel.app"&gt;https://covid-tracky.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello, Welcome to this blog about the my covid tracker website CovidTracky an alternative to covid19india.org. This website aims to provide you the latest and the most accurate data for covid19 cases. I do this because it affects all of us. Today its someone else who is getting infected; tomorrow it could be me, who knows. We need to prevent the spread of the virus. We need to document the data so that people with knowledge can use this data to make informed decision.&lt;/p&gt;

&lt;p&gt;The data for covid19 cases is provided by The Indian Institute Of Hydrebad used for getting updated covid19 cases.&lt;/p&gt;

&lt;p&gt;About me &lt;/p&gt;

&lt;p&gt;I am a 14 years old developer who wants to be the best developer on this planet. I maintain and made this website ( using the source of covid19india.org ). Thanks to covid19india.org team for their outstanding work in creating the original portal, and for making their code base public&lt;/p&gt;

</description>
      <category>covidtracky</category>
    </item>
    <item>
      <title>Nest JS REST API Tutorial</title>
      <author>Dev Sharma</author>
      <pubDate>Wed, 17 Nov 2021 03:58:16 +0000</pubDate>
      <link>https://dev.to/cryptus_neoxys/nest-js-rest-api-tutorial-2gdi</link>
      <guid>https://dev.to/cryptus_neoxys/nest-js-rest-api-tutorial-2gdi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;The first things you'll need are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node installed&lt;/li&gt;
&lt;li&gt;Your favourite Code Editor/IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have those setup, let us get started with &lt;a href="https://docs.nestjs.com/"&gt;nest&lt;/a&gt;.&lt;br&gt;
Install the nest js CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; @nestjs/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use this to bootstrap our nest project, using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nest new &amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command should start scaffolding your app, select your preferred package manager and let the CLI setup and install dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kUS50NXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636710191263/3S2-uY1zF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kUS50NXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636710191263/3S2-uY1zF.png" alt="nest new.png" width="680" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then navigate into your project directory and start the development server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;nest-beginner
npm run start:dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a browser and go to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt;, and you should see a familiar message&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1edl3Gz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636710520944/stYXx-QZG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1edl3Gz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636710520944/stYXx-QZG.png" alt="nest start-dev output.png" width="596" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developing-our-api"&gt;
  &lt;/a&gt;
  Developing our API
&lt;/h2&gt;

&lt;p&gt;To keep this tutorial simple, we are going to use nest CLI's &lt;code&gt;resource&lt;/code&gt; generator recipe for generating our resources. Go ahead and run the following command to generate the User resource for our API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9b9hJxp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636775126042/M_raJfnDu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9b9hJxp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636775126042/M_raJfnDu.png" alt="nest generate resource users" width="558" height="327"&gt;&lt;/a&gt;&lt;br&gt;
For this tutorial, we will be developing a REST API, so go ahead and select that option and also let nest generate the CURD entry points to give us some boilerplate code to get started with.&lt;/p&gt;

&lt;p&gt;After running the command successfully, you should have the following files in &lt;code&gt;src/&lt;/code&gt; directory:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GB1KYNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636776573892/UN86fZvxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GB1KYNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636776573892/UN86fZvxv.png" alt="nest resource gen file output.png" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We start by defining the user entity and the DTOs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user.entity.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create-user.dto.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CreateUserDto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are using nest generated resource's boilerplate, it makes it simpler as we need to modify just the business logic in the service layer which the controller is already utilising in the API layer. (for this tutorial, we will be storing everything in-memory, do note that in a real-world application we would use a database like MySQL or MongoDB)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user.service.ts&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UsersService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;idSeq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createUserDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CreateUserDto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateUserDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UpdateUserDto&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us begin with the Get methods first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user.service.ts&lt;/span&gt;
  &lt;span class="nx"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create the user, we push the create user DTO and use the idSeq variable to generate a sequential id for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user.service.ts&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createUserDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CreateUserDto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;createUserDto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;idSeq&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To update the user, we first find the index by the id, if the user exists then we overwrite the values with the update user DTO.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user.service.ts&lt;/span&gt;
  &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateUserDto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UpdateUserDto&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;updateUserDto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For deleting, we similarly find if the user exists by id, and use the Array &lt;code&gt;slice&lt;/code&gt; method to delete it from memory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user.service.ts&lt;/span&gt;
  &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all of our CRUD functionalities are in place and we can test our API, yes you heard that right, we don't need to wire up the controller, set up the module and wire it up with our app, the nest CLI did all of that for us when we generated users resource. So fire up Postman or Insomnia or whatever is your favourite HTTP client.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on Twitter &lt;a href="https://twitter.com/cryptus_neoxys"&gt;@cryptus_neoxys&lt;/a&gt; and connect with me on &lt;a href="https://www.linkedin.com/in/cryptus-neoxys/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#refs-amp-resources"&gt;
  &lt;/a&gt;
  Refs &amp;amp; Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.nestjs.com/"&gt;Nest JS Docs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>node</category>
    </item>
    <item>
      <title>GitHub Actions: You Can Build Reusable Workflows!</title>
      <author>Rizel Scarlett</author>
      <pubDate>Wed, 17 Nov 2021 03:46:12 +0000</pubDate>
      <link>https://dev.to/github/github-actions-you-can-build-reusable-workflows-4gc7</link>
      <guid>https://dev.to/github/github-actions-you-can-build-reusable-workflows-4gc7</guid>
      <description>&lt;p&gt;I hope you're enjoying the Actions Hackathon 2021. I'm impressed by the participants' submissions leveraging already existing actions. Guess what? GitHub made it even easier for participants to use existing workflows and actions with a new feature called reusable workflows. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hZj44bR9FVI3K/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hZj44bR9FVI3K/giphy.gif" width="250" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-reusable-workflows"&gt;
  &lt;/a&gt;
  What are the benefits of reusable workflows?
&lt;/h2&gt;

&lt;p&gt;Prior to the launch of this feature, if you wanted to reuse an existing workflow, you had to copy and paste the workflow into your new workflow. This can make workflows seem overly verbose. As software engineers, we want to follow best practices. One of my favorite best practices for writing clean code is the DRY principle, which is an acronym for Don't Repeat Yourself. Adopting reusable workflows also makes it easier to manage workflows. Now, with reusable workflows, you can write clean, maintainable Actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-create-reusable-workflows"&gt;
  &lt;/a&gt;
  How do you create reusable workflows?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Terms to know 

&lt;ul&gt;
&lt;li&gt;Caller workflow: a workflow that uses another workflow&lt;/li&gt;
&lt;li&gt;Called workflow: the reusable workflow&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can make a workflow reusable by adding a &lt;code&gt;workflow_call&lt;/code&gt; trigger to the called workflow. A &lt;code&gt;workflow_call&lt;/code&gt; trigger looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside of the &lt;code&gt;workflow_call&lt;/code&gt; trigger, you can pass in the necessary inputs and secrets similar to the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ring&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Identifier&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;target&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deployment&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ring'&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ring-0'&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your caller workflow can call multiple workflows; however, a called workflow cannot call other reusable workflows. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-one-workflow-gain-access-to-a-reusable-workflow"&gt;
  &lt;/a&gt;
  How can one workflow gain access to a reusable workflow?
&lt;/h2&gt;

&lt;p&gt;If a workflow meets one of the criteria below, it can gain access to another workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The called workflow is stored in a public repository.&lt;/li&gt;
&lt;li&gt;Both workflows are in the same repository.&lt;/li&gt;
&lt;li&gt;The called workflow is stored in an internal repository, and the settings for that repository allow it to be accessed. Click &lt;a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository"&gt;here&lt;/a&gt; to learn how to configure those settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Below is a list of resources that may help you build and use your own reusable workflows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/lRypYtmbKMs"&gt;CoderDave uses reusable workflows to build and publish a docker image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/learn-github-actions/reusing-workflows#creating-a-reusable-workflow"&gt;GitHub's official documentation about reusable workflows (with examples)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://colinsalmcorner.com/musings-on-reusable-workflows/"&gt;Colin Dembovsky's detailed review of reusable workflows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-github-actions-hackathon"&gt;
  &lt;/a&gt;
  Join the GitHub Actions Hackathon
&lt;/h2&gt;

&lt;p&gt;From now until December 8th, GitHub is running a Hackathon. By participating, you have the chance to win gift cards and swag. The challenge is to create and submit a workflow leveraging already &lt;a href="https://github.com/marketplace?type=actions"&gt;existing actions&lt;/a&gt;. GitHub Marketplace currently has over &lt;a href="https://github.blog/2021-10-21-github-marketplace-welcomes-its-10000th-action/#:~:text=Celebrating%20the%20power%20of%2010%2C000%20actions&amp;amp;text=Linting%2C%20testing%2C%20and%20validating%20code,Connecting%20to%20third%2Dparty%20services"&gt;10,000 actions&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Read &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;here&lt;/a&gt; to learn more about participating in the hackathon.&lt;/p&gt;

&lt;p&gt;And if you need any help regarding actions, I'll be available to answer questions in this &lt;a href="https://dev.to/devteam/github-actions-hackathon-2021-help-thread-1lk0"&gt;thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tell me about a use case where reusable workflows would benefit you!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
      <category>devops</category>
    </item>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Wed, 17 Nov 2021 02:30:36 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-4cee</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-4cee</guid>
      <description>&lt;h2&gt;
  &lt;a href="#day-22"&gt;
  &lt;/a&gt;
  --DAY 22--
&lt;/h2&gt;

&lt;p&gt;Hi, I am going to make #100DaysOfCode Challenge. Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;Now let's solve problem today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem: Excel Sheet Column Title&lt;/li&gt;
&lt;li&gt;Detail: &lt;a href="https://leetcode.com/problems/excel-sheet-column-title/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Idea: it's pretty similar to convert number to binary&lt;/li&gt;
&lt;li&gt;My solution(javascript):
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;convertToTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ZABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt;&lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>100daysofcode</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>
