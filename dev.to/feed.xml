<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating through a crisis</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Wed, 13 Oct 2021 23:09:52 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/creating-through-a-crisis-228o</link>
      <guid>https://dev.to/jasonleowsg/creating-through-a-crisis-228o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#youre-a-maker-right-why-dont-you-make-something"&gt;
  &lt;/a&gt;
  &lt;em&gt;You’re a maker, right? Why don’t you make something?&lt;/em&gt;
&lt;/h3&gt;




&lt;p&gt;There’s a scene in Iron Man 3 where Tony Stark was having a panic attack from the work as a superhero, and he called Harley, the kid who sheltered him while he was hiding from his enemies. Harley goes console Stark, and said, “You’re a mechanic, right? Why don’t you build something?”&lt;/p&gt;

&lt;p&gt;That line really stuck with me. Floated around in my subconscious. &lt;/p&gt;

&lt;p&gt;Then it appeared as a mini-epiphany. I’m not sure when this happened, but there’s a repeating pattern that I observed about how I cope with crisis. And it’s about building something.&lt;/p&gt;

&lt;p&gt;First it was a chronic medical condition in 2018 (which I had since recovered from, thankfully). While I was seeking treatment, I wasn’t taking on paid projects then, but I continued to work. In fact, it was that same time that I tried out the 12 startups in 12 months challenge. I called it &lt;a href="https://twitter.com/jasonleowsg/status/970890710751723521"&gt;#1mvp1month&lt;/a&gt;. I didn’t end up making 12 products, but was close – 8 products. That was a strange experience, because on one hand, I was going through a low period in terms of health and mental wellbeing. But yet I was creating like nobody’s business. &lt;/p&gt;

&lt;p&gt;Then in 2019, in a bid to get my health back, I turned to keto and intermittent fasting. Hard as f**k, trying to stop eating carbs. But I did. In the process of changing my diet and my health, I made a product called &lt;a href="https://ketolistsingapore.com"&gt;Keto List Singapore&lt;/a&gt; – a directory of keto resources and links. That helped me in a big way, and now it’s a little side business.&lt;/p&gt;

&lt;p&gt;Then, COVID-19 came. Complete topsy-turvy of life. I’m safe at home, but also stuck at home. For someone who enjoys being outside, what can I do to cope? I create. I made products &lt;em&gt;again&lt;/em&gt; - websites, apps, software to help people in the pandemic. Like a man possessed, I kept making. In the end I made a total of 11 products! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some examples of the 11 products I made:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sheet2site.com/s/dabaodash/"&gt;Dabao Dash&lt;/a&gt; - a self-help community board of offers and requests, matching hawkers and small F&amp;amp;Bs with delivery riders affected&lt;br&gt;
&lt;a href="https://sheet2site.com/s/majulahbelanja/"&gt;Majulah Belanja&lt;/a&gt; - an offers/requests board for to help match donors with employers and migrant workers.&lt;br&gt;
&lt;a href="https://visualaid.sg"&gt;VisualAid&lt;/a&gt; - translated illustrations to help healthcare workers communicate better with migrant worker patients.&lt;br&gt;
&lt;a href="https://gogranthunt.com/"&gt;Grant Hunt&lt;/a&gt; - A chat bot to find grants for charities and non-profits in Singapore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I realised that the intensity of my creating is directly proportional to how challenged I am in a crisis, or inversely proportional to how low I feel. I guess I needed something to balance it out. Creating always felt energizing and uplifting. It gives life, right when I need to feel more alive. It’s like I can almost hear Harley say that to me over the phone (though I’m under no illusions of being a superhero):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“You’re a maker, right? Why don’t you make something?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Damned hell I will.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>covid19</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Building a dropdown menu using Alpine.js</title>
      <author>Michael Burrows</author>
      <pubDate>Wed, 13 Oct 2021 22:23:35 +0000</pubDate>
      <link>https://dev.to/michaelburrows/building-a-dropdown-menu-using-alpinejs-47o3</link>
      <guid>https://dev.to/michaelburrows/building-a-dropdown-menu-using-alpinejs-47o3</guid>
      <description>&lt;p&gt;&lt;a href="https://alpinejs.dev/"&gt;AlpineJS&lt;/a&gt; is a small JavaScript framework for composing behavior directly in HTML markup. In this tutorial I’ll show you how the framework can be used to build a dropdown menu component. If you’ve never worked with Alpine before this will serve as a simple introduction to the framework.&lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial you can load the framework via CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Alpine loaded create a wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the following attributes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;x-data=&lt;/span&gt;&lt;span class="s"&gt;"{ open: false }"&lt;/span&gt; &lt;span class="na"&gt;x-on:click.outside=&lt;/span&gt;&lt;span class="s"&gt;"open = false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  // ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;x-data&lt;/code&gt; defines a chunk of HTML as an Alpine component and provides data for that component to reference. &lt;code&gt;x-on:click.outside&lt;/code&gt; set’s the open data to false which will hide the dropdown when anywhere outside the component is clicked.&lt;/p&gt;

&lt;p&gt;Next inside the wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; add a button that’ll trigger the dropdown’s visibility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;x-on:click=&lt;/span&gt;&lt;span class="s"&gt;"open = !open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  My Account
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another &lt;code&gt;x-on:click&lt;/code&gt; this time we’re only tracking clicks directly on the button itself.&lt;/p&gt;

&lt;p&gt;Now for the dropdown menu which is an unordered list with a &lt;code&gt;x-show&lt;/code&gt; attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Edit Profile&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Settings&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log Out&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;        
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;open&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt; the &lt;code&gt;x-show&lt;/code&gt; attribute will change the visibility of the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element. At this point in the tutorial we have a basic functioning dropdown, let’s add a couple of finishing touches to improve the look and feel. First let’s add an icon that’ll represent the state of the dropdown menu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;x-on:click=&lt;/span&gt;&lt;span class="s"&gt;"open = !open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  My Account 
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{'rotated': open}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you view the source code after the button has been clicked you’ll see the rotated class has been applied to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qegb0q93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofi8dnqwbhgq417y1ffy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qegb0q93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofi8dnqwbhgq417y1ffy.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now apply some CSS to rotate the icon indicating the menu is open:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.rotated&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we’ll add a transition so the opening and closing of the dropdown appears smoother:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;x-show=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt; &lt;span class="na"&gt;x-transition.opacity&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 ...       
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s all for this tutorial. As you’ve just seen by adding some simple Alpine attributes to HTML markup it relatively easy to create a functioning dropdown menu. With what you learnt in this tutorial you could also start building other UI elements with show/hide functionality and Alpine.js.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>alpinejs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Improving Angular tests by enabling Angular testing module teardown</title>
      <author>Lars Gyrup Brink Nielsen</author>
      <pubDate>Wed, 13 Oct 2021 22:22:58 +0000</pubDate>
      <link>https://dev.to/this-is-angular/improving-angular-tests-by-enabling-angular-testing-module-teardown-38kh</link>
      <guid>https://dev.to/this-is-angular/improving-angular-tests-by-enabling-angular-testing-module-teardown-38kh</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/dfOnZMEzI4Q"&gt;Marian Kroell&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;destroyAfterEach&lt;/code&gt; Angular testing module teardown option addresses several long-time issues when using the Angular testbed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The host element is not removed from the DOM until another component fixture is created&lt;/li&gt;
&lt;li&gt;Component styles are never removed from the DOM&lt;/li&gt;
&lt;li&gt;Application-wide services are never destroyed&lt;/li&gt;
&lt;li&gt;Feature-level services using the any provider scope are never destroyed&lt;/li&gt;
&lt;li&gt;Angular modules are never destroyed&lt;/li&gt;
&lt;li&gt;Components are destroyed 1 time less than the number of tests&lt;/li&gt;
&lt;li&gt;Component-level services are destroyed 1 time less than the number of tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two first issues have the biggest impact when using Karma which runs the component tests in a browser.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Did you know?&lt;/strong&gt; Angular modules and services support hooking into the &lt;code&gt;OnDestroy&lt;/code&gt; lifecycle moment by implementing an &lt;code&gt;ngOnDestroy&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this guide, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explore the &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; option for the Angular testbed&lt;/li&gt;
&lt;li&gt;List full Angular testing module teardown configurations for Karma and Jest for reference&lt;/li&gt;
&lt;li&gt;Examine how to opt in or opt out of Angular testing module teardown in a test suite or test case&lt;/li&gt;
&lt;li&gt;Discuss caveats and remaining issues with the Angular testing module&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#exploring-the-destroyaftereach-angular-testing-module-teardown-option"&gt;
  &lt;/a&gt;
  Exploring the destroyAfterEach Angular testing module teardown option
&lt;/h2&gt;

&lt;p&gt;Angular version 12.1 adds the &lt;code&gt;teardown&lt;/code&gt; option object &lt;a href="https://angular.io/api/core/testing/ModuleTeardownOptions"&gt;&lt;code&gt;ModuleTeardownOptions&lt;/code&gt;&lt;/a&gt; which can be passed to &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; for a test case or to &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt; as a global setting.&lt;/p&gt;

&lt;p&gt;We can enable the &lt;code&gt;destroyAfterEach&lt;/code&gt; option as part of the &lt;code&gt;teardown&lt;/code&gt; option object. This in turn enables the &lt;code&gt;rethrowErrors&lt;/code&gt; option which is not covered by this guide.&lt;/p&gt;

&lt;p&gt;In Angular versions 12.1 and 12.2, &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; has a default value of &lt;code&gt;false&lt;/code&gt;. In Angular version 13.0 and later, its default value is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled, the following happens after each test case or when testing module teardown is otherwise triggered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The host element is removed from the DOM&lt;/li&gt;
&lt;li&gt;Component styles are removed from the DOM&lt;/li&gt;
&lt;li&gt;Application-wide services are destroyed&lt;/li&gt;
&lt;li&gt;Feature-level services using the any provider scope are destroyed&lt;/li&gt;
&lt;li&gt;Angular modules are destroyed&lt;/li&gt;
&lt;li&gt;Components are destroyed&lt;/li&gt;
&lt;li&gt;Component-level services are destroyed&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Angular testing gotcha:&lt;/strong&gt; Platform-level services are never destroyed in Angular tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#angular-testing-teardown-triggers"&gt;
  &lt;/a&gt;
  Angular testing teardown triggers
&lt;/h3&gt;

&lt;p&gt;The following events trigger Angular testing teardown when &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;A test case finishes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, let's look at full configuration examples for the Karma and Jest test runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-angular-testing-module-teardown-in-karma"&gt;
  &lt;/a&gt;
  Enabling Angular testing module teardown in Karma
&lt;/h2&gt;

&lt;p&gt;Until Angular version 12.1 (inclusive) and in Angular 13.0 and later versions, a generated main Karma test file (&lt;code&gt;test.ts&lt;/code&gt;) looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This file is required by karma.conf.js and loads recursively all the .spec and framework files&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone-testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// First, initialize the Angular testing environment.&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Then we find all the tests.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;spec&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;ts$/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// And load the modules.&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test.ts generated by Angular version 12.1 and 13.0





&lt;p&gt;Angular version 12.1 adds a 3rd parameter to &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt; as seen in the following snippet generated by Angular version 12.2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This file is required by karma.conf.js and loads recursively all the .spec and framework files&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zone.js/dist/zone-testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// First, initialize the Angular testing environment.&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Then we find all the tests.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;spec&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;ts$/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// And load the modules.&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test.ts generated by Angular version 12.2





&lt;p&gt;For reference, &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; also accepts a &lt;code&gt;teardown&lt;/code&gt; option in Angular 12.1 and later versions as seen in this snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
  &lt;span class="c1"&gt;// (...)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Test suite setup enabling Angular testing module teardown





&lt;h2&gt;
  &lt;a href="#enabling-angular-testing-module-teardown-in-jest"&gt;
  &lt;/a&gt;
  Enabling Angular testing module teardown in Jest
&lt;/h2&gt;

&lt;p&gt;If our workspace or project is using Jest for unit tests, &lt;code&gt;test-setup.ts&lt;/code&gt; files probably look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jest-preset-angular/setup-jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test-setup.ts with Angular preset for Jest





&lt;p&gt;To enable Angular testing module teardown in Angular versions 12.1 and 12.2, use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jest-preset-angular/setup-jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resetTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;getTestBed&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
test-setup.ts for Jest with Angular testing module teardown





&lt;p&gt;The Angular preset for Jest already initializes the Angular testbed environment so we have to reset it before configuring and initializing the Angular testbed environment.&lt;/p&gt;

&lt;p&gt;With enabling Angular testing module teardown globally covered, let's move on to opting out of Angular testing module teardown.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disabling-angular-testing-module-teardown"&gt;
  &lt;/a&gt;
  Disabling Angular testing module teardown
&lt;/h2&gt;

&lt;p&gt;If our Angular tests break after enabling Angular testing module teardown, we can opt out globally or locally.&lt;/p&gt;

&lt;p&gt;We might want to opt out because various Angular testing libraries might break when &lt;code&gt;destroyAfterEach&lt;/code&gt; is enabled or they might not accept or specify this option.&lt;/p&gt;

&lt;p&gt;Use the following snippet to opt out of Angular testing module teardown in an entire test suite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser-dynamic/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initTestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserDynamicTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;platformBrowserDynamicTesting&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the following snippet to opt out of Angular testing module teardown in one or multiple test cases&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destroyAfterEach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
    &lt;span class="c1"&gt;// (...)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a component fixture has already been created, we must call &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; before &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, it's possible to opt out of Angular testing module teardown across our entire workspace by applying the optional Angular migration named &lt;code&gt;migration-v13-testbed-teardown&lt;/code&gt; using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;ng&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;angular/cli&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--migrate-only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;migration-v13-testbed-teardown&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When Angular testing module teardown is enabled by setting &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, the Angular testbed manages resources between test case runs by triggering the &lt;code&gt;OnDestroy&lt;/code&gt; lifecycle moment for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application-level services&lt;/li&gt;
&lt;li&gt;Feature-level services&lt;/li&gt;
&lt;li&gt;Angular modules&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Component-level services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the &lt;code&gt;ngOnDestroy&lt;/code&gt; hook of platform-level services is never triggered between tests.&lt;/p&gt;

&lt;p&gt;Host elements and component styles are removed from the DOM which is especially important when using Karma which runs tests in a browser.&lt;/p&gt;

&lt;p&gt;This all happens when &lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; or &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt; is called or at the latest when a test case finishes.&lt;/p&gt;

&lt;p&gt;We discussed how &lt;a href="https://angular.io/api/core/testing/ModuleTeardownOptions"&gt;&lt;code&gt;ModuleTeardownOptions&lt;/code&gt;&lt;/a&gt; were introduced by Angular version 12.1 but that schematics-generated values and default values changed in Angular versions 12.2 and 13.0 as seen in the following table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Angular version&lt;/th&gt;
&lt;th&gt;Default value of &lt;code&gt;destroyAfterEach&lt;/code&gt;
&lt;/th&gt;
&lt;th&gt;Schematics-generated value for &lt;code&gt;destroyAfterEach&lt;/code&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=12.0&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12.2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=13.0&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the sections &lt;em&gt;Enabling Angular testing module teardown in Karma&lt;/em&gt; and &lt;em&gt;Enabling Angular testing module teardown in Jest&lt;/em&gt;, we referenced full sample global Angular testing module teardown configurations for both the Karma and Jest test runners.&lt;/p&gt;

&lt;p&gt;We learnt how we can opt out of Angular testing module teardown on a global level by calling &lt;code&gt;TestBed.resetTestEnvironment&lt;/code&gt; followed by &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt;, specifying the &lt;code&gt;teardown&lt;/code&gt; option with &lt;code&gt;destroyAfterEach&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We discussed how to opt out of Angular testing module teardown on one or more test cases by passing a &lt;code&gt;teardown&lt;/code&gt; option object with &lt;code&gt;destroyAfterEach&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;TestBed.configureTestinModule&lt;/code&gt;, optionally preceded by a call to &lt;code&gt;TestBed.resetTestingModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, we learnt how to apply the &lt;code&gt;migration-v13-testbed-teardown&lt;/code&gt; migration to opt out of Angular testing module teardown across our entire workspace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Findings in this guide are based on the following Angular pull requests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/pull/42566"&gt;feat(core): add opt-in test module teardown configuration #42566&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/pull/43353"&gt;Enable test module teardown by default #43353&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wrote a few hundred tests to compare initialization and teardown behavior when &lt;code&gt;ModuleTeardownOptions#destroyAfterEach&lt;/code&gt; is enabled and disabled. If you're curious, they're available at &lt;a href="https://github.com/LayZeeDK/angular-module-teardown-options"&gt;github/LayZeeDK/angular-module-teardown-options&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>testing</category>
    </item>
    <item>
      <title>TOP 10 JOBS IN CLOUD COMPUTING</title>
      <author>Onumaku chibuike victory </author>
      <pubDate>Wed, 13 Oct 2021 22:13:16 +0000</pubDate>
      <link>https://dev.to/onumaku_bobby/top-10-jobs-in-cloud-computing-4gah</link>
      <guid>https://dev.to/onumaku_bobby/top-10-jobs-in-cloud-computing-4gah</guid>
      <description>&lt;p&gt;Job Opportunities in Cloud Computing are rising in the upside-down era of this unexpected pandemic. As per T4 research, the market share of cloud computing in 2021 is 406 Billion US Dollars and can exponentially grow up to 663 Billion US Dollars. With such a market share, companies whether small, medium, or large can shift from their traditional data-centric approach to the one stuffed with cloud computing services thereby rewarding the masses with the suddenly popped up benefits of this technological transformation. Does this really NOT FORCE US to think if or not we can make our career in the emerging field of cloud computing!!&lt;/p&gt;

&lt;p&gt;Top-10-Job-Opportunities-in-Cloud-Computing&lt;/p&gt;

&lt;p&gt;Yes, there are ample opportunities in this sector that organizations are giving to those individuals ready to extract the chief outcomes from the investment a company makes to leverage a cloud-based architecture. And according to your technical and leadership skills tailored well with years of experience, you can grab an offer letter of any of the positions like Cloud Consultant, Cloud Engineer, UI Developer, and so on…….Let’s know about the top opportunities through which one will get benefited in terms of perks, work type, and performance bound to cloud-based models companies adopt to leverage the graph of their sales corresponding to their investments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Cloud Engineer&lt;br&gt;
Cloud Engineer, in a broader sense, responsibly manages many technical processes through the provided cloud-based systems. Worried about with what aim the processes are carried forward!! Each of them comprises technologically advanced tasks correlated well with either designing, maintenance, planning, and monitoring of their existing business infrastructures for faster innovation and scalable leads through those technical processes. Most specifically, to be a cloud engineer, you should have knowledge about Python, PHP, .NET, SQL, general N/W (Network) Management Functions, and a deeper understanding of virtual networks. Besides, you should work whippily with cross-functional team members who can uninterruptedly provide application product support for better budgeting and forecasting of project analysis migrated to the cloud. What else does an organization need now to integrate all their server-based technologies and deploy their products and services negotiating well with the interests and loyalty of their customers in a shorter period of time?  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Architect&lt;br&gt;
Cloud Architect is another cloud-based career opportunity in which you will act as a person responsibly preparing a cloud-computing strategy inclusive of action plans and designs for cloud systems. Thinking if I can become this sort of person who has the potential of moving the business processes of various organizations to the cloud platform!! Yes, you can achieve milestones in this career opportunity and for that, you should have a thorough understanding of DNS i.e. Domain Name System, TCP and IP protocols, and other aspects of computer networks. Side-by-side, you should also be having flexibility in computer programming languages like JavaScript, Python, Go, and Java and can work on the related projects with minimal help or guidance. So, you can proceed ahead on the path of becoming a Cloud Architect who can work well on his/her day-to-day expectations like negotiating third-party contracts, by communicating with vendors, related to hardware, cloud technologies; closely working with IT security to monitor privacy and incidents responding to that as per scaled budgets and estimation costs of cloud adoption plans.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Consultant&lt;br&gt;
A Cloud Consultant is always on the course of providing technical researches and studies that justify his/her cloud management plans along with the suggestions regarding the cloud services and architecture adhered to by the organization as per its requirements. Planning to reserve your seat for this job role!! Yes, you can but do this after you acquire a strong IT background for yourself so that you can implement, migrate, design, or maintain cloud applications and the business processes associated with any of those applications. And for doing this better, you must have an in-depth knowledge of at least one operating system from this list: a) Windows b) Linux c) Ubuntu d) Fedora; basics of HTML Apex, JavaScript, and lastly, excellent customer service skills so that you can help the clients meet their requirements. Hence, the time has now come to showcase the IT background acquired by you, consisting of in-depth knowledge about OSs, networking protocols, communication, and technical skills for your as well as the organization’s growth for which you will be working in your future endeavors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DevOps Cloud Engineer&lt;br&gt;
DevOps Cloud Engineers are intensively involved with coordinating with various cloud developers with the sole purpose of integrating cloud-based solutions for better performance of cloud-based projects bound to the organization’s architecture. And primarily, this architecture revolves around technologies like Google Cloud Program, Microsoft Azure, or AWS. So, you need to excel yourself on any of those technologies and simultaneously, on the programming languages like Ruby, Java, Python, or Pearl. After you excel yourself with the ones aforementioned, you will be collaborating with the members of Research and Development like the ones known in the market as Developers to deliver automated solutions regarding expansion capability of the existing software, monitoring the users’ feedbacks and responses towards the newer product release and communicating the same with R&amp;amp;D teams for an improvised product’s interface intuitive from user’s perspective. Just enroll yourself in any of the industry-led training which will help you make a cakewalk on the day-to-day expectations of a DevOps Cloud Engineer!!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Infrastructure Engineer&lt;br&gt;
The job role of a cloud engineer is to keep on revolving around a motto and that is developing a secure and robust cloud-based infrastructure that can associate itself well with the systems somewhere demanding cloud networks. Indeed, the infrastructure engineers work closely with H/W i.e. Hardware Engineers and other developers gifted with excellent thinking, analytical, and verbal skills. Imagining what I need to do to become a person known in the market for assessing an organization’s existing infrastructure and explore the options through which the infrastructure can be moved or shifted to the cloud!! For this, you need to be effective with Python, Go, Linux, SLAs (Service Level Agreements)/SLOs (Service Level Objectives), and high-transactional IP Routing protocols. Only then, you can execute the determined best course of action in accordance with the roles and responsibilities assigned to you for this position on which you will be working on a daily or quarterly basis. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Security Engineer&lt;br&gt;
A Cloud Security Engineer never takes a step back when it comes to attracting organizations with the solutions related to designing and workload implementation on cloud-based systems in a secure manner. Wondering how the security engineer uses the potential of the cloud to deploy solutions!! To achieve the same, the engineer creates cloud-based programs that can be installed, maintained, or upgraded on the available cloud computing environments. Later, threat simulations and penetration tests are performed to determine whether or not risks are there impacting the security design and application development. If required, a set of practices like the use of cryptography, data encryption, MFA i.e. Multi-Factor Authentication, and Single Sign-In can be implemented to give people security recommendations while detecting incidents. Noteworthily, you should try becoming an in-demand cloud security engineer who knows about programming languages like Java, Python, but is handier with upgrading the existing security environments an organization may adopt thereby serving as the voice of their customers.      &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data Engineer&lt;br&gt;
Data Engineer is always on the better side of the coin by preparing data stored encrypted over the cloud for not only the analytical but the operational uses as well. Thinking about how that data is prepared!! For doing so, data engineers take the help of data acquisition methods like sharing, transforming, and purchasing of data to build data lakes from the relevant and multiple data sources keeping in mind auditing and data governance. Many times, they need to align the cloud infrastructure with the existing business requirements through programming languages like MongoDB, SQL, Python, and tools like Apache Spark, Amazon Redshift, and Snowflake. Simply, they are enthusiastic with their identified ways of improving efficiency, quality, and reliability of data developed, constructed, or maintained by taking updates from the stakeholders patient enough to govern the creative translations performed by the data engineers. Without any doubt, you can also be a part of this better side of the coin just after you participate in analyzing data through programming languages and tools essential for functional and technical design support in detail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full-Stack Developer&lt;br&gt;
Full-Stack Developers, honestly speaking, are the prime-time engineers of today’s technologically advanced world. Anticipating how they are listed in primetime!! Those Full-Stack Developers work dedicatedly with mobile, web, or native application stacks thereby helping clients during every planning phase of the assigned or upcoming projects. Furthermore, they can descriptively work with both front-end and back-end development ideas with their extensive programming knowledge of CSS, JavaScript, and HTML essential for front-end whereas knowledge of PHP, Angular JS, Apache, and Linux for back-end. And all this is vital for repeatable business continuity and scalability. Are you curious to be friends with the roles and responsibilities of a Full-Stack Developer? They are like developing precisely front-end web architecture that meets both the technical and customer needs, designing and then developing APIs for wider reach, and creating databases plus the servers of variable compatibility levels which are accessed speedily from mobile or web. So, you have a chance to move forward continuously on the path of development either front-end/ backend and work with stacks well-relatable with the functional capabilities of mobile, web, or native cloud applications. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud System Administrator&lt;br&gt;
Cloud System Administrator has a knack for maintaining, troubleshooting, and developing the network connections through their real-world experience of cloud-network types and managing on-demand firewall related requests. Besides, the administrator also mixes up with implementing and defining policies for cloud-based systems so that the customers can speedily communicate with all the services that systems can potentially reciprocate live. This helps the organization a lot since they are assured of the seamless delivery of all of their services at every level – small or large. Calculating if your skills can help you get yourself introduced to the cloud system administrator job role!! Yes, you are free to involve in the operational efficiency demanded by the role through coding languages like Python, Ruby, Pearl, Java, or .NET; familiarity with tools like Puppet, Chef, &amp;amp; Ansible properly administering the network types all the time. All this will benefit you really while you are shaping your career as a Cloud System Administrator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI Developer&lt;br&gt;
UI Developer as the name translates itself inches day-by-day towards translating creatively software design components and associated ideas into reality. Contemplating how a UI Developer handles such an innovative translation!! The answer is that with the smarter use of front-end technologies like Angular, Flutter, frameworks like Django, and languages like CSS, Java; the translations are handled creatively by a UI Developer. Collaboratively, the developer will be writing Unit Tests and also working responsibly with QA engineers to define end-to-end test cases somewhere involved with agility and user satisfaction. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>cloudcomputing</category>
    </item>
    <item>
      <title>Ddosify | High-performance load testing tool, written in Golang (opensource) ⚡</title>
      <author>Fatih Baltacı</author>
      <pubDate>Wed, 13 Oct 2021 21:58:49 +0000</pubDate>
      <link>https://dev.to/fatihbaltaci/ddosify-high-performance-load-testing-tool-written-in-golang-opensource-5a1k</link>
      <guid>https://dev.to/fatihbaltaci/ddosify-high-performance-load-testing-tool-written-in-golang-opensource-5a1k</guid>
      <description>&lt;p&gt;Hi All,&lt;br&gt;
I want to introduce a brand-new open source load testing tool Ddosify. We aimed to create a multi-protocol, easy-to-use, high-performance performance testing tool. 🚀&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ddosify"&gt;
        ddosify
      &lt;/a&gt; / &lt;a href="https://github.com/ddosify/ddosify"&gt;
        ddosify
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      High-performance load testing tool, written in Golang.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ddosify/ddosify/master/assets/ddosify-logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySuEOWt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ddosify/ddosify/master/assets/ddosify-logo.svg" alt="Ddosify logo" width="336px"&gt;&lt;/a&gt;&lt;br&gt;
    Ddosify - High-performance load testing tool
&lt;/h1&gt;
&lt;p&gt;
    &lt;a href="https://github.com/ddosify/ddosify/releases"&gt;&lt;img src="https://camo.githubusercontent.com/138de14bdb165b2e4a8994067c9e050b4367c3a8c9ec181f13dfda94f8d22f0e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f64646f736966792f64646f736966793f7374796c653d666f722d7468652d6261646765266c6f676f3d67697468756226636f6c6f723d6f72616e6765" alt="ddosify latest version"&gt;&lt;/a&gt; 
    &lt;a href="https://github.com/ddosify/ddosify/actions/workflows/test.yml"&gt;&lt;img src="https://camo.githubusercontent.com/b2715571b6f0f99fe4f081f5d616a00db28835e1568e114aae4c943326705f8e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f64646f736966792f64646f736966792f546573743f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562" alt="ddosify build result"&gt;&lt;/a&gt; 
    &lt;a href="https://pkg.go.dev/go.ddosify.com/ddosify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e742a3e5e86bba9b26cac3b21b0c71f8493fa962a538ed22465958c58fffeeec/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f676f2d6d6f642f676f2d76657273696f6e2f64646f736966792f64646f736966793f7374796c653d666f722d7468652d6261646765266c6f676f3d676f" alt="golang version"&gt;&lt;/a&gt; 
    &lt;a href="https://app.codecov.io/gh/ddosify/ddosify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9858e97d3adbac0fe92b564d27fe428d3dad72f74905f51347ec5f2087e82299/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f64646f736966792f64646f736966793f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f6e65" alt="go coverage"&gt;&lt;/a&gt; 
    &lt;a href="https://goreportcard.com/report/github.com/ddosify/ddosify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cbe972bb0ee4832494660db964fba41c8879849b31c1cb13189c1ae0b903d3b9/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f64646f736966792f64646f736966793f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f6e65" alt="go report"&gt;&lt;/a&gt; 
    &lt;a href="https://github.com/ddosify/ddosify/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/a02117779f729175ddbc2d588783ec49045aafc3d96b3039bdf9db0636c65bbf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c4943454e53452d4147504c2d2d332e302d6f72616e67653f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f6e65" alt="ddosify license"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ddosify/ddosify/master/assets/ddosify-quick-start.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtLXXgQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ddosify/ddosify/master/assets/ddosify-quick-start.gif" alt="Ddosify - High-performance load testing tool quick start" width="900px"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Features&lt;/h2&gt;

&lt;p&gt;✔️ Protocol Agnostic - Currently supporting &lt;em&gt;HTTP, HTTPS, HTTP/2&lt;/em&gt;. Other protocols are on the way.&lt;/p&gt;

&lt;p&gt;✔️ Scenario-Based - Create your flow in a JSON file. Without a line of code!&lt;/p&gt;

&lt;p&gt;✔️ Different Load Types - Test your system's limits across different load types.&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ddosify&lt;/code&gt; is available via &lt;a href="https://hub.docker.com/ddosify/ddosify" rel="nofollow"&gt;Docker&lt;/a&gt;, &lt;a href="https://github.com/ddosify/ddosify#homebrew-tap-macos-and-linux"&gt;Homebrew Tap&lt;/a&gt;, and downloadable pre-compiled binaries from the &lt;a href="https://github.com/ddosify/ddosify/releases/latest"&gt;releases page&lt;/a&gt; for macOS, Linux and Windows.&lt;/p&gt;

&lt;h3&gt;
Docker&lt;/h3&gt;

&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;docker run -it --rm ddosify/ddosify&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Homebrew Tap (macOS and Linux)&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;brew install ddosify/tap/ddosify&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
apk, deb, rpm packages&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For Redhat based (Fedora, CentOS, RHEL, etc.)&lt;/span&gt;
rpm -i https://github.com/ddosify/ddosify/releases/download/v0.1.1/ddosify_amd64.rpm

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For Debian based (Ubuntu, Linux Mint, etc.)&lt;/span&gt;
wget https://github.com/ddosify/ddosify/releases/download/v0.1.1/ddosify_amd64.deb
dpkg -i ddosify_amd64.deb

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; For Alpine&lt;/span&gt;
wget https://github.com/ddosify/ddosify/releases/download/v0.1.1/ddosify_amd64.apk
apk add --allow-untrusted ddosify_amd64.apk&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Using the convenience script (macOS and Linux)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The script requires root or sudo privileges to move ddosify binary to &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The script attempts to…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ddosify/ddosify"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/ddosify/ddosify"&gt;https://github.com/ddosify/ddosify&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is currently supporting HTTP(S), HTTP/2. We are going to add as many protocols as possible. So, if you need to perform a load test for a specific protocol, please contact me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test plan creation can be achieved with a configuration(JSON) file. You don’t need to write any line of code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I said, our primary focus is creating a load test tool that can do anything related to load testing with the easiest usage. If you think current tools do not meet your requirements, please contact me so we can improve Ddosify based on your needs. ⚡&lt;/p&gt;

&lt;p&gt;Feedback is always welcome. Have a lovely day. &lt;/p&gt;

</description>
      <category>testing</category>
      <category>go</category>
      <category>devops</category>
      <category>performance</category>
    </item>
    <item>
      <title>Build an Embeddable Widget using Preact and the Shadow DOM</title>
      <author>Coleman Imhoff</author>
      <pubDate>Wed, 13 Oct 2021 21:36:50 +0000</pubDate>
      <link>https://dev.to/companycam/build-an-embeddable-widget-using-preact-and-the-shadow-dom-33lm</link>
      <guid>https://dev.to/companycam/build-an-embeddable-widget-using-preact-and-the-shadow-dom-33lm</guid>
      <description>&lt;p&gt;Our team at &lt;a href="https://companycam.com/"&gt;CompanyCam&lt;/a&gt; was tasked with building a widget that our users could embed on their websites. The widget needed to be easy to install, responsive, and provide a fullscreen application experience. This article introduces and explains the technical decisions made and how we got there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discovery"&gt;
  &lt;/a&gt;
  Discovery
&lt;/h2&gt;

&lt;p&gt;Before jumping into the code, I want to quickly discuss some things our team learned during discovery. Hopefully, this will assist you in making the right decisions for your project.&lt;/p&gt;

&lt;p&gt;After learning about the details of the product, we found that the codebase had two requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h3&gt;

&lt;p&gt;Our team needed to prevent external CSS from cascading into our code. In addition, our styling needed to be scoped to our application. We explored wrapping the widget in an iFrame, which provides &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;a nested browsing context&lt;/a&gt;.  This offered the encapsulation we needed, but we found it difficult to control the iFrame in order to provide a quality fullscreen experience. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API"&gt;Fullscreen API&lt;/a&gt; was a potential solution, but it did not hold the required &lt;a href="https://caniuse.com/fullscreen"&gt;browser support&lt;/a&gt;. Using an iFrame to encapsulate a smaller product could be a great solution, but did not fit our use case.&lt;/p&gt;

&lt;p&gt;We turned our attention to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM API&lt;/a&gt;. The Shadow DOM provides a way to attach a hidden DOM tree to any element. This creates encapsulation, but doesn't limit your ability to have control of the application. In addition, the Shadow DOM API has &lt;a href="https://caniuse.com/?search=attachShadow"&gt;good browser support&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#small-bundle"&gt;
  &lt;/a&gt;
  Small Bundle
&lt;/h3&gt;

&lt;p&gt;It's imperative that the widget loads &lt;em&gt;quickly&lt;/em&gt;. With the strategy the team had in place, it was clear that it was going to be difficult to code-split our application. At CompanyCam, engineers write user interfaces in &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; therefore it made sense to stick with that.&lt;/p&gt;

&lt;p&gt;As we added 3rd party libraries, our bundle size grew. We found that &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt; was a good solution to this problem. It provides all the same features as React, but in a much smaller package. You can compare the unpacked size of &lt;a href="https://www.npmjs.com/package/preact"&gt;Preact&lt;/a&gt; to a combined &lt;a href="https://www.npmjs.com/package/react"&gt;React&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/react-dom"&gt;React-DOM&lt;/a&gt; and see a significant difference!&lt;/p&gt;

&lt;p&gt;Now, let's jump into some code! Feel free to clone &lt;a href="https://github.com/colemanimhoff/preact-shadow-dom-starter"&gt;this starter repo&lt;/a&gt; if a working example is helpful for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mounting-your-app-with-a-shadow-dom-layer"&gt;
  &lt;/a&gt;
  Mounting Your App with a Shadow DOM Layer
&lt;/h2&gt;

&lt;p&gt;Preact is easy to &lt;a href="https://preactjs.com/guide/v10/getting-started/#integrating-into-an-existing-pipeline"&gt;integrate into an existing project&lt;/a&gt;. Mounting our Preact &lt;code&gt;App&lt;/code&gt; component should look similar to React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add a Shadow DOM layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can attach a Shadow DOM layer to a regular DOM node, called a shadow host. We can do this by calling the &lt;code&gt;attachShadow&lt;/code&gt; method, which takes &lt;code&gt;options&lt;/code&gt; as a parameter. Passing &lt;code&gt;mode&lt;/code&gt; with the value &lt;code&gt;open&lt;/code&gt; allows the shadow DOM to be accessible through the &lt;code&gt;shadowRoot&lt;/code&gt; property. The other value for &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;closed&lt;/code&gt;, which results in &lt;code&gt;shadowRoot&lt;/code&gt; returning &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To verify things are in working order, we can open our &lt;br&gt;
browser's developer tools and and look at the DOM tree. Here, we can see our Shadow DOM layer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59VUSADF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijtt3i0jyy1gntsbxfz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59VUSADF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijtt3i0jyy1gntsbxfz8.png" alt="Screen Shot 2021-09-30 at 2.01.52 PM-1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#styling-the-shadow-dom"&gt;
  &lt;/a&gt;
  Styling the Shadow DOM
&lt;/h2&gt;

&lt;p&gt;Styles must be scoped inside the Shadow DOM in order to render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// inject styles&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styleTag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;styleTag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styleTag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using webpack, keep in mind you will need &lt;a href="https://webpack.js.org/loaders/css-loader/"&gt;css-loader&lt;/a&gt; in order for this approach to work. Create a &lt;code&gt;style&lt;/code&gt; tag and set its &lt;code&gt;innerHTML&lt;/code&gt; to an imported stylesheet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YpcOFrxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vl4im01rjq69ia45zxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YpcOFrxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vl4im01rjq69ia45zxz.png" alt="Screen Shot 2021-10-07 at 10.44.27 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As our application grew, managing our styles became cumbersome and our team wanted to find another solution. At CompanyCam, our designers enjoy designing our products with &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;. With &lt;code&gt;styled-components&lt;/code&gt;, a &lt;a href="https://styled-components.com/docs/advanced#existing-css"&gt;generated stylesheet is injected&lt;/a&gt; at the end of the &lt;code&gt;head&lt;/code&gt; of the document. Due to our Shadow DOM layer, this won't work without some configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://styled-components.com/docs/api#stylesheetmanager"&gt;StyleSheetManager&lt;/a&gt; helper component allows us to modify how styles are processed. Wrap it around the &lt;code&gt;App&lt;/code&gt; component's &lt;code&gt;children&lt;/code&gt; and pass the &lt;code&gt;shadowRoot&lt;/code&gt; of the shadow host as the value of &lt;code&gt;target&lt;/code&gt;. This provides an alternate DOM node to inject styles into.&lt;/p&gt;

&lt;p&gt;Just like the previous technique, we can see our styles scoped within the Shadow DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lReOSyo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y01nycmwjzl6bnn1onwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lReOSyo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y01nycmwjzl6bnn1onwo.png" alt="Screen Shot 2021-10-07 at 10.53.48 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-inheritance"&gt;
  &lt;/a&gt;
  Avoid Inheritance
&lt;/h2&gt;

&lt;p&gt;The Shadow DOM will prevent outside CSS selectors from reaching any contained markup. But, it is possible for elements in Shadow DOM to &lt;a href="https://www.w3.org/TR/css-scoping-1/#shadow-cascading"&gt;inherit CSS values&lt;/a&gt;. We can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/initial"&gt;reset properties to their default values&lt;/a&gt; by declaring the the property &lt;code&gt;all&lt;/code&gt; to the value &lt;code&gt;initial&lt;/code&gt; on the parent element of your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WidgetContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  all: initial;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#win-the-stacking-order-battle-with-portals"&gt;
  &lt;/a&gt;
  Win the Stacking Order Battle with Portals
&lt;/h2&gt;

&lt;p&gt;Whether it's Wordpress, Squarespace, Wix, or something from scratch, our widget needed to live on any website. Since &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context#the_example"&gt;stacking order depends on the DOM tree hierarchy&lt;/a&gt;, we immediately saw &lt;code&gt;z-index&lt;/code&gt; issues in our fullscreen components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb4yvad7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/httqp2k5lo82jwxj8zll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb4yvad7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/httqp2k5lo82jwxj8zll.png" alt="Screen Shot 2021-10-07 at 11.57.11 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="(https://reactjs.org/docs/portals.html)"&gt;Portals&lt;/a&gt; provide a way to render &lt;code&gt;children&lt;/code&gt; into a DOM node which exists outside the context of the application. You can mount your &lt;code&gt;Portal&lt;/code&gt; to any DOM node. In our case, we needed to render these fullscreen components as high in the DOM tree as possible. Therefore, we can append our &lt;code&gt;Portal&lt;/code&gt; to the &lt;code&gt;body&lt;/code&gt; of the document we are installing the widget on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0_3BzNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkpk08269n5e2zltlu7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0_3BzNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkpk08269n5e2zltlu7n.png" alt="Screen Shot 2021-10-07 at 11.57.17 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create our &lt;code&gt;Portal&lt;/code&gt; by starting at the root of our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/App.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// shadow portal root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;portal-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// app shadow root&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a shadow host for the &lt;code&gt;Portal&lt;/code&gt; component and give it an &lt;code&gt;id&lt;/code&gt;. Then, just like we did with &lt;code&gt;appRoot&lt;/code&gt;, attach a new Shadow DOM layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPortal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/compat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PortalContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
    all: initial;
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#portal-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createPortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PortalContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PortalContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;portalRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create the &lt;code&gt;Portal&lt;/code&gt; component. Add an effect to append  &lt;code&gt;portalRoot&lt;/code&gt; to the parent element of the component. From there, pass &lt;code&gt;children&lt;/code&gt; and &lt;code&gt;portalRoot.shadowRoot&lt;/code&gt; to &lt;code&gt;createPortal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember to scope your styles to the &lt;code&gt;Portal&lt;/code&gt; Shadow DOM layer using &lt;code&gt;StyleSheetManager&lt;/code&gt; and reset child elements' styles to their default values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* @jsx h */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Portal.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="s2"&gt;`
  color: #e155f5;
  font-family: sans-serif;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WidgetContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  all: initial;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow DOM!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, Shadow Portal!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Portal&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WidgetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyleSheetManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can wrap any fullscreen component within our &lt;code&gt;Portal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G37-tCSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ork0tbw48vvafvuq7d44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G37-tCSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ork0tbw48vvafvuq7d44.png" alt="Screen Shot 2021-10-07 at 4.09.34 PM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Recently, our team has &lt;a href="https://companycam.com/showcases"&gt;released the widget to GA&lt;/a&gt;. The techniques outlined above have allowed us to build a rich application experience with a small codebase that is... &lt;em&gt;mostly&lt;/em&gt; encapsulated. We still run into the occasional &lt;code&gt;z-index&lt;/code&gt; issue or JavaScript event conflict provided by a website builder theme. Overall, widget installs have been a success.&lt;/p&gt;

</description>
      <category>preact</category>
      <category>shadowdom</category>
      <category>webcomponents</category>
      <category>styledcomponents</category>
    </item>
    <item>
      <title>The difficult journey to land the first tech job.</title>
      <author>Thiago Tavares</author>
      <pubDate>Wed, 13 Oct 2021 20:55:37 +0000</pubDate>
      <link>https://dev.to/thiagoltavares/the-difficult-journey-to-land-the-first-tech-job-1cdg</link>
      <guid>https://dev.to/thiagoltavares/the-difficult-journey-to-land-the-first-tech-job-1cdg</guid>
      <description>&lt;p&gt;I just finished college, and now? I did a code Bootcamp, and now? Self-taught and now?&lt;/p&gt;

&lt;p&gt;These are common questions in the minds of many new talents in the IT area, full of new skills, set out to land their first job in the software development area. Companies need new talented people, and new talented people need companies, but why these two doesn't match?&lt;/p&gt;

&lt;p&gt;Landing the first job becomes a paradox. Companies want programmers with &lt;strong&gt;experience&lt;/strong&gt;, but these prodigies have just left college with none. And this search is endless, nowadays even for internships they want &lt;strong&gt;experience&lt;/strong&gt;, &lt;strong&gt;how to get a job if I don't have experience and how to get experience if I don't have a job?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QargKWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn78uy8hf6xqagc6q1if.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QargKWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn78uy8hf6xqagc6q1if.png" alt="question"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The interviews begin, the first one we are excited, on the fifth we are anxious for a positive answer, on the tenth we think we are not good enough, on the 30th we don't even know what to think. Almost always with the same feedback, and most of the time, you don't even have feedback.&lt;/p&gt;

&lt;p&gt;I had to go through many interviews in the past to understand that we also need to study for interviews, study the company we want to join, the vacancy, the position, adapt the curriculum to the desired position, after all, the blessed &lt;strong&gt;experience&lt;/strong&gt; is still the "main"!&lt;/p&gt;

&lt;p&gt;We can consider ourselves lucky because we can get &lt;strong&gt;experience&lt;/strong&gt; putting our knowledge into practice. We are not like doctors who cannot make mistakes or "play" to get &lt;strong&gt;experience&lt;/strong&gt;. We are programmers, and we need only a computer to get our hands dirty.&lt;/p&gt;

&lt;p&gt;Do you know that open position in that e-commerce company you want so much? How about studying the company, seeing what technologies it uses, and then putting into practice what you know by creating something simple like, for example, a homepage with products, then take more risks and try to create a flow of adding products to a cart. You can "play" without being afraid of making mistakes because you won't hurt anyone with your try, at least you'll create something ugly, and that doesn't even work, but you'll learn with your &lt;strong&gt;experience&lt;/strong&gt;... And look at her there, the so dreamed &lt;strong&gt;EXPERIENCE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With all that in mind, it will be your turn to yells "I did it!" so don't lose focus, keep trying with everything you have, you can.&lt;/p&gt;

&lt;p&gt;And finally, one last tip, don't forget to organize your interview schedule with the recruiter's name, date, time, company name, frequently asked questions, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;p.s. take advantage and create your app to persist your interviews.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>beginners</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Welcome Thread - v146</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 13 Oct 2021 20:41:08 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v146-5coa</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v146-5coa</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0Exl2gzkfMptFOGA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0Exl2gzkfMptFOGA/giphy.gif" alt="Yo graphic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>A practical introduction to git – jumping in with both feet</title>
      <author>s-heins</author>
      <pubDate>Wed, 13 Oct 2021 20:08:06 +0000</pubDate>
      <link>https://dev.to/sheins/-a-practical-introduction-to-git-jumping-in-with-both-feet-2o56</link>
      <guid>https://dev.to/sheins/-a-practical-introduction-to-git-jumping-in-with-both-feet-2o56</guid>
      <description>&lt;p&gt;If you're a developer, you have probably heard about the version control system, git. If you haven't used it yourself yet, or not a lot, you might also be a bit scared by all the different words – commits, branches, pushing, cherry-picking, rebasing, … what is all that stuff? And why is version control so hard? What if I do the wrong thing and I end up losing everything?&lt;/p&gt;

&lt;p&gt;First up, git doesn't lose anything you have committed. It might be a bit harder to find but don't despair. We'll get you there.&lt;br&gt;
But let's start at the beginning without any looming threat of losing your changes.&lt;/p&gt;

&lt;p&gt;This will be the first article in a series and it will tell you how to set up your repository from the command line, how to add changes and save ("commit") them, how to set your name and email address to be added as metadata to those changes, and how to do define a git alias, namely one to get a pretty git tree of your changes in the console.&lt;/p&gt;

&lt;p&gt;(Cover image by &lt;a href="https://freeimages.com/photographer/nexxy-42715"&gt;Nerry Burg&lt;/a&gt; from &lt;a href="https://freeimages.com"&gt;FreeImages&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-version-control"&gt;
  &lt;/a&gt;
  Why version control?
&lt;/h2&gt;

&lt;p&gt;If you add some files or change their contents, you'll want to have a way to save your progress. The difference between having the file in a version control system such as git rather than just saving it on your hard drive is that you have a history of the file along with additional metadata – you could revert back to an old version if you wanted to, look at exactly which changes were introduced when, by whom, and, if they wrote a meaningful message, why they did those changes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#your-task"&gt;
  &lt;/a&gt;
  Your task
&lt;/h2&gt;

&lt;p&gt;Let's say you're tasked with creating an encyclopedia on animals. This is something that will require a lot of work, and re-working articles, so you want to know your articles are safe and sound. You might also want to revert some changes if your editor tells you to get rid of that article on flamingos one day and then changes their mind the next. You decide to start a git repository to commit your changes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#initializing-your-git-repository"&gt;
  &lt;/a&gt;
  Initializing your git repository
&lt;/h3&gt;

&lt;p&gt;In your shell, create a new directory and initialize your git repository by running &lt;code&gt;git init&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9_11rn59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0g1y7tkm4u0ep37xg81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_11rn59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0g1y7tkm4u0ep37xg81.png" alt="Initializing a git repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, this creates to a hidden folder &lt;code&gt;.git&lt;/code&gt;. If we delete this folder again, your directory will no longer be a git repository.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configure"&gt;
  &lt;/a&gt;
  Configure
&lt;/h3&gt;

&lt;p&gt;So that other people know whom to contact regarding the changes you introduced because they might have some questions (or if you want to be able to run into some code and then marvel at the fact that these changes here were done by yourself a year ago and now you can't remember very much about them), you will want to set your name and email in your git config.&lt;br&gt;
You can either do so globally for the current logged-in user by running it with the &lt;code&gt;--global&lt;/code&gt; modifier which sets it for all repositories you commit to from this user on your machine, or for just this one repository if you run these commands with the &lt;code&gt;--local&lt;/code&gt; flag or leaving out the flag altogether since "local" is the default setting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"Evelyn Example"&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email evelyn@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started-on-content"&gt;
  &lt;/a&gt;
  Getting started on content
&lt;/h2&gt;

&lt;p&gt;Now that we've got this out of the way, let's get started!&lt;br&gt;
You might have noticed that git has automatically created a branch named "main" for us (or, depending on your settings, this may also be called "master". If you want to change the name of the default branch that gets created on running git init to something other than &lt;code&gt;master&lt;/code&gt;, you can run &lt;code&gt;git config --global init.defaultBranch main&lt;/code&gt; , or whichever name you prefer instead of &lt;code&gt;main&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Depending on which approach you are using when developing, you may work with additional branches, then creating merge requests that need to be approved so you can move these changes onto the main branch, or alternatively, just work with the main branch.&lt;br&gt;
Let's assume we're the only collaborator on this encyclopedia for now and thus, we can use the main branch to make our changes and will not run into trouble. (If multiple people are working on just one branch, it requires a team that is highly coordinated so those changes keep getting reviewed)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-files"&gt;
  &lt;/a&gt;
  Adding files
&lt;/h3&gt;

&lt;p&gt;At first, we might want to create a list of animals we want to write articles on. We create a file &lt;code&gt;animals-to-write-about&lt;/code&gt; and add a line &lt;code&gt;house cat&lt;/code&gt; because, hey, everyone seems to be crazy about cats, so our encyclopedia needs to have an article on them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7mijN2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbv1e4wcjaoj8nubuojk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7mijN2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbv1e4wcjaoj8nubuojk.png" alt="Adding a new file to the git repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to know what the current status of our repository is, we can run &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
Git says our file is an &lt;em&gt;untracked file&lt;/em&gt;… but what does that mean?&lt;/p&gt;

&lt;p&gt;If git does not yet know about a file, it is &lt;strong&gt;untracked&lt;/strong&gt;. If we want to add it to git, we can run &lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt; or just add all files with &lt;code&gt;git add .&lt;/code&gt; (the dot at the end means all files in the current directory and sub-directories). In the next step, we can then &lt;code&gt;git commit&lt;/code&gt; these files. Only files that have been committed are safe from being lost, so we want to make sure we always commit any changes that we want to keep.&lt;br&gt;
By adding the &lt;code&gt;-m&lt;/code&gt; flag and then a note in quotation marks or single quotes, we can add a commit message. This should always start with an upper case verb in the present tense. For more pointers on how to write good commit messages, have a look at &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;this article by Chris Beams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofaprr4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnvhpbp3xjq4rtqyfcy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofaprr4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnvhpbp3xjq4rtqyfcy1.png" alt="Creating our first commit"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#git-aliases"&gt;
  &lt;/a&gt;
  Git aliases
&lt;/h3&gt;

&lt;p&gt;What was this &lt;code&gt;git lg&lt;/code&gt; command I just used to look at the changes? It was a git alias. This is a handy way to save all your typing energy for that encyclopedia.&lt;br&gt;
You can add your own aliases by editing the &lt;code&gt;~/.gitconfig&lt;/code&gt; file (on Linux / MacOS). My list looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# This is Git's per-user configuration file.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;user]
    email &lt;span class="o"&gt;=&lt;/span&gt; s.heins@example.com
    name &lt;span class="o"&gt;=&lt;/span&gt; S Heins
&lt;span class="o"&gt;[&lt;/span&gt;credential]
    helper &lt;span class="o"&gt;=&lt;/span&gt; osxkeychain
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    s &lt;span class="o"&gt;=&lt;/span&gt; status
    c &lt;span class="o"&gt;=&lt;/span&gt; commit &lt;span class="nt"&gt;-m&lt;/span&gt;
    co &lt;span class="o"&gt;=&lt;/span&gt; checkout
    lg &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;clear &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git log &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;--graph&lt;/span&gt; &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'format:%C(auto)%h%d %s  %C(magenta)[%an] (%ad)%C(reset)'&lt;/span&gt; &lt;span class="nt"&gt;--date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;'%d.%m.%y %H:%M'&lt;/span&gt;
    p &lt;span class="o"&gt;=&lt;/span&gt; pull &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;core]
    excludesfile &lt;span class="o"&gt;=&lt;/span&gt; /Users/heinss/.gitignore_global
&lt;span class="o"&gt;[&lt;/span&gt;commit]
    template &lt;span class="o"&gt;=&lt;/span&gt; /Users/heinss/.gitmessage.txt
&lt;span class="o"&gt;[&lt;/span&gt;pull]
    rebase &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;init]
    defaultBranch &lt;span class="o"&gt;=&lt;/span&gt; main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I highly recommend adding the alias under &lt;code&gt;lg&lt;/code&gt; for a pretty git tree right in your command line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outlook-working-with-remotes-and-branches"&gt;
  &lt;/a&gt;
  Outlook: Working with remotes and branches
&lt;/h2&gt;

&lt;p&gt;In the next article, we will be looking at how to work with remotes in case you want to save your work somewhere other than just your local machine and how to work with branches.&lt;/p&gt;

&lt;p&gt;If you work with multiple collaborators, working with branches in conjunction with a version control service such as github or gitlab that lets you create requests to propagate these changes into the main branch enables you to first review the changes before they go into your main branch most easily. Propagating changes from one branch to the other is called &lt;em&gt;merging&lt;/em&gt; one branch into the other.&lt;br&gt;
Otherwise, collaborators would commit in the main branch and if something goes seriously wrong, they would have to roll back those changes. Or if a commit needs to be reworked, additional rework commits need to be added, potentially bloating up your tree instead of the collaborator being able to still add them to their commit before merging. There are working modes though that use only one branch; this is called trunk-based development.&lt;br&gt;
However, most teams I have worked in have chosen to work with branching and so-called &lt;em&gt;merge requests&lt;/em&gt;, also called &lt;em&gt;pull requests&lt;/em&gt;.&lt;br&gt;
More on working with branches in the next post though!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-command-summary"&gt;
  &lt;/a&gt;
  Conclusion and command summary
&lt;/h2&gt;

&lt;p&gt;We created our first local git repository, and added and committed a file to it!&lt;/p&gt;

&lt;p&gt;Here are some commands to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git init&lt;/code&gt; to initialize a local git repository&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git status&lt;/code&gt; to show the current status of a repository and the files it contains&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt; to add all files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git commit -m 'My message'&lt;/code&gt; to commit those changes with a commit message (i.e. propagate those changes to the branch and thus keep them from being lost)&lt;/li&gt;
&lt;li&gt;setting some options in the global git config file at &lt;code&gt;~/.gitconfig&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git config --global user.name "Evelyn Example"&lt;/code&gt; to set the author name globally (for all git repositories)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config --global user.email evelyn@example.com&lt;/code&gt; to set the author email address globally&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config --global init.defaultBranch main&lt;/code&gt; to set the default branch name when initializing a new repository to &lt;code&gt;main&lt;/code&gt; globally&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Do's and Don'ts of Front-End Documentation</title>
      <author>lary mak</author>
      <pubDate>Wed, 13 Oct 2021 19:47:54 +0000</pubDate>
      <link>https://dev.to/larymak/the-dos-and-donts-of-front-end-documentation-2k5b</link>
      <guid>https://dev.to/larymak/the-dos-and-donts-of-front-end-documentation-2k5b</guid>
      <description>&lt;p&gt;&lt;a href="https://aviyel.com/post/1178/the-do-s-and-don-ts-of-front-end-documentation"&gt;Full article available on Aviyel for free&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One thing almost all developers might all agree on is even if you have the best programming project ready for the world but, if it doesn’t have good &lt;a href="https://aviyel.com/post/1161/this-free-tool-lets-you-create-world-class-documentation-for-react-components"&gt;documentation&lt;/a&gt;, chances are it won't reach the right audience. For instance, in an organization, a good set of well-explained rules could save you from having to repeatedly answer the same questions. The rules ensure that people can figure out how things work around the organization if key employees decide to leave the company. The same thing happens in a project, a well-documented guideline will help bring consistency and exposure to source code and ensures regular modification even if senior employees might want to walk out. &lt;/p&gt;

&lt;p&gt;In the software technical industry, it can be really challenging for engineers to obtain documentation from product owners that can actually be used to build and test a product. This is because the chances of product owners being developers is very low, so they have very little concept of what information a developer needs in order to actually compose a functional digital product. This means that this task often falls in the hands of developers and technical engineers to maintain a library of documentation for the products they’re building. &lt;/p&gt;

&lt;p&gt;Now, to help you get started with writing good documentation for your products here are some tips that might help you to curate full-fledged, quality documentation that can be used as both a tool for building a product and a reference for learning and testing your recently created product.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-types-of-documentation-available"&gt;
  &lt;/a&gt;
  What are the Types of Documentation Available?
&lt;/h2&gt;

&lt;p&gt;We will agree that good, &lt;a href="https://aviyel.com/post/1152/thinking-outside-the-box-an-online-resume-with-docz"&gt;front-end&lt;/a&gt; documentation is important to the success of software products, and yet very few projects actually have good documentation. It's funny how even successful projects often have barely adequate documentation. You can resolve these issues by understanding the mechanism behind doc maintenance and by choosing the right one to document your product. The two main types of documentation include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Product documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Process documentation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Structuring documentation into these categories helps ensure that each detail is covered and makes it easier to write and maintain. Our main focus in this article will be on the product documentation where we will cover what should be done and what should be avoided when writing the documentation, with these tips you will be able to make your software projects and teams more successful. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dos-of-frontend-documentation"&gt;
  &lt;/a&gt;
  The Dos of Front-end Documentation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSi-9GBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2bwvp5hkc3dhwj6b99e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSi-9GBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2bwvp5hkc3dhwj6b99e.png" alt="The Dos of Front-end Documentation"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt; - Before you begin writing your documentation it is highly advised to define your target audience, the tone, style, and technicality you will use, depends on the audience you will be targeting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Understand the product&lt;/strong&gt; - If you want to write great documentation, the first step is for you to be sure you understand how the products work. If you don’t even know how something is supposed to work, you can’t have much confidence that it’s working correctly. Plus, it creates uncertainty amongst teams about the working of a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Structure and Markup&lt;/strong&gt; - Structure your documentation by tasks relevant to the user instead of providing reference documentation by describing each part of the user interfaces individually. Always describe what a product can do rather than its limitations. You can follow these components to standardize your doc:&lt;br&gt;
Title&lt;br&gt;
Abstract&lt;br&gt;
Table of content&lt;br&gt;
Chapters&lt;br&gt;
Sections&lt;br&gt;
Contributors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use of visual aids&lt;/strong&gt; - Provide diagrams or other graphic materials to help understand and communicate the structure and design principles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep it up-to-date&lt;/strong&gt; - Documentation is only as valuable as it is accurate, so it's important to keep it updated with changes made to the UI and backend services. It is a good practice to make updating the documentation a part of the process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt; - We all come from different zones and we all speak different languages, this does not mean you need to translate your code into vernaculars. Writing your documentation in English will work since English is a globally accepted language. You might want to use a translator tool here if your target audience isn't familiar with English.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide the definition of used terms and full forms of abbreviation - consider creating a reference page with all definitions, commonly used words, etc. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#more-tips-to-remember"&gt;
  &lt;/a&gt;
  More Tips to Remember
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Define the purpose of the project in the documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Document the technologies used&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Document any unexpected events that may occur&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Address how it will be distributed for public use&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mention the expected, emphasize the unique&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember to backup &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-can-i-create-documentation-of-my-project"&gt;
  &lt;/a&gt;
  Where Can I Create Documentation of My Project?
&lt;/h2&gt;

&lt;p&gt;The market is filled with really popular &lt;a href="https://aviyel.com/post/1178/the-do-s-and-don-ts-of-front-end-documentation"&gt;style guides&lt;/a&gt; and documentation tool to code your projects. However, I am a big fan of open source and prefer them only for my documentation needs. I mostly use &lt;a href="https://www.docz.site/docs/getting-started"&gt;Docz&lt;/a&gt; to curate technical documentation of my codes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-use-docz-for-my-frontend-needs"&gt;
  &lt;/a&gt;
  Why I Use Docz For my Front-End Needs?
&lt;/h2&gt;

&lt;p&gt;While I prefer Docz for curating frontend documentation, you might also try VuePress if you have adopted Vue framework. GitBook could be your go-to option if you want to switch to a paid option. Plus, here's a catch. Open-source teams can use GitBook for free. However, I prefer Docz because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It’s Gatsby Powered&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Easily customizable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blazingly fast&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on MDX&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript support&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It makes sure that your content includes all SEO requisites, making it more user-friendly and readable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#still-in-the-article"&gt;
  &lt;/a&gt;
  Still in the Article...
&lt;/h3&gt;

&lt;p&gt;Now we have a few easy steps still left out. &lt;br&gt;
They include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A guide on how to set up Docz&lt;/li&gt;
&lt;li&gt;What Points to Avoid While Writing Front-End Documentation? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the complete &lt;a href="https://aviyel.com/post/1178/the-do-s-and-don-ts-of-front-end-documentation"&gt;Article&lt;/a&gt; on Aviyel and also follow discussion to get all the required details.  &lt;/p&gt;

&lt;p&gt;☕ &lt;a href="https://www.buymeacoffee.com/lary"&gt;Help me Get a Cup of Tea&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi"&gt;LinkedIn&lt;/a&gt;  | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy Coding ❤&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>documentation</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Let's go CSRF-ing!</title>
      <author>Antonio Villagra De La Cruz</author>
      <pubDate>Wed, 13 Oct 2021 19:35:53 +0000</pubDate>
      <link>https://dev.to/antoniovdlc/lets-go-csrf-ing-j7c</link>
      <guid>https://dev.to/antoniovdlc/lets-go-csrf-ing-j7c</guid>
      <description>&lt;p&gt;Get your surfboard ready, we are heading to the sea ... and the less than relaxed and laid back world of CSRF (pronounced "sea surf") attacks! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-csrf"&gt;
  &lt;/a&gt;
  What is CSRF?
&lt;/h2&gt;

&lt;p&gt;Cross-Site Request Forgery (abbreviated as CSRF or XSRF) is an exploit which tricks a web application into sending a malicious request on behalf of an authenticated user. It is also known as one-click attack, session riding, hostile linking, or cross-site reference forgery. This allows an attacker to trick a web application into executing any actions of their choosing as if they were the authenticated user. &lt;/p&gt;

&lt;p&gt;Fundamentally, a CSRF attack relies on user's identity on a given web application and the web application's server's trust in that identity. As the attacker does not receive the response of the malicious request, only requests with side effect present a risk vector (for example: a request that transfers funds, changes passwords, ...).&lt;/p&gt;

&lt;p&gt;In order for a CSRF attack to be successful, an attacker needs to have knowledge of the APIs they are targeting to be able to craft a valid request. They also need to make use of social engineering to trick users to visit a web page in their control or open an email they sent, and in some cases, albeit not necessarily, interact with said page or email. The victims should also be logged into the specific service when the attack is performed. These conditions make such attacks somewhat complex, but in most severe cases (for example, targeting a user with administrative rights), CSRF attacks can potentially lead to the compromise of the entire web application.&lt;/p&gt;

&lt;p&gt;Some major CSRF attacks include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Netflix's website in 2006 (when Netflix was still renting DVDs!), which allowed attackers to order DVDs for a victim, change the shipping address, or fully compromise the account by changing the login credentials.&lt;/li&gt;
&lt;li&gt;ING Direct's online banking web application, which allowed attackers to transfer money from victims' accounts.&lt;/li&gt;
&lt;li&gt;YouTube's website in 2008, which allowed attackers to perform nearly all actions as a given user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any web application that accepts HTTP requests from an authenticated user and does not implement a verification mechanism to ensure that the request is unique to the user's session is potentially vulnerable. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-a-csrf-attack-work"&gt;
  &lt;/a&gt;
  How does a CSRF attack work?
&lt;/h2&gt;

&lt;p&gt;The vulnerability lies in the fact that a web application will trust any request sent by the user's browser as legitimate, even if the request was not meant to be sent by the user, but crafted by a malicious actor. From the server perspective though, the request looks totally valid and legitimate as if it was sent by the user themselves. This allows a malicious actor to basically impersonate a user. This particular attack works because authentication tokens are usually stored in cookies, and most browsers will send said cookies with each request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhqUzh55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3s0lzpq4pyqxjb41xgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhqUzh55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3s0lzpq4pyqxjb41xgb.png" alt="Diagram of a CSRF attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[1] Alice logs into her bank account online portal. This sets a session cookie (A) that will be automatically sent with every subsequent request Alice's browser makes to the bank web app.&lt;br&gt;
[2] Alice sends money to Bob. Attached with the request sent by her browser is the session cookie (A) previously generated. That allows the bank's backend to authenticate Alice and ensure the request is legitimate.&lt;br&gt;
[3] In the meantime, Mallory crafts a script that will send a similar request, but sending money to her account instead. See below for more details on how to craft such scripts.&lt;br&gt;
[4] Using social engineering, Mallory tricks Alice into visiting her website, which then tricks Alice's browser into sending Mallory's request to the bank's backend. &lt;br&gt;
[5] Because the request stemmed from Alice's browser, it has Alice's session cookie (A) attached to it. The bank application is then tricked into believing this request comes from Alice and is legitimate, hence transferring money to Mallory.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#urlbased-attack"&gt;
  &lt;/a&gt;
  URL-based attack
&lt;/h3&gt;

&lt;p&gt;The most basic form of CSRF attack is URL-based. An attacker crafts a GET request with the desired URL, and embeds said URL in an image, for example. That image can then be sent via email to the victim or hosted in a website owned by the attacker that the victim then visits.&lt;/p&gt;

&lt;p&gt;Let's say that there exists a banking web application built solely using GET requests, which stores session tokens in cookies, and that has no CSRF prevention method implemented. &lt;/p&gt;

&lt;p&gt;For Alice to send $100 to Bob, the app will make the following request:&lt;br&gt;
&lt;code&gt;GET https://some-random-bank.com/transfer?account=BOB&amp;amp;amout=100&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With that information in mind, Mallory can craft a valid request that would send her $1,000, namely:&lt;br&gt;
&lt;code&gt;GET https://some-random-bank.com/transfer?account=MAL&amp;amp;amount=1000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, for the social engineering part of the attack, Mallory embeds that URL into a zero-size image that she attaches to an email she sends Alice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://some-random-bank.com/transfer?account=MAL&amp;amp;amount=1000"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When opening the email, Alice won't see anything suspicious, but her browser will make that request, and if Alice is logged in her online banking web application, the transaction will be successful and Mallory will receive $1,000 from Alice!&lt;/p&gt;

&lt;p&gt;This works because the session cookies that authenticate Alice from the bank's application's perspective will be automatically attached to and sent with the malicious request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formbased-attack"&gt;
  &lt;/a&gt;
  Form-based attack
&lt;/h3&gt;

&lt;p&gt;Alright, so I guess we can agree that using GET requests to perform actions with side-effects is not ideal. Unfortunately, using POST requests won't save us!&lt;/p&gt;

&lt;p&gt;It might take Mallory a couple of lines of code more, but it is still possible (and quite trivial) to craft a POST request that can take advantage of a CSRF vulnerability.&lt;/p&gt;

&lt;p&gt;Let's keep our online banking application from the previous example, only this time, the request to make a transfer is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST https://some-random-bank.com/transfer

account=BOB&amp;amp;amount=100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Mallory cannot simply use a link or an image, but she can use a form, which she can embed in a web page she controls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://some-random-bank.com/transfer"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"account"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"MAL"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"amount"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1000"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Click here"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with the URL-based attacks, Alice doesn't even need to interact with the web page that includes the malicious form, as Mallory can automatically submit it when Alice visits her web page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;"document.forms[0].submit()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All cookies (including authentication ones) will again be sent with the request, and Mallory pockets yet again $1,000!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#xhrbased-attack"&gt;
  &lt;/a&gt;
  XHR-based attack
&lt;/h3&gt;

&lt;p&gt;OK, this is great, but what if we use a JSON API, and actually use other HTTP verbs such as PUT or DELETE? Well, still no luck!&lt;/p&gt;

&lt;p&gt;Let's keep using the same banking example. This time, the request to transfer money is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUT https://some-random-bank.com/transfer

{ "account": "BOB", "amount": 100 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In that case, Mallory will have to work a little bit harder, but it is still a handful of lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://some-random-bank.com/transfer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;account&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MAL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;"put()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately, this request will not execute in modern browsers thanks to same-origin policy restrictions, which is enabled by default. Careful though with allowing cross-origin requests, as that can allow attackers to bypass those restrictions. In particular, using the following CORS header will make the above CSRF attack possible:&lt;br&gt;
&lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-to-protect-a-web-app-from-csrf-attacks"&gt;
  &lt;/a&gt;
  How to protect a web app from CSRF attacks?
&lt;/h2&gt;

&lt;p&gt;Now that we have a better understanding of the risks of CSRF attacks, how do we protect a web application from such vulnerabilities?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#methods-that-do-not-work"&gt;
  &lt;/a&gt;
  Methods that do NOT work
&lt;/h3&gt;

&lt;p&gt;Let's first look at some methods that do not work in protecting a web application from CSRF attacks and why that is the case.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#secret-cookie"&gt;
  &lt;/a&gt;
  Secret Cookie
&lt;/h4&gt;

&lt;p&gt;One way one might think of preventing CSRF is by using a secret cookie to store the session token. Unfortunately, this method fails because all cookies, including secret cookies, are sent with every request.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#only-post-requests"&gt;
  &lt;/a&gt;
  Only POST Requests
&lt;/h4&gt;

&lt;p&gt;Some past CSRF vulnerabilities came from the fact that some web application were using GET request to perform side effects on the server. Besides being a poor practice, this made URL-based CSRF attacks trivial to implement. &lt;/p&gt;

&lt;p&gt;Hence, can the solution be only using POST requests? Unfortunately, as seen in the previous section, it is still possible to craft CSRF attacks using POST (or any other HTTP) requests.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#multistep-transactions"&gt;
  &lt;/a&gt;
  Multi-Step Transactions
&lt;/h4&gt;

&lt;p&gt;Maybe using multi-step transactions then? For example, we can require a first request to make a bank transfer, and a second to confirm? Unfortunately, this method also fails, as long as the attacker can predict the steps needed and craft malicious requests.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prevention-methods"&gt;
  &lt;/a&gt;
  Prevention methods
&lt;/h3&gt;

&lt;p&gt;Let's now look at some prevention techniques that do work in protecting a web application from CSRF attacks and why that is the case.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#synchroniser-token-pattern"&gt;
  &lt;/a&gt;
  Synchroniser Token Pattern
&lt;/h4&gt;

&lt;p&gt;One of the most common prevention methods is to generate a token on the server. A token can be generated per request or per session, the latter being slightly less secure but more convenient. The token is then sent with each request and validated before performing said request. The token is usually embedded in a hidden form field, or in a custom header. This means that a malicious CSRF request will not possess the token and will fail validation on the server, as only cookies are sent automatically, and the attacker has no way of accessing data on the web page.&lt;/p&gt;

&lt;p&gt;For example, the server-side rendered HTML for a form could look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/transfer"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CSRFToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"BfbhY4e/7Qa7iWUMV09r5lm0mAdXnDHGBdYfgHCMnKf8yuxVcULDdEYSDYotrpmoo2NKGzuDyHjzD74QUyfq5g=="&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Taking another look at our previous example with Alice and Mallory, by implementing this method, Alice's request to transfer money to Bob will contain the CSRF token, whereas Mallory has no way of guessing its value (even if she knows that she must also send a token), hence her malicious request won't be valid from the server's perspective.&lt;/p&gt;

&lt;p&gt;This method is what most popular web frameworks implement.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#double-submit-cookie"&gt;
  &lt;/a&gt;
  Double Submit Cookie
&lt;/h4&gt;

&lt;p&gt;If maintaining state on the server side is an issue, we can use the double submit cookie technique. The idea here is to send a random value both in a cookie and as part of the request (in a parameter or a header). If both values match, the server accepts the request as legitimate and proceeds.&lt;/p&gt;

&lt;p&gt;This method works because the attacker doesn't have access to the value of the token stored in the cookie. Thus, when crafting the malicious request, they cannot include the same value as part of the request. The value in the cookie will automatically be sent to the server, but the validation will fail.&lt;/p&gt;

&lt;p&gt;As subdomains can write cookies to the parent domain over HTTP, this technique only works if all subdomains are properly secured and only accept HTTPS. It is also possible to secure the cookie by using the &lt;code&gt;__Host-&lt;/code&gt; cookie prefix. Another way to enhance the security of this method is to use an encrypted cookie to store the token.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#samesite-cookie-attribute"&gt;
  &lt;/a&gt;
  SameSite Cookie Attribute
&lt;/h4&gt;

&lt;p&gt;The SameSite cookie attribute aims to mitigate CSRF vulnerabilities by providing a hint to browsers if they should submit cookies with cross-origin requests.&lt;/p&gt;

&lt;p&gt;Possible values are &lt;code&gt;Strict&lt;/code&gt;, &lt;code&gt;Lax&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Strict&lt;/code&gt; prevents any cross-origin request to carry cookies. This means for example, that if you follow a link to a service where you are authenticated, the page that will be displayed won't be able to authenticate you, as no cookies will be submitted. This might not always be the intended user experience.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Lax&lt;/code&gt;, which is the default in some modern browsers, provides a better user experience while still ensuring that only top level navigation and safe HTTP method request are submitted with cookies.&lt;/p&gt;

&lt;p&gt;This method is unfortunately not sufficient to fully protect users from CSRF attacks, and should instead be used in conjunction with previous methods.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#origin-headers"&gt;
  &lt;/a&gt;
  Origin Headers
&lt;/h4&gt;

&lt;p&gt;This method relies on examining HTTP request header values, in particular to find out the source origin (where is the request coming from) and the target origin (where is the request going to). If both values match, the server proceeds with the request as legitimate.&lt;/p&gt;

&lt;p&gt;The reliability of the value in those headers come from the fact that they can only be set by the browser as they are in the forbidden headers list, meaning that they cannot be set programmatically.&lt;/p&gt;

&lt;p&gt;The drawback of this method is that it can be difficult to accurately retrieve the values for source origin and target origin.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#custom-request-headers"&gt;
  &lt;/a&gt;
  Custom Request Headers
&lt;/h4&gt;

&lt;p&gt;An alternate method that works for AJAX or API endpoints is to set a custom request header, with the presence of this header being validated on the server. This method relies on same-origin policy to ensure that only JavaScript from the legitimate domain can set those headers. &lt;/p&gt;

&lt;p&gt;This is a particularly attractive method for REST services, as it doesn't require the server to maintain any state. Unfortunately, this method doesn't cover vulnerabilities on &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;s. &lt;/p&gt;

&lt;p&gt;The security of this method also depends on having robust CORS settings (as cross-origin requests with custom headers are pre-flighted and might expose the list of custom headers).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#user-interaction-defense"&gt;
  &lt;/a&gt;
  User Interaction Defense
&lt;/h4&gt;

&lt;p&gt;Finally, we can also fend off CSRF attacks by altering the user interaction flow of certain actions. For example, we can ask the user to re-enter their password to confirm certain actions (like transferring funds). &lt;/p&gt;

&lt;p&gt;This will impact the user experience though, so it might not make sense to solely rely on this technique to secure an entire web application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-implementations-in-popular-web-frameworks"&gt;
  &lt;/a&gt;
  Some implementations in popular web frameworks
&lt;/h3&gt;

&lt;p&gt;As CSRF vulnerabilities basically exist in any web application with authentication, most web frameworks implement some sort of protection against them. Let's look at a few examples:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#django"&gt;
  &lt;/a&gt;
  Django
&lt;/h4&gt;

&lt;p&gt;Django implements a middleware and template tag to mitigate CSRF attacks. Note that "login CSRF" attacks are also covered. The CSRF middleware is activated by default.&lt;/p&gt;

&lt;p&gt;For server-rendered markup, we can add the CSRF token in any form like follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{% csrf_token %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For AJAX requests, a custom &lt;code&gt;X-CSRFToken&lt;/code&gt; header needs to be appended to the requests. The value of the token can either be retrieved from a &lt;code&gt;csrfToken&lt;/code&gt; cookie, or directly from the server-rendered markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% csrf_token %}
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;csrftoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[name=csrfmiddlewaretoken]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more details, including how to handle some edge cases, feel free to check the official documentation: &lt;a href="https://docs.djangoproject.com/en/3.2/ref/csrf/"&gt;https://docs.djangoproject.com/en/3.2/ref/csrf/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h4&gt;

&lt;p&gt;Laravel automatically generates CSRF tokens for each user session. It also uses a middleware by default to check the validate of said tokens.&lt;/p&gt;

&lt;p&gt;The token can be accessed on the server via the following methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/token'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;token&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// or&lt;/span&gt;
    &lt;span class="nv"&gt;$token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;csrf_token&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For server-rendered markup, the following code allows to embed the token in forms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/profile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    @csrf
    &lt;span class="c"&gt;&amp;lt;!-- Equivalent to... --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_token"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrf_token() }}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For AJAX request, the token can be retrieved from a meta tag and sent as a custom &lt;code&gt;X-CSRF-TOKEN&lt;/code&gt; header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"csrf-token"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrf_token() }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajaxSetup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-CSRF-TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta[name="csrf-token"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the token is also set in a secure cookie &lt;code&gt;XSRF-TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details, including how to handle some edge cases, feel free to check the official documentation: &lt;a href="https://laravel.com/docs/8.x/csrf"&gt;https://laravel.com/docs/8.x/csrf&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#express"&gt;
  &lt;/a&gt;
  Express
&lt;/h4&gt;

&lt;p&gt;Express doesn't implement mitigation for CSRF attacks by default, but provides an npm package: &lt;code&gt;csurf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That package can be used to implement either the synchroniser token pattern (which requires a session middleware such as &lt;code&gt;express-session&lt;/code&gt;), or the double submit cookie method (which requires the &lt;code&gt;cookie-parser&lt;/code&gt; middleware).&lt;/p&gt;

&lt;p&gt;The value of the token can be retrieved via the &lt;code&gt;req&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For server-rendered markup, the following code can be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookieParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;csrf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;csurf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// setup route middlewares&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;csrfProtection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parseForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// create express app&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// parse cookies&lt;/span&gt;
&lt;span class="c1"&gt;// we need this because "cookie" is true in csrfProtection&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookieParser&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;csrfProtection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// pass the csrfToken to the view&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;send&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parseForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;csrfProtection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data is being processed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/process"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_csrf"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrfToken }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  Favorite color: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"favoriteColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For AJAX request, the token can be retrieved from a meta tag and sent as a custom &lt;code&gt;CSRF-Token&lt;/code&gt; header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"csrf-token"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrfToken }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Read the CSRF token from the &amp;lt;meta&amp;gt; tag&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta[name="csrf-token"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Make a request using the Fetch API&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;same-origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- includes cookies in the request&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CSRF-Token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- is the csrf token as a header&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;favoriteColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, in some cases it might also be possible to send the token via a cookie, most notably for single-page applications:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XSRF-TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more details, including how to handle some edge cases, feel free to check the official documentation: &lt;a href="http://expressjs.com/en/resources/middleware/csurf.html"&gt;http://expressjs.com/en/resources/middleware/csurf.html&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#spring"&gt;
  &lt;/a&gt;
  Spring
&lt;/h4&gt;

&lt;p&gt;Spring provides CSRF mitigation by default since Spring Security 4.0.&lt;/p&gt;

&lt;p&gt;For server-rendered markup, the following example shows how to embed a CSRF token to a form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsp"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;c:url &lt;/span&gt;&lt;span class="na"&gt;var=&lt;/span&gt;&lt;span class="s"&gt;"logoutUrl"&lt;/span&gt;&lt;span class="na"&gt; value=&lt;/span&gt;&lt;span class="s"&gt;"/logout"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"${logoutUrl}"&lt;/span&gt;
    &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;
    &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Log out"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt;
    &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"${_csrf.parameterName}"&lt;/span&gt;
    &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"${_csrf.token}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For AJAX requests, the token can be embedded in a meta tag and retrieved via JavaScript on the client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsp"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_csrf"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"${_csrf.token}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- default header name is X-CSRF-TOKEN --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_csrf_header"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"${_csrf.headerName}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meta[name='_csrf']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meta[name='_csrf_header']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ajaxSend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to persist the CSRF token in a cookie, by default &lt;code&gt;XSRF-TOKEN&lt;/code&gt;, and expect the value back in a custom &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;For more details, including how to handle some edge cases, feel free to check the official documentation: &lt;a href="https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html"&gt;https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#login-csrf"&gt;
  &lt;/a&gt;
  Login CSRF
&lt;/h2&gt;

&lt;p&gt;A related type of attack that we haven't discussed at all so far is login CSRF. This attack is somewhat similar to the previous we have discussed, but targets login forms, making the impact and risk different. &lt;/p&gt;

&lt;p&gt;Login CSRF can be mitigated by creating pre-sessions and embedding the token in the login form, or using any of the techniques previously discussed.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery"&gt;https://en.wikipedia.org/wiki/Cross-site_request_forgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/csrf"&gt;https://owasp.org/www-community/attacks/csrf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-project-code-review-guide/reviewing-code-for-csrf-issues"&gt;https://owasp.org/www-project-code-review-guide/reviewing-code-for-csrf-issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"&gt;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seclab.stanford.edu/websec/csrf/csrf.pdf"&gt;https://seclab.stanford.edu/websec/csrf/csrf.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2018/01/protect-your-node-js-app-from-cross-site-request-forgery.html"&gt;https://www.twilio.com/blog/2018/01/protect-your-node-js-app-from-cross-site-request-forgery.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/20504846/why-is-it-common-to-put-csrf-prevention-tokens-in-cookies"&gt;https://stackoverflow.com/questions/20504846/why-is-it-common-to-put-csrf-prevention-tokens-in-cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5207160/what-is-a-csrf-token-what-is-its-importance-and-how-does-it-work"&gt;https://stackoverflow.com/questions/5207160/what-is-a-csrf-token-what-is-its-importance-and-how-does-it-work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>security</category>
      <category>csrf</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Mi experiencia participando de un Hackathon</title>
      <author>Ali Sequeira</author>
      <pubDate>Wed, 13 Oct 2021 19:27:24 +0000</pubDate>
      <link>https://dev.to/alisequeira_dev/mi-experiencia-participando-de-un-hackathon-2dkp</link>
      <guid>https://dev.to/alisequeira_dev/mi-experiencia-participando-de-un-hackathon-2dkp</guid>
      <description>&lt;p&gt;Empecemos aclarando dudas. Qué es un hackathon? Bueno un hackathon es una competencia donde equipos de software toman una idea y la convierten en una aplicación funcional para el final del evento que por lo general dura entre 24 y 30 horas seguidas.&lt;/p&gt;

&lt;p&gt;Mi equipo perdio. No voy a mentir, nos sentimos frustrados, el esfuerzo y el desvelo pensamos que al final del día darian resultados satisfactorios pero no fue asi, antes de recoger cables como decimos aca, quiero reflexionar sobre lo aprendido de este evento tanto como lo bueno y lo malo que ha dejado mi participación en este evento (talvez regresemos proximo año 😉)&lt;/p&gt;

&lt;p&gt;Ire marcando puntos que considero que serian de ayuda para personas o grupos de amigos que estan interesados en participar de un evento como este.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-una-idea"&gt;
  &lt;/a&gt;
  Define una idea:
&lt;/h3&gt;

&lt;p&gt;Esto podemos considerarlo el paso mas sencillo de todo y lo es! para participar en un hackathon no tienes que llegar con la idea mas extraña de todas o la que resuelva un problema que no existe puedes construir un e-commerce, un videojuego, etc. En nuestro caso mi equipo y yo desarrollamos una aplicacion web donde usuarios pueden crear blogs enfocados a la enseñanza del idioma ingles y compartirlos con los usuarios de la aplicacion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prepararse-es-importante"&gt;
  &lt;/a&gt;
  Prepararse es importante:
&lt;/h3&gt;

&lt;p&gt;Si bien el proposito del hackathon es crear algo desde 0 hasta que sea funcional, eso no quiere decir que no debas prepararte antes, me resulto de mucha ayuda la investigacion los días previos a la competencia, como que stack utilizar, que API’s son las mas adecuadas, que tecnologias me resultaban mejor. Hacer eso me aterrizo todas las ideas en mi cabeza, asi el dia de la competencia tenia una ruta clara que seguir. Nuestro proyecto fue construido usando Javascript, NEXT.JS fue el framework elegido por la rapidez en la que puedo crear aplicaciones web.&lt;/p&gt;

&lt;p&gt;Una vez mencionado el deber de organizarte con tus herramientas de trabajo ahora toca organizar a tus compañeros. El estres es algo con el que tendran que lidiar, si no estas preparado para eso desfortunadamente puede que termines con una pelea. Afortunadamete el equipo no termino en pelea...algo asi jajajaja las discuciones si ocurririeron, en un hackathon debes de esperar lo improbables. Puedes pensar que te has organizado con tu equipo y luego llegas al evento y te das cuenta que no fue asi o almenos no fue lo que esperabas, ya lo dijo el boxeador Mike Tyson “ Todos tienen un plan, hasta que te golpean en la cara” En nuestro caso el tiempo fue un factor que nos jugo en contra, almenos en las primeras horas de iniciar el evento. El tiempo pasa volando. Manejar los tiempos fue algo que nos costo conseguir pero terminamos lograndolo uno que otro regaño pero nada que no se resolviera con una disculpa 😅, la buena comunicacion fue un factor muy positivo en nuestro equipo haciendo trabajo mas agil como tambien para resolver conflictos entre nosotros. Rodearte de las personas correctas siempre sera una gran ventaja en todo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preparate-para-no-dormir"&gt;
  &lt;/a&gt;
  Preparate para no dormir:
&lt;/h3&gt;

&lt;p&gt;Mencione que esto es una competencia de 24 horas? dormir? que es eso? okay fuera de broma si te recomiendo tomar descansos, una siesta puede ayudar a manejar el estres y el mal humor, PERO QUIEN PUEDE DORMIR CUANDO TIENES QUE TERMINAR UN PROYECTO EN 24 HORAS! tomalo con calma, recuerda que la organizacion es la clave, un descanso no hara daño, ojala hubiese aplicado ese consejo. el desvelo fue mi gran enemigo la mañana siguiente cuando debes asegurarte que todo este de maravillas, y como es costumbre algo tiene que fallar. como? tu base de datos no conecta? tu proyecto no compila? te quedan solo 3 horas? PANIC! la proxima vez me asegurare de tomar un descanso.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#esta-bien-si-no-ganas"&gt;
  &lt;/a&gt;
  Esta bien si no ganas:
&lt;/h3&gt;

&lt;p&gt;Okay llego el momento, se ha acabado tu tiempo y es momento de presentar tu proyecto a los jueces y esperar a que tomen su decision, muchas cosas pasan por tu mente en ese momento. Llega la decision y tu equipo no gano. Demonios! ahora que haces? tu merecias ganar no es asi? bueno no siempre es asi. Todos queremos ganar y todos pensamos ser merecedores del premio, mas alla de eso no todo es malo. siempre tendras algo bueno por delante, algo nuevo aprendido, nuevos amigos, nuevas experiencias. Sin duda alguna dejando de lado el no ganar mi expereciencia en el hackathon nicaragua 2021 fue muy agradable. Descubri cosas sobre mi mismo que no sabia que podia. Fui capaz de de crear una aplicacion funcional (casi) en 24 horas. Tuve la oportunidad de fungir como lider con mis compañeros en momentos de mucho estres obviamente no solo, todos pusimos algo de nosotros para mantener este barco a flote. Al final me quedan los buenos recuerdos vividos en este evento. &lt;/p&gt;

&lt;p&gt;Esa sensación de haber terminado un proyecto y estar orgulloso de el, orgulloso del trabajo de cada uno de tus compañeros, son emociones invaluables. Definitivamente pienso que no sera la ultima vez que participe de estos eventos. Espero hacerlo mejor la proxima vez y cerrar con un premio. Definitivamente recomendaria a todos a participar alguna vez en su vida de un evento como estos. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>webde</category>
    </item>
  </channel>
</rss>
