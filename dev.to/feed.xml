<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Announcing Create Medusa App: One command for a full-stack headless e-commerce setup</title>
      <author>Vadim Smirnov</author>
      <pubDate>Wed, 15 Sep 2021 11:28:24 +0000</pubDate>
      <link>https://dev.to/medusajs/announcing-create-medusa-app-one-command-for-a-full-stack-headless-e-commerce-setup-28mo</link>
      <guid>https://dev.to/medusajs/announcing-create-medusa-app-one-command-for-a-full-stack-headless-e-commerce-setup-28mo</guid>
      <description>&lt;p&gt;With the new &lt;code&gt;create-medusa-app&lt;/code&gt; tool you will get your Medusa development environment ready within a couple of minutes. After completion, you will have a Medusa backend, a Gatsby or Next.js storefront, and an admin dashboard up and running on your local machine.&lt;/p&gt;

&lt;p&gt;Starting a new e-commerce project just got easier, now with one command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-raw-createmedusaapp-endraw-"&gt;
  &lt;/a&gt;
  Getting started with &lt;code&gt;create-medusa-app&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;create-medusa-app&lt;/code&gt; with your preferred package manager:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create medusa-app

npx create-medusa-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Behind the scenes, &lt;code&gt;create-medusa-app&lt;/code&gt; is populating your database with some initial set of mock data, which helps to interact with Medusa setup intuitively straight away. &lt;/p&gt;

&lt;p&gt;Right after hitting one of those commands, the multistep installation process will be initiated, so the starter can be shaped right for the specific needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#destination-folder"&gt;
  &lt;/a&gt;
  Destination folder
&lt;/h3&gt;

&lt;p&gt;Enter the path to the directory that will become the root of your Medusa project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Where should your project be installed? ‚Ä∫ my-medusa-store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pick-the-starter-you-prefer"&gt;
  &lt;/a&gt;
  Pick the starter you prefer
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Which Medusa starter would you like to &lt;span class="nb"&gt;install&lt;/span&gt;? ‚Ä¶
‚ùØ medusa-starter-default
  medusa-starter-contentful
  Other
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be presented with three options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;medusa-starter-default&lt;/code&gt; is the most lightweight version of a Medusa project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;medusa-starter-contentful&lt;/code&gt; almost like the default starter, but with &lt;code&gt;medusa-plugin-contentful&lt;/code&gt; preinstalled&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Other&lt;/code&gt; if you have a different starter that you would wish to install from &lt;code&gt;Other&lt;/code&gt; will give you the option of providing a URL to that starter. An additional question will be asked if you choose this option:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Where is the starter located? &lt;span class="o"&gt;(&lt;/span&gt;URL or path&lt;span class="o"&gt;)&lt;/span&gt; ‚Ä∫ https://github.com/somecoolusername/my-custom-medusa-starter
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the walkthrough purposes, we assume that the selected starter is &lt;code&gt;medusa-starter-default&lt;/code&gt; and proceed to the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selecting-a-storefront"&gt;
  &lt;/a&gt;
  Selecting a Storefront
&lt;/h3&gt;

&lt;p&gt;After selecting your Medusa starter you will be given the option to install one of our storefront starters. At the moment we have starters for Gatsby and Next.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Which storefront starter would you like to &lt;span class="nb"&gt;install&lt;/span&gt;? ‚Ä¶
‚ùØ Gatsby Starter
  Next.js Starter
  None
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may also select &lt;code&gt;None&lt;/code&gt; if the choice is to craft a custom storefront for your product. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;create-medusa-app&lt;/code&gt; now has all of the info necessary for the installation to begin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Creating new project from git: https://github.com/medusajs/medusa-starter-default.git
‚úî Created starter directory layout
Installing packages...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the installation has been completed you will have a Medusa backend, a demo storefront, and an admin dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-inside"&gt;
  &lt;/a&gt;
  What's inside
&lt;/h2&gt;

&lt;p&gt;Inside the root folder which was specified at the beginning of the installation process the following structure could be found:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/my-medusa-store
  /storefront // Medusa storefront starter
  /backend // Medusa starter as a backend option 
  /admin // Medusa admin panel 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;create-medusa-app&lt;/code&gt; prints out the commands that are available to you after installation. When each project is started you can visit your storefront, complete the order, and view the order in Medusa admin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚†¥ Installing packages...
‚úî Packages installed
Initialising git &lt;span class="k"&gt;in &lt;/span&gt;my-medusa-store/admin
Create initial git commit &lt;span class="k"&gt;in &lt;/span&gt;my-medusa-store/admin

  Your project is ready üöÄ. The available commands are:

    Medusa API
    &lt;span class="nb"&gt;cd &lt;/span&gt;my-medusa-store/backend
    yarn start

    Admin
    &lt;span class="nb"&gt;cd &lt;/span&gt;my-medusa-store/admin
    yarn start

    Storefront
    &lt;span class="nb"&gt;cd &lt;/span&gt;my-medusa-store/storefront
    yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What's next?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To learn more about Medusa to go through our docs to get some inspiration and guidance for the next steps and further development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.medusa-commerce.com/how-to/headless-ecommerce-store-with-gatsby-contentful-medusa"&gt;Find out how to set up a Medusa project with Gatsby and Contentful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.medusa-commerce.com/tutorial/adding-custom-functionality"&gt;Move your Medusa setup to the next level with some custom functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.medusa-commerce.com/how-to/plugins"&gt;Create your own Medusa plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>jamstack</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Command line API tricks with HTTPie</title>
      <author>Jakub Roztocil</author>
      <pubDate>Wed, 15 Sep 2021 11:16:31 +0000</pubDate>
      <link>https://dev.to/pie/command-line-api-tricks-with-httpie-20lk</link>
      <guid>https://dev.to/pie/command-line-api-tricks-with-httpie-20lk</guid>
      <description>&lt;p&gt;Whether building or consuming APIs, you're definitely testing out API calls. The command line is a developer's best friend for quick checks and iterative development. You can move even faster with &lt;a href="https://httpie.io/"&gt;HTTPie&lt;/a&gt;. HTTPie releases unintuitive command flags from your brain and removes repetitive parameters completely.&lt;/p&gt;

&lt;p&gt;This post will give some quick examples to make the most of your command line API development. Use these tips and tricks to ease your API headaches and bring some fun into your workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-json-a-firstclass-citizen"&gt;
  &lt;/a&gt;
  Make JSON a first-class citizen
&lt;/h2&gt;

&lt;p&gt;For at least a decade, JSON has been the de facto standard response format for HTTP APIs. Strangely, a lot of tools give equal weight to other formats. HTTPie comes with sensible defaults, which assume data is expressed in JSON.&lt;/p&gt;

&lt;p&gt;After the &lt;a href="https://httpie.io/docs#installation"&gt;fast and easy installation&lt;/a&gt; you can retrieve JSON responses with a simple command line call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http api.open-notify.org/astros.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run this command you‚Äôll get a list of the people currently in space, thanks to &lt;a href="http://open-notify.org/"&gt;Open Notify&lt;/a&gt;. By default, HTTPie makes your API responses readable. The results of this call are displayed in syntax-highlighted JSON. And no need to pipe to another formatting tool or ask the server to pretty print the results.&lt;/p&gt;

&lt;p&gt;Whether request or response data, HTTPie always looks for JSON first, unless told otherwise. That means that &lt;code&gt;Content-type&lt;/code&gt; and &lt;code&gt;Accept&lt;/code&gt; headers are set to &lt;code&gt;application/json&lt;/code&gt;. It will even attempt to find JSON within &lt;code&gt;text/plain&lt;/code&gt; or unknown content types.&lt;/p&gt;

&lt;p&gt;As much as developers love JSON, we don‚Äôt always enjoy writing it, especially on the command line. Use flexible command line parameters to construct your JSON without curly brackets, quotes, and a lifetime supply of backslashes.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a sample call to send some basic JSON, without any of the obtrusive syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http POST pie.dev/post &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Jason year:&lt;span class="o"&gt;=&lt;/span&gt;2001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you fire off that command, HTTPie interprets the &lt;code&gt;field=value&lt;/code&gt; pair as a string and &lt;code&gt;field:=value&lt;/code&gt; as a literal (in this case, a number). All of these parameter pairs turn into the JSON data POSTed to the URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jason"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"year"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2001&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more complex data, you can include external JSON or text files. But you can stop struggling with JSON syntax, escaped quotes, and the like, just to express simple request data. There‚Äôs a natural progression of complexity, allowing HTTPie to handle one advanced field (say, an array) while maintaining a simple command line syntax. Refer to the &lt;a href="https://httpie.io/docs#non-string-json-fields"&gt;JSON fields documentation&lt;/a&gt; for guidance on these approachable details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-natural-apinative-commands"&gt;
  &lt;/a&gt;
  Use natural API-native commands
&lt;/h2&gt;

&lt;p&gt;Nothing against the other command line request tools, but they weren‚Äôt built for APIs. Some of these CLI relics have been around almost as long as the Web itself. In an effort to support every protocol, data format, and usage pattern, they can make it difficult to accomplish the everyday tasks of API developers. HTTPie was built alongside modern API development to be a natural extension of your work.&lt;/p&gt;

&lt;p&gt;JSON as a first-class citizen is certainly an API-native choice. In addition, HTTPie pays homage to the primary protocol used to access APIs‚ÄîHTTP. The &lt;a href="https://httpie.io/docs#interface-design"&gt;interface design&lt;/a&gt; of many HTTPie commands mimic the underlying HTTP requests.&lt;/p&gt;

&lt;p&gt;For example, this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http POST pie.dev/post &lt;span class="se"&gt;\&lt;/span&gt;
    X-API-Key:123 &lt;span class="se"&gt;\&lt;/span&gt;
    User-Agent:Bacon/1.0 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Jason year:&lt;span class="o"&gt;=&lt;/span&gt;2001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will be sent via HTTP as the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="nf"&gt;POST&lt;/span&gt; &lt;span class="nn"&gt;/post&lt;/span&gt; &lt;span class="k"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pie.dev&lt;/span&gt;
&lt;span class="na"&gt;X-API-Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;123&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Bacon/1.0&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jason"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"year"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2001&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Request headers are communicated almost identically, without the need for special command flags. This simplicity is made possible by a &lt;a href="https://httpie.io/docs#request-items"&gt;minimal DSL for request items&lt;/a&gt; that flows naturally. The &lt;code&gt;:&lt;/code&gt; for headers comes from HTTP, as does &lt;code&gt;=&lt;/code&gt; for data. In fact, the power of the syntax is clear with a simple tweak to a commend: add a &lt;code&gt;-f&lt;/code&gt; flag and the exact same data fields will be sent form-encoded:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="nf"&gt;POST&lt;/span&gt; &lt;span class="nn"&gt;/post&lt;/span&gt; &lt;span class="k"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pie.dev&lt;/span&gt;
&lt;span class="na"&gt;X-API-Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;123&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Bacon/1.0&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application/x-www-form-urlencoded&lt;/span&gt;

name=Jason&amp;amp;year=2001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to see how these HTTP calls look without making live calls, you can &lt;a href="https://httpie.io/docs#offline-mode"&gt;enter &lt;code&gt;--offline&lt;/code&gt; mode&lt;/a&gt;. Rather than send a request to the host, HTTPie prints it to stdout.&lt;/p&gt;

&lt;p&gt;Offline mode is a great way to see some of the other implicit choices HTTPie makes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST is sent automatically when request data is present&lt;/li&gt;
&lt;li&gt;You can remove &lt;code&gt;http://&lt;/code&gt; and &lt;code&gt;https://&lt;/code&gt; from your &lt;a href="https://httpie.io/docs#request-url"&gt;request URLs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Or simply use &lt;code&gt;:&lt;/code&gt; to &lt;a href="https://httpie.io/docs#url-shortcuts-for-localhost"&gt;send requests to localhost&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The natural syntax keeps your head in your API development and your eyes out of man pages. That lets you focus on the bigger issues, like getting API authentication to work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-repeat-your-authentication"&gt;
  &lt;/a&gt;
  Don‚Äôt repeat your authentication
&lt;/h2&gt;

&lt;p&gt;You may be familiar with the DRY principle in software development. Meant to reduce repetition, DRY stands for Don‚Äôt Repeat Yourself. Typical code-level approaches include modularization and similar abstractions. By contrast, each API request stands on its own. Every time you make an API request you must include any authentication credentials, even if you sent them in a previous request. For example, if your API requests are to a cloud storage service, every request that accesses your account needs your credentials for that service. This is repetitive and inconvenient.&lt;/p&gt;

&lt;p&gt;As an API client, HTTPie must abide by the API server‚Äôs rules. While the server must receive credentials fresh each time, HTTPie can store them to send on your behalf.&lt;/p&gt;

&lt;p&gt;Use the &lt;a href="https://httpie.io/docs#sessions"&gt;session functionality&lt;/a&gt;, so you don‚Äôt repeat your authentication. Session functionality is convenient when you pass API tokens in headers or as part of a request URL. In either case, these get in the way of the rest of your API call.&lt;/p&gt;

&lt;p&gt;When you make your first call, include the authentication, headers, and whatever else you want to send with every call. Then use the &lt;code&gt;--session&lt;/code&gt; flag to give the session a name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http &lt;span class="nt"&gt;--session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev &lt;span class="nt"&gt;-a&lt;/span&gt; :APIKEY pie.dev/get X-Random-Header:Included
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we‚Äôve included an API key via &lt;a href="https://httpie.io/docs#basic-auth"&gt;Basic Auth&lt;/a&gt; and a custom header. We also created a session named ‚Äúdev.‚Äù Subsequent calls will only need to include the session flag to pass the authentication and header from the previous request.&lt;/p&gt;

&lt;p&gt;This command has the same results as the more verbose command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http &lt;span class="nt"&gt;--session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev pie.dev/get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The API key authentication was attached to the HTTP call, even though we did not explicitly include it in the command. Similarly, the &lt;code&gt;X-Random-Header&lt;/code&gt; that took up so much space is sent without being explicitly present.&lt;/p&gt;

&lt;p&gt;Sessions make for much cleaner commands, especially when you start sending query parameters or request data. Once you have the session flag in place, you &lt;em&gt;don‚Äôt repeat yourself&lt;/em&gt;. And you can be done with the copy-pasting or tedious command line editing that so often accompanies API tinkering.&lt;/p&gt;

&lt;p&gt;An alternative to named sessions is to store session details within local files. You can share these session files amongst your team, so you always get the same results. Then &lt;a href="https://httpie.io/docs#anonymous-sessions"&gt;call them up by file path&lt;/a&gt;, or use the trick in the next section‚Äîinclude them in your default configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-your-own-defaults"&gt;
  &lt;/a&gt;
  Create your own defaults
&lt;/h2&gt;

&lt;p&gt;It can be an adventure to watch someone develop on their own machine. You‚Äôll notice seemingly random key combinations produce extraordinary results (but pure chaos when a Vim user mistakenly thinks they're in insert mode). These sorts of customizations can help you get the most out of any dev tool. You‚Äôll appreciate the custom defaults you can add to HTTPie to make it your own.&lt;/p&gt;

&lt;p&gt;The latest &lt;a href="https://httpie.io/docs#config"&gt;configuration file options and location&lt;/a&gt; are in the HTTPie docs.&lt;/p&gt;

&lt;p&gt;For example, you can reference a specific session file, so credentials from the previous section are automatically sent with each request. To do this, you include the &lt;code&gt;session&lt;/code&gt; flag by default with every command. Your config file will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"--session=~/.config/httpie/sessions/current.json"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to reference a specific session file for a specific host, you can do so by providing a file name instead of a file path. A unique session file will then be created for each host, which you can then modify.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"--session=default"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever you need to overwrite the defaults, include another &lt;code&gt;session&lt;/code&gt; flag explicitly or use a &lt;code&gt;--no-session&lt;/code&gt; flag to remove any session data.&lt;/p&gt;

&lt;p&gt;Your config defaults can include any flag options as an array, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"--session=~/.config/httpie/sessions/current.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"--body"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"--style=colorful"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"--format-options=json.indent:2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we have the session flag as before, but we also have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;included &lt;code&gt;--body&lt;/code&gt; to display only the response body (no headers);&lt;/li&gt;
&lt;li&gt;set the syntax highlighting &lt;code&gt;--style&lt;/code&gt; to a defined color scheme;&lt;/li&gt;
&lt;li&gt;used &lt;code&gt;--format-options&lt;/code&gt; to set indentation equal to two spaces;&lt;/li&gt;
&lt;li&gt;and instructed HTTPie to &lt;code&gt;--follow&lt;/code&gt; redirects to a new location.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using defaults, all of these flags will be included every time you use the &lt;code&gt;http&lt;/code&gt; command, unless you specifically override them.&lt;/p&gt;

&lt;p&gt;You can find a categorized list of command flags, which include options for downloading data, using SSL, and employing proxies, with the following HTTPie call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within the list, you‚Äôll find a balance of intuitive defaults with the flexibility to make it your own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-fewer-api-headaches"&gt;
  &lt;/a&gt;
  Get fewer API headaches
&lt;/h2&gt;

&lt;p&gt;HTTPie started in 2012 to eliminate our own pain when building and calling APIs. Thousands of developers add it to their command line and use it to perform effortless requests with beautiful responses.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://httpie.io/"&gt;Learn more about HTTPie&lt;/a&gt; and follow us for more tips, news, and API tricks.&lt;/p&gt;




&lt;p&gt;Written by &lt;a href="https://twitter.com/adamd"&gt;Adam DuVander&lt;/a&gt; and originally published on &lt;a href="https://httpie.io/blog/cli-api-tricks"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What‚Äôs new in HTTPie 2.5.0</title>
      <author>Jakub Roztocil</author>
      <pubDate>Wed, 15 Sep 2021 11:04:04 +0000</pubDate>
      <link>https://dev.to/pie/what-s-new-in-httpie-2-5-0-b99</link>
      <guid>https://dev.to/pie/what-s-new-in-httpie-2-5-0-b99</guid>
      <description>&lt;p&gt;We‚Äôre excited to introduce a new way of passing raw request data as an alternative to piping, XML pretty printing, and improved packaging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#raw-request-data"&gt;
  &lt;/a&gt;
  Raw request data
&lt;/h2&gt;

&lt;p&gt;HTTPie has always used piping as the way to pass &lt;a href="https://dev.to/docs#raw-request-body"&gt;raw request data&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Standard way to pass raw request body:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello, World!'&lt;/span&gt; | http pie.dev/post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Piping, even though elegant, isn‚Äôt always practical, however. When generating API docs examples, invoking HTTPie from a programming language, or writing a complex command on the terminal, it may be easier to use a CLI option instead. That has been an often &lt;a href="https://github.com/httpie/httpie/issues/534"&gt;requested&lt;/a&gt; feature.&lt;/p&gt;

&lt;p&gt;In this release, we‚Äôve added a new option called &lt;code&gt;--raw&lt;/code&gt;, and HTTPie treats its value as if it came through &lt;code&gt;STDIN&lt;/code&gt;. The following command does the same as the one above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# New in HTTPie 2.5.0:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;http &lt;span class="nt"&gt;--raw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Hello, World!'&lt;/span&gt; pie.dev/post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pretty-printing-of-xml"&gt;
  &lt;/a&gt;
  Pretty printing of XML
&lt;/h2&gt;

&lt;p&gt;JSON has been the &lt;em&gt;lingua franca&lt;/em&gt; of the API world for a while, and HTTPie has always provided &lt;a href="https://dev.to/docs#terminal-output"&gt;JSON formatting&lt;/a&gt; for terminal output. Many of our users work with XML as well, though, but XML bodies would be printed as they appear in the HTTP message, often on a single line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- comment --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;root&amp;gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;text&lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&amp;lt;element&amp;gt;&lt;/span&gt;text&lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;tail&lt;span class="nt"&gt;&amp;lt;empty-element/&amp;gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This release brings formatting to XML (and XHTML) messages as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- comment --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;text&lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;element&amp;gt;&lt;/span&gt;text&lt;span class="nt"&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;
  tail
  &lt;span class="nt"&gt;&amp;lt;empty-element/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can control the formatting behaviour using the following &lt;a href="https://dev.to/docs#format-options"&gt;format options&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the default 2-space indent size with &lt;code&gt;--format-options=xml.indent:4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Turn off XML formatting with &lt;code&gt;--format-options=xml.format:false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#packaging-and-distribution"&gt;
  &lt;/a&gt;
  Packaging and distribution
&lt;/h2&gt;

&lt;p&gt;Another theme for this release was improving HTTPie packaging and its availability for different platforms. The following channels have been (or are being) updated or newly added:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;macOS: Homebrew, and MacPorts&lt;/li&gt;
&lt;li&gt;Linux: Snap, Spack, Fedora, RedHat &amp;amp; CentOS via EPEL, Arch, Gentoo, Alpine, Manjaro, OpenSUSE, OpenPKG, and Solus&lt;/li&gt;
&lt;li&gt;Windows: Chocolatey&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We want to give a big shout-out to &lt;a href="https://github.com/hroncok"&gt;Miro Hronƒçok&lt;/a&gt;, the maintainer of the HTTPie package in Fedora, who has been especially involved and was of great help.  And, of course, we are infinitely thankful to all the other package maintainers working behind the scenes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug fixes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Resuming downloads (&lt;code&gt;--download&lt;/code&gt; with &lt;code&gt;--continue&lt;/code&gt;) with a single byte to be downloaded left is now fixed (&lt;a href="https://github.com/httpie/httpie/issues/1032"&gt;#1032&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The behavior of &lt;code&gt;--verbose&lt;/code&gt; requests with a streamed body when the server returned &lt;code&gt;307 Temporary Redirect&lt;/code&gt; is now fixed (&lt;a href="https://github.com/httpie/httpie/issues/1088"&gt;#1088&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The handling of session files with &lt;code&gt;Cookie:&lt;/code&gt; followed by other headers has been fixed (&lt;a href="https://github.com/httpie/httpie/issues/1126"&gt;#1126&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#community-contributions"&gt;
  &lt;/a&gt;
  Community contributions
&lt;/h2&gt;

&lt;p&gt;We‚Äôd like to thank these amazing people for their contributions to this release: &lt;a href="https://github.com/hroncok"&gt;Miro Hronƒçok&lt;/a&gt;, &lt;a href="https://github.com/blyxxyz"&gt;Jan Verbeek&lt;/a&gt;, &lt;a href="https://github.com/Almad"&gt;Almad&lt;/a&gt;, &lt;a href="https://github.com/nixbytes"&gt;nixbytes&lt;/a&gt;, &lt;a href="https://github.com/marcelstoer"&gt;Marcel St√∂r&lt;/a&gt;, &lt;a href="https://github.com/exploide"&gt;Jannik Vieten&lt;/a&gt;, &lt;a href="https://github.com/IlyaSukhanov"&gt;Ilya Sukhanov&lt;/a&gt;, &lt;a href="https://github.com/henryhu712"&gt;henryhu712&lt;/a&gt;, &lt;a href="https://github.com/elenalape"&gt;Elena Lape&lt;/a&gt;, &lt;a href="https://github.com/ainzzorl"&gt;Anton Emelyanov&lt;/a&gt;, &lt;a href="https://github.com/a1346054"&gt;a1346054&lt;/a&gt;, &lt;a href="https://github.com/bl-ue"&gt;bl-ue&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Originally published on &lt;a href="https://httpie.io/blog/httpie-2.5.0"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>httpie</category>
      <category>api</category>
      <category>devtools</category>
      <category>cli</category>
    </item>
    <item>
      <title>The Debugger Checklist ‚Äì Part I</title>
      <author>Shai Almog</author>
      <pubDate>Wed, 15 Sep 2021 10:37:34 +0000</pubDate>
      <link>https://dev.to/codenameone/the-debugger-checklist-part-i-3dco</link>
      <guid>https://dev.to/codenameone/the-debugger-checklist-part-i-3dco</guid>
      <description>&lt;p&gt;&lt;strong&gt;Win at debugging by following an organized process and leveraging the tools you already have&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm a disorganized person by nature. When I follow a process it‚Äôs by habit and intuition. But when a debugging problem keeps me up at night and gets me to that state of mind where a career of raising sheep in New Zealand seems like an attractive option‚Ä¶ That‚Äôs when I need to back off and walk through this process in an orderly fashion. This process never fails. When you walk through it, you can track any problem. &lt;/p&gt;

&lt;p&gt;Now I‚Äôm going to skip a lot of common advice. Most debugging tutorials start with things that relate to a process: File an issue, reproduce as a test case etc.&lt;br&gt;
I think there‚Äôs plenty written on that online. People use it as filler since they assume debugging is a simple process. It is sometimes. But as we will learn in this blog, there‚Äôs a lot of depth and breadth to this misleadingly simple process.&lt;/p&gt;

&lt;p&gt;We‚Äôre going to skip ahead to a point where you have a bug you can reproduce (consistently or otherwise) but you don‚Äôt understand or can‚Äôt prove the cause.&lt;/p&gt;

&lt;p&gt;This isn‚Äôt a tutorial for beginners, that‚Äôs a different post in which I will cover a lot of additional things and go into more details.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#works-on-my-machine"&gt;
  &lt;/a&gt;
  Works on My Machine
&lt;/h2&gt;

&lt;p&gt;If this doesn‚Äôt reproduce locally you might want to leverage remote debugging. This is pretty easy for most modern development tools, e.g.  &lt;a href="https://lightrun.com/debugging/how-to-debug-remotely-in-intellij/"&gt;this article&lt;/a&gt;  covers the process of debugging a Java process remotely in IntelliJ/IDEA.&lt;br&gt;
You can apply the same technique to most IDEs and languages/platforms.&lt;/p&gt;

&lt;p&gt;The main problem here is if this only happens in a production environment. In that case standard remote debugging is very dangerous. Both in terms of security (which is non-existent) but also in terms of your server reliability. Notice that there are ways to debug remote servers securely, safely and easily such as  &lt;a href="https://www.lightrun.com/"&gt;Lightrun&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Without that you can try the following tricks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run locally but tunnel to the remote DB ‚Äì I usually just use SSH tunneling but I hear good things about  &lt;a href="https://goteleport.com/"&gt;Teleport&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Log the exact entry point credentials the user sent and try to reproduce the request locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my experience this is one of the hardest things to do when debugging a remote issue. Especially in a clustered/polyglot environment.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#if-the-bug-is-inconsistent"&gt;
  &lt;/a&gt;
  If The Bug is Inconsistent
&lt;/h2&gt;

&lt;p&gt;These are the hard to track bugs for which we need the most help. These are also the bugs in which people lose faith in debugging. I‚Äôll classify this problem into two distinct cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Happens rarely&lt;/li&gt;
&lt;li&gt;Never happens if we stop at a breakpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both cases the best solution is logging and yes, logging is a form of debugging‚Ä¶ We can add a log, ‚ÄúApply Code Changes‚Äù (or edit and continue) and instantly see the output in our logs.&lt;/p&gt;

&lt;p&gt;If the problem doesn‚Äôt happen when we have a breakpoint it‚Äôs possible that it might not reproduce even with a log. That‚Äôs because the problem is a threading problem. &lt;br&gt;
Debugging a race condition or a deadlock is actually not as painful as it‚Äôs sometimes made out to be. I discuss this a bit later in this post. Note that debugging this is the ‚Äúeasy part‚Äù, fixing it‚Ä¶ That‚Äôs the hard part...&lt;/p&gt;

&lt;p&gt;If it happens rarely then we still need to verify that this isn‚Äôt directly related to threading issues. I often make sure to log the current thread in this case to see if there‚Äôs a correlation with the invoking thread. I also try to log the stacks to see if the problem varies based on the stack that makes sense. A cool trick is to hash or checksum the stack to reduce the noise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DebugUtil&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;stackHash&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// code from https://www.baeldung.com/java-stacktrace-to-string&lt;/span&gt;
      &lt;span class="nc"&gt;StringWriter&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringWriter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="nc"&gt;PrintWriter&lt;/span&gt; &lt;span class="n"&gt;pw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PrintWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// checksum for speed&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toCharArray&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toHexString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Invalid Stack"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use this code in our logs which we can then instantly scan through to find whether a bug correlates to invocation through a specific stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditional-breakpoints"&gt;
  &lt;/a&gt;
  Conditional Breakpoints
&lt;/h2&gt;

&lt;p&gt;You probably know about conditional breakpoints, but when was the last time you used them?&lt;/p&gt;

&lt;p&gt;If that‚Äôs recent then kudos to you! &lt;br&gt;
You‚Äôre one of the chosen few. &lt;/p&gt;

&lt;p&gt;This feature just isn‚Äôt used nearly as much as it should. E.g. we can use the previous checksum current stack code to verify that all calls arrive from the same stack. We can use the output of that method as a condition.&lt;/p&gt;

&lt;p&gt;Say the bug we‚Äôre tracking happens only when the data for a specific user is being processed. Creating a breakpoint where the condition is &lt;code&gt;userId == problematicUser&lt;/code&gt; lets us focus on the important parts. We can use the thread name as a condition to debug race conditions effectively.&lt;/p&gt;

&lt;p&gt;There are some problems with conditional breakpoints. E.g. They can impact performance in such a way that the execution slows down to such a degree that we can‚Äôt reproduce problems properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rinse-repeat"&gt;
  &lt;/a&gt;
  Rinse Repeat
&lt;/h2&gt;

&lt;p&gt;You know that feeling when you step over the code after spending ages getting everything right‚Ä¶ Then you step too far and you ‚Äúmissed it‚Äù!&lt;br&gt;
That‚Äôs the most frustrating feeling‚Ä¶ It makes you want to throw a temper tantrum.&lt;/p&gt;

&lt;p&gt;Well, there‚Äôs a solution. We all should know about ‚Äúrun to cursor‚Äù which is nice. But most IDEs also support Go to Cursor which lets you manipulate the instruction pointer and return execution backward (or move it forward) to an arbitrary (legal) location. &lt;/p&gt;

&lt;p&gt;Oddly enough, up until recently this wasn‚Äôt supported in IntelliJ. It still isn‚Äôt‚Ä¶ But there‚Äôs a plugin!&lt;/p&gt;

&lt;p&gt;The  &lt;a href="https://plugins.jetbrains.com/plugin/14877-jump-to-line"&gt;jump to line plugin&lt;/a&gt;, is one of those few must have plugins for IntelliJ that‚Äôs useful for just about everyone. It‚Äôs a life saver and a happiness enhancer. With this plugin you can literally drag the execution arrow on the left to a new location‚Ä¶ Amazing.&lt;/p&gt;

&lt;p&gt;Couple that with the ability to edit variable values in the watch window and you can test your theories in the method while stepping over a block of code. You can easily simulate many scenarios that would take hours (if not days) to reproduce as test cases. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DOXumxn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbezontwvbv4vjqdn4pk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DOXumxn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbezontwvbv4vjqdn4pk.gif" alt="Jump to the line plugin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-be-continued"&gt;
  &lt;/a&gt;
  To be Continued
&lt;/h2&gt;

&lt;p&gt;Next time I'll go over the process of debugging an application. It's a very simple process but as usual "the devil is in the details". &lt;/p&gt;

&lt;p&gt;Do you have your own process? &lt;/p&gt;

&lt;p&gt;I'd love to hear your thoughts and debugging tips/tricks. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build Your New On-demand Multi-Service App Utilizing The Best Laravel PHP Framework</title>
      <author>georgedavid</author>
      <pubDate>Wed, 15 Sep 2021 10:23:05 +0000</pubDate>
      <link>https://dev.to/georgedavid02/build-your-new-on-demand-multi-service-app-utilizing-the-best-laravel-php-framework-21p1</link>
      <guid>https://dev.to/georgedavid02/build-your-new-on-demand-multi-service-app-utilizing-the-best-laravel-php-framework-21p1</guid>
      <description>&lt;p&gt;As app development is the core process to start any kind of on-demand online business, concentrating on it is very important. Consequently, the developers today majorly use the Laravel backend program on the basis of its powerful integration framework. Because of its notable advantages, the same source has been used in on-demand multi-service app development too. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6uGHUomt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygdanlukmikx2c0pdiua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6uGHUomt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygdanlukmikx2c0pdiua.png" alt="on-demand multi services app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though the multiservice apps are considered as updated stuff to individual on-demand service apps, it admires a lot of business personalities' attention. In response, we can find several entrepreneurs focusing on better multiservice app development for new business initiations nowadays.&lt;/p&gt;

&lt;p&gt;Touching on it, let's discuss why Laravel is better for you to develop your multiservice app. And, how powerfully you can build your Uber for X multiservice app that competes with the demands faced by developers and entrepreneurs at present.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-laravel-backend-framework-is-the-best-for-ondemand-multiservice-app-development"&gt;
  &lt;/a&gt;
  Why Laravel Backend Framework is the Best for On-demand Multiservice App Development?
&lt;/h2&gt;

&lt;p&gt;As mentioned, the backend of an on-demand business app takes a vital role in its complete operation online. Thus, having a reliable and standard technology implementation to take care of progressive business data would be your developed app‚Äôs great victory in the market. In the Uber for X multiservice app development too, it acquires the below-mentioned major benefits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Laravel backend makes your coding easier&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Fast app development completion&lt;/em&gt;&lt;br&gt;
&lt;em&gt;The complete open-source helps you to make an affordable development cost&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Modular approach possible for the convenient development processing&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Your multiservice app could be smartly being updated with its powerful MVC Architecture.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Above all, you could get a lot more additions such as quick time duration to market, object-related libraries, composers, best routing, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-features-of-laravel-for-your-effective-business-app-creation"&gt;
  &lt;/a&gt;
  Top Features of Laravel for Your Effective Business App Creation
&lt;/h2&gt;

&lt;p&gt;The comprehensive development framework for your multiservice app boosts an expressive syntax. Its effective feature options make your app development operation completely refreshed. This is how Laravel still stands to be a favorite one of contemporary developers focusing on its most developer-friendly nature and comfortability to build both desktop and mobile apps. In which, for your powerful multiservice app creation, refer to its top features in the following. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your app development with Laravel allows you to easily take care of user authentication. As everything is already configured and built-in in the framework, you can also manage the assigning claimed access rights. To developers, it provides an organized way to outline the authentication logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simplified Notification Transmission&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Laravel framework‚Äôs effective SwiftMailer library lets the notification integration can be used for simplified notification configuration for individual accounts. It supports sending notifications from multiple channels. So that alert transmission throughout the multiservice business in progress would be smoothened. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Seamless Automation Checking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Automation checking is used to test your new multiservice app‚Äôs performance ratio. Representing how well a created solution works without any errors, crashes, or bugs. For this purpose, with the inbuilt Laravel framework‚Äôs checking options in addition to its support for PHP Unit test utilizing phpunit.xml, you can easily check the fundamental user activities to examine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Laravel Database Migration System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Laravel has a seamless database migration system. Because syncing with the database is a tedious task for developers, which also demands long timing hours to complete the task, Laravel‚Äôs seamless data migration allows you to easily enhance the quality of the database speedily without any compromisation in actual security.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-core-advantages-app-developers-derives-from-laravel-backend-programming"&gt;
  &lt;/a&gt;
  The Core Advantages App Developers Derives From Laravel Backend Programming
&lt;/h2&gt;

&lt;p&gt;Same as how the backend program is the core stuff in business app operations, its advantages are important for developers for purposes. Thereby, from the development to custom modulations, everything would be smart achievable at the end of the satisfying app design outlet. For example, the following core advantages of the Laravel framework assist you to build a gainful Uber for X business app.&lt;/p&gt;

&lt;p&gt;Implementing Authentication Enable - The Laravel backend program enables implementing authentication. So that everything is finely configured to a great organized authentication logic. And, the requirement controls access to various resources.&lt;/p&gt;

&lt;p&gt;Fast Cache Configurations - Since the Laravel backs are well-known for their cache backends, as a developer, you can configure a number of cache configurations fast. &lt;/p&gt;

&lt;p&gt;User-friendly API Provision - As a developer, you can offer your client a clean and easy-to-use API through SwiftMailer Library. Its drivers let an app rapidly get ready-to-move, send notification alerts via cloud-based service. &lt;/p&gt;

&lt;p&gt;Enhanced Monolog Library - Though the Laravel framework has been well integrated with the enhanced monolog logging library, it is much more useful for you. Through that, you are getting the support for handling a load of effective logs.&lt;/p&gt;

&lt;p&gt;Powerful Routeway Identification - Each Laravel backend route is determined right in the App/HTTP/routes.php file. So it is naturally loaded by the framework. Additionally, offers a forceful method of determining route-ways through accepting URL along with a Closure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#victorious-development-and-winning-multiservice-app-output"&gt;
  &lt;/a&gt;
  Victorious Development And Winning Multiservice App Output
&lt;/h2&gt;

&lt;p&gt;In the real-time marketplace, your on-demand multiservice app performs sophisticatedly owing to its robust backend structure. Its development side of client-based captivations lets both the developer and the entrepreneurs get a win-win favor. Hence the newly developed Uber for X app possesses the main characteristics as follows, the business achieves a lot in real-time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Seamless App Functionality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Though all the enhancements would be covered with your backend program, your multiservice app‚Äôs total functionality is seamless. So, even between a number of users accessing at the same time, your business app performs in a standardized manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client-centric App Creation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using its full easy backend programming modulation solution, you can develop the multiservice app as per custom-centric backend program requirements. Therefore, you can make your client better satisfied with your complete app creation task output for service initiations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speedy Development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Laravel‚Äôs fast and fine backend development segments urge your new app-building right from the beginning. So it helps you to offer clients a fast and secure app development creation. Therefore, an immediate business launching as per the plan possible with its overall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Great Base for Multi OSs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The adaptable Laravel framework allows you to code programs for a great backend operation functionality to your multiservice apps which are supported with multiple mobile phone/web operating systems. So, the entrepreneurs who require multi-OS supporting business apps could smartly get them all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robust Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Above all, for a robust security requirement for your new Uber for X on-demand multiservice app, the Laravel framework inherently has many features and operations, which make your app more secure and powerful enough to prevent vulgarities. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#all-in-all"&gt;
  &lt;/a&gt;
  All in All
&lt;/h3&gt;

&lt;p&gt;Multiservice app development today increased amongst business personalities for their gainful startups online. Considering it, the developers using Laravel backend framework are vastly encouraged by them focusing on the programming advantages in the app‚Äôs functionality. Whereupon, &lt;a href="https://www.spotnrides.com/uber-for-x-ondemand-multi-services-app"&gt;Uber for X&lt;/a&gt; on-demand multiservice app which is developed utilizing the powerful Laravel framework naturally covers the discussed victorious benefits. &lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>programming</category>
      <category>framework</category>
    </item>
    <item>
      <title>Create a PDF document from an Azure DevOps Wiki</title>
      <author>Marcel.L</author>
      <pubDate>Wed, 15 Sep 2021 09:20:57 +0000</pubDate>
      <link>https://dev.to/pwd9000/create-a-pdf-document-from-an-azure-devops-wiki-fjh</link>
      <guid>https://dev.to/pwd9000/create-a-pdf-document-from-an-azure-devops-wiki-fjh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#azure-devops-wiki"&gt;
  &lt;/a&gt;
  Azure DevOps Wiki
&lt;/h2&gt;

&lt;p&gt;When working on Azure DevOps or Github, we have special needs when it comes to wiki's and documentation. Specifically, we often have our documentation sit next to our source code in our repos, allowing us to version our documentation along with our source code. This developer-specific workflow is totally supported by Azure DevOps Wiki. What is great about using the Azure DevOps wiki is that similarly how teams can share and collaborate on a projects source code the same team, using the same workflow can also share and collaborate on a projects documentation through its Wiki. Documentation such as release notes, manuals and any sort of documentation that needs to accompany a project can be created in a Wiki. The documentation is then also kept in source control and in a central place that a team can access and collaborate on.  &lt;/p&gt;

&lt;p&gt;But this might not be suitable or possible at all times in all use cases, for example to see the DevOps wiki a person must have access to the DevOps Project and Wiki. Say for example someone who is in a different project or in a management role that does not have access to the DevOps project or wiki would like to see a products release notes or maybe some sort of documentation on the project in a document, this makes things a bit more tricky. So today I will share with you how you can convert your DevOps or Github wiki into a PDF document. We will also look at how we can create a pipeline that will automatically generate a new "Wiki PDF" document when required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devops-wiki-pdf-export-task"&gt;
  &lt;/a&gt;
  DevOps Wiki PDF Export Task
&lt;/h2&gt;

&lt;p&gt;WIKI PDF Export Tasks is a DevOps extension that can be installed into your DevOps Organisation from the Azure DevOps &lt;a href="https://marketplace.visualstudio.com/items?itemName=richardfennellBM.BM-VSTS-WikiPDFExport-Tasks"&gt;marketplace&lt;/a&gt;, simply put it is an Azure Pipelines extension that can give teams another way to present their Wiki as a PDF document, whether it be an export of a whole WIKI or just a single page.  &lt;/p&gt;

&lt;p&gt;The extension is based on a tool called &lt;a href="https://github.com/MaxMelcher/AzureDevOps.WikiPDFExport"&gt;&lt;strong&gt;AzureDevOps.WikiPDFExport&lt;/strong&gt;&lt;/a&gt; by Max Melcher that allows you to export a whole WIKI (or a single file) as a PDF. The tool performs the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone a WIKI Repo&lt;/li&gt;
&lt;li&gt;Run the command line tool passing in a path to the root of the cloned wiki repo&lt;/li&gt;
&lt;li&gt;The .order file is read&lt;/li&gt;
&lt;li&gt;A PDF is generated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wiki-to-pdf-pipeline"&gt;
  &lt;/a&gt;
  Wiki to PDF Pipeline
&lt;/h2&gt;

&lt;p&gt;After installing &lt;a href="https://marketplace.visualstudio.com/items?itemName=richardfennellBM.BM-VSTS-WikiPDFExport-Tasks"&gt;WIKI PDF Export Tasks&lt;/a&gt; in your Devops Organisation. Navigate to your Wiki repository.&lt;br&gt;&lt;br&gt;
In this tutorial I am using a repo on my project called: &lt;strong&gt;Devops.Wiki&lt;/strong&gt; published as my project wiki.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40pVSJJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Wiki-To-Pdf/assets/wiki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40pVSJJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Wiki-To-Pdf/assets/wiki.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under my repo I then created a new folder/path called: &lt;code&gt;.pipelines&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SK7O01qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Wiki-To-Pdf/assets/paths.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SK7O01qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Wiki-To-Pdf/assets/paths.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this path we will create our YAML pipeline called &lt;code&gt;wiki-to-pdf.yml&lt;/code&gt; with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# code/wiki-to-pdf.yml&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Wiki-To-PDF-$(Rev:rr)&lt;/span&gt;
&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;

&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wiki_export&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Wiki Export&lt;/span&gt;

  &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wiki_to_pdf&lt;/span&gt;
    &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Wiki To PDF&lt;/span&gt;
    &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;richardfennellBM.BM-VSTS-WikiPDFExport-Tasks.WikiPDFExportTask.WikiPdfExportTask@1&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Export&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;private&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Azure&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;DevOps&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;WIKI'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;cloneRepo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://dev.azure.com/magiconionM/Devto_Blog_Demos/_git/DevOps.Wiki'&lt;/span&gt;
        &lt;span class="na"&gt;useAgentToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;localpath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/DevOpsWiki'&lt;/span&gt; 
        &lt;span class="na"&gt;outputFile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)/PDF/DevOpsWiki.pdf'&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PublishPipelineArtifact@1&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Publish&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;wiki&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;export&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Azure&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Pipeline'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;targetPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)/PDF'&lt;/span&gt;
        &lt;span class="na"&gt;artifactName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DevOpsWiki&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can then set up this pipeline and trigger it manually, once the pipeline has completed it will generate an artifact that contains the PDF document.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vwwhPKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Wiki-To-Pdf/assets/run.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vwwhPKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Wiki-To-Pdf/assets/run.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ma4okwSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Wiki-To-Pdf/assets/artifact.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ma4okwSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Wiki-To-Pdf/assets/artifact.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Pwd9000-ML/blog-devto/blob/master/posts/DevOps-Wiki-To-Pdf/code/DevOpsWiki.pdf"&gt;Here&lt;/a&gt; is an example PDF export.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#other-examples"&gt;
  &lt;/a&gt;
  Other Examples
&lt;/h2&gt;

&lt;p&gt;Note on our pipeline the task used is specifically to export a private Azure DevOps WIKI:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;richardfennellBM.BM-VSTS-WikiPDFExport-Tasks.WikiPDFExportTask.WikiPdfExportTask@1&lt;/span&gt;
    &lt;span class="s"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Export&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;private&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Azure&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;DevOps&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;WIKI'&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;cloneRepo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://dev.azure.com/magiconionM/Devto_Blog_Demos/_git/DevOps.Wiki'&lt;/span&gt;
    &lt;span class="na"&gt;useAgentToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;localpath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/DevOpsWiki'&lt;/span&gt; 
    &lt;span class="na"&gt;outputFile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)/PDF/DevOpsWiki.pdf'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here are two more examples. Export a Single File:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;richardfennellBM.BM-VSTS-WikiPDFExport-Tasks.WikiPDFExportTask.WikiPdfExportTask@1&lt;/span&gt; 
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Export&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Single&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;File'&lt;/span&gt;
  &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;cloneRepo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="na"&gt;localpath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)'&lt;/span&gt;
    &lt;span class="na"&gt;singleFile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;release_notes.md'&lt;/span&gt;
    &lt;span class="na"&gt;outputFile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)/PDF/ReleaseNotes.pdf'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Export a public GitHub WIKI:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;richardfennellBM.BM-VSTS-WikiPDFExport-Tasks.WikiPDFExportTask.WikiPdfExportTask@1&lt;/span&gt;
   &lt;span class="s"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Export&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;public&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;WIKI'&lt;/span&gt;
   &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;cloneRepo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
     &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://github.com/rfennell/AzurePipelines.wiki.git'&lt;/span&gt; 
     &lt;span class="na"&gt;useAgentToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
     &lt;span class="na"&gt;localpath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)\GitHubRepo'&lt;/span&gt; 
     &lt;span class="na"&gt;outputFile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)\PDF\GitHubWiki.pdf'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/DevOps-Wiki-To-Pdf/code"&gt;Github&lt;/a&gt; page. ‚ù§Ô∏è&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions Architect and DevOps enthusiast.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>Django &amp; Docker - Open-source Projects</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 15 Sep 2021 09:05:11 +0000</pubDate>
      <link>https://dev.to/sm0ke/django-docker-open-source-projects-3g0j</link>
      <guid>https://dev.to/sm0ke/django-docker-open-source-projects-3g0j</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents a curated list of &lt;strong&gt;&lt;a href="https://blog.appseed.us/django-docker-open-source-projects/"&gt;Open-Source Django&lt;/a&gt;&lt;/strong&gt; Projects already configured to run in &lt;strong&gt;Docker&lt;/strong&gt;, the popular virtualization software.  For newcomers, &lt;strong&gt;Django&lt;/strong&gt; is a leading web framework coded in Python by programming experts and open-source enthusiasts using a batteries-included concept. All projects mentioned on this page are available for download from Github (no registration lock) under MIT License.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;üëâ &lt;code&gt;Section #1&lt;/code&gt;: &lt;strong&gt;Django&lt;/strong&gt; - Short Presentation&lt;/li&gt;
&lt;li&gt;üëâ &lt;code&gt;Section #2&lt;/code&gt;: What is &lt;strong&gt;Docker&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;üëâ &lt;code&gt;Section #3&lt;/code&gt;: &lt;strong&gt;Install Docker&lt;/strong&gt; (Unix workspace)&lt;/li&gt;
&lt;li&gt;üëâ &lt;code&gt;Section #4&lt;/code&gt;: &lt;strong&gt;Docker&lt;/strong&gt; CheatSheet&lt;/li&gt;
&lt;li&gt;üëâ &lt;code&gt;Section #5&lt;/code&gt;: Pre-configured &lt;strong&gt;Docker&lt;/strong&gt; Projects (all free)

&lt;ul&gt;
&lt;li&gt;(free) üì• &lt;a href="https://appseed.us/django/django-pixel-bootstrap-uikit"&gt;Django Pixel Lite&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;(free) üì• &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-atlantis-dark"&gt;Django Atlantis Dark&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;(free) üì• &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Django Bootstrap 5 Volt&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1-django-presentation"&gt;
  &lt;/a&gt;
  1# - Django Presentation
&lt;/h2&gt;

&lt;p&gt;Django is a modern web framework crafted in Python language that provides modules and libraries for many common features required in modern web development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic authentication, Social Login&lt;/li&gt;
&lt;li&gt;Out-of-the-box Admin Section with CRUD access for all tables&lt;/li&gt;
&lt;li&gt;Abstract Database access via a powerful ORM&lt;/li&gt;
&lt;li&gt;Powerful built-in security patterns&lt;/li&gt;
&lt;li&gt;Helpers: forms, models, and data validation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Django can be installed in many ways and the most recommended way is to use PIP, the official Python package manager. Here is the complete list with commands: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Create a &lt;code&gt;virtual environment&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Create the environment&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt; 
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Activate the virtual environment&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install Django via PIP&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Django // &lt;span class="nb"&gt;install &lt;/span&gt;latest version
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;3.2.6 // &lt;span class="nb"&gt;install &lt;/span&gt;specific version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Build a minimal Django project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;firstproject 
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;firstproject
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject config &lt;span class="nb"&gt;.&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all goes well, we should see in the browser the default Django splash screen when accessing &lt;code&gt;http://localhost:8000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kXZ_1Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ug9t6oostt5ns0bjd0b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kXZ_1Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ug9t6oostt5ns0bjd0b2.png" alt="Django - The Default Screen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-what-is-docker"&gt;
  &lt;/a&gt;
  2# - What is Docker
&lt;/h2&gt;

&lt;p&gt;Probably the best definition of Docker is the one provided by the official help: &lt;strong&gt;Docker&lt;/strong&gt; is virtualization software for developing, shipping, and running applications that provides a clear separation of applications from the infrastructure so we can deliver software much faster and reliable.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aFBwA-As--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48dwrn2kvuhl5ed5okqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFBwA-As--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48dwrn2kvuhl5ed5okqb.png" alt="Docker - Official Logo."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Basically, Docker provides a way to package applications into containers that are executable components built with applications source code and operating system libraries. Once the containers are built, Docker provides also a control layer that enables developers to build, deploy, start, stop, and update containers using simple commands. For more information about Docker feel free to access:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.docker.com/get-started/overview/"&gt;Docker overview&lt;/a&gt; - the official documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://opensource.com/resources/what-docker"&gt;What is Docker&lt;/a&gt; - comprehensive article provided by OSS.com&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#3-install-docker-ubuntu-18-lts"&gt;
  &lt;/a&gt;
  3# - Install Docker (Ubuntu 18 LTS)
&lt;/h2&gt;

&lt;p&gt;All Django projects listed in the last section of this article can be compiled and executed without Docker by following the documentation provided for each project but using Docker the build and execution might be faster with fewer commands typed in the terminal.  Let's install Docker using an Ubuntu 18 LTS workstation.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All commands presented in this section are executed using &lt;code&gt;sudo&lt;/code&gt;, a command that requires &lt;code&gt;ROOT&lt;/code&gt; privileges.  &lt;/p&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Update the system to use the latest packages (optional but recommended)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Uninstall old versions of Docker (optional but recommended)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get remove docker-engine docker docker.io  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Re-Install Docker (the latest version shipped by Ubuntu)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;docker.io
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Enable Docker as a service&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;docker
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we should be able to build and start all &lt;strong&gt;Django samples using Docker&lt;/strong&gt;. Just to check the installation we can check the version of the current Docker installation using &lt;code&gt;--version&lt;/code&gt; argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker &lt;span class="nt"&gt;--version&lt;/span&gt; 
Docker version 20.10.5, build 55c4c88 // &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; The Output 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#4-docker-cheatsheet"&gt;
  &lt;/a&gt;
  4# - Docker CheatSheet
&lt;/h2&gt;

&lt;p&gt;This section is a short introduction to the most used Docker commands.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker - &lt;strong&gt;Inspecting Containers&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker &lt;span class="nt"&gt;--version&lt;/span&gt;       &lt;span class="c"&gt;# check Docker version&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps &lt;span class="nt"&gt;-a&lt;/span&gt;           &lt;span class="c"&gt;# list all containers&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps              &lt;span class="c"&gt;# list all RUNNING containers&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker top &amp;lt;container&amp;gt; &lt;span class="c"&gt;# list the active processes &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Docker -  &lt;strong&gt;Management Commands&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run     &amp;lt;image&amp;gt;       &lt;span class="c"&gt;# create and start the container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker start   &amp;lt;container&amp;gt;   &lt;span class="c"&gt;# start container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker stop    &amp;lt;container&amp;gt;   &lt;span class="c"&gt;# stop container (gracefully)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pause   &amp;lt;container&amp;gt;   &lt;span class="c"&gt;# freeze the container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker &lt;span class="nb"&gt;kill&lt;/span&gt;    &amp;lt;container&amp;gt;   &lt;span class="c"&gt;# kill container (not gracefully)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker restart &amp;lt;container&amp;gt;   &lt;span class="c"&gt;# restart container (gracefully) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Docker - &lt;strong&gt;Image Transfer Commands&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull  &amp;lt;image&amp;gt;   &lt;span class="c"&gt;# pull an image from a registry&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker push  &amp;lt;image&amp;gt;   &lt;span class="c"&gt;# push/save an image to a registry&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker search &amp;lt;image&amp;gt;  &lt;span class="c"&gt;# returns all images related to search keyword&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Docker - &lt;strong&gt;Miscellaneous Commands&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker container &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;docker ps &lt;span class="nt"&gt;-q&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# kill all containers&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker container &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;docker ps &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-q&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# delete all containers &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker network prune                   &lt;span class="c"&gt;# delete all IPv4 used address &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#5-django-amp-docker-samples"&gt;
  &lt;/a&gt;
  5# - Django &amp;amp; Docker Samples
&lt;/h2&gt;

&lt;p&gt;With this minimal &lt;strong&gt;Django &amp;amp; Docker&lt;/strong&gt; background we should be able to execute and understand how the samples are built and executed. &lt;em&gt;Let's go!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#django-pixel-lite"&gt;
  &lt;/a&gt;
  Django Pixel Lite
&lt;/h3&gt;

&lt;p&gt;Open-Source Django starter coded with basic modules, database, ORM, and deployment scripts on top of Pixel Lite UI Kit, a fully responsive and modern Bootstrap 5 UI Kit that will help you build creative and professional websites. The Django codebase is provided with database, ORM, authentication, and deployment scripts.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://appseed.us/django/django-pixel-bootstrap-uikit"&gt;Django Pixel Lite&lt;/a&gt; - product page (contains sources and DEMO)&lt;/p&gt;
&lt;/blockquote&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unzip django-pixel-lite.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-pixel-lite
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kuf8YU_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/katj8vk9wm2ztu679n1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kuf8YU_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/katj8vk9wm2ztu679n1z.png" alt="Django Docker Sample - Pixel Lite."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#django-atlantis-dark"&gt;
  &lt;/a&gt;
  Django Atlantis Dark
&lt;/h3&gt;

&lt;p&gt;Atlantis Lite (Dark Design) is a free bootstrap 4 admin dashboard that is beautifully and elegantly designed to display various metrics, numbers, or data visualization. Atlantis Lite admin dashboard has 2 layouts, many plugins, and UI components to help developers create dashboards quickly and effectively so they can save development time and also help users to make the right and fast decisions based on existing data.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://appseed.us/admin-dashboards/django-dashboard-atlantis-dark"&gt;Django Atlantis Dark&lt;/a&gt; -  product page (contains sources and DEMO)&lt;/p&gt;
&lt;/blockquote&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unzip django-atlantis-dark.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-atlantis-dark
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4y_2P1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uplrh2cyoyh4lvebp6l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4y_2P1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uplrh2cyoyh4lvebp6l.png" alt="Django Docker Sample - Atlantis Dark."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#django-bootstrap-5-volt"&gt;
  &lt;/a&gt;
  Django Bootstrap 5 Volt
&lt;/h3&gt;

&lt;p&gt;Volt Dashboard is a free and open-source Bootstrap 5 Admin Dashboard featuring over 100 components, 11 example pages, and 3 plugins with Vanilla JS. There is more than 100 free Bootstrap 5 components included some of them being buttons, alerts, modals, and datepickers.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Django Bootstrap 5 Volt&lt;/a&gt; -  product page (contains sources and DEMO)&lt;/p&gt;
&lt;/blockquote&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unzip django-dashboard-volt.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-dashboard-volt
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1sHA-Gt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ncbqbriza14niojy1cyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1sHA-Gt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ncbqbriza14niojy1cyi.png" alt="Django Docker Sample - Volt Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#django-adminlte"&gt;
  &lt;/a&gt;
  Django AdminLTE
&lt;/h3&gt;

&lt;p&gt;AdminLTE is one of the best open-source admin dashboard &amp;amp; control panel themes. Built on top of Bootstrap, AdminLTE provides a range of responsive, reusable, and commonly used components. Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://appseed.us/admin-dashboards/django-dashboard-adminlte"&gt;AdminLTE Django&lt;/a&gt; -  product page (contains sources and DEMO)&lt;/p&gt;
&lt;/blockquote&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unzip django-adminlte.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-adminlte
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gv5_uf_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4no83ejy1vtb7641px23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gv5_uf_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4no83ejy1vtb7641px23.png" alt="Django Docker Sample - AdminLTE Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Dashboards&lt;/a&gt; - free &amp;amp; commercial starters&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-Source Dashboards&lt;/a&gt; - crafted in Flask, Django, and React
&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a popular article published here on Dev&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>django</category>
      <category>docker</category>
      <category>opensource</category>
      <category>appseed</category>
    </item>
    <item>
      <title>What is React Prop Drilling and Context API</title>
      <author>Rishav Raj</author>
      <pubDate>Wed, 15 Sep 2021 09:00:40 +0000</pubDate>
      <link>https://dev.to/iamrishavraj1/what-is-react-prop-drilling-and-context-api-cjl</link>
      <guid>https://dev.to/iamrishavraj1/what-is-react-prop-drilling-and-context-api-cjl</guid>
      <description>&lt;p&gt;Before starting this blog, I assume that you all should have basic knowledge about React. &lt;br&gt;
In this blog we are going to learn one of the best concept of React - Prop Drilling and Context API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tDIinls5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b12vgd7goncou8i6yxds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tDIinls5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b12vgd7goncou8i6yxds.png" alt="react"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Prop drilling&lt;/strong&gt; is a method where we pass a props with another component with the help of all the components that come between them.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6_X4KcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otoe7e9bur98rjl5wycv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6_X4KcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otoe7e9bur98rjl5wycv.gif" alt="Drill"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#let-us-understand-with-a-real-life-example"&gt;
  &lt;/a&gt;
  Let us understand with a real life example.
&lt;/h2&gt;

&lt;p&gt;Imagine you are in school and you are sitting on the last bench and your best friend is sitting on the first bench. Suddenly your best friend needs a pen and you have a spare pen and you want to give that pen to your best friend. For this, ask your friend sitting on your next bench to take the pen and forward it to the next one and said that repeat this until the pen reaches your friend.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EZkzCRd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pwf1yh52q6k3601rqns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EZkzCRd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pwf1yh52q6k3601rqns.png" alt="Class"&gt;&lt;/a&gt;&lt;br&gt;
Here you can see how he gives a pen to his best friend with the help of another bench. &lt;br&gt;
In &lt;strong&gt;React&lt;/strong&gt; also if we want to pass props to any other component then we have to pass props to all the components which come between them and This whole process is known as &lt;strong&gt;React Prop Drilling&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-come-and-understand-all-these-things-with-the-help-of-code"&gt;
  &lt;/a&gt;
  Now come and understand all these things with the help of code.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

//FIRST COMPONENT
const LastBench = () =&amp;gt; {
  const [penName, setPenName] = useState("Blue Gel Pen");
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Last Bench&amp;lt;/h1&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//SECOND COMPONENT
const NextBench = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Next Bench.&amp;lt;/h1&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//THIRD COMPONENT
const FirstBench = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hey I am First Bench&amp;lt;/h1&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default LastBench;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;In the above code you see that we create 3 components. In the first component we declare a pen name with the help of useState hook. Now we have to pass the pen name to the last component with the help of second component&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

//FIRST COMPONENT

const LastBench = () =&amp;gt; {
  const [penName, setPenName] = useState("Blue Gel Pen");
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Last Bench&amp;lt;/h1&amp;gt;
      &amp;lt;br /&amp;gt;
      &amp;lt;NextBench penName={penName} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//SECOND COMPONENT
const NextBench = ({ penName }) =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Next Bench.&amp;lt;/h1&amp;gt;
      &amp;lt;FirstBench penName={penName} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//THIRD COMPONENT
const FirstBench = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hey I am First Bench&amp;lt;/h1&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default LastBench;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We call second component in first component then we pass props with penName And then we repeat all these things in second component. We call the last component, then we pass the props named penName.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

//FIRST COMPONENT

const LastBench = () =&amp;gt; {
  const [penName, setPenName] = useState("Blue Gel Pen");
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Last Bench&amp;lt;/h1&amp;gt;
      &amp;lt;br /&amp;gt;
      &amp;lt;NextBench penName={penName} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//SECOND COMPONENT
const NextBench = ({ penName }) =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Next Bench.&amp;lt;/h1&amp;gt;
      &amp;lt;FirstBench penName={penName} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//THIRD COMPONENT
const FirstBench = ({ penName }) =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hey I am First Bench&amp;lt;/h1&amp;gt;
      &amp;lt;h4&amp;gt;{penName} Here i got My Pen&amp;lt;/h4&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default LastBench;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Now You can see Above code we Finally use props in last component which we declared in first component. In second component we have passed props now we can use that props in third component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#this-is-how-react-prop-drilling-work"&gt;
  &lt;/a&gt;
  This is how &lt;strong&gt;React Prop Drilling Work&lt;/strong&gt;.
&lt;/h1&gt;

&lt;p&gt;But you can see in the code that the props we use in second components are useless. They don't need that props, but we pass that props for use in the third component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-just-like-you-bother-the-next-bench-to-pass-the-pen-to-the-first-bench"&gt;
  &lt;/a&gt;
  It's just like you bother the next bench to pass the pen to the first bench.
&lt;/h3&gt;

&lt;p&gt;To avoid all this, we use the &lt;strong&gt;Context API&lt;/strong&gt;. It works like  you called the teacher and requested him/her to give this pen to his friend who are sitting on the first bench.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5Tiw036--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fgpdzydxf0hjywwjcg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5Tiw036--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fgpdzydxf0hjywwjcg4.png" alt="Api"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#now-lets-refactor-the-above-code-with-the-context-api-and-the-usecontext-hook"&gt;
  &lt;/a&gt;
  Now let's refactor the above code with the Context API and the useContext hook.
&lt;/h3&gt;

&lt;p&gt;We have to create an object with React.createContext() in global. Each context object comes with a provider component that assigns a value to the context object. To add that value we have to pass "value" attribute with them&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useContext } from "react";

//FIRST COMPONENT
const TeacherContext = React.createContext();
const LastBench = () =&amp;gt; {
  const [penName, setPenName] = useState("Blue Gel Pen");
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Last Bench&amp;lt;/h1&amp;gt;
      &amp;lt;br /&amp;gt;
      &amp;lt;TeacherContext.Provider value={{ penName }}&amp;gt;
        &amp;lt;NextBench /&amp;gt;
      &amp;lt;/TeacherContext.Provider&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//SECOND COMPONENT
const NextBench = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Next Bench.&amp;lt;/h1&amp;gt;
      &amp;lt;FirstBench /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//THIRD COMPONENT
const FirstBench = () =&amp;gt; {

  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hey I am First Bench&amp;lt;/h1&amp;gt;
      &amp;lt;h4&amp;gt;Here i got My Pen&amp;lt;/h4&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default LastBench;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In above code you see that we create an object named TeacherContext with the help of React.createContext() and use that object with Provider component with value attribute in first component, where we create a props with name PenName.&lt;br&gt;
Now we need to pass the props to our last component directly. For that we need "useContext" keyword.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X9PngsdE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycgl3c8l9d4dwb1toxyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X9PngsdE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycgl3c8l9d4dwb1toxyo.png" alt="context"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useContext } from "react";

//FIRST COMPONENT
const TeacherContext = React.createContext();
const LastBench = () =&amp;gt; {
  const [penName, setPenName] = useState("Blue Gel Pen");
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Last Bench&amp;lt;/h1&amp;gt;
      &amp;lt;br /&amp;gt;
      &amp;lt;TeacherContext.Provider value={{ penName }}&amp;gt;
        &amp;lt;NextBench /&amp;gt;
      &amp;lt;/TeacherContext.Provider&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//SECOND COMPONENT
const NextBench = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hello I am Next Bench.&amp;lt;/h1&amp;gt;
      &amp;lt;FirstBench /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

//THIRD COMPONENT
const FirstBench = () =&amp;gt; {
  const { penName } = useContext(TeacherContext);
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Hey I am First Bench&amp;lt;/h1&amp;gt;
      &amp;lt;h4&amp;gt;{penName} Here i got My Pen&amp;lt;/h4&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default LastBench;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We can see in the above code that the ‚ÄúuseContext‚Äù keyword will make the first component props available to the last component and in last we use that prop in our component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WS9VbdKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94nsokjx230nkelfc16o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WS9VbdKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94nsokjx230nkelfc16o.png" alt="done"&gt;&lt;/a&gt;&lt;br&gt;
We pass the value of the first component to the last component without disturbing the other components with using &lt;em&gt;useContext&lt;/em&gt; hook.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-connect-with-me"&gt;
  &lt;/a&gt;
  Let's Connect With Me
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqf4n2YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfg11ho53427ouafkqt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqf4n2YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfg11ho53427ouafkqt9.png" alt="connect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thank You for reading this blog üòÄ&lt;br&gt;
I hope all of you have benefited after reading this blog üéâ&lt;br&gt;
Do Share it with your friends and family and get them benefit from it too üß°üëç&lt;br&gt;
Here You Connect with me &lt;a href="https://connect.rishavraj.codes/"&gt;https://connect.rishavraj.codes/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>computerscience</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Tired of opening manually the same programs every morning ?</title>
      <author>ismael garcia</author>
      <pubDate>Wed, 15 Sep 2021 08:40:50 +0000</pubDate>
      <link>https://dev.to/leamsigc/tired-of-opening-manually-the-same-programs-every-morning-19bn</link>
      <guid>https://dev.to/leamsigc/tired-of-opening-manually-the-same-programs-every-morning-19bn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tired-of-opening-manually-the-same-programs-every-morning-or-every-time-that-you-switch-projects-running-the-same-command-over-and-over"&gt;
  &lt;/a&gt;
  Tired of opening manually the same programs every morning ? Or every time that you switch projects, running the same command over and over?
&lt;/h1&gt;

&lt;h5&gt;
  &lt;a href="#well-i-was-in-the-same-place-that-you-so-i-did-a-little-research-and-check-what-other-team-member-were-using-to-start-the-day-faster"&gt;
  &lt;/a&gt;
  Well I was in the same place that you, so I did a little research and check what other team member were using to start the day faster
&lt;/h5&gt;

&lt;p&gt;My start of the day is kind of repetitive or let say is almost the same when I start the working day.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the chat application that i user to communicate with my team&lt;/li&gt;
&lt;li&gt;Open my time tracker application - so i can have a clear view of where my time is going every day.&lt;/li&gt;
&lt;li&gt;Open Firefox with a couple tabs that a need for the day

&lt;ul&gt;
&lt;li&gt;Check emails&lt;/li&gt;
&lt;li&gt;Check the ticket system&lt;/li&gt;
&lt;li&gt;Check my calendar for the day&lt;/li&gt;
&lt;li&gt;See the latest changes that the repo have&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The solution for me was the fallowing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tmux-python/tmuxp"&gt;tmuxp&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tmux session manager&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;INSTALL STEPS&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;pip install --user tmuxp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create and &lt;code&gt;yml&lt;/code&gt; file in the &lt;code&gt;~/.config/tmuxp/{filename}.yaml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is mine :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;session_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Start&lt;/span&gt;
&lt;span class="na"&gt;start_directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/&lt;/span&gt; &lt;span class="c1"&gt;# load session relative to config location (project root).&lt;/span&gt;
&lt;span class="na"&gt;before_script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "Starting of the day"&lt;/span&gt;
&lt;span class="c1"&gt;# shell_command_before:&lt;/span&gt;
&lt;span class="c1"&gt;# - '[ -f .venv/bin/activate ] &amp;amp;&amp;amp; source .venv/bin/activate &amp;amp;&amp;amp; reset'&lt;/span&gt;
&lt;span class="na"&gt;windows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;window_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Start the day&lt;/span&gt;
    &lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tiled&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;main-pane-height&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35&lt;/span&gt;
    &lt;span class="na"&gt;panes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;shell_command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;firefox&lt;/span&gt; &lt;span class="c1"&gt;#https://leamsigc.com/ add the link to the tab that firefox sould open&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;shell_command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;code&lt;/span&gt; &lt;span class="c1"&gt;# Open vscode&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;bpytop&lt;/span&gt; &lt;span class="c1"&gt;# #https://github.com/aristocratos/bpytop and alternative to htop&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;shell_command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;superproductivity &amp;amp; bg&lt;/span&gt; &lt;span class="c1"&gt;# https://super-productivity.com/ Time tricker&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;element-desktop &amp;amp; bg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#how-to-user"&gt;
  &lt;/a&gt;
  How to user
&lt;/h3&gt;

&lt;p&gt;Start the day by open the terminal and run the fallowing command&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tmuxp load start #Remember the filename is start for my side so for you it would depend in the faliname&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux/tmux"&gt;tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aristocratos/bpytop"&gt;bpytop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://super-productivity.com/"&gt;super-productivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>tmux</category>
      <category>shell</category>
      <category>vscode</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Making digital currency; How to create a new cryptocurrency</title>
      <author>ladi ladi</author>
      <pubDate>Wed, 15 Sep 2021 08:33:29 +0000</pubDate>
      <link>https://dev.to/ladiladi123/making-digital-currency-how-to-create-a-new-cryptocurrency-3d98</link>
      <guid>https://dev.to/ladiladi123/making-digital-currency-how-to-create-a-new-cryptocurrency-3d98</guid>
      <description>&lt;p&gt;In recent years, many startups have made a lot of money by creating a digital currency and selling tokens in the initial public offering. Creating a new digital currency may seem like an impossible process to most people. While making digital currency is possible if you have enough knowledge in this field. In this article, we will introduce you to the methods of making a digital currency and at the end, we will answer some common questions in this regard.&lt;/p&gt;

&lt;p&gt;Why are new digital currencies being created?&lt;br&gt;
Even if virtual money has been available to the public for a long time, Bitcoin is the first known and most successful cryptocurrency in the cryptocurrency market. Many cryptocurrencies have been created today, the most popular of which are Bitcoin, Ripple, and Atrium.&lt;/p&gt;

&lt;p&gt;Some unique features make companies and individuals think about creating cryptocurrencies. The most important features of digital currency are cryptography, security and confidentiality, no need to monitor a central institution, transparency of transactions, fast transactions, and ease of transfer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-difference-between-coins-and-digital-currency-tokens"&gt;
  &lt;/a&gt;
  The difference between coins and digital currency tokens
&lt;/h2&gt;

&lt;p&gt;Some people mistakenly use tokens and quins as synonyms. While Token and Quinn are different. The most important thing that distinguishes a token from a quin is the lack of an independent blockchain. Tokens are created on the platform of other blockchains. But Quinn has an independent blockchain.&lt;/p&gt;

&lt;p&gt;Another important difference between coins and tokens is that coins are used to buy and sell and are considered a method of payment. While most tokens can be used for use in an application or as an asset. Bitcoin, Atrium, Ripple, and Light Coin are the most popular coins in the digital currency market. Tetra, Chainlink, Dai, and Avi are also in the category of tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-currency-making-training-introducing-3-methods"&gt;
  &lt;/a&gt;
  Digital currency making training; Introducing 3 methods
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#method-one-create-a-new-digital-currency-by-creating-tokens"&gt;
  &lt;/a&gt;
  Method one: Create a new digital currency by creating tokens
&lt;/h3&gt;

&lt;p&gt;One way to make digital currency is to create tokens. As we have said, a token is a digital currency that does not have its independent blockchain and has been created and launched in the context of another blockchain. For this reason, when a token is generated, there is no need to work on the rules of consensus.&lt;/p&gt;

&lt;p&gt;Making tokens is cost-effective for blockchain developers because they do not need the astronomical cost of designing a blockchain to achieve their goals. Of course, it is also important to note that many digital currencies, when in their infancy, are implemented on another blockchain platform to save costs, but once they have been sufficiently developed, a dedicated blockchain for They are used to launch.&lt;/p&gt;

&lt;p&gt;The token can be created on all blockchain platforms that use smart contracts. Atrium is one of the most popular token-building platforms. At the time of writing, Atrium has hosted more than 80% of the tokens on the market. Bainenschin, Ias, Kazmas, Thezos, and Theron are other common platforms for making tokens.&lt;/p&gt;

&lt;p&gt;Atrium's programming language is solidity. Solidarity uses concepts that exist in other programming languages ‚Äã‚Äãsuch as PHP. It is a high-level programming language that has all the capabilities and capabilities needed for blockchain software.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2-create-digital-currency-by-copying-and-modifying-current-blockchains"&gt;
  &lt;/a&gt;
  Method 2: Create digital currency by copying and modifying current blockchains
&lt;/h3&gt;

&lt;p&gt;Another way to build digital currency is to use open-source blockchains. Open source blocks are made available to the public with programming code after they are created.&lt;/p&gt;

&lt;p&gt;Atrium and Bitcoin programming codes are also open source and can be accessed by anyone on GitHub. Many blockchains have been launched following the example of these two digital currencies. For example, by making a few changes to the Bitcoin blockchain, the LightCoin network is created.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-3-create-a-digital-currency-by-creating-a-new-blockchain"&gt;
  &lt;/a&gt;
  Method 3: Create a digital currency by creating a new blockchain
&lt;/h3&gt;

&lt;p&gt;Build digital currency through the new blockchain&lt;br&gt;
Building and designing a blockchain network is another way to create a new digital currency. In a blockchain, data is stored in blocks and forms an interconnected chain. This structure creates an immutable storage system. The blocks are connected using hashes.&lt;/p&gt;

&lt;p&gt;Creating a new blockchain requires deep programming knowledge and a lot of time. In the following, the steps of creating a new digital currency through making blockchain are outlined in general.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select the consensus mechanism&lt;br&gt;
Consensus mechanisms are protocols for verifying transactions performed in blockchain without the need for a third party (intermediary). Proof of work and the stock proof is currently the most well-known and basic blockchain consensus mechanisms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the blockchain platform&lt;br&gt;
The correct choice of blockchain platform depends on the consensus mechanism you have chosen. The best blockchain operating systems are:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ethereum&lt;br&gt;
Waves (WAVES)&lt;br&gt;
Hyperledger Fabric&lt;br&gt;
NEM&lt;br&gt;
IBM blockchain&lt;br&gt;
Nxt (NXT)&lt;br&gt;
HydraChain&lt;br&gt;
BlockStarter&lt;br&gt;
BigChainDB&lt;br&gt;
EOS&lt;br&gt;
Quorum&lt;br&gt;
IOTA&lt;br&gt;
CoinList&lt;br&gt;
MultiChain&lt;br&gt;
Open chain&lt;br&gt;
Chain Core&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Design the nodes&lt;br&gt;
You need to decide how the blockchain works and design the nodes accordingly. For example, will the licenses be private or public? Will the hosting be on-premises web systems or cloud systems?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specify the blockchain architecture&lt;br&gt;
Before launching a digital currency, you need to be sure of all aspects; Because you can not change multiple blockchain parameters after startup. For example, you need to specify what address blockchain will follow to track exchanges of different cryptocurrencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Design the user interface&lt;br&gt;
If your user interface is not good, the cipher project will fail. You need to make sure you are using the latest version of FTP servers, databases, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#frequently-asked-questions-about-making-new-digital-currencies"&gt;
  &lt;/a&gt;
  Frequently Asked Questions about Making New Digital Currencies
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Does making a digital currency always lead to profitability?&lt;br&gt;
No. More than a few hundred thousand digital currencies have been launched on various platforms, many of which have failed. For this reason, all aspects of work must be well weighed before creating a digital currency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the reason for the failure of some new digital currencies?&lt;br&gt;
Unfortunately, this perspective often causes us to become overwhelmed when it's time to start a new digital currency. That's why we see so many teams being forgotten after spending so much money and energy to create a new digital currency, without gaining popularity. One of the main reasons for their failure is that they failed to do good marketing. Therefore, before any action, the marketing system must be well defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the first step in building a new digital currency?&lt;br&gt;
The first step in creating a new digital currency is to have a well-defined digital currency white paper. White paper in the world of digital currencies means a comprehensive and complete report of the problem that the introduced project seeks to solve. Project objectives should be clearly defined within the white paper. A standard and complete white paper include an abstract, introduction, problem definition, product description, technical details, descriptions of the new digital currency, details of the public offering, and introduction of the development team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How much does it cost to create a new digital currency?&lt;br&gt;
Creating new passwords is not an easy task and will probably require some financial resources; Unless you can handle things like development, documentation, and marketing. The cost of building an encrypted currency depends on several factors, and no specific number can be specified.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding remarks
&lt;/h2&gt;

&lt;p&gt;Creating a new dedicated currency may seem like an attractive and profitable offer at first, but we must not forget that there are many challenges in this direction. For this reason, sufficient market research must be done before any action is taken. On the other hand, the necessary capital must be provided for manufacturing and marketing. Otherwise, the digital currency project is likely to fail in its infancy.&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
    <item>
      <title>How CMS Covers The Skill Gap In Web Development
</title>
      <author>Hawley Martin</author>
      <pubDate>Wed, 15 Sep 2021 08:18:20 +0000</pubDate>
      <link>https://dev.to/hawleymartin1/how-cms-covers-the-skill-gap-in-web-development-3k5e</link>
      <guid>https://dev.to/hawleymartin1/how-cms-covers-the-skill-gap-in-web-development-3k5e</guid>
      <description>&lt;p&gt;Content management system plays a vital role in Web development field. The most popular CMS WordPress covers the 40% market share in the web development. There are a-lot of people who don't want to indulge in long term coding process as it's boring for them so they prefer CMS. From mobile responsiveness to attractive site creation, CMS covers all the aspects. &lt;br&gt;
It shows the better idea to beginners that how they play with margins and paddings of the sections and give the idea of the responsiveness. &lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>cms</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Tacit Knowledge Series</title>
      <author>Matt Thompson</author>
      <pubDate>Wed, 15 Sep 2021 08:04:23 +0000</pubDate>
      <link>https://dev.to/matttea/the-tacit-knowledge-series-54gb</link>
      <guid>https://dev.to/matttea/the-tacit-knowledge-series-54gb</guid>
      <description>&lt;p&gt;From a personal and professional standpoint I'm interested in what is required to keep engineers moving from being experienced and competent to being expert.&lt;/p&gt;

&lt;p&gt;Many views point to &lt;code&gt;tacit knowledge&lt;/code&gt;. But by its very nature tacit knowledge is hard to define and even harder to share.&lt;/p&gt;

&lt;p&gt;Shawn Wang describes the problem perfectly in his excellent book &lt;strong&gt;The Coding Career Handbook&lt;/strong&gt;...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Much of your learning from Junior to Senior involves gaining tacit knowledge. You can read all the programming books in the world, but, by definition, you are still limited to things that people can write down. That is explicit knowledge, and it is only the tip of the iceberg.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We see tacit knowledge in action every day - when a doctor is able to make a prognosis during a crazy short appointment, or, hopefully more commonly, when an expert engineer looks at a design for all of 5 seconds and can immediately tell you her concerns or questions.&lt;/p&gt;

&lt;p&gt;In trying to understand how they reached these conclusions so quickly, explanations might start with some principles, then move on to the exceptions and caveats to these principles, and may often ends with something like "&lt;em&gt;it just feels right&lt;/em&gt;". It's these natural judgements that are made that can't be simply explained so that others could reach the exact same outcome.&lt;/p&gt;

&lt;p&gt;For an excellent breakdown of this, with detailed examples in software engineering and other knowledge fields, I highly recommend Cedric Chin's Commonplace article - &lt;a href="https://commoncog.com/blog/tacit-knowledge-is-a-real-thing/"&gt;Tacit Knowledge is a Real Thing&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;So I want to tap into the tacit knowledge of those around me. I know I can't replace gaining the experience that will build this knowledge myself, but I hope that by being in tune with it I can see the situations, ask the questions, and hopefully understand the thought processes behind these judgements.&lt;/p&gt;

&lt;p&gt;My plan is to pick up on scenarios where experienced engineers might have taken a path through a situation or problem that wasn't obvious to me, pin them down to walk through how they approached it; what experience, principles and ideas they drew on, and then write it down and share it here...&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-tacit-knowledge-series-so-far"&gt;
  &lt;/a&gt;
  The Tacit Knowledge Series so far
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://logical-progression.matttea.com/post/tacit-vulnerabilities/"&gt;Dependency vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logical-progression.matttea.com/post/tacit-bigger-picture-recall/"&gt;Bigger picture recall&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href="https://logical-progression.matttea.com"&gt;https://logical-progression.matttea.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>learning</category>
    </item>
  </channel>
</rss>
