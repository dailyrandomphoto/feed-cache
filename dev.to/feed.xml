<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Docker Compose vs Kubernetes Development Tools</title>
      <author>Rich Burroughs</author>
      <pubDate>Mon, 12 Jul 2021 22:32:46 +0000</pubDate>
      <link>https://dev.to/loft/docker-compose-vs-kubernetes-development-tools-3n1f</link>
      <guid>https://dev.to/loft/docker-compose-vs-kubernetes-development-tools-3n1f</guid>
      <description>&lt;p&gt;By Kasper Siig&lt;/p&gt;

&lt;p&gt;When getting started with Docker, many developers quickly turn to &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; to run their applications. Compose offers many advantages, such as having your configuration stored as code, making it easy to maintain and expand upon. Unfortunately, although it &lt;em&gt;is&lt;/em&gt; possible to use Compose with Kubernetes, it's not the recommended approach.&lt;/p&gt;

&lt;p&gt;Devs will often bang their head against the wall trying to make this scenario work when they start using Kubernetes, without knowing that there's a better way. After all, they have become used to Compose and have integrated it deeply into their workflow. It can be hard to let go.&lt;/p&gt;

&lt;p&gt;This article will go over why it's best to leave Compose out of Kubernetes, and give resources to help you with improving your workflow without it. You'll be introduced to tools that will provide you with the same advantages as you would have with Compose traditionally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-docker-compose-in-kubernetes"&gt;
  &lt;/a&gt;
  Avoiding Docker Compose in Kubernetes
&lt;/h2&gt;

&lt;p&gt;So you've started to use Kubernetes with your project, and you're wondering what to do with all of your work in Docker Compose. Rather than having to abandon all of your work and start completely from scratch, it's possible to use a tool like &lt;a href="https://kompose.io/"&gt;Kompose&lt;/a&gt; as a way of converting your &lt;code&gt;docker-compose.yml&lt;/code&gt; files into Kubernetes manifests. Being familiar with Compose, this can give you great insights into how things are mapped into Kubernetes, and act as a starting point for your research into manifests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3iqTSoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af79kcit4hd0o43eykr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3iqTSoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af79kcit4hd0o43eykr6.png" alt='The output of running the "compose convert" command, and then applying that to a Kubernetes cluster with kubectl.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, when you start moving from the learning phase to the production phase, it's important to think about whether you want to keep Compose in your toolchain at all. Even though tools like Kompose exist to help bring Compose into a Kubernetes environment, it's still not considered best practice. Instead, you should consider switching over to using Kubernetes manifests.&lt;/p&gt;

&lt;p&gt;Using Compose in production can be fine initially, and if your goal is to get simple containers deployed, it's not a big deal. That being said, once your cluster starts maturing and your use cases become more complex, you will find that trying to define everything in a &lt;code&gt;docker-compose.yml&lt;/code&gt; is either tough or impossible.&lt;/p&gt;

&lt;p&gt;You'll likely get to a point where you're spending a significant amount of time developing and maintaining &lt;code&gt;docker-compose.yml&lt;/code&gt; files. So much so that it would have been easier to just start over with Kubernetes manifests. This is an important point to consider when deciding whether to use one tool over another. One may be easier initially but perhaps limits the possibilities in the future, or be harder to work with in complex scenarios. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#composes-consequences-and-risks"&gt;
  &lt;/a&gt;
  Compose's Consequences and Risks
&lt;/h2&gt;

&lt;p&gt;By using Compose in Kubernetes, you are limited in functionality. While Compose is a robust tool with a rich feature library, there are many things it cannot do. Objects like CRDs, Jobs, and StatefulSets cannot be created with Compose. Networking is possible, but it can quickly become unwieldy to define it in a &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;There are some technical downsides to the continuing use of Compose, but you will have to also consider the impact on your team, both current and future. Not many people are using Compose in production, so you'll likely struggle to find a new hire that's able to jump right in. There are also features of Compose that are not typically used, which you'll have to get familiar with to configure Kubernetes.&lt;/p&gt;

&lt;p&gt;If you manage to get your engineers to learn and use Compose efficiently, and you're fine with onboarding new people into the toolchain, you may still run into issues. Since not many teams use Compose in production, it can be tough to find guides and tutorials with examples. Many online resources will only include Kubernetes manifests as examples, and from here two things can happen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One option is that the engineer in the team will understand the tutorial and get everything defined in a &lt;code&gt;.yml&lt;/code&gt; file. This way, you'll continue to purely use Compose, but you'll have to carry the cost of engineering time spent converting the Kubernetes manifest. This also means that your engineers understand manifests well enough to convert them to another format, weakening the argument for using Compose. &lt;/li&gt;
&lt;li&gt;The other option is that the example manifest will be used as a Proof of Concept, but it will end up being used in production because of a deadline or other reasons. Now you have a mix of Compose files and Kubernetes manifests, which can quickly lead to confusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will have a tough time integrating with other tools on the market since many tools exist to expand upon existing Kubernetes manifests. Some of these tools help in easing deployment, like Helm. Other tools like Skaffold work with your manifests to run your application in Kubernetes as you work on it. You might find workarounds that allow you to use these tools, but you won't find any official documentation on setting them up. You'll have to maintain these workarounds, and it creates more room for error.&lt;/p&gt;

&lt;p&gt;Finally, you run the risk of having different teams using different tools. Developers may want to use Compose as it's more user-friendly on the surface, and they mostly care about getting the application to run and making optimizations through the code. Ops may want to get deeper into the roots of Kubernetes in ways only possible when using native Kubernetes tools. Typically they care about optimizations in the infrastructure, like networking and load balancing. Using Kubernetes manifests won't guarantee different teams using the exact same tools, but they will have the same common ground.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-options"&gt;
  &lt;/a&gt;
  Other Options
&lt;/h2&gt;

&lt;p&gt;As stated before, there are many tools available to help you work with Kubernetes. Many stick with Compose because it's easy to define containers, networking, and volumes, and that's a fair point. However, tools like &lt;a href="https://skaffold.dev/"&gt;Skaffold&lt;/a&gt;, &lt;a href="https://devspace.sh/"&gt;DevSpace&lt;/a&gt;, and &lt;a href="https://tilt.dev/"&gt;Tilt&lt;/a&gt; exist to make working on code that's meant to run in Kubernetes easier. These tools offer features such as watching your code, automatically building and deploying your application, and much more that's native to Kubernetes. &lt;/p&gt;

&lt;p&gt;These tools can help you transition from a Compose-based approach into something more akin to native Kubernetes. Their sole goal is to make life easier for developers while still using the basis of Kubernetes; manifests. Give them a try and see how they work for you, and whether you can find a way of getting them into your current toolchain. To get started, you can use Kompose as a way of converting your existing &lt;code&gt;docker-compose.yaml&lt;/code&gt; files into Kubernetes manifests. From here, you can either deploy them and get familiar with the deployment process, or you can look into the generated files and try to understand them.&lt;/p&gt;

&lt;p&gt;Whatever tool you choose to go with, the most important thing is that you know why you're using it. Many best practices exist because they're what suits most organizations. However, there will always be outliers, and you may be one of them. You may be in a situation where it indeed does make the most sense to use Compose as your only tool, and that is perfectly acceptable.&lt;/p&gt;

&lt;p&gt;You just need to know why you've chosen to go with the tool that you have, making it possible to reevaluate down the line whether it's still right for you or if you should consider switching to best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;On the surface, it can seem challenging to learn a new tool, and Kubernetes is quite heavy for new users. However, transitioning from Compose to native Kubernetes isn't as complicated as it may seem, and as you've now seen, there are many tools available to assist you with this. Switching to manifests will help you in many ways. Whether you make the switch is up to you, but consider whether it's the right choice and what advantages it can bring to you.&lt;/p&gt;

&lt;p&gt;You can start by converting your &lt;code&gt;docker-compose.yml&lt;/code&gt; to Kubernetes manifests with Kompose. That way you'll be using an application and definition that you're already familiar with instead of starting from scratch with an application you don't know.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@campful?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Campbell&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/train?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Filter array with multiple conditions</title>
      <author>Etamar</author>
      <pubDate>Mon, 12 Jul 2021 21:57:47 +0000</pubDate>
      <link>https://dev.to/itushthegiant/filter-array-with-multiple-conditions-5928</link>
      <guid>https://dev.to/itushthegiant/filter-array-with-multiple-conditions-5928</guid>
      <description>&lt;p&gt;Ive been working on my first "React" project and this project I build is a "Park Browser" which is basically an app that helps you search for a specific national park in USA either by address, city or state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycKjynVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx0aqnebtxw6b9za1u3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycKjynVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx0aqnebtxw6b9za1u3h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was really hard to understand how can I filter through an array with multiple conditions and also pass those conditions from a child component to parent.&lt;br&gt;
Of course I googled it right away and I found it on "stackoverflow" (credit to Narendra Jadhav from stackoverflow).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7IMPw6dF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0b0982gjj8lj9wcfpcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7IMPw6dF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0b0982gjj8lj9wcfpcf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Parent:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl0Lnk1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1twvqm0lzlf7bmjr53yw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl0Lnk1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1twvqm0lzlf7bmjr53yw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Child:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0D-0I2Ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41h71dun58epxhe3cus5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0D-0I2Ai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41h71dun58epxhe3cus5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seemed like its working but there was another problem,&lt;br&gt;
If you searched for a park by one of the conditions it worked but if you wanted to use another condition or use a different one it will not change the search, Until i found the "continue" method in JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TyhTXPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxge2wwqwcpd0phjcdzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TyhTXPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxge2wwqwcpd0phjcdzs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is pretty simple what the "continue" method does,&lt;br&gt;
If there are no filters to filter "continue" to the next "if" statement that will show me the parks that I am looking for by filter and if there are no results just return and empty search.&lt;/p&gt;

&lt;p&gt;It helped me a-lot with understanding how to pass data from child to parent and how to use multiple conditions to filter and array.&lt;/p&gt;

&lt;p&gt;I hope this post helped you with your errors,&lt;br&gt;
Good Luck!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Build Java Applications Today: July 12, 2021</title>
      <author>Karsten Silz</author>
      <pubDate>Mon, 12 Jul 2021 21:54:32 +0000</pubDate>
      <link>https://dev.to/ksilz/how-to-build-java-applications-today-july-12-2021-4im4</link>
      <guid>https://dev.to/ksilz/how-to-build-java-applications-today-july-12-2021-4im4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;TIOBE Index July 2021, Spring blesses GraphQL, tuning Hibernate’s query plan cache, GitHub previews AI coding assistant, Quarkus 2.0.1, Spring Cloud Hoxton.SR12, and a terrible chart.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme"&gt;
  &lt;/a&gt;
  README
&lt;/h2&gt;

&lt;p&gt;This is &lt;strong&gt;issue 44&lt;/strong&gt; of my weekly newsletter, “How To Build Java Applications Today”. I read all the Java newsletters, so &lt;strong&gt;you&lt;/strong&gt; don’t have to! And it’s “Java news with a smile”.&lt;/p&gt;

&lt;p&gt;If you like my newsletter, then &lt;a href="https://bpfnl.substack.com"&gt;subscribe to it on Substack&lt;/a&gt;! Or read it on &lt;a href="https://dev.to/ksilz/series/11995"&gt;dev.to&lt;/a&gt;,  the &lt;a href="https://thejavacafe.com/ksilz/series/1"&gt;Java Cafe&lt;/a&gt;, or &lt;a href="https://ksilz.medium.com"&gt;Medium&lt;/a&gt;. Even better: Share it with people who may be interested.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quote-of-the-week"&gt;
  &lt;/a&gt;
  Quote of the Week
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If everything seems under control, you're not going fast enough‌.&lt;/em&gt;&lt;br&gt;
&lt;a href="http://www.quotationspage.com/quote/39999.html"&gt;Mario Andretti&lt;/a&gt;, American race car driver (&lt;a href="https://en.wikipedia.org/wiki/Mario_Andretti"&gt;born 1940&lt;/a&gt;), encourages us to release faster. Or so I think.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#standup"&gt;
  &lt;/a&gt;
  Stand-Up
&lt;/h2&gt;

&lt;p&gt;My host country England &lt;a href="https://www.bbc.co.uk/sport/football/51198762"&gt;lost the European Football Championship to Italy&lt;/a&gt; last night (that’s soccer for my US readers). Adding insult to injury: The final game &lt;a href="https://en.wikipedia.org/wiki/UEFA_Euro_2020#Final"&gt;was in London&lt;/a&gt;, and England lost in a penalty shoot-out, as they have so often in the past.&lt;/p&gt;

&lt;p&gt;And yes, the United Kingdom has four different football teams: England, Wales, Scotland, and Northern Ireland. Except for Northern Ireland, &lt;a href="https://en.wikipedia.org/wiki/UEFA_Euro_2020#Qualified_teams"&gt;all took part&lt;/a&gt; this time.&lt;/p&gt;

&lt;p&gt;I can relate to the pain: When Germany hosted the Football World Cup in 2006, &lt;a href="https://en.wikipedia.org/wiki/2006_FIFA_World_Cup#Semi-finals"&gt;Italy defeated us Germans&lt;/a&gt; in the semi-final and &lt;a href="https://en.wikipedia.org/wiki/2006_FIFA_World_Cup#Final"&gt;went on to win&lt;/a&gt; (against France, also in a penalty shoot-out). BTW: &lt;a href="https://en.wikipedia.org/wiki/2006_FIFA_World_Cup#Quarter-finals"&gt;England lost&lt;/a&gt; in a penalty shoot-out against Portugal back then…&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#code-review"&gt;
  &lt;/a&gt;
  Code Review
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#issue-42-from-june-28-2021"&gt;
  &lt;/a&gt;
  Issue 42 from June 28, 2021
&lt;/h3&gt;

&lt;p&gt;I &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-ff1"&gt;wrote about the Scala 3 release&lt;/a&gt; - eight years in the making - two weeks ago. Want to hear more? Then listen to &lt;a href="https://javapubhouse.libsyn.com/episode-97-hey-there-scala-3-looking-good-with-those-new-features"&gt;Java Pub House podcast episode 97&lt;/a&gt;! Dean Wampler, the author of the just-published O'Reilly book &lt;a href="https://deanwampler.github.io/books/programmingscala.html"&gt;“Programming Scala” book&lt;/a&gt;, explains what’s new in Scala 3.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-ff1"&gt;Two weeks ago&lt;/a&gt;, I also wrote about “Java Applications in the Windows 11 App Store”. And &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-b5c"&gt;last week&lt;/a&gt;, I told you that you can download a preview. What I forgot to mention is that The Verge, like many other sites, has a &lt;a href="https://www.youtube.com/watch?v=eSajMxAelcc"&gt;video preview of Windows 11&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#bookmarks"&gt;
  &lt;/a&gt;
  Bookmarks
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#tiobe-index-july-2021-java-strikes-back-for-now"&gt;
  &lt;/a&gt;
  TIOBE Index July 2021: Java Strikes Back - For Now
&lt;/h4&gt;

&lt;p&gt;When we last looked at the popular monthly programming language ranking, Python placed ahead of Java two months in a row (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-457"&gt;issue #40&lt;/a&gt;). Well, this month, Java recaptured second place with 11.17%, a hair ahead of Python at 10.95%. But C at the top is only ahead of Python by 0.67%, so expect frequent changes in the first three spots over the next few months.&lt;/p&gt;

&lt;p&gt;The good news: Java can bounce back! The bad news: The long-term trend for Java is “down”. Check this &lt;a href="https://www.tiobe.com/tiobe-index/java/"&gt;TIOBE graph&lt;/a&gt;: Java fell from 26.5% in June 2001 to 11.2% today, which is a loss of 58%. &lt;/p&gt;

&lt;p&gt;Good news again: Java has a &lt;strong&gt;shrinking&lt;/strong&gt; slice of a &lt;strong&gt;growing&lt;/strong&gt; pie because the number of software developers &lt;a href="https://www.daxx.com/blog/development-trends/number-software-developers-world"&gt;grows every year&lt;/a&gt;. And more good news: In a world of microservices, it’s easier for us to write our code in Java, even if another team writes their code in Python, TypeScript, or C#.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tiobe.com/tiobe-index/?20210704"&gt;TIOBE Index July 2021&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#frameworks-amp-libraries"&gt;
  &lt;/a&gt;
  Frameworks &amp;amp; Libraries
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#spring-blesses-graphql"&gt;
  &lt;/a&gt;
  Spring Blesses GraphQL
&lt;/h4&gt;

&lt;p&gt;GraphQL a statically typed query language for APIs that has &lt;a href="https://graphql.org/faq/#why-should-i-use-graphql"&gt;advantages over JSON REST APIs&lt;/a&gt;. Spring now integrates GraphQL with a project predictably named &lt;a href="https://spring.io/blog/2021/07/06/hello-spring-graphql"&gt;Spring GraphQL&lt;/a&gt;. It’s the successor of the &lt;a href="https://www.graphql-java.com"&gt;GraphQL Java project&lt;/a&gt; that has existed for six years.&lt;/p&gt;

&lt;p&gt;No matter if you use Spring or not: An official Spring project lends credibility to GraphQL. So if you already use GraphQL: Good for you! If not: Why not &lt;a href="https://graphql.org/learn/"&gt;learn it&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;A Spring GraphQL 1.0 milestone is available now. The 1.0 release will probably arrive early next year. That’s why Spring GraphQL will have to wait two more Spring Boot releases before it gets included there - in May 2022, if this year is any indication.&lt;/p&gt;

&lt;p&gt;Talking about Spring Boot: Given the expected version jump of the Spring framework from 5.3 to 6.0 this fall, I thought Spring Boot would follow suit and go from 2.5 to 3.0. Well, I was wrong: The announcement talks about Spring Boot 2.6 and 2.7. 😒&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/07/06/introducing-spring-graphql"&gt;Announcement&lt;/a&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#how-to-tune-hibernates-query-plan-cache"&gt;
  &lt;/a&gt;
  How to Tune Hibernate’s Query Plan Cache
&lt;/h4&gt;

&lt;p&gt;Chances are, our Java projects use Hibernate to access data sources. Did you know that Hibernate needs to compile queries and store them in a cache with a default size of 2048 entries? I didn’t either.&lt;/p&gt;

&lt;p&gt;Now, if our application uses more queries, then performance will suffer: Preparing &lt;a href="https://en.wikipedia.org/wiki/Jakarta_Persistence_Query_Language"&gt;JPQL&lt;/a&gt; queries from scratch takes five times as long as using a cached version. And preparing native SQL queries is 50% slower.&lt;/p&gt;

&lt;p&gt;We can fix this with the setting &lt;code&gt;hibernate.query.plan_cache_max_size&lt;/code&gt;. Read the article below for more details on the benchmarks and how you can check and measure Hibernate’s Query Plan Cache.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thorben-janssen.com/hibernate-query-plan-cache/"&gt;Article&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#github-previews-ai-coding-assistant"&gt;
  &lt;/a&gt;
  GitHub Previews AI Coding Assistant
&lt;/h4&gt;

&lt;p&gt;We humans can screw things up a lot. But if we believe in science-fiction movies like “Terminator 2”, then we need a machine to truly create a mess. Now here’s our chance to make a bigger mess in our code than usual: Use a machine to write code!&lt;/p&gt;

&lt;p&gt;The machine I’m talking about is GitHub Copilot, an “AI pair programmer”, as GitHub &lt;a href="https://copilot.github.com"&gt;calls it&lt;/a&gt;. In the example, a human enters this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Determine whether the sentiment of text is positive
// Use a web service
async function isPositive(text: string): Promise&amp;lt;boolean&amp;gt; {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the machine writes this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const response = await fetch(`http://text-processing.com/api/sentiment/`, {
    method: "POST",
    body: `text=${text}`,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
    },
  });
  const json = await response.json();
  return json.label === "pos";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Copilot works best with Python, JavaScript, TypeScript, Ruby, and Go. But I assume that Java is among the “dozens of languages” that it also knows.&lt;/p&gt;

&lt;p&gt;So how the heck does this work?&lt;/p&gt;

&lt;p&gt;As the example suggests, the Copilot analyzes comments (English only for now) and method names and then creates the method body. GitHub trained it with - you guessed it - code from GitHub repositories. This works because if we developers excel at something, it’s expressing succinctly what our code is to do, writing comments, and naming things.&lt;/p&gt;

&lt;p&gt;Haha! Just kidding, of course: We developers typically suck at these three things. If that’s how the Copilot got trained, then our jobs are safe for now! 😅&lt;/p&gt;

&lt;p&gt;There are more questions beyond “Does it work?”: Will Copilot add “&lt;a href="https://mempko.wordpress.com/2021/06/30/bugs-faster-than-the-speed-of-thought/"&gt;bugs faster than the speed of thought&lt;/a&gt;” (nice heading)? Or is it the “&lt;a href="https://twitter.com/monkchips/status/1410246942156861441"&gt;new Stack Overflow&lt;/a&gt;” (also a nice one)? Will it add open-source into proprietary projects? Or violate licensing notice requirements of open-source projects?&lt;/p&gt;

&lt;p&gt;I’m sure that this won’t be the last we hear of this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/news/2021/07/github-copilot-pair-programmming/"&gt;InfoQ article&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#releases"&gt;
  &lt;/a&gt;
  Releases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#quarkus-201"&gt;
  &lt;/a&gt;
  Quarkus 2.0.1
&lt;/h4&gt;

&lt;p&gt;This first maintenance release of Red Hat’s modern microservice framework comes one week after 2.0.0 (see last week’s issue). It’s a “safe upgrade for anyone already using 2.0.0.Final”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-0-1-final-released/"&gt;Announcement&lt;/a&gt;, &lt;a href="https://github.com/quarkusio/quarkus/releases/tag/2.0.1.Final"&gt;Release notes&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-cloud-hoxtonsr12"&gt;
  &lt;/a&gt;
  Spring Cloud Hoxton.SR12
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://spring.io/blog/2020/04/30/updates-to-spring-versions"&gt;Spring version scheme change&lt;/a&gt; can’t come soon enough! Why? Because I don’t want to write slightly bizarre-sounding sentences like “This will be the last regularly scheduled release of the Hoxton Release Train”. &lt;/p&gt;

&lt;p&gt;Anyhow, this release is for Spring Boot 2.3.x and 2.2.x. 23 issues got closed this time around.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/07/07/spring-cloud-hoxton-sr12-has-been-released"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#and-now-for-something-completely-different"&gt;
  &lt;/a&gt;
  And Now For Something Completely Different
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#candidate-for-most-terrible-chart-of-the-year"&gt;
  &lt;/a&gt;
  Candidate for “Most Terrible Chart of The Year”
&lt;/h4&gt;

&lt;p&gt;Charts make it easier to spot important information in a sea of data and can highlight trends. Well, most do. Not &lt;a href="https://twitter.com/antumbral/status/1407861007209222151?s=21"&gt;this CNN one&lt;/a&gt;. Go ahead and spot what’s wrong with it.&lt;/p&gt;

&lt;p&gt;Did you &lt;a href="https://twitter.com/antumbral/status/1407861007209222151?s=21"&gt;look at it yet&lt;/a&gt;? I’m waiting.&lt;/p&gt;

&lt;p&gt;Ok, so what did you find?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Although the big title is “Violent crime is a very big problem”, it doesn’t report on crime &lt;strong&gt;rates&lt;/strong&gt;. The chart shows &lt;strong&gt;survey&lt;/strong&gt; responses: “% of US adults who believe that violent crime is a ‘very big problem’” would have been the correct title.&lt;/li&gt;
&lt;li&gt;The chart goes from right to left.&lt;/li&gt;
&lt;li&gt;Different durations have the same length on the X-axis: 5 months (October 2018 - March 2019), 16 months (March 2019 - June 2020), and 10 months (June 2020 - April 2021).&lt;/li&gt;
&lt;li&gt;The Y-axis doesn’t start at 0 but at 35%, making the differences seem more significant than they are.&lt;/li&gt;
&lt;li&gt;The margin of error of survey responses is +/-3%, as the fine print below the survey reveals. So the “52% in October 2018 vs. 48% in April 2021” could also be “49% in October 2018 vs. 51% in April 2021”. In other words: Most differences are not statistically significant and don’t prove anything.&lt;/li&gt;
&lt;li&gt;The one statistically significant change was an 8% drop from 49% in March 2019 to 41% in June 2020. Maybe there is &lt;a href="https://en.wikipedia.org/wiki/COVID-19_pandemic#2020"&gt;an explanation for this&lt;/a&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://twitter.com/antumbral/status/1407861007209222151?s=21"&gt;Tweet with terrible chart&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;Karsten Silz is the author of this newsletter. He is a full-stack web &amp;amp; mobile developer with 22 years of Java experience, author, speaker, and &lt;a href="https://resultsbase.net/event/5809/results/3294285"&gt;marathon runner&lt;/a&gt;. Karsten got a Master's degree in Computer Science at the Dresden University of Technology (Germany) in 1996.&lt;/p&gt;

&lt;p&gt;Karsten has worked in Europe and the US. He co-founded a software start-up in the US in 2004. Karsten led product development for 13 years and left after the company was sold successfully. He co-founded the UK SaaS start-up "&lt;a href="https://yourhomeingoodhands.co.uk/"&gt;Your Home in Good Hands&lt;/a&gt;" as CTO in 2020. Since 2019, Karsten also works as a contractor in the UK.&lt;/p&gt;

&lt;p&gt;Karsten has &lt;a href="https://bpfnl.substack.com/"&gt;this newsletter&lt;/a&gt;, a &lt;a href="https://betterprojectsfaster.com/"&gt;developer website&lt;/a&gt;, and a &lt;a href="https://ksilz.com/"&gt;contractor site&lt;/a&gt;. He's on &lt;a href="https://www.linkedin.com/in/ksilz/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/karsilz"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://github.com/ksilz"&gt;GitHub&lt;/a&gt;. Karsten is also an &lt;a href="https://www.infoq.com/profile/Karsten-Silz"&gt;author at InfoQ&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>bpf</category>
    </item>
    <item>
      <title>Build a Chatbot with vanilla JavaScript</title>
      <author>Emmanuel Ugwu</author>
      <pubDate>Mon, 12 Jul 2021 21:53:22 +0000</pubDate>
      <link>https://dev.to/ugwutotheeshoes/build-a-chatbot-with-vanilla-javascript-5akn</link>
      <guid>https://dev.to/ugwutotheeshoes/build-a-chatbot-with-vanilla-javascript-5akn</guid>
      <description>&lt;p&gt;Recently, I visited a website and while surfing through it, the website’s chatbot caught my attention. I had been looking for a new project to work on, so I got to researching how I could build a chatbot using vanilla JavaScript. While building this project from scratch I stumbled across a lot of difficulties based on the knowledge I had and when I say 'from scratch', I just mean I did not use any additional libraries or APIs while building. Part of this code is based on existing blog posts, articles, and YouTube videos. Also note that this project is more of an insight into JavaScript fundamentals, not any form of &lt;a href="https://en.wikipedia.org/wiki/Artificial_intelligence"&gt;artificial intelligence (AI)&lt;/a&gt; or machine learning. The main prerequisite for understanding this article is the knowledge of HTML, CSS, and vanilla JavaScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;p&gt;Let’s create a folder to house our project files, broadly divided into three parts —HTML, CSS and JavaScript. Then we build a barebone HTML file which contains all our HTML components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Chatbot&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Chatbot&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Say something..."&lt;/span&gt; &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll do the same for our &lt;code&gt;style.css&lt;/code&gt; file to add styling to our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#listening-for-events"&gt;
  &lt;/a&gt;
  Listening for events
&lt;/h1&gt;

&lt;p&gt;First off, we’ll have to check if the content of our page has loaded before our script has a chance to run and we’ll also need a keycode to send a message to the chatbot using our &lt;code&gt;enter&lt;/code&gt; key.&lt;br&gt;
For this to work, an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"&gt;&lt;code&gt;addEventListener&lt;/code&gt;&lt;/a&gt; method is needed. It calls up a function whenever a specified event is delivered to the target. The two events our &lt;code&gt;addEventListener&lt;/code&gt; listens for are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event"&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;&lt;/a&gt; - this event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event"&gt;&lt;code&gt;keydown&lt;/code&gt;&lt;/a&gt; - this event is fired for all keys, regardless of whether they produce a character value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#keyboardevent-code"&gt;
  &lt;/a&gt;
  KeyboardEvent code
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;keydown&lt;/code&gt; event is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code"&gt;&lt;code&gt;KeyboardEvent.code&lt;/code&gt;&lt;/a&gt; property which provides a code indicating which of the user’s keyboard keys is pressed. For example, a lowercase "a" will be reported as 65 by &lt;code&gt;keydown&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt;. An uppercase "A" is reported as 65 by both events.&lt;br&gt;
With the help of our &lt;code&gt;keydown&lt;/code&gt; event, we can create an effective way of sending a message to the chatbot by pressing the &lt;code&gt;enter&lt;/code&gt; key. Our &lt;code&gt;addEventListener&lt;/code&gt; would listen and respond anytime the &lt;code&gt;enter&lt;/code&gt; key is pressed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet above, &lt;code&gt;e.code === "Enter"&lt;/code&gt; indicates the Keycode 13 directly assigned to the &lt;code&gt;Enter&lt;/code&gt; button. To know more about Keycodes, read up on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent"&gt;&lt;code&gt;KeyboardEvent&lt;/code&gt;&lt;/a&gt; object.&lt;br&gt;
The input value from the user is assigned to a variable which we’ll make use of later on. One last thing to have in mind is to clear or reset our input once our message is sent, &lt;code&gt;.value = ""&lt;/code&gt; makes this possible. We can use &lt;code&gt;.reset()&lt;/code&gt; if our input field was a &lt;code&gt;form&lt;/code&gt; tag but sadly, it isn’t.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-user-and-chatbot-responses"&gt;
  &lt;/a&gt;
  Creating User and Chatbot responses
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#editing-user-text-input"&gt;
  &lt;/a&gt;
  Editing user text input
&lt;/h2&gt;

&lt;p&gt;Next, we’ll create a function for our chatbot behaviour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//remove all characters except word characters, space, and digits &lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\w\s]&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\d]&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/ a /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;// replaces 'tell me a story' to 'tell me story'&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/i feel /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/whats/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// replaces "whats" to "what is"&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/please /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/ please/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/r u/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//replaces "r u" to "are you"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our user’s input value need to undergo some changes for our chatbot to understand the message sent by the user as shown above and by doing that we’ll have to apply some JavaScript methods which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"&gt;toLowerCase()&lt;/a&gt; - Converting the input values to lowercase.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;Regex&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#:~:text=The%20replace()%20method%20returns,first%20occurrence%20will%20be%20replaced."&gt;replace()&lt;/a&gt; -  This removes a non word/space character and digit. For example it replaces certain things like &lt;code&gt;whats up&lt;/code&gt; to &lt;code&gt;what is up&lt;/code&gt; or &lt;code&gt;r u&lt;/code&gt; to &lt;code&gt;are you&lt;/code&gt;. If the user says &lt;code&gt;what is going on&lt;/code&gt;, &lt;code&gt;whats going on&lt;/code&gt;, or &lt;code&gt;what's going on&lt;/code&gt;, they will all lead to the same valid bot response.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim"&gt;trim()&lt;/a&gt; - To trim trailing whitespaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-set-of-arrays"&gt;
  &lt;/a&gt;
  Creating a set of arrays
&lt;/h2&gt;

&lt;p&gt;Now that we’ve gotten a good idea of how the user’s text input would turn out, we’ll have to create a set of arrays which include possible user texts and another array of appropriate chatbot responses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userTexts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;//0 &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;good morning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;good afternoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;good day&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//1&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how is life&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how are things&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how are you doing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you doing good&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you fine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how is your day going&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how is your day&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what's up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whats up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;you good&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//2&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what are you doing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what is going on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what is up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how is your day&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;what's up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whats up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;you good&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//3&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;how old are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you old&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//4&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;who are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you human&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you bot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;are you human or bot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//5&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;who created you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;who made you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;were you created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;//0&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Howdy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//1&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fine... and you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pretty well, and you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fantastic, and you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//2&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nothing much&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;About to go to sleep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Can you guess?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I don't know actually&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//3&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am infinite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//4&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am just a bot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a bot. What are you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;//5&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The one true God, JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll need to create an alternate set of arrays for a situation where the chatbot can not understand the message being sent by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alternative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Same&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Go on...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bro...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Try again&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I don't understand :/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can add extra user texts and reponses if needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compare-and-match-user-and-chatbot-responses"&gt;
  &lt;/a&gt;
  Compare and match User and Chatbot responses
&lt;/h2&gt;

&lt;p&gt;Our chatbot function still needs an  &lt;code&gt;IF/ELSE&lt;/code&gt; statement to compare and match our arrays for a suitable reply or produce an alternate reply if we get a user input that does not match our &lt;code&gt;userTexts&lt;/code&gt; array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="c1"&gt;// search for exact match in `userTexts`&lt;/span&gt;
      &lt;span class="nx"&gt;finalResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// if everything else fails, bot produces a random alternative reply&lt;/span&gt;
      &lt;span class="nx"&gt;finalResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;alternative&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;alternative&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// to update our HTML DOM element &lt;/span&gt;
    &lt;span class="nx"&gt;addToChat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;finalResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have to match the user and chatbot arrays to making it look like a conversation between a user and the chatbot. Notice in the code snippet above, if we get a user input that matches an option at userTexts[0] such as ‘hi’ or ‘hello’, the bot will answer with a corresponding reply from its own set of options from botReplies[0] and so on. Now we’ll add the function that matches these two set of arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userTexts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;replies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;botReplies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function works like this, we’ll first have to loop through the index of the userTexts array, then we’ll apply another loop to check if our user’s input text matches any of the responses at that particular index. After checking to see if it matches, we’ll randomly pick a corresponding reply from the set of  botReplies arrays available.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#updating-our-dom-element"&gt;
  &lt;/a&gt;
  Updating our DOM element
&lt;/h1&gt;

&lt;p&gt;Finally we’ll update our HTML DOM (Document Object Model) so our messages can actually display for whenever the user or the chatbot sends a message. Making use of the &lt;code&gt;.appendChild&lt;/code&gt; method, we could create a thread of messages by updating the user and chatbot field every time a message is sent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addToChat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;finalResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;userDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;userDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;userDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/span&amp;gt;
    messagesContainer.appendChild(userDiv)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;botDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;botImg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;botText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;botImg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;avatar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bot response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;botText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Typing...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;botImg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;botText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;messagesContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;botDiv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://youtu.be/watch?feature=player_embedded&amp;amp;v=9RdafdAfS5Q&amp;lt;br&amp;gt;%0A"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1ldcDRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/9RdafdAfS5Q/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click on the image above to watch a demo of our application being tested&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;By following the steps in this article, you can build a chatbot with plain JavaScript.&lt;br&gt;
For better understanding and overview of the code base of this article, you can check it out on &lt;a href="https://github.com/ugwutotheeshoes/chatbot"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>fintech</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How can I run natively 'Big Commerce Stencil CLI' on Apple Silicon M1 Chip</title>
      <author>Caglar</author>
      <pubDate>Mon, 12 Jul 2021 21:45:00 +0000</pubDate>
      <link>https://dev.to/caglaroptimum7/how-can-i-run-natively-big-commerce-stencil-cli-on-apple-silicon-m1-chip-3m1h</link>
      <guid>https://dev.to/caglaroptimum7/how-can-i-run-natively-big-commerce-stencil-cli-on-apple-silicon-m1-chip-3m1h</guid>
      <description>&lt;p&gt;I am a front-end engineer who mostly works on a Bigcommerce platform. &lt;strong&gt;Bigcommerce&lt;/strong&gt; uses a handlebar with the 'stencil command line interface' and it requires 'node version manager' (nvm).&lt;/p&gt;

&lt;p&gt;I switched my Intel Macbook Pro with &lt;strong&gt;M1 Chip Macbook Pro&lt;/strong&gt; then I couldn't realize this migration will be a little bit &lt;strong&gt;ticky.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I installed homebrew then node and nvm packages then I followed the steps on &lt;a href="https://developer.bigcommerce.com/stencil-docs/installing-stencil-cli/installing-stencil"&gt;bigcommerce developer website.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;However, almost every project gives different errors but all of them are related to the 'node' version. I've gotten few-hour research on Google but these were not about BigCommerce 'stencil-cli',&lt;/p&gt;

&lt;p&gt;Jump to 'TL;DR'&lt;br&gt;
Here is the perfect version of the NVM for your delicious Stencil Templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# For ARM based macs // for bash
arch -x86_64 /bin/zsh

# For ARM based macs // for Fish Shell
arch -x86_64 /usr/local/bin/fish

brew install node
brew install nvm

# which is LTS for v12
nvm install 12.13.0
nvm alias default 12.13.0
npm install -g @bigcommerce/stencil-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then start your project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stencil start -o
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ8piFWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/cLqphHM/bigcommerce-stencil-apple-m1-chip-optimum7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ8piFWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/cLqphHM/bigcommerce-stencil-apple-m1-chip-optimum7.png" alt="Current Version Of my NVM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please check out &lt;a href="https://optimum7.com"&gt;our website&lt;/a&gt; to get more information about BigCommerce Development and Marketing.&lt;/p&gt;

&lt;p&gt;Thanks for reading, Happy hacking 🧡&lt;/p&gt;

</description>
      <category>bigcommerce</category>
      <category>stencil</category>
      <category>applesilicon</category>
      <category>m1chip</category>
    </item>
    <item>
      <title>How to change details label when open/closed without JavaScript</title>
      <author>John P. Rouillard</author>
      <pubDate>Mon, 12 Jul 2021 21:26:26 +0000</pubDate>
      <link>https://dev.to/rouilj/how-to-change-details-label-when-open-closed-without-javascript-1n3c</link>
      <guid>https://dev.to/rouilj/how-to-change-details-label-when-open-closed-without-javascript-1n3c</guid>
      <description>&lt;p&gt;I wish the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details"&gt;details element&lt;/a&gt; would support different labels (provided by the summary tag) for its open and closed states.&lt;/p&gt;

&lt;p&gt;Consider a label of "Closed, click to open" when the details element is closed and "Open, click to close" when open:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WKFx4-D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6955uhrejxff5exayli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WKFx4-D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6955uhrejxff5exayli.png" alt="Open details element with label changed to indicate state."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sadly only one summary tag is supported by the details element. However you can use an empty summary with a ::before pseudo-element to implement this.&lt;/p&gt;

&lt;p&gt;Save the following to a file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;style&amp;gt;
    #widget1 div { padding-inline-start: 1em; max-width: 20em;}
    #widget1 summary::before { content: "Closed, click to open";}
    #widget1[open] summary::before { content: "Open, click to close";}
    #widget1[open] summary { height: 2em;}
  &amp;lt;/style&amp;gt;

  &amp;lt;p&amp;gt; Text before details.&amp;lt;/p&amp;gt;
  &amp;lt;details id="widget1"&amp;gt;
    &amp;lt;summary&amp;gt;&amp;lt;/summary&amp;gt;
    &amp;lt;div&amp;gt;
    A widget can be in one of two states. The default closed
    state displays only the triangle and the label inside summary
    (or a user agent-defined default string if no summary).
    &amp;lt;/div&amp;gt;
  &amp;lt;/details&amp;gt;
  &amp;lt;p&amp;gt;Text after details.&amp;lt;/p&amp;gt;
  &amp;lt;body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to experiment.&lt;br&gt;
The second and third style lines are where the magic happens.&lt;/p&gt;

&lt;p&gt;Note that it might not be accessible. I didn't try to see if adding a live region aria label to the summary would cause the label change to be announced. I suspect it will not, but refining this is left as an exercise for the reader. Add your experimental findings to the comments below.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>What is AWS Infinidash?</title>
      <author>Mishi</author>
      <pubDate>Mon, 12 Jul 2021 21:25:08 +0000</pubDate>
      <link>https://dev.to/aws-builders/what-is-aws-infinidash-a5k</link>
      <guid>https://dev.to/aws-builders/what-is-aws-infinidash-a5k</guid>
      <description>&lt;p&gt;As of today, AWS offers over 200 products and services with its own, unique name and functionality. Getting familiar with them is not an easy task and most AWS professionals only keep up to date with them in their respective fields. For example, if you are managing containers there are currently 17 ways to run them on AWS. This means 17 different services with their own and different pricing models.&lt;/p&gt;

&lt;p&gt;On June 30, 2021, Joe Nash raised the question on Twitter about what happens if a small and dedicated group of developers start tweeting about a made-up AWS product. Would it appear in job specifications within a week? He suggested the word Infinidash but was open to other suggestions. He made it clear that “the intended joke here was that AWS product brands are completely impenetrable and indistinguishable from eachother (sic), let alone reality, and not “lol recruiters””.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TovSXrn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1342401247522004992/QOCvBRO6_normal.jpg" alt="Joe Nash profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Joe Nash
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jna_sh
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I am convinced that a small and dedicated group of twitter devs could tweet hot takes about a completely made up AWS product, idk AWS Infinidash or something, and it would appear as a requirement on job specs within a week
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:10 AM - 30 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1410178986978775040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1410178986978775040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1410178986978775040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The name, Infinidash was so apt that it rapidly became a hit on Twitter and soon other people started using it. People started making videos describing the service that may sound real for the general public but clearly sounds fake for professionals.&lt;/p&gt;

&lt;p&gt;Hand-on AWS even updated the original AWS certification diagram, highlighting Infinidash as the highest level of professional certification available for AWS.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGlc0gJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E5PM16pUYAACJYS.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycudAzkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1275912360180494338/Fob1vTOI_normal.jpg" alt="Hands-on AWS profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Hands-on AWS
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @handsonaws
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      New certification! &lt;br&gt;&lt;br&gt;Now in Beta. Coming 2021 Q5&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/AWS"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Infinidash"&gt;#Infinidash&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:27 PM - 01 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1410696636590825473" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1410696636590825473" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1410696636590825473" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Soon AWS employees saw the potential in this hype and started to tweet about AWS Infinidash, including Jeff Barr Chief Evangelist for the Amazon Web Services.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIHXZAi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E5Uaq1AUYAIs6Nw.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qv16LiyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1368794503285383171/qoMhip1Z_normal.jpg" alt="Jeff Barr ☁️ (@ 🏠 ) 💉 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jeff Barr ☁️ (@ 🏠 ) 💉
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jeffbarr
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Oddly enough not one request yet for &lt;a href="https://twitter.com/hashtag/AWS"&gt;#AWS&lt;/a&gt; Infinidash support in CloudFormation. Share your use cases here and I'll pass them along to the team. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:45 PM - 02 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1411063383302934531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1411063383302934531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1411063383302934531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Only two days have passed since Joe’s original tweet and even Werner Vogels CTO of Amazon jumped on board:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4ATQc23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E5SuBsjVUAExMeP.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLM_ot8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/563188960394891264/z3-Rh11q_normal.jpeg" alt="Werner Vogels profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Werner Vogels
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/werner"&gt;@werner&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The official AWS &lt;a href="https://twitter.com/hashtag/Infinidash"&gt;#Infinidash&lt;/a&gt; GA event is tonight at half time during the &lt;a href="https://twitter.com/hashtag/BELITA"&gt;#BELITA&lt;/a&gt; game in the Allianz Arena in Munich. You can buy me a beer to celebrate our most important launch ever... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:50 PM - 02 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1410943935124447237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1410943935124447237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1410943935124447237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;As of the writing of this article, the Infinidash movement is only at its beginning and eventually will expand beyond Twitter. While I don’t completely agree with Joe’s take on AWS services I clearly find the movement interesting. I believe that AWS also saw an opportunity in this and we will be hearing more about AWS Infinidash in the near future. I am curious to see what comes out of this and what AWS does with such a unique and apt name.&lt;/p&gt;


&lt;p&gt;&lt;br&gt;
  Sources&lt;br&gt;
  &lt;ul&gt;
&lt;li&gt;AWS Infinidash logo by &lt;a href="https://twitter.com/kangadac"&gt;David Cuthbert&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Originally published at &lt;a href="https://roadtoaws.com/"&gt;Road to AWS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are the Interface predicate and Interface functions?</title>
      <author>Wagner Negrão</author>
      <pubDate>Mon, 12 Jul 2021 21:23:37 +0000</pubDate>
      <link>https://dev.to/wagnernegrao/what-are-the-interface-predicate-and-interface-functions-36o7</link>
      <guid>https://dev.to/wagnernegrao/what-are-the-interface-predicate-and-interface-functions-36o7</guid>
      <description>&lt;p&gt;Writing the post about &lt;a href="https://dev.to/wagnernegrao/what-is-the-consumer-in-a-lambda-function-528k"&gt;Consumer Interface&lt;/a&gt;, I thought it interesting to write about Predicate Interface and  Function Interface.&lt;/p&gt;

&lt;p&gt;We go to start with Predicate Interface, this interface is an interface functional a little different from Consumer Interface that receives a parameter and does not return anything. The Predicate interface receives a parameter and returns a value boolean. The function that an interface receives is primarily some comparison that can have with returns a boolean.&lt;/p&gt;

&lt;p&gt;see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;


&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we have a creation of a list and after that is created a filter to know what the pair numbers are. I'm using this example because the method 'filter' receives an interface predicate and stays easier to explain the example.&lt;/p&gt;

&lt;p&gt;Thus to receive a Predicate, he needs to pass a condition of comparison, in the example we have that do 'c%2' to know the rest of division, if it equals 0, this will generate an answer of true or false, thus satisfy the conditions of use of Predicate Interface. When performing a filter he will pass forward only what is true and eliminate from the stream all that is false. It's good to highlight that the list will not modify the filter but the stream that was created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nl"&gt;Result:&lt;/span&gt;

&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results presented are the number pairs after being filtered.&lt;/p&gt;




&lt;p&gt;Now  I will speak a little about the Function interface.&lt;/p&gt;

&lt;p&gt;The Function Interface é some more generics and well malleable to work with, which we see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="no"&gt;R&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How we can see inside of the interface, he receives a type T and returns a type R. This return does not need to necessarily return a type that was passed, soon it can be used for transformation.&lt;/p&gt;

&lt;p&gt;See an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" - Type: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getSimpleName&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;

&lt;span class="nl"&gt;Result:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;Type:&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;Type:&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;Type:&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above we have a list of strings, after creating a stream and used the function 'Map' to convert the values of the string to Integer and a present in CLI the variable and the be the type.&lt;/p&gt;

&lt;p&gt;We used the method Map of stream because to operate it must receive the Functional Interface, that is why we were able to realize the transformation of string to Integer. We see step by step, the method 'Apply' of interface receives a parameter and has that execute an action and return something, that in we case would return an Integer, for this reason, the method Map is known for a method that if used to transform items of a stream.&lt;/p&gt;

&lt;p&gt;This example presented is well simple, but I believe that it suits to understand possible applications using the Function Interface or mainly the Map() that facilitate quiet work with the transformation of objects.&lt;/p&gt;

&lt;p&gt;I must emphasize that in we case map(), creating the new stream, all of them being integers, and this does not influence anything the stream principal, he continued being of String type.&lt;/p&gt;

&lt;p&gt;We can leave this code more elegant using methods reference, but this will be the subject of other posts.&lt;/p&gt;

</description>
      <category>java</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>functional</category>
    </item>
    <item>
      <title>[PT-BR] Be the exception! Dicas para dominar exceções em seus códigos Java</title>
      <author>Maximillian Arruda</author>
      <pubDate>Mon, 12 Jul 2021 20:07:20 +0000</pubDate>
      <link>https://dev.to/dearrudam/be-the-exception-dicas-para-dominar-excecoes-em-seus-codigos-java-4nlo</link>
      <guid>https://dev.to/dearrudam/be-the-exception-dicas-para-dominar-excecoes-em-seus-codigos-java-4nlo</guid>
      <description>&lt;p&gt;Você já se perguntou: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Como será que devo criar as exceções para minha as minhas regras de negócio?&lt;/li&gt;
&lt;li&gt;Será que não estou criando exceções demais?&lt;/li&gt;
&lt;li&gt;Em relação às exceções das regras de negócios que estou criando: devo extender de RuntimeException ou de Exception?&lt;/li&gt;
&lt;li&gt;E quanto a lidar com o tratamento de exceções:&lt;/li&gt;
&lt;li&gt;E as mensagem de erro, estou sendo claro nelas?&lt;/li&gt;
&lt;li&gt;será que estou logando de maneira adequada a captura de exceções em meus códigos?&lt;/li&gt;
&lt;li&gt;Será que estou "silenciando" uma exceção de maneira equivocada?&lt;/li&gt;
&lt;li&gt;Será que estou desenvolvendo meus códigos "orientados à exceções"?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É comum desenvolvedores Java enfrentarem esses dilemas quando se há a necessidade de desenvolver ou lidar com exceções em seus códigos. &lt;/p&gt;

&lt;p&gt;Uns lidam com exceções como &lt;strong&gt;"erros"&lt;/strong&gt; da  aplicação, outros como &lt;strong&gt;"caminhos alternativos"&lt;/strong&gt; para as regras de negócios em questão e assim por diante. É algo interessante e muitas vezes interpretativa.&lt;/p&gt;

&lt;p&gt;Tem desenvolvedores que se utilizam da forma que a linguagem &lt;strong&gt;"força"&lt;/strong&gt; o tratamento das exceções a fim que atingir o seu objetivo, e acho que todos eles estão corretos de acordo com o cada contexto alvo. &lt;/p&gt;

&lt;p&gt;Há uns meses atrás tive uma discussões interessantes com outros desenvolvedores e em particular com a comunidade &lt;strong&gt;SouJava&lt;/strong&gt; sobre o assunto. Quero parabenizar a todos pelas ótimas discussões &lt;strong&gt;(You rock guys!!!)&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Mas uma coisa que temos que admitir: pode não parecer, mas exceções são peças importantes para entender os cenários &lt;strong&gt;"excepcionais"&lt;/strong&gt; que &lt;strong&gt;"brotam"&lt;/strong&gt; em tempo de desenvolvimento e de execução em nossos códigos.&lt;/p&gt;

&lt;p&gt;Vamos explorar algumas dessas dicas que possam nos ajudar a modelar e lidar com exceções em nossos códigos Java. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%A3o-conhecer-a-hierarquia-de-classes-de-exce%C3%A7%C3%B5es-do-java"&gt;
  &lt;/a&gt;
  Não conhecer a hierarquia de classes de exceções do Java
&lt;/h2&gt;

&lt;p&gt;Essa é uma dúvida que pode atrapalhar e muito a modelagem do código.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ObsqfQLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em6woonxnfn1x7nfu2t2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObsqfQLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em6woonxnfn1x7nfu2t2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Olhando a hierarquia das classes de exceções do Java podemos reconhecer que as classes em vermelho são as consideradas &lt;strong&gt;Checked Exceptions&lt;/strong&gt; e as amarelas são as &lt;strong&gt;Unchecked Exception&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#n%C3%A3o-saber-a-diferen%C3%A7a-entre-checked-exceptions-e-unchecked-exceptions-e-quando-us%C3%A1las"&gt;
  &lt;/a&gt;
  Não saber a diferença entre Checked Exceptions e Unchecked Exceptions e quando usá-las
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Checked Exceptions&lt;/strong&gt; são exceções que devem ser usadas para &lt;strong&gt;erros recuperáveis ou que sejam requisitos de um regra de negócio importante&lt;/strong&gt;. Normalmente exceções de seu domínio classificam-se nessa categoria. &lt;strong&gt;O compilador da linguagem vai obrigar o tratamento dela sempre que um método que declarativamente a lançar for chamado&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Já as &lt;strong&gt;Unchecked Exceptions&lt;/strong&gt; devem ser utilizadas &lt;strong&gt;quando algum cenário "excepcional" é irreversível ou irrecuperável&lt;/strong&gt;. A princípio não deveríamos capturar esses tipos de exceções. Normalmente utilizam-se &lt;strong&gt;"Tratadores de exceções"&lt;/strong&gt; para esse fim, que geralmente é o de notificar o utilizador da regra que algo aconteceu e não há nada o que fazer para aquela situação.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#capturar-toda-exce%C3%A7%C3%A3o-como-exception"&gt;
  &lt;/a&gt;
  Capturar toda exceção como Exception
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Pra quê criar minhas exceções, vamos utilizar a que tem!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bom, capturar qualquer exceção (ou todas... hehehe) como Exception pode ser um problema. O mesmo ocorre do lado de quem está escrevendo um método que lança somente exceções do tipo Exception.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;debitAccount&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transferTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creditAccount&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// Ok, mas o que aconteceu?&lt;/span&gt;
    &lt;span class="c1"&gt;// Teremos que checar a mensagem, e torcer para que ela seja útil&lt;/span&gt;
    &lt;span class="c1"&gt;// E talvez analisar a stacktrace&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No código acima, por utilizar somente a classe Exception, a identificação está prejudicada então &lt;strong&gt;se a mensagem de erro não ajudar, a análise do stacktrace será um dos únicos pontos para sua identificação&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Como a classe Exception é uma &lt;strong&gt;checked exception&lt;/strong&gt; então crie suas exceções a partir dela para os cenários queira que o compilador force o tratamento da mesma. &lt;strong&gt;Lembre-se de criar suas exceções checadas para casos que devem e que realmente fazem sentido de acordo com seu domínio&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criar-muitas-exce%C3%A7%C3%B5es-de-maneira-desordenada"&gt;
  &lt;/a&gt;
  Criar muitas exceções de maneira desordenada
&lt;/h2&gt;

&lt;p&gt;Cuidado pra não criar exceções para tudo! Caso o fizer, provavelmente terá muitas classes para gerenciar e manter então crie somente as exceções necessárias e seja claro nas mensagens.&lt;/p&gt;

&lt;p&gt;Imagine em um sistema de transferência de valores entre contas, onde criássemos uma exceção para cada cenário:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;debitAccount&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transferTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creditAccount&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;InvalidAmountException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// quantia inválida, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ExceededAmountException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// quantia excedida, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BalanceNotAvailableException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// saldo não disponível, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DisabledCreditAccountException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// conta à creditar está desativada, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DisabledDebitAccountException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// conta à debitar está desativada, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BlockedCreditAccountException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// conta à creditar está bloqueada, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BlockedDebitAccountException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// conta à debitar está bloqueada e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BusinessException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// alguma outra coisa aconteceu, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E se utilizarmos essa outra sintaxe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;debitAccount&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transferTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creditAccount&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;InvalidAmountException&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;ExceededAmountException&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;BalanceNotAvailableException&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;DisabledCreditAccountException&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;DisabledDebitAccountException&lt;/span&gt;
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;BlockedCreditAccountException&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;BlockedDebitAccountException&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;BusinessException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// quantia inválida ou&lt;/span&gt;
    &lt;span class="c1"&gt;// quantia excedida ou&lt;/span&gt;
    &lt;span class="c1"&gt;// saldo não disponível ou&lt;/span&gt;
    &lt;span class="c1"&gt;// conta à creditar está desativada ou&lt;/span&gt;
    &lt;span class="c1"&gt;// conta à debitar está desativada ou&lt;/span&gt;
    &lt;span class="c1"&gt;// conta à creditar está bloqueada ou&lt;/span&gt;
    &lt;span class="c1"&gt;// conta à debitar está bloqueada ou&lt;/span&gt;
    &lt;span class="c1"&gt;// alguma outra coisa aconteceu, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nada agradável, não é?&lt;/p&gt;

&lt;p&gt;Que tal reduzir nossa lista de exceções:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgR8PBkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yuml.me/dearrudam/20191d3d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgR8PBkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yuml.me/dearrudam/20191d3d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assim ficará mais sucinta o seu tratamento:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;debitAccount&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transferTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;creditAccount&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BalanceNotAvailableException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// saldo não disponível, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DeactivatedAccountException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// uma ou ambas estão desativadas, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BlockedAccountException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// uma ou ambas estão bloqueadas, e agora?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Claro, não existe &lt;strong&gt;"bala de prata"&lt;/strong&gt;. Será preciso utilizar mensagens bem claras para fornecer um bom contexto para identificar o ocorrido. Em nosso exemplo, mensagens claras serão necessárias, especialmente as exceções DeactivatedAccountException e BlockedAccountException. Ambas não deixa claro se a debitAccount ou creditAccount ou ambas causaram o cenário em questão.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%A3o-utilizar-mensagens-claras-nas-exce%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Não utilizar mensagens claras nas exceções
&lt;/h2&gt;

&lt;p&gt;Acredito que é unânime essa dica: sempre use mensagens claras em suas exceções. Isso ajudará bastante a encontrar e entender o erro. &lt;br&gt;
Normalmente é utilizado um arquivos de propriedades para armazenar essas mensagens de erros, fornecendo assim talvez uma maneira de exibir a mensagem na camada de apresentação de maneira internacionalizada. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#silenciar-exce%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Silenciar exceções
&lt;/h2&gt;

&lt;p&gt;Outra abordagem muito equivocada e muito comum que ocorre é no tratamento de exceções que o chamador "acham desnecessário" realizar o tratamento, simplesmente ignorando o fato da ocorrência do lançamento de exceção.&lt;/p&gt;

&lt;p&gt;Por exemplo, você pode talvez ter visto algo assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Connection&lt;/span&gt;  &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getConnection&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// executando uma regra incrível aqui&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SQLException&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;handleSQLException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SQLException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;){}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mas não se ilude, talvez a aplicação entrou em um estado inconsistente e isso ninguém quer, não é? &lt;/p&gt;

&lt;p&gt;Um outro exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;CurrencyUnit&lt;/span&gt; &lt;span class="n"&gt;usd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Monetary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCurrency&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"USD"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Money&lt;/span&gt; &lt;span class="n"&gt;coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Money&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usd&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;Account&lt;/span&gt; &lt;span class="n"&gt;maxAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAccount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Account&lt;/span&gt; &lt;span class="n"&gt;otavioAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAccount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;maxAccount&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transferTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otavioAccount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coffee&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BalanceNotAvailableException&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// É impossível saber o que aconteceu aqui sem realizar um debug! &lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;É impossível saber o que aconteceu aqui sem realizar um debug! (Bom, o Otávio infelizmente vai saber... ☹️).&lt;/p&gt;

&lt;p&gt;Então, sempre trate ou log essas exceções (talvez em um nível WARN ou ERROR).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perder-o-rastreamento-da-pilha"&gt;
  &lt;/a&gt;
  Perder o rastreamento da pilha
&lt;/h2&gt;

&lt;p&gt;Quem sou eu pra ditar regras, não é? Mas vamos olhar o exemplo abaixo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;CurrencyUnit&lt;/span&gt; &lt;span class="n"&gt;usd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Monetary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCurrency&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"USD"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Money&lt;/span&gt; &lt;span class="n"&gt;coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Money&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usd&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;Account&lt;/span&gt; &lt;span class="n"&gt;maxAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAccount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Account&lt;/span&gt; &lt;span class="n"&gt;otavioAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAccount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;maxAccount&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transferTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otavioAccount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coffee&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BalanceNotAvailableException&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Assim perderemos a causa raiz da exceção que é: &lt;/span&gt;
    &lt;span class="c1"&gt;// o Max não vai poder para o café pro Otávio dessa vez!&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ExceededAmountException&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para quem desenvolveu pode parecer nada insignificante, mas ignorar a causa raiz irá causar um desconforto para quem estiver dando o suporte caso a exceção ocorra. &lt;/p&gt;

&lt;p&gt;Se a mensagem não for clara, será necessário navegar até o ponto do código que  ocorreu a exceção. &lt;/p&gt;

&lt;p&gt;Assim perderemos a causa raiz da exceção que é: o Max não conseguiu pagar o café pro Otávio dessa vez! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Trabalhar com exceções em Java é um assunto um tanto quanto polêmico e interessante. Tem uns que abominam, outros que se favorecem da funcionalidade e até pode ser divisor de águas quando vc tenta conhecer outras linguagens (como por exemplo o Golang). &lt;/p&gt;

&lt;p&gt;Na verdade o que interessa é resolver o problema da melhor maneira possível, digo, sempre olhando os prós e os contras de cada abordagem, &lt;strong&gt;pensando não só do ponto de vista de quem desenvolve mas também do ponto de vista de manutenção&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Deixo abaixo alguns artigos que utilizei que são referências ótimas para todos sobre o tema!&lt;/p&gt;

&lt;p&gt;Espero ter &lt;strong&gt;"lançado"&lt;/strong&gt; em sua mente a vontade de explorar mais sobre esse tema e assim torço para que você continue a &lt;strong&gt;"capturar "&lt;/strong&gt; e aprender! &lt;/p&gt;

&lt;p&gt;Deixe suas dicas, dúvidas e &lt;strong&gt;"exceções"&lt;/strong&gt;, quero dizer, sugestões aqui!&lt;/p&gt;

&lt;p&gt;Abraços e até a próxima!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oracle.com/br/technical-resources/article/java/erros-java-exceptions.html"&gt;11 Erros que desenvolvedores Java ocometem quando usam Exceptions - por Rafael Del Nero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learning-notes.mistermicheels.com/architecture-design/exception-handling/"&gt;Exception handling - (https://learning-notes.mistermicheels.com/)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>braziliandevs</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Getting started with Terraform: State file</title>
      <author>Daniel Huerta</author>
      <pubDate>Mon, 12 Jul 2021 19:41:25 +0000</pubDate>
      <link>https://dev.to/danihuerta/getting-started-with-terraform-state-file-1l2f</link>
      <guid>https://dev.to/danihuerta/getting-started-with-terraform-state-file-1l2f</guid>
      <description>&lt;p&gt;If you have started using Terraform as your &lt;em&gt;Infrastructure as Code&lt;/em&gt; tool you might wonder how does TF know which resources need to be created, deleted, or modified when you run your code. Well, let me tell you that it is not a magic stuff, the agent behind this is the &lt;strong&gt;state file&lt;/strong&gt; 😉.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terraform-apply"&gt;
  &lt;/a&gt;
  Terraform apply
&lt;/h2&gt;

&lt;p&gt;Every time we deploy our Infrastructure with &lt;em&gt;terraform apply&lt;/em&gt;, a file named &lt;em&gt;terraform.tfstate&lt;/em&gt; is created, it includes all the information about the resources that are currently deployed in the cloud. &lt;/p&gt;

&lt;p&gt;You can navigate on it and you will see a key with the name of &lt;strong&gt;resources&lt;/strong&gt;, it is an array which lists all the elements that were created with the configuration file (after doing &lt;em&gt;terraform apply&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;If you create an EC2 instance in AWS, your tfstate file will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--440A8CAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tzx0w4lmg8tsxba0ihl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--440A8CAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tzx0w4lmg8tsxba0ihl.png" alt="carbon (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand better how this works, it is important to talk about the &lt;strong&gt;&lt;em&gt;Current and Desired State&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-state"&gt;
  &lt;/a&gt;
  Current State
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;terraform.tfstate&lt;/em&gt; file is the responsible to store the current state of the infrastructure, it is to say all the information about the resources that are currently deployed in your Cloud Provider (after the &lt;em&gt;terraform apply&lt;/em&gt; command has been run).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desired-state"&gt;
  &lt;/a&gt;
  Desired State
&lt;/h2&gt;

&lt;p&gt;All the code that is set in the main.tf file corresponds to the desired state, on it you specify what resources you expect to be created in the Cloud, and here is where the magic occurs 😉.&lt;/p&gt;

&lt;p&gt;Terraform is going to &lt;strong&gt;compare&lt;/strong&gt; both states (current and desired one), if there is an existing difference between both, it will make the changes that are necessary so that the current state is equal to the desired state.&lt;br&gt;
TF shows the result of the comparison when we execute the &lt;em&gt;terraform plan&lt;/em&gt; command in the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refreshing-the-state"&gt;
  &lt;/a&gt;
  Refreshing the state
&lt;/h2&gt;

&lt;p&gt;But, what if we modify a resource directly in the Cloud Provider interface not using Terraform apply (AWS Console for instance), let's say that we changed the EC2 instance type from t2.micro to t2.large, how is our &lt;strong&gt;local&lt;/strong&gt; &lt;em&gt;terraform.tfstate&lt;/em&gt; be modified to match with those &lt;em&gt;remote&lt;/em&gt; changes? 🤔.&lt;/p&gt;

&lt;p&gt;Well, Terraform has the solution for that. We just need to run the command &lt;strong&gt;terraform refresh&lt;/strong&gt; and all the configuration that is currently running in the cloud provider will be updated in the local &lt;em&gt;terraform.tfstate&lt;/em&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  Closure
&lt;/h3&gt;

&lt;p&gt;Now that you understand the &lt;strong&gt;state&lt;/strong&gt; concepts in Terraform, we can start talking about how to manage it in a collaborative workflow, let's talk about the &lt;strong&gt;remote state&lt;/strong&gt; in a different post.&lt;/p&gt;

&lt;p&gt;Thanks for reading, any comments or suggestions are welcome. We are here to help each other 😉💙.&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>The Most Productive Customization I've Made to My Computer This Year</title>
      <author>Self Teach me</author>
      <pubDate>Mon, 12 Jul 2021 19:13:13 +0000</pubDate>
      <link>https://dev.to/selfteachme/the-most-productive-customization-i-ve-made-to-my-computer-this-year-55j3</link>
      <guid>https://dev.to/selfteachme/the-most-productive-customization-i-ve-made-to-my-computer-this-year-55j3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A few weeks ago I did it. I converted my &lt;strong&gt;Caps Lock&lt;/strong&gt; key into a "Hyper Key." Meaning, whenever I hit Caps Lock, it's the same as holding down &lt;code&gt;Cmd + Ctrl + Option + Shift&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's be honest, its hard to hold down &lt;code&gt;Cmd + Ctrl + Option + Shift&lt;/code&gt;, at the same time. &lt;em&gt;But&lt;/em&gt;, that also means, I didn't have any keyboard shortcuts with that combination. This opened up a whole new world of commands.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-note"&gt;
  &lt;/a&gt;
  Quick Note
&lt;/h3&gt;

&lt;p&gt;If you're resistant to "loosing" your Caps Lock, like I was (because I actually use my Caps Lock key), I moved that functionality to my &lt;em&gt;right&lt;/em&gt; shift key. Already, I use my &lt;em&gt;left&lt;/em&gt; shift key exclusively, so I didn't feel like I was "loosing" anything.&lt;/p&gt;

&lt;p&gt;While I was making modifications, I also converted my right command to an extra escape key. I have the 15" Macbook Pro with the touch bar. When I'm working at my desk, I have an external keyboard. But, when I'm working directly on my laptop, I miss the tactile escape key. Plus, I'm running &lt;a href="https://folivora.ai/"&gt;Better Touch Tool&lt;/a&gt; to customize the touch bar, which shifts my escape key over, ruining my muscle memory&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94UaLAlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wieazhbxy2ow5gq2nym1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94UaLAlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wieazhbxy2ow5gq2nym1.jpeg" alt="IMG_2850"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-your-hyper-key"&gt;
  &lt;/a&gt;
  How to Set up Your Hyper Key
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://karabiner-elements.pqrs.org/"&gt;Karabiner-Elements&lt;/a&gt; and download their software (it's free) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBSuVkM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq23je1rnbaje0oy86hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBSuVkM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq23je1rnbaje0oy86hq.png" alt="CleanShot_2020-09-16_at_20.19.082x"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once it's downloaded, double click on the .dmg to unpack and open it. Then, double click on the .pkg inside and go through the install process&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvB2JG2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gakzbe7sp3f43ork1wzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvB2JG2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gakzbe7sp3f43ork1wzm.png" alt="package-karabiner-elements"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Complex Modifications&lt;/strong&gt; tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_i403Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/litmcm4l4zqp3abqas1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_i403Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/litmcm4l4zqp3abqas1d.png" alt="complex-modifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Add Rule&lt;/strong&gt; button at the bottom left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGfBJMN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yshxsvj2od5uet6zdiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGfBJMN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yshxsvj2od5uet6zdiz.png" alt="add-rule-button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Import more rules from the Internet (open a web browser)&lt;/strong&gt; button at the top. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5otaCKwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u57qmcb3v43zpu2amtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5otaCKwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u57qmcb3v43zpu2amtr.png" alt="import-rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the button says, this will launch a web browser with a list of modifications you can import. There are plenty plenty of options there, to scroll through and give you inspiration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y70CZrM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4697p9f3as7v01q6t99f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y70CZrM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4697p9f3as7v01q6t99f.png" alt="web-browser-with-modifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've found one you like, click on the Import button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSLsTo-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa1t6u8rol6iqrgsrjbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSLsTo-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa1t6u8rol6iqrgsrjbz.png" alt="karabiner-elements-options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pop-up will come up asking if you want to &lt;strong&gt;Open Karabiner-Elements.app?&lt;/strong&gt; Click on the "Open" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03vHVxRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78u4t9muict4xff3d2zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03vHVxRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78u4t9muict4xff3d2zx.png" alt="open-karabiner-elements-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will launch Karabiner-Elements. It will show you a pop-up explaining the control you're importing. You can click &lt;strong&gt;Import&lt;/strong&gt; to confirm or &lt;strong&gt;Cancel&lt;/strong&gt;. Don't worry, you can always undo. &lt;/p&gt;

&lt;p&gt;As I mentioned earlier, I installed 3 different modifications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The caps lock key simulates hitting the Cmd + Ctrl + Shift + Option key&lt;/li&gt;
&lt;li&gt;The Right Shift key is the "new" caps lock key — Interestingly enough, the light on the "real" caps lock key goes on and off whenever I hit the "new" shift key.&lt;/li&gt;
&lt;li&gt;The Right Command key is a second escape key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HITvt1Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbl5143bvm6crh7vmt49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HITvt1Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbl5143bvm6crh7vmt49.png" alt="complex-modifications-listed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcuts-ive-set-up"&gt;
  &lt;/a&gt;
  Shortcuts I've set up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-maestro"&gt;
  &lt;/a&gt;
  Keyboard Maestro
&lt;/h3&gt;

&lt;p&gt;I set up all the keyboard shortcuts through a program called &lt;a href="https://www.keyboardmaestro.com/main/"&gt;Keyboard Maestro&lt;/a&gt;. Unfortunately, this program is not free and costs $36. — but, definitely worth it. The options it provides seem endless.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-ENOH5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4e4r2l72rna60xuo1on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-ENOH5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4e4r2l72rna60xuo1on.png" alt="keyboard-maestro2x"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click through the groups in the left panel, you'll find a bunch of "macros" that you can enable and pair with a keyboard shortcut. Of course, you can also create your own custom commands.&lt;/p&gt;

&lt;p&gt;Most of the commands I've created are designed to jump between my favorite applications. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + B&lt;/code&gt;: Opens Chrome&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + C&lt;/code&gt;: Opens VS Code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + E&lt;/code&gt;: Opens AirMail (my email client of choice)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + F&lt;/code&gt;: Opens Finder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + M&lt;/code&gt;: Opens Messages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + N&lt;/code&gt;: Opens Notion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a few commands for navigating to my favorite directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + P&lt;/code&gt;: jumps to the Projects directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + S&lt;/code&gt;: Opens the Vlog directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A couple of miscellaneous items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + Shift + G&lt;/code&gt;: Searches the Internet. This is great for a quick Google Search&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + V&lt;/code&gt;: will paste whatever is in my clipboard without any styling. - You know when you copy something that's been formatted (bold / italics). This strips out all the formatting before pasting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#better-touch-tool"&gt;
  &lt;/a&gt;
  Better Touch Tool
&lt;/h3&gt;

&lt;p&gt;I mentioned earlier, that I have Better Touch Tool installed on my computer, as well. Unfortunately, this program isn't free either. $8.50 will give you updates for 2 years. $20.50 will give you lifetime updates. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z352GkyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j716aqzk98wrw88r8rg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z352GkyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j716aqzk98wrw88r8rg5.png" alt="better-touch-tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Where this program really shines is extending the functionality your trackpad or customizing your touch bar.&lt;/p&gt;

&lt;p&gt;I set up some keyboard shortcuts here, too, since it has some great options for window management. Here are the commands I setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + D&lt;/code&gt;: Shows the Desktop.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + 1&lt;/code&gt;:  Makes the current window 100% tall. I found that when I was plugging / unplugging from my external monitor, windows would resize. This allows me to resize my window quickly.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + A&lt;/code&gt;: When I'm editing on my ultra-wide monitor, I have a particular window configuration I like to use. Now, when I hit this keyboard shortcut, my windows automatically rearrange for this workflow.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + H&lt;/code&gt;: Hides all window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use the next 3 commands together:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + J&lt;/code&gt;: Snaps and fills the window to the left third of the screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + K&lt;/code&gt;: Snaps and fills the window the center third of the screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + L&lt;/code&gt;: Snaps and fills the window to the right third of the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next 2 commands are similar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + Left Arrow&lt;/code&gt;: Moves the current window one space to the left. — This is great if you use Apple Spaces feature. I can quickly move windows from one space to the next with my keyboard.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + Right Arrow&lt;/code&gt;: Moves the current window one space to the right.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This all took a little bit of setup, but the ~30 minutes, hour set up has been well worth it and it has made moving around my computer with the keyboard faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-the-comments"&gt;
  &lt;/a&gt;
  In the Comments...
&lt;/h3&gt;

&lt;p&gt;What keyboard shortcuts do you have set up? Any I should add to the mix? &lt;/p&gt;

</description>
    </item>
    <item>
      <title>What is AssemblyScript?</title>
      <author>Jairus Tanaka</author>
      <pubDate>Mon, 12 Jul 2021 18:34:40 +0000</pubDate>
      <link>https://dev.to/assemblyscript/what-is-assemblyscript-3gfl</link>
      <guid>https://dev.to/assemblyscript/what-is-assemblyscript-3gfl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KhUFBZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4uj09a30exiqxep28hd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhUFBZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4uj09a30exiqxep28hd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
  AssemblyScript — a variant of TypeScript that compiles to WebAssembly. Since it is compiled, it outperforms JavaScript in some cases. AS follows the TypeScript syntax as closely as possible and even adds more features to it. AssemblyScript allows us to write fast WebAssembly for the Web and Server without learning another language.&lt;/p&gt;

&lt;p&gt;AssemblyScript is very easy to use. All you need to do is install it via NPM.&lt;/p&gt;

&lt;p&gt;Try it out online: &lt;a href="https://stackblitz.com/edit/node-quzm4z?devtoolsheight=33&amp;amp;file=test.js"&gt;Online editor&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ npm i assemblyscript &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
~ npx asinit &lt;span class="nb"&gt;.&lt;/span&gt;
~ npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did that do? First of all, it installed both the loader and the compiler. Secondly, it made a template project with an add function. Now, we just need to compile it to WebAssembly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ npm run asbuild
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, if you check out the /build folder, there are the .wasm files that were built. NodeJS and JavaScript both provide a way to run WebAssembly files and AssemblyScript provides its own loader to work with the code. To start our code, we need another file&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wasmModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// This works just like a normal module&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasmModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -- 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ node test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should have outputted the number 11.&lt;/p&gt;

&lt;p&gt;JavaScript code for the add function would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AssemblyScript code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty similar, right? When we compile it, we can require it just like a normal JavaScript file. Keep in mind that WebAssembly is sandboxed which means it can’t access the system, make HTTP requests, or log to the console. However, AssemblyScript supports both WASI and JS bindings (calling JS from AS).&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, feel free to comment or join the AssemblyScript Discord. Or, check out the website.😉&lt;/p&gt;

&lt;p&gt;P.S: There is a tutorial at &lt;a href="https://jtanaka.gitbook.io/guide/"&gt;https://jtanaka.gitbook.io/guide/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webassembly</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
