<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Quick and Effective Ways to Learn JavaScript</title>
      <author>Suhail Kakar</author>
      <pubDate>Wed, 01 Sep 2021 05:11:52 +0000</pubDate>
      <link>https://dev.to/suhailkakar/5-quick-and-effective-ways-to-learn-javascript-4l39</link>
      <guid>https://dev.to/suhailkakar/5-quick-and-effective-ways-to-learn-javascript-4l39</guid>
      <description>&lt;p&gt;If you've been studying JavaScript or web development in general but still feel inadequate in your knowledge of the topic. Perhaps you're having trouble remembering or applying all you've learned. This is the article for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W9feF7I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630393976596/Fq2Vrttg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9feF7I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630393976596/Fq2Vrttg9.png" alt="screely-1630393932199.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google shows 7,930,000,000 results on "Why JavaScript is hard to learn", Many developers don't learn JavaScript and jump to some other alternative language ( Though each language has its own specialty ) because they think JavaScript is hard. But you shouldn't be among those developers. In this article, you are going to learn about "How can you learn JavaScript". &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-a-wellstructured-curriculum"&gt;
  &lt;/a&gt;
  Follow a Well-structured Curriculum
&lt;/h3&gt;

&lt;p&gt;As a self-taught developer, it's your responsibility to find a standard structure to follow. Avoid learning anything that comes your way at all costs. You must stick to a set of guidelines. This ensures that you are not leaving out anything you should know on the subject.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;Freecodecamp&lt;/a&gt; is a non-profile organization that has the best and well-structured curriculum which can help you learn JavaScript. You can start with any of their courses and continue it till the end.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-complex-code-in-plain-language-first"&gt;
  &lt;/a&gt;
  Write Complex Code in Plain Language First
&lt;/h3&gt;

&lt;p&gt;Write a piece of code in plain language first though it's going to be complicated or unfamiliar. You'll be able to figure out what you want the code to accomplish before writing it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-how-to-google"&gt;
  &lt;/a&gt;
  Learn How to Google
&lt;/h3&gt;

&lt;p&gt;This is one of the effective tips that can help you solve many of your questions. if you spend years upon years following tutorials either by watching videos or reading guides, you will still come across problems if you are working on projects.&lt;/p&gt;

&lt;p&gt;Your buddies are Google and Stack Overflow. However, you should always start with Google to discover what possibilities are available to you. You'll be surprised at how much knowledge you can pick up this way.&lt;/p&gt;

&lt;p&gt;Before one week, I have written an  &lt;a href="https://blog.suhailkakar.com/how-to-use-google-like-a-pro"&gt;article&lt;/a&gt;  on "How to use Google like a Pro", which I think, it might be helpful for you If you want to learn tips on how to use Google.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-your-own-projects"&gt;
  &lt;/a&gt;
  Start Your Own Projects
&lt;/h3&gt;

&lt;p&gt;If you don’t put your hard-earned knowledge into practice, what was the point of learning it in the first place?  When you're ready to put your JavaScript abilities to work on a real project, rather than beginning from scratch, consider adding a feature to a program you made in a lesson. If you require assistance, consider collaborating on a project with a friend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-a-goal-for-yourself-and-decide-what-you-want-to-study"&gt;
  &lt;/a&gt;
  Set a goal for yourself and decide what you want to study.
&lt;/h3&gt;

&lt;p&gt;JavaScript has a lot of different branches. For this, it's best if you pick one technology and ignore the rest. However, if you are just getting started, making this option will be hard because it is difficult to know where to begin. You'll need to follow a well-structured curriculum in this situation.&lt;/p&gt;

&lt;p&gt;JavaScript is used for both Frontend and Backend. It means that there is a lot of frameworks for you to learn so in order not to get overwhelmed and bored easily, you should only focus on one thing and leave out all other things outside of that.&lt;/p&gt;

&lt;p&gt;This doesn't mean that you need to learn only one JavaScript framework, You need to learn as much as you need but focus on one framework before starting the other one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope you found this article helpful. If you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Would you like to buy me a coffee, You can do it  &lt;a href="https://www.buymeacoffee.com/suhailkakar"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>productivity</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>The big STL Algorithms tutorial: Minimum/maximum operations</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 01 Sep 2021 05:02:53 +0000</pubDate>
      <link>https://dev.to/sandordargo/the-big-stl-algorithms-tutorial-minimum-maximum-operations-1o86</link>
      <guid>https://dev.to/sandordargo/the-big-stl-algorithms-tutorial-minimum-maximum-operations-1o86</guid>
      <description>&lt;p&gt;In this next part of &lt;a href="http://sandordargo.com/blog/2019/01/30/stl-algos-intro"&gt;the big STL algorithm tutorial&lt;/a&gt;, we are going to talk about minimum and maximum operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minmax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minmax_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clamp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-max-endraw-raw-min-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;max&lt;/code&gt; / &lt;code&gt;min&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;std::max&lt;/code&gt; and &lt;code&gt;std::min&lt;/code&gt; have a couple of different forms, all will essentially return the greatest or smallest elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You might pass in two elements taken by &lt;code&gt;const&lt;/code&gt; reference, and you'll get back a &lt;code&gt;const&amp;amp;&lt;/code&gt; of the largest/smallest element&lt;/li&gt;
&lt;li&gt;You might pass in an initializer list and you'll get back a copy of the largest/smallest element&lt;/li&gt;
&lt;li&gt;Either way, you can pass in an optional comparator. In its absence, &lt;code&gt;operator&amp;lt;&lt;/code&gt; will be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all the passed in elements are equal, the leftmost one will be returned - both for &lt;code&gt;std::max&lt;/code&gt; and &lt;code&gt;std::min&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// std::cout &amp;lt;&amp;lt; std::max(v) &amp;lt;&amp;lt; '\n'; // ERROR: std::vector is not derived from std::initializer_list&lt;/span&gt;
  &lt;span class="c1"&gt;// std::cout &amp;lt;&amp;lt; std::min(v) &amp;lt;&amp;lt; '\n'; // ERROR: std::vector is not derived from std::initializer_list&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
51
42
66
66
66
42
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's worth noting that a &lt;code&gt;vector&lt;/code&gt;, or other standard containers are not derivations of an initializer list, therefore you cannot pass them to &lt;code&gt;std::max&lt;/code&gt;/&lt;code&gt;std::min&lt;/code&gt;. For that, you have to use &lt;code&gt;max_element&lt;/code&gt;/&lt;code&gt;min_element&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-maxelement-endraw-raw-minelement-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;max_element&lt;/code&gt; / &lt;code&gt;min_element&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;std::max&lt;/code&gt; and &lt;code&gt;std::min&lt;/code&gt; either take two values or an initializer list, &lt;code&gt;std::max_element&lt;/code&gt; and &lt;code&gt;std::min_element&lt;/code&gt; operates on a range. They resemble more to the standard algorithms we've seen in this series, notably:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They take two iterators denoting the beginning and the end of a range&lt;/li&gt;
&lt;li&gt;They take an optional comparator, and when it's not specified &lt;code&gt;operator&amp;lt;&lt;/code&gt; is used&lt;/li&gt;
&lt;li&gt;As an optional 0th parameter, you can pass in an execution policy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The return value will always be an iterator to the largest or smallest element. Interestingly, both &lt;code&gt;max_element&lt;/code&gt; and &lt;code&gt;min_element&lt;/code&gt; returns the leftmost element in case of equal elements are passed in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;max_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
66
42
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-minmax-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;minmax&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;What if you need both the smallest and the largest element of a container? You don't need to call &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; separately, you can simply call &lt;code&gt;std::minmax&lt;/code&gt; and it will return a &lt;code&gt;std::pair&lt;/code&gt; of the smallest and the largest value.&lt;/p&gt;

&lt;p&gt;It's interesting to mention that in the case of equality both &lt;code&gt;std::min&lt;/code&gt; and &lt;code&gt;std::max&lt;/code&gt; return the leftmost element, &lt;code&gt;std::minmax&lt;/code&gt; will return you two different elements all the time (except if you call it an initializer list of one element).&lt;/p&gt;

&lt;p&gt;The algorithm has different forms following &lt;code&gt;std::min&lt;/code&gt; and &lt;code&gt;std::max&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You might pass in two elements taken by &lt;code&gt;const&lt;/code&gt; reference, and you'll get back a &lt;code&gt;const&amp;amp;&lt;/code&gt; of the largest/smallest element&lt;/li&gt;
&lt;li&gt;You might pass in an initializer list and you'll get back a copy of the largest/smallest element&lt;/li&gt;
&lt;li&gt;Either way, you can pass in an optional comparator. In its absence &lt;code&gt;operator&amp;lt;&lt;/code&gt; will be used.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;minmax_ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minmax_ab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minmax_ab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;minmax_cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minmax_cc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;minmax_cc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
42 51
66 66
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-minmaxelement-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;minmax_element&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Based on the previous section you probably already deduced what &lt;code&gt;std::minmax_element&lt;/code&gt; does and how it works.&lt;/p&gt;

&lt;p&gt;It works on containers and returns a pair of iterators to the smallest and largest elements of that container. In case, all the elements are equal, the smallest will be the leftmost one and the largest is the rightmost.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It takes two iterators denoting the beginning and the end of a range&lt;/li&gt;
&lt;li&gt;It takes an optional comparator, and when it's not specified &lt;code&gt;operator&amp;lt;&lt;/code&gt; is used&lt;/li&gt;
&lt;li&gt;As an optional 0th parameter, you can pass in an execution policy
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;minmax_v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;minmax_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;minmax_v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;minmax_v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
42 66
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-clamp-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;clamp&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;std::clamp&lt;/code&gt; is a relatively new addition to the &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; header, it is available since C++17. It takes 3 &lt;code&gt;const&amp;amp;&lt;/code&gt; parameters by default and an optional comparator. It returns a &lt;code&gt;const&amp;amp;&lt;/code&gt;, one of the three inputs.&lt;/p&gt;

&lt;p&gt;The three inputs are usually referenced as &lt;code&gt;v&lt;/code&gt; (value), &lt;code&gt;lo&lt;/code&gt; (lowest value) and &lt;code&gt;hi&lt;/code&gt; (highest value) in this order.&lt;/p&gt;

&lt;p&gt;First, let's see the pseudo-code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if v &amp;lt; lo:
  return lo
if hi &amp;lt; v:
  return hi
return v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's not complicated, but probably it's not very functional to you. Well, it was not for me. So in practice, what does &lt;code&gt;clamp&lt;/code&gt; do? It might help, if you know &lt;a href="https://www.merriam-webster.com/dictionary/clamp"&gt;the meaning of the verb clamp&lt;/a&gt;, but to me either reading the definition is not so helpful.&lt;/p&gt;

&lt;p&gt;In practice, with &lt;code&gt;clamp&lt;/code&gt;, you make sure that the value that you get back will be between the boundaries defined by &lt;code&gt;lo&lt;/code&gt; and &lt;code&gt;hi&lt;/code&gt;. The returned value will be never smaller than &lt;code&gt;lo&lt;/code&gt; and never greater than &lt;code&gt;hi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;hi&amp;lt;lo&lt;/code&gt;, the behaviour is undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"std::clamp(42, 51, 66): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"std::clamp(51, 42, 66): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"std::clamp(66,42,51): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"UB: std::clamp(66,51,42): "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Undefined Behaviour hi &amp;lt; lo&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
std::clamp(42, 51, 66): 51
std::clamp(51, 42, 66): 51
std::clamp(66,42,51): 51
UB: std::clamp(66,51,42): 42
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This time, we learned about min/max algorithms. We saw how to get the minimum or maximum elements from multiple variables or from containers. We also saw &lt;code&gt;clamp&lt;/code&gt; that was added in C++17 which makes sure that we'll always have a value between the boundaries we define.&lt;/p&gt;

&lt;p&gt;In the next episode of this series, we'll discuss comparison operators, but before there is something more to discuss.&lt;/p&gt;

&lt;p&gt;Is it okay that &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; return the same element in case the inputs are equal? Is it okay that in that case, both return the leftmost element - or the rightmost depending on your compiler?&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>tutorial</category>
      <category>stl</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>10 Intelligent Movies To Watch Before You Die</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Wed, 01 Sep 2021 04:17:34 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/10-intelligent-movies-to-watch-before-you-die-2nng</link>
      <guid>https://dev.to/koulurunandakishorereddy/10-intelligent-movies-to-watch-before-you-die-2nng</guid>
      <description>&lt;p&gt;We’ve brought the clever movies you need to watch for this list, pointing out works with complex stories that always demand more attention from your viewer. Below are films that subvert the order of their plot, question the meaning of existence, work on the aspect of time in our lives, bring plot twists, and so on.&lt;/p&gt;

&lt;h2&gt;Let’s go to the list.&lt;/h2&gt;


&lt;ul&gt;

&lt;li&gt;&lt;b&gt;1 . Memento (Christopher Nolan, 2000)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IL2juorP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758007815/LTHwZOJZq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IL2juorP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758007815/LTHwZOJZq.jpeg" alt="1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After his wife is brutally killed and he is beaten by a criminal, a man, now with problems in his short-term memory, decides to embark on a destructive journey behind him. ‘Memento’ is rustic in its conception of plot, subverting the paths trodden by the characters, working with hard philosophical concepts, like the one of ‘eternal return’, resulting in a film that stays in the head of the spectator even after its end.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;2 . The Truman Show (Peter Weir, 1998)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzvLXTmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758442721/sWp4Kqywi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzvLXTmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758442721/sWp4Kqywi.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wrapped in a routine of inexorable habits, a man, by a mere figure of chance, ends up realizing that his whole life had been a big lie and his day-to-day life was actually programmed and controlled by a kind of TV show. Now it’s up to him to go after all the truth behind this story. ‘The Truman Show’ is different in its story arc, promoting situations of the most diverse, provoking a sense of reassessment of life by those who watch the film.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;3 . The Gift (Joel Edgerton, 2015)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrRGYX1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758762217/yK-759MC5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrRGYX1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758762217/yK-759MC5.jpeg" alt="the_gift-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the plot, a couple receives an unexpected visit from a man who had been friends with one of them for a long time. However, the strange man begins, little by little, to bother the couple, doubting their motivations before them. ‘The Gift’ uses a few scenarios to govern the events of its history. Here, everything is guided under a mood of mystery that is maintained until the final moments of the film, letting the viewer formulate theories about what is on screen.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;4 . Psycho (Alfred Hitchcock, 1960)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqVMUZ54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759063036/ofFBy69Jww.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqVMUZ54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759063036/ofFBy69Jww.jpeg" alt="4.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After stealing an enormous amount of the place in which works, a young woman initiates a car flight by the country. In the midst of this journey, the young woman decides to stop to rest in a hotel by the roadside, not knowing that this would be a mortal place. Alfred Hitchcock’s masterpiece, ‘Psycho’ is a work that guided the paths of the horror and suspense genres in the following decades, raising a daring story, nourishing one of the most amazing finals of cinema.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;5 . The Sixth Sense (M. Night Shyamalan, 1999)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ElRnEW5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759304468/jScuyCQm8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ElRnEW5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759304468/jScuyCQm8.jpeg" alt="5.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A psychologist tries to help a little boy who claims to see spirits, starting a journey full of mysteries behind answers. Characterizing itself as one of the films with one of the greatest twists of the seventh art, ‘The Sixth Sense’ is one of those top-quality suspensions. A film that frightens with few details, in an engaging and always pleasant story.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;6 . Double Indemnity (Billy Wilder, 1944)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhAeA4_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759583995/fSBDKCxK8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhAeA4_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759583995/fSBDKCxK8.jpeg" alt="6.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the plot, an individual who works for an insurance agency falls in love with a woman who persuades him to defraud his job. However, after the crime, he will realize that his choice was not the right one, fighting a clever investigator not to get caught. The biggest Noir movie of all time, ‘Double Indemnity is a film class of the genius Billy Wilder. Exploring a nuance-permeated plot, the film manages to be dynamic while it unravels every meander of its central characters, providing the viewer with a unique experience.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;7 . Zodiac (David Fincher, 2007)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---h0FfhtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760062796/fsD-MXcBT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---h0FfhtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760062796/fsD-MXcBT.jpeg" alt="7.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A serial killer terrorized the United States in the late 1960s and early 1970s, leaving authorities and the population in an incomplete state of paranoia. The plot gains its substance when the criminal decides to communicate through codes with a newspaper, arousing the interest of a journalist of the place. Based on a real event, ‘Zodiac’ is a film that shivers by the density of the story presented. Intelligent suspense can cause the most diverse emotions in the viewer without using the clichés characteristic of the genre.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;8 . I Love You, I Love You (Alain Resnais, 1968)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWvyp0m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760211954/NalKJO1fN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWvyp0m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760211954/NalKJO1fN.jpeg" alt="8.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A man serves as a guinea pig for a strange scientific experiment that stirs the character of time. However, something goes wrong, leaving the individual trapped in their own memories. ‘I Love You, I Love You’ is potent in its theme, studying the ephemeral character of life, as well as the most important fragments that our existence understands.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;9 . 2001: A Space Odyssey (Stanley Kubrick, 1968)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7N-HjEv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760401399/AOEkZDL7N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7N-HjEv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760401399/AOEkZDL7N.png" alt="9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The film fits into the intricacies of humanity’s evolution, rescuing different periods of our history and building future events. Stanley Kubrick’s masterpiece, this film demands a lot from its viewer because of its slow pace, making itself tiring at times, but rewarding who watches its completion.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;10 . Run Lola Run (Tom Tykwer, 1998)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXhHegeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760555979/fH9YB1HJT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXhHegeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760555979/fH9YB1HJT.jpeg" alt="10.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After her boyfriend gets involved in an unpleasant situation, a young woman takes a few minutes to get a certain amount of money and save the boy. Divided into variations of stories about the same theme, ‘Run Lola Run’ has an unparalleled dynamism to govern its plot, achieving in only 81 minutes to build a unique film.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the article!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;"You can now extend your support by buying me a Coffee.😊👇"&lt;/b&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/koulurunanda"&gt;Buy Me a Coffee&lt;/a&gt; &lt;br&gt;&lt;/p&gt;


&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>P2P Cryptocurrency Exchange Script
</title>
      <author>RadinDev</author>
      <pubDate>Wed, 01 Sep 2021 03:56:54 +0000</pubDate>
      <link>https://dev.to/radindev1/p2p-cryptocurrency-exchange-scripts-3b3b</link>
      <guid>https://dev.to/radindev1/p2p-cryptocurrency-exchange-scripts-3b3b</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iK8tQXXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x664c945b629t2ffl5db.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iK8tQXXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x664c945b629t2ffl5db.png" alt="p2p cryptocurrency exchange software"&gt;&lt;/a&gt;&lt;br&gt;
Peer-to-peer, abbreviated P2P, is a collection of interconnected devices that store and share specific files and documents. Each of these devices or systems is called a node. In this structure, each node has the same power and tasks.&lt;br&gt;
But the term p2p or peer-to-peer has taken on a different color and flavor in financial technologies. It is usually used to refer to the exchange of cryptocurrencies on a person-to-person and decentralized basis. A &lt;a href="https://radindev.com/p2p-cryptocurrency-exchange-software/"&gt;p2p crypto exchange software&lt;/a&gt; records the bid price of the buyer and the seller and, if they match, connects them to make the exchange. Some of the more advanced platforms have even provided a platform for automatic borrowing based on smart contracts.&lt;br&gt;
Let's see where P2P was first used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-p2p-networks-work"&gt;
  &lt;/a&gt;
  How P2P networks work:
&lt;/h2&gt;

&lt;p&gt;It was stated above that a p2p system is an aggregate of interconnected systems that have the same tasks and power. There is no administrator or admin or supervisor in this system because each node keeps a copy of the file and plays two roles simultaneously. One server and one client.&lt;br&gt;
So each node can download files from other nodes. While in a centralized system, client devices download information from a centralized server.&lt;br&gt;
In P2P networks, networked devices share files stored on their drives. Using software designed to mediate data sharing, users can search for other devices on the web, find and download files. Once the user downloads the file, it can act as the source of that file.&lt;br&gt;
Simply put, a node acts as a client when downloading from other sources, but when it acts as a server, it is a resource from which other nodes can download files. (This can happen at the same time.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#p2p-history"&gt;
  &lt;/a&gt;
  P2P history:
&lt;/h2&gt;

&lt;p&gt;For the first time in the '80s, after introducing computers, one of the first examples of a user network was Internet Relay Chat, which was a way to send text and chat between two people.&lt;br&gt;
In 1999, Napster introduced a P2P network for music sharing. This service made it possible for anyone to share their favorite music with others.&lt;br&gt;
In 2000, a project called Gnutella started decentralized peer-to-peer sharing, which is still ongoing. Gnutella allows users to access folders on other systems.&lt;br&gt;
Finally, it was in 2009 that Satoshi Nakamoto introduced the Bitcoin network as a peer-to-peer network. Perhaps the most famous sentence in the world about P2P is the first sentence of Bitcoin White Paper:&lt;br&gt;
Bitcoin: A Peer-to-Peer Electronic Cash System&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PHqWt6j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nm2qfkp5l59js3be45j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PHqWt6j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nm2qfkp5l59js3be45j.jpg" alt="bitcoin white paper"&gt;&lt;/a&gt;&lt;br&gt;
Most people have never heard of P2P before Bitcoin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-p2p-networks"&gt;
  &lt;/a&gt;
  Advantages of P2P networks:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Elimination of intermediaries: From the point of view of some economic actors, probably the most essential advantage of P2P is the elimination of intermediaries such as banks or financial and credit institutions.&lt;br&gt;
In this way, digital currency is transferred directly from one person's wallet to another, and no bank in the middle plays the role of intermediary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High security: Many others believe that much more security of this system than centralized client-server systems is the most significant advantage of p2p. It is P2P that protects digital currencies such as bitcoin against Dos attacks. Dos is a type of cyber attack that takes the server off the network and out of the reach of users. However, since peer-to-peer information systems are divided among many nodes, they are resistant to these attacks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid censorship: Avoiding censorship is another benefit of peer-to-peer networks. Because no one has the permission and power to block users' accounts, some people, such as merchants, see cryptocurrencies as a surefire way to prevent government payments from being blocked.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-p2p-networks"&gt;
  &lt;/a&gt;
  Disadvantages of P2P networks:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Scalability: Because distributed offices must be updated at each node instead of the central server, adding any transaction in the blockchain requires a great deal of computing power. While this increases security, it dramatically reduces efficiency and is one of the main obstacles to scalability and widespread acceptance. However, blockchain encoders and developers are exploring options that may be used as scalability solutions. Prominent examples are the Lightning network, the atrium plasma, and the Wembley protocol.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hard fork attacks: Another potential limitation is related to seizures during a hard fork. Because most blockchains are decentralized and open-source, nodes can freely copy and modify the code, detach from the main chain, and form a new parallel network. A hard fork is perfectly normal and is not a threat in itself. But if security measures are not taken properly, both chains will be vulnerable to replay attacks.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition, the distributed nature of P2P networks makes it difficult to control and regulate them. For example, several P2P programs and companies have engaged in illegal activities and copyright infringement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unstructured-p2p-networks"&gt;
  &lt;/a&gt;
  Unstructured P2P networks
&lt;/h2&gt;

&lt;p&gt;In unstructured P2P networks, there is no specific organization of nodes. In this network, participants communicate with each other randomly. These systems are resistant to high churn activity (i.e., multiple nodes frequently joining and exiting the web).&lt;br&gt;
Although this type of network is easier to build, unstructured P2P grids may require more CPU and memory because search queries are sent to as many people as possible or so-called peers. These requests will fill the network, especially if a small number of nodes provide the desired content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structured-p2p-networks"&gt;
  &lt;/a&gt;
  Structured P2P networks
&lt;/h2&gt;

&lt;p&gt;Structured P2P networks have an organized architecture. This architecture allows nodes to search for files effectively, even if the content is not widely available. In most cases, this is done using hash functions that facilitate database search.&lt;br&gt;
While structured networks may be more efficient, they are usually more centralized and require higher operating and maintenance costs. Of course, structured networks have less resistance when faced with high churn activity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-p2p-networks"&gt;
  &lt;/a&gt;
  Hybrid P2P networks
&lt;/h2&gt;

&lt;p&gt;P2P hybrid networks combine the typical client-server (client-server) model with some aspects of one-to-one architecture. For example, a central server may be designed to facilitate communication between peers or individuals.&lt;br&gt;
This network has a better overall performance compared to the other P2P networks mentioned. Usually, some of the main advantages of each approach are combined with the other, and finally, a considerable degree of efficiency and decentralization is achieved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-p2p-cryptocurrency-exchange-platforms"&gt;
  &lt;/a&gt;
  top 5 p2p cryptocurrency exchange platforms:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#paxful"&gt;
  &lt;/a&gt;
  Paxful:
&lt;/h3&gt;

&lt;p&gt;One of the world's leading peer-to-peer exchange currency brands, founded in 2015, is Paxful, which has many fans worldwide.&lt;br&gt;
Paxful has made various payment methods available to its users; methods such as Bank Transfer, CashU, Paypal, Western Union.&lt;br&gt;
The cost that Paxful charges for exchanges are equal to 1% of the total, which is the seller's responsibility. In other words, buying a cryptocurrency in Paxful will not cost you extra.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N09dFiKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qtfrxxhb7yataqwm75a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N09dFiKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qtfrxxhb7yataqwm75a.jpg" alt="paxful,a p2p crypto exchange software"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#localbitcoins"&gt;
  &lt;/a&gt;
  Localbitcoins:
&lt;/h3&gt;

&lt;p&gt;The Finnish company, headquartered in Helsinki, started in 2012. One of the honors of this company is it's most popular in 2017.&lt;br&gt;
The interesting point is that when buying a Cryptocurrency from LocalBitcoins site and the usual methods that Paxful also offers, you can give money to the other party in cash and buy a Cryptocurrency. (Of course, this feature was removed in 2019.)&lt;br&gt;
The cost of Bitcoin trading commission on the LocalBitcoins site is zero.&lt;br&gt;
It should be noted that this website has been hacked once, and it does not make sense to keep your bitcoins in its wallet. Be sure to transfer the bitcoins to your wallet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zL9Vw4U3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srgbspotjktaefw606v0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zL9Vw4U3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srgbspotjktaefw606v0.jpg" alt="localbitcoins as a cryptocurrency exchange platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binance-p2p"&gt;
  &lt;/a&gt;
  Binance P2P:
&lt;/h3&gt;

&lt;p&gt;Probably the most well-known platform for currency exchange is Binance Exchange. The company was founded in 2017 by Changpen Zhao and is currently the most prominent digital currency exchange globally.&lt;br&gt;
The large company's service to most countries globally and support for more than 31 different Fiat currencies has multiplied its popularity.&lt;br&gt;
Binance also supports tether, Bitcoin, Binance USD, BNB, Ethereum, and many more cryptocurrencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syQ2Y3xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id3gl3rgu7gtuoe31vdz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syQ2Y3xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id3gl3rgu7gtuoe31vdz.jpg" alt="binance p2p crypto exchange website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wazirx"&gt;
  &lt;/a&gt;
  WazirX:
&lt;/h3&gt;

&lt;p&gt;A few months after the establishment of Binance, the WazirX P2P platform was launched in India and soon became the most trusted peer-to-peer password exchange script.&lt;br&gt;
The main reason for the popularity of this software was that for the first time in the world, it used an automatic p2p matching engine. So instead of choosing the buyer or seller manually, the system does this automatically.&lt;br&gt;
Surprisingly, the exchange cost in WazirX is zero. Isn't that great?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_o-U4Jhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rixno2vylzn9aq2x9rto.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_o-U4Jhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rixno2vylzn9aq2x9rto.jpg" alt="wazirx the best cryptocurrency exchange scrippt is india"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remitano"&gt;
  &lt;/a&gt;
  Remitano:
&lt;/h3&gt;

&lt;p&gt;Remitano was founded in Singapore in the year of its establishment, and with the reputation, it has gained over the years, it has reassured many crypto exchanges.&lt;br&gt;
Remitano's fantastic user interface has had an enormous impact on this much-welcomed platform.&lt;br&gt;
As for the negative points of Remitano, let's say that you have to give one percent of the total amount to the exchange when exchanging the password. You also have to pay a fee when you want to settle the account.&lt;br&gt;
Now, why is it still so popular with all the money it takes from its customers?&lt;br&gt;
That's a good question. Because Remitano has an outstanding level of security and its service is excellent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZuQ7sb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nhux34ghmcyk8b1d9gh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZuQ7sb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nhux34ghmcyk8b1d9gh.jpg" alt="remitano, a secure p2p crypto exchange software "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#p2p-crypto-exchange-website-development"&gt;
  &lt;/a&gt;
  p2p &lt;a href="https://radindev.com/cryptocurrency-exchange-development/"&gt;crypto exchange website development&lt;/a&gt;:
&lt;/h2&gt;

&lt;p&gt;The cost of developing and designing p2p software for exchanging bitcoins and other cryptocurrencies depends on many factors.&lt;br&gt;
First, you need to fully determine what features you want to offer your customers and design a complete mind map for it and then put it on paper and discuss with your consultants whether they are efficient or not. Features like:&lt;br&gt;
• Stop limit&lt;br&gt;
• Margin order&lt;br&gt;
• OCO&lt;br&gt;
• Future order&lt;br&gt;
• OTC order&lt;br&gt;
• And much more&lt;br&gt;
Each of these features can have a significant impact on your cost.&lt;br&gt;
For example, adding a stop limit will &lt;strong&gt;increase your cost by 25% of the initial price&lt;/strong&gt;, while &lt;strong&gt;25 working days will be added&lt;/strong&gt; to the time. Or, a margin order adds &lt;strong&gt;up to 40% to your initial cost&lt;/strong&gt; and takes &lt;strong&gt;up to 35 days&lt;/strong&gt;. The figure below shows the approximate price increase of other factors affecting the P2P price.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6R3NCgDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibpg38qx0z25ldvlm0xu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6R3NCgDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibpg38qx0z25ldvlm0xu.png" alt="added price of each feature to the crypto exchange development website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to features, other factors can affect the price, such as:&lt;br&gt;
• Programming languages ​​and technologies used&lt;br&gt;
• The company you order from&lt;br&gt;
• Mobile application&lt;br&gt;
• Multilingualism&lt;br&gt;
• Crypto payment gateways&lt;/p&gt;

&lt;p&gt;In this article, we tried to provide all the points related to the currency exchange platform development. We hope you find it helpful.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>p2p</category>
    </item>
    <item>
      <title>Flutter App life cycle</title>
      <author>Prakash S</author>
      <pubDate>Wed, 01 Sep 2021 03:46:22 +0000</pubDate>
      <link>https://dev.to/prakashselvaraj/flutter-app-life-cycle-1jim</link>
      <guid>https://dev.to/prakashselvaraj/flutter-app-life-cycle-1jim</guid>
      <description>&lt;p&gt;Basically when we are writing a code for any Native applications, We will look for a life cycle events to handle some specific scenarios. Its like handling Thanos gauntlet snap to blip 😇😇&lt;/p&gt;

&lt;p&gt;Flutter comes with life cycle events to handle app life cycle for android &amp;amp; ios.&lt;/p&gt;

&lt;p&gt;Let's see the code.&lt;/p&gt;

&lt;p&gt;To consume the life cycle event, we need to have Stateful widget with &lt;strong&gt;WidgetsBindingObserver&lt;/strong&gt; mixin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;_HomePageState&lt;/span&gt; 
&lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;WidgetsBindingObserver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The mixin WidgetsBindingObserver provides an override &lt;strong&gt;&lt;em&gt;didChangeAppLifecycleState&lt;/em&gt;&lt;/strong&gt; where we will notified for certain app life cycle state changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;override&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;didChangeAppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resumed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app resumed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app paused&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inactive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app inactive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detached&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app detached&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally to get work all these stuff, we need to inform or observe the app life cycle changes using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;override&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;initState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;WidgetsBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ofcourse dont forget to remove observer on dispose&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;override&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;WidgetsBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, we can now handle the app as per the app lifecycle.&lt;/p&gt;

&lt;p&gt;Happy Fluttering 😇😇&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>lifecycle</category>
    </item>
    <item>
      <title>What is SPA Application?</title>
      <author>hiro9108</author>
      <pubDate>Wed, 01 Sep 2021 03:02:01 +0000</pubDate>
      <link>https://dev.to/hiro9108/what-is-spa-application-48od</link>
      <guid>https://dev.to/hiro9108/what-is-spa-application-48od</guid>
      <description>&lt;p&gt;Hi, I am Hiro and a web developer based in Vancouver, Canada.&lt;/p&gt;

&lt;p&gt;Have you ever heard of the term SPA(Single Page Application)?&lt;br&gt;
If never, this article will give you a brief explanation and might help you catch the overview.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The article is short about 1-2 minutes. So please read it when you have time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At first, do you know what different "tightly coupled" and "Loosely coupled" system?&lt;/p&gt;

&lt;p&gt;Tightly coupled means that the systems are closely related to each other. For instance, if one system fails, the other will also fail because these are tightly interconnected. It's also called a monolithic system.&lt;/p&gt;

&lt;p&gt;On the other hand, loosely coupled means that the systems don't affect each other's functionality. In other words, should keep inter-system coordination to a minimum and give them independence. This means that if one system fails, the other system will not be affected. loosely coupled system also have the higher maintainability than the tightly coupled system.&lt;/p&gt;

&lt;p&gt;What do you think about which the systems are better?&lt;/p&gt;

&lt;p&gt;If I were to create a new system, I would create a loosely coupled system, because in development, it can be developed for each function of the system, and in operation, it is more easier to maintain than monolithic.&lt;/p&gt;

&lt;p&gt;SPA is one of the loosely coupled system construction methods.&lt;br&gt;
It uses JSON data for connections between systems.&lt;br&gt;
The picture below shows a simple diagram of the differences between monolithic and SPA.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0v1CBglT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssstqgf083tcs0t081qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0v1CBglT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssstqgf083tcs0t081qg.png" alt="dev-blog-whatIsSPA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, these are the simple ways of building a SPA application. If we want to build a client-side with JavaScript, there is a library called React.js.&lt;br&gt;
Of course, we can also use a framework called Vue.js.&lt;br&gt;
You can get the data from the backend API server and create the HTML Files by using data in client-side.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article, I have provided a brief explanation of what kind of system SPA is. In short words, it means that communication between the systems with data like JSON, which enables the construction of loosely coupled systems.&lt;/p&gt;

&lt;p&gt;If you interested in this article, please comment to me!&lt;/p&gt;

&lt;p&gt;Thank you for taking your time to read this article!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#biography"&gt;
  &lt;/a&gt;
  Biography
&lt;/h3&gt;

&lt;p&gt;I am a web developer based in Vancouver, Canada.&lt;br&gt;
I have four years of Job experience as a web developer in Japan. AWS services are my favorite cloud vender and have some certifications.&lt;/p&gt;

&lt;p&gt;I am actively looking for a Full-time web developer job,　especially Front End.&lt;br&gt;
If you are curious about me, Please contact me😸&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/hiroshiegawa/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hiro9108"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Accessing AppSync APIs that require Cognito Login outside of Amplify</title>
      <author>Robert J. Berger</author>
      <pubDate>Wed, 01 Sep 2021 01:23:37 +0000</pubDate>
      <link>https://dev.to/aws-builders/accessing-appsync-apis-that-require-cognito-login-outside-of-amplify-5bg8</link>
      <guid>https://dev.to/aws-builders/accessing-appsync-apis-that-require-cognito-login-outside-of-amplify-5bg8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-need"&gt;
  &lt;/a&gt;
  The Need
&lt;/h2&gt;

&lt;p&gt;You have this great Amplify App using AppSync GraphQL. You eventually find that you need to be able to access that data in your AppSync GraphQL database from tools other than your Amplify App. Its easy if you just have your AppSync API protected just by an API Key. But that isn't great security for your data!&lt;/p&gt;

&lt;p&gt;One way to protect your AppSync data is to use &lt;a href="https://docs.amplify.aws/lib/graphqlapi/authz/q/platform/js/#cognito-user-pools"&gt;Cognito Identity Pools&lt;/a&gt;. Amplify makes it pretty transparent if you are  using Amplify to build your clients. AppSync lets you do really nice &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/security-authorization-use-cases.html"&gt;table and record level access control based on logins and roles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What happens if you want to access that data from something other than an Amplify based client? How do you "login" and get the JWT credentials you need to access your AppSync APIs?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-aws-cli"&gt;
  &lt;/a&gt;
  Use AWS CLI
&lt;/h2&gt;

&lt;p&gt;The most general way is to use the AWS CLI to effectively login and retrieve the JWT credentials that can then be passed in the headers of any requests you make to your AppSync APIs.&lt;/p&gt;

&lt;p&gt;Unfortunately its not as easy as just having your login and password. It also depends on how you configured your Cognito Identity Pool and its related Client Apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cognito-user-pool-client-app"&gt;
  &lt;/a&gt;
  Cognito User Pool Client App
&lt;/h3&gt;

&lt;p&gt;You can have multiple Client Apps specified for your Cognito User Pool. I suggest  having one dedicated to these external applications. That way you can have custom configuration just for this and not disrupt your main  Amplify apps. Also you can easily turn it off if you need too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GP6QBFOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74z6pgmf1qdyqv9wkllr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GP6QBFOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74z6pgmf1qdyqv9wkllr.png" alt="User Pool Client Apps" title="User Pool Client Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case I created a new client app &lt;code&gt;shoppabdbe800b-rob-test2&lt;/code&gt; as a way to test a client app with no &lt;code&gt;App Client Secret&lt;/code&gt;. This makes it easier to access from the command line as you do not have to generate a Secret Hash (will describe how to deal with that below).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9UD1f-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hipjcnn0e3q4ronqvgi0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9UD1f-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hipjcnn0e3q4ronqvgi0.png" alt="App Client Config with no secret" title="App Client Config with no secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to allow admin level access (ie a user with admin permission) you need to check &lt;code&gt;Enable username password auth for admin APIs for authentication (ALLOW_ADMIN_USER_PASSWORD_AUTH)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to allow regular users to login you must also select &lt;code&gt;Enable username password based authentication (ALLOW_USER_PASSWORD_AUTH)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The defaults for the other fields should be ok. Be sure to save your changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimal-iam-permissions"&gt;
  &lt;/a&gt;
  Minimal IAM permissions
&lt;/h3&gt;

&lt;p&gt;As far as I can tell, these are the minimal IAM permissions to make the aws &lt;code&gt;cognito-idp&lt;/code&gt; command work for admin and regular users of AppSync (replace the Resource arn with the arn of the user pool[s] you want to control):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VisualEditor0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"cognito-idp:AdminInitiateAuth"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"cognito-idp:AdminGetUser"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:cognito-idp:us-east-1:XXXXXXXXXXXXX:userpool/us-east-1_XXXXXXXXX"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VisualEditor1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"cognito-idp:GetUser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"cognito-idp:InitiateAuth"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-credentials-with-no-app-client-secret"&gt;
  &lt;/a&gt;
  Get the Credentials with no App Client Secret
&lt;/h3&gt;

&lt;p&gt;This example is if you did not set the App Client Secret.&lt;/p&gt;

&lt;p&gt;You should now be able to get the JWT credentials from the AWS CLI.&lt;/p&gt;

&lt;p&gt;This assumes you have&lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html"&gt; set up your&lt;/a&gt; &lt;code&gt;~/.aws/credentials&lt;/code&gt; file or whatever is appropriate for your command line environment so that you have the permissions to access this service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When using the &lt;code&gt;ADMIN_USER_PASSWORD_AUTH&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cognito-idp admin-initiate-auth &lt;span class="nt"&gt;--user-pool-id&lt;/span&gt; us-east-1_XXXXXXXXXX &lt;span class="nt"&gt;--auth-flow&lt;/span&gt; ADMIN_USER_PASSWORD_AUTH &lt;span class="nt"&gt;--client-id&lt;/span&gt; XXXXXXXXXXXXX &lt;span class="nt"&gt;--auth-parameters&lt;/span&gt; &lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username1,PASSWORD&lt;span class="o"&gt;=&lt;/span&gt;XXXXXXXXXXXXX &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; creds.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When using the &lt;code&gt;USER_PASSWORD_AUTH&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cognito-idp initiate-auth &lt;span class="nt"&gt;--auth-flow&lt;/span&gt; USER_PASSWORD_AUTH &lt;span class="nt"&gt;--client-id&lt;/span&gt; XXXXXXXXXXXXX &lt;span class="nt"&gt;--auth-parameters&lt;/span&gt; &lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username2,PASSWORD&lt;span class="o"&gt;=&lt;/span&gt;XXXXXXXXXXXX &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; creds.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course replace the &lt;code&gt;XXXX&lt;/code&gt;'s with the actual values.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;user-pool-id&lt;/code&gt; - The pool id found at the top of the &lt;em&gt;User Pool Client Apps&lt;/em&gt; page&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;client-id&lt;/code&gt; - The &lt;code&gt;client-id&lt;/code&gt; of the &lt;code&gt;app client&lt;/code&gt; you are using&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;USERNAME&lt;/code&gt; - The Username normally used to login to your Amplify app&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PASSWORD&lt;/code&gt; - The Password normally used to login to your Amplify app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The results will be in &lt;code&gt;creds.json&lt;/code&gt;. (You could not use the &lt;code&gt;&amp;gt; creds.json&lt;/code&gt; if you want to just see the results)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-the-credentials-when-there-is-an-app-client-secret"&gt;
  &lt;/a&gt;
  Get the Credentials when there is an App Client Secret
&lt;/h3&gt;

&lt;p&gt;This assumes you have an App Client that has an &lt;code&gt;app secret key&lt;/code&gt; set.&lt;/p&gt;

&lt;p&gt;The main thing here is you need to generate a &lt;code&gt;secret hash&lt;/code&gt; to send along with the command.&lt;/p&gt;

&lt;p&gt;You can do that by creating a little python program to generate it for you when you need it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hmac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;app_client_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;secret_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digestmod&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SECRET HASH:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;secret_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"len sys.argv: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usage: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;" &amp;lt;username&amp;gt; &amp;lt;app_client_id&amp;gt; &amp;lt;app_client_secret&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file someplace that you can execute it from like &lt;code&gt;~/bin/app-client-secret-hash&lt;/code&gt; and make it executable (&lt;code&gt;chmod a+x ~/bin/app-client-secret-hash&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;app-client-id&lt;/code&gt; - The &lt;code&gt;client-id&lt;/code&gt; of the &lt;code&gt;app client&lt;/code&gt; you are using&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app-client-secret&lt;/code&gt; - The secret of the &lt;code&gt;app client&lt;/code&gt; you are using (its on the App Client page of the User Pool)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;USERNAME&lt;/code&gt; - The Username normally used to login to your Amplify app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/bin/app-client-secret-hash  &amp;lt;username&amp;gt; &amp;lt;app_client_id&amp;gt; &amp;lt;app_client_secret&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where of  course you replace the arguments with the actual values. &lt;/p&gt;

&lt;p&gt;The result is a &lt;code&gt;secret-hash&lt;/code&gt; you will use in the following command to get the actual JWT credentials&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cognito-idp admin-initiate-auth &lt;span class="nt"&gt;--user-pool-id&lt;/span&gt; us-east-1_XXXXXXXXXX &lt;span class="nt"&gt;--auth-flow&lt;/span&gt; ADMIN_USER_PASSWORD_AUTH &lt;span class="nt"&gt;--client-id&lt;/span&gt; XXXXXXXXXXXXX &lt;span class="nt"&gt;--auth-parameters&lt;/span&gt; &lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username3,PASSWORD&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'secret password'&lt;/span&gt;,SECRET_HASH&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'secret-hash'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; creds.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could do the same thing with &lt;code&gt;USER_PASSWORD_AUTH&lt;/code&gt; if you nee that instead&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cognito-idp initiate-auth &lt;span class="nt"&gt;--auth-flow&lt;/span&gt; USER_PASSWORD_AUTH &lt;span class="nt"&gt;--client-id&lt;/span&gt; XXXXXXXXXXXXX &lt;span class="nt"&gt;--auth-parameters&lt;/span&gt; &lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rob+admin,PASSWORD&lt;span class="o"&gt;=&lt;/span&gt;XXXXXXXXX,SECRET_HASH&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'secret-hash'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; creds.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-credentials"&gt;
  &lt;/a&gt;
  Using the Credentials
&lt;/h2&gt;

&lt;p&gt;How you use these credentials depends on what tool or  how you are trying to access your AppSync APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-some-javascript"&gt;
  &lt;/a&gt;
  From some Javascript
&lt;/h3&gt;

&lt;p&gt;You can just add in the &lt;code&gt;IdToken&lt;/code&gt; from the &lt;code&gt;creds.json&lt;/code&gt; as an &lt;code&gt;Authorization&lt;/code&gt; header when you build the request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;graphQLFetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graphQLParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;APPSYNC_API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TYPE_YOUR_APPSYNC_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;credentialsAppSync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eyJraWQiOiI1dVUwMld...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;APPSYNC_API_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;credentialsAppSync&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graphQLParams&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;omit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using some GraphQL tool that needs to access your AppSync APIs. The tool should have a way that you can supply the token and it will add it as an &lt;code&gt;Authorization&lt;/code&gt; header for its own requests.&lt;/p&gt;

&lt;p&gt;Do let me know if you have some examples of tools that would make use of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/mobile/appsync-graphiql-local/"&gt;Explore AWS AppSync APIs with GraphiQL from your local machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/cognito-unable-to-verify-secret-hash/"&gt;How do I troubleshoot "Unable to verify secret hash for client " errors from my Amazon Cognito user pools API?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>appsync</category>
      <category>graphql</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Vocabulary Building Day 4</title>
      <author>vindhya Hegde </author>
      <pubDate>Wed, 01 Sep 2021 01:00:39 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-4-383o</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-4-383o</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;demur&lt;/strong&gt;(verb) : object or show reluctance&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2owZ5CSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.thinglink.me/api/image/621360813881425922/1240/10/scaletowidth" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2owZ5CSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.thinglink.me/api/image/621360813881425922/1240/10/scaletowidth" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=demur&amp;amp;oq=demur&amp;amp;aqs=chrome.0.69i59j0i433i512l6j0i512l3.4697j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;amorphous&lt;/strong&gt;(adjective) : shapeless&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--osYBv_5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ocw.mit.edu/courses/materials-science-and-engineering/3-071-amorphous-materials-fall-2015/3-071f15.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--osYBv_5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ocw.mit.edu/courses/materials-science-and-engineering/3-071-amorphous-materials-fall-2015/3-071f15.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=amorphous&amp;amp;oq=amorphous&amp;amp;aqs=chrome.0.69i59j0i433i512l2j0i512l5j0i433i512j0i512.5265j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;venality&lt;/strong&gt;(noun): the condition of being susceptible to bribes or corruption&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-wBr80j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2.bp.blogspot.com/-WNqDum-V-IQ/V4QVryAF8-I/AAAAAAAAB9Y/7aYhpVUoJNYFOs2YqN4YzcVnn9EhNLmDwCLcB/s320/bribe%252Bdefinition.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-wBr80j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2.bp.blogspot.com/-WNqDum-V-IQ/V4QVryAF8-I/AAAAAAAAB9Y/7aYhpVUoJNYFOs2YqN4YzcVnn9EhNLmDwCLcB/s320/bribe%252Bdefinition.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.dictionary.com/browse/venality"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;enervate&lt;/strong&gt;(verb) : to sap energy from.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x5-EYd51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://webmaggu.com/wp-content/uploads/2014/12/enervate.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x5-EYd51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://webmaggu.com/wp-content/uploads/2014/12/enervate.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=enervate&amp;amp;oq=enervate&amp;amp;aqs=chrome..69i57j0i433i512l2j0i512l7.9787j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
5.&lt;strong&gt;ingenuous&lt;/strong&gt;(adjective): to be naive and innocent&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TlTsQ3aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/ingenuous-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TlTsQ3aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/ingenuous-1.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=ingenuous&amp;amp;oq=ingenuous&amp;amp;aqs=chrome..69i57j0i433i512j0i512l4j0i10i512j0i512l3.11675j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;

</description>
      <category>day4</category>
    </item>
    <item>
      <title>My Best 9 VS Code Extensions!</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 31 Aug 2021 23:54:05 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/my-best-9-vs-code-extensions-189b</link>
      <guid>https://dev.to/ayabouchiha/my-best-9-vs-code-extensions-189b</guid>
      <description>&lt;p&gt;I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, today I'm going to share with you my best 9 vscode extensions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode#:~:text=Prettier%20is%20an%20opinionated%20code,account%2C%20wrapping%20code%20when%20necessary."&gt;prettier&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-comments"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;better comments&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Better Comments extension will help you create more human-friendly comments in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thunder-client"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;thunder client&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;for testing sending http requests like postman&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autorename-tag"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;AutoRename tag&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;autoRenameTag: used for automatically rename paired HTML/XML tag,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bracket-pair-colorizer-2"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Bracket Pair Colorizer 2: used for colorizing (), {} and []&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quokka"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode"&gt;Quokka&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Quokka.js is a developer productivity tool for rapid JavaScript / TypeScript prototyping. Runtime values are updated and displayed in your IDE next to your code, as you type&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-best-theme"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The Best Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;one of my favorites theme&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#material-icon-theme"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;for changing the default directories icon to  Material Design Icons according to the directory's name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indentrainbow"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;Indent-rainbow&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Indent rainbow: used for making indentations mor readable.&lt;/p&gt;

&lt;p&gt;Have an amazing day!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Parcel Template Project</title>
      <author>Jesus Ramirez</author>
      <pubDate>Tue, 31 Aug 2021 22:36:03 +0000</pubDate>
      <link>https://dev.to/jesusrmz19/parcel-template-project-3a67</link>
      <guid>https://dev.to/jesusrmz19/parcel-template-project-3a67</guid>
      <description>&lt;p&gt;By now, I have initialized more than 10 different projects with Parcel, some with just regular CSS, some with SCSS included but all using the same file and folder structure so I guess is about time I create a start up template that I can clone from Github to my local machine and just get everything up and running.&lt;/p&gt;

&lt;p&gt;Parcel, as you may know by now, maybe, is a simple web application bundler that doesn't require a config file. The tool bundles all individual files as modules into one big-ass file that will be executed by the browser. Parcel works with a lot of different file types: HTML, CSS, SCSS, LESS, Stylus, JavaScript, TypeScript, etc. but I've only used it with either HTML + CSS + JS or HTML + SCSS + JS, and I love it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-files-amp-folder-structure"&gt;
  &lt;/a&gt;
  Basic Files &amp;amp; Folder Structure
&lt;/h2&gt;

&lt;p&gt;I'm sure that the way I structure my files and folders is nothing extrordinary as I'm almost 100% sure that this is how EVERYBODY structures their own projects. Basically you have one root folder with the main index.html file and two subfolders: dist &amp;amp; src.&lt;/p&gt;

&lt;p&gt;The distribution or dist folder is where the project that the browser see lives, this is the folder that will have all your production ready files, the map.css file, the bundle js file, the optimized images, etc. It is important to tell that even if you don't create this folder, Parcel will create this for you during the development process or production build.&lt;/p&gt;

&lt;p&gt;The source or src folder is where all the diferent modules and files live, Parcel will look into the folders within the src folder and bundle the files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOIyUf38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwvv845hjn3nplzsbp7f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOIyUf38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwvv845hjn3nplzsbp7f.jpg" alt="Folder Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm-init"&gt;
  &lt;/a&gt;
  NPM Init
&lt;/h2&gt;

&lt;p&gt;Now that we have the structure, lets install Parcel, for that we are going to use the always reliable and always ready node package manager (NPM) and it's basic npm init command. I know there are different terminals but I'm a simple guy that uses VS CODE, which means I always use the VSCODE terminal. &lt;/p&gt;

&lt;p&gt;So go ahead an open your prefered terminal, just make sure that you're inside the root folder of your project and then type the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After typing that you will see a lot of basic questions like name, description, version, etc. you can fill those now or later, there's no difference. I always hit the return key until they're all done and then modify the information in the package.json file&lt;/p&gt;

&lt;p&gt;Now, you will see a new file in your root folder: package.json, and it should look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcelproject_template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#install-parcel"&gt;
  &lt;/a&gt;
  Install Parcel
&lt;/h2&gt;

&lt;p&gt;Now we install Parcel by running the command below in your terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install parcel --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We installed it as a dev dependency because we don't really need it for production, it's a tool that we will use to bundle and deploy the site but the code that actually does all this is not needed in the browser, as all this is done behind the curtain&lt;/p&gt;

&lt;p&gt;In the past, and by past I mean two or three months ago, there was something going on with Parcel 2.0 that it was causing me to delete the cache folder and running the program over and over again to see the changes I've made to either HTML or CSS, but the last time I used it, it worked fine.&lt;/p&gt;

&lt;p&gt;So just in case this happens to you I'm goign to tell you how I fixed it. To start I had to uninstall Parcel 2.0 by putting the command below in the terminal&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall parcel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I just installed a known stable version of Parcel by putting the below command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install parcel@1.12.3 --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;EDITOR'S NOTE:&lt;/strong&gt; I wrote this post in a three day period and on the third day something happened to Parcel 2.0 that stopped working so I had to uninstalled and installed the 1.12.3 version and it's working perfectly.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
Not completely sure this is the best approach and maybe there's something wrong on my side, but this seems to fix my problem everytime. Ok, now that we have Parcel installed, our package.json file should look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcelproject_template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parcel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.0-rc.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What we will do next is to write the scripts that will launch Parcel during development and the build command that will bundle and optimize everything for production. In the block below you will be able see the changes that we made to our package.json.&lt;/p&gt;

&lt;p&gt;We removed the main direction in order to direct Parcel with the command build where to actually create the bundle files. And then we typed in two extra scripts, start, which initialize Parcel and deploys a local host for you to check your site, and build, for production, which would create or replace the files inside the dist folder with new ones all bundle up.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcelproject_template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcel index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcel build index.html --dist-dir ./dist"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parcel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.0-rc.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-to-check-if-it-worked"&gt;
  &lt;/a&gt;
  How to check if it worked?
&lt;/h2&gt;

&lt;p&gt;At this moment I have a bunch of empty folders and an empty index.html file but in order to test that Parcel is actually working and doing what it needs to do we create basic HTML, CSS, JS files.&lt;/p&gt;

&lt;p&gt;Go ahead and add the below code to your files:&lt;/p&gt;

&lt;p&gt;Inside index.html you can see that I already put the reference to the main css and the script js files&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/src/css/main.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"src/js/script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Placeholder&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create the main.css file inside the css folder that's inside the src folder. Because the intention behind this is create a template you can add whatever CSS you like, I always put the box-sizing at the top and create a main.css file that eventually will have all the imports files&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Gill Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Gill Sans MT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Calibri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Trebuchet MS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And last but not least, the simple and always efficient console log test&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1, 2, 3... Testing Parcel 📦&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now if you go ahead an open up the terminal and put the command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see something like the image below, and the message you put in your script.js file in the browser's dev tools&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVAWFUTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rar3hbt9o9p2ykgjrkp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVAWFUTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rar3hbt9o9p2ykgjrkp1.png" alt="Hello World in white with Black Background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github-repo-and-use"&gt;
  &lt;/a&gt;
  GitHub Repo and Use
&lt;/h2&gt;

&lt;p&gt;Now that we have the folder, we can create a repo, initiate git in our root folder and commit all the files we have, just remember to create a .gitignore file to include things like the node_modules folder or the Parcel cache folder.&lt;/p&gt;

&lt;p&gt;Congratz! Now you have an easy template that you can clone and push to a new repo! If you want to see how to clone and change the URL, go and read the instructiosn in the README file of my &lt;a href="https://github.com/jesusrmz19/Parcel_Template"&gt;Parcel_Template&lt;/a&gt; repo.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jesusrmz19"&gt;
        jesusrmz19
      &lt;/a&gt; / &lt;a href="https://github.com/jesusrmz19/Parcel_Template"&gt;
        Parcel_Template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Template with ParcelJS as bundler and vanilla CSS 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Project Template&lt;/h1&gt;
&lt;p&gt;This is an empty repo that is ready to be cloned anywhere and start coding with Parcel as bundler.&lt;/p&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jesusrmz19/Parcel_Template#instructions"&gt;Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jesusrmz19/Parcel_Template#author"&gt;Author&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Instructions&lt;/h2&gt;
&lt;p&gt;Want to use it? Just clone it! Follow these simple steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new folder in your computer&lt;/li&gt;
&lt;li&gt;In the command line, make sure you're in that folder&lt;/li&gt;
&lt;li&gt;Type the following to clone this repo:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesusrmz19/Parcel_Template.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="4"&gt;
&lt;li&gt;Now your new folder will download a folder called Parcel_Template&lt;/li&gt;
&lt;li&gt;Change to the Parcel_Template folder:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;cd Parcel_Template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="6"&gt;
&lt;li&gt;Make a new repo, in this case, the new one is called example&lt;/li&gt;
&lt;li&gt;Type the following in the command line&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git remote set-url origin https://github.com/user/example.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it! The command above will change the origin of your repo and now the next change you make will commit all the files to the new repo you just created.&lt;/p&gt;
&lt;p&gt;NOTE: Remember to run npm install in your machine after changing the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jesusrmz19/Parcel_Template"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>New MMO Games API By MMOBomb</title>
      <author>Luis Paulo Dobreira</author>
      <pubDate>Tue, 31 Aug 2021 21:44:11 +0000</pubDate>
      <link>https://dev.to/ldobreira/new-mmo-games-api-by-mmobomb-5f7m</link>
      <guid>https://dev.to/ldobreira/new-mmo-games-api-by-mmobomb-5f7m</guid>
      <description>&lt;p&gt;MMOBomb just launched the MMO Games API and everyone can use it for free at &lt;a href="https://www.mmobomb.com/api"&gt;https://www.mmobomb.com/api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the last few months, MMOBomb.com has been rebuilt from the ground up with this API at the core of its planned functionality. Users can now tap directly into multiplayer gaming news, game lists, giveaways, and more for use in their personal projects, apps, discord channels, and more. Best of all, this access is free and easy to use without restrictions or limitations.&lt;/p&gt;

&lt;p&gt;Over 8 endpoints are already online for your use, and more are on the way! Access programmatically the best multiplayer online games, by platform, by genre, and more! &lt;a href="https://www.mmobomb.com"&gt;MMOBomb&lt;/a&gt; is also taking suggestions on custom API functionality that creators need for their projects. Future enhancements already include the ability to track news from specific games and RapidAPI support.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>api</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Importing modules in JavaScript, are we doing it right?</title>
      <author>Diego Juliao</author>
      <pubDate>Tue, 31 Aug 2021 21:39:43 +0000</pubDate>
      <link>https://dev.to/dianjuar/importing-modules-in-javascript-are-we-doing-it-right-nc</link>
      <guid>https://dev.to/dianjuar/importing-modules-in-javascript-are-we-doing-it-right-nc</guid>
      <description>&lt;p&gt;We as Javascript developers need to use libraries in our day to day, it simplifies our work a lot. Nowadays we do that in this way mostly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;func1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we quickly analyze it, in the first statement we are importing everything and putting it on a variable called &lt;code&gt;lib&lt;/code&gt;, on the second, we are importing everything again and destructuring only what we need; what about all the other code that I'm not using?&lt;/p&gt;



&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#will-not-all-the-unused-librarys-code-end-up-on-the-final-bundle-making-my-application-unnecessary-heavier"&gt;
  &lt;/a&gt;
  &lt;em&gt;Will not all the unused library's code end up on the final bundle making my application unnecessary heavier?&lt;/em&gt;
&lt;/h2&gt;
&lt;/blockquote&gt;



&lt;p&gt;Today you will learn how to improve your bundle size just by changing the way you import. After this, you are going to be able to detect a simple optimization opportunity for your bundle!&lt;/p&gt;






&lt;h2&gt;
  &lt;a href="#tl-dr"&gt;
  &lt;/a&gt;
  TL; DR
&lt;/h2&gt;

&lt;p&gt;Verify if the library has support for ES6 and you can import freely, you will get always the best result 🙆‍♂️. If it doesn't ⚠️, you need to import using cherry-picking.&lt;/p&gt;






&lt;h2&gt;
  &lt;a href="#can-we-import-as-we-want-without-consequences"&gt;
  &lt;/a&gt;
  Can we import as we want without consequences?
&lt;/h2&gt;

&lt;p&gt;When we compile our front-end apps, there is a process that Webpack applies called &lt;a href="https://webpack.js.org/guides/tree-shaking/"&gt;Tree Shaking&lt;/a&gt;. Basically, is code elimination, the code that is not being used by anyone. This process prevents having dead code in our final bundle, making it lighter and the application is going to load faster for our users!&lt;/p&gt;

&lt;p&gt;Let's analyse this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both cases all the library content is being imported, the first place is the easiest to spot, all the library's content is being assigned to the variable &lt;code&gt;lib&lt;/code&gt;, in the second case we are just applying destructuring to the library's content to get what we need. Thanks to Tree Shaking all the unused code doesn't end up on our bundles.&lt;/p&gt;

&lt;p&gt;So, thanks to Tree Shaking I'm excused and I can import however I want and all the unused code imported from the library will be removed automagically?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not always is the case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is a scenario when Tree Shaking is not going to be able to detect what is dead code having as consequence to remove nothing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#es6"&gt;
  &lt;/a&gt;
  ES6
&lt;/h3&gt;

&lt;p&gt;ECMAScript 2015(aka ES6) Module Syntax; it sounds complex, but it's something really popular nowadays. It's just a syntax to import a JS module, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;awesome-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;justAConst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you are using a library that has ES6 Module Syntax compatibility, you don't need to worry, import as will, Tree Shaking have you covered 😉. In fact, is the only module syntax that Tree Shaking supports, let's take a look at the &lt;a href="https://webpack.js.org/guides/tree-shaking/"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tree shaking&lt;/em&gt; is a term commonly used in the JavaScript context for dead-code elimination. It relies on the static structure of ES2015 module syntax, i.e. &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;The webpack 2 release came with built-in support for ES2015 modules (alias harmony modules) as well as unused module export detection...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6&gt;
  &lt;a href="#if-you-are-completely-new-about-js-modules"&gt;
  &lt;/a&gt;
  If you are completely new about 👉 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;JS Modules&lt;/a&gt;
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#no-es6-module-syntax"&gt;
  &lt;/a&gt;
  No ES6 module syntax
&lt;/h3&gt;

&lt;p&gt;A library can be delivered (packaged) with other module systems different than ES6, even though if its source code uses ES6 module syntax, a compilation process could be implemented to only support &lt;a href="https://nodejs.org/api/modules.html#modules_modules_commonjs_modules"&gt;CommonJS&lt;/a&gt; for example. The projects written using pure JS (with no transpilation process (Babel, TypeScript)) that uses the CommonJs module system is another example.&lt;/p&gt;

&lt;p&gt;So, no ES6 module syntax present = no Tree Shaking. The only way to have a healthy bundle when dealing with libraries with no ES6 is importing using a technique called cherry-picking, you need to specify the absolute path to the file that contains the info needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;small&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;common-js-lib/small&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#downsides"&gt;
  &lt;/a&gt;
  Downsides
&lt;/h4&gt;

&lt;p&gt;Doing only cherry-picking has downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to know the path to the module needed. (Your IDE could help in this quest)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to specify each one of the imports that you need, ex:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/has&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/capitalize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;lastIndexOf&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/lastIndexOf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a maintainer, you may want to have a nice and easy-to-use scaffolding design to detect with ease something in your lib. This needs to be designed, implemented, and maintained.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You may forget to do it (ESLint &lt;a href="https://eslint.org/docs/rules/no-restricted-imports"&gt;can help&lt;/a&gt;) making your bundle unnecessary heavier&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#test-performed"&gt;
  &lt;/a&gt;
  Test Performed
&lt;/h2&gt;

&lt;p&gt;Having the theory learned I decided to prove all this. What I did was create some libraries with different module support, create several front-end apps on React and Angular&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; to test if Tree Shaking really does its job.&lt;/p&gt;

&lt;p&gt;The libraries created were simple, they export two variables &lt;code&gt;small&lt;/code&gt; and &lt;code&gt;big&lt;/code&gt;. &lt;code&gt;small&lt;/code&gt; has as a value a doge 🐕, &lt;code&gt;small = '🐕'&lt;/code&gt; but &lt;code&gt;big&lt;/code&gt; instead has 1646400 doges, &lt;code&gt;big = '🐕🐕🐕🐕🐕🐕🐕🐕🐕...'&lt;/code&gt;. This is going to make &lt;code&gt;big&lt;/code&gt; to be 6.3 megabytes of weight.&lt;/p&gt;

&lt;p&gt;Only &lt;code&gt;small&lt;/code&gt; is going to be use at all time, so if &lt;code&gt;big&lt;/code&gt; sneaks into the final bundle we are going to notice it on sight!.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#healthy-bundle"&gt;
  &lt;/a&gt;
  Healthy Bundle
&lt;/h3&gt;

&lt;p&gt;This how a healthy bundle looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--miW7B2fu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0kar9uiffp7oi7pot3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miW7B2fu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0kar9uiffp7oi7pot3w.png" alt="a healthy, bundle of 211.78KB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smelly-bundle"&gt;
  &lt;/a&gt;
  Smelly Bundle 🤢
&lt;/h3&gt;

&lt;p&gt;The smelly one! You can notice a big white box that represents &lt;code&gt;big&lt;/code&gt; and represents 96.7% of the application size:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xWljwxf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpvw6wwvwfjpbjhf8fjp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWljwxf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpvw6wwvwfjpbjhf8fjp.png" alt="Smelly Bundle, bundle of 6.49MB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;The results were as expected, if your library has to offer ES6 module syntax, Tree Shaking will do its job. If not, cherry-picking was the only way to get a healthy bundle.&lt;/p&gt;

&lt;p&gt;Here is the repo if you are curious &lt;a href="https://github.com/dianjuar/how-to-import"&gt;dianjuar/how-to-import&lt;/a&gt;. All this was created in a Monorepo using &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;, the library's npm publishing was mocked using &lt;a href="https://github.com/wclr/yalc"&gt;yalc&lt;/a&gt;. The bundle analysis was made using &lt;a href="https://www.npmjs.com/package/source-map-explorer"&gt;source-map-explorer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, I wanted to make this test with popular libraries, so this is what I got, importing as &lt;code&gt;import { whatINeed } from 'popular-lib'&lt;/code&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Healthy Bundle&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/lodash"&gt;lodash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/moment"&gt;moment&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rxjs"&gt;rxjs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/lodash-es"&gt;lodash-es&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/date-fns"&gt;date-fns&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@angular/core"&gt;@angular/core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.n-pmjs.com/package/@angular/material"&gt;@angular/material&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npmjs.com/package/react"&gt;react&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npmjs.com/package/react-dom"&gt;react-dom&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npmjs.com/package/@material-ui/core"&gt;@material-ui/core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npmjs.com/package/@fortawesome/react-fontawesome"&gt;@fortawesome/react-fontawesome&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#useful-tools"&gt;
  &lt;/a&gt;
  Useful Tools
&lt;/h2&gt;

&lt;p&gt;Along with this experiment, I was using the VsCode extension &lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Import Cost&lt;/a&gt; and was precise along with the result. With the extension, you will be able to see right away how much an import will cost to the bundle. It will not tell you when you are getting a healthy or smelly bundle, but you can tell when an import cost is sus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/08af5550483d9e9ccee846ebdbcb74332bdb523a738be4cb5aec8e4ba7df49e8/68747470733a2f2f636974772e6465762f5f6e6578742f696d6167653f75726c3d253246706f737473253246696d706f72742d636f73742532463171756f76335446706747327572376d79434c477473412e67696626773d3130383026713d3735" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/08af5550483d9e9ccee846ebdbcb74332bdb523a738be4cb5aec8e4ba7df49e8/68747470733a2f2f636974772e6465762f5f6e6578742f696d6167653f75726c3d253246706f737473253246696d706f72742d636f73742532463171756f76335446706747327572376d79434c477473412e67696626773d3130383026713d3735" alt="Import Cost Live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h6&gt;
  &lt;a href="#gif-extracted-from-the-readme-of-cost-import"&gt;
  &lt;/a&gt;
  Gif extracted from the &lt;a href="https://github.com/wix/import-cost#import-cost--"&gt;README&lt;/a&gt; of Cost Import
&lt;/h6&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Tree Shaking have you covered! You can import however you want and you will be getting a healthy bundle &lt;strong&gt;if and only if&lt;/strong&gt; the library has support for ES6 Module Syntax (&lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can make your bundle unnecessary heavy if you don't cherry-pick the imports on libraries without ES6 module support, like &lt;a href="https://www.npmjs.com/package/lodash"&gt;lodash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Import Cost&lt;/a&gt; can help you to spot an import that needs some refinement.&lt;/p&gt;







&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;The experiment is agnostic to the Framework or Library used, if webpack is involved in the bundling it would take the same effect. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>es6</category>
      <category>treeshaking</category>
    </item>
  </channel>
</rss>
