<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Underrated React Hooks you’re missing out on</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 13 Dec 2021 21:35:27 +0000</pubDate>
      <link>https://dev.to/logrocket/underrated-react-hooks-youre-missing-out-on-346a</link>
      <guid>https://dev.to/logrocket/underrated-react-hooks-youre-missing-out-on-346a</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chiamakaumeh/"&gt;Chiamaka Umeh&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;React Hooks provide us with access to core React functionalities within the context of function components. Traditionally, to optimize React, developers have had to switch between function and class components, however, React Hooks allow us to use function components throughout projects to build both small and large applications.&lt;/p&gt;

&lt;p&gt;If you’re a React developer who likes to write function components over class components, then this article is for you; we’ll look at three helpful yet somewhat underrated React Hooks that you might not be so familiar with, &lt;code&gt;useImperativeHandle&lt;/code&gt;, &lt;code&gt;useLayoutEffect&lt;/code&gt;, and &lt;code&gt;useDebugValue&lt;/code&gt;. We’ll explore their use cases, syntax, and a few code examples. Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-raw-useimperativehandle-endraw-hook"&gt;
  &lt;/a&gt;
  React &lt;code&gt;useImperativeHandle&lt;/code&gt; Hook
&lt;/h2&gt;

&lt;p&gt;In React, data is passed from parent to child components via props, known as unidirectional data flow. The parent component cannot directly call a function defined in the child component or reach down to grab a value for itself.&lt;/p&gt;

&lt;p&gt;In certain circumstances, we want our parent component to reach down to the child component, getting data that originates in the child component for its own use. We can achieve this type of data flow with the &lt;a href="https://reactjs.org/docs/hooks-reference.html#useimperativehandle"&gt;&lt;code&gt;useImperativeHandle&lt;/code&gt; Hook&lt;/a&gt;, which allows us to expose a value, state, or function inside a child component to the parent component through &lt;code&gt;ref&lt;/code&gt;. You can also decide which properties the parent component can access, thereby maintaining the private scoping of the child component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useImperativeHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;ref&lt;/code&gt;: the ref passed down from the parent component&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;createHandle&lt;/code&gt;: the value to be exposed to the parent component&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;dependencies&lt;/code&gt;: an array of values that causes the Hook to rerun when changed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;p&gt;When you need a bidirectional data and logic flow, but you don’t want to overcomplicate things by introducing state management libraries, the &lt;code&gt;useImperativeHandle&lt;/code&gt; Hook is a great choice.&lt;/p&gt;

&lt;p&gt;For example, I once used the &lt;code&gt;useImperativeHandle&lt;/code&gt; Hook when I needed to open a modal component when a button in the parent component was clicked.&lt;/p&gt;

&lt;p&gt;Defining state in the parent component would cause the parent component and its children to re-render each time the modal button was clicked, therefore, I wanted the state in the child component. Instead, I stored the modal state in the &lt;code&gt;Modal&lt;/code&gt; component using &lt;code&gt;useImperativeHandle&lt;/code&gt; and &lt;code&gt;forwardRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Child&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ParentComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;childRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleOpenModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;childRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a parent component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Child&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;childRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleOpenModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Open modal&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ParentComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we defined a &lt;code&gt;ref&lt;/code&gt;, which we passed down to the child component. In our code below, the &lt;code&gt;ref&lt;/code&gt; will be the first parameter passed to &lt;code&gt;useImperativeHandle&lt;/code&gt; in the child component.&lt;/p&gt;

&lt;p&gt;We also defined a &lt;code&gt;handleOpenModal&lt;/code&gt; function, which returns the &lt;code&gt;openModal&lt;/code&gt; function passed up from the child component with &lt;code&gt;childRef.current.openModal(value)&lt;/code&gt;. The function is then called when the button is clicked.&lt;/p&gt;

&lt;p&gt;The child component should look like the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useImperativeHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;openModal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOpenModal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="nx"&gt;useImperativeHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;openModal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOpenModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;openModal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a modal!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOpenModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Close &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We wrapped the child component in a &lt;code&gt;forwardRef&lt;/code&gt; to expose the &lt;code&gt;openModal&lt;/code&gt; function defined in &lt;code&gt;useImperativeHandle&lt;/code&gt;. In the parent component, the state defined in the child component is changed, causing a re-render of only the child component. Problem solved!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-raw-uselayouteffect-endraw-hook"&gt;
  &lt;/a&gt;
  React &lt;code&gt;useLayoutEffect&lt;/code&gt; Hook
&lt;/h2&gt;

&lt;p&gt;Like the &lt;code&gt;useEffect&lt;/code&gt; Hook, the &lt;code&gt;useLayoutEffect&lt;/code&gt; Hook lets you perform side effects like API calls, setting up subscriptions, and manually manipulating the DOM in a function component.&lt;/p&gt;

&lt;p&gt;Although React fires both &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useLayoutEffect&lt;/code&gt; after performing the DOM updates, &lt;code&gt;useLayoutEffect&lt;/code&gt; is called before the browser paints those updates for users to see, synchronously, while &lt;code&gt;useEffect&lt;/code&gt; is called after the browser paints those updates, asynchronously.&lt;/p&gt;

&lt;p&gt;Therefore, the browser cannot paint any browser updates until &lt;code&gt;useLayoutEffect&lt;/code&gt; runs. For this reason, you’ll mostly use &lt;code&gt;useEffect&lt;/code&gt;, which shows your users something like a loader in the browser while the side effects are being run.&lt;/p&gt;

&lt;p&gt;However, there are a few situations where we want to run the side effect and update the DOM before showing our users the updates. We can do so using &lt;code&gt;useLayoutEffect&lt;/code&gt; with the following syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;callback&lt;/code&gt;: the function that contains the side effect logic&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;dependencies&lt;/code&gt;: an array of dependencies. The callback function is run again when the value of any of the dependencies changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TestHooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRandomNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'App'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Change value 
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TestHooks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we have a side effect that updates state with a random number and includes a button to reset state to &lt;code&gt;0&lt;/code&gt;. If we run the code above with the &lt;code&gt;useEffect&lt;/code&gt; Hook, you’ll notice a flickering effect as the number changes from &lt;code&gt;0&lt;/code&gt; to the next random number when the reset button is clicked.&lt;/p&gt;

&lt;p&gt;Now, change &lt;code&gt;useEffect&lt;/code&gt; to &lt;code&gt;useLayoutEffect&lt;/code&gt; and click the button again. The transition to the next random number is smoother.&lt;/p&gt;

&lt;p&gt;Code with &lt;code&gt;useEffect&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;DOM&lt;/span&gt; &lt;span class="nx"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Browser&lt;/span&gt; &lt;span class="nx"&gt;paints&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt; &lt;span class="nx"&gt;DOM&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Broswer&lt;/span&gt; &lt;span class="nx"&gt;paints&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code with &lt;code&gt;useLayoutEffect&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;DOM&lt;/span&gt; &lt;span class="nx"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;another&lt;/span&gt; &lt;span class="nx"&gt;DOM&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Broswer&lt;/span&gt; &lt;span class="nx"&gt;paints&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;overall&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can experiment with the &lt;a href="https://codesandbox.io/s/youthful-shadow-0ey4y?file=/src/App.js"&gt;code&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;p&gt;Once, when I was developing a static website for a client, I used the &lt;code&gt;useLayoutEffect&lt;/code&gt; Hook and &lt;a href="https://blog.logrocket.com/react-router-dom-tutorial-examples/"&gt;React Router DOM for routing&lt;/a&gt;. However, I noticed that the window scroll position of the page didn’t move to the top when navigating between the different pages, instead, scrolling began from where it was on the previous page, which is not an uncommon occurrence with React Router DOM.&lt;/p&gt;

&lt;p&gt;We can solve this problem with &lt;code&gt;useLayoutEffect&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ScrollToTop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;index.js&lt;/code&gt; file looks like the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ScrollToTop&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we tell the browser to take a user to the top of the page before showing them any content. With &lt;code&gt;useLayoutEffect&lt;/code&gt;, we can make that process seamless.&lt;/p&gt;

&lt;p&gt;There are several other practical applications of the &lt;code&gt;useLayoutEffect&lt;/code&gt; Hook. After all DOM mutations, &lt;code&gt;useLayoutEffect&lt;/code&gt; fires synchronously; therefore, it can be used to read and change the layout in the DOM, from getting the scroll position or other styles for an element to adding animations at a particular scroll position. Be careful though, your user won’t see anything until this Hook is run and another DOM update is made.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-raw-usedebugvalue-endraw-hook"&gt;
  &lt;/a&gt;
  React &lt;code&gt;useDebugValue&lt;/code&gt; Hook
&lt;/h2&gt;

&lt;p&gt;Unlike the other Hooks we’ve covered, which are used to improve the user experience, &lt;code&gt;useDebugValue&lt;/code&gt; improves the developer experience, helping developers log information in React DevTools in an easier format. Note that the &lt;code&gt;useDebugValue&lt;/code&gt; Hook should only be used in combination with a custom React Hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useDebugValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’re familiar with React DevTools, then you know that whenever a built-in React Hook like &lt;code&gt;useState&lt;/code&gt; or &lt;code&gt;useRef&lt;/code&gt; is used in a custom Hook, it will debug its respective values within React DevTools.&lt;/p&gt;

&lt;p&gt;For example, consider the custom Hook below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDebugValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAddress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAddress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's call the custom Hook in &lt;code&gt;App.js&lt;/code&gt; and inspect DevTools:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useCustomHook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hey&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspecting React DevTools, we see that the value for &lt;code&gt;useState&lt;/code&gt; is already being logged for us. We have two states for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvfB7VsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/use-state-value-logged.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvfB7VsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/use-state-value-logged.png" alt="Usestate Value Logged" width="730" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, we don’t know which of the state values the empty strings belong to. If we were building a simple custom Hook, we could easily run back to the code to see that &lt;code&gt;name&lt;/code&gt; comes first, so it should be the first state in DevTools.&lt;/p&gt;

&lt;p&gt;However, if we were building a complex custom Hook to use in various components, we would need a way to track which values belong to which states while debugging. To do so, we can use &lt;code&gt;useDebugValue&lt;/code&gt; to display a label for values in our custom Hooks in React DevTools.&lt;/p&gt;

&lt;p&gt;See the updated custom Hook below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDebugValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useCustomHook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAddress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useDebugValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name has been set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name has not been set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAddress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The updated DevTools is as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--17uMfyvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/updated-devtools.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--17uMfyvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/updated-devtools.png" alt="Updated Devtools" width="730" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are able to monitor the value of &lt;code&gt;name&lt;/code&gt; as its state changes, using &lt;code&gt;useDebugValue&lt;/code&gt; so we don't have to guess what its value is. &lt;code&gt;useDebugValue&lt;/code&gt; is helpful when the Hook’s state is not immediately obvious from looking at the values in DevTools.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useDebugValue&lt;/code&gt; takes an optional second parameter, a formatting function. Let's say the value you are receiving needs to be formatted before it is readable, like parsing JSON data or formatting a date. The function takes in the debug value and returns a formatted value, however, it only runs when DevTools are open and the value is being inspected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useDebugValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we covered three React Hooks that we don't need most of the time but can make our lives easier when we face certain edge cases.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useImperativeHandle&lt;/code&gt;Hook allows us to expose a value, state, or function inside a child component to the parent component. The&lt;code&gt;useLayoutEffect&lt;/code&gt; lets us perform side effects like API calls, setting up subscriptions, and manually manipulating the DOM in a function component. Lastly, the &lt;code&gt;useDebugValue&lt;/code&gt; Hook makes it easier for developers to log information in React DevTools.&lt;/p&gt;

&lt;p&gt;Now, you should be familiar with these special React Hooks and know how to use them when you find yourself in one of these situations. I hope you find this article helpful!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Set up a Node.js e-commerce app in 10 minutes with Vendure</title>
      <author>Michael Bromley</author>
      <pubDate>Mon, 13 Dec 2021 21:21:31 +0000</pubDate>
      <link>https://dev.to/michlbrmly/set-up-a-nodejs-e-commerce-app-in-10-minutes-with-vendure-287b</link>
      <guid>https://dev.to/michlbrmly/set-up-a-nodejs-e-commerce-app-in-10-minutes-with-vendure-287b</guid>
      <description>&lt;p&gt;&lt;a href="https://www.vendure.io/"&gt;Vendure&lt;/a&gt; is a modern headless e-commerce framework written in TypeScript and built on top of the excellent &lt;a href="https://nestjs.com/"&gt;NestJS&lt;/a&gt; framework.&lt;/p&gt;

&lt;p&gt;By "headless" we mean that it exposes an API (GraphQL in the case of Vendure), which allows you to build your storefront using your favourite front-end technology, be it Next.js, Vue, Svelte, or anything else you like!&lt;/p&gt;

&lt;p&gt;Headless e-commerce has a somewhat justified reputation of being more complex and development-intensive than off-the-shelf SaaS solutions like Shopify. But with Vendure we aim to cut down your development time to the bare minimum with a combination of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a rich set of features&lt;/li&gt;
&lt;li&gt;integrations with existing solutions&lt;/li&gt;
&lt;li&gt;optimal developer experience&lt;/li&gt;
&lt;li&gt;modern technologies and workflows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial I will take you step-by-step through setting up a fully-functional headless e-commerce server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTqFbKXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyhi1rash5j42cpd5i51.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTqFbKXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyhi1rash5j42cpd5i51.jpg" alt="Screenshot of the Vendure Admin UI" width="880" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;To create your app, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx @vendure/create my-shop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will guide you through the setup by asking you a series of questions. Select the following options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;√ Which database are you using? 
  » SQLite
√ Which programming language will you be using? 
  » TypeScript
√ Populate with some sample product data? 
  » yes
√ What identifier do you want to use for the superadmin user? 
  » superadmin
√ What password do you want to use for the superadmin user?
  » superadmin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go make yourself a drink or check your dev.to feed for a few minutes while we install all the dependencies and scaffold your app!&lt;/p&gt;

&lt;p&gt;Once everything is done you should see this message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Success! Created a new Vendure server at &amp;lt;path&amp;gt;/my-shop

We suggest that you start by typing:

    cd my-shop
    npm start

Happy hacking!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And... that's it! &lt;code&gt;cd&lt;/code&gt; into the newly-created directory and run &lt;code&gt;npm start&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Congratulations - you now have a fully-functional headless e-commerce server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-it-out"&gt;
  &lt;/a&gt;
  Test it out
&lt;/h2&gt;

&lt;p&gt;Let's test out our shiny new GraphQL API! Go to &lt;a href="http://localhost:3000/shop-api"&gt;http://localhost:3000/shop-api&lt;/a&gt; and paste the following query into the left-hand pane of the GraphQL Playground app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;totalItems&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;featuredAsset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Play around with the API - because it's GraphQL, you'll get rich code-completion so you don't need to try to guess what fields are available. Press &lt;code&gt;ctrl/cmd + space&lt;/code&gt; to get a list of available fields at any location.&lt;/p&gt;

&lt;p&gt;Next, you can head to &lt;a href="http://localhost:3000/admin"&gt;http://localhost:3000/admin&lt;/a&gt; where you can login with the credentials &lt;code&gt;superadmin&lt;/code&gt;, &lt;code&gt;superadmin&lt;/code&gt;. This will grant you access to the Vendure Admin UI - a full-featured interface for managing every aspect of your store.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storefront"&gt;
  &lt;/a&gt;
  Storefront
&lt;/h2&gt;

&lt;p&gt;Vendure only provides the backend part. What about the storefront? You'll need one of those if you want anybody to be able to buy your stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pDvt3Ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l95dspcc3xm4c6vs922p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pDvt3Ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l95dspcc3xm4c6vs922p.jpg" alt="Vendure/Vercel Commerce integration" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building a custom storefront from scratch can be a big task, but luckily we've got a couple of great options for you to get you up-and-running in no time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.vuestorefront.io/"&gt;Vue Storefront&lt;/a&gt; is an industry-leading storefront library built on &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; &amp;amp; &lt;a href="https://nuxtjs.org/"&gt;Nuxt.js&lt;/a&gt;. The &lt;a href="https://www.vendure.io/integration/vue-storefront/"&gt;official Vue Storefront / Vendure integration&lt;/a&gt; allows you to set up a slick, modern and performant store-front in minutes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/commerce"&gt;Next.js Commerce&lt;/a&gt; is a starter kit that gets you set up with a modern storefront built by the Vercel team. The project also comes with a &lt;a href="https://github.com/vercel/commerce/blob/main/framework/vendure/README.md"&gt;Vendure integration&lt;/a&gt;, and you can see a live demo of it at &lt;a href="https://vendure.vercel.store/"&gt;vendure.vercel.store&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Build your own! Vendure is an excellent back-end to use when learning a new framework. It runs everywhere, uses few resources, and exposes a full, production-grade API to build against. Why not test out that latest framework by building a minimal e-commerce storefront?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;While Vendure is simple to set up, it is by no means a "light" or "toy" solution. In fact, it is one of the most extensible and &lt;a href="https://www.vendure.io/features/"&gt;feature-rich&lt;/a&gt; of all the e-commerce frameworks out there, and is used in production by Fortune 500 companies, billion-dollar start-ups and solo-developed boutique shop projects alike!&lt;/p&gt;

&lt;p&gt;To dive into the possibilities offered by Vendure, check out our extensive &lt;a href="https://www.vendure.io/docs/"&gt;developer documentation&lt;/a&gt;, and if you run into any trouble, please join our &lt;a href="https://join.slack.com/t/vendure-ecommerce/shared_invite/enQtNzA1NTcyMDY3NTg0LTMzZGQzNDczOWJiMTU2YjAyNWJlMzdmZGE3ZDY5Y2RjMGYxZWNlYTI4NmU4Y2Q1MDNlYzE4MzQ5ODcyYTdmMGU"&gt;Slack community&lt;/a&gt; where you'll find the help you need.&lt;/p&gt;

&lt;p&gt;Finally, here's a presentation I gave at a recent conference which covers more of the background and goals of the Vendure project. Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FE2yQA2Gkyk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>node</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Monads in a simple way</title>
      <author>Guilherme dos Reis Meira</author>
      <pubDate>Mon, 13 Dec 2021 21:17:15 +0000</pubDate>
      <link>https://dev.to/kindsloth/monads-in-a-simple-way-7f9</link>
      <guid>https://dev.to/kindsloth/monads-in-a-simple-way-7f9</guid>
      <description>&lt;p&gt;Monads were created by mathematicians in 1960 and rediscovered by computer scientists in 1990 as a new way to handle effects. Let's write some examples, imagine a function that gets the tail from a list like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USeR3keh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4afbavgitry2ikw13re8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USeR3keh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4afbavgitry2ikw13re8.png" alt="tail" width="604" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem here is obvious, this function can fail if he receives an empty list, now imagine that for any reason we're using this function in our program to work with lists and for some reason, it receives an empty list, in this case, our program will break and the language compiler will give to us an exception, so how to solve this? to solve this we can use the Maybe Monad, let's write this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBOzi9w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8ppatpvg4lbdu0yrrpl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBOzi9w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8ppatpvg4lbdu0yrrpl.png" alt="safeTail" width="772" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the function &lt;strong&gt;&lt;em&gt;safeTail&lt;/em&gt;&lt;/strong&gt; which is total, which means that this function will never fail, even if receives an empty list. As you can see Maybe Monad is like a box that encapsulates a value, so this box can have some value or nothing, let's write our own Maybe Monad in Haskell:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oaYi0m27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd4jo1hiaw2qpmr0680p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oaYi0m27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd4jo1hiaw2qpmr0680p.png" alt="Maybe Monad" width="822" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see the Maybe Monad allows us to handle functions that can fail, but now that these values are encapsulated how we can work with him? Monads essentially are Functors so we can map functions in our Monads without changing your structure, let's have an example with lists:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AN6Azr_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmm5yr9hovxx03g29j4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AN6Azr_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmm5yr9hovxx03g29j4r.png" alt="fmap in a list" width="586" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we map the function &lt;strong&gt;&lt;em&gt;(+1)&lt;/em&gt;&lt;/strong&gt; in our list. As you can see we don’t change its structure, and that’s basically what Functors allow us to do. But, what if we want to pass our boxed value to some function that takes just a value and transforms this into another type of monadic value? We can use the bind operator for this, which is one of the functions necessary for the implementation of a monad. In Haskell, this is represented by the symbol: &lt;strong&gt;&lt;em&gt;&amp;gt;&amp;gt;=&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Imagine that we are using our &lt;strong&gt;&lt;em&gt;safeTail&lt;/em&gt;&lt;/strong&gt; that we write before and now we want to pass the list to a function that takes some list and find the first even element in the list, let's write this function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZuZbxa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpy5zfiy815e2rdub2yt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZuZbxa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpy5zfiy815e2rdub2yt.png" alt="getFirstEven" width="880" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After writing this we can pass our element to this function using the bind operator, let's write this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QLYVS3rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7iwxjmpqmrhvllqoiq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QLYVS3rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7iwxjmpqmrhvllqoiq8.png" alt="bind examples" width="880" height="662"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing that you can notice here is that the &lt;strong&gt;&lt;em&gt;getFirstEven&lt;/em&gt;&lt;/strong&gt; function also returns a Maybe Monad, so what the bind operator does is get the value from the box and put him back in the box after doing something. This helps us to compose our monadic functions handling all the effects that we can find on the way.&lt;/p&gt;

&lt;p&gt;So the central point here is that Monads allow us to handle effects, like for example handle Input/Output with IO Monad. This is very powerful because it allows us to have handled effects with pure functions, meaning that it also allows us to build real-world applications with pure languages like Haskell.&lt;/p&gt;

&lt;p&gt;A little explanation about this: Haskell, for example, is a pure language which means that we just have pure functions. Pure functions are like mathematical functions: they will produce exactly the same output given the same input, so it’s not possible to have side effects, for example. While building a real-world application, on another note, we need to handle side effects like getting some data typed by the user, or reading some file. So we may think that Haskell is a useless language, but Monads allow us to handle these effects while maintaining the functions pure.&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>functional</category>
      <category>programming</category>
    </item>
    <item>
      <title>Learn Python Using SoloLearn</title>
      <author>Turry</author>
      <pubDate>Mon, 13 Dec 2021 21:04:27 +0000</pubDate>
      <link>https://dev.to/turry/learn-python-using-sololearn-3lo</link>
      <guid>https://dev.to/turry/learn-python-using-sololearn-3lo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-sololearn"&gt;
  &lt;/a&gt;
  What is sololearn?
&lt;/h2&gt;

&lt;p&gt;Sololearn has one of the world's largest community of people learning how to code. With over 25 programming courses, choose from thousands of topics to learn how to code. These programming languages include: Python, Java, Kotlin, Javascript, C#, C++, C, Go, Swift, SQL, R, React, HTML, CSS, PHP and more yet to come.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sololearn-python-courses"&gt;
  &lt;/a&gt;
  Sololearn Python Courses
&lt;/h3&gt;

&lt;p&gt;In sololearn, there are a number of courses to choose from such as finance and data analysis. For today, we will focus on the general courses namely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;- Python for beginners&lt;/li&gt;
&lt;li&gt;- Intermediate python&lt;/li&gt;
&lt;li&gt;- Python Core&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-effectively-learn-python"&gt;
  &lt;/a&gt;
  How to effectively learn python:
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#1-python-for-beginners"&gt;
  &lt;/a&gt;
  1. Python for beginners
&lt;/h3&gt;

&lt;p&gt;Start with python beginners especially if you are new. If you fail to understand a specific topic then search on stack overflow or w3school. Even if you’ve already learnt some aspects of python I’d still recommend because some lessons may be essential when completing intermediate python. During this course interchanging between w3schools and Sololearn would be really helpful since one website teaches something the other doesn’t and vice versa. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-intermediate-python"&gt;
  &lt;/a&gt;
  2. Intermediate Python
&lt;/h3&gt;

&lt;p&gt;Okay so if you have an overall foundation of Python for beginners you might think you are really ready for intermediate, you even got your first certificate from Sololearn which is totally acceptable by other organisations :) hopefully…&lt;/p&gt;

&lt;p&gt;Well here’s the thing, it gets harder. The beginning of intermediate will test your understanding of python from what you learnt in Python. I’d recommend you really understand what you’ve learnt and try answering without using answer sheets or else you’ll have 0 knowledge at this point. I hope you haven’t used leaks in the first course as well or you are done for.&lt;/p&gt;

&lt;p&gt;Ok now you’ve probably gone through so much distress and pain and suffering from this course but as you progress you’ll slowly grasp the knowledge of python and probably open up your mind to more possibilities, this is great! When you reach the functional programming module of the course, I’d recommend you go through python core at a slow but timely pace while completing your intermediate course. This is because you may or may not have forgotten some aspects of python for beginners but it’s good to recall and remember what you have learnt.&lt;/p&gt;

&lt;p&gt;If you do not have premium you must have noticed those “purple blocks” to pay for exercises for free, you earn them by completing lessons and completing the major code problems at the end of each module. Use them even in python for beginners but be responsible and use wisely, some exercises wouldn’t be necessary especially the ones in python core.&lt;/p&gt;

&lt;p&gt;Cya on the next article!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Recover a Forgotten Password to Your «Instagram» Account</title>
      <author>Michael Mirosnichenko</author>
      <pubDate>Mon, 13 Dec 2021 20:56:38 +0000</pubDate>
      <link>https://dev.to/hetmansoftware/1-36c5</link>
      <guid>https://dev.to/hetmansoftware/1-36c5</guid>
      <description>&lt;p&gt;Read this article to find out how to restore access to an «Instagram» account, how to reset the password by email, with the phone linked to such account, or from its mobile app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-core-of-the-problem"&gt;
  &lt;/a&gt;
  The core of the problem
&lt;/h2&gt;

&lt;p&gt;If you realized you have forgotten the password to your account in «Instagram», don’t lose heart. Of course, it’s impossible to restore your old password, but you still can create a new password to replace it. This procedure is quite simple and it won’t take long.&lt;/p&gt;

&lt;p&gt;«Instagram» offers quite an easy way to restore your account. All the steps we will describe below will be useful if you forgot your password, lost it or someone else changed that password without your knowing it. If you want to change your password for some reason, the sequence of actions will differ a little from the password change procedure we are describing here. If all you need is to change the password for a better one in the «Instagram» settings, you can do it after signing in to your account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reset-your-password-in-the-website-of-this-social-network"&gt;
  &lt;/a&gt;
  Reset your password in the website of this social network
&lt;/h2&gt;

&lt;p&gt;Open any browser you prefer and go to «Instagram». Then click on the «Log in» link at the bottom of the page, right below the sign-up section&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGOJjx_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koq1ff97d58xqyt9t53i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGOJjx_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koq1ff97d58xqyt9t53i.png" alt="Image description" width="370" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next page, click on the link below the sign-in fields, saying «Forgot password?».&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d394IeNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m11i10hezobb3sk375a6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d394IeNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m11i10hezobb3sk375a6.png" alt="Image description" width="359" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the reset password page, enter username, email address or phone number which you used when creating your account. Then click «Reset password» to continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dybU8AkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91gkm0ha0d1n8qn57ltc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dybU8AkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91gkm0ha0d1n8qn57ltc.png" alt="Image description" width="621" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check your confirmed email for a message from the «Instagram» security service containing a link to reset the password. Click on «Reset password» to start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IyKdzgA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tgr7mnxe99oi6y3e5tg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IyKdzgA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tgr7mnxe99oi6y3e5tg.png" alt="Image description" width="610" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on the link, it will redirect you to the page where you need to enter and confirm the new password. Enter new data and click «Reset password» to confirm your actions and save the new password. We strongly recommend using a complicated combination of containing digits and letters, lowercase and uppercase, to make sure your «Instagram» account is protected reliably with a strong new password.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPejSOt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlecx80a9i9v752fyjy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPejSOt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlecx80a9i9v752fyjy5.png" alt="Image description" width="296" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The system will log in to your account automatically, using the new password, and take you to your «Instagram» page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reset-your-password-in-the-mobile-app"&gt;
  &lt;/a&gt;
  Reset your password in the mobile app
&lt;/h2&gt;

&lt;p&gt;Resetting a password from the «Instagram» mobile app is as easy as the method we have described before. For illustration, we’ll be using the app’s version for «Android», but the sequence of steps will be very similar for «iPhone» or «iPad», too.&lt;/p&gt;

&lt;p&gt;Start the «Instagram» app, then tap «Get help with signing in» in the log-in page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F7wunC65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00kodx2thxxkbnclukbo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F7wunC65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00kodx2thxxkbnclukbo.png" alt="Image description" width="502" height="334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the «Find your account» page that opens, enter username, email address or phone number which you used when creating your account, and then tap «Next».&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aqFTCGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86ywet7mcavda3jsbu2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aqFTCGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86ywet7mcavda3jsbu2r.png" alt="Image description" width="554" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can choose from the several ways how «Instagram» can restore access to your account: send you an email, an «SMS» to your mobile phone number (if you used this method to sign up) or log in to «Instagram» with the linked «Facebook» account, if your settings are configured that way. In our example, we’ll be using the option of sending a message by email, but if you ever choose to receive an «SMS» to your mobile phone number, the sequence of actions will be very similar. Choosing the «SMS» option, you will receive a text message containing the code which should be entered into the app, then set a new password, and sign in to your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoc4Jz3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5w1moej0ttm2nrg2a4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoc4Jz3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5w1moej0ttm2nrg2a4u.png" alt="Image description" width="353" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you choose the email option, you will receive a message to the email address you have used when creating an «Instagram» account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e_twUGM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o21jib9zsrdeyzvsedst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e_twUGM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o21jib9zsrdeyzvsedst.png" alt="Image description" width="558" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the message you receive from the «Instagram» security team, tap on «Log in as username». It will immediately redirect you to your «Instagram» page, where you can change your password using the account settings. Otherwise, tap on the link «reset your Instagram password», which can be found right under the log-in button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyYyg94T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kzfgnzwhvr9c2ydcr5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyYyg94T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kzfgnzwhvr9c2ydcr5p.png" alt="Image description" width="610" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will open the password reset page, where you’ll be suggested to enter the new password and confirm it by typing it again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3i2dHdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v4it9hzg0twyjsscka8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3i2dHdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v4it9hzg0twyjsscka8.png" alt="Image description" width="556" height="541"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As soon as the password is entered twice, the system will log in to your account automatically, and take you to the main «Instagram» page.&lt;/p&gt;

&lt;p&gt;Restoring access to an account in case the password was lost is not too difficult, and resetting the old password to replace it with a new one is easy enough, even for novice users. Just follow the directions from the security team to quickly regain access to your «Instagram» account.&lt;/p&gt;

&lt;p&gt;If you have any questions or you’d like to share a piece of advice, leave a comment under the article.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href="https://hetmanrecovery.com/recovery_news/how-to-recover-your-forgotten-password-instagram.htm"&gt;full article&lt;/a&gt; with all additional video tutorials. Also visit our &lt;a href="https://www.youtube.com/channel/UCu-D9QnPsAPn7AtxL4HXLUg"&gt;Youtube channel&lt;/a&gt;, there are over 400 video tutorials.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>testing</category>
      <category>security</category>
    </item>
    <item>
      <title>Neovim for MacOS</title>
      <author>Dafloresdiaz</author>
      <pubDate>Mon, 13 Dec 2021 20:48:04 +0000</pubDate>
      <link>https://dev.to/dafloresdiaz/neovim-for-macos-3nk0</link>
      <guid>https://dev.to/dafloresdiaz/neovim-for-macos-3nk0</guid>
      <description>&lt;p&gt;Hi guys, this is my first post and I will help to install Neovim for MacOS. In this case, the plugins to install will be mostly backend development (Python and Go).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-neovim-"&gt;
  &lt;/a&gt;
  Why Neovim? :
&lt;/h2&gt;

&lt;p&gt;Personally, my primary motivation to try out Neovim was: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reducing load on my machine.&lt;/li&gt;
&lt;li&gt;Have the experience of using Vim/NeoVim as my IDE.&lt;/li&gt;
&lt;li&gt;To be curios about why Vim/Neovim is so special.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-neovim"&gt;
  &lt;/a&gt;
  What is Neovim?:
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Neovim is a project that seeks to aggressively refactor Vim source code to achieve the following goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplify maintenance to improve the speed that bug fixes and features get merged.&lt;/li&gt;
&lt;li&gt;Split the work among multiple developers.&lt;/li&gt;
&lt;li&gt;Enable the implementation of new/modern user interfaces without any modifications to the core source.&lt;/li&gt;
&lt;li&gt;Improve the extensibility power with a new plugin architecture based on coprocesses. Plugins will be written in any programming language without any explicit support from the editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start:
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Neovim from:&lt;br&gt;
&lt;a href="https://github.com/neovim/neovim/wiki/Installing-Neovim"&gt;Installing Neovim · neovim/neovim Wiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to install brew&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Brew is a package manager for macOS&lt;/li&gt;
&lt;li&gt;Open your terminal and paste this line of code:
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Copy and paste this command to install neovim
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;neovim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then go to this file &lt;code&gt;&amp;lt;username&amp;gt;/.config/nvim/init.vim&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;If the files/directories don't exist, just create them manually.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Open the file and set your config file:

&lt;ul&gt;
&lt;li&gt;Use nvim init.vim on the console, to open the config file or any text editor.&lt;/li&gt;
&lt;li&gt;You can use the configurations below:
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Options
set clipboard=unnamedplus " Enables the clipboard between Vim/Neovim and other applications.
set completeopt=noinsert,menuone,noselect " Modifies the auto-complete menu to behave more like an IDE.
set cursorline " Highlights the current line in the editor
set hidden " Hide unused buffers
set autoindent " Indent a new line
set inccommand=split " Show replacements in a split screen
set mouse=a " Allow to use the mouse in the editor
set number " Shows the line numbers
set splitbelow splitright " Change the split screen behavior
set title " Show file title
set wildmenu " Show a more advance menu
set cc=80 " Show at 80 column a border for good code style
filetype plugin indent on   " Allow auto-indenting depending on file type
syntax on
set spell " enable spell check (may need to download language package)
set ttyfast " Speed up scrolling in Vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If the configuration is correct, when you open a file it should be looking like this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyDwpG9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ymbwds6o3b3uz3t7hqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyDwpG9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ymbwds6o3b3uz3t7hqa.png" alt="Setup init.vim" width="880" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The next step we need to install a PlugIn manager. In this case, we are using vim-plug, this is the link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/junegunn/vim-plug"&gt;https://github.com/junegunn/vim-plug&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because we are using neovim we need to use this command
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
           https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'&lt;/span&gt;
    &lt;span class="sb"&gt;```&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;% endraw %&lt;span class="o"&gt;}&lt;/span&gt;

- After installing vim-plug, is necessary to add these couple of lines on init.vim, so we can use :PlugInstall command.
 - The Plug &lt;span class="nb"&gt;command &lt;/span&gt;is to &lt;span class="nb"&gt;install &lt;/span&gt;the plugins we want to &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="k"&gt;in &lt;/span&gt;our configuration.
&lt;span class="o"&gt;{&lt;/span&gt;% raw %&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="sb"&gt;```&lt;/span&gt;bash
call plug#begin&lt;span class="o"&gt;(&lt;/span&gt;has&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'nvim'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; ? stdpath&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/plugged'&lt;/span&gt; : &lt;span class="s1"&gt;'~/.vim/plugged'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Plug &lt;span class="s1"&gt;'Example'&lt;/span&gt;
call plug#end&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;List of plugins:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'sheerun/vim-polyglot'
Plug 'jiangmiao/auto-pairs'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-fugitive'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After the line "Call plug#end()" you need to add a configuration lines to use the theme, the airline extension and the NERDTree
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;colorscheme gruvbox
let g:bargreybars_auto=0
let g:airline_solorized_bg='dark'
let g:airline_powerline_fonts=1
let g:airline#extension#tabline#enable=1
let g:airline#extension#tabline#left_sep=' '
let g:airline#extension#tabline#left_alt_sep='|'
let g:airline#extension#tabline#formatter='unique_tail'
let NERDTreeQuitOnOpen=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After you install the Plugins, your neovim configuration should be looking like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fk6zwOHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71jfixnu6ctdr58mvpex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fk6zwOHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71jfixnu6ctdr58mvpex.png" alt="Final Result " width="853" height="804"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Link:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you don't want to use "Gruvbox" as you main theme you can take a look to this page: &lt;a href="https://vimcolorschemes.com/"&gt;Vim Themes&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That's it, hope this article helped you in some way. Give a like and share with your friends.&lt;/p&gt;

&lt;p&gt;If you need help or have any questions, you can leave a comment.&lt;/p&gt;

</description>
      <category>neovim</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My list of useful git commands</title>
      <author>Theodore Karropoulos</author>
      <pubDate>Mon, 13 Dec 2021 20:47:27 +0000</pubDate>
      <link>https://dev.to/tkarropoulos/my-list-of-useful-git-commands-5f9g</link>
      <guid>https://dev.to/tkarropoulos/my-list-of-useful-git-commands-5f9g</guid>
      <description>&lt;p&gt;As all those of us involved in the field of Computer Science know or should know, Git is by far the most widely used modern version control system in the world today. We utilized it in our everyday routine to keep track of our code changes and helps us to work with other developers simultaneously and independently. &lt;br&gt;&lt;br&gt;
Although modern IDE and various tools provided by GitHub, Atlassian and other provide us an easy to use way to perform many git commands nothing compares to the power a terminal provides. Bellow you can find a list of my top git commands.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rename-latests-commit-message"&gt;
  &lt;/a&gt;
  Rename latest's commit message
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This will pop up an editor window allowing us to pass the new commit message
git commit -amend 

# This will not pop up the editor
git commit -amend -m "Your new commit message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#add-files-into-the-latest-commit-this-requires-that-last-change-is-not-yet-pushed-into-remote"&gt;
  &lt;/a&gt;
  Add file(s) into the latest commit. This requires that last change is not yet pushed into remote
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Add the file
git add the_file_you_want_to_add
# Amend without changing commit message
git commit --amend --no-edit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#reset-to-specific-commit-hash-and-discard-any-changes-since-that-hash"&gt;
  &lt;/a&gt;
  Reset to specific commit hash and discard any changes since that hash
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard &amp;lt;commit-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#apply-a-commit-from-one-branch-to-another"&gt;
  &lt;/a&gt;
  Apply a commit from one branch to another
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git cherry-pick &amp;lt;commit-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#show-commit-logs-and-limit-the-output"&gt;
  &lt;/a&gt;
  Show commit logs and limit the output
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log -n &amp;lt;number&amp;gt;
# example git log -n 3
# or
git log -&amp;lt;number&amp;gt;
# example git log -3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are aware of any useful / useful git command and want to share it please do not hesitate to leave a comment!&lt;/p&gt;

</description>
      <category>git</category>
      <category>softwaredevelopment</category>
      <category>softwareengineering</category>
      <category>programming</category>
    </item>
    <item>
      <title>Part 1/2 - Game in ReactJS - Cuzzle</title>
      <author>Jorge Rubiano</author>
      <pubDate>Mon, 13 Dec 2021 20:39:19 +0000</pubDate>
      <link>https://dev.to/jorger/part-12-game-in-reactjs-cuzzle-403a</link>
      <guid>https://dev.to/jorger/part-12-game-in-reactjs-cuzzle-403a</guid>
      <description>&lt;p&gt;In this articles I would like to share with you the process of development of the latest game that I developed called Cuzzle &lt;em&gt;&lt;strong&gt;(cube + puzzle = Cuzzle)&lt;/strong&gt;&lt;/em&gt; ReactJS, this game was inspired by the original game called &lt;a href="https://apps.apple.com/us/app/cuzzle/id1185407542"&gt;cuzzle&lt;/a&gt; developed by &lt;a href="https://www.redline.games/games"&gt;Redline Games&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this first part, I'm going to show you about the game and the different options it has.&lt;/p&gt;

&lt;p&gt;In the second part, we are going to talk about the technical aspects and challenges in the development of this game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-game"&gt;
  &lt;/a&gt;
  The game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSNT0mBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwfjsmikv99kr7yr1vcb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSNT0mBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwfjsmikv99kr7yr1vcb.gif" alt="Cuzzle-level" width="588" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can play the game online here: &lt;a href="https://cuzzle-react.vercel.app/"&gt;https://cuzzle-react.vercel.app/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cuzzle ReactJS is an &lt;a href="https://en.wikipedia.org/wiki/Isometric_video_game_graphics"&gt;isometric&lt;/a&gt; puzzle game, inspired by &lt;a href="https://en.wikipedia.org/wiki/Sokoban"&gt;Sokoban&lt;/a&gt;, the 1981 transport puzzle game in which the player has to push boxes around a warehouse to get them into different locations. Cuzzle ReactJS add collapsing floors, switches, and some nice graphics.&lt;/p&gt;

&lt;p&gt;The idea behind the development of this game was to learn more about &lt;a href="https://reactjs.org/"&gt;ReactJS&lt;/a&gt;, as you know ReactJS is a library that allows us to develop rich user interfaces with encapsulated components that manage their own state.&lt;/p&gt;

&lt;p&gt;Actually, this is the &lt;a href="https://github.com/Jorger/Jorger/blob/main/README.md"&gt;ninth game&lt;/a&gt; that I developed in ReactJS and with every new game I learn something new, also this gives me the opportunity to test new features and/or strategies using this library. &lt;/p&gt;

&lt;p&gt;In cuzzle ReactJS the user has 85 levels, divided into 4 sections, each section has a different level of difficulty.&lt;/p&gt;

&lt;p&gt;On desktop, you can use the movement arrows and swipe events on mobile.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#game-options"&gt;
  &lt;/a&gt;
  Game options
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ogoz9x8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yczalv28e8aesh61g1pd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ogoz9x8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yczalv28e8aesh61g1pd.png" alt="Lobby" width="880" height="703"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this screen the user can access to the different sections of the game: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-list-of-levels"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. List of levels.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JEdQ6UUk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b3jltxsc4sr4xfnlowj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JEdQ6UUk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b3jltxsc4sr4xfnlowj.gif" alt="Levels" width="586" height="458"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;On this page, users can access the different levels of the game, in this case, we have four sections, by default the first level of each section is enabled (also has a different background color), to play the other levels it's necessary to complete the previous one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-editor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Editor.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1g4Ufxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypuos8lvupi96bm7mzzp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1g4Ufxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypuos8lvupi96bm7mzzp.gif" alt="floors" width="588" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this page users can create new levels (the 85 levels were created with this editor), the editor is divided into four steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fist step - Add floors:&lt;/strong&gt; the first step is to add the floors of the level, we have five types of floors:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10HCV2mH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plowoih48fc7mpbkqr7l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10HCV2mH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plowoih48fc7mpbkqr7l.gif" alt="floors_behavior" width="588" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Regular:&lt;/strong&gt; This is a normal floor, depending on other validation a regular floor can change its behavior, a regular floor could be:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Shake floor:&lt;/strong&gt; this is a temporal floor, if the main cube passes over a shaking floor the floor will fall.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Switch floors:&lt;/strong&gt; When a switch is activated this kind of floor will appear, by default when the level load these floors aren’t visible.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Arrival points:&lt;/strong&gt; These are the places where the cubes must be located to finish a level, at the same time we have two types of arrival points.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Regular:&lt;/strong&gt; This is represented by the white rectangles, it’s possible to add a maximum of 8 of this type and at least one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Main:&lt;/strong&gt; As the name implies, this is the position where we need to locate the main cube, we have the option to change the color to &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, or &lt;code&gt;green&lt;/code&gt;, in this case, it’s only possible to add only one floor of this type.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Switch:&lt;/strong&gt; this floor has the trigger that will activate the floors that will appear. When we add a switch to the board we have an option to indicate which floor will be visible when we activate the switch, we only can add one switch for level. If we remove a switch and previously we have floors related to it, those floors will return to their original state.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXBdzdrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etm96wzl2i3abp1l005e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXBdzdrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etm96wzl2i3abp1l005e.gif" alt="Portals" width="590" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Portals:&lt;/strong&gt; this is a special floor, that allows the cubes to “teleport” between two points because that condition we only have the option to add two floors of this type (entrance point and exit point respectively).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this step we have other options, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Change background color:&lt;/strong&gt; It is possible to change the background of the level for four predefined colors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Load preloaded levels:&lt;/strong&gt; If we want to create/fork a level from an existing level, this is very useful because we don't need to start from scratch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Load a level from a QR:&lt;/strong&gt; As I mentioned before, the game doesn't have a backend, instead, the levels are saved in a QR, if we create a level previously we can load the QR and create a new one from this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Remove all items:&lt;/strong&gt; Sometimes we start to create a new level but we aren't very happy with the result, if we want to start over, it's not necessary to remove each element one by one, with this option we can remove all the elements and start again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Relocate level positions:&lt;/strong&gt; Sometimes we finish a level, but the level isn't in a good position (it's not centered for example), instead of removing the cubes and starting over, we can use this option to move all elements of the level at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Second Step - Add cubes:&lt;/strong&gt; When we have already add the floors that we need for our level, it’s possible to add the cubes, the number of cubes depends on the number of arrival points that we add in the first step, the minimum value is two (one regular and main) or the maximum value is nine (8 regular one main).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51HRF5xC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg1mlfu6toh0ejmk12g7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51HRF5xC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg1mlfu6toh0ejmk12g7.gif" alt="second-step" width="588" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The color of the main cube depends on the option that we choose in the first step (it’s possible to return to the previous step and change the color).&lt;/p&gt;

&lt;p&gt;It’s possible to add the cubes on the following floors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Regular.&lt;/li&gt;
&lt;li&gt;Shake cubes.&lt;/li&gt;
&lt;li&gt;Arrival points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, isn’t possible to add the cubes on the following floors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch.&lt;/li&gt;
&lt;li&gt;Switch floors.&lt;/li&gt;
&lt;li&gt;Portals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we add the cube on a switch the other floors will be active immediately, in the case of the switch floors, these aren’t visible when the level loads, and finally on portals the cube will be “teleport” to another position.&lt;/p&gt;

&lt;p&gt;If all the cubes are in the arrival points the editor will show a message because in that case the level is resolved, that doesn’t mean that isn’t possible to add cubes on arrival points, but at least one cube should be outside of an arrival point.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Third step - Play/Test Level:&lt;/strong&gt; In this step we test that our level has a solution, this is very important, because that solution is saved, to prevent having an infinite solution or a solution with too many movements, the editor has a restriction of maximum 250 movements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AY2RMeVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5c9pahye2sjghrhdvld.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AY2RMeVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5c9pahye2sjghrhdvld.gif" alt="Third-step" width="586" height="458"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Fourth step - Publish level:&lt;/strong&gt; in this step, we can download our level in a QR code, or share our level through a URL, the game hasn’t a backend infrastructure, the levels that we created in the editor are saved in the URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d88kDx_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/129qoyzjfnnkpwhcvc87.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d88kDx_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/129qoyzjfnnkpwhcvc87.gif" alt="four_step" width="588" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, this is the QR for the level in the gif and this is the &lt;a href="https://cuzzle-react.vercel.app/l/o7lHih4pbr0QKd3ujZkbsGzgsvuBYNTKFzCWpGJtqRN2yIytCsfOiG5RQ8ZSQ-z2IaiBlr0A4c8k6-0l6Kll5oq08yKKICD2dyjTgWgxFhT8KiySFGg93_NdX63Fpdyr-l4JuJ34WMoga7rhuKeAySasyywyu5v4UWBNdWIVAiYJLzFa2CNEvUsZmr_Ge7YHCZJDt8LPea9iooMHNBiU8w"&gt;corresponding URL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vRFFDD5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7thcltfoebal5eckgqvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vRFFDD5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7thcltfoebal5eckgqvo.png" alt="QR_example" width="325" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this screen we have a copy button as well, this saves in the clipboard the structure of the level that is utilized to save the preloaded levels, at the end of the day is a string, this string has all the necessary information to recreate the level.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-other-options"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Other options:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;On the lobby page it is possible to change other game options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable/disabled sounds.&lt;/li&gt;
&lt;li&gt;Upload QR code: We can "upload" (actually it’s not a real upload, because the game doesn’t have a backend, in this case, we read the content of the QR, but it’s necessary to have the option to select it, this is the reason we use a file input to do this action) the QR that we create in the editor if the QR is valid the user can 
play the level.&lt;/li&gt;
&lt;li&gt;Share option: As the name implies, with this option we can share the game (also we have de option to share a level and a custom level), on mobile, it's used the native  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share"&gt;navigator.share&lt;/a&gt; and on desktop (or browsers that don't support share) it's used the &lt;a href="https://www.npmjs.com/package/share-api-polyfill"&gt;share-api-polyfill&lt;/a&gt; package.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;In this first part, we talked about the game, we saw its options, in the second part, we are going to discuss the technical aspect of the game and the challenges to develop it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✍🏻 In the process of finishing the second part...&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>css</category>
      <category>pwa</category>
    </item>
    <item>
      <title>Send an SMS with Guile and Twilio API</title>
      <author>Red Nose Hacker</author>
      <pubDate>Mon, 13 Dec 2021 20:36:29 +0000</pubDate>
      <link>https://dev.to/jeremykorwin/send-an-sms-with-guile-and-twilio-api-4eba</link>
      <guid>https://dev.to/jeremykorwin/send-an-sms-with-guile-and-twilio-api-4eba</guid>
      <description>&lt;p&gt;These last days, I tried to send an SMS with a Guile script.&lt;br&gt;
TL;DR: I succeeded!&lt;/p&gt;

&lt;p&gt;Since the code is just a simple HTTP POST request, the longest part should have been the creation of the Twilio account (with a Regulatory Bundle and a phone number).&lt;/p&gt;

&lt;p&gt;But in the end, it took me about one evening[1] to set up a development environment with the right dependencies, and then two more evenings to figure out which HTTP headers were needed.&lt;/p&gt;

&lt;p&gt;Anyway, here is the script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;;; send-happiness.scm&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-modules&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;web&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;web&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ice-9&lt;/span&gt; &lt;span class="nv"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ice-9&lt;/span&gt; &lt;span class="nv"&gt;iconv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;gcrypt&lt;/span&gt; &lt;span class="nv"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt; &lt;span class="s"&gt;"your-account-sid"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;TWILIO_ACCOUNT_TOKEN&lt;/span&gt; &lt;span class="s"&gt;"your-account-token"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt; &lt;span class="s"&gt;"your-twilio-phone-number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;TWILIO_CREDENTIALS&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;base64-encode&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-&amp;gt;bytevector&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;simple-format&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt; &lt;span class="s"&gt;"~A:~A"&lt;/span&gt; &lt;span class="nv"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt; &lt;span class="nv"&gt;TWILIO_ACCOUNT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;RECIPIENT_PHONE_NUMBER&lt;/span&gt; &lt;span class="s"&gt;"a-phone-number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;TEXT_MESSAGE&lt;/span&gt; &lt;span class="s"&gt;"Wish you so much happyness !"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;http-post&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;simple-format&lt;/span&gt;
  &lt;span class="no"&gt;#f&lt;/span&gt; 
  &lt;span class="s"&gt;"https://api.twilio.com/2010-04-01/Accounts/~A/Messages"&lt;/span&gt;
  &lt;span class="nv"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;:headers&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;content-type&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;application/x-www-form-urlencoded&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;authorization&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;basic&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;TWILIO_CREDENTIALS&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;:body&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;simple-format&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt; &lt;span class="s"&gt;"Body=~A&amp;amp;To=~A&amp;amp;From=~A"&lt;/span&gt;
                       &lt;span class="nv"&gt;TEXT_MESSAGE&lt;/span&gt;
                       &lt;span class="nv"&gt;RECIPIENT_PHONE_NUMBER&lt;/span&gt;
                       &lt;span class="nv"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And how to execute it :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ guix shell guile gnutls guile-gcrypt -- guile send-happiness.scm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All phone numbers must start with the country indicator. For example +33 for a French number.&lt;/p&gt;

&lt;p&gt;[1] the time unit of my Guile tinkering&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you very much for reading this article!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don't hesitate to give me your opinion, suggest an idea for improvement, or ask a question! To do so : contact me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don't miss out on the next ones...&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;articles via Mastodon @&lt;a href="mailto:jeko@write.as"&gt;jeko@write.as&lt;/a&gt; and RSS&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;screencasts via Peertube &lt;a href="mailto:jeko@video.tedomum.net"&gt;jeko@video.tedomum.net&lt;/a&gt; and RSS&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;And more importantly, share this blog and tell your friends it's the best blog in the history of Free Software! No kidding!&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Data Science: The Best Programming Languages for Data Scientists</title>
      <author>images.cv</author>
      <pubDate>Mon, 13 Dec 2021 20:20:31 +0000</pubDate>
      <link>https://dev.to/imagescv/data-science-the-best-programming-languages-for-data-scientists-42pm</link>
      <guid>https://dev.to/imagescv/data-science-the-best-programming-languages-for-data-scientists-42pm</guid>
      <description>&lt;p&gt;Data Science is a growing field that has made it possible to extract meaningful information from data. Data scientists need programming languages in order to have the necessary tools for their job. In this blog post, we will talk about the best programming languages for data science and why they are so important!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-languages-used-for-data-science"&gt;
  &lt;/a&gt;
  Programming languages used for data science:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.r-project.org/"&gt;R Language&lt;/a&gt;&lt;br&gt;
R Language - a language and environment for statistical computing. It is widely applied in research, academia, industry and business. R programming has been around since 1993 but really got popular after 2005 when it was adopted by Kaggle which hosts machine learning competitions. Many of the top 1000 places on Kaggle are occupied by R users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;&lt;br&gt;
Python - is a general-purpose high-level programming language with dynamic semantics and has been around since 1991. Python was designed to be highly readable which makes it an appropriate tool for data science due to the readability of code that can be used in machine learning algorithms or statistical procedures such as linear and non-linear regressions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://visualstudio.microsoft.com/vs/features/cplusplus/"&gt;C++&lt;/a&gt;&lt;br&gt;
C++ - the C programming language was created in 1972 and over time it evolved into a superset known as C++; however, its syntax remains similar due to staying dedicated for systems level processing which makes it popular with those who work on operating system kernels (the central component) such as Linux. C++ has a focus on performance and is used in applications which need to process large amounts of data or require the execution of computationally intensive tasks such as machine learning algorithms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java.com/en/"&gt;Java&lt;/a&gt;&lt;br&gt;
Java - was created by Sun Microsystems, Inc (now Oracle Corporation) in 1991 and it runs on an environment known as Java Virtual Machine (JVM). Java is a versatile language that can be used for developing applications across various platforms. Java has become popular with data scientists due to the advent of big data and its ability to handle large datasets. Additionally, there are many libraries available in Java for data science tasks such as machine learning or scientific computing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.wolfram.com/language/"&gt;Wolfram Language&lt;/a&gt;&lt;br&gt;
Wolfram Language - was created by Stephen Wolfram and is a highly technical language that has been gaining traction in the academic community. It was first used to power Mathematica which can be considered as an environment for computation, visualization, etc. The Wolfram Language is being adopted by some data scientists due to its ability to execute symbolic computations very fast along with having high-performance libraries for data science tasks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#which-programming-languages-are-used-for-data-science"&gt;
  &lt;/a&gt;
  Which programming languages are used for data science?
&lt;/h2&gt;

&lt;p&gt;R, Python, SQL, C++, Java, and Wolfram Language. Each of these languages has unique benefits that make them popular among data scientists. For example, &lt;strong&gt;R is widely adopted&lt;/strong&gt; due to its ability to be easily understood by those who are not experts in the field and &lt;strong&gt;Python is popular due&lt;/strong&gt; to its readability and a large number of libraries. &lt;strong&gt;C++ has become&lt;/strong&gt; very common in the field since it was designed for systems-level processing which makes it a great fit for those working on operating system kernels such as Linux, &lt;strong&gt;Java became extremely **popular with data scientists after big data came into existence along with having many useful libraries available for data science tasks and **Wolfram Language is being&lt;/strong&gt; adopted by some due to its symbolic computation abilities and high-performance libraries. Each of these languages has something unique to offer making them a great choice for those working in the field of data science.&lt;/p&gt;




&lt;p&gt;Data science is a high-demand field and knowing which programming languages data scientists should know can make or break their careers. If you want to be a successful data scientist, it’s important that you have the right skillset. We recommend learning Python for beginners as well as Java for more advanced work with computer code. These two languages are used by over half of all Fortune 500 companies so they're worth getting acquainted with!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>programming</category>
      <category>datascience</category>
    </item>
    <item>
      <title>One Cool Trick to Speed Up Your Website Performance (Not Really)</title>
      <author>Jamund Ferguson</author>
      <pubDate>Mon, 13 Dec 2021 20:00:36 +0000</pubDate>
      <link>https://dev.to/xjamundx/one-cool-trick-to-speed-up-your-website-performance-not-really-1219</link>
      <guid>https://dev.to/xjamundx/one-cool-trick-to-speed-up-your-website-performance-not-really-1219</guid>
      <description>&lt;p&gt;The truly greatest bang-for-your-buck performance impact I ever had was removing two lines of JavaScript. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-role-at-amazon"&gt;
  &lt;/a&gt;
  My Role at Amazon
&lt;/h3&gt;

&lt;p&gt;When I was at Amazon I worked in the Seller Central org building tools to help companies sell their products. The app I primarily worked on was a complex multi-part form broken into numerous tabs with dozens of inputs dynamically populated based on product type, customer characteristics and various choices made along the way. The app was built with React and Redux and the backend was a custom Java SpringMVC-based framework.&lt;/p&gt;

&lt;p&gt;Like many parts of Amazon, our org had a strong culture of web performance. We had clearly defined web performance targets and each time they were missed, a "path to green" statement had to be written indicating how we'd get back underneath them. Amazon is also known for not letting bureaucracy get in the way of shipping code. So there was a constant battle between shipping new features and working toward our web performance goals. This is a pretty normal and healthy tension you'd expect to find in a lot of companies, but it was sometimes frustrating to work for a sprint or two on some important performance enhancement only to see it wiped away by the unintended negative performance impact of a highly anticipated new feature.&lt;/p&gt;

&lt;p&gt;As the only front-end engineer on my team, when I started, and one of a very small number in my org, my tenure at Amazon was focused primarily on front-end architecture and web performance. I was advising my teammates on how to write maintainable front-end code and trying to come up with sustainable ways to meet our web performance goals without slowing down our ability to ship code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attempting-to-improve-web-performance"&gt;
  &lt;/a&gt;
  Attempting to Improve Web Performance
&lt;/h3&gt;

&lt;p&gt;Not surprisingly when I joined the team we were not meeting our web performance targets. Most of the team members were smart backend devs with one or two that had some recent React experience. They had been working on this app for over a year, but weren't the team that had originally built it. &lt;/p&gt;

&lt;p&gt;One of the first things I did after getting our app running locally was to look for well-known performance wins (low hanging fruit). Do we have the optimized lodash build for webpack? Are we bundle splitting? Exactly how many &lt;code&gt;fetch&lt;/code&gt; polyfills do we have in our bundle? Can we create a separate build for modern browsers vs. old browsers? All of these common problems come up when building modern React and webpack apps. I'd dealt with before and thought I knew exactly what was needed to fix them. The only problem is that it wasn't enough.&lt;/p&gt;

&lt;p&gt;As I started working on some of those improvements, we began shaving off 10kb here, 100kb there. Our JavaScript bundle was dropping from 1.8mb to 1.5mb and then even down to around 1mb. But what was frustrating is that the impact these changes had on the customer wasn't enough. That org relied heavily on Real User Monitoring to keep track of how users were experiencing web performance. All of those minor webpack optimizations just weren't making a dent with many of our users. It turns out because of our specific use case (people adding one product, then another, then another) our cache hit rate is pretty high. The long download times of our big JS bundle wasn't killing us as much as it might in other scenarios. And all of this relatively minor tweaking, just wasn't having the impact that I'd like. Given the complexities of our dynamic form it was fairly difficult to split our code into much smaller bundles without a large refactor. So I was kind of stuck.&lt;/p&gt;

&lt;p&gt;After spending a month or two on low impact things that I had hoped were going to make me the web performance hero, none of them seemed to have the impact I had hoped for. At this point I was fairly frustrated and trying to figure out new and better ways to analyze what was &amp;amp; wasn't working. That's when I stumbled on the &lt;a href="https://developer.chrome.com/docs/devtools/coverage/"&gt;coverage tab&lt;/a&gt; in Chrome's web inspector.&lt;/p&gt;

&lt;p&gt;It was the most convoluted multi-step process to find it. Press &lt;code&gt;⌘P&lt;/code&gt; and then &lt;code&gt;&amp;gt;&lt;/code&gt; and then type &lt;code&gt;show coverage&lt;/code&gt;. I had heard about this, but I had no idea it did CSS as well or that CSS would even be a web performance bottleneck. I was so excited when I found this I even tweeted about it.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XjZkfLZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EW-MkVVUMAA5ZL6.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiprlLmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1448382754886799360/xj_eGkQ6_normal.jpg" alt="Jamund Ferguson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jamund Ferguson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/xjamundx"&gt;@xjamundx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      TIL about the "show coverage" option in Chrome Web Inspector 🤯 Includes both CSS and JS 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:18 AM - 02 May 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1256377543566876672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1256377543566876672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1256377543566876672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Once you get into the coverage panel, by default you'll see both JS and CSS files. But you can also filter to just CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oFmF7Dhk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxa7u676r786ligdrp42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oFmF7Dhk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxa7u676r786ligdrp42.png" alt="Show coverage select CSS" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I saw there was that over 98% of our main CSS file went unused. In addition, our CSS file was over 1mb. Honestly the way that the red and blue lines worked it took me a few double-takes to realize it was really that bad. I thought, hey okay, we're using 98% of the CSS. But no, it was &lt;strong&gt;unused&lt;/strong&gt;. We were using only 2% of the included CSS. Ouch! (&lt;em&gt;The CSS coverage below comes from a different website, but it follows a similar trend&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LxmrhwBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tl5lr8k3sk30or14rl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LxmrhwBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tl5lr8k3sk30or14rl8.png" alt="Very low CSS coverage" width="880" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem-with-large-css-files"&gt;
  &lt;/a&gt;
  The Problem with Large CSS Files
&lt;/h3&gt;

&lt;p&gt;While it's pretty common to discuss the downsides of large JS bundles, large CSS bundles are arguably worse! CSS is a &lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css"&gt;render blocking resource&lt;/a&gt; which means the browser is going to wait for that CSS file to be downloaded, parsed and constructed into a &lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model"&gt;CSSOM tree&lt;/a&gt; before rendering the contents of the page. Whereas JS files these days are usually added to the end of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; or included with the &lt;code&gt;defer&lt;/code&gt; or &lt;code&gt;async&lt;/code&gt; tags, CSS files are rarely loaded in parallel with the page render. That's why it's imperative that you keep unused CSS out of your main CSS bundle.&lt;/p&gt;

&lt;p&gt;There has been talk for years about including only "above the fold" or critical-path CSS on initial page load, but despite &lt;a href="https://project-awesome.org/addyosmani/critical-path-css-tools"&gt;several tools&lt;/a&gt; that can try to automate this process it's not foolproof.  When it comes to just avoiding including unneeded CSS I think many would agree CSS-in-JS approaches and even CSS Modules do a better job at this compared to the ever-too-common approach of having one large Sass or LESS file that contains all of the styles anyone might ever need for your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pinning-down-the-problem"&gt;
  &lt;/a&gt;
  Pinning Down the Problem
&lt;/h3&gt;

&lt;p&gt;The approach to styling my team had been using was basically having a large Sass file with dozens of dependent stylesheets &lt;code&gt;@import&lt;/code&gt;ed in. Obviously that makes it really hard to figure out which CSS was needed or not needed. I spent hours scouring our CSS files for what we weren't using. Nothing actually looked so obviously wasteful, not 1mb worth of waste anyway. Where else could the CSS be coming from? Was it from a shared header/footer that included extra styles? Maybe a JS-based CSS import somewher)? I had to find out.&lt;/p&gt;

&lt;p&gt;Searching through our JS code I found only 4 or 5 CSS imports. Our webpack config made sure that all CSS imported from inside our JS files ended up bundled together in one large file. In our main JavaScript entry file (index.js) I found 2 CSS imports that looked particularly suspicious. This isn't the exact code, but it was something very similar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;semantic-ui/dist/styles.min.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;semantic-ui/dist/styles.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I had looked at this code and ignored it literally dozens of times. But given my new challenge to figure out where the extra CSS was coming from it stood out. Why were we importing this library at all? Did we even need it? And why were we importing it twice (both minified and non-minified)?&lt;/p&gt;

&lt;p&gt;The first thing I did was comment out both of them. I ran &lt;code&gt;npm run build&lt;/code&gt; and saw our CSS bundle drop from 1.25mb down to 30kb! It was ridiculous. This code was killing us. ☠️&lt;/p&gt;

&lt;p&gt;Unfortunately, our website looked horrible after removing the CSS. Which can probably be expected. We were at least relying on &lt;em&gt;something&lt;/em&gt; in those CSS bundles. Next I commented out each of them one at a time. For whatever reason I think we actually needed to keep the non-minified one in there to avoid breaking the look &amp;amp; feel of the site, but at least it was something. We shaved off around 500kb of CSS just by removing one line. &lt;/p&gt;

&lt;p&gt;Now began the more difficult part of removing our reliance on that UI library altogether. Was it all CSS or was there going to be a JS component as well?  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-was-left"&gt;
  &lt;/a&gt;
  What Was Left
&lt;/h3&gt;

&lt;p&gt;Like most teams we relied on an internal UI library that our app was already importing. It was very likely that the tiny bits of functionality we relied upon from this external library were already covered by our internal one.&lt;/p&gt;

&lt;p&gt;An early approach I took was simply copy/pasting the whole Semantic UI library CSS into a new file and then just removing things we didn't need. That got me somewhere, but became increasingly difficult as the styles got more nested and complex.&lt;/p&gt;

&lt;p&gt;Eventually I removed the CSS imports completely and purposefully broke the look of the site. That made it really easy to identify which classes we actually were using. Side by side screenshots for example were very helpful.&lt;/p&gt;

&lt;p&gt;It turns out we were primarily using three components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The grid system&lt;/li&gt;
&lt;li&gt;The navigation tabs&lt;/li&gt;
&lt;li&gt;Modal dialogs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we figured which pieces of the library we were using it was easy enough to search through our code base and see which components were relying on them. There were a lot that used the grid for example, but we had a drop-in replacement for those that only required a small class name change. In some other cases, we had to either add new CSS or move the HTML around a bit to get it to work with our other UI library. It ended up being about a month of work for a new team member to completely detach ourselves from that external library. We carefully reviewed her work, compared before &amp;amp; after screenshots and where there were minor style differences, ran it by a few team members to make sure the changes were close enough to not block the change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-impact"&gt;
  &lt;/a&gt;
  The Impact
&lt;/h3&gt;

&lt;p&gt;After we shipped the changes we looked at our real user monitoring graphs and saw massive reductions in both our 50th and 90th percentile &lt;a href="https://web.dev/interactive/"&gt;time to interactive&lt;/a&gt; measurements across the app. It was around half a second of reduction (at the 90th percentile). After making so many changes that didn't seem to matter, it was so satisfying to finally have a solid performance win.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Removing that one UI library bundle probably ended up having a larger effect than any other single change I witnessed in my entire time working on web performance at Amazon.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-takeaways"&gt;
  &lt;/a&gt;
  The Takeaways
&lt;/h3&gt;

&lt;p&gt;I've found it's very difficult to generalize web performance wins. How likely is it that your app is also double importing a large CSS library? You might as well check, but it's probably not happening. What I hope you take away from my experience here is the underlying factors that enabled us to find &amp;amp; fix this problem.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Having web performance goals&lt;/li&gt;
&lt;li&gt;Don't just optimize to a checklist (Learn the tools!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think many engineers enjoy optimizing things. It's really fun and difficult work. The results as we all know can be very inconsistent. I can't tell you how many times I promised to shave off 150ms from our experience, got that improvement when testing locally, but saw nothing or even a negative impact when the change actually went live. In many cases that can lead managers to be weary of such promises. My org at Amazon had amazing leadership when it came to web performance. That mandate ensured that we had the buy-in we needed to keep going until we had the impact we wanted.&lt;/p&gt;

&lt;p&gt;The other realization that has become more apparent to me over time is that optimizing to a checklist doesn't cut it. Just because other apps you've worked on benefitted from change A or change B doesn't mean it will work in your next app. You have to understand your tools. You have to know the specific characteristics &amp;amp; architecture of your site. And you have to know your customers. Lighthouse probably told me early on in this process that I had too much CSS on the page. Without a clear understanding of how our CSS files were built together and better tools for analysis I wasn't able to do much with that information. While checklists of common web performance mistakes can absolutely be helpful, teaching teammates how to use the tools available to analyze web performance &lt;em&gt;in the specific&lt;/em&gt;, is much more powerful.&lt;/p&gt;

&lt;p&gt;I don't expect this article to provide any magic bullets for those out there trying to optimize their apps, but I do hope it encourages you to keep digging until you find your own.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>performance</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Don’t Touch That Mouse! Smart Developers Use Keyboard Shortcuts</title>
      <author>Liam Stojanovic</author>
      <pubDate>Mon, 13 Dec 2021 19:49:57 +0000</pubDate>
      <link>https://dev.to/getpieces/dont-touch-that-mouse-smart-developers-use-keyboard-shortcuts-3i9</link>
      <guid>https://dev.to/getpieces/dont-touch-that-mouse-smart-developers-use-keyboard-shortcuts-3i9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Mouses are slow. Keyboards are fast. If you’re a developer, use keyboard shortcuts to drastically increase your productivity in web browsers, IDEs and code snippet tools like &lt;a href="https://pieces.app"&gt;Pieces&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--INJ5dGoe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p46k3tafxyw9s9l0fzx2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INJ5dGoe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p46k3tafxyw9s9l0fzx2.gif" alt="How it feels using keyboard shortcuts in the Pieces app" width="498" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-case-for-keyboard-shortcuts"&gt;
  &lt;/a&gt;
  The Case for Keyboard Shortcuts
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://www.brainscape.com/academy/keyboard-shortcuts-revive-economy/"&gt;Brainscape…&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your job requires you to be working on a computer throughout each standard 8-hour workday, then using keyboard shortcuts can save you 8 entire workdays every year.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8voubdUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2i5s7r8bp7s98freppw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8voubdUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2i5s7r8bp7s98freppw.jpeg" alt="Image description" width="589" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A single keystroke may only shave you “0.4 seconds” but think about the hundreds of times you reach for your mouse daily. We’re talking hours per week, days per month, weeks per year.&lt;/p&gt;

&lt;p&gt;More importantly, &lt;strong&gt;keyboard shortcuts keep you in your flow and let you work at the speed of thought.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With some practice, you’ll be able to quickly perform key tasks and navigate menus in your browser, IDE and code snippet tools like &lt;a href="https://pieces.app"&gt;Pieces&lt;/a&gt; without ever touching that dreaded mouse.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-browser"&gt;
  &lt;/a&gt;
  The Browser
&lt;/h2&gt;

&lt;p&gt;Let’s start with the good ol’ browser, where you’re probably doing a lot of your development research (and checking crypto prices, flicking through YouTubes and I don’t want to know what else).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vimium.github.io/"&gt;Vimium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vimium — often referred to as the “hacker’s browser” — is a popular &lt;a href="https://chrome.google.com/extensions/detail/dbepggeogbaibhgnhhndojpepiihcmeb"&gt;Chrome extension&lt;/a&gt; (with a &lt;a href="https://addons.mozilla.org/en-GB/firefox/addon/vimium-ff/"&gt;port to Firefox&lt;/a&gt;) that allows you to navigate the web using just your keyboard! Shortcuts are based on the &lt;a href="https://www.vim.org/"&gt;Vim text editor.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some power shortcuts in the GIF below include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow a hyperlink in a new tab (&lt;strong&gt;F&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Scroll up and down (&lt;strong&gt;j&lt;/strong&gt;, &lt;strong&gt;k&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Switch between tabs (&lt;strong&gt;J&lt;/strong&gt;, &lt;strong&gt;K&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QglVV9j5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luduquhms3s4ersk0kbo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QglVV9j5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luduquhms3s4ersk0kbo.gif" alt="Vimium features mouse-less scrolling and web page navigation" width="765" height="625"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-snippet-tools-like-pieces"&gt;
  &lt;/a&gt;
  Code Snippet Tools Like Pieces
&lt;/h2&gt;

&lt;p&gt;Code snippets are an incredibly helpful way to save time by not re-writing the same code or re-searching for solved solutions.&lt;/p&gt;

&lt;p&gt;But it’s always been a hassle to save and work with code snippets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.pieces.app"&gt;Pieces&lt;/a&gt; is a popular new tool that enables you to save code snippets in less than a second from your code editor or any web page in Chrome and Edge.&lt;/p&gt;

&lt;p&gt;And as you can guess, keyboard shortcuts are the heart of this beautifully intuitive app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saving a Snippet from IntelliJ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just highlight your snippet and click &lt;strong&gt;⌥&lt;/strong&gt; + &lt;strong&gt;⌘&lt;/strong&gt; + &lt;strong&gt;P&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl&lt;/strong&gt; + &lt;strong&gt;Alt&lt;/strong&gt; + &lt;strong&gt;P&lt;/strong&gt; (Windows).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0Z5B6zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eupa8xubw84bq9t6qdp6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0Z5B6zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eupa8xubw84bq9t6qdp6.gif" alt="Saving snippets in IntelliJ with keyboard shortcuts" width="765" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saving a Snippet from Chrome&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Pieces &lt;a href="https://chrome.google.com/webstore/detail/pieces/igbgibhbfonhmjlechmeefimncpekepm?hl=en"&gt;Chrome extension&lt;/a&gt; makes saving code from the internet a breeze.&lt;/p&gt;

&lt;p&gt;Highlight the desired code and hit &lt;strong&gt;⌘&lt;/strong&gt; + &lt;strong&gt;Shift&lt;/strong&gt; + &lt;strong&gt;P&lt;/strong&gt; (Mac) or &lt;strong&gt;Alt&lt;/strong&gt; + &lt;strong&gt;Shift&lt;/strong&gt; + &lt;strong&gt;P&lt;/strong&gt; twice (Windows).&lt;/p&gt;

&lt;p&gt;Even easier, while this isn’t technically a keyboard shortcut, Pieces pops up a “Save” button when it detects code on a webpage. A single click will save that snippet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qkoyErI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46mx2ukbg314gy58sfj5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qkoyErI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46mx2ukbg314gy58sfj5.gif" alt="Saving to Pieces with Google Chrome" width="765" height="619"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finding and Re-Using Snippets in Pieces&lt;/strong&gt;&lt;br&gt;
To find a snippet in Pieces, just hit / and start searching.&lt;/p&gt;

&lt;p&gt;What’s even more helpful is that the Pieces &lt;a href="https://chrome.google.com/webstore/detail/pieces/igbgibhbfonhmjlechmeefimncpekepm?hl=en"&gt;Chrome extension&lt;/a&gt; automatically adds the source URL to the snippet as a Related Link. This is one of my favorite features and I no longer have endlessly cluttered Stack Overflow bookmarks with no context.&lt;/p&gt;

&lt;p&gt;You can view and manage your related links by hitting &lt;strong&gt;⌘&lt;/strong&gt; + &lt;strong&gt;K&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl&lt;/strong&gt; + &lt;strong&gt;K&lt;/strong&gt; (Windows).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PiQDnmjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb6lajem112m18stc7ka.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PiQDnmjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb6lajem112m18stc7ka.gif" alt="Related links in Pieces" width="765" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Many Shortcuts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are loads of other great keyboard shortcuts throughout Pieces. Hover over almost any action and you’ll see a shortcut option.&lt;/p&gt;

&lt;p&gt;Some of my favorites include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rename your snippet: &lt;strong&gt;⌘&lt;/strong&gt; + &lt;strong&gt;R&lt;/strong&gt; / &lt;strong&gt;Ctrl&lt;/strong&gt; + &lt;strong&gt;R&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Edit the description: &lt;strong&gt;⌘&lt;/strong&gt; + &lt;strong&gt;N&lt;/strong&gt; / &lt;strong&gt;Ctrl&lt;/strong&gt; + &lt;strong&gt;N&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Reclassify the snippet language: &lt;strong&gt;⌘&lt;/strong&gt; + &lt;strong&gt;Y&lt;/strong&gt; / &lt;strong&gt;Ctrl&lt;/strong&gt; + &lt;strong&gt;Y&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Open the Quick Menu actions: &lt;strong&gt;⌘&lt;/strong&gt; + &lt;strong&gt;O&lt;/strong&gt; / &lt;strong&gt;Ctrl&lt;/strong&gt; + &lt;strong&gt;O&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKPIbXI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t51y7iyibg7gqri5jh7k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKPIbXI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t51y7iyibg7gqri5jh7k.gif" alt="Quickly add a description. Descriptions are searchable, and can span multiple lines." width="765" height="599"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code-editors"&gt;
  &lt;/a&gt;
  Code Editors
&lt;/h2&gt;

&lt;p&gt;When it’s time to get down to coding, the mouse is your enemy. Let’s look at some critical shortcuts for two popular editors:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VSCode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; is one of the most popular free code editors, with &lt;a href="https://marketplace.visualstudio.com/vscode"&gt;extensions&lt;/a&gt; for all kinds of programming languages and projects.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Xa5EU-qAv-I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IntelliJ&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.jetbrains.com/help/idea/mastering-keyboard-shortcuts.html"&gt;IntelliJ&lt;/a&gt; comes jammed with built-in shortcuts and has a &lt;a href="https://plugins.jetbrains.com/"&gt;robust library of plugins&lt;/a&gt; to boost your productivity.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QYO5_riePOQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Guake Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A simple and easy way to use the terminal without leaving your current application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Guake/guake/blob/master/README.rst"&gt;Guake&lt;/a&gt; is triggered by a hotkey that drops down a terminal over your desktop, and retreats when that same hotkey is pressed again.&lt;/p&gt;

&lt;p&gt;Only available for Linux machines running &lt;a href="https://www.gnome.org/"&gt;Gnome&lt;/a&gt; as their desktop environments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QkzTedMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsyoj9thx69sm92h2jew.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkzTedMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsyoj9thx69sm92h2jew.jpeg" alt="Guake terminal" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AceJump for IntelliJ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/acejump/AceJump"&gt;AceJump&lt;/a&gt; enables single character search, select and jump inside IntelliJ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NpK9X_A8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8cj5mr9axgkbkjb4yur.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpK9X_A8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8cj5mr9axgkbkjb4yur.gif" alt="Image description" width="750" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KeyCombiner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not to get too meta on you, but &lt;a href="https://keycombiner.com/"&gt;KeyCombiner&lt;/a&gt; is a cool app designed to help practice keyboard shortcuts. &lt;a href="https://keycombiner.com/collections/"&gt;Collections&lt;/a&gt; are available for many popular apps, including IDEs and web applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzMJqOCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2pe13xejqhsfo57kh3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzMJqOCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2pe13xejqhsfo57kh3z.png" alt="Image description" width="880" height="538"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Keyboard shortcuts liberate you from the burden of mouse wiggles and right-clicks. Simple time-saving measures compound into &lt;strong&gt;days&lt;/strong&gt; of your life back! &lt;strong&gt;Take the red pill,&lt;/strong&gt; learn keyboard shortcuts, and relish in your regained time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aEDlqCNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5h8vzjdbt74clnrnq41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aEDlqCNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5h8vzjdbt74clnrnq41.png" alt="I know Kung Fu" width="800" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading! If you enjoyed this article, &lt;a href="https://code.pieces.app/install"&gt;check out our app&lt;/a&gt;, &lt;a href="https://twitter.com/getpieces"&gt;follow us on Twitter&lt;/a&gt;, and &lt;a href="https://medium.com/getpieces"&gt;give our Medium publication a follow&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>startup</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
