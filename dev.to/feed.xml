<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Web Application Development Services By Fusion Informatics</title>
      <author>jagadishFNI</author>
      <pubDate>Fri, 25 Jun 2021 18:12:12 +0000</pubDate>
      <link>https://dev.to/jagadish/web-application-development-services-by-fusion-informatics-1go8</link>
      <guid>https://dev.to/jagadish/web-application-development-services-by-fusion-informatics-1go8</guid>
      <description>&lt;p&gt;To know more about web application development and its features please do visit our below link.&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/services/application/web-development-company.html"&gt;https://www.fusioninformatics.com/services/application/web-development-company.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more updates on web application development kindly visit our blog section&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/blog/category/web-application-development/"&gt;https://www.fusioninformatics.com/blog/category/web-application-development/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cloudskills</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>SaaS Application Development Services By Fusion Informatics</title>
      <author>jagadishFNI</author>
      <pubDate>Fri, 25 Jun 2021 18:07:55 +0000</pubDate>
      <link>https://dev.to/jagadish/saas-application-development-services-by-fusion-informatics-m67</link>
      <guid>https://dev.to/jagadish/saas-application-development-services-by-fusion-informatics-m67</guid>
      <description>&lt;p&gt;Features of SaaS Application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data security&lt;/li&gt;
&lt;li&gt;Automated provisioning&lt;/li&gt;
&lt;li&gt;Rate limiting/QoS&lt;/li&gt;
&lt;li&gt;Subscription-based billing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please do visit below link for more info on SaaS based application development &lt;a href="https://www.fusioninformatics.com/services/application/saas-app-development.html"&gt;https://www.fusioninformatics.com/services/application/saas-app-development.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kindly visit our blog section for more updates on mobile application development&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/blog/category/enterprise-mobile-application-development/"&gt;https://www.fusioninformatics.com/blog/category/enterprise-mobile-application-development/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>saas</category>
      <category>android</category>
      <category>cloudnative</category>
      <category>aws</category>
    </item>
    <item>
      <title>React Native Application Development</title>
      <author>jagadishFNI</author>
      <pubDate>Fri, 25 Jun 2021 18:02:01 +0000</pubDate>
      <link>https://dev.to/jagadish/react-native-application-development-42ic</link>
      <guid>https://dev.to/jagadish/react-native-application-development-42ic</guid>
      <description>&lt;p&gt;React Native App Development- Make your app run on millions of devices&lt;/p&gt;

&lt;p&gt;Visit below link for more information on React Native Application Development&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/services/enterprise-mobility/react-native-development.html"&gt;https://www.fusioninformatics.com/services/enterprise-mobility/react-native-development.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please do visit below link For more updates on  React Native App Development&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/blog/category/react-native-app-development/"&gt;https://www.fusioninformatics.com/blog/category/react-native-app-development/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>android</category>
      <category>cloud</category>
    </item>
    <item>
      <title>VueJS - Internationalization</title>
      <author>Pablo Veiga</author>
      <pubDate>Fri, 25 Jun 2021 17:42:50 +0000</pubDate>
      <link>https://dev.to/vcpablo/vuejs-internationalization-155g</link>
      <guid>https://dev.to/vcpablo/vuejs-internationalization-155g</guid>
      <description>&lt;p&gt;Since the Internet's boom, more and more web applications are released each day (approximately 576k new websites per day*). Currently, there are over 1.7 billion websites* on the Internet and many of them are accessed by people from all around the world.&lt;/p&gt;

&lt;p&gt;Probably, if you create a website, you will want it to be accessed by as many people as possible. To make that happen and also provide a nice experience for your users, you will have to think about how to deliver it in different languages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Source: &lt;a href="https://websitesetup.org/news/how-many-websites-are-there"&gt;Website Setup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In this article I'm going to show you how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a multi-language website using &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; and &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;Vue i18n&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;implement a language switcher;&lt;/li&gt;
&lt;li&gt;use the &lt;code&gt;vuex-persistedstate&lt;/code&gt; package to avoid losing state when reloading the page;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#internationalization-i18n"&gt;
  &lt;/a&gt;
  Internationalization (i18n)
&lt;/h3&gt;

&lt;p&gt;Let's start with some basic concepts.&lt;/p&gt;

&lt;p&gt;If you're still not aware of Internationalization or what i18n really means, here is its official definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Internationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language.&lt;br&gt;
__(Source: &lt;a href="https://www.w3.org/International/questions/qa-i18n#i18n"&gt;W3.org&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Internationalization is often written i18n (English), where 18 is the number of letters between "i" and "n" in the English word (cool, right?!).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vue-i18n"&gt;
  &lt;/a&gt;
  Vue i18n
&lt;/h2&gt;

&lt;p&gt;If you perform a quick search on the internet you will find some solutions to implement i18n to your website or application built using VueJS.&lt;br&gt;
Probably, the most famous (and easy-to-use) one is &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;Vue i18n&lt;/a&gt;, an open source plugin for VueJS that provides a very friendly API to implement translation to different target languages in your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Assuming you've already created your VueJS project (take a &lt;a href="https://dev.to/vcpablo/vuejs-one-more-way-of-structuring-your-project-13mj"&gt;look at this article&lt;/a&gt; if you don't now where to start from), the first step to begin using the plugin is installing it. In a terminal window, go to the root directory of your project and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add vue-i18n &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You might use NPM as well, depending on your project configuration.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;The Vue i18n package works in a very simple way.&lt;br&gt;
You can set several configurations, but these are the basic ones required for your project to work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the initial language: the language loaded by default;&lt;/li&gt;
&lt;li&gt;the messages: a simple JSON object that contains the messages (translation keys) used for each one of the languages;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;First, create the folder structure that will hold everything together:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a folder called &lt;code&gt;i18n&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory of your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Within the &lt;code&gt;i18n&lt;/code&gt; folder, create an &lt;code&gt;index.js&lt;/code&gt; file and a folder called &lt;code&gt;messages&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how this first &lt;code&gt;index.js&lt;/code&gt; file will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;VueI18n&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-i18n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./messages&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VueI18n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VueI18n&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;messages&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In this example, we're going to build a part of an application that needs to be delivered in three different languages: English (default), Spanish and Brazilian Portuguese. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Within the &lt;code&gt;messages&lt;/code&gt; folder, create three folders named &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;es&lt;/code&gt; and &lt;code&gt;pt-BR´ and, inside each one of them (that represents a different language), create two files: one named&lt;/code&gt;menu.js&lt;code&gt;and another named&lt;/code&gt;index.js` .&lt;/p&gt;

&lt;p&gt;The files will look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/en/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Home',&lt;br&gt;
  about: 'About',&lt;br&gt;
  contact: 'Contact'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/en/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spanish&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/es/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Pagina de Inicio',&lt;br&gt;
  about: 'Acerca de',&lt;br&gt;
  contact: 'Contacto'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/es/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Portuguese (Brazil)&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/pt-BR/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Início',&lt;br&gt;
  about: 'Sobre',&lt;br&gt;
  contact: 'Contato'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/pt-BR/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you need, you may create more levels within the &lt;code&gt;messages&lt;/code&gt; object to organise them better. Like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
export default {&lt;br&gt;
  links: {&lt;br&gt;
    home: {&lt;br&gt;
      label: 'Home',&lt;br&gt;
      help: 'Click here to go to home page'&lt;br&gt;
    },&lt;br&gt;
    about: {&lt;br&gt;
      label: 'About',&lt;br&gt;
      help: 'Click here to know more about us'&lt;br&gt;
    },&lt;br&gt;
    contact: {&lt;br&gt;
      label: 'Contact',&lt;br&gt;
      help: 'Click here to go to reach out to us'&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Still inside the &lt;code&gt;messages&lt;/code&gt; folder, create an &lt;code&gt;index.js&lt;/code&gt; file like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import en from './en'&lt;br&gt;
import es from './es'&lt;br&gt;
import ptBR from './pt-BR'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  en,&lt;br&gt;
  es,&lt;br&gt;
  'pt-BR': ptBR&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;code&gt;main.js&lt;/code&gt; file, import the &lt;code&gt;i18n&lt;/code&gt; package and set it to the Vue instance:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import App from './App.vue'&lt;br&gt;
import i18n from './i18n' &lt;/p&gt;

&lt;p&gt;new Vue({&lt;br&gt;
  i18n,&lt;br&gt;
  render: h =&amp;gt; h(App)&lt;br&gt;
}).$mount('#app')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now your application is ready to take advantage of the vue-i18n plugin. Let's create a simple scenario to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;We're going to implement a language switcher and put it into a navbar at the top of the page. This switcher will be responsible to set the current &lt;em&gt;locale&lt;/em&gt; of the application using Vuex + VuePersist.&lt;/p&gt;

&lt;p&gt;To make things easier, I chose to use &lt;a href="https://bootstrap-vue.org/"&gt;Bootstrap Vue&lt;/a&gt;. If you don't know it yet, it's worth taking a look. It provides all of the &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; components, wrapped into Vue components :)&lt;/p&gt;

&lt;p&gt;Before creating the component itself, we're going to structure a basic &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; module that will be responsible for managing the language state, we'll also make use of the &lt;a href="https://github.com/robinvdvleuten/vuex-persistedstate"&gt;Vuex Persisted State&lt;/a&gt; plugin, to easily store the state in the local storage so that, when refreshing the page, the user does not lose its selected language.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To add &lt;code&gt;Vuex Persist&lt;/code&gt; in your project, run the following command in the root directory of your project:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;shell&lt;br&gt;
yarn add  vuex-persistedstate --save&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a file named &lt;code&gt;index.js&lt;/code&gt; and a folder named &lt;code&gt;store&lt;/code&gt; inside the &lt;code&gt;src&lt;/code&gt; directory. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create folder named &lt;code&gt;modules&lt;/code&gt; within &lt;code&gt;store&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a file named &lt;code&gt;locale.js&lt;/code&gt; inside the &lt;code&gt;modules&lt;/code&gt; folder and implement it like this:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/store/modules/locale.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  namespaced: true,&lt;br&gt;
  state: {&lt;br&gt;
    locale: 'en'&lt;br&gt;
  },&lt;br&gt;
  mutations: {&lt;br&gt;
    setLocale(state, locale) {&lt;br&gt;
      state.locale = locale&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
This is how the &lt;code&gt;store/index.js&lt;/code&gt; will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/store/index.js&lt;/p&gt;

&lt;p&gt;import Vue from 'vue'&lt;br&gt;
import Vuex from 'vuex'&lt;br&gt;
import createPersistedState from 'vuex-persistedstate'&lt;/p&gt;

&lt;p&gt;import locale from './modules/locale'&lt;/p&gt;

&lt;p&gt;const persistedState = createPersistedState({&lt;br&gt;
  key: 'vuejs-vue-i18n',&lt;br&gt;
  paths: ['locale']&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;Vue.use(Vuex)&lt;/p&gt;

&lt;p&gt;export default new Vuex.Store({&lt;br&gt;
  modules: {&lt;br&gt;
    locale&lt;br&gt;
  },&lt;br&gt;
  plugins: [persistedState]&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, let´s implement the &lt;code&gt;LanguageSwitch.vue&lt;/code&gt; component. It will hold all of the available languages and it will use Vuex helpers functions to update the current language:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    
      :disabled="isCurrentLocale('en')"&lt;br&gt;
      @click="onSetLocale('en')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      EN&lt;br&gt;
    &lt;br&gt;
    
      :disabled="isCurrentLocale('es')"&lt;br&gt;
      @click="onSetLocale('es')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      ES&lt;br&gt;
    &lt;br&gt;
    
      :disabled="isCurrentLocale('pt-BR')"&lt;br&gt;
      @click="onSetLocale('pt-BR')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      PT-BR
    &amp;gt;&lt;br&gt;
  &lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/components/LanguageSwitcher.vue (script)&lt;/p&gt;

&lt;p&gt;import { mapState, mapMutations } from 'vuex'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'LanguageSwitcher',&lt;br&gt;
  computed: {&lt;br&gt;
    ...mapState('locale', ['locale']),&lt;br&gt;
    currentLocale() {&lt;br&gt;
      return this.locale.toUpperCase()&lt;br&gt;
    }&lt;br&gt;
  },&lt;br&gt;
  created() {&lt;br&gt;
    this.$i18n.locale = this.locale&lt;br&gt;
  },&lt;br&gt;
  methods: {&lt;br&gt;
    ...mapMutations('locale', ['setLocale']),&lt;br&gt;
    onSetLocale(locale) {&lt;br&gt;
      this.$i18n.locale = locale&lt;br&gt;
      this.setLocale(locale)&lt;br&gt;
    },&lt;br&gt;
    isCurrentLocale(locale) {&lt;br&gt;
      return this.locale === locale&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, let's create a simple &lt;code&gt;Navbar.vue&lt;/code&gt; component to put the recently created &lt;code&gt;LanguageSwitcher&lt;/code&gt; one.
Notice that, in this case, we use the global &lt;code&gt;$t&lt;/code&gt; helper provided by the Vue i18n plugin to get the proper translation we need to display according to the current locale.
It's very simple to use, all you need to do, it call it passing a translation key as argument.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;html&lt;br&gt;
{{ $t('translation.key') }}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may also use directly in the &lt;code&gt;script&lt;/code&gt; section of your components, if needed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;javascript&lt;br&gt;
{&lt;br&gt;
  computed: {&lt;br&gt;
    label() {&lt;br&gt;
       // For this work, you have to create a file named&lt;/code&gt;common.js&lt;code&gt;inside the folder of each language and export it in its respective&lt;/code&gt;index.js&lt;code&gt;file.&lt;br&gt;
       return this.$t('common.label')&lt;br&gt;
    }&lt;br&gt;
  },&lt;br&gt;
  methods: {&lt;br&gt;
    getTitle() {&lt;br&gt;
       return this.$t('common.title')&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is how our &lt;code&gt;Navbar.vue&lt;/code&gt; component will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    VueJS vue-i18n&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b-navbar-toggle target="nav-collapse" /&amp;gt;

&amp;lt;b-collapse id="nav-collapse" is-nav&amp;gt;
  &amp;lt;b-navbar-nav&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'Home' }"&amp;gt;
      {{ $t('navbar.home') }}
    &amp;lt;/b-nav-item&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'About' }"&amp;gt;
      {{ $t('navbar.about') }}
    &amp;lt;/b-nav-item&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'Contact' }"&amp;gt;
      {{ $t('navbar.contact') }}
    &amp;lt;/b-nav-item&amp;gt;
  &amp;lt;/b-navbar-nav&amp;gt;

  &amp;lt;b-navbar-nav class="ml-auto"&amp;gt;
    &amp;lt;LanguageSwitcher /&amp;gt;
  &amp;lt;/b-navbar-nav&amp;gt;
&amp;lt;/b-collapse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import LanguageSwitcher from '@/components/LanguageSwitcher/LanguageSwitcher'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'Navbar',&lt;br&gt;
  components: {&lt;br&gt;
    LanguageSwitcher&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We're going to create a &lt;code&gt;Layout.vue&lt;/code&gt; component that will hold the &lt;code&gt;Navbar&lt;/code&gt; and will be used within the Views we are going to create next:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    &lt;br&gt;
      &lt;br&gt;
      &lt;br&gt;
        &lt;br&gt;
      &lt;br&gt;
    &lt;br&gt;
  &lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/views/Layout.vue (script)&lt;/p&gt;

&lt;p&gt;import Navbar from '@/components/Navbar'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'Layout',&lt;br&gt;
  components: {&lt;br&gt;
    Navbar&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For everything to work properly, we need to create the views, implement the &lt;code&gt;Layout&lt;/code&gt; component into them and add them to the &lt;code&gt;router/index.js&lt;/code&gt; file.
In this section, the most important thing is to use the global &lt;code&gt;$t&lt;/code&gt; helper, provided by the Vue i18n package &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;src/components/Home.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.home') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'HomeView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/components/About.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.about') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'AboutView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/components/Contact.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.contact') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'ContactView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In order to use nested translation keys, the process is simple, since Vue I18n works  with the full translation key path, like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.links.contact.label') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/router/index.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import Vue from 'vue'&lt;br&gt;
import VueRouter from 'vue-router'&lt;/p&gt;

&lt;p&gt;Vue.use(VueRouter)&lt;/p&gt;

&lt;p&gt;const routes = [&lt;br&gt;
  {&lt;br&gt;
    path: '/',&lt;br&gt;
    name: 'Home',&lt;br&gt;
    component: () =&amp;gt; import('@/views/Home')&lt;br&gt;
  },&lt;br&gt;
  {&lt;br&gt;
    path: '/about',&lt;br&gt;
    name: 'About',&lt;br&gt;
    component: () =&amp;gt; import('@/views/About')&lt;br&gt;
  },&lt;br&gt;
  {&lt;br&gt;
    path: '/contact',&lt;br&gt;
    name: 'Contact',&lt;br&gt;
    component: () =&amp;gt; import('@/views/Contact')&lt;br&gt;
  }&lt;br&gt;
]&lt;/p&gt;

&lt;p&gt;const router = new VueRouter({&lt;br&gt;
  mode: 'history',&lt;br&gt;
  routes&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default router&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is how the application should work after the full implementation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/f0ed53a41f0a42b59676af6f4ff6f06b"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJVTnyU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.loom.com/sessions/thumbnails/f0ed53a41f0a42b59676af6f4ff6f06b-with-play.gif"&gt; &lt;p&gt;VueJS Internationalization Sample Video&lt;/p&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the fully-working source code in &lt;a href="https://github.com/vcpablo/vuejs2-vue-i18n"&gt;this link&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-features"&gt;
  &lt;/a&gt;
  Other features
&lt;/h3&gt;

&lt;p&gt;Besides translating simple pieces of text, Vue I18n also provides other useful features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/formatting.html#named-formatting"&gt;Formatting Interpolation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/pluralization.html"&gt;Pluralization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/datetime.html"&gt;Date Time Localization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/number.html"&gt;Number Localization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may explore the &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;website&lt;/a&gt; to find out more about the tool.&lt;/p&gt;




&lt;p&gt;I hope you liked it.&lt;br&gt;
Please, comment and share!&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@benwhitephotography"&gt;Ben White&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>i18n</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Async/Await Design Patterns for Cleaner Async Logic</title>
      <author>Mastering JS</author>
      <pubDate>Fri, 25 Jun 2021 17:26:41 +0000</pubDate>
      <link>https://dev.to/masteringjs/5-async-await-design-patterns-for-cleaner-async-logic-1fkh</link>
      <guid>https://dev.to/masteringjs/5-async-await-design-patterns-for-cleaner-async-logic-1fkh</guid>
      <description>&lt;p&gt;At &lt;a href="https://masteringjs.io/"&gt;Mastering JS&lt;/a&gt;, we love &lt;a href="https://masteringjs.io/tutorials/fundamentals/async-await"&gt;async/await&lt;/a&gt;. You might even say we wrote the &lt;a href="https://asyncawait.net/"&gt;book on async/await&lt;/a&gt;. Here's 5 design patterns we use regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async-raw-foreach-endraw-"&gt;
  &lt;/a&gt;
  Async &lt;a href="https://masteringjs.io/tutorials/fundamentals/foreach"&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Do &lt;strong&gt;not&lt;/strong&gt; use an async &lt;a href="https://masteringjs.io/tutorials/fundamentals/callbacks"&gt;callback&lt;/a&gt; with &lt;code&gt;forEach()&lt;/code&gt;. In general, the way to simulate &lt;a href="https://masteringjs.io/tutorials/fundamentals/async-foreach"&gt;&lt;code&gt;forEach()&lt;/code&gt; with async functions&lt;/a&gt; is to use &lt;code&gt;await Promise.all([arr.map(callback)])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Do this:&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slept for&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// Not this:&lt;/span&gt;
&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slept for&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-return-await-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;return await&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Async/await works with &lt;code&gt;try/catch&lt;/code&gt;... almost. There's a gotcha. If you &lt;code&gt;await&lt;/code&gt; on a promise that rejects, JavaScript throws an error that you can &lt;code&gt;catch&lt;/code&gt;. But if you &lt;code&gt;return&lt;/code&gt; a promise that rejects, that ends up as an &lt;a href="https://thecodebarbarian.com/unhandled-promise-rejections-in-node.js.html"&gt;unhandled promise rejection&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oops!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This runs...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This does NOT run!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few workarounds for this quirk, but one approach we like is using &lt;code&gt;return await&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This runs!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delayed-raw-await-endraw-"&gt;
  &lt;/a&gt;
  Delayed &lt;code&gt;await&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Sometimes you want to call an &lt;a href="https://thecodebarbarian.com/async-functions-in-javascript.html"&gt;async function&lt;/a&gt;, do something else, and then &lt;code&gt;await&lt;/code&gt; on the async function. Promises are just variables in JavaScript, so you can call an async function, get the promise response, and &lt;code&gt;await&lt;/code&gt; on it later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Execute the function, but don't `await` so we can `setTimeout()`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;waitForEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wait until `ee` emits a 'test' event&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;waitForEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-await-endraw-with-promise-chaining"&gt;
  &lt;/a&gt;
  &lt;code&gt;await&lt;/code&gt; with &lt;a href="https://masteringjs.io/tutorials/fundamentals/promise-chaining"&gt;Promise Chaining&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We recommend using &lt;a href="https://masteringjs.io/axios"&gt;Axios&lt;/a&gt; over &lt;code&gt;fetch()&lt;/code&gt;, but in some cases you may need to use &lt;code&gt;fetch()&lt;/code&gt;. And &lt;code&gt;fetch()&lt;/code&gt; famously requires you to asynchronously parse the response body. Here's how you can make a request with &lt;code&gt;fetch()&lt;/code&gt; and parse the response body with 1 &lt;code&gt;await&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another quirk of &lt;code&gt;fetch()&lt;/code&gt; is that it doesn't throw an error if the server responds with an error code, like 400. Here's how you can make &lt;code&gt;fetch()&lt;/code&gt; throw a catchable error if the response code isn't in the 200 or 300 range.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
  &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server responded with status code &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;
  &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#waiting-for-events"&gt;
  &lt;/a&gt;
  Waiting for Events
&lt;/h2&gt;

&lt;p&gt;Event emitters are a common pattern in JavaScript, but they don't work well with async/await because they're not &lt;a href="https://masteringjs.io/tutorials/fundamentals/promise"&gt;promises&lt;/a&gt;. Here's how you can &lt;code&gt;await&lt;/code&gt; on an event from a Node.js event emitter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wait until `ee` emits a 'test' event&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>node</category>
      <category>vue</category>
      <category>async</category>
    </item>
    <item>
      <title>Introduction to Security, Identity, and Compliance with AWS</title>
      <author>Adit Modi</author>
      <pubDate>Fri, 25 Jun 2021 17:16:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-security-identity-and-compliance-with-aws-3ike</link>
      <guid>https://dev.to/aws-builders/introduction-to-security-identity-and-compliance-with-aws-3ike</guid>
      <description>&lt;p&gt;While companies increasingly look to cloud computing as a means to expand, modernize and stay competitive, so too do those companies expose themselves to new risks. In fact, Ermetic and IDC report that 80% of CISOs claim their company has had a cloud data breach in the past 18 months. Nearly half of those (43%) had experienced 10 or more breaches.&lt;/p&gt;

&lt;p&gt;The benefits of cloud computing are numerous, but organizations cannot make the switch to this modern platform without understanding the risks involved and, more importantly, how to protect themselves, their staff and their customers.&lt;/p&gt;

&lt;p&gt;Amazon Web Services (AWS) is a cloud service provider that’s on almost every company’s radar today. But many AWS customers today wonder what the best approach to security is and how to get there.&lt;/p&gt;

&lt;p&gt;companies often struggle to understand how they can protect and secure their data, their customers, and their very existence before moving to (or while expanding on) AWS. &lt;/p&gt;

&lt;p&gt;In this blog post, we will discuss some of the most important AWS security services that protect your data, accounts, and workloads from unauthorized access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQD5q0OH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzjc1a0bneocif3qol2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQD5q0OH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzjc1a0bneocif3qol2i.png" alt="Introduction to Developer Tools with AWS (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Background: Cloud Engineer | AWS Community Builder | AWS Educate Cloud Ambassador | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Introduction to AWS is a Series containing different articles that provide a basic introduction to different aws topics/categories. Each article covers the detailed guide on how to work with particular topic/category . This series aims at providing "A Getting Started Guide on Different aws topics / categories ."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#security-identity-and-compliance"&gt;
  &lt;/a&gt;
  Security, Identity, and Compliance
&lt;/h1&gt;

&lt;p&gt;Using AWS, you will gain the control and confidence you need to securely run your business with the most flexible and secure cloud computing environment available today. As an AWS customer, you will benefit from AWS data centers and a network architected to protect your information, identities, applications, and devices. With AWS, you can improve your ability to meet core security and compliance requirements, such as data locality, protection, and confidentiality with our comprehensive services and features.&lt;/p&gt;

&lt;p&gt;AWS allows you to automate manual security tasks so you can shift your focus to scaling and innovating your business. Plus, you pay only for the services that you use. All customers benefit from AWS being the only commercial cloud that has had its service offerings and associated supply chain vetted and accepted as secure enough for top-secret workloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-security-hub"&gt;
  &lt;/a&gt;
  AWS Security Hub
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsKhs-rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/889xibs9c607uns5own2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsKhs-rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/889xibs9c607uns5own2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Security Hub gives you a comprehensive view of your high-priority security alerts and compliance status across AWS accounts. &lt;/p&gt;

&lt;p&gt;There are a range of powerful security tools at your disposal, from firewalls and endpoint protection to vulnerability and compliance scanners. But oftentimes this leaves your team switching back-and-forth between these tools to deal with hundreds, and sometimes thousands, of security alerts every day. With Security Hub, you now have a single place that aggregates, organizes, and prioritizes your security alerts, or findings, from multiple AWS services, such as Amazon GuardDuty, Amazon Inspector, and Amazon Macie, as well as from AWS Partner solutions. &lt;/p&gt;

&lt;p&gt;Your findings are visually summarized on integrated dashboards with actionable graphs and tables. You can also continuously monitor your environment using automated compliance checks based on the AWS best practices and industry standards your organization follows. Get started with AWS Security Hub just a few clicks in the Management Console and once enabled, Security Hub will begin aggregating and prioritizing findings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-cloud-directory"&gt;
  &lt;/a&gt;
  Amazon Cloud Directory
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQ8rnhdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tkffqs1njeq2tbpdo38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQ8rnhdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tkffqs1njeq2tbpdo38.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Cloud Directory enables you to build flexible, cloud-native directories for organizing hierarchies of data along multiple dimensions. With Cloud Directory, you can create directories for a variety of use cases, such as organizational charts, course catalogs, and device registries. &lt;/p&gt;

&lt;p&gt;While traditional directory solutions, such as Active Directory Lightweight Directory Services (AD LDS) and other LDAP-based directories, limit you to a single hierarchy, Cloud Directory offers you the flexibility to create directories with hierarchies that span multiple dimensions. For example, you can create an organizational chart that can be navigated through separate hierarchies for reporting structure, location, and cost center.&lt;/p&gt;

&lt;p&gt;Amazon Cloud Directory automatically scales to hundreds of millions of objects and provides an extensible schema that can be shared with multiple applications. As a fully-managed service, Cloud Directory eliminates time-consuming and expensive administrative tasks, such as scaling infrastructure and managing servers. You simply define the schema, create a directory, and then populate your directory by making calls to the Cloud Directory API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-identity-and-access-management"&gt;
  &lt;/a&gt;
  AWS Identity and Access Management
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_UDOstm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq2j403zyou516on07lg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_UDOstm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq2j403zyou516on07lg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Identity and Access Management (IAM) enables you to securely control access to AWS services and resources for your users. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources. IAM allows you to do the following:&lt;/p&gt;

&lt;p&gt;Manage IAM users and their access: You can create users in IAM, assign them individual security credentials (access keys, passwords, and multi-factor authentication devices), or request temporary security credentials to provide users access to AWS services and resources. You can manage permissions in order to control which operations a user can perform.&lt;/p&gt;

&lt;p&gt;Manage IAM roles and their permissions: You can create roles in IAM and manage permissions to control which operations can be performed by the entity, or AWS service, that assumes the role. You can also define which entity is allowed to assume the role.&lt;/p&gt;

&lt;p&gt;Manage federated users and their permissions: You can enable identity federation to allow existing identities (users, groups, and roles) in your enterprise to access the AWS Management Console, call AWS APIs, and access resources, without the need to create an IAM user for each identity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-guardduty"&gt;
  &lt;/a&gt;
  Amazon GuardDuty
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HHJ-iyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6raxo7c32spblqjigx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HHJ-iyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6raxo7c32spblqjigx3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon GuardDuty is a threat detection service that continuously monitors for malicious or unauthorized behavior to help you protect your AWS accounts and workloads. It monitors for activity such as unusual API calls or potentially unauthorized deployments that indicate a possible account compromise. GuardDuty also detects potentially compromised instances or reconnaissance by attackers.&lt;/p&gt;

&lt;p&gt;Enabled with a few clicks in the AWS Management Console, Amazon GuardDuty can immediately begin analyzing billions of events across your AWS accounts for signs of risk. GuardDuty identifies suspected attackers through integrated threat intelligence feeds and uses machine learning to detect anomalies in account and workload activity. When a potential threat is detected, the service delivers a detailed security alert to the GuardDuty console and Amazon CloudWatch Events. This makes alerts actionable and easy to integrate into existing event management and workflow systems.&lt;/p&gt;

&lt;p&gt;Amazon GuardDuty is cost effective and easy. It does not require you to deploy and maintain software or security infrastructure, meaning it can be enabled quickly with no risk of negatively impacting existing application workloads. There are no upfront costs with GuardDuty, no software to deploy, and no threat intelligence feeds required. Customers pay for the events analyzed by GuardDuty and there is a 30-day free trial available for every new account to the service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-inspector"&gt;
  &lt;/a&gt;
  Amazon Inspector
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4TXBH2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r791sblh8pkg2r4e61h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4TXBH2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r791sblh8pkg2r4e61h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Inspector is an automated security assessment service that helps improve the security and compliance of applications deployed on AWS. Amazon Inspector automatically assesses applications for exposure, vulnerabilities, and deviations from best practices. After performing an assessment, Amazon Inspector produces a detailed list of security findings prioritized by level of severity. These findings can be reviewed directly or as part of detailed assessment reports which are available via the Amazon Inspector console or API.&lt;/p&gt;

&lt;p&gt;Amazon Inspector security assessments help you check for unintended network accessibility of your Amazon EC2 instances and for vulnerabilities on those EC2 instances. Amazon Inspector assessments are offered to you as pre-defined rules packages mapped to common security best practices and vulnerability definitions. Examples of built-in rules include checking for access to your EC2 instances from the internet, remote root login being enabled, or vulnerable software versions installed. These rules are regularly updated by AWS security researchers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-macie"&gt;
  &lt;/a&gt;
  Amazon Macie
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70TCVh6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l85cbtps1ycl72zdvok8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70TCVh6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l85cbtps1ycl72zdvok8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Macie is a security service that uses machine learning to automatically discover, classify, and protect sensitive data in AWS. Amazon Macie recognizes sensitive data such as personally identifiable information (PII) or intellectual property, and provides you with dashboards and alerts that give visibility into how this data is being accessed or moved. The fully managed service continuously monitors data access activity for anomalies, and generates detailed alerts when it detects risk of unauthorized access or inadvertent data leaks. Today, Amazon Macie is available to protect data stored in Amazon S3, with support for additional AWS data stores coming later this year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-artifact"&gt;
  &lt;/a&gt;
  AWS Artifact
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srhG4LGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjdopew82vny5li5vpro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--srhG4LGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjdopew82vny5li5vpro.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Artifact is your go-to, central resource for compliance-related information that matters to you. It provides on-demand access to AWS’ security and compliance reports and select online agreements. Reports available in AWS Artifact include our Service Organization Control (SOC) reports, Payment Card Industry (PCI) reports, and certifications from accreditation bodies across geographies and compliance verticals that validate the implementation and operating effectiveness of AWS security controls. Agreements available in AWS Artifact include the Business Associate Addendum (BAA) and the Nondisclosure Agreement (NDA).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-certificate-manager"&gt;
  &lt;/a&gt;
  AWS Certificate Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1N8GIrRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2qwx6t65qh1pdkq6g1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1N8GIrRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2qwx6t65qh1pdkq6g1r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Certificate Manager is a service that lets you easily provision, manage, and deploy Secure Sockets Layer/Transport Layer Security (SSL/TLS) certiﬁcates for use with AWS services and your internal connected resources. SSL/TLS certiﬁcates are used to secure network communications and establish the identity of websites over the Internet as well as resources on private networks. AWS Certificate Manager removes the time-consuming manual process of purchasing, uploading, and renewing SSL/TLS certiﬁcates.&lt;/p&gt;

&lt;p&gt;With AWS Certificate Manager, you can quickly request a certificate, deploy it on ACM-integrated AWS resources, such as Elastic Load Balancing, Amazon CloudFront distributions, and APIs on API Gateway, and let AWS Certificate Manager handle certificate renewals. It also enables you to create private certificates for your internal resources and manage the certificate lifecycle centrally. Public and private certificates provisioned through AWS Certificate Manager for use with ACM-integrated services are free. You pay only for the AWS resources you create to run your application. With AWS Certificate Manager Private Certificate Authority, you pay monthly for the operation of the private CA and for the private certificates you issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-cloudhsm"&gt;
  &lt;/a&gt;
  AWS CloudHSM
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrVDZ_07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nda7h942yoe0n0z9ksug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrVDZ_07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nda7h942yoe0n0z9ksug.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS CloudHSM is a cloud-based hardware security module (HSM) that enables you to easily generate and use your own encryption keys on the AWS Cloud. With CloudHSM, you can manage your own encryption keys using FIPS 140-2 Level 3 validated HSMs. CloudHSM offers you the flexibility to integrate with your applications using industry-standard APIs, such as PKCS#11, Java Cryptography Extensions (JCE), and Microsoft CryptoNG (CNG) libraries.&lt;/p&gt;

&lt;p&gt;CloudHSM is standards-compliant and enables you to export all of your keys to most other commercially-available HSMs, subject to your configurations. It is a fully-managed service that automates time-consuming administrative tasks for you, such as hardware provisioning, software patching, high-availability, and backups. CloudHSM also enables you to scale quickly by adding and removing HSM capacity on-demand, with no up-front costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-directory-service"&gt;
  &lt;/a&gt;
  AWS Directory Service
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyrXbRW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ufge1r5a7z1nuhwf80b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyrXbRW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ufge1r5a7z1nuhwf80b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Directory Service for Microsoft Active Directory, also known as AWS Managed Microsoft AD, enables your directory-aware workloads and AWS resources to use managed Active Directory in the AWS Cloud. AWS Managed Microsoft AD is built on actual Microsoft Active Directory and does not require you to synchronize or replicate data from your existing Active Directory to the cloud. You can use standard Active Directory administration tools and take advantage of built-in Active Directory features such as Group Policy and single sign-on (SSO). With AWS Managed Microsoft AD, you can easily join Amazon EC2 and Amazon RDS for SQL Server instances to a domain, and use AWS Enterprise IT applications such as Amazon WorkSpaces with Active Directory users and groups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-firewall-manager"&gt;
  &lt;/a&gt;
  AWS Firewall Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7WQC4r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xgknrtefv3sltz4lqaa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7WQC4r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xgknrtefv3sltz4lqaa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Firewall Manager is a security management service that makes it easier to centrally configure and manage AWS WAF rules across your accounts and applications. Using Firewall Manager, you can easily roll out AWS WAF rules for your Application Load Balancers and Amazon CloudFront distributions across accounts in AWS Organizations. As new applications are created, Firewall Manager also makes it easy to bring new applications and resources into compliance with a common set of security rules from day one. Now you have a single service to build firewall rules, create security policies, and enforce them in a consistent, hierarchical manner across your entire Application Load Balancers and Amazon CloudFront infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-key-management-service"&gt;
  &lt;/a&gt;
  AWS Key Management Service
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlZiyabD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e7ipxdkapt48ygqs12k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlZiyabD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e7ipxdkapt48ygqs12k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Key Management Service (KMS) makes it easy for you to create and manage keys and control the use of encryption across a wide range of AWS services and in your applications. AWS KMS is a secure and resilient service that uses FIPS 140-2 validated hardware security modules to protect your keys. AWS KMS is integrated with AWS CloudTrail to provide you with logs of all key usage to help meet your regulatory and compliance needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-secrets-manager"&gt;
  &lt;/a&gt;
  AWS Secrets Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ncrHpNyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oxotiztcccxyr7imyz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ncrHpNyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oxotiztcccxyr7imyz2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Secrets Manager helps you protect secrets needed to access your applications, services, and IT resources. The service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Users and applications retrieve secrets with a call to Secrets Manager APIs, eliminating the need to hardcode sensitive information in plain text. Secrets Manager offers secret rotation with built-in integration for Amazon RDS for MySQL, PostgreSQL, and Amazon Aurora. Also, the service is extensible to other types of secrets, including API keys and OAuth tokens. In addition, Secrets Manager enables you to control access to secrets using fine-grained permissions and audit secret rotation centrally for resources in the AWS Cloud, third-party services, and on-premises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-shield"&gt;
  &lt;/a&gt;
  AWS Shield
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUEL4aAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jio6hk584xksrmmz4wuj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUEL4aAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jio6hk584xksrmmz4wuj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards web applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield: Standard and Advanced.&lt;/p&gt;

&lt;p&gt;All AWS customers beneﬁt from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your website or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks.&lt;/p&gt;

&lt;p&gt;For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (Amazon EC2), Elastic Load Balancing (ELB), Amazon CloudFront, and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (Amazon EC2), Elastic Load Balancing (ELB), Amazon CloudFront, and Amazon Route 53 charges.&lt;/p&gt;

&lt;p&gt;AWS Shield Advanced is available globally on all Amazon CloudFront and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (Amazon EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions: Northern Virginia, Oregon, Ireland, Tokyo, and Northern California.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-single-signon"&gt;
  &lt;/a&gt;
  AWS Single Sign-On
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1L22cqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfobjd9b78rms2lbdvxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1L22cqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfobjd9b78rms2lbdvxv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Single Sign-On (SSO) is a cloud SSO service that makes it easy to centrally manage SSO access to multiple AWS accounts and business applications. With just a few clicks, you can enable a highly available SSO service without the upfront investment and on-going maintenance costs of operating your own SSO infrastructure. With AWS SSO, you can easily manage SSO access and user permissions to all of your accounts in AWS Organizations centrally. AWS SSO also includes built-in SAML integrations to many business applications, such as Salesforce, Box, and Office 365. Further, by using the AWS SSO application configuration wizard, you can create Security Assertion Markup Language (SAML) 2.0 integrations and extend SSO access to any of your SAML-enabled applications. Your users simply sign in to a user portal with credentials they configure in AWS SSO or using their existing corporate credentials to access all their assigned accounts and applications from one place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-waf"&gt;
  &lt;/a&gt;
  AWS WAF
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4dJsoOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kww4zi9to51thz43s8zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4dJsoOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kww4zi9to51thz43s8zh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS WAF is a web application ﬁrewall that helps protect your web applications from common web exploits that could aﬀect application availability, compromise security, or consume excessive resources. AWS WAF gives you control over which traﬃc to allow or block to your web application by deﬁning customizable web security rules. You can use AWS WAF to create custom rules that block common attack patterns, such as SQL injection or cross-site scripting, and rules that are designed for your speciﬁc application. New rules can be deployed within minutes, letting you respond quickly to changing traﬃc patterns. Also, AWS WAF includes a full-featured API that you can use to automate the creation, deployment, and maintenance of web security rules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-organizations"&gt;
  &lt;/a&gt;
  AWS Organizations
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ip2FcYnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfovnz2mp7lh0trbogd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ip2FcYnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfovnz2mp7lh0trbogd8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Organizations offers policy-based management for multiple AWS accounts. With Organizations, you can create groups of accounts, automate account creation, apply and manage policies for those groups. Organizations enables you to centrally manage policies across multiple accounts, without requiring custom scripts and manual processes.&lt;/p&gt;

&lt;p&gt;Using AWS Organizations, you can create Service Control Policies (SCPs) that centrally control AWS service use across multiple AWS accounts. You can also use Organizations to help automate the creation of new accounts through APIs. Organizations helps simplify the billing for multiple accounts by enabling you to setup a single payment method for all the accounts in your organization through consolidated billing. AWS Organizations is available to all AWS customers at no additional charge.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;AWS provides services that help you protect your data, accounts, and workloads from unauthorized access. AWS provide encryption and key management and threat detection that continuously monitors and protects your accounts and workloads.&lt;br&gt;
AWS identifies threats by continuously monitoring the network activity and account behavior within your cloud environment.&lt;br&gt;
AWS gives you a comprehensive view of your compliance status and continuously monitors your environment using automated compliance checks based on the AWS best practices and industry standards your organization follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrBTxifk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kqmaghkoz2a35z36q3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrBTxifk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kqmaghkoz2a35z36q3w.png" alt="2021-06-22 (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this guide helps you with the Introduction to Security, Identity, and Compliance with AWS, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;|&lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;.&lt;br&gt;
If you are interested in learning more about AWS Services then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>New PFP (part 2)!</title>
      <author>Calin Baenen</author>
      <pubDate>Fri, 25 Jun 2021 17:14:00 +0000</pubDate>
      <link>https://dev.to/baenencalin/new-pfp-part-2-4h3b</link>
      <guid>https://dev.to/baenencalin/new-pfp-part-2-4h3b</guid>
      <description>&lt;p&gt;This also serves as my coming out as NB (Non-Binary).&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
    <item>
      <title>Full Stack Developer Roadmap 2021</title>
      <author>Hidayt Rahman</author>
      <pubDate>Fri, 25 Jun 2021 17:12:12 +0000</pubDate>
      <link>https://dev.to/hidaytrahman/full-stack-developer-roadmap-2021-92h</link>
      <guid>https://dev.to/hidaytrahman/full-stack-developer-roadmap-2021-92h</guid>
      <description>&lt;p&gt;Most of the newcomers are planning to go for full-stack development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-fullstack-developer"&gt;
  &lt;/a&gt;
  What is a full-stack developer?
&lt;/h2&gt;

&lt;p&gt;A person who can develop the entire application (both client and server).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Master all the techniques involved in a development project.&lt;/li&gt;
&lt;li&gt;Can provide help to all the team members&lt;/li&gt;
&lt;li&gt;Can reduce the cost of the project&lt;/li&gt;
&lt;li&gt;Can reduce the time used for team communication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The solution chosen can be dependent on developer skills&lt;/li&gt;
&lt;li&gt;The solution chosen can be wrong for the project&lt;/li&gt;
&lt;li&gt;Being a full-stack developer is increasingly complex&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;Is designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets and scripting languages such as JavaScript and mandatory for all web developers&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic HTML and DOM&lt;/li&gt;
&lt;li&gt;Form&lt;/li&gt;
&lt;li&gt;HTML5 APIs (Storage)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A beginner can start from w3schools&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;CSS — Styling for web pages (Makeup HTML)&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selectors (class, ID, element, attribute, pseudo)&lt;/li&gt;
&lt;li&gt;Box Model&lt;/li&gt;
&lt;li&gt;Position (absolute, fixed, relative)&lt;/li&gt;
&lt;li&gt;Flex, Grid&lt;/li&gt;
&lt;li&gt;Media Query (screen, print)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;Javascript is the programming language of the Web.&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basics (var, loop, statements)&lt;/li&gt;
&lt;li&gt;Scope&lt;/li&gt;
&lt;li&gt;Closure&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Hoisting&lt;/li&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event handling&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;React is an open-source front-end JavaScript library for building user interfaces or UI components. React can be used as a base in the development of single-page or mobile applications.&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Hooks&lt;/li&gt;
&lt;li&gt;Router&lt;/li&gt;
&lt;li&gt;Data binding&lt;/li&gt;
&lt;li&gt;State Management&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  NodeJS
&lt;/h2&gt;

&lt;p&gt;Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser.&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;File Storage (CRUD)&lt;/li&gt;
&lt;li&gt;OS&lt;/li&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Sync and Async&lt;/li&gt;
&lt;li&gt;Event Loop&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#expressjs"&gt;
  &lt;/a&gt;
  ExpressJS
&lt;/h2&gt;

&lt;p&gt;Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Middleware's&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Authorization&lt;/li&gt;
&lt;li&gt;Crypto&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#mysql"&gt;
  &lt;/a&gt;
  MySQL
&lt;/h2&gt;

&lt;p&gt;MySQL is an open-source relational database management system. Its name is a combination of “My”, the name of co-founder Michael Widenius’s daughter, and “SQL”, the abbreviation for Structured Query Language&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is not necessary but basic knowledge will definitely help you with the relational database management system.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb"&gt;
  &lt;/a&gt;
  MongoDB
&lt;/h2&gt;

&lt;p&gt;MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;Schema&lt;/li&gt;
&lt;li&gt;Aggregation&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#live-projects-and-deployments"&gt;
  &lt;/a&gt;
  Live Projects and Deployments
&lt;/h2&gt;

&lt;p&gt;Woohoo!!!!!!! 🥳 🥳&lt;/p&gt;

&lt;p&gt;You did it….. now it's time to develop something with a real-world solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-ideas"&gt;
  &lt;/a&gt;
  Project Ideas
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Blog (CRUD)&lt;/li&gt;
&lt;li&gt;Todo App&lt;/li&gt;
&lt;li&gt;Chat Bot&lt;/li&gt;
&lt;li&gt;Quiz App&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!!! You’re now a full-stack developer. 😎&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now consider yourself as a one-man army. 🤝&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;All the best &amp;lt;Happy Code /&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

</description>
      <category>fullstack</category>
      <category>devops</category>
      <category>javascript</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>HEIC support for Active Storage</title>
      <author>Mario Alberto Chávez</author>
      <pubDate>Fri, 25 Jun 2021 17:05:57 +0000</pubDate>
      <link>https://dev.to/mario_chavez/heic-support-for-active-storage-p66</link>
      <guid>https://dev.to/mario_chavez/heic-support-for-active-storage-p66</guid>
      <description>&lt;h2&gt;
  &lt;a href="#post-originally-published-at-heic-support-for-active-storage"&gt;
  &lt;/a&gt;
  Post originally published at &lt;a href="https://mariochavez.io/desarrollo/2021/06/22/heic-support-active-storage/"&gt;HEIC support for Active Storage&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Active Storage is the Ruby on Rails solution to work with file attachments on an application. It is not the only solution available, but it comes by default as part of the framework, so there is a chance that it is used on new projects.&lt;/p&gt;

&lt;p&gt;Working with images is as easy as possible; creating variants to display images in different sizes might be the most common use case in a Rails Application. The &lt;a href="https://github.com/janko/image_processing"&gt;image_processing&lt;/a&gt; gem is responsible for abstracting the complexity of creating an image variant, like resizing the image to be 300px on the longest side.&lt;/p&gt;

&lt;p&gt;Underneath the image_processing gem, it uses &lt;a href="https://imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; or &lt;a href="https://libvips.github.io/libvips/"&gt;Vips&lt;/a&gt; to handle image operations and transformations; by default, it uses the first, ImageMagick..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heif-and-heic-image-formats"&gt;
  &lt;/a&gt;
  HEIF and HEIC image formats.
&lt;/h2&gt;

&lt;p&gt;High Efficiency Image File format or HEIF is a container for images and videos that requires half of the storage as JPEG with the same image quality. The HEIC format, which is a variation of HIEF and stands for High Efficiency Image Container, was introduced by Apple with the release of iOS 11 and macOS High Sierra The format is not widely adopted. For example, no browser can display a HEIC image, and only a few Android devices support it.to optimize the space of Apple’s devices.&lt;/p&gt;

&lt;p&gt;The format is not widely adopted. For example, no browser can display a HEIC image, and only a few Android devices support it.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href="https://www.theverge.com/2020/5/20/21262302/ap-test-fail-iphone-photos-glitch-email-college-board-jpeg-heic"&gt;case where High School students failed a test&lt;/a&gt; because their school systems didn’t support the HEIC format.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-active-storage-support-for-heic"&gt;
  &lt;/a&gt;
  Add Active Storage support for HEIC.
&lt;/h2&gt;

&lt;p&gt;At &lt;a href="http://creditar.io"&gt;Creditar.io&lt;/a&gt;, we are working on a service that allows customers to upload a photo of a Mexican ID, then the service validates the ID extracts its information. Everything was fine until we received our first HEIC file; our service could not do anything with the file.&lt;/p&gt;

&lt;p&gt;A quick &lt;a href="https://duckduckgo.com/"&gt;DuckDuckGo&lt;/a&gt; search about this told me what I already knew, no support out of the box for HEIC on Active Storage. Some work needs to be done to enable it. I came across this post, “&lt;a href="https://hashtagjohnt.com/how-to-generage-heic-previews-in-rails-using-activestorage.html"&gt;How to generate HEIC previews in Rails using ActiveStorage&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;The post explains how to create an Active Storage Previewer that converts a HEIC image into a PNG or any other format. It uses Vips as image processing library and describes how to enable Vips support on Heroku.&lt;/p&gt;

&lt;p&gt;ImageMagick is used at &lt;a href="http://creditar.io"&gt;Creditar.io&lt;/a&gt;, and I didn’t want to switch to Vips. With the latest versions of ImageMagick, it can be compiled with HEIC support. If you are on macOS and use Homebrew to install dependencies, version 7.x comes with support for HEIC.&lt;/p&gt;

&lt;p&gt;The changes in the previewer to work with ImageMagick are very simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/previewers/heic_previewer.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeicPreviewer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveStorage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Previewer&lt;/span&gt;
  &lt;span class="no"&gt;CONTENT_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"image/heic"&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;accept?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;CONTENT_TYPE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;minimagick_exists?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;minimagick_exists?&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@minimagick_exists&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@minimagick_exists&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;

      &lt;span class="vi"&gt;@minimagick_exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ImageProcessing&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MiniMagick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; :: MiniMagick is not installed"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@minimagick_exists&lt;/span&gt;

      &lt;span class="vi"&gt;@minimagick_exists&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;download_blob_to_tempfile&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ImageProcessing&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MiniMagick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"png"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;base&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The previewer needs to be registered with Active Storage via an initializer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/initializers/active_storage.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;active_storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;HeicPreviewer&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;active_storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;variable_content_types&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"image/heic"&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;active_storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;variable_content_types&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"image/heif"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we must tell Active Storage that HEIC/HEIF content types are supported. The test for this previewer is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# test/previewers/heic_previewer_test.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"test_helper"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeicPreviewerTest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TestCase&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActiveStorageBlob&lt;/span&gt;

  &lt;span class="no"&gt;CONTENT_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"image/heic"&lt;/span&gt;

  &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"it previews a heic image"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="s2"&gt;"it does not run on CI due to missing support for HEIC"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"CI"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;

    &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_file_blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="s2"&gt;"heic-image-file.heic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="no"&gt;CONTENT_TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;refute_nil&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;HeicPreviewer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="no"&gt;HeicPreviewer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;attachable&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;assert_equal&lt;/span&gt; &lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attachable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:content_type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;create_file_blog&lt;/code&gt; method is a helper that I use to create an Active Storage blob object from a file. The test is simple; it tests that previewing or downloading a file get converted to PNG.&lt;/p&gt;

&lt;p&gt;Running this test on GitHub’s CI was impossible because the ImageMagick version it provides comes without HEIC support. I tried to download and compile ImageMagick in the pipeline, but it takes too much time, so I decided to skip this test there. It works on my machine(tm), so what can go wrong, right?&lt;/p&gt;

&lt;p&gt;To deploy these changes, Heroku needs a buildpack with an ImageMagick binary compiled with HEIC. There are a few of those in Heroku's marketplace, so I settle for &lt;a href="https://elements.heroku.com/buildpacks/himamainc/heroku-buildpack-imagemagick-heif"&gt;this one&lt;/a&gt;. It needs to be installed before deploying the code changes. Installation is simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;buildpacks&lt;/span&gt;&lt;span class="ss"&gt;:add&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="ss"&gt;:/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="no"&gt;HiMamaInc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heroku&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;buildpack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imagemagick&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;heif&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="ss"&gt;:/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="no"&gt;HiMamaInc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;heroku&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;buildpack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;imagemagick&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;heif&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After these changes in the code, customers can take a picture with their iPhone and send it to our service to validate their ID, no need to worry if they had HEIC enable on their phones. The service displays the thumbnail and sends a png version to the Python ML backend to be processed.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>heic</category>
      <category>apple</category>
      <category>activestorage</category>
    </item>
    <item>
      <title>Learning Python - Week 3</title>
      <author>EvanRPavone</author>
      <pubDate>Fri, 25 Jun 2021 17:02:28 +0000</pubDate>
      <link>https://dev.to/evanrpavone/learning-python-week-4-7i8</link>
      <guid>https://dev.to/evanrpavone/learning-python-week-4-7i8</guid>
      <description>&lt;p&gt;This week I continued to learn the control flow in Python from last week. What I want to focus on in this post is accepting the input from a user. Having a user input information is very easy, all you need is the input function and as the argument for the function you pass in the text or information that you want to see in the console so that the user knows what information they need to put. Here is an example of how to use the input function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = input('Enter your name: ')
print("Hello there " + name.strip()) # strip removes any white spaces

age = input('Enter your age: ') # input returns a string not an integer
print(name.strip() + "... you are " + str(age.strip()) + " years old")
print(name.strip() + "... you will be " + str(5 + int(age)) + " in 5 years")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name variable accepts an input of name and the age variable accepts the input of your age. When you run the program it will say:&lt;br&gt;
&lt;code&gt;Enter your name:&lt;/code&gt;&lt;br&gt;
You will enter your name and press enter. The strip function at the end is a way to remove the white space meaning if you happen to add a lot of spaces before you enter your name, it will remove it. Next is the age, when you put your age in it is not an integer, it is a string. So when you press enter it will say &lt;br&gt;
&lt;code&gt;[your name] you are [your age] years old&lt;/code&gt; and then it will say &lt;code&gt;[your name], you will be [add 5 to your age] in five years&lt;/code&gt;.&lt;br&gt;
This was a quick practice and this is what I really like to do when it comes to programming, having a user experience. I am sure I will be able to have a more advanced way of having a user experience in the future but for now this is what I know. I know this is a short post but it was for a good reason. Week 4 will be a whole new section focusing on packages, modules and object oriented programming. It’s still a fun time learning this and I will talk to you guys next week!&lt;/p&gt;

</description>
      <category>python</category>
      <category>learning</category>
    </item>
    <item>
      <title>AJAX file upload in chunks using Django, with a progress bar.</title>
      <author>Shubham Kshatriya</author>
      <pubDate>Fri, 25 Jun 2021 16:58:19 +0000</pubDate>
      <link>https://dev.to/shubhamkshatriya25/ajax-file-upload-in-chunks-using-django-with-a-progress-bar-4nhi</link>
      <guid>https://dev.to/shubhamkshatriya25/ajax-file-upload-in-chunks-using-django-with-a-progress-bar-4nhi</guid>
      <description>&lt;p&gt;Hello!!!&lt;br&gt;
There are lot of methods and technologies who allows to create a file uploader. Django also allows you to create a server where you can upload any type of file but the problem with that is Django will upload the file as a whole and reload the page after performing an upload which sometimes forces a user to do only singular tasks. This won't bother if the file size is small but things get tricky with the increasing file size.&lt;/p&gt;

&lt;p&gt;The key point which makes a website flexible is allowing users to do multiple tasks simultaneously. Imagine you are uploading a video whose size is 1 GB and until the video is uploaded you can't do anything. How painful! The idea of uploading file as a whole turns out to be really bad when we are dealing with files whose size are in GB's. There is a concept of uploading files in chunks which can be very handy here. A &lt;strong&gt;chunk&lt;/strong&gt; is an instance of file at a particular time. Uploading files in chunks requires breaking your file into smaller chunks and uploading each of them synchronously. &lt;/p&gt;

&lt;p&gt;In this tutorial, we will see how can we upload a file in chunks to a Django server using AJAX request and response cycle. Without wasting any time, let's jump to the interesting part.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-our-project"&gt;
  &lt;/a&gt;
  Setting up our project
&lt;/h3&gt;

&lt;p&gt;( you can skip this part if you already have a project setup ready)&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creating-a-new-django-project"&gt;
  &lt;/a&gt;
  Creating a new Django project
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject fileUploader
cd fileUploader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#running-our-project"&gt;
  &lt;/a&gt;
  Running our project
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-new-app-inside-our-project"&gt;
  &lt;/a&gt;
  Creating a new app inside our project
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py startapp uploader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's quickly configure our code to include uploader app into our project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create urls.py file in uploader&lt;/li&gt;
&lt;li&gt;Configure project level urls.py file to include the urls of this file
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('fileUploader/', include('uploader.urls')),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create three folders namely static, media and templates under fileUploader.&lt;/li&gt;
&lt;li&gt;Create two folders namely css and js inside static folder.&lt;/li&gt;
&lt;li&gt;Create a file named index.html inside templates folder&lt;/li&gt;
&lt;li&gt;Create a file named app.css inside css folder&lt;/li&gt;
&lt;li&gt;Create a file named app.js inside js folder&lt;/li&gt;
&lt;li&gt;Configure project level settings.py file to include this changes
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [
    ...
    'uploader',
]

TEMPLATES = [
    {
        ...
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        ...
    }
]

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With this we are done with the setup. Let's move to the actual implementation.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-ui"&gt;
  &lt;/a&gt;
  Setting up UI
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h4&gt;

&lt;p&gt;This is the HTML file which will contain the UI. I have kept this really simple, you can style the way you like. As you may have noticed, we will use bootstrap 4 components and some custom CSS. PS: Make sure to include csrf_token in the form :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% load static %}
&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
        integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
        crossorigin="anonymous"&amp;gt;
    &amp;lt;title&amp;gt;AJAX + DJANGO File Uploader&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="{% static 'css/app.css' %}"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="col-lg-6 col-md-6" style="margin: 0 auto; display: block; margin-top: 100px;"&amp;gt;
        &amp;lt;form enctype="multipart/form-data" method="POST" action=""&amp;gt;
            {% csrf_token %}
            &amp;lt;div class="form-group"&amp;gt;
                &amp;lt;label&amp;gt;Select file to upload.&amp;lt;/label&amp;gt;
                &amp;lt;input type="file" class="form-control" id="fileupload" placeholder="Select file"&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input type="submit" value="Upload" id="submit" class="btn btn-success"&amp;gt;     
        &amp;lt;/form&amp;gt;
        &amp;lt;div id="uploaded_files"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="{% static 'js/app.js' %}"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#appcss"&gt;
  &lt;/a&gt;
  app.css
&lt;/h4&gt;

&lt;p&gt;Let's add some of our own CSS to make our UI more aligned. We are also adding styles for the progress bar which will appear dynamically while uploading the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#myProgress {
    width: 100%;
}
#uploaded_files {
    margin-top: 25px;
    display: flex;
}
label {
    font-weight: bold;
}
.file-icon i {
    font-size: 60px;
    color: rgb(0, 0, 0);
}
.file-details {
    margin-top: -2px;
    padding-left: 10px;
    width: 100%;
}
.file-details p {
    margin-bottom: -7px;
}
small {
    margin-top: 0;
    color: black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how our UI will appear&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoxEfgzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uz6bp440q4harxi2bzo1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoxEfgzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uz6bp440q4harxi2bzo1.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#appjs"&gt;
  &lt;/a&gt;
  app.js
&lt;/h4&gt;

&lt;p&gt;So, this is the heart of our code. I have used a objected oriented approach over here, the functional approach would work fine as well with little changes. &lt;/p&gt;

&lt;p&gt;There is an attribute called max_length which indicates the maximum size of the chunk that can be uploaded at a time. There is a method upload() which we will be called when the click event of button is fired.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class FileUpload {
    constructor(input) {
        this.input = input
        this.max_length = 1024 * 1024 * 10; // 10 mb
    }

    upload() {
        this.create_progress_bar();
        this.initFileUpload();
    }


(function ($) {
    $('#submit').on('click', (event) =&amp;gt; {
        event.preventDefault();
        var uploader = new FileUpload(document.querySelector('#fileupload'))
        uploader.upload();
    });
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#initfileupload-method"&gt;
  &lt;/a&gt;
  initFileUpload() method
&lt;/h4&gt;

&lt;p&gt;Following is the list of variables which are used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;existingPath - null if file can be uploaded as a whole or contains the path at which the previous chunk was uploaded&lt;/li&gt;
&lt;li&gt;nextChunk - next part of file if exists&lt;/li&gt;
&lt;li&gt;currentChunk - current part of file&lt;/li&gt;
&lt;li&gt;uploadedChunk - aggregation of all chunks uploaded so far&lt;/li&gt;
&lt;li&gt;formData - An object to hold the data that will be sent to server.&lt;/li&gt;
&lt;li&gt;end - whether an upload is ended or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we create an instance of FormData and append all the values into it that we want to send to the server. Then we create an instance of AJAX using $.ajax() which comes with lot of properties. Here we have used &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xhr() - to compute the amount of file that has been uploaded&lt;/li&gt;
&lt;li&gt;error() - called when error occurs while doing some action&lt;/li&gt;
&lt;li&gt;success() - called when action is successfully completed&lt;/li&gt;
&lt;li&gt;url - the url at which the request will be made&lt;/li&gt;
&lt;li&gt;type - request method&lt;/li&gt;
&lt;li&gt;dataType - the type in which we pass the data&lt;/li&gt;
&lt;li&gt;data - actual data that will be passed
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;upload_file(start, path) {
        var end;
        var self = this;
        var existingPath = path;
        var formData = new FormData();
        var nextChunk = start + this.max_length + 1;
        var currentChunk = this.file.slice(start, nextChunk);
        var uploadedChunk = start + currentChunk.size
        if (uploadedChunk &amp;gt;= this.file.size) {
            end = 1;
        } else {
            end = 0;
        }
        formData.append('file', currentChunk);
        formData.append('filename', this.file.name);
        formData.append('end', end);
        formData.append('existingPath', existingPath);
        formData.append('nextSlice', nextChunk);
        $('.filename').text(this.file.name)
        $('.textbox').text("Uploading file")
        $.ajaxSetup({
        // make sure to send the header
            headers: {
                "X-CSRFToken": document.querySelector('[name=csrfmiddlewaretoken]').value,
            }
        });
        $.ajax({
            xhr: function () {
                var xhr = new XMLHttpRequest();
                xhr.upload.addEventListener('progress', function (e) {
                    if (e.lengthComputable) {
                        if (self.file.size &amp;lt; self.max_length) {
                            var percent = Math.round((e.loaded / e.total) * 100);
                        } else {
                            var percent = Math.round((uploadedChunk / self.file.size) * 100);
                        }
                        $('.progress-bar').css('width', percent + '%')
                        $('.progress-bar').text(percent + '%')
                    }
                });
                return xhr;
            },

            url: '/fileUploader/',
            type: 'POST',
            dataType: 'json',
            cache: false,
            processData: false,
            contentType: false,
            data: formData,
            error: function (xhr) {
                alert(xhr.statusText);
            },
            success: function (res) {
                if (nextChunk &amp;lt; self.file.size) {
                    // upload file in chunks
                    existingPath = res.existingPath
                    self.upload_file(nextChunk, existingPath);
                } else {
                    // upload complete
                    $('.textbox').text(res.data);
                    alert(res.data)
                }
            }
        });
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#createprogressbar-method"&gt;
  &lt;/a&gt;
  create_progress_bar() method
&lt;/h4&gt;

&lt;p&gt;Here we create a bootstrap progress bar which will be shown while uploading a file. It's always good that user can visualize how much progress has been made.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;create_progress_bar() {
        var progress = `&amp;lt;div class="file-icon"&amp;gt;
                            &amp;lt;i class="fa fa-file-o" aria-hidden="true"&amp;gt;&amp;lt;/i&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class="file-details"&amp;gt;
                            &amp;lt;p class="filename"&amp;gt;&amp;lt;/p&amp;gt;
                            &amp;lt;small class="textbox"&amp;gt;&amp;lt;/small&amp;gt;
                            &amp;lt;div class="progress" style="margin-top: 5px;"&amp;gt;
                                &amp;lt;div class="progress-bar bg-success" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%"&amp;gt;
                                &amp;lt;/div&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;`
        document.getElementById('uploaded_files').innerHTML = progress
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this we are done with the front end. Now let's build a model and a server to try this code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-server-uploader"&gt;
  &lt;/a&gt;
  Setting up server (uploader)
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#urlspy"&gt;
  &lt;/a&gt;
  urls.py
&lt;/h4&gt;

&lt;p&gt;The url where the request will be made&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;urlpatterns = [
    path('', views.index, name='index'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#viewspy"&gt;
  &lt;/a&gt;
  views.py
&lt;/h4&gt;

&lt;p&gt;The request made to the server are handled by function defined in views.py. When we get a POST request, we retrieve the data and create a new file or append to an existing file inside the media folder and send the path to which the file was stored as a response. Notice that we are storing file in binary mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.shortcuts import render
from django.http import JsonResponse
import os
from .models import File

def index(request):
    if request.method == 'POST':  
        file = request.FILES['file'].read()
        fileName= request.POST['filename']
        existingPath = request.POST['existingPath']
        end = request.POST['end']
        nextSlice = request.POST['nextSlice']

        if file=="" or fileName=="" or existingPath=="" or end=="" or nextSlice=="":
            res = JsonResponse({'data':'Invalid Request'})
            return res
        else:
            if existingPath == 'null':
                path = 'media/' + fileName
                with open(path, 'wb+') as destination: 
                    destination.write(file)
                FileFolder = File()
                FileFolder.existingPath = fileName
                FileFolder.eof = end
                FileFolder.name = fileName
                FileFolder.save()
                if int(end):
                    res = JsonResponse({'data':'Uploaded Successfully','existingPath': fileName})
                else:
                    res = JsonResponse({'existingPath': fileName})
                return res

            else:
                path = 'media/' + existingPath
                model_id = File.objects.get(existingPath=existingPath)
                if model_id.name == fileName:
                    if not model_id.eof:
                        with open(path, 'ab+') as destination: 
                            destination.write(file)
                        if int(end):
                            model_id.eof = int(end)
                            model_id.save()
                            res = JsonResponse({'data':'Uploaded Successfully','existingPath':model_id.existingPath})
                        else:
                            res = JsonResponse({'existingPath':model_id.existingPath})    
                        return res
                    else:
                        res = JsonResponse({'data':'EOF found. Invalid request'})
                        return res
                else:
                    res = JsonResponse({'data':'No such file exists in the existingPath'})
                    return res
    return render(request, 'index.html')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#modelspy"&gt;
  &lt;/a&gt;
  models.py
&lt;/h4&gt;

&lt;p&gt;We cannot store data until we have a model. So here is how we can make one for this uploader&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class File(models.Model):
    existingPath = models.CharField(unique=True, max_length=100)
    name = models.CharField(max_length=50)
    eof = models.BooleanField()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run these commands in the terminal to migrate your model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py makemigrations
python manage.py  migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are all set to test our application. Go to your browser and run the serving URL, select a file and click on upload. You can see the beautiful thing that you just built. I guess the progress bar filled very quickly right, so this time try a larger file ( any size you may want, it won't collapse) and see how the file gets uploaded in chunks.&lt;/p&gt;

&lt;p&gt;This are few snapshots of the output.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIEptcHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbbuhr3o4cwqmt7nmkys.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIEptcHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbbuhr3o4cwqmt7nmkys.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_7gj3jgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mziq1o7e51zmfs5xl7xa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_7gj3jgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mziq1o7e51zmfs5xl7xa.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this could help you to learn something new today. Thank you for your precious time.&lt;/p&gt;

&lt;p&gt;Adios!&lt;/p&gt;

</description>
      <category>django</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Animating Angular’s *ngIf and *ngFor</title>
      <author>ng-conf</author>
      <pubDate>Fri, 25 Jun 2021 16:46:55 +0000</pubDate>
      <link>https://dev.to/ngconf/animating-angular-s-ngif-and-ngfor-5e12</link>
      <guid>https://dev.to/ngconf/animating-angular-s-ngif-and-ngfor-5e12</guid>
      <description>&lt;p&gt;Jared Youtsey | ng-conf | May 2019&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*ngIf&lt;/code&gt; and &lt;code&gt;*ngFor&lt;/code&gt; will remove elements from the DOM. There isn’t a CSS solution for animating a non-existing element in the DOM. But Angular provides us with a simple solution.&lt;/p&gt;

&lt;p&gt;For purposes of brevity, wherever I refer to &lt;code&gt;*ngIf&lt;/code&gt; it is equally applicable to &lt;code&gt;*ngFor&lt;/code&gt;. The complete, working code can be downloaded &lt;a href="https://github.com/fivedice/ng-ngif-animations"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start with the default application generated by the CLI and just modify the nice Angular logo in and out of the view based on a button we add.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new ngifAnimation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You won’t need routing and can select SCSS for the styling.&lt;/p&gt;

&lt;p&gt;Let’s add the button we want to use to toggle our &lt;code&gt;*ngIf&lt;/code&gt; on the image. Open &lt;code&gt;app.component.html&lt;/code&gt; and add a simple button: (this is the default HTML)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!--The content below is only a placeholder and can be replaced.--
&amp;lt;div style="text-align:center"&amp;gt;
&amp;lt;h1&amp;gt;Welcome to {{ title }}!&amp;lt;/h1&amp;gt;
&amp;lt;button (click)="onClick()"&amp;gt;Toggle Image&amp;lt;/button&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s add the &lt;code&gt;onClick()&lt;/code&gt; method to the class that toggles a public variable &lt;code&gt;showImage&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class AppComponent {
  title = 'ngifAnimation';  
  showImage = false;
  onClick() {
    this.showImage = !this.showImage;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s add the &lt;code&gt;*ngIf&lt;/code&gt; in the template on the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img
  *ngIf="showImage"
  width="300"
  alt="Angular Logo"
  src="..."
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s add a little bit of CSS to force the button to stay put when the image pops in and out: (&lt;code&gt;app.component.scss&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button {
  display: block;
  margin: 0 auto;
  clear: both;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the app now you’ll be able to click the button and the image will jarringly pop in and out of the view. If you check your developer tools, you’ll find that the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag is popping in and out of the DOM. When &lt;code&gt;showImage&lt;/code&gt; is false the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag isn’t even present. This is where our inability to use CSS comes into play. It’s a terrible user experience to have elements, especially large ones, pop in and out without some transition. Let’s make it grow and fade in and out in a pleasing manner!&lt;/p&gt;

&lt;p&gt;To handle animations (for way more reasons than just the one covered in this article) Angular provides the &lt;code&gt;BrowserAnimationsModule&lt;/code&gt;. As of the latest Visual Studio Code, though, it doesn’t want to auto-import this module for you if you add it to your &lt;code&gt;AppModule&lt;/code&gt; imports. It’s hidden in &lt;code&gt;@angular/platform-browser/animations&lt;/code&gt;. Let’s add the import manually and add it to the module’s imports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, BrowserAnimationsModule],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we’re ready to add our Angular animations! But where? We’ll approach this in the simplest manner. But be aware that we’re just scratching the surface of the power of Angular animation. It’s worth learning much more about. The simple approach is directly in the affected component. In our case, that’s &lt;code&gt;app.component.ts's&lt;/code&gt; &lt;code&gt;@Component&lt;/code&gt; directive. Here is the whole thing, but don’t worry, we’ll break it down and explain it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { trigger, state, style, animate, transition } from '@angular/animations';
@Component({
  ...,
  animations: [
    trigger(
      'inOutAnimation', 
      [
        transition(
          ':enter', 
          [
            style({ height: 0, opacity: 0 }),
            animate('1s ease-out', 
                    style({ height: 300, opacity: 1 }))
          ]
        ),
        transition(
          ':leave', 
          [
            style({ height: 300, opacity: 1 }),
            animate('1s ease-in', 
                    style({ height: 0, opacity: 0 }))
          ]
        )
      ]
    )
  ]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whew! That’s a lot and it’s not terribly obvious without reading through it carefully. Let’s break it down, bit by bit.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;animations: []&lt;/code&gt; is an array of things we want to happen or state definitions. In this case we just want to &lt;code&gt;trigger&lt;/code&gt; an animation called &lt;code&gt;inOutAnimation&lt;/code&gt;. You can name this what you like. It should be descriptive for what it accomplishes or what it should consistently apply to. In our case we are animating an image in and out of the view.&lt;/p&gt;

&lt;p&gt;Then, we give the &lt;code&gt;trigger&lt;/code&gt; a set of states and/or transitions. We only need two specific transitions to occur that are related to &lt;code&gt;*ngIf&lt;/code&gt;: &lt;code&gt;:enter&lt;/code&gt; and &lt;code&gt;:leave&lt;/code&gt;. These are the states that CSS just doesn’t give us. &lt;code&gt;:enter&lt;/code&gt; is when a DOM element is being added, and &lt;code&gt;:leave&lt;/code&gt; is when a DOM element is being removed.&lt;/p&gt;

&lt;p&gt;When we want the image to &lt;code&gt;:enter&lt;/code&gt; we are starting with the style of &lt;code&gt;height: 0, opacity: 0&lt;/code&gt;. It’s basically invisible to start with. When it’s done we would like it to be 300 pixels tall and be completely opaque.&lt;/p&gt;

&lt;p&gt;This is where the &lt;code&gt;animate&lt;/code&gt; instruction comes in. We are going to animate over 1) a period of time 2) with a particular easing mechanism 3) to a new style. 1 and 2 are combined in the first string-based instruction, &lt;code&gt;0.3s ease-out&lt;/code&gt;. This means that we are animating to the new style over 0.3 seconds, and we are easing out, or coming to a gentle stop rather than a sudden one. 3 specifies what the end styling should be. In our case that’s 300 pixels high and completely opaque.&lt;/p&gt;

&lt;p&gt;If you run this now you’ll find that nothing has changed. We now need to apply the animation to the element that is being added/removed from the DOM. In this case, it’s our &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag that has the &lt;code&gt;*ngIf&lt;/code&gt; directive on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img
  *ngIf="showImage"
  [@inOutAnimation]
  width="300"
  alt="Angular Logo"
  src="..."
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the name of the trigger to bind the animation to the template element.&lt;/p&gt;

&lt;p&gt;If you run it now, you can click the button and the image zoom/fades in. Click it again and it’ll shrink/fade out! Voila!&lt;/p&gt;

&lt;p&gt;Personally, I find the syntax of Angular animations somewhat difficult. It’s non-obvious and, if you’re not doing it every day, you’re probably going to have to re-learn this a few times. And the template syntax works with or without the &lt;code&gt;[]&lt;/code&gt;'s, which makes me scratch my head a bit.&lt;/p&gt;

&lt;p&gt;Maybe the Angular team will give us a ReactiveAnimationsModule someday that makes animation a bit easier to work with, like ReactiveFormsModule did for forms? One can hope.&lt;/p&gt;

&lt;p&gt;This is just scratching the surface of what Angular animations are capable of. Very complex transforms/transitions are possible and can be carefully coordinated in ways that CSS just can’t guarantee.&lt;/p&gt;

&lt;p&gt;As a side note, if you’re worried about performance vs pure CSS animations, this is a quote from the &lt;a href="https://angular.io/guide/animations"&gt;Angular docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Angular’s animation system lets you build animations that run with the same kind of native performance found in pure CSS animations. You can also tightly integrate your animation logic with the rest of your application code, for ease of control.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’ve found this useful, I’d appreciate a few claps for this article.&lt;/p&gt;

&lt;p&gt;If you’d like to learn more about Angular in a fun environment while hanging out with the movers and shakers of the Angular world, snag a ticket to &lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf&lt;/a&gt; and join us for the best Angular conference in the US.&lt;/p&gt;

&lt;p&gt;Image by &lt;a href="https://pixabay.com/users/piro4d-2707530/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=2137333"&gt;PIRO4D&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=2137333"&gt;Pixabay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more Angular goodness, be sure to check out the latest episode of &lt;a href="https://www.spreaker.com/show/angular-show"&gt;The Angular Show podcast&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ngconf-join-us-for-the-reliable-web-summit"&gt;
  &lt;/a&gt;
  ng-conf: Join us for the Reliable Web Summit
&lt;/h2&gt;

&lt;p&gt;Come learn from community members and leaders the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests. Powered by ng-conf, join us for the Reliable Web Summit this August 26th &amp;amp; 27th, 2021.&lt;br&gt;
&lt;a href="https://reliablewebsummit.com/"&gt;https://reliablewebsummit.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>animation</category>
      <category>css</category>
    </item>
  </channel>
</rss>
