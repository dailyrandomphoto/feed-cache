<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Project to Master in Python for Beginners</title>
      <author>Ujjwal</author>
      <pubDate>Mon, 23 Aug 2021 09:40:04 +0000</pubDate>
      <link>https://dev.to/ugsep/5-project-to-master-in-python-for-beginners-4blm</link>
      <guid>https://dev.to/ugsep/5-project-to-master-in-python-for-beginners-4blm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As we all know that now a days &lt;strong&gt;Python&lt;/strong&gt; is the one of the most &lt;em&gt;demanding&lt;/em&gt; language in market. A &lt;strong&gt;Programmer&lt;/strong&gt; should learn python to get job easily. So for that you need to enhance your python skills to a good level so you may hire buy someone. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this blog I will told you about &lt;em&gt;5 Project to Master in Python for Beginners&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-data-structure-and-algorithms-visualizer"&gt;
  &lt;/a&gt;
  1. Data Structure and Algorithms Visualizer
&lt;/h2&gt;

&lt;p&gt;As we know that many people face difficulty while learning DSA at beginning. So you create create Stack, Queue, Linked List, BST, Graph, Sort and Search any one of the visualizer which helps you understand the working on the particular Data Structure. As a beginner it is a challenging project for you and after doing this you understand that how a project is developed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-paint-application-in-python"&gt;
  &lt;/a&gt;
  2. Paint Application in Python
&lt;/h2&gt;

&lt;p&gt;Now After doing the #1st Project you have some experience about that how to create project. So now it's time to move one more step forward. Now you should create a Paint application which must contain minimum 10+ 2d shapes,3+ 3d Shapes Fill, Text, Change color, Save as, Open, Pencil, Undo, Redo, Cut, Copy and Paste.&lt;br&gt;
You can add some more feature by your own. This Project help you to enhance your plotting skills + math.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ludo"&gt;
  &lt;/a&gt;
  3. Ludo
&lt;/h2&gt;

&lt;p&gt;As you have gained some more experience and now it time to create your first game. So Ludo is the best game to create in Python. You should create play with friend or play with computer 2,3,4 player&lt;br&gt;
Now this is a little bit difficult to create it because it needs accurate plotting and movement. But after completing this game you will feel proud because it's not as easy as the top two project were.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-typing-speed-tester"&gt;
  &lt;/a&gt;
  4. Typing Speed Tester
&lt;/h2&gt;

&lt;p&gt;Now you need to create a typing speed tester which gives you some paragraph and x min you need to type the each character as written &lt;br&gt;
and at the end it will show you the result. You can add some typing games which helps you increase typing speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-chatbot"&gt;
  &lt;/a&gt;
  5. Chatbot
&lt;/h2&gt;

&lt;p&gt;Now this is the last project so It's level is insane you need to create a bot which communicate with humans. This app is very useful for you and makes your life easy. To create it you need a lot of knowledge&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e. Google assistant, Jarvis, Alexa&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;After learning this all you have a great knowledge about Python Library and you can apply for jobs too.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Start a Blog with Vim</title>
      <author>PythonBasics</author>
      <pubDate>Mon, 23 Aug 2021 09:29:44 +0000</pubDate>
      <link>https://dev.to/basicspython/how-to-start-a-blog-with-vim-1ikj</link>
      <guid>https://dev.to/basicspython/how-to-start-a-blog-with-vim-1ikj</guid>
      <description>&lt;p&gt;If Web technologies got out of the way, what would the Web be?&lt;/p&gt;

&lt;p&gt;These days JavaScript frameworks are all the rage. Long term though, will this framework be around?&lt;/p&gt;

&lt;p&gt;The answer is probably no (The Brutal Lifecycle of JavaScript Frameworks).  JavaScript frameworks come and go, who is still using ExtJS or MooTools? &lt;/p&gt;

&lt;p&gt;For a blog you want technology that lasts and you don't want your blog to turn into work. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4p41RB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhlexdnd2tfpej98q5nz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4p41RB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhlexdnd2tfpej98q5nz.jpeg" alt="tech deprecated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use WordPress you'll quickly find it starts to become work: installing updates, updating the server, your plugins will be deprecated, (frameworks) plugins use will stop to be supported etc &lt;/p&gt;

&lt;p&gt;But what will be around in the next 10 years? Linux and bash scripting and plain HTML files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-blog-with-vim"&gt;
  &lt;/a&gt;
  Create blog with vim
&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href="https://github.com/cfenollosa/bashblog"&gt;bashblog&lt;/a&gt;, a simple bash script that converts Markdown to HTML.&lt;/p&gt;

&lt;p&gt;Simply download the script then edit your post in files. And finally upload your html files to your server.&lt;/p&gt;

&lt;p&gt;I recommend using vim for text editing because it's a very powerful editor. This is an editor often used by &lt;a href="https://bsdnerds.org/what-is-linux-shell/"&gt;Linux&lt;/a&gt; users.&lt;/p&gt;

&lt;p&gt;To create your first post, first make the script executable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chmod +x bb.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./bb.sh post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be aware that vim has a steep learning curve. For now know that you can use &lt;code&gt;ZQ&lt;/code&gt; to quit, learn vim first. There's a vim tutorial at &lt;a href="https://vim.is/"&gt;vim.is&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once you wrote your posts, upload them to your server. The neat thing is that this solution will work 10 years from now - zero work ;-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZUZ8UA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0szvmxjoq5adhe6zxlp8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZUZ8UA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0szvmxjoq5adhe6zxlp8.png" alt="blogging in vim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another advantage besides that this will work for the next 10 (or 50?) years is the security benefit. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There is no database, the database cannot be hacked. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no login screen, nobody can hack your login (as opposed to the WordPress /wp-admin/ that's always under constant attack).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Practical tips for constructing Object diagrams from applications.</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 23 Aug 2021 09:26:27 +0000</pubDate>
      <link>https://dev.to/aatmaj/practical-tips-for-constructing-object-diagrams-from-applications-4k85</link>
      <guid>https://dev.to/aatmaj/practical-tips-for-constructing-object-diagrams-from-applications-4k85</guid>
      <description>&lt;h1&gt;
  &lt;a href="#practical-tips-for-constructing-object-diagrams-from-applications"&gt;
  &lt;/a&gt;
  Practical tips for constructing Object diagrams from applications.
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Don't begin constructing an object by merely jotting down classes and inheritance. &lt;strong&gt;Understand the problem first.&lt;/strong&gt; The content of an object model is driven by it's relevance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keep the model as simple as possible.&lt;/strong&gt; Avoid needless complications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Carefully choose names.&lt;/strong&gt; Choosing the right name is one of the most difficult step in object oriented design. Choosing the right names not only avoids confusion but also improves the clarity in the program structure. Names should be descriptive, crisp, and unambiguous. Names should not be biased with only a certain aspect of the object, but rather have an comprehensive way of approach.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Try to avoid too deep nested generalizations&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Don't be surprised if your object diagram requires revision. &lt;strong&gt;Object models often require multiple iterations&lt;/strong&gt; to clarify names, repair errors, add details and correctly capture structural constraints.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Try to get others review your model&lt;/strong&gt;. Object models can be a focal point for stimulating the involvement of others.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Always document your object models.&lt;/strong&gt; The object diagrams specify the structure of a model but cannot describe the reasons behind it. The written explaination guides the reader through the model and explains the reason behind it. The written explaination guides the reader through the model and explains the subtle reasons why the model was structured in the particular way. The written explaination clarifies the meaning of the names in the model and should convey the reason for each class and relationship.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Adapted from the book &lt;a href="https://www.amazon.com/Object-Oriented-Modeling-Design-Uml/dp/8120330161"&gt;Object - Oriented Modeling and Design&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>design</category>
      <category>oop</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Most used git commands</title>
      <author>Ritik Patel</author>
      <pubDate>Mon, 23 Aug 2021 08:57:21 +0000</pubDate>
      <link>https://dev.to/ritik_patel05/most-used-git-commands-9bp</link>
      <guid>https://dev.to/ritik_patel05/most-used-git-commands-9bp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-git-remote"&gt;
  &lt;/a&gt;
  1. git remote
&lt;/h1&gt;

&lt;p&gt;To start working on a repository, you need to either clone the repository or add remote repository. Cloning automatically adds 'origin' as your remote.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add &amp;lt;remote_name&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example: Consider I want to start working on react repository,&lt;br&gt;
I would type the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add ritik https://github.com/facebook/react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To check whether your remote repository is added or not,&lt;br&gt;
You can use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#2-git-checkout"&gt;
  &lt;/a&gt;
  2. git checkout
&lt;/h1&gt;

&lt;p&gt;After setting up the remote, you would like to start working on the issue #70. So, you should make a branch for the same.&lt;/p&gt;

&lt;p&gt;So, to create a new branch and switch to it at the same time,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example,&lt;br&gt;
&lt;code&gt;git checkout -b issue#70-fix-button-styling&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note:&lt;br&gt;
&lt;code&gt;git checkout -b&lt;/code&gt;&lt;br&gt;
is shorthand for&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch issue#70-fix-button-styling&lt;br&gt;
   git checkout issue#70-fix-button-styling&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-git-pull"&gt;
  &lt;/a&gt;
  3. git pull
&lt;/h1&gt;

&lt;p&gt;While working on a branch, it might be the case that one of the collaborators has made changes to your branch, or there are some new changes in the master branch that you want your branch to have. You can do by,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull &amp;lt;remote_name&amp;gt; &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example,&lt;br&gt;
&lt;code&gt;git pull ritik issue#70-fix-button-styling&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#4-git-status"&gt;
  &lt;/a&gt;
  4. git status
&lt;/h1&gt;

&lt;p&gt;The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven’t, and which files aren’t being tracked by Git. Status output does not show you any information regarding the committed project history.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The output will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# On branch issue#70-fix-button-styling
# Changes to be committed:
# (use "git reset HEAD &amp;lt;file&amp;gt;..." to unstage)
#
#modified: hello.js
#
# Changes not staged for commit:
# (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
# (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)
#
#modified: index.html
#
# Untracked files:
# (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
#
#index.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-git-add"&gt;
  &lt;/a&gt;
  5. git add
&lt;/h1&gt;

&lt;p&gt;After making a change, if you want to add an untracked file to the staging area for next commit. git add lets you do that.&lt;/p&gt;

&lt;p&gt;Lets say you made changes to index.css file and want to add this file for commit. First we need to add it from untracked files to the tracked files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add &amp;lt;filePath1&amp;gt; &amp;lt;filePath2&amp;gt; &amp;lt;filePath3&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(Space separated filenames to add each file to staging area)&lt;/p&gt;

&lt;p&gt;example,&lt;br&gt;
&lt;code&gt;git add index.css&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-git-commit"&gt;
  &lt;/a&gt;
  6. git commit
&lt;/h1&gt;

&lt;p&gt;To commit all the files that are in staging area, i.e, all the tracked files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m &amp;lt;commit_message&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "style: fixed button colors"&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-git-push"&gt;
  &lt;/a&gt;
  7. git push
&lt;/h1&gt;

&lt;p&gt;Our repository is still local, only we can view it, make changes to it. To make it public and to push all the commits, on our first push we would write:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u &amp;lt;remote_name&amp;gt; &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example,&lt;br&gt;
&lt;code&gt;git push -u ritik issue#70-fix-button-styling&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After our first push, if we make more commits and to push them on to the remote repository. We can use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: Git push only uploads changes that are committed.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Menulis kode Javascript yang bersih – Style Guide, Code convention, dan ESLint</title>
      <author>Azril ardian</author>
      <pubDate>Mon, 23 Aug 2021 08:52:56 +0000</pubDate>
      <link>https://dev.to/azrilardian/menulis-kode-javascript-yang-bersih-style-guide-code-convention-dan-eslint-380i</link>
      <guid>https://dev.to/azrilardian/menulis-kode-javascript-yang-bersih-style-guide-code-convention-dan-eslint-380i</guid>
      <description>&lt;p&gt;Javascript merupakan bahasa pemrograman yang terbilang cukup mudah untuk dipelajari, mulai dari penulisan &lt;em&gt;sintaks&lt;/em&gt;, sifat dinamisnya, adannya fitur &lt;em&gt;automatic semicolon insertion&lt;/em&gt;, dan masih banyak lagi. Namun, terkadang kemudahan ini yang justru membuat kita sulit untuk menjaga konsistensi dari kode – kode program yang kita buat.&lt;/p&gt;

&lt;p&gt;Memang kenapa menjaga konsistensi kode itu penting ?&lt;/p&gt;

&lt;p&gt;Bagi seorang programmer, menulis kode yang konsisten akan memudahkan kita dalam proses &lt;em&gt;debugging&lt;/em&gt; dan dapat meminimalisir adanya &lt;em&gt;bug&lt;/em&gt;. Selain itu, kode yang konsisten juga akan sangat membantu kita ketika bekerja secara tim, karena  selain akan terlihat lebih rapi, kode dapat dengan mudah dibaca oleh anggota tim lainnya. &lt;/p&gt;

&lt;p&gt;Oleh sebab itu, sudah seharusnya bagi kita seorang developer untuk mengetahui bagaimana penulisan kode yang baik dan benar dan sekaligus secara konsisten menjaga setiap kode program yang kita kembangkan.&lt;/p&gt;

&lt;p&gt;Pada lanjutan blog kali ini, saya ingin berbagi ringkasan ilmu dan pengalaman saya tentang apa saja hal – hal yang dapat kita lakukan sebagai web developer untuk meningkatkan kualitas kode yang kita buat dan menjaganya agar tetap konsisten.&lt;/p&gt;

&lt;p&gt;Cus...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-style-guide"&gt;
  &lt;/a&gt;
  1. Style Guide
&lt;/h4&gt;

&lt;p&gt;Salah satu cara yang dapat kita gunakan untuk menjaga konsistensi kode adalah dengan mengetahui dan menerapkan &lt;em&gt;style-guide&lt;/em&gt;. &lt;br&gt;
&lt;em&gt;Style Guide&lt;/em&gt; merupakan kumpulan peraturan mengenai bagaimana cara penulisan kode yang baik bagi developer secara individu maupun tim. Dalam &lt;em&gt;style-guide&lt;/em&gt; tertulis secara lengkap aturan yang harus diikuti oleh setiap developer, seperti penamaan variabel, indentasi, penggunaan &lt;em&gt;double-quotes&lt;/em&gt; atau &lt;em&gt;single-quotes&lt;/em&gt;, &lt;em&gt;semicolon&lt;/em&gt;, dan masih banyak lagi. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-code-convention"&gt;
  &lt;/a&gt;
  2. Code Convention
&lt;/h4&gt;

&lt;p&gt;Ketika kita bekerja dengan tim, penting untuk menentukan satu gaya penulisan yang akan diadaptasi agar kode yang dituliskan menjadi teratur dan pengembangan produk dapat terhindar dari berbagai macam &lt;em&gt;bug&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Namun kita tahu bahwa gaya pada setiap individu berbeda, inilah yang menjadi tantangan dalam tim untuk menyepakati gaya mana yang akan diterapkan. Ini pun terjadi pada perusahaan besar.&lt;/p&gt;

&lt;p&gt;Banyak perusahaan membuat &lt;em&gt;style guide&lt;/em&gt; dan menyepakatinya sebagai pedoman para &lt;em&gt;engineer&lt;/em&gt;-nya dalam menuliskan kode.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Style guide&lt;/em&gt; yang sudah disepakati dan direkomendasikan oleh banyak developer itulah yang disebut dengan &lt;em&gt;Code Convention&lt;/em&gt;. Di JavaScript sendiri, terdapat tiga &lt;em&gt;style guide&lt;/em&gt; terkenal yang direkomendasikan untuk diikuti.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/javascript"&gt;AirBnB JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/jsguide.html"&gt;Google JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://standardjs.com/"&gt;Standard JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dokumentasi dari setiap &lt;em&gt;style-guide&lt;/em&gt; diatas sudah cukup jelas untuk dibaca dan terapkan.&lt;/p&gt;

&lt;p&gt;Tidak ada yang mengharuskan kita untuk memahami semuanya, jadi pilihlah salah satu yang sekiranya cocok saja ya.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-eslint"&gt;
  &lt;/a&gt;
  3. ESLint
&lt;/h4&gt;

&lt;p&gt;ESLint adalah &lt;em&gt;tools&lt;/em&gt; yang dapat membantu kita dalam mengikuti gaya penulisan. &lt;/p&gt;

&lt;p&gt;ESLint tidak memaksa kita untuk menggunakan salah satu gaya penulisan. Kita dapat menetapkan aturan-aturan secara manual atau memilih gaya penulisan yang ada secara mandiri. ESLint memiliki konfigurasi yang sangat fleksibel serta banyak &lt;em&gt;plugin&lt;/em&gt; penunjang agar dapat memenuhi kebutuhan kita secara maksimal. &lt;/p&gt;

&lt;p&gt;Keunggulan lainnya dari ESLint adalah ia dapat diintegrasikan dengan Text Editor/IDE popular, seperti VSCode, Atom, Bracket, atau yang lainnya.&lt;/p&gt;

&lt;p&gt;Dengan mengaktifkan fitur integrasi, penggunaan ESLint akan lebih &lt;em&gt;powerful&lt;/em&gt; dan &lt;em&gt;seamless&lt;/em&gt;. Sehingga kita dapat mencari dan memperbaiki kesalahan kode yang kita tuliskan dengan cepat.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pentutup"&gt;
  &lt;/a&gt;
  Pentutup
&lt;/h4&gt;

&lt;p&gt;Dengan berbekal pengetahuan diatas, seharusnya kita sudah tau bagaimana cara menjaga konsistensi dan meningkatkan kualitas kode yang kita buat. Tentu catatan saya diatas masih terbilang sangat minim, oleh karena itu cobalah untuk mencari tahu lebih lanjut lagi mengenai materi – materi diatas agar ilmu yang di dapat semakin luas.&lt;/p&gt;

&lt;p&gt;Ini adalah bagian dari lanjutan blog Menulis kode Javascript yang bersih – Variabel. Selanjutnya, saya akan berbagi catatan mengenai cara menginstal dan mengintegrasikan ESLint dalam proyek yang kita buat, Menulis kode Javascript yang bersih – Install dan Integrasi ESLint.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stay tune, teams&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Complete roadmap for Python Developer in 2021</title>
      <author>NITESH TALIYAN</author>
      <pubDate>Mon, 23 Aug 2021 08:27:55 +0000</pubDate>
      <link>https://dev.to/niteshtaliyan/complete-roadmap-for-python-developer-in-2021-4ohh</link>
      <guid>https://dev.to/niteshtaliyan/complete-roadmap-for-python-developer-in-2021-4ohh</guid>
      <description>&lt;p&gt;Do you want to become a Python developer but don’t know where to start? If that’s the case, you’re in the right place. In this roadmap, I will show you everything you need to know in order to become a python developer. Let’s jump right into it!&lt;/p&gt;

&lt;p&gt;Table of Contents&lt;br&gt;
Foundation 🐍&lt;br&gt;
Terminal/Command Prompt + Git/GitHub 💻&lt;br&gt;
Advanced Python 🐍&lt;br&gt;
Popular Libraries 📙&lt;br&gt;
Computer Science 🤓&lt;br&gt;
Web Scrapping 🗄️&lt;br&gt;
Web Development 🌐&lt;br&gt;
Scripting 📜&lt;br&gt;
Ethical Hacking 🤐&lt;br&gt;
Machine Learning/Data Science 🤖&lt;/p&gt;

&lt;p&gt;Foundation 🐍:-&lt;br&gt;
Python 3 vs Python 2&lt;br&gt;
Code Editors (choose one):-&lt;br&gt;
Vim&lt;br&gt;
VSCode&lt;br&gt;
Sublime Text&lt;br&gt;
PyCharm&lt;br&gt;
Atom&lt;br&gt;
Juypter Notebook&lt;br&gt;
Google Colab&lt;/p&gt;

&lt;p&gt;How Python Works&lt;br&gt;
Python Interpreter&lt;br&gt;
Running Python Code&lt;br&gt;
Data Types and their Operations and Use&lt;br&gt;
Numbers, Operators, Operator Precedence&lt;br&gt;
Variables&lt;br&gt;
Type Conversion&lt;br&gt;
Indentation&lt;br&gt;
Logical Operators&lt;br&gt;
Conditionals — If, Else, Else if, Truthy, Falsey&lt;br&gt;
Loops: for, while, loop control statements (break, continue, etc)&lt;br&gt;
Functions: scope, parameters, arguments, return&lt;br&gt;
Built-in Functions&lt;br&gt;
Commenting: single-line, multi-line, docstrings&lt;/p&gt;

&lt;p&gt;Terminal/Command Prompt + Git/GitHub 💻:-&lt;br&gt;
Basic Bash Commands&lt;br&gt;
Git Basics&lt;br&gt;
GitHub Basics&lt;br&gt;
Source Control&lt;/p&gt;

&lt;p&gt;Advanced Python 🐍:-&lt;br&gt;
OOP&lt;br&gt;
Classes&lt;br&gt;
Dunder&lt;br&gt;
Methods&lt;br&gt;
Inheritance&lt;br&gt;
Decorators&lt;br&gt;
Functional Programming&lt;br&gt;
Lambda Functions&lt;br&gt;
Map, filter, zip, reduce&lt;br&gt;
Errors&lt;br&gt;
Error Handling: try, except&lt;br&gt;
File I/O&lt;br&gt;
Regex&lt;br&gt;
Testing, unittest&lt;br&gt;
Import&lt;br&gt;
Modules&lt;br&gt;
Packages&lt;br&gt;
Pip&lt;br&gt;
Virtual Environments&lt;br&gt;
Debugging&lt;/p&gt;

&lt;p&gt;Popular Libraries 📙:-&lt;br&gt;
Tkinter&lt;br&gt;
Requests&lt;br&gt;
Pillow&lt;br&gt;
PyQT&lt;br&gt;
Pygame&lt;/p&gt;

&lt;p&gt;Computer Science 🤓:-&lt;br&gt;
Time Complexity&lt;br&gt;
Space Complexity&lt;br&gt;
Big O Notation&lt;br&gt;
Data Structures&lt;br&gt;
Algorithms&lt;/p&gt;

&lt;p&gt;Web Scrapping 🗄️:-&lt;br&gt;
Beautiful soup&lt;br&gt;
Selenium&lt;br&gt;
Scrapy&lt;/p&gt;

&lt;p&gt;Project Ideas 🔥:-&lt;br&gt;
Hacker News Scraper&lt;br&gt;
Dev.to Scrapper&lt;br&gt;
Amazon Price Tracker&lt;br&gt;
Jobs Portal Scraper&lt;br&gt;
COVID-19 Web Scraper&lt;/p&gt;

&lt;p&gt;Web Development 🌐:-&lt;br&gt;
Django&lt;br&gt;
Flask&lt;br&gt;
Zappa&lt;br&gt;
Dash&lt;/p&gt;

&lt;p&gt;Project Ideas 🔥:-&lt;br&gt;
Login System&lt;br&gt;
Portfolio&lt;br&gt;
Blog Site&lt;br&gt;
Todo App&lt;br&gt;
Ecommerce website&lt;/p&gt;

&lt;p&gt;Scripting 📜:-&lt;br&gt;
DevOps: Docker, Kubernetes, Gradle, etc&lt;br&gt;
System Admin&lt;/p&gt;

&lt;p&gt;Project Ideas 🔥:-&lt;br&gt;
Automate the Boring Stuff&lt;br&gt;
Create a Calculator&lt;br&gt;
Contact Book&lt;br&gt;
Directory Tree Generator&lt;br&gt;
Expense Tracker&lt;/p&gt;

&lt;p&gt;Ethical Hacking 🤐:-&lt;br&gt;
SQL injection&lt;br&gt;
Session hijacking&lt;br&gt;
Man in the Middle&lt;br&gt;
Networking&lt;br&gt;
IP Adress&lt;br&gt;
Exploitation&lt;br&gt;
Social Engineering&lt;br&gt;
Pen Testing&lt;br&gt;
Footprinting&lt;br&gt;
Firewall&lt;/p&gt;

&lt;p&gt;Project Ideas 🔥:-&lt;br&gt;
Hacking wireless networks&lt;br&gt;
Create a vulnerable site and hack it&lt;br&gt;
Password cracker&lt;br&gt;
Web Application Pen Testing&lt;br&gt;
Break A Caesar Cipher&lt;/p&gt;

&lt;p&gt;Machine Learning/Data Science 🤖:-&lt;br&gt;
Tensorflow&lt;br&gt;
PyTorch&lt;br&gt;
Keras&lt;br&gt;
Scikit-learn&lt;br&gt;
Numpy&lt;br&gt;
Pandas&lt;br&gt;
SciPy&lt;br&gt;
Matplotlib&lt;br&gt;
Seaborn&lt;br&gt;
Neural Networks&lt;br&gt;
Machine Learning Algorithms&lt;br&gt;
Data&lt;/p&gt;

&lt;p&gt;Project Ideas 🔥:-&lt;br&gt;
You can check out the article I created covering 30 project ideas within the field of machine learning and data science.&lt;/p&gt;

&lt;p&gt;Conclusion &lt;br&gt;
Thank you for reading! I wish you the best in your journey in learning and mastering Python!&lt;br&gt;
Nitesh Taliyan&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#python-machinelearning-datascience-beginners"&gt;
  &lt;/a&gt;
  python #machinelearning #datascience #beginners
&lt;/h1&gt;

</description>
      <category>python</category>
      <category>developer</category>
      <category>2021</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Agile Components</title>
      <author>Emmanuel Imolorhe</author>
      <pubDate>Mon, 23 Aug 2021 08:26:02 +0000</pubDate>
      <link>https://dev.to/eioluseyi/agile-components-15mp</link>
      <guid>https://dev.to/eioluseyi/agile-components-15mp</guid>
      <description>&lt;p&gt;It's quite fun to build components during project development. There is the excitement of reusing components and seeing them react in different ways based on the use case; of course it's so much fun because it's a testament to how beautiful your &lt;em&gt;"work of art"&lt;/em&gt; is.&lt;/p&gt;

&lt;p&gt;A lot of times, to continue in this state of ecstasy, one tends to keep adding functionalities to a single component, making it more flexible for different use cases but ultimately making it more complex.&lt;/p&gt;

&lt;p&gt;This might not seem to be an issue when working in a system that uses the waterfall approach to project management. In that situation, you can foresee the majority of the use cases for a component you create, which can mitigate the major issue with complex components.&lt;/p&gt;

&lt;p&gt;However, an attempt to bring such glee driven development style to an Agile environment would most likely end up in chaos. In an agile environment, things can change swiftly. You can start a project with a process flow and by the end of the project, that flow could have been reversed, replaced or even taken out completely.&lt;/p&gt;

&lt;p&gt;With a tightly coupled component style, you will have to constantly make changes to one component, adding and removing functionalities, leaving you confused a lot of times. The feeling of ecstasy that led to building the complex component would be tilting towards misery in no time. And many times, you would have to break down the component into the respective individual parts (&lt;strong&gt;as components should ideally be made&lt;/strong&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Simplicity is the ultimate sophistication - &lt;strong&gt;Leonardo Da Vinci&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The simpler you make components to be, the more flexible and thus, functional they can actually be. And an agile environment requires flexibility at its best, so when building components, especially in an agile environment, use &lt;em&gt;"Agile Components"&lt;/em&gt;  -  &lt;strong&gt;simple components&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>agile</category>
      <category>agilemethodology</category>
      <category>agilecoaching</category>
      <category>projectmanagement</category>
    </item>
    <item>
      <title>6 AWS Databases that you should know</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 23 Aug 2021 07:53:43 +0000</pubDate>
      <link>https://dev.to/this-is-learning/6-aws-databases-that-you-should-know-2g18</link>
      <guid>https://dev.to/this-is-learning/6-aws-databases-that-you-should-know-2g18</guid>
      <description>&lt;h2&gt;
  &lt;a href="#aws-redshift"&gt;
  &lt;/a&gt;
  AWS Redshift
&lt;/h2&gt;

&lt;p&gt;Amazon Redshift is a fully managed, petabyte-scale data warehouse service in the cloud. It can scale from a few hundred gigabytes of data and scale to a petabyte or more. This enables you to use your data to acquire new insights for your business and customers. It analyze all of your data with the fastest and most widely used cloud data warehouse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#following-are-the-features-of-aws-redshift-"&gt;
  &lt;/a&gt;
  Following are the features of AWS Redshift :
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is one of the fastest and most widely used cloud data warehouse. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has 3x better price-performance than other cloud data warehouses&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can handle exabytes of data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is specifically created for online data processing so, it is not good for transaction based data which most client side databases need. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift stores data in columns, using specialized data compression encodings for optimum memory usage and disk I/O. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is highly available and runs very fast by running a lot of queries in parallel on DB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can be easily integrated with S3 and other AWS analytics services so that we can have all analysis at one place&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can easily integrate AWS and third party BI tools to create dashboard on it&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#aws-athena"&gt;
  &lt;/a&gt;
  AWS Athena
&lt;/h2&gt;

&lt;p&gt;AWS Athena is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL. Athena is server less, so there is no infrastructure to manage, and you pay only for the queries that you run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#following-are-the-features-of-aws-athena-"&gt;
  &lt;/a&gt;
  Following are the features of AWS Athena :
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is server less you don't have to worry abut servers and it can scale as much as you want&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You only pay for the queries you run &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It lets you run SQL on AWS S3 by defining a schema&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is really interactive by running huge queries in parallel and gives response in milliseconds&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can put your results back in S3 so storage is not a problem&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#document-db"&gt;
  &lt;/a&gt;
  Document DB
&lt;/h2&gt;

&lt;p&gt;AWS DocumentDB with MongoDB compatibility is a database service that is purpose-built for JSON data management at scale, fully managed and integrated with AWS, and enterprise-ready with high durability. It is compatible with MongoDB using AWS data migration service. It supports most of the Mongo DB API but not all&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#following-are-the-features-of-document-db"&gt;
  &lt;/a&gt;
  Following are the features of Document DB:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is a NoSQL database&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It uses JSON data fore returning data from queries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can scale up to millions of requests per second&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's a fully managed database with high availability and replication across 3 AZ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It scales to 64TiB automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It implements the Apache 2.0 open source MongoDB 3.6 and 4.0 APIs by emulating the responses that a MongoDB client expects from a MongoDB server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It automatically backs up data for usage&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#aws-neptune"&gt;
  &lt;/a&gt;
  AWS Neptune
&lt;/h2&gt;

&lt;p&gt;AWS Neptune is a fast, reliable, fully managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#following-are-the-features-of-aws-neptune-"&gt;
  &lt;/a&gt;
  Following are the features of AWS Neptune :
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is fully managed graph data base so you don't have to worry about database management&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a graph database that so you can use it to create social networks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a highly available database and stores data across multiple AZ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It continuously backs up your data to Amazon S3&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can support millions of relations and query them with millisecond latency&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#aws-qldb"&gt;
  &lt;/a&gt;
  AWS QLDB
&lt;/h2&gt;

&lt;p&gt;AWS QLDB is a fully managed ledger database that provides a transparent, immutable, and cryptographically verifiable transaction log ‎owned by a central trusted authority. Amazon QLDB can be used to track each and every application data change and maintains a complete and verifiable history of changes over time&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#following-are-the-features-of-aws-qldb-"&gt;
  &lt;/a&gt;
  Following are the features of AWS QLDB :
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is a fully managed ledger database mostly used to store financial transactions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a fully managed database so we don't need to do database administration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It maintains a complete and sequenced history of changes over time. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data on the journal cannot be deleted or modified. It's history can be accessed and you can query and analyze the history to see how your data has changed over time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It uses the SHA 256 to create a secure output file of your data's change history. So that it can be verified tat data is not changed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a centralized database&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's highly available and data is copied across multiple AZ without any extra charges&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can stream data using AWS Kinesis&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#aws-managed-blockchain"&gt;
  &lt;/a&gt;
  AWS Managed Blockchain
&lt;/h2&gt;

&lt;p&gt;Amazon Managed Blockchain is a fully managed service that makes it easy to join public networks or create and manage scalable private networks using the popular open-source frameworks Hyperledger Fabric and Ethereum.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#following-are-the-features-of-aws-managed-blockchain"&gt;
  &lt;/a&gt;
  Following are the features of AWS Managed Blockchain
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Blockchain makes it possible to build applications without the need of central trusted authority&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It allows you to join public blockchain networks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also create your won private blockchains using this&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can easily scale your blockchain network as the usage of applications on the network grows over time as it is a fully managed service &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this we have finished the AWS database series. next we will start on container services in AWS.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>cloud</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>4 Important Differences Between Regular And Arrow Functions</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 23 Aug 2021 07:27:07 +0000</pubDate>
      <link>https://dev.to/alexdevero/4-important-differences-between-regular-and-arrow-functions-59f9</link>
      <guid>https://dev.to/alexdevero/4-important-differences-between-regular-and-arrow-functions-59f9</guid>
      <description>&lt;p&gt;Regular and arrow functions are often used interchangeably. Yet, they are not the same. There are some important differences between these two. This tutorial will tell you about four of these differences. This will help you recognize when to use regular functions and when to use arrow functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forms-of-functions"&gt;
  &lt;/a&gt;
  Forms of functions
&lt;/h2&gt;

&lt;p&gt;In modern JavaScript, there are two ways to write functions. You can use either &lt;a href="https://blog.alexdevero.com/javascript-functions-pt1/"&gt;regular functions&lt;/a&gt; or you can use &lt;a href="https://blog.alexdevero.com/javascript-arrow-functions/"&gt;arrow functions&lt;/a&gt;. If you decide to use regular functions, you can choose from two types of syntax. The first one is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function"&gt;function declaration&lt;/a&gt;. The second one is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"&gt;function expression&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function declaration example:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculateCircleArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;MathMath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Function expression example:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculateCircleArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;MathMath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you decide to use arrow function, things get easier. For arrow functions, there is only one type of syntax you can use, function expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculateCircleArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;MathMath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you compare the syntax of a regular function (expression) and arrow function, you find two differences: &lt;code&gt;function&lt;/code&gt; keyword and &lt;code&gt;=&amp;gt;&lt;/code&gt; (fat arrow). A more interesting, and important, question is, what are the differences beyond the syntax?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-this"&gt;
  &lt;/a&gt;
  The &lt;em&gt;this&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;The first important difference between regular and arrow function is the &lt;code&gt;this&lt;/code&gt; keyword. In case of regular functions, the &lt;code&gt;this&lt;/code&gt; is very dynamic. It can behave in four different ways depending on the situation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-scope-with-regular-functions"&gt;
  &lt;/a&gt;
  Global scope (with regular functions)
&lt;/h3&gt;

&lt;p&gt;When you invoke a regular function in a global scope, the value of &lt;code&gt;this&lt;/code&gt; will be global object &lt;code&gt;window&lt;/code&gt;. If you invoke the function a strict mode, the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create regular function in a global scope:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call logThis():&lt;/span&gt;
&lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   window: Window,&lt;/span&gt;
&lt;span class="c1"&gt;//   self: Window,&lt;/span&gt;
&lt;span class="c1"&gt;//   ...&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// With strict mode:&lt;/span&gt;
&lt;span class="c1"&gt;// Turn on strict mode:&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create regular function in a global scope:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call logThis():&lt;/span&gt;
&lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-methods-with-regular-functions"&gt;
  &lt;/a&gt;
  Object methods (with regular functions)
&lt;/h3&gt;

&lt;p&gt;If you use a regular function to define an object method and invoke it, &lt;code&gt;this&lt;/code&gt; will be the parent object. It will be the object inside which you defined the method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a simple object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Create object method:&lt;/span&gt;
  &lt;span class="nx"&gt;getParentObj&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Return this:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call the "getParentObj()" method on "user" object:&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParentObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'user',&lt;/span&gt;
&lt;span class="c1"&gt;//   active: true,&lt;/span&gt;
&lt;span class="c1"&gt;//   getParentObj: ƒ getParentObj()&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#constructors-with-regular-functions"&gt;
  &lt;/a&gt;
  Constructors (with regular functions)
&lt;/h3&gt;

&lt;p&gt;When you use a regular function to create &lt;a href="https://blog.alexdevero.com/javascript-constructor-functions/"&gt;function constructor&lt;/a&gt;, the &lt;code&gt;this&lt;/code&gt; will be individual instance you create with that constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a function construct or that accepts one parameter:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyFunctionConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use parameter to create prop:&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;

  &lt;span class="c1"&gt;// Log this:&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create the first instance of "MyFunctionConstructor":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunctionInstanceOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyFunctionConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Charlie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// MyFunctionConstructor {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Charlie',&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: { constructor: ƒ MyFunctionConstructor() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create the first instance of "MyFunctionConstructor":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunctionInstanceTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyFunctionConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jenny&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// MyFunctionConstructor {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Jenny',&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: { constructor: ƒ MyFunctionConstructor() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-call-and-apply-with-regular-functions"&gt;
  &lt;/a&gt;
  The &lt;em&gt;call()&lt;/em&gt; and &lt;em&gt;apply()&lt;/em&gt; (with regular functions)
&lt;/h3&gt;

&lt;p&gt;Lastly, you can also invoke function indirectly using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"&gt;apply()&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"&gt;call()&lt;/a&gt; methods. These two methods allow you to change the value of &lt;code&gt;this&lt;/code&gt; of a function and invoke it using that new &lt;code&gt;this&lt;/code&gt;. This means that &lt;code&gt;this&lt;/code&gt; can be anything you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create object for new "this":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;planet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Earth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a regular function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "logThis()" with default this:&lt;/span&gt;
&lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   window: Window,&lt;/span&gt;
&lt;span class="c1"&gt;//   self: Window&lt;/span&gt;
&lt;span class="c1"&gt;//   ...&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "logThis()" with "call()" method&lt;/span&gt;
&lt;span class="c1"&gt;// and "newThis" object:&lt;/span&gt;
&lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newThis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { planet: 'Earth' }&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "logThis()" with "apply()" method&lt;/span&gt;
&lt;span class="c1"&gt;// and "newThis" object:&lt;/span&gt;
&lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newThis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { planet: 'Earth' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-this-and-arrow-functions"&gt;
  &lt;/a&gt;
  The &lt;em&gt;this&lt;/em&gt; and arrow functions
&lt;/h3&gt;

&lt;p&gt;When it comes to &lt;code&gt;this&lt;/code&gt;, arrow function is much simpler and always behaves in the same way. The value of &lt;code&gt;this&lt;/code&gt; is always the value from the parent, or outer, function. This is because arrow function doesn't have its own &lt;code&gt;this&lt;/code&gt;. It "gets" its &lt;code&gt;this&lt;/code&gt; lexically, from its lexical scope, outer scope.&lt;/p&gt;

&lt;p&gt;If you try to change &lt;code&gt;this&lt;/code&gt; of an arrow function with &lt;code&gt;call()&lt;/code&gt; or &lt;code&gt;apply()&lt;/code&gt;, arrow function will ignore it. It will still get its &lt;code&gt;this&lt;/code&gt; from its lexical scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Global scope example:&lt;/span&gt;
&lt;span class="c1"&gt;// Create arrow function in a global scope:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "logThis()":&lt;/span&gt;
&lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   window: Window,&lt;/span&gt;
&lt;span class="c1"&gt;//   self: Window&lt;/span&gt;
&lt;span class="c1"&gt;//   ...&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Object method example:&lt;/span&gt;
&lt;span class="c1"&gt;// Create a simple object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Create object method:&lt;/span&gt;
  &lt;span class="na"&gt;getParentObj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Return this:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "getParentObj()" on "shape" object:&lt;/span&gt;
&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParentObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   window: Window,&lt;/span&gt;
&lt;span class="c1"&gt;//   self: Window&lt;/span&gt;
&lt;span class="c1"&gt;//   ...&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// "call()" and "apply()" methods example:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alexander Joseph Luthor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lex Luthor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Egotistical Mastermind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "logThis()" with "call()" method:&lt;/span&gt;
&lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newThis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   window: Window,&lt;/span&gt;
&lt;span class="c1"&gt;//   self: Window&lt;/span&gt;
&lt;span class="c1"&gt;//   ...&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Invoke "logThis()" with "apply()" method:&lt;/span&gt;
&lt;span class="nx"&gt;logThis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newThis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   window: Window,&lt;/span&gt;
&lt;span class="c1"&gt;//   self: Window&lt;/span&gt;
&lt;span class="c1"&gt;//   ...&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Getting &lt;code&gt;this&lt;/code&gt; lexically also means that you don't have to bind object and class methods when you use arrow functions. This is something you would have to do with regular function if the &lt;code&gt;this&lt;/code&gt; changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Regular function example:&lt;/span&gt;
&lt;span class="c1"&gt;// Create "Person" class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add some properties:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Add class method:&lt;/span&gt;
  &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of "Person":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Log the name:&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Jack'&lt;/span&gt;

&lt;span class="c1"&gt;// Log the name with different this:&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// ''&lt;/span&gt;

&lt;span class="c1"&gt;// Bind this manually:&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Jack'&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of "Person":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Log the name:&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Jack'&lt;/span&gt;

&lt;span class="c1"&gt;// Log the name with timeout:&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Jack'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implicit-return"&gt;
  &lt;/a&gt;
  Implicit &lt;em&gt;return&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;When you create a regular function, it will implicitly return &lt;code&gt;undefined&lt;/code&gt;. You can change this by adding &lt;code&gt;return&lt;/code&gt; statement with some expression. If you add some expression, but omit the &lt;code&gt;return&lt;/code&gt; statement, regular function will return &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an empty regular function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FnReturningNothing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "FnReturningNothing()":&lt;/span&gt;
&lt;span class="nx"&gt;FnReturningNothing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="c1"&gt;// Create a regular function without return statement:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fnWithoutStatement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "fnWithoutStatement()":&lt;/span&gt;
&lt;span class="nx"&gt;fnWithoutStatement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="c1"&gt;// Create a regular function with return statement:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fnWithStatement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke "fnWithStatement()":&lt;/span&gt;
&lt;span class="nx"&gt;fnWithStatement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the &lt;code&gt;return&lt;/code&gt; statement to return some expression also from arrow functions. However, there is also a shortcut, and feature of arrow functions, to do this. If you omit the function's body curly braces, and function contains one expression, the arrow function will return that expression implicitly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create arrow function with implicit return:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;returnRandomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Note: it implicitly returns expression&lt;/span&gt;
&lt;span class="c1"&gt;// that follows after the "=&amp;gt;" (fat arrow).&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "returnRandomNumber()":&lt;/span&gt;
&lt;span class="nx"&gt;returnRandomNumber&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 0&lt;/span&gt;


&lt;span class="c1"&gt;// The same as:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;returnRandomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Return random number explicitly:&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "returnRandomNumber()":&lt;/span&gt;
&lt;span class="nx"&gt;returnRandomNumber&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-arguments-object"&gt;
  &lt;/a&gt;
  The &lt;em&gt;arguments&lt;/em&gt; object
&lt;/h2&gt;

&lt;p&gt;When you create a regular function, JavaScript also creates a special object called &lt;code&gt;arguments&lt;/code&gt;. This array-like object is accessible only inside the function. It containing the list of arguments with which you invoked the function. This applies even if the function at hand doesn't accept any parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a regular function without parameters:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log "argument" object:&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "logArguments()":&lt;/span&gt;
&lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   length: 0,&lt;/span&gt;
&lt;span class="c1"&gt;//   callee: ƒ logArguments(),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: { ... }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Create a regular function with one parameter:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hobby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log "argument" object:&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "logArguments()":&lt;/span&gt;
&lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   '0': 'reading',&lt;/span&gt;
&lt;span class="c1"&gt;//   length: 1,&lt;/span&gt;
&lt;span class="c1"&gt;//   callee: ƒ logArguments(),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: { ... }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Create a regular function with two parameters:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fistName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log "argument" object:&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "logArguments()":&lt;/span&gt;
&lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jones&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   '0': 'Jack',&lt;/span&gt;
&lt;span class="c1"&gt;//   '1': 'Jones',&lt;/span&gt;
&lt;span class="c1"&gt;//   length: 2,&lt;/span&gt;
&lt;span class="c1"&gt;//   callee: ƒ logArguments(),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: { ... }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Create a regular function with two parameters:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fistName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log "argument" object:&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "logArguments()" and pass more arguments:&lt;/span&gt;
&lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tobias&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jones&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Junior&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   '0': 'Jack',&lt;/span&gt;
&lt;span class="c1"&gt;//   '1': 'Tobias',&lt;/span&gt;
&lt;span class="c1"&gt;//   '2': 'Jones',&lt;/span&gt;
&lt;span class="c1"&gt;//   '3': 'Junior',&lt;/span&gt;
&lt;span class="c1"&gt;//   length: 4,&lt;/span&gt;
&lt;span class="c1"&gt;//   callee: ƒ logArguments(),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: { ... }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arrow functions don't have their own &lt;code&gt;arguments&lt;/code&gt; object. If you define arrow function inside a regular function, it will inherit the &lt;code&gt;arguments&lt;/code&gt; object from the parent function. If you define arrow function in a global scope, and try to access &lt;code&gt;arguments&lt;/code&gt; object, JavaScript will throw a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create arrow function in a global scope:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logArguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Try to log "argument" object:&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "logArguments()":&lt;/span&gt;
&lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// ReferenceError: arguments is not defined&lt;/span&gt;


&lt;span class="c1"&gt;// Try adding parameters:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logArguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Try to log "argument" object:&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "logArguments()" with some arguments:&lt;/span&gt;
&lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// ReferenceError: arguments is not defined&lt;/span&gt;


&lt;span class="c1"&gt;// Create arrow function inside a regular function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parentFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logArguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Try to log "argument" object:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Invoke "logArguments()":&lt;/span&gt;
  &lt;span class="nx"&gt;logArguments&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the "logArguments()":&lt;/span&gt;
&lt;span class="nx"&gt;parentFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   '0': 'One',&lt;/span&gt;
&lt;span class="c1"&gt;//   '1': 'Two',&lt;/span&gt;
&lt;span class="c1"&gt;//   length: 2,&lt;/span&gt;
&lt;span class="c1"&gt;//   callee: ƒ parentFunction(),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: { ... }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-constructors"&gt;
  &lt;/a&gt;
  Function Constructors
&lt;/h2&gt;

&lt;p&gt;One way to use regular functions is to create constructor functions. Think about function constructor as blueprints for creating objects. Function constructor is still a regular function. However, there are some differences. First, you start its name with a capital letter.&lt;/p&gt;

&lt;p&gt;When you want to use it, you call it with &lt;code&gt;new&lt;/code&gt; keyword. This keyword comes before the constructor name and parentheses. Inside the constructor, you can use &lt;code&gt;this&lt;/code&gt; to create and assign properties. These properties will be created for every instance you create with that constructor function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create function constructor "Human":&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create and assign new properties:&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="c1"&gt;// Add constructor method:&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`Hi, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create new instance of "Human":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Check if "joe" is instance of "Human":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// Call the "sayHello()" method on "joe" instance:&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Hi, my name is Joel.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Constructors with arrow functions? This doesn't work, literally. Arrow function doesn't have its own this. &lt;code&gt;this&lt;/code&gt; is one thing you will encounter often in constructor functions. For this reason, and maybe some other as well, you can't use arrow function to create constructors. If you try it, JavaScript will throw &lt;code&gt;TypeError&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Try to create function constructor with arrow function:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Try to create new instance of "Human":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jessica&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// TypeError: Human is not a constructor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-4-main-differences-between-regular-and-arrow-functions"&gt;
  &lt;/a&gt;
  Conclusion: 4 main differences between regular and arrow functions
&lt;/h2&gt;

&lt;p&gt;When it comes to arrow and regular functions, the differences go beyond the syntax. I hope that the four main differences we discussed helped you understand how arrow and regular functions differ from each other and when is it better to use one and when the other.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I Created a Complete Shopping Cart Using React and Redux Toolkit.</title>
      <author>Chaoo Charles</author>
      <pubDate>Mon, 23 Aug 2021 07:06:52 +0000</pubDate>
      <link>https://dev.to/chaoocharles/i-created-a-complete-shopping-cart-using-react-and-redux-toolkit-4anc</link>
      <guid>https://dev.to/chaoocharles/i-created-a-complete-shopping-cart-using-react-and-redux-toolkit-4anc</guid>
      <description>&lt;p&gt;&lt;code&gt;Redux toolkit&lt;/code&gt;, now the standard way of working with redux allows you to write simpler code and provides good default behaviors. &lt;/p&gt;

&lt;p&gt;I happened to create a complete shopping cart using react and redux toolkit. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RXJiBRSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lqxmo7w7gosq9rxf1s3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RXJiBRSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lqxmo7w7gosq9rxf1s3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can preview it using the link below and then let me know what you think about it.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://chaoo-online-shop.netlify.app/"&gt;https://chaoo-online-shop.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source Code: &lt;a href="https://github.com/chaoocharles/complete-shopping-cart"&gt;https://github.com/chaoocharles/complete-shopping-cart&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-preview"&gt;
  &lt;/a&gt;
  Project Preview
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3H3AQT4ZdDc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Would you like a complete course on this? I started a new playlist on my YouTube channel where I will teach you everything you need to know in a step by step manner.&lt;/p&gt;

&lt;p&gt;Here is the link: &lt;a href="https://youtube.com/playlist?list=PL63c_Ws9ecIRnNHCSqmIzfsMAYZrN71L6"&gt;https://youtube.com/playlist?list=PL63c_Ws9ecIRnNHCSqmIzfsMAYZrN71L6&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>react</category>
      <category>redux</category>
    </item>
    <item>
      <title>Add Typescript, TailwindCSS, and ESlint to your Next.js app</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Mon, 23 Aug 2021 06:42:35 +0000</pubDate>
      <link>https://dev.to/avneesh0612/add-typescript-tailwindcss-and-eslint-to-your-next-js-app-5cm0</link>
      <guid>https://dev.to/avneesh0612/add-typescript-tailwindcss-and-eslint-to-your-next-js-app-5cm0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#setting-up-the-app"&gt;
  &lt;/a&gt;
  Setting up the app
&lt;/h2&gt;

&lt;p&gt;Creating a Next.js app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app next-tailwind-ts-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Starting the app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn dev # yarn
npm run dev # npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open  &lt;a href="http://localhost:3000/"&gt;localhost:3000&lt;/a&gt; in your browser and you will be able to see a starter template of a Next.js app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z7Eb6bU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629529571943/3EVvZ0y57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z7Eb6bU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629529571943/3EVvZ0y57.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  Cleanup
&lt;/h3&gt;

&lt;p&gt;Delete everything under the Head tag until the footer like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Head from "next/head";

export default function Home() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Head&amp;gt;
        &amp;lt;title&amp;gt;Create Next App&amp;lt;/title&amp;gt;
        &amp;lt;meta name="description" content="Generated by create next app" /&amp;gt;
        &amp;lt;link rel="icon" href="/favicon.ico" /&amp;gt;
      &amp;lt;/Head&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give you a clean canvas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is  &lt;a href="https://www.typescriptlang.org"&gt;Typescript&lt;/a&gt;?
&lt;/h3&gt;

&lt;p&gt;TypeScript is a strongly typed programming language that builds on JavaScript giving you better tooling at any scale. It also provides better IntelliSense and fewer bugs in your app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-typescript-to-the-app"&gt;
  &lt;/a&gt;
  Add Typescript to the app
&lt;/h3&gt;

&lt;p&gt;Install the dependencies needed-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; yarn add --dev typescript @types/react # yarn
 npm i -D typescript @types/react # npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;tsconfig.json&lt;/code&gt; file in the root of the project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now cut the terminal running the app and restart the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn dev # yarn
npm run dev # npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you restart the server you should see this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n81op3IU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629529715508/vNgqzxKFE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n81op3IU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629529715508/vNgqzxKFE.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have some experience with typescript then I would recommend you setting strict mode to true in &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "strict": true,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use Typescript you need to change the file extension from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.tsx&lt;/code&gt;.&lt;br&gt;
I am going to change &lt;code&gt;index.js&lt;/code&gt; to &lt;code&gt;index.tsx&lt;/code&gt; and &lt;code&gt;_app.js&lt;/code&gt; to &lt;code&gt;_app.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;_app.tsx&lt;/code&gt; you will see an error similar to this that the props have a type of any&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcUVgVuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629530068648/Ttag5u33g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcUVgVuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629530068648/Ttag5u33g.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So add the type of AppProps and import it from "next/app"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { AppProps } from "next/app";
import "../styles/globals.css";

function MyApp({ Component, pageProps }: AppProps) {
  return &amp;lt;Component {...pageProps} /&amp;gt;;
}

export default MyApp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use Typescript in your app 🎉.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwindcss"&gt;
  &lt;/a&gt;
  TailwindCSS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-tailwindcss"&gt;
  &lt;/a&gt;
  What is  &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt;?
&lt;/h3&gt;

&lt;p&gt;Tailwind is a CSS framework that helps you build websites very fast, without leaving your HTML.&lt;/p&gt;

&lt;p&gt;I have been using Tailwind for quite a while now and would highly recommend you all trying it out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-tailwind-to-the-app"&gt;
  &lt;/a&gt;
  Adding Tailwind to the app
&lt;/h3&gt;

&lt;p&gt;Installing the dependencies -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add -D tailwindcss@latest postcss@latest autoprefixer@latest # yarn
npm install -D tailwindcss@latest postcss@latest autoprefixer@latest # npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generating the config files -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tailwindcss init -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate &lt;code&gt;tailwind.config.js&lt;/code&gt; and &lt;code&gt;postcss.config.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Adding the files to purge through&lt;br&gt;
Replace the purge in &lt;code&gt;tailwind.config.js&lt;/code&gt; with this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  purge: ["./pages/**/*.{js,ts,jsx,tsx}", "./components/**/*.{js,ts,jsx,tsx}"],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change your globals.css&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WyDuFdTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/EbkaRJGMrdwAAAAM/as-usual-normal-thing.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyDuFdTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/EbkaRJGMrdwAAAAM/as-usual-normal-thing.gif" alt="As usual"&gt;&lt;/a&gt;&lt;br&gt;
You need to restart the server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn dev # yarn
npm run dev # npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Testing if it works-&lt;br&gt;
In &lt;code&gt;index.tsx&lt;/code&gt; I am going to create a centered hello world text with tailwind stylings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Head from "next/head";

export default function Home() {
  return (
    &amp;lt;div className="w-screen h-screen flex justify-center items-center"&amp;gt;
      &amp;lt;Head&amp;gt;
        &amp;lt;title&amp;gt;Create Next App&amp;lt;/title&amp;gt;
        &amp;lt;meta name="description" content="Generated by create next app" /&amp;gt;
        &amp;lt;link rel="icon" href="/favicon.ico" /&amp;gt;
      &amp;lt;/Head&amp;gt;
      &amp;lt;h1 className="text-5xl font-bold"&amp;gt;Hello world&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Zk93ofJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629531552462/X3UdTBPse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Zk93ofJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629531552462/X3UdTBPse.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cu2goEK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/7daGnHQsteMjQHVQKi/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cu2goEK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/7daGnHQsteMjQHVQKi/200.gif" alt="It worked"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  ESLint
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-eslint-"&gt;
  &lt;/a&gt;
  What is  &lt;a href="https://eslint.org"&gt;ESLint&lt;/a&gt; ?
&lt;/h3&gt;

&lt;p&gt;Linting tools like ESLint allow developers to discover problems with their JavaScript code without executing it. The primary reason ESLint was created was to allow developers to create their own linting rules. ESLint is designed to have all rules completely pluggable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-add-eslint"&gt;
  &lt;/a&gt;
  Let's add ESLint
&lt;/h3&gt;

&lt;p&gt;Add this line inside scripts in &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "lint": "next lint"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are all the scripts in &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
     "lint": "next lint"
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn lint # yarn
npm run lint # npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this you will see a dropdown asking "How would you like to configure ESLint?". Just let it be the default one and then it will take some time to install the dependencies.&lt;/p&gt;

&lt;p&gt;Now we have ESLint ready in our app 🥳.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checking for the linter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using bad practices in your code then it would highlight it with a yellow underline. For example, if I use the normal image instead of Next Image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4nT0SQUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629532528200/mz-ra1z7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4nT0SQUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629532528200/mz-ra1z7u.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9AX2tWb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/NzeJJic0gjUaw8FoVV/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9AX2tWb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/NzeJJic0gjUaw8FoVV/giphy.gif" alt="Congrats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have successfully added Typescript, TailwindCSS, and ESlint to your Next.js app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/avneesh0612/tailwind-ts-eslint"&gt;Github repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org"&gt;Nextjs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org"&gt;Typescript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESlint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>tailwindcss</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to exclude stylesheets from the bundle and lazy load them in Angular?</title>
      <author>Dharmen Shah</author>
      <pubDate>Mon, 23 Aug 2021 05:35:51 +0000</pubDate>
      <link>https://dev.to/shhdharmen/how-to-exclude-stylesheets-from-the-bundle-and-lazy-load-them-in-angular-3kcf</link>
      <guid>https://dev.to/shhdharmen/how-to-exclude-stylesheets-from-the-bundle-and-lazy-load-them-in-angular-3kcf</guid>
      <description>&lt;p&gt;We will try to understand this by taking example of multiple themes support.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-theme-files"&gt;
  &lt;/a&gt;
  Multiple theme files
&lt;/h2&gt;

&lt;p&gt;Let’s assume that apart from main &lt;em&gt;styles.css&lt;/em&gt; file, you have 2 theme files present:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;src/styles/themes/theme-light.css&lt;/li&gt;
&lt;li&gt;src/styles/themes/theme-dark.css&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next, you would have them in &lt;code&gt;angular.json&lt;/code&gt;’s styles option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"styles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"src/styles.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"src/styles/themes/theme-light.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"src/styles/themes/theme-dark.css"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And lastly, you would handle loading of a particular theme based on the users’ choice or their preferences.&lt;/p&gt;

&lt;p&gt;Everything works great, but both of your theme files are part of your application bundle all the time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exclude-theme-files"&gt;
  &lt;/a&gt;
  Exclude theme files
&lt;/h2&gt;

&lt;p&gt;Let’s make a minor change in angular.json to exclude theme files from bundle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"styles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"src/styles.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/styles/themes/theme-light.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"inject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"bundleName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"theme-light"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/styles/themes/theme-dark.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"inject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"bundleName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"theme-dark"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two new options to learn here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;inject&lt;/code&gt;&lt;/strong&gt;: Setting this false will not include the file from “input” path in bundle&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;bundleName&lt;/code&gt;&lt;/strong&gt;: A separate bundle will be created containing the stylesheet from “input” path&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now if you try to build the project, it will create separate files and the output will look something like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUhLwPXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6831283/128328453-e6b500d3-a509-4899-8560-3babe6b881b1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUhLwPXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6831283/128328453-e6b500d3-a509-4899-8560-3babe6b881b1.png" alt="output of npm run build command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that &lt;code&gt;theme-light.css&lt;/code&gt; and &lt;code&gt;theme-dark.css&lt;/code&gt; are part of &lt;strong&gt;Lazy Chunk Files&lt;/strong&gt;. Lazy chunk files speed up the application load time, because they are loaded on demand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-theme-files"&gt;
  &lt;/a&gt;
  Lazy load theme files
&lt;/h2&gt;

&lt;p&gt;We managed to exclude them from the bundle and they are externally available. Now the question arises how to load these theme files?&lt;/p&gt;

&lt;p&gt;One way to load them is to use their bundle directly with a link tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
  &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
  &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"theme-dark.css"&lt;/span&gt;
  &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(prefers-color-scheme: dark)"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
  &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
  &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"them-light.css"&lt;/span&gt;
  &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(prefers-color-scheme: light)"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will maybe need to tweak the document base URL using &lt;code&gt;base&lt;/code&gt; tag to successfully load them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learnt that we can exclude stylesheets by simply setting &lt;code&gt;inject&lt;/code&gt; false in workspace configuration file, i.e. &lt;code&gt;angular.json&lt;/code&gt;. And to load them on demand, we will use the &lt;code&gt;bundleName&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;The advantage of excluding stylesheets from the bundle is reduced bundle size, which will in turn improve the initial load time of application and finally user experience will be better.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>bundling</category>
      <category>stylesheets</category>
    </item>
  </channel>
</rss>
