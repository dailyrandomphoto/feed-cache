<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Vocabulary Building</title>
      <author>vindhya Hegde </author>
      <pubDate>Mon, 30 Aug 2021 03:16:20 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-3pc1</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-3pc1</guid>
      <description>&lt;p&gt;Hello, Daily I will come up with a post consisting of new 5 words that I have learned and which are frequently asked in GREs with Pictorial representation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;harangue&lt;/strong&gt;(noun) :  A long pompous speech; a tirade&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgER32d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/oRTfvD4uNa4/hqdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgER32d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/oRTfvD4uNa4/hqdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=harangue&amp;amp;oq=harangue&amp;amp;aqs=chrome.0.69i59j0i433i512j0i512l8.10127j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ambivalent&lt;/strong&gt;(adjective) : having mixed feelings or contradictory ideas about something or someone.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTjG1xmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.vocationvillage.com/wp-content/uploads/2016/02/what-to-do-about-ambivalence.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTjG1xmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.vocationvillage.com/wp-content/uploads/2016/02/what-to-do-about-ambivalence.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=ambivalent&amp;amp;oq=ambivalent&amp;amp;aqs=chrome..69i57j0i433i512j0i512l2j0i433i512j0i512l5.7747j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;prevaricate&lt;/strong&gt;(verb) : to speak in an evasive way&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPOqP0MD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://static1.squarespace.com/static/54ad91eae4b04d2abc8d6247/t/55bc52a3e4b055590b32d8aa/1438405283815/%3Fformat%3D1500w" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPOqP0MD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://static1.squarespace.com/static/54ad91eae4b04d2abc8d6247/t/55bc52a3e4b055590b32d8aa/1438405283815/%3Fformat%3D1500w" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=prevaricate&amp;amp;oq=prev&amp;amp;aqs=chrome.0.69i59j69i57j0i433i512j69i65l2j69i61j69i60l2.6100j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;aberration&lt;/strong&gt;(noun) : a deviation from what is normal or expected&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qmVbNXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://webstockreview.net/images/mirror-clipart-person-12.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qmVbNXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://webstockreview.net/images/mirror-clipart-person-12.gif" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=aberration&amp;amp;oq=aberra&amp;amp;aqs=chrome.0.69i59j69i57j0i20i131i263i433i512j0i433i512j0i512l6.3793j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;censure&lt;/strong&gt;(verb) : to express strong disapproval&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MDLlS58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/O9USRUCzytU/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MDLlS58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/O9USRUCzytU/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=censure&amp;amp;oq=censure&amp;amp;aqs=chrome.0.69i59j0i20i263i433i512j0i512j0i433i512j0i512l2j0i131i433i512j0i512l3.7661j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps to you if you are preparing for GRE exams..&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>day2</category>
    </item>
    <item>
      <title>Azure Cosmos DB | Mongo DB - Embedding vs Reference</title>
      <author>geetcloud</author>
      <pubDate>Mon, 30 Aug 2021 01:46:55 +0000</pubDate>
      <link>https://dev.to/geetcloud/azure-cosmos-db-mongo-db-embedding-vs-reference-81p</link>
      <guid>https://dev.to/geetcloud/azure-cosmos-db-mongo-db-embedding-vs-reference-81p</guid>
      <description>&lt;p&gt;Schema-less Databases similar to &lt;strong&gt;Mongo DB&lt;/strong&gt; help us design models, store and query data easily and rapidly. But it is very important to understand, design and create the right schema design for your application which has great impact on the performance, scalability, costs etc.&lt;/p&gt;

&lt;p&gt;Below are the key factors we need to consider before start designing our data models in Mongo DB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Understand the difference between Normalized/Relational database to a Schema-less Mongo/Azure Cosmos DB&lt;/li&gt;
&lt;li&gt;  Is our application read or write heavy&lt;/li&gt;
&lt;li&gt;  How to model data in a schema-less database?&lt;/li&gt;
&lt;li&gt;  In which scenarios we need to embed data and which scenarios we need to refer to data?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#embedding-data-model-pattern"&gt;
  &lt;/a&gt;
  Embedding data model pattern
&lt;/h4&gt;

&lt;p&gt;As a developer/architect, when we start working in a schema-less database, we always tend to design schema similar to relational or normalized database. We would like to design the data into multiple tables as we traditionally design in a SQL normalized database but we would miss the great advantages of Mongo DB.&lt;/p&gt;

&lt;p&gt;So it is better to understand the difference between traditional Normalized/Relational Database and Schema-less database.&lt;/p&gt;

&lt;p&gt;For example, in a relational schema design, developers design the schema independent of queries. will normalize the data into multiple entities to avoid storing redundant data on each record and rather refer to the data in the related entities.&lt;/p&gt;

&lt;p&gt;In the below example, it illustrates how we model order data in a relational database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order Data - Schema Design in Relational Database&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-ApBobkJpu0Q/YRCt5NRX9xI/AAAAAAAAAD4/m0jEU9AxJTEK5hqfeKsipiOgETl8PbHJwCLcBGAsYHQ/s825/Screen%2BShot%2B2021-08-08%2Bat%2B9.22.17%2BPM.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQ0n6GZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ApBobkJpu0Q/YRCt5NRX9xI/AAAAAAAAAD4/m0jEU9AxJTEK5hqfeKsipiOgETl8PbHJwCLcBGAsYHQ/w640-h426/Screen%252BShot%252B2021-08-08%252Bat%252B9.22.17%252BPM.png" alt="Order Data - Schema Design in Relational Database"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To query the order, item details, contact details, etc, we need to make joins to other tables and fetch the data.&lt;/p&gt;

&lt;p&gt;In the same manner, to update a single order item details, we need to update multiple tables.&lt;/p&gt;

&lt;p&gt;Let's see how we can design the same order data model in Mongo / Azure Cosmos DB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  { 
“id”: “1”, 
“orderdate”: “02/08/2021”,
“tax” : “8”,
“subtotalbeforetax”: “69”,
“shipmentdate”: “03/08/2021”,
“orderitems”: [ 
 { 
  “itemname”: “item1”,
  “quantity”: “2”,
  “itemprice”: “12”,
  “totalprice”:”24" 
 },
 { “itemname”: “item2”,
   “quantity”: “3”,
   “itemprice”: “15”,
   “totalprice”: “45”
 } 
],
“shippingcontact”: [ 
 {
   “name”: “&amp;lt;&amp;lt;person1&amp;gt;&amp;gt;”,
   “street”: “&amp;lt;&amp;lt;street1&amp;gt;&amp;gt;”,
   “city”: “&amp;lt;&amp;lt;city1&amp;gt;&amp;gt;”, 
   “state”: “&amp;lt;&amp;lt;state1&amp;gt;&amp;gt;”,
   “country”: “&amp;lt;&amp;lt;country1&amp;gt;&amp;gt;”, 
   “zipcode”: “&amp;lt;&amp;lt;zipcode1&amp;gt;&amp;gt;”,
   “phone”: “&amp;lt;&amp;lt;street1&amp;gt;&amp;gt;”
 },
]
 “billingcontact”: [ 
 {
  “name”: “&amp;lt;&amp;lt;person1&amp;gt;&amp;gt;”,
  “street”: “&amp;lt;&amp;lt;street1&amp;gt;&amp;gt;”,
  “city”: “&amp;lt;&amp;lt;city1&amp;gt;&amp;gt;”, 
  “state”: “&amp;lt;&amp;lt;state1&amp;gt;&amp;gt;”,
  “country”: “&amp;lt;&amp;lt;country1&amp;gt;&amp;gt;”,
  “zipcode”: “&amp;lt;&amp;lt;zipcode1&amp;gt;&amp;gt;”,
  “phone”: “&amp;lt;&amp;lt;street1&amp;gt;&amp;gt;”
 },
] 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above json document , we have denormalized order data by embedding all the data related to the order such as line item details, shipping and billing contact details etc., into a single document.&lt;/p&gt;

&lt;p&gt;We are also flexible to change any fields or the sub objects/arrays format entirely anytime.&lt;/p&gt;

&lt;p&gt;Now we can retrieve the complete order details in a single query/ read operation against a single embedded document.&lt;/p&gt;

&lt;p&gt;Same way, updating the order with the item details and shipping information also can be done in a single update/write operation against the single order document.&lt;/p&gt;

&lt;p&gt;In general, it is always recommended to go for Embed. Except for some specific cases where we need to go for Reference. Embedding also improves query-read performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-4W2p9gXD1PQ/YRDD972-OPI/AAAAAAAAAEc/jgkyZVPBTO8AP96wxpzcJyP1vmOph5oSgCLcBGAsYHQ/s881/Screen%2BShot%2B2021-08-08%2Bat%2B10.57.44%2BPM.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVHhn8vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-4W2p9gXD1PQ/YRDD972-OPI/AAAAAAAAAEc/jgkyZVPBTO8AP96wxpzcJyP1vmOph5oSgCLcBGAsYHQ/w640-h576/Screen%252BShot%252B2021-08-08%252Bat%252B10.57.44%252BPM.png" alt="When to use Embed Data Model Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference-data-model-pattern"&gt;
  &lt;/a&gt;
  Reference data model pattern
&lt;/h4&gt;

&lt;p&gt;As long as we have less data to embed, we are good with Embedding Schema design. For one-one and one-few relationship entities, Embedding Data model pattern is the best choice.&lt;/p&gt;

&lt;p&gt;But if we have too much data to embed, for one-many relationship entities where the child documents can grow above the limit or where the data might change frequently, it is better to go Referencing data model pattern.&lt;/p&gt;

&lt;p&gt;For example, a library product catalog can have "n" number of book items which keep changing on a daily basis and it can experience growth regularly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product_Catalog&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“Product_Catolog” : 
{ 
  “id”: “1”, 
  “libraryname”: “&amp;lt;&amp;lt;libraryname&amp;gt;&amp;gt;”, 
  “product_catalog_no”: “1234”, 
  “books”: [“BookId(‘1111’)”, “BookId(‘2222’)”, “BookId(‘3333’)”] 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“books” :[ 
 { 
   “_id” : “Id(‘1111’)”, 
   “title” : “Book 1111”, 
   “author” : “Author 1111”, 
   “qty”: “10”, 
   “price”:” 24.99" 
 } 
 { 
   “_id” : “Id(‘2222’)”, 
   “title” : “Book 2222”, 
   “author” : “Author 2222”, 
   “qty”: “15”, 
   “price”:” 30.99" 
 } 
 { 
   “_id” : “Id(‘3333’)”, 
   “title” : “Book 3333”, 
   “author” : “Author 3333”, 
   “qty”: “20”, 
   “price”:” 14.99" 
 } 
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, our book documents are independent of the parent product_catalog document. Any changes to the book documents can be updated separately.&lt;/p&gt;

&lt;p&gt;Another key examples for frequent data updates are weather, stock exchange etc., where we can expect changes consistently. For these examples, embedding data model pattern may not be a good choice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-PtSjeRwX-Ho/YRDEm6Q_uEI/AAAAAAAAAEk/1Ij2Zwl-FRMcdtc029DXd_s9H-2DPvBmQCLcBGAsYHQ/s911/Screen%2BShot%2B2021-08-08%2Bat%2B11.00.18%2BPM.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l2jFbU6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-PtSjeRwX-Ho/YRDEm6Q_uEI/AAAAAAAAAEk/1Ij2Zwl-FRMcdtc029DXd_s9H-2DPvBmQCLcBGAsYHQ/w640-h544/Screen%252BShot%252B2021-08-08%252Bat%252B11.00.18%252BPM.png" alt="When to use Reference Data Model Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a nutshell, there are different ways we can model our data in Mongo DB by embedding data or by referencing documents similar to normalizing data in SQL.&lt;/p&gt;

&lt;p&gt;By using these two data model patterns, we can make efficient, scalable and powerful queries to documents that are completely very useful and impactful for your applications.&lt;/p&gt;

&lt;p&gt;Based on my learning and experience, I have only touched a bit about Embedding and Referencing schema designs. There are still lot to read and learn about all different one-one, one-few, one-many, many-many relationship examples to know more detail about these data model patterns and best practices.&lt;/p&gt;

&lt;p&gt;Please check out the official Mongo DB and Azure Cosmos DB documentation for further learning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-vhy2e5MLeJM/YRDFn_pkmgI/AAAAAAAAAEs/UzqE4Echs9M0NuCwcKRtWK_m0m6ca5jrgCLcBGAsYHQ/s1026/Screen%2BShot%2B2021-08-08%2Bat%2B11.04.56%2BPM.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKTUdsrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-vhy2e5MLeJM/YRDFn_pkmgI/AAAAAAAAAEs/UzqE4Echs9M0NuCwcKRtWK_m0m6ca5jrgCLcBGAsYHQ/w640-h134/Screen%252BShot%252B2021-08-08%252Bat%252B11.04.56%252BPM.png" alt="Embed vs Reference Summary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h3&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share this article. Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for more related tips and posts.&lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>mongodb</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>The Self Provisioning Runtime</title>
      <author>swyx</author>
      <pubDate>Mon, 30 Aug 2021 01:02:48 +0000</pubDate>
      <link>https://dev.to/swyx/the-self-provisioning-runtime-3g6d</link>
      <guid>https://dev.to/swyx/the-self-provisioning-runtime-3g6d</guid>
      <description>&lt;p&gt;If the Platonic ideal of Developer Experience is a world where you "&lt;a href="https://twitter.com/swyx/status/1428740355994767369"&gt;Just Write Business Logic&lt;/a&gt;", the logical endgame is a language+infrastructure combination that figures out everything else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6WvO-jzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3pfp9ohds23tfhehm6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6WvO-jzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3pfp9ohds23tfhehm6p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two paraphrases as assertions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People who are really serious about developer experience should make their own programming language. (&lt;a href="https://www.brainyquote.com/quotes/alan_kay_375550"&gt;quote&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Developer Experience advances by extending the number of important problems our code handles without thinking of them. (&lt;a href="https://en.wikiquote.org/wiki/Alfred_North_Whitehead#:~:text=Civilization%20advances%20by%20extending%20the,be%20made%20at%20decisive%20moments."&gt;quote&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I feel a strong intuition of what the future of programming languages holds for practical (non-academic) developers, but lack the formal background to fully specify it. I'll write down the parts of the elephant I feel, and hope that the rest is so obvious that you, dear reader, shout and scream at me to fill in the blanks of my ignorance. &lt;em&gt;Please get in touch!!! My ignorance could fill a (blank) book and I need to know who to follow and what to read.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My central assertion&lt;/strong&gt;: Advancements in two fields — programming languages and cloud infrastructure — will converge in a single paradigm: where all resources required by a program will be &lt;strong&gt;automatically&lt;/strong&gt; provisioned, and optimized, &lt;em&gt;by the environment that runs it&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-experience-in-languages"&gt;
  &lt;/a&gt;
  Developer Experience in Languages
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I am going to grossly oversimplify in order to make a point, which will infuriate some of you. I apologize in advance. It bothers me too but I did it anyway to strip out noise. If you have better examples to offer, please get in touch!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of Java's key advantages over C++ was its automatic garbage collection, whereas one of Go's key advantages over Java is its native CSP model. At a 50,000 ft view you can see languages as advancing by the number of hard problems that are elegantly solved by convention or language feature.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5a9qYNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuhhzfjn1fshlbuyyhxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5a9qYNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuhhzfjn1fshlbuyyhxa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've drawn the above chart as though Go is the perfect end state of things, but I want you to know that that is more due to my own lack of knowledge about what else could be abstracted. &lt;a href="https://excalidraw.com/#json=5072020500905984,BgzMaD3_h6g46pLzHpPBcg"&gt;Please improve it if you can&lt;/a&gt; and I'll update and credit you. Adrian Colyer also has &lt;a href="https://blog.acolyer.org/2019/01/25/programming-paradigms-for-dummies-what-every-programmer-should-know/"&gt;this work of art&lt;/a&gt; which should satisfy the more rigorously inclined:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIWYxrQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo0cn6cme96kmgyn7q5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIWYxrQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo0cn6cme96kmgyn7q5p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my oversimplistic interpretation, programming language advancement (and improvement in developer experience) could be viewed as the identification of programming chores that can be cleanly extracted into some shared codebase/convention with almost no loss in power.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we can clearly define a new chore, we can make it a language feature.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A "language paradigm" doesn't have to be a standalone, full fledged new-parser-lexer-required programming language to do this job. Every framework, from React to Rails, parasitically imposes its own grammar and rules atop a host language, and good API design is indistinguishable from language design. &lt;em&gt;(I gave a talk on &lt;a href="https://www.youtube.com/watch?v=Dz4q_bNDqfo"&gt;React-as-Language&lt;/a&gt; last year if you are interested in more on this.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, language development to date has mostly proceeded agnostic to infrastructure concerns, at the exact same time when infrastructure engineers are embracing languages to solve their problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-experience-in-infrastructure"&gt;
  &lt;/a&gt;
  Developer Experience in Infrastructure
&lt;/h2&gt;

&lt;p&gt;What we lost when we &lt;a href="https://www.notion.so/ff8a4f6757286444fa20b43f6b98b205"&gt;broke up the monolith&lt;/a&gt; to move to the cloud was the assumption that everything our program needed would be in the box our program ran in. Suddenly we needed to provision storage, databases, VMs, containers, clusters, message queues, identity providers, gateways, and more and more and more vendor logos.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i758xXKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E7-aTZlVgAMWjo5.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="swyx profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        swyx
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I have updated the meme&lt;br&gt;&lt;br&gt;pray i don't update it further &lt;a href="https://t.co/u40HMAdd3p"&gt;twitter.com/swyx/status/14…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:59 PM - 04 Aug 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            swyx
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

        &lt;/div&gt;
        &lt;a class="mentioned-user" href="https://dev.to/brianleroux"&gt;@brianleroux&lt;/a&gt;
 https://t.co/EnwmCLdf1I
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1423025792783568899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1423025792783568899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1423025792783568899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Managing all this by hand was impossible, so we moved toward declarative infrastructure, variously called Programmable Infrastructure or Infrastructure as Code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_2sxTGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1vy6bl5wdvonqgxqpg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_2sxTGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1vy6bl5wdvonqgxqpg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works until you are knee deep in 30 minute debug loops pushing thousands of lines of YAML to see if &lt;em&gt;this&lt;/em&gt; time it'll work, and start wishing for mature software engineering tooling like testing, code reuse, and linting/completions. At least that's how I see AWS CDK:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbDb7Ob0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ist7stz9u9k9kdaslkzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbDb7Ob0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ist7stz9u9k9kdaslkzr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The serverless movement started off with simple stateless functions like AWS Lambda, but with the advent of container based solutions like &lt;a href="https://aws.amazon.com/fargate/"&gt;AWS Fargate&lt;/a&gt; and &lt;a href="https://cloud.google.com/run"&gt;Google Cloud Run&lt;/a&gt;, "serverless" has now come to mean autoscaling. This was another "chore" that is now increasingly part of every DevOps toolkit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-ejmkJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs7tvd6o5kp9wx05maaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-ejmkJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs7tvd6o5kp9wx05maaz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://excalidraw.com/#json=5169064850751488,0NoC4TlNlKx1UWvwlH9ZaA"&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;But, just like with languages, &lt;strong&gt;there are new chores to be found&lt;/strong&gt;. The original intent of the DevOps movement was getting Devs to do their own Ops, but it feels like the outcome was mostly Ops people doing more Dev to keep up with the Joneses. If DevOps was successful enough, or if platforms were good enough at their jobs, Ops work should disappear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eliminating-the-devops-divide"&gt;
  &lt;/a&gt;
  Eliminating the DevOps divide
&lt;/h2&gt;

&lt;p&gt;With a cutting edge stack today, you can fully describe your AWS Infrastructure in TypeScript, and write your application code in TypeScript... but yet these are separately executed and run things, with gobs of glue code between them (both explicit, in the form of connection strings, resource identifiers and client secrets, and implicit, in the form of SDKs).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dabit3/next.js-cdk-amplify-workshop"&gt;Check out this example&lt;/a&gt; (from my former team at AWS! no diss intended at all). Here's just a glimpse of the Infra setup code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// // Infra code&lt;/span&gt;
&lt;span class="c1"&gt;// lib/next-backend-stack.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cognito&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-cognito&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-appsync&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ddb&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// lib/next-backend-stack.ts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GraphqlApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-blog-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cdk-blog-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;logConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fieldLogLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FieldLogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./graphql/schema.graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;authorizationConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;defaultAuthorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;authorizationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AuthorizationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;apiKeyConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;expires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Expiration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;additionalAuthorizationModes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="na"&gt;authorizationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AuthorizationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;USER_POOL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;userPoolConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;userPool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Create the function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AppSyncPostHandler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_14_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main.handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lambda-fns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;memorySize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Set the new Lambda function as a data source for the AppSync API&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lambdaDs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLambdaDataSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lambdaDatasource&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postLambda&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a glimpse at the app code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;docClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DynamoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DocumentClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPostById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POST_TABLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;docClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DynamoDB error: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getPostById&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's still an awful lot of code between your app and its platform.&lt;/p&gt;

&lt;p&gt;What will it take to "just write business logic" and have the platform figure out the rest?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6WvO-jzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3pfp9ohds23tfhehm6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6WvO-jzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3pfp9ohds23tfhehm6p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://excalidraw.com/#json=5930939972583424,_n4oZLK-FuDS_vXS0icDQQ"&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;On a very trivial basis, we already have this. Where Heroku used to require buildpacks, most PaaS platforms now have heuristics that determine the project type for build and environment setup, automatically adapting for when you have a &lt;code&gt;Gemfile&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;.nvmrc&lt;/code&gt;, or &lt;code&gt;docker-compose.yml&lt;/code&gt;. Platforms like Netlify and Vercel are going deeper than language runtimes, &lt;a href="https://www.netlify.com/blog/2019/04/24/zero-config-yet-technology-agnostic-how-netlify-dev-detectors-work/"&gt;detecting frameworks&lt;/a&gt; and static site generators, but they are still mostly focused on build dependencies.&lt;/p&gt;

&lt;p&gt;Self-provisioning can go further than just smarter build automation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Imagine if you could provision a DynamoDB table by just requiring &lt;code&gt;@begin/data&lt;/code&gt; in your app code (similar but not exactly like &lt;a href="https://docs.begin.com/en/data/begin-data"&gt;Begin Data&lt;/a&gt;!)&lt;/li&gt;
&lt;li&gt;Vercel and &lt;a href="https://docs.netlify.com/configure-builds/common-configurations/next-js/"&gt;Netlify&lt;/a&gt; set up serverless functions based on Next.js routes and specially designated folders.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.netlify.com/forms/setup/"&gt;Netlify Forms&lt;/a&gt; scan your generated HTML and provisions any form endpoints and storage needed (see my &lt;a href="https://github.com/sw-yx/gatsby-netlify-form-example-v2"&gt;old Gatsby demo here&lt;/a&gt; to see it in action or &lt;a href="https://www.swyx.io/sveltekit-netlify-forms/"&gt;my recent one with Svelte&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.pulumi.com/blog/building-your-first-serverless-app-using-only-javascript/"&gt;Pulumi&lt;/a&gt; isn't automatic but combines app and provisioning logic in a very neatly concise way that would basically function as though the provisioning and app logic were actually one.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wasp-lang/wasp"&gt;Wasp-lang&lt;/a&gt; combines React routing and the Prisma schema together in a different way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this only scratches the surface of what is possible when you merge language and infrastructure. If you go down &lt;a href="https://www.notion.so/ff8a4f6757286444fa20b43f6b98b205"&gt;the list of Jobs to Be Done of a Cloud&lt;/a&gt; you can see all of these can be automatically provisioned as part of the language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#temporalio"&gt;
  &lt;/a&gt;
  Temporal.io
&lt;/h2&gt;

&lt;p&gt;Part of &lt;a href="https://www.swyx.io/why-temporal/"&gt;my original Temporal pitch&lt;/a&gt; made reference to the fact that you could dynamically create task queues and timers in your application code, and Temporal would take care of it for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// task queue&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;workflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workflowClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-workflow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;taskQueue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-task-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// timer&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasUserResponded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;waitForUser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;hasUserResponded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;DAYS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// durably set timer for 1 week!&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hasUserResponded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ... remind user or something&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because Temporal Server already contains the infrastructure to handle tasks and timers, Temporal &lt;em&gt;users&lt;/em&gt; can essentially offload that problem to a central "Platform" or "Infrastructure" team. Still, as of today this cannot be considered self-provisioning, because Temporal still relies on manual monitoring and scaling (this is the central problem that Temporal Cloud solves).&lt;/p&gt;

&lt;p&gt;Besides, reliable async primitives are great, but far from the totality of infrastructure that a modern app requires. &lt;strong&gt;I want ONE paradigm that auto-provisions ALL of it&lt;/strong&gt; based on the code I write*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#runtime-not-language"&gt;
  &lt;/a&gt;
  Runtime, not Language?
&lt;/h2&gt;

&lt;p&gt;Does it &lt;em&gt;have&lt;/em&gt; to be a new language? This is what Paul Biggar is working on with &lt;a href="https://docs.darklang.com/datastores/"&gt;Darklang&lt;/a&gt;, where Datastores are colocated with HTTP routing and Cron and Functions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wyzRBQz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dmpkra9yjktktoyye98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wyzRBQz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dmpkra9yjktktoyye98.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You not only &lt;em&gt;can't&lt;/em&gt; code against a database that doesn't exist, you can't even code against &lt;em&gt;traffic&lt;/em&gt; that doesn't exist, ensuring your code is always valid (within Dark's universe).&lt;/p&gt;

&lt;p&gt;Even if Dark is too strict for you (as it is for most), you could imagine taking advantage of a strongly typed, purposefully designed language that can be statically analyzed for all its infrastructural dependencies, which then translates to the necessary resource languages of the big clouds.&lt;/p&gt;

&lt;p&gt;My sense is it doesn't &lt;em&gt;have&lt;/em&gt; to be a new language. Imposing special rules on execution and syntax, and taking over the compiler or runtime — we even call our engineers &lt;a href="https://www.notion.so/635c41e4583f45989da524cf14b69751"&gt;Language Runtime Engineers&lt;/a&gt; — may be enough. &lt;/p&gt;

&lt;p&gt;Runtime optimizations are also a &lt;em&gt;huge&lt;/em&gt; opportunity for dynamic (not static + upfront) self-provisioning: after all, what is serverless but a self-provisioning runtime based on traffic?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;People are wondering &lt;a href="http://tagide.com/blog/academia/research-in-programming-languages/"&gt;if there is still anything left to innovate in programming languages&lt;/a&gt;, but I write because I am almost certain that there is. But before we get there, the right move is probably a self provisioning &lt;em&gt;runtime&lt;/em&gt; where we can prototype all these ideas - at the intersection of language and infrastructure.&lt;/p&gt;

</description>
      <category>dx</category>
      <category>ideas</category>
    </item>
    <item>
      <title>VPN Gratuita no Linux  com a ProtonVPN</title>
      <author>Mayanna Oliveira</author>
      <pubDate>Sun, 29 Aug 2021 23:21:42 +0000</pubDate>
      <link>https://dev.to/mayannaoliveira/vpn-gratuita-no-linux-com-a-protonvpn-2ohl</link>
      <guid>https://dev.to/mayannaoliveira/vpn-gratuita-no-linux-com-a-protonvpn-2ohl</guid>
      <description>&lt;p&gt;A protonVPN oferece serviço de VPN gratuitamente. Acompanhe o passo a passo de como instalar e configurar a VPN em seu computador:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observação:&lt;/strong&gt; Busque pelo site da &lt;a href="https://protonvpn.com/free-vpn/"&gt;ProtonVPN&lt;/a&gt; a versão atual para instalação a citada nos passos 6 e 7 foi a  &lt;em&gt;protonvpn-stable-release_1.0.1-1_all.deb&lt;/em&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Acesse o site da &lt;a href="https://protonvpn.com/free-vpn/"&gt;ProtonVPN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Clique no botão de se isncrever.&lt;/li&gt;
&lt;li&gt;Escolha o plano que deseja usar, pode ser o &lt;a href="https://protonvpn.com/pricing"&gt;gratuito ou o pago&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;No &lt;a href="https://account.protonvpn.com/dashboard"&gt;dashboard&lt;/a&gt; tem uma barra lateral clique em "&lt;a href="https://account.protonvpn.com/downloads"&gt;baixar&lt;/a&gt;".&lt;/li&gt;
&lt;li&gt;É possível ver as formas de cpnfigurar a VPN porém o clique em "[Linux]" para baixar e instalar o aplicativo do ProtonVPN.&lt;/li&gt;
&lt;li&gt;Baixe  o arquivo .deb se preferir use o comando &lt;code&gt;https://protonvpn.com/download/protonvpn-stable-release_1.0.1-1_all.deb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instale a o .deb que foi baixado pode ser usando um gerenciador de pacotes ou pelo comando &lt;code&gt;sudo apt-get install protonvpn-stable-release_1.0.1-1_all.deb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Depois via terminal atualize e verifique por atualizações pelos comandos:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;protonvpn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Busque o ícone do ProtonVPN entre os arquivos instalados e clique para iniciar a interface visual.&lt;/li&gt;
&lt;li&gt; Insira o email e senha que foi usou para se inscrever e selecione a VPN que preferir.&lt;/li&gt;
&lt;li&gt; Na barra do Ubuntu será possível ver um ícone de uma chave indicando que a VPN foi ativada.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Caso tenha dúvidas ou esteja usando um outro sistema operacional por favor, leia o &lt;a href="https://protonvpn.com/support/linux-vpn-setup/"&gt;guia de instalação&lt;/a&gt; para entender como configurar e usar a ferramenta. Na área de &lt;a href="https://protonvpn.com/support/"&gt;ajuda do suporte&lt;/a&gt; é possível ter acesso a informações sobre a conta, conteúdo de acesso entre outros.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://protonvpn.com/free-vpn/"&gt;ProtonVPN&lt;/a&gt; e &lt;a href="https://protonvpn.com/support/linux-vpn-setup/"&gt;guia de instalação&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prop%C3%B3sito-dos-artigos-e-postagens"&gt;
  &lt;/a&gt;
  Propósito dos Artigos e Postagens
&lt;/h2&gt;

&lt;p&gt;Eu escrevo esses artigos e postagens para contribuir com a comunidade de Tecnologia da Informação e para compartilhar meu conhecimento e habilidades. A sua interação é muito importante então, compartilhe, curta e divulge essa postagem. Agradeço a todos que tem colaborado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Postagem Disponível&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maosnocodigo.hashnode.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGKwbapT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/%25F0%259F%2593%2583%2520Publicado_no-Hashnode-blue%3F%26style%3Dfor-the-badge%26logoColor%3D00C11C" alt="Hashnode"&gt;&lt;/a&gt; &lt;a href="https://www.evernote.com/shard/s580/sh/15414d07-079a-b55d-320d-6327c0b51901/8978e9e6ad6f351034314b5875485a67"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ped_4h---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Compartilhado%2520no-Evernote-green%3Flogo%3Devernote%26style%3Dfor-the-badge" alt="evernote"&gt;&lt;/a&gt; &lt;a href="https://dev.to/mayannaoliveira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7dZZ_M3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Dispon%25C3%25ADvel%2520no-dev.to-black%3Flogo%3Ddev.to%26style%3Dfor-the-badge" alt="dev.to"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redes sociais&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mayannaoliveira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pQJI-Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-100000%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dwhite" alt="github"&gt;&lt;/a&gt; &lt;a href="https://dev.to/mayannaoliveira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuQ4GWmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/dev.to-100000%3Fstyle%3Dfor-the-badge%26logo%3Ddev.to%26logoColor%3Dwhite" alt="dev.to"&gt;&lt;/a&gt; &lt;a href="//mailto:mayannait@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYAECtfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gmail-D14836%3Fstyle%3Dfor-the-badge%26logo%3Dgmail%26logoColor%3Dwhite%26link%3Dmailto:mayannait%40gmail.com" alt="gmail"&gt;&lt;/a&gt; &lt;a href="https://api.whatsapp.com/message/5XLG4UPSFCNWP1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9iV3HR9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/WhatsApp-25D366%3Fstyle%3Dfor-the-badge%26logo%3Dwhatsapp%26logoColor%3Dwhite" alt="whatsapp"&gt;&lt;/a&gt; &lt;a href="https://linktr.ee/mayannaoliveira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qfz5Cpa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/linktree-39E09B%3Fstyle%3Dfor-the-badge%26logo%3Dlinktree%26logoColor%3Dwhite" alt="linktree"&gt;&lt;/a&gt; &lt;a href="https://www.instagram.com/oliveiramayanna/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg7TEMKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Instagram-E4405F%3Fstyle%3Dfor-the-badge%26logo%3Dinstagram%26logoColor%3Dwhite" alt="instagram"&gt;&lt;/a&gt; &lt;a href="//ttps://twitter.com/oliveiramayanna/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XRTiaB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/twitter-blue%3Fstyle%3Dfor-the-badge%26logo%3Dtwitter%26logoColor%3Dwhite" alt="twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Se inscreva, curta e compartilhe!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Searching Better In Google Using 5 Tricks!</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 29 Aug 2021 22:56:40 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/searching-better-in-google-using-5-tricks-41l1</link>
      <guid>https://dev.to/ayabouchiha/searching-better-in-google-using-5-tricks-41l1</guid>
      <description>&lt;p&gt;Hello everybody, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, today, I'm going to share with you 5 useful tips &amp;amp; tricks to search better on google and find what you want easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related"&gt;
  &lt;/a&gt;
  related
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;related:&lt;a href="http://www.website.com"&gt;www.website.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;related: is a keyword used to find the websites that are like the specified one&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MJlyVOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghy4jk2zouk4uuwckc7r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MJlyVOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghy4jk2zouk4uuwckc7r.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-double-quotes"&gt;
  &lt;/a&gt;
  "" (double quotes)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;"sentence"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;"": helps you to tell the search engine that the results have to include the exact sentence between quotes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q-ftY1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvez8s9sjjjsas7pn3a7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q-ftY1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvez8s9sjjjsas7pn3a7.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#site"&gt;
  &lt;/a&gt;
  site
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;site:&lt;a href="http://www.website.com"&gt;www.website.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;site: is used for searching for something on a specific website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lFvZhHx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z305egl146np950r7psz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lFvZhHx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z305egl146np950r7psz.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-minus"&gt;
  &lt;/a&gt;
  - (minus)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;-word&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;minus: used for excluding and ignoring specific words&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zuv5SWQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1432cwuxogsjyqhvj4z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zuv5SWQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1432cwuxogsjyqhvj4z.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filetype"&gt;
  &lt;/a&gt;
  filetype
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;filetype:extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;filetype: used for specifying the file type of the wanted results&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZX_1fiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6yk4xfhzx702cf3iexf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZX_1fiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6yk4xfhzx702cf3iexf.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eg3wHwXDIEc"&gt;https://www.youtube.com/watch?v=eg3wHwXDIEc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>El amor  por el código sí existe</title>
      <author>Eloy Manuel Chacón Martínez</author>
      <pubDate>Sun, 29 Aug 2021 22:11:24 +0000</pubDate>
      <link>https://dev.to/eloymanuelch/el-amor-por-el-codigo-si-existe-2i6i</link>
      <guid>https://dev.to/eloymanuelch/el-amor-por-el-codigo-si-existe-2i6i</guid>
      <description>&lt;p&gt;Holaaaa Programador... No se trata de cosas banales o simplemente de un enamoramiento pasajero, el código te hace crear, te hace vivir, el código es como el pincel para el pintor, una herramienta capaz de hacernos crear cosas maravillosas, de la nada a algo que muchas personas pueden ver, usar, disfrutar, aprender, trabajar, en fin hacer que sus vidas sean más fáciles.&lt;/p&gt;

&lt;p&gt;Nosotros los programadores somos los Da Vinci del siglo XXI, con nuestros código hemos mantenido a la gente en contacto gracias a las redes sociales, los hemos entretenido y hasta enseñado muchas cosas con videos, hemos ayudado a millones de empresas a mostrar sus productos y servicios, hemos y hemos y hemos... la lista es interminable, pero ¿cómo inició esta historia de amor?&lt;/p&gt;

&lt;p&gt;Todo inició con un Hola Mundo, que alegría sentimos esa primera vez cuando el Hola Mundo apareció en nuestro navegador, fue amor a primera vista, eso no quiere decir que todo sea color de rosa, porque como en cualquier relación hay altas y bajas, como esa primera cuando nos salió Error 500, aaaarrrr me acuerdo y me lleno de coraje, porque son esas cosas incomprensibles que nunca lograremos entender, pero bueno unas cuantas respiraciones y unas cuantas caricias (ajustes) y ohalaaaa todo vuelve a la normalidad.&lt;/p&gt;

&lt;p&gt;Durante nuestra vida como programador conoceremos diferentes personas con idiomas diferentes (lenguajes de programación) y con personalidades diferentes (frameworks), algunos les gustan las tradicionales y con mucha experiencia y otros se la pasan de mujeriegos saltando de una en una, pero esta bien, porque a diferencia de la vida real, en nuestro mundo de programadores esta bien enamorarse de mucha gente, claro está siempre existirá una que será nuestra favorita.&lt;/p&gt;

&lt;p&gt;Así es como esta historia de amor, vive en nuestra computadora y en nuestra mente, yo solo espero seguir escribiendo código por muchísimos años hasta que sea un viejito, me imagino que ya para entonces si mis mano no dan para escribir pueda dictarle a algún both lo que pasa por mi mente.&lt;/p&gt;

&lt;p&gt;Saludos,&lt;/p&gt;

&lt;p&gt;Eloy Manuel&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codequality</category>
      <category>spanish</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Introduction to computer programming for coders</title>
      <author>Fabala Dibbasey</author>
      <pubDate>Sun, 29 Aug 2021 22:04:51 +0000</pubDate>
      <link>https://dev.to/fabaladibbasey/introduction-to-computer-programming-for-coders-1ga6</link>
      <guid>https://dev.to/fabaladibbasey/introduction-to-computer-programming-for-coders-1ga6</guid>
      <description>&lt;p&gt;&lt;strong&gt;WELCOME&lt;/strong&gt;&lt;br&gt;
In this series of lessons, I am going to take you from absolutely knowing nothing/less about programming/coding to been comfortable with instructing computers to do anything for you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#computers"&gt;
  &lt;/a&gt;
  Computers?
&lt;/h2&gt;

&lt;p&gt;If you're reading this it means you already have a computer, Phone or PC/Laptop. Now can you answer the question, &lt;strong&gt;what are computers?&lt;/strong&gt;&lt;br&gt;
You're right! It's just the device you've with you.&lt;br&gt;
Let's discuss the device in detail. It's powered by electricity, it's capable of taking in data (input), can keep the data (storage), processing the data (algorithms) and finally give out the information (output) and this is in fact the definition of computers.&lt;/p&gt;

&lt;p&gt;Today computers have reached to a point that human don't only compare them to us but they've declared that computers are smart/intelligent than us.&lt;br&gt;
Those who said that or think so doesn't understand computers.&lt;br&gt;
Computer are stupid even though they can store billions of data (for example 1.5 million books of standard size),  and can perform a billion of calculations per second! (two operations in same time light travels 1 foot).&lt;br&gt;
They existed because of us, they only do what we instructed them to do i.e garbage in, garbage out. This means even if we mistakenly instructed them they'll still carry out the instruction because they cannot realize our mistake.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#computer-science-and-programming"&gt;
  &lt;/a&gt;
  Computer Science and Programming
&lt;/h2&gt;

&lt;p&gt;Computer science is fundamentally problem solving. And in this series of lessons, we'll focus on speaking to computers to do tasks for us. Speaking to computers? Ohh yes, Computers speak the language 0s, and 1s just like we human speaks in decimal base for instance, &lt;code&gt;2021&lt;/code&gt; in computer it's &lt;code&gt;11111100101&lt;/code&gt;. I did high school math to convert decimal to binary. Each digit in binary represent a bit.&lt;/p&gt;

&lt;p&gt;It make sense that computers can represent decimal in binary, What about texts?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#representation-of-texts-in-computer"&gt;
  &lt;/a&gt;
  Representation of texts in Computer
&lt;/h2&gt;

&lt;p&gt;People before us have decided base on a standard to map each character (capital and small letters, punctuation) to a number. for instance, &lt;code&gt;"A"&lt;/code&gt; ==&amp;gt; &lt;code&gt;65&lt;/code&gt;,  &lt;code&gt;"B"&lt;/code&gt; ==&amp;gt; &lt;code&gt;66&lt;/code&gt; and so on. Read more about  &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt; American Standard Code for Information Interchange.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nZNxBVlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630248627025/A7k_L2qsi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nZNxBVlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630248627025/A7k_L2qsi.png" alt="ASCII-Table-wide.svg.png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://commons.wikimedia.org/wiki/File:ASCII-Table-wide.svg"&gt;Image Source&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Receiving the text &lt;code&gt;"HELLO"&lt;/code&gt; ==&amp;gt; &lt;code&gt;"72", "69", "76", "76", "79"&lt;/code&gt; respectively. And in bits it's &lt;code&gt;01001000, 01000101, 01001100, 01001100, 01001100&lt;/code&gt;. Each letter is typically represented with a pattern of eight bits, or a &lt;strong&gt;byte&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
8 bits == byte&lt;/li&gt;
&lt;li&gt;
1024 bytes == kilobyte&lt;/li&gt;
&lt;li&gt;
1024 kilobytes == megabyte&lt;/li&gt;
&lt;li&gt;
1024 megabyte == gigabyte and so on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However some think it's &lt;code&gt;1000&lt;/code&gt; instead of &lt;code&gt;1024&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;There's another standard,  &lt;a href="https://en.wikipedia.org/wiki/Unicode"&gt;&lt;strong&gt;Unicode&lt;/strong&gt;&lt;/a&gt;  that is an extension to &lt;strong&gt;ASCII&lt;/strong&gt;. It contains all those characters like ancient symbols, emojis and many more that do not exist in &lt;strong&gt;ASCII&lt;/strong&gt; standard.&lt;/p&gt;

&lt;p&gt;Then how images, videos and audios are represented in computers? &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SLr_XJpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630252691378/jUWisp5RL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLr_XJpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630252691378/jUWisp5RL.jpeg" alt="newProfile.jpg"&gt;&lt;/a&gt;&lt;br&gt;
I don't know if you can observe that images are just thousands or millions of square boxes called pixels combined.&lt;br&gt;
We can achieve pixels by zooming the image 2000+% like the image shown below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dIBfAIBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630254000875/O0xJz20e2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dIBfAIBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630254000875/O0xJz20e2.png" alt="zoomedImage.png"&gt;&lt;/a&gt;&lt;br&gt;
and those square boxes or pixel are nothing but colors. So our concern should be how computers represent colors? &lt;br&gt;
There were many system of representing colors but the most commonly use is &lt;strong&gt;RGB&lt;/strong&gt;. Some amount of red, green and blue can be combine to produce millions of colors. for example, &lt;code&gt;rgb(23, 116, 223)&lt;/code&gt; will produce the color below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJfGHxWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630254565152/7pdXBDldW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJfGHxWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630254565152/7pdXBDldW.png" alt="pixel.png"&gt;&lt;/a&gt;&lt;br&gt;
As you can see, there's numbers mapping to colors. &lt;code&gt;rgb ==&amp;gt; 23, 116, 223&lt;/code&gt;.&lt;br&gt;
The resolution of an image is the number of pixels there are, horizontally and vertically, so a high-resolution image will have more pixels and require more bytes to be stored.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#videos-and-audios"&gt;
  &lt;/a&gt;
  Videos and Audios
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Videos: If we break videos down, we'll see it contains thousands of images flipping per second to create the motion as in this &lt;a href="https://www.youtube.com/watch?v=p3q9MM__h-M"&gt;Youtube video, flipping&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Audios uses the concept of sound wave to map sound frequency to numbers.  Read more about &lt;a href="https://teachcomputerscience.com/sound-representation/"&gt;sound representation in computers&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#programming-languages"&gt;
  &lt;/a&gt;
  Programming Languages
&lt;/h2&gt;

&lt;p&gt;Earlier I said that computers only understand &lt;code&gt;0s and 1s&lt;/code&gt; but imagine if we are to communicate with computer to build a complex system or application like Twitter with &lt;code&gt;0s and 1s&lt;/code&gt; it will seems impossible not alone &lt;strong&gt;HARD&lt;/strong&gt;. The same humans before us has created a languages which are more human friendly. Today, we've more than 500 hundred programming languages. We can use those languages to instruct computers. The &lt;code&gt;Code&lt;/code&gt; we write in those languages will be compiled/interpreted to &lt;code&gt;Machine code&lt;/code&gt;, a codes which computers can understand.&lt;/p&gt;

&lt;p&gt;Out of 500 plus programming languages, ** What is the best programming language? **&lt;br&gt;
There is no such the best programming language. Each have their strengths and weaknesses and there are Domain specific languages, highly specialized mini-programming languages for example &lt;code&gt;regular expressions&lt;/code&gt; for string manipulation, and &lt;code&gt;SQL&lt;/code&gt; for database manipulation.&lt;br&gt;
&lt;strong&gt;Whatever can be compute in one programming language can be compute in other programming language.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#computers-vs-human-being"&gt;
  &lt;/a&gt;
  Computers vs Human being
&lt;/h2&gt;

&lt;p&gt;Let's say you're given a Phone Book which consist of the list of the following names,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[ Omar, Mamudo, Amie, Fabala, Muhammed  ]&lt;/code&gt;&lt;br&gt;
Assuming each name on the list is on a page and page start from 1.&lt;br&gt;
You can tell a human being to find the name, &lt;code&gt;Fabala&lt;/code&gt; and you're not going to tell him/her how to go about in retrieving the name, &lt;code&gt;Fabala&lt;/code&gt; from the phone book.&lt;br&gt;
S/He will have to find an approach to check if &lt;code&gt;Fabala&lt;/code&gt; is on the Phone Book? and if yes will tell us at which page. This very human being can start searching from left/right of the page and turning one page at a time. This is because human being understand &lt;code&gt;Declarative Knowledge&lt;/code&gt;. &lt;code&gt;Declarative knowledge&lt;/code&gt; is a statement of fact like find me the name, "Fabala" from the Phone Book.&lt;/p&gt;

&lt;p&gt;Whereas, Computers understand &lt;code&gt;Imperative Knowledge&lt;/code&gt;, a recipe or how to knowledge. If the same problem, finding "Fabala" from the phone book given to Computer, you need to tell it how to go about in finding the name, "Fabala".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Instructing Computers to find "Fabala" from the phone Book&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pick up the Phone Book&lt;/li&gt;
&lt;li&gt;Start from the first page on left side of the Phone Book&lt;/li&gt;
&lt;li&gt;Check if name on the page is "Fabala", tell us the page number and stop searching&lt;/li&gt;
&lt;li&gt;Else, Go to the next page and go back to step &lt;strong&gt;3&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;When no page is left to be search, tell us "Fabala" doesn't exist in the Phone Book &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;The steps/approaches we took to find the name is what we called an &lt;strong&gt;Algorithms&lt;/strong&gt;, step-by-step instructions for solving problems.&lt;br&gt;
What we did above is representation of our algorithms in precise English and that is what is refer to as &lt;code&gt;Pseudocode&lt;/code&gt;, representing algorithms in Human Languages.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#actual-code"&gt;
  &lt;/a&gt;
  Actual code
&lt;/h3&gt;

&lt;p&gt;I do not expect you to fully understand the code below. I just want you to see how &lt;code&gt;Actual code&lt;/code&gt; is different from the &lt;code&gt;Pseudocode&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;phone_book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;'Omar'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Mamudo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Amie'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Fabala'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Muhammed'&lt;/span&gt;  &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;'''
    input: phone book consisting of names, and the name to be search
    output: return the page number of the name if it exist
    else return 'Not existed'

    '''&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_book&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;phone_book&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Page '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Not existed'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Fabala'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above is written in &lt;strong&gt;Python Programming Language&lt;/strong&gt; which we're going to use throughout this series to represent our logic but we're going to focus more on problem solving (Programming) than the coding part of it.&lt;/p&gt;

&lt;p&gt;Thanks for reading and see you in the next topic, &lt;strong&gt;Algorithms&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Don't forget to like, share with those it will help and finally lets connect on  &lt;a href="https://twitter.com/DibbaseyFabala"&gt;Twitter&lt;/a&gt; and  &lt;a href="https://www.linkedin.com/in/fabala-dibbasey-b69a27207/"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Amazon WorkDocs</title>
      <author>Luqman Bello Olalekan</author>
      <pubDate>Sun, 29 Aug 2021 21:49:17 +0000</pubDate>
      <link>https://dev.to/luqmanbello/amazon-workdocs-28hm</link>
      <guid>https://dev.to/luqmanbello/amazon-workdocs-28hm</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLh4THnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c52nj4ibpyyp7yaj5zw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLh4THnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c52nj4ibpyyp7yaj5zw6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon WorkDocs is a fully managed, secure content creation, storage, and collaboration service. With Amazon WorkDocs, you can easily create, edit, and share content, and because it’s stored centrally on AWS, access it from anywhere on any device. Amazon WorkDocs makes it easy to collaborate with others, and lets you easily share content, provide rich feedback, and collaboratively edit documents. You can use Amazon WorkDocs to retire legacy file share infrastructure by moving file shares to the cloud. Amazon WorkDocs lets you integrate with your existing systems, and offers a rich API so that you can develop your own content-rich applications. Amazon WorkDocs is built on AWS, where your content is secured on the world's largest cloud infrastructure.&lt;/p&gt;

&lt;p&gt;With Amazon WorkDocs, there are no upfront fees or commitments. You pay only for active user accounts, and the storage you use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Migrate your on premise file servers and reduce costs significantly&lt;/li&gt;
&lt;li&gt;Securely share with internal teams and external users in real-time&lt;/li&gt;
&lt;li&gt;Secure your content in the cloud&lt;/li&gt;
&lt;li&gt;Bring content into your applications and processes&lt;/li&gt;
&lt;li&gt;Route your documents using approval workflow&lt;/li&gt;
&lt;li&gt;Extend your desktop to the cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the use case of the Amazon WorkDocs is in helping to replace expensive legacy file sharing services. This system are mostly referred to as ECM solutions. With Amazon WorkDocs, you can easily migrate existing content from legacy network file shares to the cloud and your users can continue to access all their individual and team’s shared content from their native desktop file systems through WorkDocs Drive, or through the web user interface or mobile application.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ecm</category>
      <category>productivity</category>
    </item>
    <item>
      <title>100 days of hacking</title>
      <author>Camila Vilarinho</author>
      <pubDate>Sun, 29 Aug 2021 21:41:55 +0000</pubDate>
      <link>https://dev.to/camilaavilarnho/100-days-of-hacking-4n13</link>
      <guid>https://dev.to/camilaavilarnho/100-days-of-hacking-4n13</guid>
      <description>&lt;p&gt;The #100daysofCode challenge was created by &lt;a href="https://twitter.com/ka11away"&gt;Alex Kallaway&lt;/a&gt; when he decided that he wanted to become a better programmer. In order to do that, he made a public commitment to code for 100 days in a row, thus helping him to create a new habit. By sharing about his challenge daily, he ended up encouraging a lot of people to do the same and created a movement of people looking for self improvement that goes beyond coding. &lt;/p&gt;

&lt;p&gt;Today this movement encompasses several others challenges in the #100DaysOfX, like one hundred days of reading, exercise, foreign languages and even the one hundred days without (#100daysWithout) to help people looking to quit a habit.&lt;/p&gt;

&lt;p&gt;It's proven that making a public commitment improves people’s ability to stick to changes and create new habits. This works very well with me: when I make a commitment with someone it's very important to me to keep what I promised. Even if no one is looking or asking me for updates, if I make a commitment I feel obligated to go all the way.&lt;/p&gt;

&lt;p&gt;This is a great thing, especially if you don't stick to your plans or projects for long like me. That's why I decided to start this challenge to encourage myself to learn more about what I've been most interested in lately: Hacking!*  🎉&lt;/p&gt;

&lt;p&gt;My interest in hacking started a long time ago, but only now I decided to overcome my fear and really learn more about the subject. My sister says something that makes a lot of sense: "When you put yourself in motion things happen". &lt;/p&gt;

&lt;p&gt;And it really happened: when I started to learn more about the subject and follow people that talked about hacking some really cool things started to happen, one of them was being selected to participate in the Bugcrowd Mentorship Program. Bugcrowd is a cybersecurity platform where companies have their bug bounty program to encourage security researchers to test their systems and identify vulnerabilities. &lt;/p&gt;

&lt;p&gt;It has being a great learning opportunity, but sometimes work, life and other things gets in the way and I end up not prioritising my hacking studies. So the focus of  my 100 days of hacking will be to study, practice and look for security vulnerabilities in web applications. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Motivations&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be able to track my learning progress.&lt;/li&gt;
&lt;li&gt;Make better use of the opportunity to be part of the Bugcrowd Mentoring Program.&lt;/li&gt;
&lt;li&gt;An opportunity to practice what I've been wanting to do for a while, which is to write more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monday to Friday: study for 1h (theory + practice in labs)&lt;/li&gt;
&lt;li&gt;Saturday and Sunday: Bug hunting for 2 hours&lt;/li&gt;
&lt;li&gt;Write a blog post about what I learned in the week.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goal at the end of the 100 days: &lt;strong&gt;find a valid bug 🐞&lt;/strong&gt;         &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;By hacking I'm referring to Web Application Hacking, there are other types but my focus is this one.&lt;/em&gt;&lt;br&gt;&lt;br&gt;
*&lt;em&gt;I'm also referring to ethical hacking&lt;/em&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>100daysofhacking</category>
      <category>selfimprovement</category>
    </item>
    <item>
      <title>"npm" Command Cheat Sheet</title>
      <author>geetcloud</author>
      <pubDate>Sun, 29 Aug 2021 21:21:57 +0000</pubDate>
      <link>https://dev.to/geetcloud/npm-command-cheat-sheet-3j27</link>
      <guid>https://dev.to/geetcloud/npm-command-cheat-sheet-3j27</guid>
      <description>&lt;p&gt;Welcome back to a new blog post. Throughout my uses of npm and creating applications in angular, I have found a set of commands that I keep coming back to to use again and again. While they're all used very commonly, it might be heard to remember them all of the time. So without any further ado, here they are for your convenient use! Hope it helps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-install-nodejs"&gt;
  &lt;/a&gt;
  To install node.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; # To install node.js
 # Install from the below official download link.
 # https://nodejs.org/en/#download

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-install-typescript"&gt;
  &lt;/a&gt;
  To install typescript
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install typescript
npm install typescript -g

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-install-angular-cli"&gt;
  &lt;/a&gt;
  To install angular CLI
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#  To install angular CLI
npm install @angular/cli -g

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-check-angular-version"&gt;
  &lt;/a&gt;
  To check angular version
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To check angular version
ng version

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-check-the-existing-installed-paths-of-nodejs"&gt;
  &lt;/a&gt;
  To check the existing installed paths of node.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To check the existing installed paths of node.js
where node

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-create-new-angular-app"&gt;
  &lt;/a&gt;
  To create new angular app
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To create new angular app
ng new &amp;lt;app_name&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-create-module"&gt;
  &lt;/a&gt;
  To create module
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To create module
ng g module &amp;lt;module_name&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-install-dependencies"&gt;
  &lt;/a&gt;
  To install dependencies
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install dependencies
npm install

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-run-or-serve-app"&gt;
  &lt;/a&gt;
  To run or serve app
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To run/serve app
#To serve app =&amp;gt; cd to the app folder and run
#Note:- npm start also will call ng serve and start the application.
ng serve

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-create-service"&gt;
  &lt;/a&gt;
  To create service
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To create service
ng gnerate service service_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-generate-interface"&gt;
  &lt;/a&gt;
  To generate interface
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To generate interface
ng generate interface git-search

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-install-latest-angularfire-and-firebase-for-latest-angular-cli-7x"&gt;
  &lt;/a&gt;
  To install latest AngularFire and Firebase for latest Angular CLI 7.x
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install latest AngularFire and Firebase for latest Angular CLI 7.x
npm install firebase @angular/fire --save

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-skipavoid-long-path-in-terminal-shortcut"&gt;
  &lt;/a&gt;
  To skip/avoid long path in terminal (shortcut)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To skip/avoid long path in terminal (shortcut)
prompt $$

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h3&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share this article. Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for more related tips and posts.&lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>npm</category>
      <category>firebase</category>
      <category>angular</category>
      <category>node</category>
    </item>
    <item>
      <title>[1] Open Source Music Player: Getting Started</title>
      <author>Enes Kılıç</author>
      <pubDate>Sun, 29 Aug 2021 21:03:40 +0000</pubDate>
      <link>https://dev.to/enesskilic/open-source-music-player-getting-started-3b26</link>
      <guid>https://dev.to/enesskilic/open-source-music-player-getting-started-3b26</guid>
      <description>

&lt;h3&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  💼 &lt;a href="https://github.com/enesskilic/whitebox-music"&gt;Repository&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#design-file"&gt;
  &lt;/a&gt;
  📐 &lt;a href="https://www.figma.com/file/AxGV2hEfym75fgEZJDe1oR/Music-Player"&gt;Design File&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#why-this-project"&gt;
  &lt;/a&gt;
  Why this project?
&lt;/h2&gt;

&lt;p&gt;I would like to develop an open source project to improve myself by benefiting from the knowledge and suggestions of the developer community.&lt;/p&gt;

&lt;p&gt;I will share every steps of this project as a post here and ask for your suggestions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-this-project-do"&gt;
  &lt;/a&gt;
  What will this project do?
&lt;/h2&gt;

&lt;p&gt;This project will work like a desktop application with using PWA technology and it will allow you to play music stored on your computer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-technologies-will-be-used"&gt;
  &lt;/a&gt;
  Which technologies will be used?
&lt;/h2&gt;

&lt;p&gt;React.js for front-end, Node.js for reading files from computer.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Asynchronous Rust: basic concepts</title>
      <author>Roger Torres Paes (he/him/ele)</author>
      <pubDate>Sun, 29 Aug 2021 20:56:01 +0000</pubDate>
      <link>https://dev.to/rogertorres/asynchronous-rust-basic-concepts-44ed</link>
      <guid>https://dev.to/rogertorres/asynchronous-rust-basic-concepts-44ed</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;TL;DR: I will try to give an easy-to-understand account of some of concepts surrounding asynchronous Rust: async, await, Future, Poll, Context, Waker, Executor and Reactor.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As with most things I write here, we already have good content related to asynchronous Rust. Let me mention a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://rust-lang.github.io/async-book"&gt;&lt;em&gt;Asynchronous Programming in Rust&lt;/em&gt;&lt;/a&gt;, a.k.a. &lt;em&gt;async book&lt;/em&gt;; incomplete, but great.&lt;/li&gt;
&lt;li&gt;Steve's talks on &lt;a href="https://www.youtube.com/watch?v=lJ3NC-R3gSI"&gt;Rust's Journey to async/await&lt;/a&gt; and on &lt;a href="https://www.youtube.com/watch?v=NNwK5ZPAJCk"&gt;how it works&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Without Boats' &lt;a href="https://without.boats/blog/await-decision/"&gt;proposal for await syntax&lt;/a&gt; (the other entries with the tags &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;Future&lt;/code&gt; are also excellent).&lt;/li&gt;
&lt;li&gt;Jon's stream on &lt;a href="https://www.youtube.com/watch?v=9_3krAQtD2k"&gt;how Futures and async/await works&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this amount of superb information, why writing about it? My answer here is the same for &lt;del&gt;almost&lt;/del&gt; every other entry on my DEV blog: to reach an audience for which this content is still a bit too hard to grasp.&lt;/p&gt;

&lt;p&gt;So, if you want something in a more intermediary level, go straight to the content listed above. Otherwise, let's go :)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#asyncawait"&gt;
  &lt;/a&gt;
  async/.await
&lt;/h2&gt;

&lt;p&gt;Asynchronous Rust (async Rust, for short) is delivered through the &lt;code&gt;async/.await&lt;/code&gt; syntax. It means that these two keywords (&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;.await&lt;/code&gt;) are the centerpieces of writing async Rust. But what is async Rust?&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;async book&lt;/em&gt; states that async is a &lt;em&gt;concurrent programming model&lt;/em&gt;. Concurrent means that different tasks will perform their activities alternatively; e.g., task A does a bit of work, hands the thread over to task B, who works a little and give it back, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Do not confuse it with parallel programming, where different tasks are running&lt;/em&gt; simultaneously.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, we use the &lt;code&gt;async&lt;/code&gt; keyword to tell Rust that a block or a function is going to be asynchronous.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// asynchronous block&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// asynchronous function&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what does it mean &lt;strong&gt;for a Rust program&lt;/strong&gt; to be asynchronous? It means that it will return an implementation of the &lt;code&gt;Future&lt;/code&gt; trait. I will cover &lt;code&gt;Future&lt;/code&gt; in the next section; for now, it is enough to say that a &lt;code&gt;Future&lt;/code&gt; represents a value that may or may not be ready.&lt;/p&gt;

&lt;p&gt;We handle a &lt;code&gt;Future&lt;/code&gt; that is returned by an async block/function with the &lt;code&gt;.await&lt;/code&gt; keyword. Consider the silly example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// it is possible to .await only inside async fn or block&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;x&lt;/code&gt; is not &lt;code&gt;i32&lt;/code&gt;, but the implementation of the &lt;code&gt;Future&lt;/code&gt; trait (&lt;code&gt;impl Future&amp;lt;Output = i32&amp;gt;&lt;/code&gt; in this case). The variable &lt;code&gt;y&lt;/code&gt; on the other hand, will be a &lt;code&gt;i32&lt;/code&gt;: &lt;strong&gt;11&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other way to visualize this is to understand that Rust will &lt;em&gt;desugar&lt;/em&gt; this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, there is no asynchronous anything happening here. But if &lt;code&gt;foo()&lt;/code&gt; was complex, having to wait for &lt;a href="https://dev.to/rogertorres/smart-pointers-in-rust-what-why-and-how-oma"&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; locks or a stream, instead of holding the thread for the whole time, Rust would do as much progress as possible on &lt;code&gt;foo()&lt;/code&gt; and then release the thread to do something else, taking it back when it could do more work. &lt;/p&gt;

&lt;p&gt;Hopefully, it will make sense after we go through concepts like &lt;code&gt;Future&lt;/code&gt;, &lt;code&gt;Poll&lt;/code&gt; and &lt;code&gt;Wake&lt;/code&gt;. For now, it is enough that you have a general idea of the use of both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Be sure to read the &lt;a href="https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html"&gt;async/.await Primer&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#futures"&gt;
  &lt;/a&gt;
  Futures
&lt;/h2&gt;

&lt;p&gt;I think it is not an exaggeration to say that the &lt;code&gt;Future&lt;/code&gt; trait is the heart of async Rust. &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Future&lt;/code&gt; is a trait that has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;code&gt;Output&lt;/code&gt; type (&lt;code&gt;i32&lt;/code&gt; in the example above).&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;poll&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;poll()&lt;/code&gt; is a function that does as much work as it can, and then returns an enum called &lt;code&gt;Poll&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Poll&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Pending&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This enum is the representation of what I wrote earlier, that a Future represents a value that may or may not be ready.&lt;/p&gt;

&lt;p&gt;The general idea behind this function is simple: when someone calls &lt;code&gt;poll()&lt;/code&gt; on a future, if it went all the way through completion, it returns &lt;code&gt;Ready(T)&lt;/code&gt; and the &lt;code&gt;.await&lt;/code&gt; will return &lt;code&gt;T&lt;/code&gt;. Otherwise, it will return &lt;code&gt;Pending&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The question is, if it returns &lt;code&gt;Pending&lt;/code&gt;, how do we get back at it, so it can keep working towards completion? The short answer is the &lt;em&gt;reactor&lt;/em&gt;. However, we have some ground to cover before getting there.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#poll-context-waker-executor-and-reactor"&gt;
  &lt;/a&gt;
  Poll, Context, Waker, Executor and Reactor
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Lots of words!&lt;/strong&gt; But I honestly think it is easier to bundle everything together because it is easier to understand what they do in context. And to illustrate this, I came up with a simplified hypothetical scenario.&lt;/p&gt;

&lt;p&gt;Suppose we have a &lt;code&gt;Future&lt;/code&gt; created via &lt;code&gt;async&lt;/code&gt; keyword. Let's remember what a Future is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[must_use&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"futures do nothing unless you `.await` or poll them"&lt;/span&gt;&lt;span class="nd"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Poll&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As hinted by the code above, futures in Rust are lazy, which means that just declaring them will not make them run.&lt;/p&gt;

&lt;p&gt;Now, let's say we run the future using &lt;code&gt;.await&lt;/code&gt;. "Run" here means delivering it to an executor that will call &lt;code&gt;poll()&lt;/code&gt; in the future. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I will not cover&lt;/em&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;em&gt;here, as it is somewhat complex and not necessary to understand what is going on here.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If &lt;code&gt;poll()&lt;/code&gt; returns &lt;code&gt;Ready&lt;/code&gt;, the executor will get rid of it.&lt;/p&gt;

&lt;p&gt;Alternatively, if the polled future wasn't able to do all the work, it will return &lt;code&gt;Pending&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;After receiving &lt;code&gt;Pending&lt;/code&gt;, the executor will not poll the future again until it is told so. And who is going to tell him? The reactor. It will call the &lt;code&gt;wake()&lt;/code&gt; function on the &lt;code&gt;Waker&lt;/code&gt; that was passed as an argument in the &lt;code&gt;poll()&lt;/code&gt; function. That allows the executor to know that the associated task is ready to move on. &lt;/p&gt;

&lt;p&gt;When we talk about executor and reactor we are already talking about runtimes; and when we talk about runtimes we are usually talking about &lt;a href="https://tokio.rs/"&gt;Tokio&lt;/a&gt;. In fact, calling it by the names &lt;a href="https://docs.rs/tokio/0.1.22/tokio/executor/index.html"&gt;executor&lt;/a&gt; and &lt;a href="https://docs.rs/tokio/0.1.22/tokio/reactor/index.html"&gt;reactor&lt;/a&gt; is already adhering to Tokio nomenclatures.&lt;/p&gt;

&lt;p&gt;Regarding the executor, what Tokio does is more or less what I have described above. When it comes to the reactor, complexity grows exponentially. And the reason is that the reactor is some sort of "interface" between the future and some I/O. &lt;a href="https://www.youtube.com/watch?v=9_3krAQtD2k&amp;amp;t=3004s"&gt;Jon spent 45 minutes explaining this while drawing on a blackboard,&lt;/a&gt; and I will not pretend I can do a better job. So, if you want to dive into this level of detail, check the link above.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Let us recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt; is used to create an asynchronous block or function, making it return a &lt;code&gt;Future&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.await&lt;/code&gt; will wait for the completion of the future and then give back the value (or an error, which is why it is common to use the &lt;a href="https://doc.rust-lang.org/reference/expressions/operator-expr.html#the-question-mark-operator"&gt;question mark operator&lt;/a&gt; in &lt;code&gt;.await?&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Future&lt;/code&gt; is the representation of an asynchronous computation, a value that may or may not be ready, something that is represented by the variants of the &lt;code&gt;Poll&lt;/code&gt; enum.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Poll&lt;/code&gt; is the enum returned by a future, whose variants can be either &lt;code&gt;Ready&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;Pending&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;poll()&lt;/code&gt; is the function that works the future towards its completion. It receives a &lt;code&gt;Context&lt;/code&gt; as a parameter and is called by the executor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Context&lt;/code&gt; is a wrapper for &lt;code&gt;Waker&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Waker&lt;/code&gt; is a type that contains a &lt;code&gt;wake()&lt;/code&gt; function that will be called by the &lt;strong&gt;reactor&lt;/strong&gt;, telling the &lt;strong&gt;executor&lt;/strong&gt; that it may poll the future again.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Executor&lt;/strong&gt; is a scheduler that executes the futures by calling &lt;code&gt;poll()&lt;/code&gt; repeatedly.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reactor&lt;/strong&gt; is something like an event loop responsible for waking up the pending futures.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Ok, there is certainly more to talk about, such as the &lt;code&gt;Send&lt;/code&gt; and &lt;code&gt;Sync&lt;/code&gt; traits, &lt;code&gt;Pinning&lt;/code&gt; and so on, but I think that, for a beginner post, we had enough.&lt;/p&gt;

&lt;p&gt;See you next time!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cover art by &lt;a href="https://unsplash.com/photos/9AxFJaNySB8"&gt;TK&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>programming</category>
      <category>learning</category>
    </item>
  </channel>
</rss>
