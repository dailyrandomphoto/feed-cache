<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Profiling and Analyzing Performance of Python Programs</title>
      <author>Martin Heinz</author>
      <pubDate>Tue, 04 Jan 2022 22:01:32 +0000</pubDate>
      <link>https://dev.to/martinheinz/profiling-and-analyzing-performance-of-python-programs-5c9c</link>
      <guid>https://dev.to/martinheinz/profiling-and-analyzing-performance-of-python-programs-5c9c</guid>
      <description>&lt;p&gt;Profiling is integral to any code and performance optimization. Any experience and skill in performance optimization that you might already have will not be very useful if you don't know where to apply it. Therefore, finding bottlenecks in your applications can help you solve performance issues quickly with very little overall effort.&lt;/p&gt;

&lt;p&gt;In this article we will look at the tools and techniques that can help us narrow down our focus and find bottlenecks both for CPU and memory consumption, as well as how to implement easy (almost zero-effort) solutions to performance issues in cases where even well targeted code changes won't help anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identify-bottlenecks"&gt;
  &lt;/a&gt;
  Identify Bottlenecks
&lt;/h2&gt;

&lt;p&gt;It's good to be lazy when it comes to performance optimization. Instead of trying to figure out which part of a codebase is making an application slow, we can just use profiling tools to find the areas that need attention or further digging.&lt;/p&gt;

&lt;p&gt;The most common tool for this task used by Python developers is &lt;code&gt;cProfile&lt;/code&gt;. It's a builtin module that can measure execution time of each function in our code.&lt;/p&gt;

&lt;p&gt;Let's consider the following function that (slowly) computes &lt;code&gt;e&lt;/code&gt; to the power of &lt;code&gt;X&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# some-code.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lasts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;lasts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;lasts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's run &lt;code&gt;cProfile&lt;/code&gt; against the above slow code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; cProfile &lt;span class="nt"&gt;-s&lt;/span&gt; cumulative some-code.py
         1052 &lt;span class="k"&gt;function &lt;/span&gt;calls &lt;span class="o"&gt;(&lt;/span&gt;1023 primitive calls&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in &lt;/span&gt;2.765 seconds

   Ordered by: cumulative timek

   ncalls  tottime  percall  cumtime  percall filename:lineno&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      5/1    0.000    0.000    2.765    2.765 &lt;span class="o"&gt;{&lt;/span&gt;built-in method builtins.exec&lt;span class="o"&gt;}&lt;/span&gt;
        1    0.000    0.000    2.765    2.765 some-code.py:1&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
        1    2.764    2.764    2.764    2.764 some-code.py:3&lt;span class="o"&gt;(&lt;/span&gt;exp&lt;span class="o"&gt;)&lt;/span&gt;
      4/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap&amp;gt;:986&lt;span class="o"&gt;(&lt;/span&gt;_find_and_load&lt;span class="o"&gt;)&lt;/span&gt;
      4/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap&amp;gt;:956&lt;span class="o"&gt;(&lt;/span&gt;_find_and_load_unlocked&lt;span class="o"&gt;)&lt;/span&gt;
      4/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap&amp;gt;:650&lt;span class="o"&gt;(&lt;/span&gt;_load_unlocked&lt;span class="o"&gt;)&lt;/span&gt;
      3/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap_external&amp;gt;:842&lt;span class="o"&gt;(&lt;/span&gt;exec_module&lt;span class="o"&gt;)&lt;/span&gt;
      5/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap&amp;gt;:211&lt;span class="o"&gt;(&lt;/span&gt;_call_with_frames_removed&lt;span class="o"&gt;)&lt;/span&gt;
        1    0.000    0.000    0.001    0.001 decimal.py:2&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we used &lt;code&gt;-s cumulative&lt;/code&gt; to sort the output by cumulative time spend in each function, making it easier to find the problematic areas of code in the output. We can see that pretty much all time (~2.764 sec) was spent in the &lt;code&gt;exp&lt;/code&gt; function during the single invocation.&lt;/p&gt;

&lt;p&gt;This kind of profiling can be useful, but unfortunately might not be always sufficient. &lt;code&gt;cProfile&lt;/code&gt; only gives information about function calls, not about individual lines of code - if you call some particular function such as &lt;code&gt;append&lt;/code&gt; in different places, then it will be all aggregated into single line in &lt;code&gt;cProfile&lt;/code&gt; output. Same goes for scripts like the one we used above - it contains single function that gets called just once, so there's not much for &lt;code&gt;cProfile&lt;/code&gt; to report.&lt;/p&gt;

&lt;p&gt;Sometimes we don't have the luxury of being able to analyze the troublesome code locally, or we might need to analyze a performance issue on the fly when it arises in production environment. In these situations we can make use of &lt;code&gt;py-spy&lt;/code&gt; which is a profiler that can introspect already running program, for example an application in production environment or on any remote system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;py-spy
python some-code.py &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;1] 1129587
ps &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; pid,cmd | &lt;span class="nb"&gt;grep &lt;/span&gt;python
...
1129587 python some-code.py
1130365 &lt;span class="nb"&gt;grep &lt;/span&gt;python

&lt;span class="nb"&gt;sudo env&lt;/span&gt; &lt;span class="s2"&gt;"PATH=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; py-spy top &lt;span class="nt"&gt;--pid&lt;/span&gt; 1129587
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we first install &lt;code&gt;py-spy&lt;/code&gt; and then run our long-running Python program in background. This will show PID number automatically, but if we didn't know it, then we could use the &lt;code&gt;ps&lt;/code&gt; command to look it up. Finally, we run &lt;code&gt;py-spy&lt;/code&gt; in &lt;code&gt;top&lt;/code&gt; mode passing in the PID. This will produce terminal view that mimics the auto-updating output of Linux &lt;code&gt;top&lt;/code&gt; utility, similar to the screenshot below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XY6USyId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o7w7fd6vddnqbriidab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XY6USyId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o7w7fd6vddnqbriidab.png" alt="py-spy top" width="720" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This doesn't really give us that much info, because this script has just one long-running function, but in real-world scenarios, you would most likely see many functions sharing the CPU time, which might help shed some light on ongoing performance issues of the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digging-deeper"&gt;
  &lt;/a&gt;
  Digging Deeper
&lt;/h2&gt;

&lt;p&gt;The above profilers should help you find function(s) that are causing performance issues, but if that doesn't narrow down the focus area enough for you to know what to fix, then we can turn to profilers that operate on more granular level.&lt;/p&gt;

&lt;p&gt;First of those is &lt;code&gt;line_profiler&lt;/code&gt; which - as the name suggests - can be used to drill down on time spend on each individual line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://github.com/pyutils/line_profiler&lt;/span&gt;
pip &lt;span class="nb"&gt;install &lt;/span&gt;line_profiler
kernprof &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; some-code.py  &lt;span class="c"&gt;# This might take a while...&lt;/span&gt;

Wrote profile results to some-code.py.lprof
Timer unit: 1e-06 s

Total &lt;span class="nb"&gt;time&lt;/span&gt;: 13.0418 s
File: some-code.py
Function: exp at line 3

Line &lt;span class="c"&gt;#      Hits         Time  Per Hit   % Time  Line Contents&lt;/span&gt;
&lt;span class="o"&gt;==============================================================&lt;/span&gt;
     3                                           @profile
     4                                           def exp&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
     5         1          4.0      4.0      0.0      getcontext&lt;span class="o"&gt;()&lt;/span&gt;.prec +&lt;span class="o"&gt;=&lt;/span&gt; 2
     6         1          0.0      0.0      0.0      i, lasts, s, fact, num &lt;span class="o"&gt;=&lt;/span&gt; 0, 0, 1, 1, 1
     7      5818       4017.0      0.7      0.0      &lt;span class="k"&gt;while &lt;/span&gt;s &lt;span class="o"&gt;!=&lt;/span&gt; lasts:
     8      5817       1569.0      0.3      0.0          lasts &lt;span class="o"&gt;=&lt;/span&gt; s
     9      5817       1837.0      0.3      0.0          i +&lt;span class="o"&gt;=&lt;/span&gt; 1
    10      5817       6902.0      1.2      0.1          fact &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; i
    11      5817       2604.0      0.4      0.0          num &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; x
    12      5817   13024902.0   2239.1     99.9          s +&lt;span class="o"&gt;=&lt;/span&gt; num / fact
    13         1          5.0      5.0      0.0      getcontext&lt;span class="o"&gt;()&lt;/span&gt;.prec -&lt;span class="o"&gt;=&lt;/span&gt; 2
    14         1          2.0      2.0      0.0      &lt;span class="k"&gt;return&lt;/span&gt; +s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;line_profiler&lt;/code&gt; library is distributed together with &lt;code&gt;kernprof&lt;/code&gt; CLI (named after Robert Kern) used to effectively analyze results of test runs. By running this utility against our code we produce a &lt;code&gt;.lprof&lt;/code&gt; file with code analysis as well as the above output (when &lt;code&gt;-v&lt;/code&gt; is used). This output clearly shows where in the function we spend the most amount of time, which greatly helps with finding and fixing the performance issue. In the output, you will also notice the &lt;code&gt;@profile&lt;/code&gt; decorator was added to the &lt;code&gt;exp&lt;/code&gt; function - that's necessary so that &lt;code&gt;line_profiler&lt;/code&gt; knows which function in the file we want to analyze.&lt;/p&gt;

&lt;p&gt;Even when running analysis on per-line basis, it still might not be clear what is the culprit of performance issues. Example of this could be &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; conditionals composed of multiple expression. In cases like these, it would make sense to rewrite the specific line into multiple ones to get more comprehensive analysis results.&lt;/p&gt;

&lt;p&gt;If you're truly lazy developer (as me) and reading CLI text output is too much to ask, then another option is to use &lt;code&gt;pyheat&lt;/code&gt;. This is a profiler based on &lt;code&gt;pprofile&lt;/code&gt; - another line-by-line profiler, inspired by &lt;code&gt;line_profiler&lt;/code&gt; - which generates a heat map of code lines/areas that are taking the most amount of time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;py-heat
pyheat some-code.py &lt;span class="nt"&gt;--out&lt;/span&gt; image_file.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3G4hH37Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vraw5aw02zi9v27lrvb7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3G4hH37Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vraw5aw02zi9v27lrvb7.png" alt="pyheat heat map" width="550" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considering the simplicity of our sample code we used, the CLI output from &lt;code&gt;kernprof&lt;/code&gt; earlier was already pretty clear, but the above heat map makes the bottleneck in the function even more obvious. &lt;/p&gt;

&lt;p&gt;So far, we've spoken about CPU profiling, but CPU usage might not always be what we care about. RAM is cheap, so we don't usually think about its usage, well at least until we run out of it.&lt;/p&gt;

&lt;p&gt;Even if you're not running out of RAM, it still makes sense to profile your application for memory usage to find out whether you can optimize code to save memory or whether you can add more memory to improve performance of your code. To analyze memory usage we can use tool called &lt;code&gt;memory_profiler&lt;/code&gt; which mimics the behaviour of earlier shown &lt;code&gt;line_profiler&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://github.com/pythonprofilers/memory_profiler&lt;/span&gt;
pip &lt;span class="nb"&gt;install &lt;/span&gt;memory_profiler psutil
&lt;span class="c"&gt;# psutil is needed for better memory_profiler performance&lt;/span&gt;

python &lt;span class="nt"&gt;-m&lt;/span&gt; memory_profiler some-code.py
Filename: some-code.py

Line &lt;span class="c"&gt;#    Mem usage    Increment  Occurrences   Line Contents&lt;/span&gt;
&lt;span class="o"&gt;============================================================&lt;/span&gt;
    15   39.113 MiB   39.113 MiB            1   @profile
    16                                          def memory_intensive&lt;span class="o"&gt;()&lt;/span&gt;:
    17   46.539 MiB    7.426 MiB            1       small_list &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;None] &lt;span class="k"&gt;*&lt;/span&gt; 1000000
    18  122.852 MiB   76.312 MiB            1       big_list &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;None] &lt;span class="k"&gt;*&lt;/span&gt; 10000000
    19   46.766 MiB  &lt;span class="nt"&gt;-76&lt;/span&gt;.086 MiB            1       del big_list
    20   46.766 MiB    0.000 MiB            1       &lt;span class="k"&gt;return &lt;/span&gt;small_list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this test we chose a little different piece of code. The &lt;code&gt;memory_intensive&lt;/code&gt; function creates and deletes large Python lists to clearly demonstrate how &lt;code&gt;memory_profiler&lt;/code&gt; can be helpful in analyzing memory usage. Same as with &lt;code&gt;kernprof&lt;/code&gt; profiling, here we also have to tack on &lt;code&gt;@profile&lt;/code&gt; to function under text for &lt;code&gt;memory_profiler&lt;/code&gt; to recognize which part of code we want to profile.&lt;/p&gt;

&lt;p&gt;This shows that upwards of 100MiB were allocated just for a simple list of &lt;code&gt;None&lt;/code&gt; values. Bear in mind though, that this output doesn't show true usage of memory, but rather how much memory was allocated by function call on each line. In this case that means that the list variables aren't actually storing as much memory, just that Python &lt;code&gt;list&lt;/code&gt; is likely to over-allocate memory to accommodate for the expected growth of the variable.&lt;/p&gt;

&lt;p&gt;As we can see from the above, Python lists can oftentimes consume hundreds of megabytes or even gigabytes of memory, one quick optimization can be switching to plain &lt;code&gt;array&lt;/code&gt; objects instead, which stores primitive datatypes, such as &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; more efficiently. Additionally, you can also limit memory usage by choosing lower precision type using &lt;code&gt;typecode&lt;/code&gt; parameter, use &lt;code&gt;help(array)&lt;/code&gt; to see table of valid options and their sizes.&lt;/p&gt;

&lt;p&gt;If even these more specific and granular tools aren't sufficient at finding bottlenecks in your code, then you can try disassembling it and see the actual bytecode used by Python interpreter. Even if the disassembly doesn't help you solve the problem at hand, it will still be useful at getting better idea and understanding of which operations are performed by Python in the background each time you invoke some particular function. Keeping these facts in mind might help you write more performant code in the future.&lt;/p&gt;

&lt;p&gt;Code disassembly can be generated using the builtin &lt;code&gt;dis&lt;/code&gt; module, by passing a function/code/module to &lt;code&gt;dis.dis(...)&lt;/code&gt;. This generates and prints a list of bytecode instructions performed by the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="c1"&gt;# math.exp(x)
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Throughout whole article we've been using very slow implementation of &lt;code&gt;e&lt;/code&gt; to power of &lt;code&gt;X&lt;/code&gt;, so above we defined trivial function that does it fast, so that we can compare their disassemblies. Trying to disassemble both of them will lend a wildly different outputs that makes it even more obvious why one is significantly slower than the other.&lt;/p&gt;

&lt;p&gt;The fast one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  2           0 LOAD_GLOBAL              0 &lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;)&lt;/span&gt;
              2 LOAD_FAST                0 &lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
              4 BINARY_POWER
              6 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The old, slow version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  4           0 LOAD_GLOBAL              0 &lt;span class="o"&gt;(&lt;/span&gt;getcontext&lt;span class="o"&gt;)&lt;/span&gt;
              2 CALL_FUNCTION            0
              4 DUP_TOP
              6 LOAD_ATTR                1 &lt;span class="o"&gt;(&lt;/span&gt;prec&lt;span class="o"&gt;)&lt;/span&gt;
              8 LOAD_CONST               1 &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
             10 INPLACE_ADD
             12 ROT_TWO
             14 STORE_ATTR               1 &lt;span class="o"&gt;(&lt;/span&gt;prec&lt;span class="o"&gt;)&lt;/span&gt;

  5          16 LOAD_CONST               2 &lt;span class="o"&gt;((&lt;/span&gt;0, 0, 1, 1, 1&lt;span class="o"&gt;))&lt;/span&gt;
             18 UNPACK_SEQUENCE          5
             20 STORE_FAST               1 &lt;span class="o"&gt;(&lt;/span&gt;i&lt;span class="o"&gt;)&lt;/span&gt;
             22 STORE_FAST               2 &lt;span class="o"&gt;(&lt;/span&gt;lasts&lt;span class="o"&gt;)&lt;/span&gt;
             24 STORE_FAST               3 &lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
             26 STORE_FAST               4 &lt;span class="o"&gt;(&lt;/span&gt;fact&lt;span class="o"&gt;)&lt;/span&gt;
             28 STORE_FAST               5 &lt;span class="o"&gt;(&lt;/span&gt;num&lt;span class="o"&gt;)&lt;/span&gt;

  6     &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;   30 LOAD_FAST                3 &lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
             32 LOAD_FAST                2 &lt;span class="o"&gt;(&lt;/span&gt;lasts&lt;span class="o"&gt;)&lt;/span&gt;
             34 COMPARE_OP               3 &lt;span class="o"&gt;(!=)&lt;/span&gt;
             36 POP_JUMP_IF_FALSE       80
...
             100 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To better understand what is actually happening in the above output, I recommend reading &lt;a href="https://stackoverflow.com/a/47529318"&gt;this StackOverflow answer&lt;/a&gt;, which explains all columns in the output.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solutions"&gt;
  &lt;/a&gt;
  The Solutions
&lt;/h2&gt;

&lt;p&gt;At some point, making additional tweaks to your code and algorithms will start providing diminishing returns. At that time, it's a good idea to turn your attention to external tools to provide some additional performance boost.&lt;/p&gt;

&lt;p&gt;A sure way to get speed improvement in your code is to compile it to C. That can be done using various tools, for example PyPy or Cython. The former is a JIT (Just-In-Time) compiler which can be used as drop-in replacement for CPython. It can provide a significant performance boost with zero effort, giving you an easy, quick win. All you need to do is download the archive, untar it and run your code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download from https://www.pypy.org/download.html&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xjf&lt;/span&gt; pypy3.8-v7.3.7-linux64.tar.bz2
&lt;span class="nb"&gt;cd &lt;/span&gt;pypy3.8-v7.3.7-linux64/bin
./pypy some-code.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just to prove to you that we will get immediate performance improvement with zero effort, let's just quickly check the run-time of the script with CPython and PyPy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;time &lt;/span&gt;python some-code.py

real    0m2,861s
user    0m2,841s
sys     0m0,016s

&lt;span class="nb"&gt;time &lt;/span&gt;pypy some-code.py

real    0m1,450s
user    0m1,422s
sys     0m0,009s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the above-mentioned benefits, PyPy also doesn't require any changes to code and supports all builtin modules and functions.&lt;/p&gt;

&lt;p&gt;This all sounds amazing, but there are some trade-offs that come with using PyPy. It supports projects that require C bindings, such as &lt;code&gt;numpy&lt;/code&gt;, but that creates big overhead, making the libraries significantly slower, effectively negating any other performance gains. It will also not solve your performance issues in situations where you use external libraries or when interacting with databases. Similarly, you can't expect a lot of performance gains in I/O-bound programs.&lt;/p&gt;

&lt;p&gt;If PyPy isn't cutting it, then you can try using Cython - a compiler which uses C-like type annotation (&lt;em&gt;not&lt;/em&gt; Python type hints) to create compiled Python extension modules. Cython also uses AOT (ahead-of-time) compilation, which can bring bigger performance gains by avoiding application &lt;em&gt;cold start&lt;/em&gt;. Using it however, requires you to rewrite you code to work with Cython syntax, which in turn increases complexity of your code.&lt;/p&gt;

&lt;p&gt;If you don't mind switching to a little different syntax of Python, then you also might want to take a look at &lt;a href="https://github.com/zanellia/prometeo"&gt;prometeo&lt;/a&gt; - an embedded domain specific language based on Python, specifically aimed at scientific computing. Prometeo programs transpile to pure C code and its performance can be comparable with hand-written C code.&lt;/p&gt;

&lt;p&gt;If none of the above solutions satisfy the performance requirements, then you might have to write your optimized code in C or Fortran a use Foreign Function Interfaces (FFI) to call the code from Python. Examples of libraries that can help you with that would be &lt;code&gt;ctypes&lt;/code&gt; or &lt;code&gt;cffi&lt;/code&gt; for C code and &lt;code&gt;f2py&lt;/code&gt; for Fortran.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;The first rule of optimization is to &lt;em&gt;not do it&lt;/em&gt;. If you really have to though, then optimize where appropriate. Use the above profiling tools to find bottlenecks, so you don't waste time optimizing some inconsequential piece of code. It's also useful to create a &lt;em&gt;reproducible&lt;/em&gt; benchmark for the piece of code you're trying to optimize, so that you can measure the actual improvement.&lt;/p&gt;

&lt;p&gt;This article should help you find the culprit of performance issue. Fixing the issue is however, completely different topic, some easy way to make you Python code significantly faster can be found in my previous article &lt;a href="https://dev.to/martinheinz/the-simple-tricks-to-make-your-website-blazing-fast-4p19"&gt;Making Python Programs Blazingly Fast&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>performance</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Creating Pipeline in Jenkins</title>
      <author>shiva kumar</author>
      <pubDate>Tue, 04 Jan 2022 21:51:47 +0000</pubDate>
      <link>https://dev.to/rshiva/creating-pipeline-in-jenkins-1bkd</link>
      <guid>https://dev.to/rshiva/creating-pipeline-in-jenkins-1bkd</guid>
      <description>&lt;p&gt;If you want to get started in DevOps, Jenkins is most important and handy software you should learn.In this article, I will run you through how to install Jenkins and create first  Pipeline&lt;/p&gt;

&lt;p&gt;Jenkins can be installed in numerous ways, I will be using  docker to run the jenkins locally.&lt;/p&gt;

&lt;p&gt;To run the below command you need docker.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run --name jenkin-master&lt;br&gt;
 -d -v /Users/shiva/jenkins_home:/var/jenkins_home &lt;br&gt;
 -p 8080:8080 jenkins/jenkins:jdk11&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command downloads the jenkins:jdk11 image and runs it, &lt;strong&gt;&lt;em&gt;-v&lt;/em&gt;&lt;/strong&gt; create a volume to maintain data persistence, runs the Jenkins in port 8080 with name jenkin-master&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; to access the Jenkins. You will see below screen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxUMsT1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s02py47v4xqrogmg1vvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxUMsT1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s02py47v4xqrogmg1vvb.png" alt="First screen" width="880" height="797"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access the path given in the Jenkins page, we need to log into the docker image with below command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker exec -it jenkin-master /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;-it&lt;/em&gt;&lt;/strong&gt; stands for interactive terminal&lt;/p&gt;

&lt;p&gt;Once you are in, use the below command to get the password&lt;br&gt;
&lt;code&gt;cat /var/jenkins_home/secrets/initialAdminPassword&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In Next screen, select &lt;em&gt;Install suggested plugins&lt;/em&gt;, once its done you can create a new admin user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgtoOh4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sta8kr1a6qze91ywoi3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgtoOh4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sta8kr1a6qze91ywoi3.png" alt="create new user" width="880" height="807"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;click next and start using jenkins&lt;/p&gt;

&lt;p&gt;You will land on this page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--002fO4vM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj9705yd76bb8ndw1ofl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--002fO4vM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj9705yd76bb8ndw1ofl.png" alt="Home page" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left you will see the menu, click on &lt;strong&gt;&lt;em&gt;New Item&lt;/em&gt;&lt;/strong&gt; , then select &lt;strong&gt;&lt;em&gt;Pipeline&lt;/em&gt;&lt;/strong&gt; and give it a name &lt;em&gt;&lt;strong&gt;firstJob&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pipeline is a series of step which helps in building the software. In other words, pipeline is used to implement and integrate continuous delivery. &lt;/p&gt;

&lt;p&gt;There are two types of pipeline,&lt;br&gt;
-&amp;gt; scripted &amp;amp;&lt;br&gt;
-&amp;gt; declarative&lt;br&gt;
We are going to write our first declarative pipeline.&lt;/p&gt;

&lt;p&gt;After creating your &lt;strong&gt;&lt;em&gt;firstJob&lt;/em&gt;&lt;/strong&gt; scroll down to Pipeline and write the below code in the editor&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pipeline&lt;/em&gt;&lt;/strong&gt; -&amp;gt; All the declarative scripted pipeline starts with a pipeline block&lt;br&gt;
&lt;strong&gt;&lt;em&gt;agent&lt;/em&gt;&lt;/strong&gt; -&amp;gt; instructs Jenkins to run the stages on any agent or node&lt;br&gt;
&lt;strong&gt;&lt;em&gt;stages&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Stages contain one or more stage.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;stage&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Stage reside inside the stages and it should have a steps block. Every stage will have a name like &lt;strong&gt;Test, Build, Deploy&lt;/strong&gt;. Here we named our stage as &lt;strong&gt;Hello&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;steps&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Steps are written inside the stage and it contains list of commands or scripts that need to run. Here we just wanted to echo "Hello World."&lt;/p&gt;

&lt;p&gt;Once you have saved your first declarative Pipeline, let's run it. Click on &lt;strong&gt;&lt;em&gt;Build Now&lt;/em&gt;&lt;/strong&gt;. After the build is done, you can click on &lt;strong&gt;build number 1&lt;/strong&gt; from build history then in the left menu click on &lt;strong&gt;&lt;em&gt;Console Output&lt;/em&gt;&lt;/strong&gt; to view the output of the build&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGI-Nyy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waq9dvczamaswe3nzqov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGI-Nyy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waq9dvczamaswe3nzqov.png" alt="Menu" width="658" height="1108"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the "Hello World" is successfully printed in the output console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lop9BFf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkcwm5kxj5ua2kmpfr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lop9BFf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkcwm5kxj5ua2kmpfr1.png" alt="console output" width="880" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have created your first pipeline in Jenkins, We will use this as a base to build complete continuous delivery.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Chaos Engineering - The Practice Behind Controlling Chaos</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 04 Jan 2022 18:50:41 +0000</pubDate>
      <link>https://dev.to/linearb/chaos-engineering-the-practice-behind-controlling-chaos-9n6</link>
      <guid>https://dev.to/linearb/chaos-engineering-the-practice-behind-controlling-chaos-9n6</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for &lt;a href="https://devinterrupted.com/chaos-engineering-the-practice-behind-controlling-chaos/"&gt;devinterrupted.com&lt;/a&gt; by Matthew Fornaciari, CTO of Gremlin&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
Chaos Engineering might sound like a buzzword - but take it from someone who used to joke his job title was Chief Chaos Engineer (more on that later) it is much more than buzz or a passing fad - it’s a practice. &lt;/p&gt;

&lt;p&gt;The world can be a scary place and more and more companies are beginning to turn to Chaos Engineering to proactively poke and prod their systems and in doing so are improving their reliability and guarding against unexpected failures in production and unplanned downtime. &lt;/p&gt;

&lt;p&gt;During my career I dealt with my fair share of outages, including one that caught me mid-song during a bout of karaoke and far too many that woke me up at 02:00. As the co-founder and CTO at &lt;a href="https://www.gremlin.com/"&gt;Gremlin&lt;/a&gt;, I do my best to make sure no other engineers have to suffer sleepless nights worrying about their product. &lt;/p&gt;

&lt;p&gt;But the question remains, what is Chaos Engineering and where did it come from?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2xwZ0IxHB5fvljUEf9EpNi"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-short-history"&gt;
  &lt;/a&gt;
  A Short History
&lt;/h2&gt;

&lt;p&gt;The spiritual predecessor to Chaos Engineering is often called by a much more widely recognized name - disaster recovery. The focus when this practice was introduced is much the same as today: proactively suss out production problems by injecting failure. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://netflix.github.io/chaosmonkey/"&gt;Netflix&lt;/a&gt;’s Chaos Monkey is probably the most well publicized Chaos Engineering tool as it arguably kickstarted the adoption of Chaos Engineering outside of large companies, but this has led to the erroneous belief that Netflix invented the practice. In fact, the practice was already widely in use amongst the titans of technology. &lt;/p&gt;

&lt;p&gt;Over a decade ago during my time as a Lead Software Engineer at Amazon, we implemented several crude practices designed to inject failure into our systems. The most rudimentary of which was employed by a man called Jesse Robbins, who earned the nickname “Master of Disaster” by running through data centers pulling out cables. &lt;/p&gt;

&lt;p&gt;Let’s just say the practice has evolved a lot since those early days and your data center cables are much safer these days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-chaos-engineering"&gt;
  &lt;/a&gt;
  What is Chaos Engineering?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“What Chaos Engineering really is, is the art, if you want to call it that, of introducing controlled chaos.” - &lt;a href="https://open.spotify.com/episode/2xwZ0IxHB5fvljUEf9EpNi?si=grNoRb21QiOMCQYSCu5Q4g&amp;amp;dl_branch=1"&gt;2:16 on the Dev Interrupted podcast&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-O0vjlejc6U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;At its core, Chaos Engineering is a disciplined approach of identifying potential failures &lt;strong&gt;before&lt;/strong&gt; they have an opportunity to become customer facing outages. &lt;/p&gt;

&lt;p&gt;It is a practice that lets you safely test your assumption about how your systems will behave under duress by actually exercising resilient mechanisms in a controlled fashion. You literally "&lt;a href="https://www.gremlin.com/blog/breaking-things-on-purpose/"&gt;break things on purpose&lt;/a&gt;" to validate and build resiliency. The end goal of Chaos Engineering is not to inject arbitrary failure into a system, but rather to strategically inject turbulence to enhance the stability and resiliency of your systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-chaotic-is-chaos-engineering"&gt;
  &lt;/a&gt;
  How Chaotic is Chaos Engineering?
&lt;/h2&gt;

&lt;p&gt;I always tell people that Chaos Engineering is a bit of a misnomer because it’s actually as far from chaotic as you can get. When performed correctly everything is in control of the operator. That mentality is the reason our core product principles at Gremlin are: safety, simplicity and security. True chaos can be daunting and can cause harm. But controlled chaos fosters confidence in the resilience of systems and allows for operators to sleep a little easier knowing they’ve tested their assumptions. After all, the laws of entropy guarantee the world will consistently keep throwing randomness at you and your systems. You shouldn’t have to help with that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-start"&gt;
  &lt;/a&gt;
  How do I Start?
&lt;/h2&gt;

&lt;p&gt;One of the most common questions I receive is: “I want to get started with Chaos Engineering, where do I begin?” There is no one size fits all answer unfortunately. You could start by validating your observability tooling, ensuring auto-scaling works, testing failover conditions, or one of a myriad of other use cases. The one thing that does apply across all of these use cases is &lt;strong&gt;start slow, but do not be slow to start.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What I mean by this is to start testing across just a few nodes versus impacting your entire fleet. We refer to the impacted area as the “blast radius” and we highly recommend starting with a small blast radius (the number of systems impacted) and increasing it over time.&lt;/p&gt;

&lt;p&gt;By starting small you allow yourself to gain confidence in both the experiments you are running and your systems. Of course your risk tolerance is also a factor of how large a blast radius your organization will use. &lt;/p&gt;

&lt;p&gt;For instance, a large banking institution with millions of customers has a much lower risk tolerance than a tech startup with a couple hundred customers. In that case, they would want to run experiments in a programmatic way and would need to be very explicit about communicating to the rest of the organization what tests are going to be run and when to avoid any unplanned 2am or 3am disasters. &lt;/p&gt;

&lt;p&gt;Eventually you want to get to the point where all of this is automated, a process we refer to as “continuous chaos.” Starting small with automation could be something as simple as taking out a single node; then taking out five nodes; then ten; and so on. Eventually you automate the process at a level you are comfortable with.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Ultimately you want to be able to handle any of this random chaos being thrown at you, because that's what the world is, it's entropy, it's degradation” - &lt;a href="https://open.spotify.com/episode/2xwZ0IxHB5fvljUEf9EpNi?si=grNoRb21QiOMCQYSCu5Q4g&amp;amp;dl_branch=1&amp;amp;nd=1"&gt;7:35 on the Dev Interrupted podcast&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#no-tolerance-for-downtime"&gt;
  &lt;/a&gt;
  No Tolerance for Downtime
&lt;/h2&gt;

&lt;p&gt;When I founded &lt;a href="https://www.gremlin.com/"&gt;Gremlin&lt;/a&gt;, it was just myself and my co-founder developing the first iteration of the product. The business looked very different then and I jokingly referred to myself as the “Chief Chaos Engineer” responsible for implementing code that was mostly used by enterprise companies. Many of these companies came to us because they had reliance thrust upon them by the US government or they had top-down reliability standards and they wanted a tool to help them shore up their systems. &lt;/p&gt;

&lt;p&gt;As the company began to evolve, so did the customer base. These days it’s not just Fortune 500 companies that care about reliability, it’s everybody. Planned downtime is a relic of days gone by. It is no longer acceptable to espouse planned maintenance windows as part of development lifecycles and customers don’t have the patience for products they rely upon to spend any time unavailable. Companies recognize this dynamic - and it’s not a hard one to miss. &lt;/p&gt;

&lt;p&gt;Seemingly our appetite for technology has gone up exponentially while our ability to stomach downtime has drastically decreased. Customers expect that your product is always working, always running. If your product is down because of outages then there are ten other similar products waiting in the wings to take their money. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-lives-better"&gt;
  &lt;/a&gt;
  Making Lives Better
&lt;/h2&gt;

&lt;p&gt;Visibility is high these days and companies don’t need the publicity that comes with making any unforced errors, let alone to be subject to errors not of their making. No one wants to be blown up on &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; because their product isn’t working or because one of their downstream dependencies or their cloud provider had an unexpected outage. &lt;/p&gt;

&lt;p&gt;By preparing for the worst, we can be at our best as an industry and can be prepared when disaster eventually comes knocking. That’s why when an unexpected outage occurs or there is a production failure customers will never even know it happened. &lt;/p&gt;

&lt;p&gt;I often joke that we are the engineers’ engineers because many of us know that feeling of being jolted from a dream at 03:00 by our pagers, groggily wiping our eyes and whipping out the laptop to go dig through a sea of monitoring dashboards and logs. It’s not fun and it’s exactly why I founded Gremlin. Because there is a better way to approach operations than merely sitting back on our haunches and waiting for the next outage. Chaos Engineering not only helps to protect against the randomness of the world, but also teaches people how to build more reliable software. And if enough people build more reliable software, we build a more reliable internet.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Starved for top-level software engineering content? Need some good tips on how to manage your team? This article is inspired by &lt;a href="https://devinterrupted.com/podcasts/"&gt;Dev Interrupted&lt;/a&gt; - the go-to podcast for engineering leaders.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dev Interrupted features expert guests from around the world to explore strategy and day-to-day topics ranging from dev team metrics to accelerating delivery. With new guests every week from Google to small startups, the Dev Interrupted Podcast is a fresh look at the world of software engineering and engineering management.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devinterrupted.com/podcasts/"&gt;&lt;strong&gt;&lt;em&gt;Listen and subscribe on your streaming service of choice today.&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NibJBwTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhjb103fsrn64mdurln3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NibJBwTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhjb103fsrn64mdurln3.png" alt="https://devinterrupted.com/podcasts/" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>devops</category>
      <category>operations</category>
      <category>performance</category>
    </item>
    <item>
      <title>Kotlin – Android’in Yeni Resmi Programlama Dili
</title>
      <author>Berk CAN</author>
      <pubDate>Tue, 04 Jan 2022 18:43:28 +0000</pubDate>
      <link>https://dev.to/nrkdrk/kotlin-androidin-yeni-resmi-programlama-dili-e9e</link>
      <guid>https://dev.to/nrkdrk/kotlin-androidin-yeni-resmi-programlama-dili-e9e</guid>
      <description>&lt;p&gt;Google her yıl düzenlediği I/O etkinliğinde bu sene biz Android geliştiricilerine bir süpriz yaptı. 17-19 Mayıs tarihleri arasında düzenlenen I/O 2017 etkinliğinde Android için yeni bir programlama dilini tanıttı. Bu dil JetBrains firmasının geliştirmiş olduğu Kotlin Programlama dili.Bu dil aynı java gibi JVM (Java Virtual Machine) üzerinde çalışabilen bir dildir. Yani bir defa yaz her platformda çalıştır mantığıyla çalışmaktadır.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nrkdrk.blogspot.com/2017/07/kotlin-androidin-yeni-resmi-programlama.html"&gt;Adres&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nrkdrk</category>
      <category>android</category>
      <category>kotlin</category>
      <category>programming</category>
    </item>
    <item>
      <title>Statik ve Dinamik Programlama Dillerinin Farkları
</title>
      <author>Berk CAN</author>
      <pubDate>Tue, 04 Jan 2022 18:42:52 +0000</pubDate>
      <link>https://dev.to/nrkdrk/statik-ve-dinamik-programlama-dillerinin-farklari-115h</link>
      <guid>https://dev.to/nrkdrk/statik-ve-dinamik-programlama-dillerinin-farklari-115h</guid>
      <description>&lt;p&gt;Statik Programlama Dilleri&lt;br&gt;
Statik programlama dili nedir onu açıklayarak başlayalım. Statik programlama dili, her değişken tipinin önceden belirtiliyor olmasıdır. Yani string bir değer tanımlıyorken başına string, sayi tanımlıyorken int, double, float gibi tipleri yazıyoruz. Bu nedenle değişken tipleri program henüz çalışmıyorken bile bu tiplerin neler olduğunu biliyor. Bu da program henüz çalışmıyorken bile bir hata yapmışsanız sizi uyarır ve hatayı düzeltmenizi bekler.Ya da daha etkili öneriler sunabilir IDE'ye bağlı olarak.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nrkdrk.blogspot.com/2017/07/statik-ve-dinamik-programlama.html"&gt;Adres&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nrkdrk</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Docker. Communication between Laravel containers</title>
      <author>Berk CAN</author>
      <pubDate>Tue, 04 Jan 2022 18:40:44 +0000</pubDate>
      <link>https://dev.to/nrkdrk/docker-communication-between-laravel-containers-399h</link>
      <guid>https://dev.to/nrkdrk/docker-communication-between-laravel-containers-399h</guid>
      <description>&lt;p&gt;I have a project that I am trying to develop with a microservices approach. I prepared the APIs on two separate microservices and completed their tests. When I send a request from container A to container B, I get the error cURL error 7: Could not connect to localhost port 8100: Connection refused. After my research, I couldn't find a solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/69954303/docker-communication-between-laravel-containers"&gt;Address&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nrkdrk</category>
      <category>laravel</category>
      <category>docker</category>
    </item>
    <item>
      <title>Recap the use of some Algorithms</title>
      <author>Lakkireddy Pulla Reddy</author>
      <pubDate>Tue, 04 Jan 2022 18:07:22 +0000</pubDate>
      <link>https://dev.to/lakkireddy9100/recap-the-use-of-some-algorithms-29j5</link>
      <guid>https://dev.to/lakkireddy9100/recap-the-use-of-some-algorithms-29j5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#binary-search-algorithm"&gt;
  &lt;/a&gt;
  Binary Search Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- Efficient algorithm for finding an item from a **sorted list**
 of items

- The time complexity of the binary search algorithm is O(log n)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMBj9SYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08bh3eumtbno0mg7gr8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMBj9SYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08bh3eumtbno0mg7gr8b.png" alt="loading!!!" width="550" height="319"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#breadth-first-search-bfs-algorithm"&gt;
  &lt;/a&gt;
  Breadth First Search (BFS) Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Breadth–first search (BFS) is an algorithm for traversing or searching tree or graph data structures.
- It uses a queue.
- The time complexity of BFS traversal is O(V + E), where V and E are the total number of vertices and edges in the graph.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#depth-first-search-dfs-algorithm"&gt;
  &lt;/a&gt;
  Depth First Search (DFS) Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Depth–first search (DFS) is an algorithm for traversing or searching tree or graph data structures.
- It uses a stack.
- The time complexity of DFS traversal is O(V + E), where V and E are the total number of vertices and edges in the graph.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Merge Sort Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Merge sort is an efficient sorting algorithm that produces a stable sort, which means that if two elements have the same value, they hold the same relative position in the sorted sequence as they did in the input
- Merge sort is a Divide and Conquer algorithm
- The worst case time complexity of merge sort is O(n log(n))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#quicksort-algorithm"&gt;
  &lt;/a&gt;
  Quicksort Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- Quicksort is an efficient in-place sorting algorithm, which usually performs about two to three times faster than merge sort and heapsort when implemented well.
- Time complexity of Quicksort is O(n log(n)).

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#kruskals-algorithm"&gt;
  &lt;/a&gt;
  Kruskal’s Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- Kruskal’s Minimum Spanning Tree algorithm, a greedy algorithm to find a minimum spanning tree for a connected weighted graph.
- Kruskal's algorithm's time complexity is O(E log V), V being the number of vertices

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#singlesource-shortest-path-vs"&gt;
  &lt;/a&gt;
  Single-Source Shortest Path  VS
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#allpairs-shortest-path"&gt;
  &lt;/a&gt;
  All-Pairs Shortest Path
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- The Single-Source Shortest Path (SSSP) problem consists of finding the shortest paths between a given vertex v and all other vertices in the graph.
- The All-Pairs Shortest Path(APSP) problem is the determination of the shortest graph distances between every pair of vertices in a given graph
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#floyd-warshall-algorithm"&gt;
  &lt;/a&gt;
  Floyd Warshall Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- The Floyd Warshall Algorithm is for solving the All Pairs Shortest Path problem. The problem is to find shortest distances between every pair of vertices in a given edge weighted directed Graph.
- The Floyd-Warshall all-pairs shortest path runs in O(n^3) time.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#dijkstras-algorithm"&gt;
  &lt;/a&gt;
  Dijkstra’s Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- Dijkstra's algorithm is the iterative algorithmic process to provide us with the shortest path from one specific starting node to all other nodes of a graph

- Time Complexity of Dijkstra's Algorithm is O(V^2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#kadanes-algorithm"&gt;
  &lt;/a&gt;
  Kadane’s Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- Simply putting for writing a logic to find the sum of contiguous subarray  within a one-dimensional array of numbers that has the largest sum, we use Kadane’s Algorithm. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#lee-algorithm"&gt;
  &lt;/a&gt;
  Lee Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- The Lee algorithm is one possible solution for maze routing problems based on breadth-first search.

- It always gives an optimal solution, if one exists, but is slow and requires considerable memory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#floyds-cycle-detection-algorithm"&gt;
  &lt;/a&gt;
  Floyd’s Cycle Detection Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;As the name it self states, Floyd's Cycle detection algorithm or Hair Tortoise algorithm is used to detect if there is a cycle in a linked list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#union-find-algorithm"&gt;
  &lt;/a&gt;
  Union Find Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Recap Dis Joint Data Structure.
- A union-find algorithm is an algorithm that performs two useful operations find and union.
- Find: Determine which subset a particular element is in.
- Union: Join two subsets into a single subset.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#kmp-algorithm"&gt;
  &lt;/a&gt;
  KMP Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- The Knuth–Morris–Pratt string-searching algorithm (or KMP algorithm) searches for occurrences of a "word" W within a main "text string" S.

- It is a Pattern Matching Algorithm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#sorting-algorithms"&gt;
  &lt;/a&gt;
  Sorting Algorithms
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
- A Sorting Algorithm is used to rearrange a given array or list elements according to a comparison operator on the elements.

- Examples
      1. Insertion Sort Algorithm
      2. Selection Sort Algorithm
      3. Counting Sort Algorithm
      4. Heap Sort Algorithm ​

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#euclids-algorithm"&gt;
  &lt;/a&gt;
  Euclid’s Algorithm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
-  Efficient algorithm for computing the greatest common divisor (GCD)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Render a pdf in react app</title>
      <author>Aishanii</author>
      <pubDate>Tue, 04 Jan 2022 17:43:13 +0000</pubDate>
      <link>https://dev.to/aishanipach/render-a-pdf-in-react-app-3aeo</link>
      <guid>https://dev.to/aishanipach/render-a-pdf-in-react-app-3aeo</guid>
      <description>&lt;p&gt;If you want to render a pdf file in a react app, there are different options out there. The one that I recently used and would recommend for beginners is &lt;strong&gt;react-pdf&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-pdf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For activating links:&lt;br&gt;
&lt;code&gt;import 'react-pdf/dist/esm/Page/AnnotationLayer.css';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check out the script example here:&lt;br&gt;
&lt;a href="https://github.com/Aishanipach/React-pdf-devto"&gt;https://github.com/Aishanipach/React-pdf-devto&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🙌 How to get rid of vulnerabilities with just NPM 👀</title>
      <author>Luís Von Muller</author>
      <pubDate>Tue, 04 Jan 2022 17:42:05 +0000</pubDate>
      <link>https://dev.to/luisvonmuller/how-to-auto-fix-vulnerabilities-with-npm-47fa</link>
      <guid>https://dev.to/luisvonmuller/how-to-auto-fix-vulnerabilities-with-npm-47fa</guid>
      <description>&lt;p&gt;Sometimes when you're trying to &lt;strong&gt;install&lt;/strong&gt; or re-use some kind of global package on the &lt;strong&gt;NPM&lt;/strong&gt; environment, you will get messages telling you something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--trjvBeTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osibi9y5aix0u7x47tey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--trjvBeTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osibi9y5aix0u7x47tey.png" alt="Installing a package" width="880" height="229"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As NPM itself &lt;strong&gt;will&lt;/strong&gt; suggest, you, should &lt;strong&gt;audit&lt;/strong&gt; them, to kindly fix them ☺️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rv60KC0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d9grr7fdoo0tpsl0pqc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rv60KC0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d9grr7fdoo0tpsl0pqc.png" alt="Warnings of vulnerabilities" width="776" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;But let me make it clear,: That is for sure, not the real way to "Security" audit things, but it is for sure, the minimum safe way that you must stay (at least) for the greater good!&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;This kind of vulnerability &lt;strong&gt;could became a real problem&lt;/strong&gt;, especially when your packages are &lt;strong&gt;global packages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;I mean, When you're using the "-g" flag to make it system wide available. &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;For this, its a minimum good practice to also use things like &lt;strong&gt;NPX&lt;/strong&gt;. But... if you're that &lt;strong&gt;lazy&lt;/strong&gt;, as I am, here is this small &lt;strong&gt;shenanigan&lt;/strong&gt; that could help you to keep yourself a bit &lt;strong&gt;more safe&lt;/strong&gt;. 👀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-by-step"&gt;
  &lt;/a&gt;
  🚶 Step by Step 🚶
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-lets-update-npm-itself"&gt;
  &lt;/a&gt;
  1. Lets update &lt;strong&gt;NPM&lt;/strong&gt; itself! 👉
&lt;/h3&gt;

&lt;p&gt;On the bash, or terminal, type:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ npm install npm@latest -g&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt; The $ means that you're into the bash or at least on a terminal like prompt 😅 &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The output will look something near like...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kf7ILzCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co6ckjqlh2yzhp64paky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kf7ILzCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co6ckjqlh2yzhp64paky.png" alt="Updating NPM" width="880" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And... &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-td2A57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbrbtyywyp21hklakl8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-td2A57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbrbtyywyp21hklakl8x.png" alt="Image description" width="622" height="96"&gt;&lt;/a&gt;&lt;br&gt;
... Ok I'll just type the "$ npm audit" then...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdKjlxS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2fz2j73yuav394o9qrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdKjlxS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2fz2j73yuav394o9qrx.png" alt="Image description" width="880" height="133"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wat"&gt;
  &lt;/a&gt;
  WAT?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofre2jUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm0d0ujwif47hf3iyzsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofre2jUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm0d0ujwif47hf3iyzsh.png" alt="Image description" width="700" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, that is totally accurate! 👌 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NPM&lt;/strong&gt; audit will check inside the &lt;strong&gt;package you're on&lt;/strong&gt; (or even none if your not). &lt;strong&gt;It will not check the for entire "NPM" global environment&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;OMG&lt;/strong&gt; - David504 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;Context for the quote: &lt;a href="https://www.youtube.com/watch?v=B6LpzJLrhpw"&gt;https://www.youtube.com/watch?v=B6LpzJLrhpw&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-so-what-should-i-do"&gt;
  &lt;/a&gt;
  2. So, what should I do!? 🤔
&lt;/h3&gt;

&lt;p&gt;The right way? &lt;small&gt;use rust 🦀 &lt;/small&gt;. Joking, you could use NPX, but if you don't want to (as I don't)... &lt;strong&gt;wait there!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You know what &lt;strong&gt;NPM people loves&lt;/strong&gt;? &lt;strong&gt;Packages&lt;/strong&gt;. 📦&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;so we does!&lt;/strong&gt; We love packages 🥰! &lt;strong&gt;But what about installing another global package to fix global packages?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAYEByee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzovuc1s1s4gk2ssahng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAYEByee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzovuc1s1s4gk2ssahng.png" alt="Avarege Package Enjoyer with a big brain" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Now you must say: That looks sooo great!&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Then, Kindly type into the terminal &lt;strong&gt;this&lt;/strong&gt;, while praying to NPM's gods:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ npm install -g npm-check-updates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;The output gonna be like:&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXLA7O5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy3vh1pf8sabm98uf8gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXLA7O5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy3vh1pf8sabm98uf8gy.png" alt="Output of npm install minus g npm check updates" width="880" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt; Thanks god that wasn't any vulnerability inside the vulnerability checking package 😮‍💨&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-ncu-a-package-inception"&gt;
  &lt;/a&gt;
  3. NCU - A Package Inception! 😳
&lt;/h3&gt;

&lt;p&gt;If all went good till now, guess what? You will have &lt;strong&gt;another&lt;/strong&gt; package &lt;strong&gt;globally&lt;/strong&gt; available to use! 😌 &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#and-guess-what-this-one-can-say-which-ones-we-should-upgrade-to-get-rid-of"&gt;
  &lt;/a&gt;
  And guess what? This &lt;strong&gt;one can say which ones we should upgrade&lt;/strong&gt; to get rid of:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;(っ◔◡◔)っ ♥ legacy code vulnerabilities ♥&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgRMW787--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn2wbenohb6oj6k5q40u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgRMW787--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn2wbenohb6oj6k5q40u.png" alt="Another Global package? Thats great!" width="458" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, &lt;strong&gt;how do we use it?&lt;/strong&gt;. Again, from the terminal, type:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ ncu -g &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;Output should like:&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6EVzNhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbbcc7xjoibywjx2k45f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6EVzNhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbbcc7xjoibywjx2k45f.png" alt="An output from the ncu package" width="880" height="217"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the last line, it will give yourself the minimum needed updates to fix common vulnerabilities that were fixed on newer versions! 🤩&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vuk649P7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9394kqi8r38twv5725h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vuk649P7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9394kqi8r38twv5725h.png" alt="my upgrade listings..." width="880" height="56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now... lets just, as always: &lt;strong&gt;CTRL+C -&amp;gt; CTRL+V&lt;/strong&gt; stuff. 😎&lt;/p&gt;

&lt;p&gt;Then you will be prompted with:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--62Rxar_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j6inptfvhzdlub1vgx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--62Rxar_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j6inptfvhzdlub1vgx7.png" alt="After running upgrades..." width="880" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vulnerabilities-again"&gt;
  &lt;/a&gt;
  Vulnerabilities again?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m52Ip9pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz9qg6we9c7wz6ozoae4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m52Ip9pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz9qg6we9c7wz6ozoae4.png" alt="65 WAT?" width="880" height="882"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, that is &lt;strong&gt;again&lt;/strong&gt;, fairly right 🤦‍♂️&lt;/p&gt;

&lt;p&gt;&lt;del&gt;What you will need to execute, instead of the other command that I told you to run is this one:&lt;br&gt;&lt;br&gt;
curl --proto '=https' --tlsv1.2 -sSf &lt;a href="https://sh.rustup.rs"&gt;https://sh.rustup.rs&lt;/a&gt; | sh &lt;br&gt;
and you will have Rust and Rust's Cargo!&lt;/del&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nah-lets-talk-serious-now"&gt;
  &lt;/a&gt;
  Nah, lets talk serious now... 🙄
&lt;/h2&gt;

&lt;p&gt;You got rid of the Global Packages vulnerabilities (from themselves) by upgrading them. But those packages (sometimes) depends on other packages...&lt;br&gt;
&lt;small&gt; I told you that NPM's guys really like packages ¯_(ツ)_/¯ &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;There will be, always, some vulnerabilities left inside these (dependencies). But not within being &lt;strong&gt;into a Global Package itself&lt;/strong&gt;, then we're kinda good to go.&lt;/p&gt;

&lt;p&gt;And to make sure there is not left, you can &lt;strong&gt;re-check&lt;/strong&gt; it by doing so:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ ncu -g&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;(to check if there is the need to upgrade any to a safer version)&lt;/small&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PywLL8Nc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqmdjiooe0c1nh8wzpy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PywLL8Nc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqmdjiooe0c1nh8wzpy2.png" alt="Rechecking global packages." width="880" height="145"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion? 🤔
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;If you gonna stand with just NPM without NPX please, at least do this.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;I will soon write a how to NPX... &lt;small&gt;or not&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Thanks! Follow me on the Dev Bubble on &lt;a href="https://twitter.com/luisvonmuller"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>npm</category>
    </item>
    <item>
      <title>Django Basics: Creating Models</title>
      <author>Meet Gor</author>
      <pubDate>Tue, 04 Jan 2022 17:11:25 +0000</pubDate>
      <link>https://dev.to/mr_destructive/django-basics-creating-models-2bg5</link>
      <guid>https://dev.to/mr_destructive/django-basics-creating-models-2bg5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;We have seen the basics of Django templating in the previous parts of the series. Now, we can move on to the more backend stuff in Django which deals with the Databases, queries, admin section, and so on. In this particular part, we'll cover the fundamental part of any application in Django i.e the &lt;code&gt;Model&lt;/code&gt;. We'll understand what the model is, how to structure one, how to create relationships and add constraints on the fields, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-models"&gt;
  &lt;/a&gt;
  What are Models?
&lt;/h2&gt;

&lt;p&gt;A model is a Django-way(Pythonic) to structure a database for a given application. It is technically a class that can act as a table in a database generally and inside of the class, the properties of it act as the attributes of that database. It's that simple. Just a blueprint to create a table in a database, don't worry about what and where is our database. We will explore the database and its configuration in the next part. &lt;/p&gt;

&lt;p&gt;By creating a model, you don't have to write all the basic SQL queries like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE NAME(
attrb1_name type,
attrb2_name type,
.
.
.
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your application is quite big or is complex in terms of the relations among the entities, writing SQL queries manually is a daunting task and also quite repetitive at times. So Django handles all the SQL crap out of the way for the programmer. So Models are just a Pythonic way to create a table for the project/application's database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-model"&gt;
  &lt;/a&gt;
  How to create a Model?
&lt;/h2&gt;

&lt;p&gt;Creating a model for an application is as easy as creating a class in python. But hey! It's more than that as there are other questions to address while designing the class. You need to design the database before defining the fields in the model.&lt;/p&gt;

&lt;p&gt;OK, well it's not straightforward as it seems to but still for creating simple and dummy projects to start with. You can use certain tools like &lt;a href="https://www.lucidchart.com/pages/database-diagram/database-design-tool"&gt;lucidchart&lt;/a&gt;, &lt;a href="https://dbdiagram.io/home"&gt;dbdiagrams.io&lt;/a&gt;, and other tools you are comfortable with. It's important to visualize the database schema or the structure of the application before tinkering with the actual database inside the project. Let's not go too crazy and design a simple model to understand the process.&lt;/p&gt;

&lt;p&gt;Here's a basic model for a Blog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#from django.db import models
from django.contrib.auth.models import User

class Article(models.Model):
    title = models.CharField(max_length=255)
    post = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='Article')
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ignore the &lt;code&gt;from django.db import models&lt;/code&gt; as it is already in the file created by Django. If not, please uncomment the line and that should be good to go.&lt;br&gt;
This is a basic model you might wanna play with but don't dump it anywhere. &lt;/p&gt;

&lt;p&gt;We define or create our models in the application inside the project. Inside the application there is already a file called &lt;code&gt;models.py&lt;/code&gt; just &lt;strong&gt;append&lt;/strong&gt; the above code into it. The application can be any application which makes the most sense to you or better create a app if not already created and name it as &lt;code&gt;article&lt;/code&gt; or &lt;code&gt;post&lt;/code&gt; or anything you like.&lt;/p&gt;

&lt;p&gt;If you are familiar with Python OOP(object-oriented programming), we have basically inherited the &lt;code&gt;models.Model&lt;/code&gt; class from the &lt;code&gt;django.db&lt;/code&gt; module into our model.&lt;/p&gt;

&lt;p&gt;If you want more such examples, let's see more such models :&lt;/p&gt;

&lt;p&gt;An E-Mail application core model. Attributes like &lt;code&gt;sender&lt;/code&gt;, &lt;code&gt;subject&lt;/code&gt; of the mail, &lt;code&gt;body&lt;/code&gt; of the mail, &lt;code&gt;recipients_list&lt;/code&gt; i.e. the &lt;code&gt;To:&lt;/code&gt; section in a mail system and the &lt;code&gt;attachment_file&lt;/code&gt; for a file attachment to a mail if any.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#from django.db import models
from user import EmailUser

class EMail(models.Model):
    sender = models.EmailField(max_length = 255) 
    subject = models.CharField(max_length = 78)
    body = models.CharField(max_length = 40000)
    recipients_list = models.ManyToManyField(EmailUser, related_name = 'mail_list')
    attachment_file = models.FileField(blank=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A sample model for a note-taking app, consisting of a Note and a Book. A book might be a collection of multiple notes i.e. a single book can have multiple notes so we are using a &lt;code&gt;ManyToManyField&lt;/code&gt;, what is that? We'll see that shortly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models
from user.models import User

class Notes(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    title = models.CharField(max_length = 1024)
    content = models.Textfield()
    created = models.DateTimeField(auto_now_add = True)
    modified = models.DateTimeField(auto_now = True)
    book = models.ManyToManyField(Book, related_name = 'book')

class Book():
    name = models.CharField(max_length = 1024)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are just dummies and are not recommended to use anywhere especially in a serious project. &lt;br&gt;
So, we have seen a model, but what are these fields and the constraints like &lt;code&gt;on_delete&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;, and others in the upcoming section on fields.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fields-in-django"&gt;
  &lt;/a&gt;
  Fields in Django
&lt;/h2&gt;

&lt;p&gt;Fields are technically the attributes of the class which here is the model, but they are further treated as a attribute in a table of a database. So the model becomes a list of attributes which will be then parsed into an actual database. &lt;/p&gt;

&lt;p&gt;By creating attributes inside a class we are defining the structure for a table. We have several types of fields defined already by django for the ease of validating and making a constrained setup for the database schema.&lt;/p&gt;

&lt;p&gt;Let's look at some of the types of fields in Django Models.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#types-of-fields"&gt;
  &lt;/a&gt;
  Types of Fields
&lt;/h3&gt;

&lt;p&gt;Django has a lot of fields defined in the models class. If you want to go through all the fields, you read through the django docs &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/fields/#model-field-types"&gt;field references&lt;/a&gt;. We can access the fields from the &lt;code&gt;models&lt;/code&gt; module like &lt;code&gt;name = models.CharField(max_length=10)&lt;/code&gt;, this is a example of defining a attributes &lt;code&gt;name&lt;/code&gt; which is a CharField. We can set the max_length which acts a constraint to the attribute as we do not want the name field to be greater than 10 and hence parsing the parameter &lt;code&gt;max_length&lt;/code&gt; to 10. &lt;/p&gt;

&lt;p&gt;We have other field types like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;IntegerField&lt;/code&gt; -&amp;gt; for an integer value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TextField&lt;/code&gt; -&amp;gt; for long input of text (like text area in html).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EmailField&lt;/code&gt; -&amp;gt; for an single valid email field.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DateField&lt;/code&gt; -&amp;gt; for inputting in a date format. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;URLField&lt;/code&gt; -&amp;gt; for input a URL field.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BooleanField&lt;/code&gt; -&amp;gt; for a boolean value input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there are other fields as well which can be used as per requirements.&lt;/p&gt;

&lt;p&gt;We also have some other fields which are not directly fields so to speak but are kind of relationship defining fields like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ForeignKey&lt;/code&gt; -&amp;gt; Define a many-to-one relationship to another model/class. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ManyToManyField&lt;/code&gt; -&amp;gt; define a many-to-many relationship to another model/class.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;OneToOneField&lt;/code&gt; -&amp;gt; define a one to one relationship between different tables/model/class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, that's about the field types for just a feel of how to structure or design a database table using a model with some types of attributes. We also need to talk about constraints which needs to added to the fields inside the models. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#field-optionsarguments"&gt;
  &lt;/a&gt;
  Field Options/Arguments
&lt;/h3&gt;

&lt;p&gt;We can add constraints and pass arguments to the fields in the models. We can add arguments like &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;blank&lt;/code&gt;, &lt;code&gt;defualt&lt;/code&gt;, &lt;code&gt;choices&lt;/code&gt;, etc. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;null=True/False&lt;/code&gt; -&amp;gt; Set a check for the entry in the table as not null in the database.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;blank=True/False&lt;/code&gt; -&amp;gt; Set a check for the input validation to empty or not.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unique=True/False&lt;/code&gt; -&amp;gt; Set a constraint to make the entry unique throughout the table.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;defualt=anyvalue&lt;/code&gt; -&amp;gt; Set a default value for the field.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;choices=list&lt;/code&gt; -&amp;gt; Set a list of defined choices to select in the field (a list of two valued tuple).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also have another constraint specific to the fields like &lt;code&gt;max_length&lt;/code&gt; for &lt;code&gt;CharField&lt;/code&gt;, &lt;code&gt;on_delete&lt;/code&gt; for ForeignKey which can be used as a controller for the model when the related model is deleted, &lt;code&gt;verbose_name&lt;/code&gt; to set a different name for referencing the entry in the table/model from the admin section compared to the default name of the model, &lt;code&gt;verbose_name_plural&lt;/code&gt; similar to the &lt;code&gt;verbose_name&lt;/code&gt; but for referencing the entire table/model. Also &lt;code&gt;auto_now_add&lt;/code&gt; and &lt;code&gt;auto_now&lt;/code&gt; for &lt;code&gt;DateTimeField&lt;/code&gt; so as to set the current date-time by default.&lt;/p&gt;

&lt;p&gt;More options and arguments that can be passed to the fields in models are given in the django docs &lt;a href="https://docs.djangoproject.com/en/4.0/topics/db/models/#field-options"&gt;field options&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are some of the options or arguments that we can or need to pass to the fields to set up a constrained schema for our database. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#meta-class"&gt;
  &lt;/a&gt;
  Meta class
&lt;/h3&gt;

&lt;p&gt;Meta class is a nested class inside the model class which is most of the times used for ordering the entries(objects) in the table, managing permissions for accessing the model, add constraints to the models related to the attributes/fields inside it, etc.&lt;/p&gt;

&lt;p&gt;You can read about the functionalities of the Meta class in the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/options/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#model-methods"&gt;
  &lt;/a&gt;
  Model methods
&lt;/h2&gt;

&lt;p&gt;As a class can have functions, so does a model as it is a Python class after all. We can create kind of a helper methods/functions inside the model. The model class provides a helpful &lt;code&gt;__str__()&lt;/code&gt; function which is used to rename an object from the database. We also have other predefined helper functions like &lt;code&gt;get_absolute_url&lt;/code&gt; that generates the URL and returns it for further redirection or rendering.&lt;/p&gt;

&lt;p&gt;Also, you can define the custom functions that can be used as to help the attributes inside the model class.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#django-orm"&gt;
  &lt;/a&gt;
  Django ORM
&lt;/h2&gt;

&lt;p&gt;Django has an Object Relational Mapper is the core concept in Django or the component in Django that allows us to interact with the database without the programmer writing SQL/DB queries. It is like a Pythonic way to write and execute sql queries, it basically abstracts away the layer to manually write SQL queries. &lt;/p&gt;

&lt;p&gt;We'll explore the details of how the ORM works under the hood but it's really interesting and fascinating for a Beginner to make web applications without learning SQL(not recommended though personally). For now, its just magical to see Django handling the DB operations for you. You can get the references for learning about the Queryset in ORM from the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/querysets/"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example-model"&gt;
  &lt;/a&gt;
  Example Model
&lt;/h2&gt;

&lt;p&gt;Let us set up a model from what we have learned so far. &lt;/p&gt;

&lt;p&gt;We'll create a model for a Blog Post again but with more robust fields and structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#from django.db import models
from django.contrib.auth.models import User

class Article(models.Model):

    options = (
    ('draft', 'Draft'),
    ('published', 'Published'),
    )

    title = models.CharField(max_length=255, unique=True)
    slug = models.SlugField(max_length=255, unique_for_date='publish')
    post = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='Posts')
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=16, choices=option, default='draft')

    def __str__()
        return self.title

    class Meta:
        ordering = ('-publish',)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see in the above model that we have defined the Meta class which is optional and is generally written to modify how to entries inside the table appear or order with other functionalities as well. We have also added the choices option in the status field which has two choices &lt;code&gt;Draft&lt;/code&gt; and &lt;code&gt;Publish&lt;/code&gt; one which is seen by the django interface and the other to the end-users. We have also added certain fields like slug that will create the URL for the blog post, also certain options like &lt;code&gt;unique&lt;/code&gt; has been set to restrict duplicate entries being posted to the database. The &lt;code&gt;related_name&lt;/code&gt; in the &lt;code&gt;ForeignKey&lt;/code&gt; refers to the name given to the relation from the Article model to the User model in this case. &lt;/p&gt;

&lt;p&gt;So, we can see that Django allows us to structure the schema of a database. Though nothing is seen as an end result, when we configure and migrate the model to our database we will see the results of the hard work spent in creating and designing the model. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-specific-fields"&gt;
  &lt;/a&gt;
  Database Specific fields
&lt;/h2&gt;

&lt;p&gt;By this time, you will have gotten a feel of what a database might be. Most of the projects are designed around SQL databases but No-SQL databases and others are also used in cases which suite them the most. We have tools to manage this database in SQL we call it the Database Management System (DBMS). It's just a tool to manage data, but there is not just a single Database management tool out there, there are gazillions and bazillions of them. Most  popular include &lt;code&gt;MySQL&lt;/code&gt;, &lt;code&gt;PostgreSQL&lt;/code&gt;, &lt;code&gt;SQLite&lt;/code&gt;, &lt;code&gt;Oracle&lt;/code&gt;, &lt;code&gt;Microsoft Access&lt;/code&gt;, &lt;code&gt;Maria DB&lt;/code&gt;, and tons of others. &lt;/p&gt;

&lt;p&gt;Well, these different DBMS tools are almost similar with a few hiccups here and there. So, different Database tools might have different fields they provide. For Example, in Database &lt;code&gt;PostgreSQL&lt;/code&gt; provides the ListField which &lt;code&gt;SQLite&lt;/code&gt; doesn't that can be the decision to be taken before creating any project. There might be some fields that some DBMS provide and other doesn't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We understood the basics of creating a model. We didn't touch on the database yet but the next part is all about configuration and migration so we'll get hands-on with the databases. We covered how to structure our database, how to write fields in the model, add constraints and logic to them and explore the terminologies in Django like ORM, Database Types, etc. &lt;/p&gt;

&lt;p&gt;Thank you for reading the article, if you have any feedback kindly let me know, and until then Happy Coding :)&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>webdev</category>
      <category>backend</category>
    </item>
    <item>
      <title>Variáveis - Ruby</title>
      <author>Diego Novais</author>
      <pubDate>Tue, 04 Jan 2022 16:55:14 +0000</pubDate>
      <link>https://dev.to/dnovais/variaveis-ruby-f8p</link>
      <guid>https://dev.to/dnovais/variaveis-ruby-f8p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#vari%C3%A1veis-locais"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Variáveis Locais&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As variáveis locais são as mais comuns quando estamos utilizando o Ruby. Para usá-la basta que seja atribuído um valor à variável desejada. Vejam os exemplos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Diego Novais'&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Diego Novais"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as variáveis possuem seu escopo, por ex. uma variável local exercerá seu papel apenas “no local” onde foi definida.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_name_is&lt;/span&gt;
  &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Diego'&lt;/span&gt;
  &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Novais'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:my_name_is&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se tentarmos imprimir uma das variáveis fora do escopo do método &lt;code&gt;my_name_is&lt;/code&gt; teremos um erro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;010&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="no"&gt;NameError&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;undefined&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="sb"&gt;`first_name' for main:Object)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vari%C3%A1veis-globais%C2%A0"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Variáveis Globais $&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;O conceito de variável global é, basicamente, uma referência acessível em qualquer parte da aplicação. Existe uma convenção de nomes onde diz que estas variáveis devem ser iniciadas com $ (cifrão).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="vg"&gt;$version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1.2.3"&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"1.2.3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;defined?&lt;/span&gt; &lt;span class="vg"&gt;$version&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"global-variable"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vari%C3%A1veis-de-inst%C3%A2ncia-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Variáveis de Instância @&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As variáveis de instância são aquelas que &lt;strong&gt;ficam disponíveis para cada uma das instâncias de uma classe&lt;/strong&gt;, ou seja, isoladamente em cada objeto. Ou seja, variáveis de instância implementam os atributos de uma classe, ou suas variáveis membro, e, coletivamente, representam o estado de um objeto. São definidas na classe de forma independente dos outros objetos da mesma classe.&lt;/p&gt;

&lt;p&gt;Veja o exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"teste"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;
    &lt;span class="s2"&gt;"I'm speaking with you! &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:speak&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variables&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:@name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vari%C3%A1veis-de-classe%C2%A0"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Variáveis de Classe @@&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Variáveis de classe são responsáveis por guardar informações em um classe. Armazenam seu próprio estado e são compartilhadas entre todos os objetos e &lt;strong&gt;“atravessam” as heranças entre classes&lt;/strong&gt;. Variáveis de classe devem ser iniciadas com @@ (2 arrobas).&lt;/p&gt;

&lt;p&gt;Veja o exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt;
  &lt;span class="vc"&gt;@@kind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'flying'&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kind&lt;/span&gt;
    &lt;span class="vc"&gt;@@kind&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kind&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"flying"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Duck&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Animal&lt;/span&gt;
  &lt;span class="vc"&gt;@@kind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'walk'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Duck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kind&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"walk"&lt;/span&gt;

&lt;span class="no"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class_variables&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:@@kind&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>braziliandevs</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>Beautify Your GitHub Profile README</title>
      <author>Xyphuz</author>
      <pubDate>Tue, 04 Jan 2022 16:37:44 +0000</pubDate>
      <link>https://dev.to/wst24365888/beautify-your-github-profile-readme-24fg</link>
      <guid>https://dev.to/wst24365888/beautify-your-github-profile-readme-24fg</guid>
      <description>&lt;p&gt;Have you ever seen a beautiful &lt;a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme"&gt;profile README&lt;/a&gt; while browsing the GitHub profiles of someone?&lt;/p&gt;

&lt;p&gt;You may be wondering how to make it look like that. Here are some tips:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-html-elements"&gt;
  &lt;/a&gt;
  Use HTML Elements
&lt;/h2&gt;

&lt;p&gt;Because README uses Markdown syntax, there are some features in the layout that HTML Elements can do that Markdown cannot, such as centering blocks and resizing images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-tools"&gt;
  &lt;/a&gt;
  Use Tools
&lt;/h2&gt;

&lt;p&gt;There are many tools that can help you make your README more beautiful. The idea is to use the GitHub API to dynamically generate SVG charts that show your GitHub data, such as contribution amount, cost used languages or total star earned, total PRs... etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-badges"&gt;
  &lt;/a&gt;
  For Badges
&lt;/h3&gt;

&lt;p&gt;For badges, try &lt;a href="https://shields.io/"&gt;&lt;strong&gt;shields.io&lt;/strong&gt;&lt;/a&gt;, it helps you create many different kinds of badges, and there are many parameters to create the badge you want to show.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/badges/shields"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Buk2TUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api/pin/%3Fusername%3Dbadges%26repo%3Dshields" alt="repo-link" width="400" height="140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_hn_Qpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Example-black%3Flogo%3Ddev.to%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_hn_Qpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Example-black%3Flogo%3Ddev.to%26style%3Dfor-the-badge" alt="badge-example" width="105" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-stats"&gt;
  &lt;/a&gt;
  For Stats
&lt;/h3&gt;

&lt;p&gt;For stats, try &lt;strong&gt;github-readme-stats&lt;/strong&gt;, it helps you create SVG for all kinds of your GitHub stats.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWapfgqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api/pin/%3Fusername%3Danuraghazra%26repo%3Dgithub-readme-stats" alt="repo-link" width="400" height="120"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T8XvN9Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api%3Fusername%3Dwst24365888%26border_radius%3D0%26icon_color%3D0aa%26bg_color%3D000%26text_color%3Dccc%26title_color%3DFCE928%26show_icons%3Dtrue%26count_private%3Dtrue%26hide_border%3Dtrue%26include_all_commits%3Dtrue%26hide_title%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T8XvN9Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api%3Fusername%3Dwst24365888%26border_radius%3D0%26icon_color%3D0aa%26bg_color%3D000%26text_color%3Dccc%26title_color%3DFCE928%26show_icons%3Dtrue%26count_private%3Dtrue%26hide_border%3Dtrue%26include_all_commits%3Dtrue%26hide_title%3Dtrue" alt="stats-example" width="495" height="165"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-commitcontribution-graph"&gt;
  &lt;/a&gt;
  For Commit/Contribution Graph
&lt;/h3&gt;

&lt;p&gt;For commit/contribution graph, try &lt;strong&gt;github-contribution-graph&lt;/strong&gt;! &lt;/p&gt;

&lt;p&gt;It's an awesome tool for dynamically generating contribution graphs that show your GitHub contributions.&lt;/p&gt;

&lt;p&gt;It's beautiful, it has SLIM animation, and it supports custom background image (even &lt;code&gt;.gif&lt;/code&gt; !)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ez4o/github-contribution-graph"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4WNZOX34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api/pin/%3Fusername%3Dez4o%26repo%3Dgithub-contribution-graph" alt="repo-link" width="400" height="140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkG8hHI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ucxf4y60oi8go5cwf6p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkG8hHI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ucxf4y60oi8go5cwf6p.gif" alt="Image description" width="632" height="680"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, that's all about today's tips!&lt;/p&gt;

&lt;p&gt;If you have any ideas or questions, please feel free to share them with me in the comment section!&lt;/p&gt;

&lt;p&gt;If you like any of the above tools, don't forget to leave a star in their GitHub repo!&lt;/p&gt;

</description>
      <category>github</category>
      <category>profile</category>
      <category>readme</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
