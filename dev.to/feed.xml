<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Add YouTube Video Player in React-App</title>
      <author>Fidal Mathew</author>
      <pubDate>Fri, 12 Nov 2021 08:58:06 +0000</pubDate>
      <link>https://dev.to/fidalmathew/add-youtube-video-player-in-react-app-1e22</link>
      <guid>https://dev.to/fidalmathew/add-youtube-video-player-in-react-app-1e22</guid>
      <description>&lt;p&gt;Hi folks, hope you are doing well. In this post we are going to learn how to add a video link to your React app and play in your React app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install"&gt;
  &lt;/a&gt;
  How to Install
&lt;/h3&gt;

&lt;p&gt;This player component can be used by installing react-player&lt;br&gt;
NPM package.&lt;/p&gt;

&lt;p&gt;Enter your directory, open your terminal (Ctrl+ J).&lt;br&gt;
Type &lt;code&gt;npm i react-player&lt;/code&gt; in your app directory and press enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-eYbmhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3l0ci3vpulokzurev1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-eYbmhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3l0ci3vpulokzurev1j.png" alt="install react-player" width="575" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Import&lt;/strong&gt; -&lt;br&gt;
Now, import the package in the React component file where you want to add the video player.&lt;br&gt;
&lt;code&gt;import ReactPlayer from "react-player";&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aqsCYoPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so07xjh4kxq6t6b56957.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aqsCYoPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so07xjh4kxq6t6b56957.png" alt="Import" width="533" height="130"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;2. Add the component&lt;/strong&gt; - &lt;br&gt;
&lt;code&gt;&amp;lt;ReactPlayer url="url-link"  controls={true} /&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6D29Zq1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7q2fx93e2ugj0bufjyh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6D29Zq1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7q2fx93e2ugj0bufjyh9.png" alt="Add the component" width="880" height="85"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurray, you added a video-player to your React app!! &lt;br&gt;
At this point, you can stop and enjoy :)  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional Settings-&lt;/strong&gt;&lt;br&gt;
If you want to add some extra settings, here are a few-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;controls = {true/false}&lt;/code&gt; - provides video controls to user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;loop = {true/false}&lt;/code&gt;     - repeat the video if it ends&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;volume = {0 to 1}&lt;/code&gt;       - set volume &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To check out more, click &lt;a href="https://www.npmjs.com/package/react-player"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the my Netflix clone, click on any movie to view it's trailer - &lt;a href="https://netflix-clone-fce11.web.app/"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjSYWZ7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epf9asbphydev64lzno1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjSYWZ7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epf9asbphydev64lzno1.png" alt="Netflix Clone" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you know of other methods to implement, let me know in the comments. Thanks for reading :) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Write Better Tailwind CSS Containers</title>
      <author>Mark Mead</author>
      <pubDate>Fri, 12 Nov 2021 08:51:31 +0000</pubDate>
      <link>https://dev.to/markmead/how-to-write-better-tailwind-css-containers-4m8c</link>
      <guid>https://dev.to/markmead/how-to-write-better-tailwind-css-containers-4m8c</guid>
      <description>&lt;p&gt;When it comes to Tailwind CSS containers, a lot of people will write &lt;code&gt;max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or something similar. In fact, this website uses the classes above but instead writing that every time, instead I write &lt;code&gt;container&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, this is much cleaner and it will keep your HTML uncluttered.&lt;/p&gt;

&lt;p&gt;You could argue it's less "declarative" but Bootstrap has been using &lt;code&gt;container&lt;/code&gt; for years and there's never been any issues. Also, if you're that worried, don't - the explanation to how &lt;code&gt;container&lt;/code&gt; works in Tailwind CSS can be found in the &lt;code&gt;tailwind.config.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical Tailwind CSS config will have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can override Tailwind CSS classes or extend them.&lt;/p&gt;

&lt;p&gt;To update this to make &lt;code&gt;container&lt;/code&gt; perform how we want, we will override the class with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;DEFAULT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.5rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this is doing is taking the old &lt;code&gt;container&lt;/code&gt; class from Tailwind CSS that only did &lt;code&gt;max-w-screen-xl&lt;/code&gt; and replacing it with &lt;code&gt;max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8&lt;/code&gt; but we only need to write a single class name.&lt;/p&gt;

&lt;p&gt;You can adjust the padding for each screen size that's available in Tailwind CSS.&lt;/p&gt;

&lt;p&gt;If you opt into using a single padding class then don't write it as an object, simply do &lt;code&gt;padding: "1rem"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read up on the Tailwind CSS container class on the official docs page - &lt;a href="https://tailwindcss.com/docs/container"&gt;Tailwind CSS - Container&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>The Fastest Way To Build Lightweight Angular Content Service</title>
      <author>Dev By RayRay</author>
      <pubDate>Fri, 12 Nov 2021 08:09:52 +0000</pubDate>
      <link>https://dev.to/devbyrayray/the-fastest-way-to-build-lightweight-angular-content-service-3l6l</link>
      <guid>https://dev.to/devbyrayray/the-fastest-way-to-build-lightweight-angular-content-service-3l6l</guid>
      <description>&lt;p&gt;In the typical Angular applications, we use a lot of titles, labels, headers, and more content. But if you need a way to put those content elements in one place, you need something like a dictionary. It's a combination of small words and more extensive sentences.&lt;/p&gt;

&lt;p&gt;Some applications need multiple languages, but others need one language but have loads of content to re-use. In this article, I want to show you the fastest way to create a content (some call it a dictionary) Service for your Angular application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need a content service with multiple languages, I highly recommend &lt;a href="http://www.ngx-translate.com/"&gt;NGX-Translate&lt;/a&gt;. This package offers a simple API and Pipe mechanism to re-use pieces of content but also supports multiple languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png" width="733" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-content-service"&gt;
  &lt;/a&gt;
  Create A Content Service
&lt;/h2&gt;

&lt;p&gt;The simplest and fastest way to create Angular Services is by using the Angular CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng generate service services/content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By running this command, you will generate an Angular Service, automatically added to the &lt;code&gt;app.module.ts&lt;/code&gt; file. If your project has different settings for the CLI, it could appear in another Angular Module.&lt;/p&gt;

&lt;p&gt;Now the Content Service looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ContentService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png" width="733" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-json-dictionary-file"&gt;
  &lt;/a&gt;
  Create A JSON Dictionary File
&lt;/h2&gt;

&lt;p&gt;You need to create a dictionary file to put in all your titles, labels, and other content. Please put it in a place that works best for your application.&lt;/p&gt;

&lt;p&gt;I create a &lt;code&gt;dictionary&lt;/code&gt; folder where I make the &lt;code&gt;general.dictionary.json&lt;/code&gt; file, but I can have more dictionary files there.&lt;/p&gt;

&lt;p&gt;The content I put in there looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"pages"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"home"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Home"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Company name"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create any structure you like; it's up to you what works best.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png" width="733" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prepare-content-service-for-reusability"&gt;
  &lt;/a&gt;
  Prepare Content Service For Re-usability
&lt;/h2&gt;

&lt;p&gt;We start with creating a private property &lt;code&gt;cache$&lt;/code&gt; where we make a &lt;code&gt;BehaviourSubject&lt;/code&gt;. We do this because we can subscribe to this &lt;code&gt;BehaviourSubject&lt;/code&gt; from any place in the application. And the best part is, when a content item is being updated, it will automatically be updated everywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;cache$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you wonder what the difference is between different Subjects, please check this post "&lt;/em&gt;&lt;em&gt;&lt;a href="https://hasnode.byrayray.dev/rxjs-subject-behavioursubject-replaysubject-asyncsubject-void-subject-angular"&gt;When Use RxJS Subject, BehaviourSubject, ReplaySubject, AsyncSubject, or Void Subject in Angular&lt;/a&gt;&lt;/em&gt;&lt;em&gt;"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is importing the dictionary file on the top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../dictionary/general.dictionary.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the constructor of the Service, we want to make sure that if the &lt;code&gt;BehaviourSubject&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, we need to add the content from the dictionary file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need a method that exposes the &lt;code&gt;BehaviourSubject&lt;/code&gt; with its content to the subscribers. We do that by returning the &lt;code&gt;cache$&lt;/code&gt; property. The return type of the method is &lt;code&gt;any&lt;/code&gt; for this case because you don't have to type the structure of your dictionary. But if you want to, you can do it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For making the Service great for usage in your HTML templates, we can expose the &lt;code&gt;content()&lt;/code&gt; method with the &lt;code&gt;.getValue()&lt;/code&gt; method chained to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;()?.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have everything in our Service to make it usable. The complete code of the Service looks like this. Simple right 😉.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../dictionary/general.dictionary.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ContentService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;cache$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache$&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;()?.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png" width="733" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-content-service-in-the-content"&gt;
  &lt;/a&gt;
  Use The Content Service In The Content
&lt;/h2&gt;

&lt;p&gt;I guess you know how to make an Angular Component. The CLI is my favorite way to do it. For example, you generate a &lt;code&gt;HomepageComponent&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng generate component components/homepage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have an Angular Component for yourself, it's fine.&lt;/p&gt;

&lt;p&gt;First, we need to import the &lt;code&gt;ContentService&lt;/code&gt; into our Component and expose it via the &lt;code&gt;constructor&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;homepage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./homepage.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./homepage.component.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HomepageComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;contentService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ContentService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we want to expose the content from our &lt;code&gt;ContentService&lt;/code&gt; to the HTML template. We create a &lt;code&gt;content&lt;/code&gt; property in our Component and add the value via the &lt;code&gt;constructor&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;homepage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./homepage.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./homepage.component.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HomepageComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;contentService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ContentService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Via the &lt;code&gt;console.log&lt;/code&gt;, you can test if everything works as expected.&lt;/p&gt;

&lt;p&gt;Now add the title from our dictionary file in the HTML template using the &lt;code&gt;ContentService&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{content?.pages?.home?.title ?? 'title'}}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example, you can see that we add an expression to the template. In that expression, we are using the nullish collision technique. We do that, so we don't get error's when the property is not in the dictionary file. In this case, it just shows you "title". If the value is available, it will deliver the value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png" width="733" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now you have a straightforward Content Service in Angular without using an external package. So it's lightweight and super fast, and that is the best thing about it. Often, we may be thinking too complicated, but all we need is something simple.&lt;/p&gt;

&lt;p&gt;Hopefully, this helps you build great Angular applications that are easy to maintain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png" width="733" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" alt="hashnode-footer.png" width="866" height="400"&gt;&lt;/a&gt;&lt;br&gt;
*I hope you learned something new or are inspired to create something new after reading this story! 🤗 If so, consider subscribing via email (scroll to the top of this page) or follow me here on Hashnode.&lt;br&gt;
*&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that you can create a &lt;a href="https://hashnode.com/@devbyrayray/joinme"&gt;Developer blog like this one, yourself&lt;/a&gt;? It's entirely for free. 👍💰🎉🥳🔥&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If I left you with questions or something to say as a response, scroll down and type me a message. Please send me a &lt;a href="https://twitter.com/@devbyrayray"&gt;DM on Twitter @DevByRayRay&lt;/a&gt; when you want to keep it private. My DM's are always open 😁&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>rxjs</category>
    </item>
    <item>
      <title>Short and sweet CSS cheatsheet ❤️‍🔥</title>
      <author>Pramit Marattha</author>
      <pubDate>Fri, 12 Nov 2021 08:05:28 +0000</pubDate>
      <link>https://dev.to/aviyel/short-and-sweet-css-cheatsheet-bj7</link>
      <guid>https://dev.to/aviyel/short-and-sweet-css-cheatsheet-bj7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;The language that we use to style an HTML document is CSS. CSS specifies how HTML elements should appear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-syntax"&gt;
  &lt;/a&gt;
  CSS syntax
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEZtKBLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0b0ve5rt6i3h8igez848.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEZtKBLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0b0ve5rt6i3h8igez848.png" alt="CSS basics" width="651" height="560"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;property&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;the selector means &lt;strong&gt;&lt;em&gt;who&lt;/em&gt;&lt;/strong&gt; = who do you want to change&lt;/li&gt;
&lt;li&gt;property means &lt;strong&gt;&lt;em&gt;what&lt;/em&gt;&lt;/strong&gt; = what do you want to change&lt;/li&gt;
&lt;li&gt;value means &lt;strong&gt;&lt;em&gt;how&lt;/em&gt;&lt;/strong&gt; = how do you want to change&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;always keep your property: value pair in alphabetical order&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-box-model"&gt;
  &lt;/a&gt;
  CSS box model
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjAhPGyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ud6rrzr7jpisvvyg53ky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjAhPGyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ud6rrzr7jpisvvyg53ky.png" alt="CSS box model" width="702" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;css box model is a series of positioning properties designed to help with layout&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each of the property works in a different way and positons the items with different spacing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The box model is the most commonly used way to position items&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#padding"&gt;
  &lt;/a&gt;
  Padding
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;the space between the content and border&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-paddings-individual-sides"&gt;
  &lt;/a&gt;
  CSS Paddings - Individual sides
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#works-on-clockwise-pattern-top-right-bottom-left"&gt;
  &lt;/a&gt;
  works on clockwise pattern (top right bottom left)
&lt;/h4&gt;

&lt;p&gt;for example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/* is equal to */&lt;/span&gt;
 &lt;span class="nt"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nt"&gt;padding-right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nt"&gt;padding-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nt"&gt;padding-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#border"&gt;
  &lt;/a&gt;
  Border
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;border is the divider between padding and the margin.&lt;/li&gt;
&lt;li&gt;It can be styled using a CSS property called border.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border:5px solid red;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red border&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-border-style"&gt;
  &lt;/a&gt;
  CSS border style
&lt;/h3&gt;

&lt;p&gt;border-style property specifies what kind of border to display.&lt;a href="https://www.w3schools.com/css/css_border.asp"&gt;Learn more about border-style from here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Liv1uCeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e10wzlr6uliskwj6vuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Liv1uCeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e10wzlr6uliskwj6vuf.png" alt="CSS border style" width="819" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#margin"&gt;
  &lt;/a&gt;
  Margin
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; Margins are used to create space around elements, outside of any defined borders.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-margins-individual-sides"&gt;
  &lt;/a&gt;
  CSS Margins - Individual sides
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#works-on-clockwise-pattern-top-right-bottom-left"&gt;
  &lt;/a&gt;
  works on clockwise pattern (top right bottom left)
&lt;/h4&gt;

&lt;p&gt;for example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;150&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;/* is equal to */&lt;/span&gt;

&lt;span class="nt"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;margin-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;margin-right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;150&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;margin-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#css-selectors"&gt;
  &lt;/a&gt;
  CSS selectors
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;selectors are ways of grabbing and manipulating HTML&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Different selectors have different application&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#element-selector"&gt;
  &lt;/a&gt;
  Element selector
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;you can select entire elements without any special characters&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This applies to all of the elements with that tag on the page&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it ranks on the bottom of the specificity index&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#class-selectors"&gt;
  &lt;/a&gt;
  Class selectors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;select elements with a certain class name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;can be used on any and all elements with that class name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;can be used multiple times and is select with "." symbol&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#id-selectors"&gt;
  &lt;/a&gt;
  Id selectors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;select elements with a certain Id&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;can be used on any and all elements with that id name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;unlike classes, it can be only used on one element at a time,&lt;br&gt;
and is selected with the "#" symbol. However it is possible to use&lt;br&gt;
multiple time&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#id-vs-class-selectors"&gt;
  &lt;/a&gt;
  ID vs Class selectors
&lt;/h3&gt;

&lt;p&gt;ID selectors are a little bit different from the class selectors although they do&lt;br&gt;
have some similarities&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;you will use the ID to identify element where there is an only a single one of them on a particular page&lt;/p&gt;

&lt;p&gt;&lt;em&gt;particular ID only be used once on the page&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;you cant have more than one id for particular elements&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;id overrides the class and class override the element&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;inline CSS override id and class&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;inline style &amp;gt; ID &amp;gt; CLASS &amp;gt; element/tag&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ID can only be used once while class can be used multiple times&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#pseudo-selectors"&gt;
  &lt;/a&gt;
  &lt;em&gt;pseudo selectors&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a special type of selector that is used commonly for the interactivity of the website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;only is visible when something is done on the Website.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;
&lt;span class="nd"&gt;:first-child&lt;/span&gt;
&lt;span class="nd"&gt;:last-child&lt;/span&gt;
&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;:only-child&lt;/span&gt;
&lt;span class="nd"&gt;:link&lt;/span&gt;
&lt;span class="nd"&gt;:visited&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#advance-selectors"&gt;
  &lt;/a&gt;
  Advance selectors
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#adjacent-sibbling-selectors"&gt;
  &lt;/a&gt;
  Adjacent sibbling selectors
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#general-common-combinatorselector"&gt;
  &lt;/a&gt;
  General common combinator/selector
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* every button that is after the text area but they are in the same parent */&lt;/span&gt;

&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pruple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#child-selectors"&gt;
  &lt;/a&gt;
  Child selectors
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;every&lt;/span&gt; &lt;span class="nt"&gt;single&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;inside&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#descendent-selectors"&gt;
  &lt;/a&gt;
  Descendent selectors
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* descendent selectors */&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;mediumseagreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#attribute-selectors"&gt;
  &lt;/a&gt;
  Attribute selectors
&lt;/h3&gt;

&lt;p&gt;The [ attribute ] selector is used to select elements with a specified attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"value"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#types-of-attribute-selectors"&gt;
  &lt;/a&gt;
  Types of attribute selectors
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"../images/"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"../images/"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="s1"&gt;"../images/"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;~=&lt;/span&gt;&lt;span class="s1"&gt;"article-subtitle"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;123&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-comments"&gt;
  &lt;/a&gt;
  CSS comments
&lt;/h2&gt;

&lt;p&gt;Comments on css starts with /* and ends with */&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* single line */&lt;/span&gt;

&lt;span class="c"&gt;/* 
multi
line
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-colors"&gt;
  &lt;/a&gt;
  CSS colors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"&gt;Learn more about css colors&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-text-color"&gt;
  &lt;/a&gt;
  CSS text color
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color:Tomato;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello there!! This text is in tomato color&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-border-color"&gt;
  &lt;/a&gt;
  CSS border color
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border:5px solid Tomato;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello there!! My border is in tomato color&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-background-colors"&gt;
  &lt;/a&gt;
  CSS background colors
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background-color:Tomato;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello there!! I am tomato color&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-background-properties"&gt;
  &lt;/a&gt;
  CSS background properties
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#backgroundcolor"&gt;
  &lt;/a&gt;
  background-color
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#backgroundimage"&gt;
  &lt;/a&gt;
  background-image
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("some_image.png")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#backgroundrepeat"&gt;
  &lt;/a&gt;
  background-repeat
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("some_image.png")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat-x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; To repeat an image horizontally, set background-repeat: repeat-x and to repeat an image vertically, set background-repeat: repeat-y and to not repeat and image set background-repeat: no-repeat;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#backgroundattachment"&gt;
  &lt;/a&gt;
  background-attachment
&lt;/h4&gt;

&lt;p&gt;background-attachment property specifies whether the background image should scroll or be fixed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* background image will be at fixed position */&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("some_image.png")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* background image will scroll with the rest of the page */&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("some_image.png")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#backgroundposition"&gt;
  &lt;/a&gt;
  background-position
&lt;/h4&gt;

&lt;p&gt;background-position property sets the starting position of a background image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmfN3WKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt8pzinjzv0jmho3t52z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmfN3WKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt8pzinjzv0jmho3t52z.png" alt="background-position" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3schools.com/css/css_background_shorthand.asp"&gt;learn more here about all background properties&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-height-and-width"&gt;
  &lt;/a&gt;
  CSS height and width
&lt;/h2&gt;

&lt;p&gt;Height and width properties are used to set the height and width of an element&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NG09fH9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j6f4gnlvkrk6125q1rm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NG09fH9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j6f4gnlvkrk6125q1rm.png" alt="Height and width" width="649" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/css/css_dimension.asp"&gt;CSS Height and width&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-font"&gt;
  &lt;/a&gt;
  CSS font
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#font-size"&gt;
  &lt;/a&gt;
  font size
&lt;/h3&gt;

&lt;p&gt;font-size property sets the size of the text&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#font-family"&gt;
  &lt;/a&gt;
  font family
&lt;/h3&gt;

&lt;p&gt;font-family property should hold several font names as a "fallback" system, to ensure maximum compatibility between browsers and OS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Times New Roman"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Courier New"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#font-style"&gt;
  &lt;/a&gt;
  font style
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* font-style property is mostly used to specify italic text.*/&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nc"&gt;.normal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nc"&gt;.italic&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;italic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nc"&gt;.oblique&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;oblique&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*font-weight property specifies the weight of a font*/&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nc"&gt;.normal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nc"&gt;.boldd&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*font-variant property specifies whether or not a text should be displayed in a small-caps font*/&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nc"&gt;.normal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nc"&gt;.caps&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;small-caps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#float"&gt;
  &lt;/a&gt;
  Float
&lt;/h3&gt;

&lt;p&gt;The CSS float property specifies how an element should float.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;float&lt;/span&gt;&lt;span class="nd"&gt;:right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;float&lt;/span&gt;&lt;span class="nd"&gt;:left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;float&lt;/span&gt;&lt;span class="nd"&gt;:none&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;float&lt;/span&gt;&lt;span class="nd"&gt;:inherit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#clear"&gt;
  &lt;/a&gt;
  clear
&lt;/h3&gt;

&lt;p&gt;The CSS clear property specifies what elements can float beside the cleared element and on which side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clear&lt;/span&gt;&lt;span class="nd"&gt;:right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;clear&lt;/span&gt;&lt;span class="nd"&gt;:left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;clear&lt;/span&gt;&lt;span class="nd"&gt;:none&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;clear&lt;/span&gt;&lt;span class="nd"&gt;:inherit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#display"&gt;
  &lt;/a&gt;
  Display
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;display&lt;/span&gt;&lt;span class="nd"&gt;:none&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#two-different-display-"&gt;
  &lt;/a&gt;
  Two different display :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Inline&lt;/li&gt;
&lt;li&gt;Block
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;display&lt;/span&gt;&lt;span class="nd"&gt;:inline&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;inline-block&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-position"&gt;
  &lt;/a&gt;
  CSS position
&lt;/h2&gt;

&lt;p&gt;position property specifies the type of positioning method used for an element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#position-static"&gt;
  &lt;/a&gt;
  position: static;
&lt;/h3&gt;

&lt;p&gt;HTML elements are positioned static by default.&lt;br&gt;
"position: static;" is not positioned in any special way; it is always positioned according to the normal flow of the page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#position-relative"&gt;
  &lt;/a&gt;
  position: relative;
&lt;/h3&gt;

&lt;p&gt;position: relative; is positioned relative to its normal position.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.relative&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#position-fixed"&gt;
  &lt;/a&gt;
  position: fixed;
&lt;/h3&gt;

&lt;p&gt;position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.fixed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#position-absolute"&gt;
  &lt;/a&gt;
  position: absolute;
&lt;/h3&gt;

&lt;p&gt;position: absolute; is positioned relative to the nearest positioned ancestor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.relative&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.absolute&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#position-sticky"&gt;
  &lt;/a&gt;
  position: sticky;
&lt;/h3&gt;

&lt;p&gt;position: sticky; is positioned based on the user's scroll position&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.sticky&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sticky&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#css-flexbox"&gt;
  &lt;/a&gt;
  CSS Flexbox
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;flexbox stands for flexible box&lt;/li&gt;
&lt;li&gt;It is a display type that comes to a range of properties allowing you to arrange items easily&lt;/li&gt;
&lt;li&gt;It is an alternative to using displays,floats and other layout properties&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flexbox-components"&gt;
  &lt;/a&gt;
  Flexbox components
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;flexbox element is split into two main parts:
the containers and the items&lt;/li&gt;
&lt;li&gt;containers are the parent elements&lt;/li&gt;
&lt;li&gt;flex items are the child elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flex-direction-properties"&gt;
  &lt;/a&gt;
  Flex direction properties
&lt;/h3&gt;

&lt;p&gt;The flex-direction property defines in which&lt;br&gt;
direction the container wants to stack the flex items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;column&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;flex-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;column-reverse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;flex-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;flex-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;row-reverse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flexwrap-properties"&gt;
  &lt;/a&gt;
  Flex-wrap properties
&lt;/h3&gt;

&lt;p&gt;The flex-wrap property specifies whether the &lt;br&gt;
flex items should wrap or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex-wrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;flex-wrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;nowrap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;flex-wrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;wrap-reverse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;flex-wrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt; &lt;span class="nt"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#justifycontent-property"&gt;
  &lt;/a&gt;
  Justify-content Property
&lt;/h3&gt;

&lt;p&gt;The justify-content property is used to align the flex items:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;flex-start&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;flex-end&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;space-around&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;space-between&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oh9CWNqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/37651620/117550061-ccd6ac00-b05d-11eb-863a-4b1b0a78224c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oh9CWNqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/37651620/117550061-ccd6ac00-b05d-11eb-863a-4b1b0a78224c.png" alt="image" width="880" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-flex-items"&gt;
  &lt;/a&gt;
  CSS Flex Items
&lt;/h3&gt;

&lt;p&gt;The direct child elements of a flex &lt;br&gt;
container automatically &lt;br&gt;
becomes flexible (flex) items.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-order-property"&gt;
  &lt;/a&gt;
  The order Property
&lt;/h3&gt;

&lt;p&gt;The order property specifies the order of the flex items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"order: 3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"order: 2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"order: 4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"order: 1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flexgrow-property"&gt;
  &lt;/a&gt;
  Flex-grow Property
&lt;/h3&gt;

&lt;p&gt;The flex-grow property specifies how much a flex item &lt;br&gt;
will grow relative to the rest of the flex items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"flex-grow: 1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"flex-grow: 1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"flex-grow: 8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flexshrink-property"&gt;
  &lt;/a&gt;
  Flex-shrink Property
&lt;/h3&gt;

&lt;p&gt;The flex-shrink property specifies how much a &lt;br&gt;
flex item will shrink relative to the rest of the flex items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"flex-shrink: 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;8&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;10&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flexbasis-property"&gt;
  &lt;/a&gt;
  Flex-basis Property
&lt;/h3&gt;

&lt;p&gt;The flex-basis property specifies the initial length of a flex item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"flex-basis: 200px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flex-property"&gt;
  &lt;/a&gt;
  Flex Property
&lt;/h3&gt;

&lt;p&gt;The flex property is a shorthand property for the &lt;br&gt;
flex-grow, flex-shrink, and flex-basis properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"flex: 0 0 200px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#alignself-property"&gt;
  &lt;/a&gt;
  Align-self Property
&lt;/h3&gt;

&lt;p&gt;The align-self property specifies the alignment for the selected &lt;br&gt;
item inside the flexible container.&lt;/p&gt;

&lt;p&gt;The align-self property overrides the default alignment &lt;br&gt;
set by the container's align-items property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"align-self: center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kTjuCCz7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/37651620/117560434-582b5e00-b0ad-11eb-9962-925fcb29653d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kTjuCCz7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/37651620/117560434-582b5e00-b0ad-11eb-9962-925fcb29653d.png" alt="image" width="880" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shrink-grow-and-basis"&gt;
  &lt;/a&gt;
  Shrink, Grow and Basis
&lt;/h3&gt;

&lt;p&gt;The flex-shrink CSS property sets the flex shrink factor of&lt;br&gt;
a flex item. If the size of all flex items is larger&lt;br&gt;
than the flex container, items shrink to fit according&lt;br&gt;
to flex-shrink.&lt;/p&gt;

&lt;p&gt;The flex-grow CSS property sets the flex grow factor of a flex item's&lt;br&gt;
 main size.&lt;/p&gt;

&lt;p&gt;The flex-basis CSS property sets the initial main size of a &lt;br&gt;
flex item. It sets the size of the content box unless &lt;br&gt;
otherwise set with box-sizing.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#grid"&gt;
  &lt;/a&gt;
  Grid
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Is more manual providing you with more tools to layout a container&lt;/li&gt;
&lt;li&gt;It is also very focused on providing tool for both dimension(width and height)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;whereas flexbox is only focused on width&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* start end center space-evenly*/&lt;/span&gt;
  &lt;span class="c"&gt;/* justify-content: start; */&lt;/span&gt;
  &lt;span class="c"&gt;/* justify-content: end; */&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.grid-item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#grid-coloumn-and-row-gap"&gt;
  &lt;/a&gt;
  Grid coloumn and row gap
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-column-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;grid-row-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;grid-gap&lt;/span&gt;&lt;span class="nd"&gt;:column&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#grid-column-row-and-area"&gt;
  &lt;/a&gt;
  Grid column row and area
&lt;/h2&gt;

&lt;p&gt;The grid-column property sets the width of the column of a grid item.&lt;/p&gt;

&lt;p&gt;The grid-row property sets the height of the row of a grid item.&lt;/p&gt;

&lt;p&gt;The grid-area property sets the area of a grid item. It consists of the width of the column &amp;amp; height of the row of a grid item.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gh37LTjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk911u7upq2njcag20us.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gh37LTjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk911u7upq2njcag20us.png" alt="Row and col" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grid-vs-flexbox"&gt;
  &lt;/a&gt;
  GRID vs Flexbox
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;similar to flexbox grid is a display type that can be used to activate
certain type of layout feature in container element&lt;/li&gt;
&lt;li&gt;They are both alternative to other layout features available in css.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#further-readings"&gt;
  &lt;/a&gt;
  Further readings
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS"&gt;MDN CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/"&gt;CSS tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/css/default.asp"&gt;W3 school&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>JavaScript weather app for absolute beginners</title>
      <author>Divyesh Kamalanaban</author>
      <pubDate>Fri, 12 Nov 2021 07:56:39 +0000</pubDate>
      <link>https://dev.to/divyeshkamalanaban/javascript-weather-app-for-absolute-beginners-3nfi</link>
      <guid>https://dev.to/divyeshkamalanaban/javascript-weather-app-for-absolute-beginners-3nfi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I know, calling APIs and fetching them can be really tough for beginners. It is an absolute pain in the neck for absolute beginners. However, I'll try to explain all about APIs through a really decent web application, a simple weather app.&lt;/p&gt;

&lt;p&gt;This may seem tough, but actually it's easier than it looks. &lt;/p&gt;

&lt;p&gt;I will be using AJAX to call APIs and fetch information from them, so this might seem outdated, but to get a good idea about API calling, this is a good way to start.&lt;/p&gt;

&lt;p&gt;You need to know some Javascript to continue with this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-apis-actually"&gt;
  &lt;/a&gt;
  What are APIs actually?
&lt;/h2&gt;

&lt;p&gt;APIs or Application Programming Interface acts like an intermediate between server and the client that brings or &lt;em&gt;fetches&lt;/em&gt; information from the server to the client.&lt;/p&gt;

&lt;p&gt;With that data, you can create applications like a weather app, which without APIs is practically impossible. &lt;/p&gt;

&lt;p&gt;Why? Because you need to have satellites and huge amount of system to harness the information from satellites, which contain the forecast data.&lt;/p&gt;

&lt;p&gt;Now that you know what an API actually is, let's take a quick glance at what we're going to do get data today!&lt;/p&gt;

&lt;p&gt;I am not going to focus much on UI today, since it's all about logic for today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-agenda-for-today"&gt;
  &lt;/a&gt;
  Our Agenda for today:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Get your API key from &lt;a href="https://openweathermap.org"&gt;https://openweathermap.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Make a &lt;code&gt;XHR request&lt;/code&gt; to the &lt;a href="https://openweathermap.org"&gt;https://openweathermap.org&lt;/a&gt; server and get the JSON file.&lt;/li&gt;
&lt;li&gt;Get the required info from JSON file.&lt;/li&gt;
&lt;li&gt;Show the data to users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I recommend you use the console for showing the data, because showing the information in screen isn't agile and effective.&lt;/p&gt;

&lt;p&gt;With that said, let's get our hands dirty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-xhr-request"&gt;
  &lt;/a&gt;
  Making a XHR Request
&lt;/h2&gt;

&lt;p&gt;What on earth is XHR? XHR stands for XML HTTP Request. From the name, you can find out it's a HTTP request for XML. &lt;/p&gt;

&lt;p&gt;Irony that we're using it in Javascript? Nope.&lt;/p&gt;

&lt;p&gt;Actually, we're using AJAX method as told before. AJAX stands for Asynchronous JavaScript and XML. Since this method is used in both JS and XML, XHR request becomes relevant to JavaScript too.&lt;/p&gt;

&lt;p&gt;The thing that actually is ironical is that we're repeating the word 'Request'.&lt;/p&gt;

&lt;p&gt;Till now, you have learnt synchronous JavaScript, which executes step by step or line by line.&lt;/p&gt;

&lt;p&gt;But when it comes to APIs, you'll use asynchronous Javascript, which doesn't wait for an action or a function to get over. &lt;/p&gt;

&lt;p&gt;So, this will heavily reduce wait times, which in turn doesn't annoy the user.&lt;/p&gt;

&lt;p&gt;Coming back to the request, it is being heavily used in AJAX. You could say that XHR is a huge part of AJAX.&lt;/p&gt;

&lt;p&gt;Now, let's create a &lt;code&gt;function&lt;/code&gt; namely &lt;code&gt;getweather()&lt;/code&gt;. Pass &lt;code&gt;e&lt;/code&gt; (preferably) inside the parameters. This will be used to troubleshoot errors.&lt;/p&gt;

&lt;p&gt;Now, let's create a constant &lt;code&gt;xhr&lt;/code&gt; with value &lt;code&gt;new XMLhttpRequest()&lt;/code&gt;. the &lt;code&gt;new&lt;/code&gt; keyword is used to create an &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deep-dive-into-objects"&gt;
  &lt;/a&gt;
  Deep dive into Objects
&lt;/h3&gt;

&lt;p&gt;An &lt;code&gt;object&lt;/code&gt; is a data type that's used in OOP (Object Oriented Programming). Consider an &lt;code&gt;object&lt;/code&gt; like a real life object, which has properties.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;let car =  new object();&lt;/code&gt;. Now, let's define the properties of this object, &lt;code&gt;car&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;car.color = 'red';
car.model = 'Challenger';
car.manufacturer = 'Dodge';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems easy, right? So, I correlated a real life object, which is a Dodge Challenger red car with a JavaScript Object, which has these properties of real life car defined.&lt;/p&gt;

&lt;p&gt;There are ton of use cases. Imagine you are creating a user database. There are about a 100 users. So, you can create a &lt;code&gt;people&lt;/code&gt; object to define the basic properties of your users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function User(name, email, address){

this.name = name;
this.emailid = email;
this.address = address;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Notice the use of &lt;code&gt;this&lt;/code&gt; keyword. The &lt;code&gt;this&lt;/code&gt; keyword refers to &lt;code&gt;User&lt;/code&gt; in this function or context. The value of &lt;code&gt;this&lt;/code&gt; keyword changes with context or the function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What I showed you before is creating a simple object, used for generally theoretical purposes.&lt;/p&gt;

&lt;p&gt;What I showed you is a constructor function, which helps us assign the properties of &lt;code&gt;User&lt;/code&gt; to those 3 variables mentioned as parameters.&lt;/p&gt;

&lt;p&gt;So, let's create a new user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let Ken  = new User('Ken', 'ken@random.com', 'Times Square, NYC');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we've created a new user with name Ken, email '&lt;a href="mailto:ken@random.com"&gt;ken@random.com&lt;/a&gt;', and with his address as 'Times Square, NYC'.&lt;/p&gt;

&lt;p&gt;Now, we can create as many users as we want with a base &lt;code&gt;Object&lt;/code&gt; of &lt;code&gt;User&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This forms the crux of &lt;code&gt;OOP&lt;/code&gt;, which is an important part of probably every programming language.&lt;/p&gt;

&lt;p&gt;So, this knowledge is enough to help us call APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuing-with-xhr"&gt;
  &lt;/a&gt;
  Continuing with XHR
&lt;/h2&gt;

&lt;p&gt;Now, let's use the &lt;code&gt;open()&lt;/code&gt; method (a function present inside an object).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xhr.open('GET', `https://api.openweathermap.org/data/2.5/weather?q=ANYCITYFORNOW&amp;amp;appid=YOURAPIKEY&amp;amp;units=metric`, true);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to APIs, there are a few methods that comes to use.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;POST &lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;li&gt;PATCH&lt;/li&gt;
&lt;li&gt;HEAD&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These methods refer to these 5 operations respectively.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;READ&lt;/li&gt;
&lt;li&gt;UPDATE&lt;/li&gt;
&lt;li&gt;WRITE&lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;li&gt;Partial Modifications&lt;/li&gt;
&lt;li&gt;Similar to GET, but provides response without body.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll be using GET, because we want to just read the data and obtain it from the server.&lt;/p&gt;

&lt;p&gt;I used template literals (backticks) for the API key, more on that later.&lt;/p&gt;

&lt;p&gt;So, after this, we'll use &lt;code&gt;xhr.onload()&lt;/code&gt; method. This accepts a callback function or a function that gets executed after &lt;code&gt;xhr.onload&lt;/code&gt; is done.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;xhr.onload()&lt;/code&gt; is simple to understand: After the request is done and you get the data, what should be done.&lt;/p&gt;

&lt;p&gt;Now in this function there are 2 conditions, for which we will be using &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;Take a look at this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  xhr.onload = function (data){
        if (this.status === 200){

            let response = JSON.parse(this.responseText);
            console.log (response);            
        }

        else{
            console.log('Something went wrong.'); 
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the &lt;code&gt;this.status&lt;/code&gt; is the status code server returns after the request. 200 means the request is OK, so we've used 200 here.&lt;/p&gt;

&lt;p&gt;I've passed &lt;code&gt;data&lt;/code&gt; as the argument here, just in case to troubleshoot errors. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;responseText&lt;/code&gt; is the text that server provides after our request. We've to convert it into JSON, so that we can get the required data, therefore I used &lt;code&gt;JSON.parse()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Now, you can console log the &lt;code&gt;response&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Try running the code, and see if it works. Works? nope.&lt;/p&gt;

&lt;p&gt;We didn't send the request yet! use &lt;code&gt;xhr.send()&lt;/code&gt; after the above code.&lt;/p&gt;

&lt;p&gt;Now open the console and check if it works. It should work. If it doesn't check the API link once more and see if you have substituted the right values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-the-required-values"&gt;
  &lt;/a&gt;
  Getting the required values
&lt;/h2&gt;

&lt;p&gt;Now getting the required values is really simple. Take a look at the JSON and see the all the values closely. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; JSON contains the current temperature, minimum temperature and maximum temperature.&lt;/p&gt;

&lt;p&gt;Let's store the temperature value in &lt;code&gt;temp&lt;/code&gt; variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let temp = response.main.temp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Console log it and see if it works. It works!&lt;/p&gt;

&lt;p&gt;Store the required values in respective variables and try console logging it. If all works, you have successfully done the API calling right!&lt;/p&gt;

&lt;p&gt;Now, take the input element of your webpage, and call it with its &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; by &lt;code&gt;document.getElementById&lt;/code&gt; or &lt;code&gt;document.getElementByClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Use the value property and substitute it in the link. Template literals lets you do this by adding &lt;code&gt;${value}&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So, we have pretty much completed the API calling!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What are the most underrated websites according to you?</title>
      <author>Rachit Khurana</author>
      <pubDate>Fri, 12 Nov 2021 07:51:56 +0000</pubDate>
      <link>https://dev.to/dilutewater/what-are-the-most-underrated-websites-according-to-you-41b</link>
      <guid>https://dev.to/dilutewater/what-are-the-most-underrated-websites-according-to-you-41b</guid>
      <description>&lt;p&gt;The internet is filled with so many websites &amp;amp; there are many hidden gems out there. &lt;br&gt;
And I love to try out new websites. &lt;br&gt;
&lt;a href="https://i.giphy.com/media/26tOYHUgZYoj2YKPe/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26tOYHUgZYoj2YKPe/giphy.gif" alt="internet_explorer_gif" width="600" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would choose &lt;strong&gt;Notion&lt;/strong&gt; to be one of the most underrated websites. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  Notion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JIsxpPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/4/45/Notion_app_logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JIsxpPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/4/45/Notion_app_logo.png" alt="notion_logo" width="512" height="512"&gt;&lt;/a&gt;&lt;br&gt;
Its such a useful website. Yet, most people don't use it. Its very useful for productivity. &lt;br&gt;
It has so many features. Like it replaced the need of trello for project management for me. &lt;br&gt;
The way it handles pages &amp;amp; subpages is very nice. &lt;br&gt;
And the fact that we get unlimited storage is also very nice. &lt;br&gt;
Now whenever I have to write a text document, I go to Notion instead of word/google docs. Before I always used to go to Google Docs. Even tough I don't use its API's but there are also very useful for developers. &lt;br&gt;
Most Notion features are free. But even their personal pro plan is quite cheap &amp;amp; its also free for students. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-notable-mentions"&gt;
  &lt;/a&gt;
  Other notable mentions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Product Hunt&lt;/li&gt;
&lt;li&gt;Discord&lt;/li&gt;
&lt;li&gt;Telegram&lt;/li&gt;
&lt;li&gt;free-for.dev&lt;/li&gt;
&lt;li&gt;Dev.to&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#so-which-is-the-most-underrated-websites-according-to-you"&gt;
  &lt;/a&gt;
  So which is the most underrated websites according to you?
&lt;/h1&gt;

&lt;p&gt;What are you waiting for? write down in the comments&lt;br&gt;
I would love to hear from you &amp;amp; try out new sites. 😄&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How Negotiation Planning Works?</title>
      <author>Negotiating Wisdom</author>
      <pubDate>Fri, 12 Nov 2021 07:21:03 +0000</pubDate>
      <link>https://dev.to/negotiatingwisdom/how-negotiation-planning-works-484d</link>
      <guid>https://dev.to/negotiatingwisdom/how-negotiation-planning-works-484d</guid>
      <description>&lt;p&gt;In my previous post, I mentioned that money isn't everything in negotiation. But In this article, I am going to share with you the most useful of them all that was how &lt;a href="https://www.negotiatingwisdom.com/blog/one-minute-negotiating-planner"&gt;negotiation planning&lt;/a&gt; works?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First draw a circle about the size of a half-dollar. Out beside it, write “Ask for this.”&lt;/li&gt;
&lt;li&gt;Below that circle, draw a new circle about the size of a quarter, and write beside it “Be elated with this.”&lt;/li&gt;
&lt;li&gt;Below that second circle, draw a circle about the size of a nickel, and write “Most probable outcome.”&lt;/li&gt;
&lt;li&gt;Below that third circle, draw a circle about the size of a dime, and write “Less than hoped for, but acceptable.”&lt;/li&gt;
&lt;li&gt;And finally, below that, draw a circle about the size of an English pea, and write “Walk-away point.”&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Developing a Custom Plugin using Flutter</title>
      <author>RudderStack</author>
      <pubDate>Fri, 12 Nov 2021 07:07:19 +0000</pubDate>
      <link>https://dev.to/rudderstack/developing-a-custom-plugin-using-flutter-5g0k</link>
      <guid>https://dev.to/rudderstack/developing-a-custom-plugin-using-flutter-5g0k</guid>
      <description>&lt;p&gt;&lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt; is Google's free and open-source UI application development toolkit. It is used to build high-quality native interfaces on Android and iOS using a single codebase. One interesting thing about Flutter is that it works with existing code and is used by developers and organizations worldwide. In this post, we will learn how to develop a custom plugin using Flutter.&lt;/p&gt;

&lt;p&gt;As a part of our SDK roadmap at &lt;a href="https://rudderstack.com/"&gt;RudderStack&lt;/a&gt;, we wanted to develop a Flutter SDK. Our existing SDKs include features such as storing event details and persisting user details on the database, and much more. However, these features are already implemented in our Android and iOS SDKs.&lt;/p&gt;

&lt;p&gt;The Flutter SDK that we intend to develop is also meant to run on either your Android or iOS devices. So, we wanted to develop a solution in which we can use our existing Android and iOS SDK and develop the Flutter SDK.&lt;/p&gt;

&lt;p&gt;All the brainstorming finally led us to the idea of developing a custom plugin in Flutter. The custom plugin follows a basic mechanism based on Flutter's flexible system that allows calling platform-specific APIs available in Kotlin or Java on Android or Swift or Objective-C code on iOS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-of-the-flutter-sdk-across-different-channels"&gt;
  &lt;/a&gt;
  Working of the Flutter SDK Across Different Channels
&lt;/h2&gt;

&lt;p&gt;Flutter's built-in platform-specific API support does not rely on code generation but rather on a flexible message-passing style using a Platform Channel. To create a custom plugin, let us understand the Flutter architecture in detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The Flutter portion of the app sends messages to its &lt;em&gt;host&lt;/em&gt; - the iOS or Android portion of the app, over a platform channel.&lt;/li&gt;
&lt;li&gt;  The &lt;em&gt;host&lt;/em&gt; listens on the platform channel and receives the message. It then calls into any number of platform-specific APIs---using the native programming language---and sends a response back to the &lt;em&gt;client&lt;/em&gt;, the app's Flutter portion, as shown below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S04ggbA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/97bpcflt/production/3205a9439d543d60a426891702431e6baabbf11d-580x647.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S04ggbA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/97bpcflt/production/3205a9439d543d60a426891702431e6baabbf11d-580x647.png" alt="image-3205a9439d543d60a426891702431e6baabbf11d-580x647-png" width="580" height="647"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Architectural Overview of how Platform Channels Work Between Different Platforms&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-custom-plugin-using-flutter"&gt;
  &lt;/a&gt;
  Building a Custom Plugin Using Flutter
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;The following example demonstrates how to call a platform-specific API to retrieve and display the current battery level. It uses the Android &lt;code&gt;BatteryManager&lt;/code&gt; API and the iOS &lt;code&gt;device.batteryLevel&lt;/code&gt; API, via a single platform message, &lt;code&gt;getBatteryLevel()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-the-package"&gt;
  &lt;/a&gt;
  Step 1: Create the Package
&lt;/h3&gt;

&lt;p&gt;To create a plugin package,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Use the &lt;code&gt;--template=plugin&lt;/code&gt; flag with the Flutter &lt;code&gt;create&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;  Use the &lt;code&gt;--platforms=&lt;/code&gt; option followed by a comma-separated list to specify the plugin supports platforms. Available platforms are Android, iOS, web, Linux, macOS, and Windows.&lt;/li&gt;
&lt;li&gt;  Use the &lt;code&gt;--org&lt;/code&gt; option to specify your organization, using reverse domain name notation. This value is used in various package and bundle identifiers in the generated plugin code.&lt;/li&gt;
&lt;li&gt;  Use the &lt;code&gt;-a&lt;/code&gt; option to specify the language for Android or the -i option to specify the language for iOS.&lt;/li&gt;
&lt;li&gt;  Below is the example command to create a plugin package for Android, iOS platforms while using java for Android and Objective-C for iOS.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  This command creates a plugin project in the &lt;code&gt;batteryLevel&lt;/code&gt; folder with the specialized content given as follows:

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;lib/batteryLevel.dart -&lt;/code&gt; The Dart API for the plugin.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;android/src/main/java/com/rudderstack/batteryLevel/BatteryLevelPlugin.java&lt;/code&gt; - The Android platform-specific implementation of the plugin API in Java.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;ios/Classes/BatteryLevelPlugin.m&lt;/code&gt; - The iOS-platform specific implementation of the plugin API in Objective-C.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;example/&lt;/code&gt; - A Flutter app that depends on the plugin and illustrates how to use it.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out how different dart values are received on the platform side and vice versa on the Flutter website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-the-flutter-platform-client"&gt;
  &lt;/a&gt;
  Step 2: Create the Flutter Platform Client
&lt;/h3&gt;

&lt;p&gt;The app's &lt;code&gt;State&lt;/code&gt; class holds the current app state. Extend that to hold the current battery state.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First, construct the channel by using &lt;code&gt;MethodChannel&lt;/code&gt; with a single platform method that returns the battery level.&lt;/li&gt;
&lt;li&gt;  The client and host sides of a channel are connected through a channel name that's passed in the channel constructor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: All channel names used in a single app must be unique.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Prefix the channel name with a unique &lt;em&gt;domain prefix&lt;/em&gt;. For example, &lt;code&gt;org.rudderstack.dev/battery&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  Open the &lt;code&gt;batteryLevel.dart&lt;/code&gt; file located in the &lt;code&gt;lib&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;  Create the &lt;code&gt;method&lt;/code&gt; channel object as shown below with the channel name as &lt;code&gt;org.rudderstack.dev/battery&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  Please ensure that you are initializing the channel object with the same name as in Flutter across both the Android and iOS platforms.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nn"&gt;dart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nn"&gt;package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flutter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dart&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BatteryLevel&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nc"&gt;MethodChannel&lt;/span&gt; &lt;span class="n"&gt;_channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;      &lt;span class="nc"&gt;MethodChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rudderstack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="c1"&gt;// Get battery level.}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Next, invoke a method on the method channel, specifying the concrete method to call using the string identifier &lt;code&gt;getBatteryLevel&lt;/code&gt;. For example, the call might fail if the platform does not support the platform API (such as when running in a simulator). So, wrap the &lt;code&gt;invokeMethod&lt;/code&gt; call in a &lt;code&gt;try-catch&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;  Once you get the battery level, return it using the following code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get battery level.  static Future&amp;lt;String&amp;gt; getBatteryLevel() async {    String batteryLevel;    try {      final int result = await _channel.invokeMethod('getBatteryLevel');      batteryLevel = 'Battery level: $result%.';    } on PlatformException {      batteryLevel = 'Failed to get battery level.';    }    return batteryLevel;  }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Now, replace the &lt;code&gt;example/lib/main.dart&lt;/code&gt; file to contain a small user interface that displays the battery state in a string and a button for refreshing the value:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nn"&gt;package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flutter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;material&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dart&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nn"&gt;dart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nn"&gt;package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flutter&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dart&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nn"&gt;package&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;batteryLevel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;batteryLevel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dart&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;()));}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;  &lt;span class="n"&gt;_MyAppState&lt;/span&gt; &lt;span class="nf"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_MyAppState&lt;/span&gt;&lt;span class="o"&gt;();}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_MyAppState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;_batteryLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Unknown&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Platform messages are asynchronous, so we initialize in an async method.  Future&amp;lt;void&amp;gt; _getBatteryLevel() async {    String batteryLevel;    // Platform messages may fail, so we use a try/catch PlatformException.    try {      batteryLevel = await BatteryLevel.getBatteryLevel();    } on PlatformException {      batteryLevel = 'Failed to get platform version.';    }&lt;/span&gt;
    &lt;span class="c1"&gt;// If the widget was removed from the tree while the asynchronous platform    // message was in flight, and we want to discard the reply rather than calling    // setState to update our non-existent appearance.    if (!mounted) return;&lt;/span&gt;
    &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      &lt;span class="n"&gt;_batteryLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;batteryLevel&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;    &lt;span class="o"&gt;});&lt;/span&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;  &lt;span class="nc"&gt;Widget&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Material&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="nc"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;          &lt;span class="nl"&gt;mainAxisAlignment:&lt;/span&gt; &lt;span class="nc"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;spaceEvenly&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;          &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;            &lt;span class="nc"&gt;ElevatedButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt; &lt;span class="nc"&gt;Battery&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;              &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="n"&gt;_getBatteryLevel&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;            &lt;span class="o"&gt;),&lt;/span&gt;            &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_batteryLevel&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;          &lt;span class="o"&gt;],&lt;/span&gt;        &lt;span class="o"&gt;),&lt;/span&gt;      &lt;span class="o"&gt;),&lt;/span&gt;    &lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-add-android-platformspecific-implementation"&gt;
  &lt;/a&gt;
  Step 3: Add Android Platform-Specific Implementation
&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;BatteryLevelPlugin.java&lt;/code&gt; within &lt;code&gt;android/src/main/java/com/rudderstack/batteryLevel/&lt;/code&gt; and make the changes as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First, change the channel name in the initialization of &lt;code&gt;MethodChannel&lt;/code&gt; object to &lt;code&gt;org.rudderstack.dev/battery&lt;/code&gt; as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onAttachedToEngine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;    &lt;span class="nd"&gt;@NonNull&lt;/span&gt; &lt;span class="nc"&gt;FlutterPluginBinding&lt;/span&gt; &lt;span class="n"&gt;flutterPluginBinding&lt;/span&gt;  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MethodChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;        &lt;span class="n"&gt;flutterPluginBinding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBinaryMessenger&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;        &lt;span class="s"&gt;"org.rudderstack.dev/battery"&lt;/span&gt;      &lt;span class="o"&gt;);&lt;/span&gt;    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMethodCallHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Now, replace &lt;code&gt;onMethodCall&lt;/code&gt; with the definition shown below to handle the &lt;code&gt;getBatteryLevel&lt;/code&gt; call and respond with &lt;code&gt;batteryLevel&lt;/code&gt; as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onMethodCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@NonNull&lt;/span&gt; &lt;span class="nc"&gt;MethodCall&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;@NonNull&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"getBatteryLevel"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;notImplemented&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;    &lt;span class="o"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-add-ios-platformspecific-implementation"&gt;
  &lt;/a&gt;
  Step 4: Add iOS Platform-Specific Implementation
&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;BatteryLevelPlugin.m&lt;/code&gt; under &lt;code&gt;ios/Classes/&lt;/code&gt; and make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First, change the channel name in the initialization of &lt;code&gt;FlutterMethodChannel&lt;/code&gt; object to &lt;code&gt;org.rudderstack.dev/battery&lt;/code&gt; as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nl"&gt;registerWithRegistrar:&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FlutterPluginRegistrar&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;*)&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="nc"&gt;FlutterMethodChannel&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;FlutterMethodChannel&lt;/span&gt;      &lt;span class="nl"&gt;methodChannelWithName:&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="s"&gt;"org.rudderstack.dev/battery"&lt;/span&gt;            &lt;span class="nl"&gt;binaryMessenger:&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="n"&gt;messenger&lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;  &lt;span class="nc"&gt;BatteryLevelPlugin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="nc"&gt;BatteryLevelPlugin&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="nl"&gt;addMethodCallDelegate:&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="nl"&gt;channel:&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;];}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Next, replace the &lt;code&gt;handleMethodCall&lt;/code&gt; method with the definition below to handle the &lt;code&gt;getBatteryLevel&lt;/code&gt; call and respond with &lt;code&gt;batteryLevel&lt;/code&gt; as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nl"&gt;handleMethodCall:&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FlutterMethodCall&lt;/span&gt;&lt;span class="o"&gt;*)&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="nl"&gt;result:&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FlutterResult&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="s"&gt;"getBatteryLevel"&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FlutterMethodNotImplemented&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we have successfully developed a custom plugin. Now you can run the plugin across any two platforms (Android and iOS) and understand how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing-the-custom-plugin"&gt;
  &lt;/a&gt;
  Publishing the Custom Plugin
&lt;/h2&gt;

&lt;p&gt;Let's quickly look at a few instructions that you need to keep in mind after developing the custom plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  After developing the custom plugin, you can publish the custom plugin at &lt;a href="https://pub.dev/"&gt;pub.dev&lt;/a&gt; so that other developers can easily use it. However, before publishing, review the &lt;code&gt;pubspec.yaml&lt;/code&gt;, &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;CHANGELOG.md&lt;/code&gt;, and &lt;code&gt;LICENSE&lt;/code&gt; files to ensure that the content is complete and correct.&lt;/li&gt;
&lt;li&gt;  Next, run the publish command in the &lt;code&gt;dry-run&lt;/code&gt; mode to see if everything passes the analysis:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$ flutter pub publish --dry-run&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The next step is publishing to pub.dev, but ensure that you are ready because publishing is a final step that cannot be reverted:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$ flutter pub publish&lt;/p&gt;

&lt;p&gt;For more details on publishing, check out the &lt;a href="https://dart.dev/tools/pub/publishing"&gt;publishing docs&lt;/a&gt; on dart.dev.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://flutter.dev/docs/development/packages-and-plugins/developing-packages"&gt;https://flutter.dev/docs/development/packages-and-plugins/developing-packages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://flutter.dev/docs/development/platform-integration/platform-channels?tab=android-channel-java-tab"&gt;https://flutter.dev/docs/development/platform-integration/platform-channels?tab=android-channel-java-tab&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also check out the following Github repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/desusai7/flutter-custom-plugin"&gt;Sample App created in this post.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/rudderlabs/rudder-sdk-flutter"&gt;Rudderstack's Flutter SDK&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can download Rudderstack`s Flutter SDK as a dependency for your Flutter Apps from &lt;a href="http://pub.dev/"&gt;pub.dev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're interested in app development, check out &lt;a href="https://www.g2i.co/blog/hiring-a-react-native-developer"&gt;this post from G2i&lt;/a&gt; on React Native to learn more about the most important skills and attributes for React Native developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>javascript</category>
      <category>fluttersdk</category>
      <category>android</category>
    </item>
    <item>
      <title>Benefits to Hire the Right Shopify Expert Agency to Set Up Your Online Store
</title>
      <author>Harris Walker</author>
      <pubDate>Fri, 12 Nov 2021 06:56:48 +0000</pubDate>
      <link>https://dev.to/vrinsoftau1/benefits-to-hire-the-right-shopify-expert-agency-to-set-up-your-online-store-33pm</link>
      <guid>https://dev.to/vrinsoftau1/benefits-to-hire-the-right-shopify-expert-agency-to-set-up-your-online-store-33pm</guid>
      <description>&lt;p&gt;There are many things to analyze, plan, and then set up before you start the online store. The era where people prefer to shop from online stores and thus becomes more important for any business to start an online store. But it isn’t an easy task and will not be done by just creating a normal website. Whether it is a small business or a startup which at the start will be exciting but in no time it will establish a name for your brand in the market, giving all overwhelming outcomes. And thus you will need the help of Shopify experts to get that result.&lt;/p&gt;

&lt;p&gt;But the questions like why and when you should look for the Shopify experts, how to choose the right one, and who can help you grow.&lt;/p&gt;

&lt;p&gt;Who are Shopify Experts?&lt;/p&gt;

&lt;p&gt;Whatever technical support to build an online eCommerce store can be received by &lt;a href="https://www.vrinsoft.com.au/benefits-hire-right-shopify-expert-agency-set-online-store/"&gt;&lt;strong&gt;Shopify Experts Melbourne&lt;/strong&gt;&lt;/a&gt; who can help you with their expertise in the field by creating the design, development,t, and branding using proper strategies. And using their experience and expertise in the field assisting merchants with their business and creating online stores to expand more and attract more and more customers to buy from you. You can even hire a Shopify agency to build and manage your online store. Either you can go to hire different Shopify experts who have expertise in specific fields and work according to their experience in the field.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>wordpress</category>
      <category>devops</category>
    </item>
    <item>
      <title>Netlify's super easy static forms</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 12 Nov 2021 06:22:52 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/netlifys-super-easy-static-forms-2898</link>
      <guid>https://dev.to/dailydevtips1/netlifys-super-easy-static-forms-2898</guid>
      <description>&lt;p&gt;When it comes to static websites, they are blazing fast because they use no backends. In its simplest form, it's just an HTML file with some styling.&lt;/p&gt;

&lt;p&gt;And that's great in 99% of the cases until we hit the subject of forms.&lt;/p&gt;

&lt;p&gt;Many websites these days could be static ones. They provide visitors with some information about that website and maybe showcase some of their services.&lt;/p&gt;

&lt;p&gt;But then they also come with this contact form.&lt;br&gt;
And contact forms either need to save the information stored in them or perform an action like sending an email.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: These websites, including the forms, must run on Netlify hosting!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#introducing-netlify-forms"&gt;
  &lt;/a&gt;
  Introducing Netlify forms
&lt;/h2&gt;

&lt;p&gt;For me, that's where Netlify forms come in.&lt;br&gt;
By far, the easiest way to add logic to any static hosted form.&lt;/p&gt;

&lt;p&gt;And you won't believe how easy it is.&lt;/p&gt;

&lt;p&gt;Creating the form is no different than what you are used to in HTML. Let's say we want a form with a name, email, and message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Message"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will be our basic markup, and we usually need to add an action to this form.&lt;/p&gt;

&lt;p&gt;In the case of turning it into a Netlify form, all we need to do is add the &lt;code&gt;netlify&lt;/code&gt; attribute to the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;netlify&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you now publish your website to Netlify and fill out the form, you should see these popup in the forms sections on Netlify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1_mF-eU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635744340653/osr_Rw_dG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1_mF-eU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635744340653/osr_Rw_dG.png" alt="Form captured in Netlify" width="725" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Netlify will handle these forms automatically, and inside Netlify, you can even add mail notifications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-names-to-the-forms"&gt;
  &lt;/a&gt;
  Adding names to the forms
&lt;/h2&gt;

&lt;p&gt;You might have spotted in the example above that the form is called "form 1" you can add your name to this by adding the following HTML to your form element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"contact"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;netlify=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your form will be named "contact" in Netlify.&lt;/p&gt;

&lt;p&gt;Each submission will be captured inside this form. You click to open the details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKPfvG-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635744495432/TmGQG3NpB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKPfvG-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635744495432/TmGQG3NpB.png" alt="Form submissions" width="708" height="936"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-out-notifications"&gt;
  &lt;/a&gt;
  Sending out notifications
&lt;/h2&gt;

&lt;p&gt;As mentioned, you can add notifications to your forms. &lt;br&gt;
This can be any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outgoing webhook&lt;/li&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Between these three, you can set up anything you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dHrpbp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635744639966/PHo66mXed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dHrpbp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635744639966/PHo66mXed.png" alt="Netlify notifications" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h2&gt;

&lt;p&gt;By default, your free account on Netlify will come with these forms. The main limitation is the number of submissions you can receive, which is capped at 100 submissions per month.&lt;/p&gt;

&lt;p&gt;You can, however, clear out the forms to get more space again. Or upgrade your account for more submissions.&lt;/p&gt;

&lt;p&gt;The next level is at 19$ a month and includes 1000 submissions each month.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Netlify forms are a great and easy way to introduce form capabilities to a static hosted website.&lt;/p&gt;

&lt;p&gt;For most websites, the free plan is even enough to get by.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>netlify</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Web Development Journey</title>
      <author>Roy Duque</author>
      <pubDate>Fri, 12 Nov 2021 04:47:54 +0000</pubDate>
      <link>https://dev.to/duquer/web-development-journey-2dph</link>
      <guid>https://dev.to/duquer/web-development-journey-2dph</guid>
      <description>&lt;p&gt;Hello my name is Roy Duque and i am from Houston Tx. I am currently a delivery driver for a small company, I have decided to make a career change simply because i love technology and i find it very interesting how computers and the web works. I have decided to blog my journey and keep track of my progress because my goal is to become a full stack developer. Welcome to my coding journey!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Server Management using Ansible Tool</title>
      <author>Daniel Pepuho</author>
      <pubDate>Fri, 12 Nov 2021 03:28:25 +0000</pubDate>
      <link>https://dev.to/danielcristho/server-management-using-ansible-tool-4dl1</link>
      <guid>https://dev.to/danielcristho/server-management-using-ansible-tool-4dl1</guid>
      <description>&lt;p&gt;Server management using Ansible tool&lt;/p&gt;

&lt;h1&gt; What is Ansible? &lt;/h1&gt;

&lt;p&gt;Ansible is an open source tool that is most used by a SysAdmin in the process of automating.&lt;/p&gt;

&lt;h1&gt; Why you should use Ansible? &lt;/h1&gt;

&lt;p&gt;Ansible is a powerful tool that you can use in the &lt;strong&gt;process of server management, configuration task, and other tasks&lt;/strong&gt;. So when you use Ansible, many process such as &lt;strong&gt;configuration or deployment an application in server will be simple and quickly&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt; Let's start!!&lt;/h3&gt;

&lt;h4&gt; install &lt;/h4&gt;

&lt;p&gt;Linux:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update  ppa:ansible/ansible
$ sudo apt install ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;coming soon&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ansible</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
