<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building an App üì± and its Stack in minutes with LOLstack ü•°</title>
      <author>Arnaud Leymet</author>
      <pubDate>Sat, 07 Aug 2021 22:10:51 +0000</pubDate>
      <link>https://dev.to/codename/building-an-app-and-its-stack-in-minutes-with-lolstack-gka</link>
      <guid>https://dev.to/codename/building-an-app-and-its-stack-in-minutes-with-lolstack-gka</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hello there ( ò‚Äø ò)‚ïØ&lt;/strong&gt;&lt;br&gt;
This post is part of a short series you may prefer to read chronologically.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;Chosing what will compose a stack is both a matter of &lt;em&gt;experience&lt;/em&gt;, &lt;em&gt;opinion&lt;/em&gt; and &lt;em&gt;timing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Experience&lt;/em&gt; helps identifying what will stick, but &lt;em&gt;opinion&lt;/em&gt; has a major role in the final chosing.&lt;/p&gt;

&lt;p&gt;As of &lt;em&gt;timing&lt;/em&gt;, what seems to be a good idea at the time, may be compromised by a lack of maintainers goodwill or vision a year later.&lt;/p&gt;

&lt;p&gt;So by no means is the &lt;a href="https://stack.lol"&gt;LOLstack&lt;/a&gt; The Perfect Stack‚Ñ¢Ô∏è. Now that's out, let's cover what it has to offer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Enough with the stalling, &lt;a href="#loot"&gt;Access the good stuff&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#what-youll-get"&gt;
  &lt;/a&gt;
  What you'll get
&lt;/h2&gt;

&lt;p&gt;An App, an API, a Database and all of the in-between that make an App and its stack work.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-tech-stack"&gt;
  &lt;/a&gt;
  The tech stack &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Tech used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Mobile app&lt;/strong&gt; that targets iOS, Android &amp;amp; the web&lt;/td&gt;
&lt;td&gt;
&lt;a href="////reactnative.dev"&gt;React Native&lt;/a&gt; &lt;a href="////expo.io"&gt;Expo&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Design system&lt;/strong&gt; for a component-based, modular &amp;amp; consistent design&lt;/td&gt;
&lt;td&gt;
&lt;a href="////eva.design"&gt;Eva Design&lt;/a&gt; &lt;a href="////akveo.github.io/react-native-ui-kitten/"&gt;UI Kitten&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Typing&lt;/strong&gt; for a type-safe runtime &amp;amp; auto-generated interfaces&lt;/td&gt;
&lt;td&gt;&lt;a href="////www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Database&lt;/strong&gt; with both relational and unstructured data&lt;/td&gt;
&lt;td&gt;&lt;a href="////www.postgresql.org/docs/current/ddl-rowsecurity.html"&gt;PostgresQL&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;GraphQL API&lt;/strong&gt; autogenerated from the database schemas&lt;/td&gt;
&lt;td&gt;&lt;a href="////www.graphile.org/postgraphile/"&gt;PostGraphile&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;RESTful API&lt;/strong&gt; autogenerated from the database schemas&lt;/td&gt;
&lt;td&gt;&lt;a href="http://postgrest.org"&gt;PostgREST&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Custom RESTful API&lt;/strong&gt; for implementing server-side specific needs&lt;/td&gt;
&lt;td&gt;
&lt;a href="////expressjs.com"&gt;ExpressJS&lt;/a&gt; &lt;a href="////www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Authentication flow&lt;/strong&gt; for handling sign-up and sign-in&lt;/td&gt;
&lt;td&gt;&lt;a href="////jwt.io"&gt;JSON Web Token&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Role-based permissions&lt;/strong&gt; for a granular and low-level security&lt;/td&gt;
&lt;td&gt;&lt;a href="////www.postgresql.org/docs/current/ddl-rowsecurity.html"&gt;PostgresQL&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Containers&lt;/strong&gt; for services isolation and reproducibility&lt;/td&gt;
&lt;td&gt;&lt;a href="////www.docker.com"&gt;Docker&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Job queue&lt;/strong&gt; for handling asynchronous tasks&lt;/td&gt;
&lt;td&gt;&lt;a href="////github.com/graphile/worker"&gt;Graphile Worker&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Job scheduler&lt;/strong&gt; for running repetitive automated tasks&lt;/td&gt;
&lt;td&gt;&lt;a href="////github.com/mcuadros/ofelia"&gt;ofelia&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Web proxy&lt;/strong&gt; with SSL certificate handling, access logs&lt;/td&gt;
&lt;td&gt;&lt;a href="////traefik.io"&gt;traefik&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Admin interface&lt;/strong&gt; for accessing &amp;amp; manipulating the data directly&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://sosedoff.github.io/pgweb/"&gt;pgweb&lt;/a&gt; &lt;a href="////www.adminer.org"&gt;adminer&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Unit testing&lt;/strong&gt; for ensuring that code is functional&lt;/td&gt;
&lt;td&gt;
&lt;a href="////jestjs.io"&gt;Jest&lt;/a&gt; &lt;a href="////github.com/mixerp/plpgunit"&gt;plpgunit&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Status page&lt;/strong&gt; to communicate outage and downtime to customers&lt;/td&gt;
&lt;td&gt;&lt;a href="////cachethq.io"&gt;Cachet&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of these choices are questionable? Please drop a comment, and let's üëä discuss 'em softly :)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#dont-leave-just-yet"&gt;
  &lt;/a&gt;
  Don't leave just yet! &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Feeling overwhelmed? Don't. That was the boring part.&lt;/p&gt;

&lt;p&gt;Now is the good part, as booting this stack is just a copy-paste away:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone git@github.com:codename-co/stack.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;ü§≠ Installing &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker&lt;/a&gt; first would be a good idea by the way.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open source
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/codename-co/stack"&gt;LOLstack boilerplate&lt;/a&gt; is open source.&lt;br&gt;
This is great news to you right now for your ü§™ crazy app idea.&lt;br&gt;
Happy crafting!&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>reactnative</category>
      <category>programming</category>
      <category>docker</category>
    </item>
    <item>
      <title>Building an App Was Hard. ü§Ø But Stop Making Excuses.</title>
      <author>Arnaud Leymet</author>
      <pubDate>Sat, 07 Aug 2021 22:10:40 +0000</pubDate>
      <link>https://dev.to/codename/building-an-app-was-hard-but-stop-making-excuses-1552</link>
      <guid>https://dev.to/codename/building-an-app-was-hard-but-stop-making-excuses-1552</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hello there ( ò‚Äø ò)‚ïØ&lt;/strong&gt;&lt;br&gt;
This post is part of a short series you may prefer to read chronologically.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#top-4-reasons-not-working-on-your-mvp"&gt;
  &lt;/a&gt;
  Top 4 reasons not working on your MVP
&lt;/h2&gt;

&lt;p&gt;So this ü§™ crazy app idea has been growing in your head lately. Yet nothing has been done about it, as you don't see clearly how nor when building it.&lt;/p&gt;

&lt;p&gt;Business and Market reasons aside, the most common reasons (/cough excuses) not starting working on your crazy idea Minimum Viable Product (MVP) are in my opinion:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;üßç‚Äç‚ôÄÔ∏è &lt;strong&gt;Being alone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ok you don't have a team yet, but suck it on.&lt;br&gt;
If/when reaching for potential cofounders or hires later in the process, you'll be glad to have your MVP. It'll help convey both your idea and investment in the project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚åõ &lt;strong&gt;Takes too much time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sure. Creating something new and different takes time. But &lt;a href="#what-if"&gt;what if?&lt;/a&gt; is took less than expected?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;üò´ &lt;strong&gt;Technology fatigue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Behind hypes, technology cycles and experts contradictory opinions, there can be some technology fatigue, which will tickle beginners to tech veterans.&lt;br&gt;
Poundering what language, framework and services to use in a project can be daunting and exhausting. But &lt;a href="#what-if"&gt;what if&lt;/a&gt; the fatigue were no more?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ü§Ø &lt;strong&gt;Cognitive complexity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's actually sane to think that there is a lot of area to cover for an app to work, and that a lot of knowledge in multiple areas are needed. On top of the actual app development, there is also the question of the database, of the APIs, of the security, authentication, production debugging, etc.&lt;br&gt;
But &lt;a href="#what-if"&gt;what if&lt;/a&gt; this cognitive complexity were already tackled by others?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Are you thinking of a 5th reason? Please drop your suggestions in the comments üí¨&lt;br&gt;
Also, the üç∞ cake is a lie.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#these-reasons-are-outdated"&gt;
  &lt;/a&gt;
  These reasons are outdated &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;What if all these reasons were no more? (Well... Apart being alone, you're on your own mate)&lt;br&gt;
What if there were a kind of a shortcut?&lt;/p&gt;

&lt;p&gt;As lots of us have been tickering, playing and working with lots of technology bits, some of us have converged all this know-how into ready-to-use stacks, that help bootstrapping your next projects.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://codename.co"&gt;codename&lt;/a&gt;, we have been developing our take of what a stack should be.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Featuring &lt;a href="https://stack.lol"&gt;LOLstack&lt;/a&gt;, your ready-to-dev &amp;amp; ready-to-deploy software stack.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Building an App Was Hard. ü§Ø Now Stop Making Excuses.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>startup</category>
      <category>motivation</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Pixelart and the image-rendering Paradox</title>
      <author>Timothy Foster</author>
      <pubDate>Sat, 07 Aug 2021 21:00:45 +0000</pubDate>
      <link>https://dev.to/auroratide/pixelart-and-the-image-rendering-paradox-2p8k</link>
      <guid>https://dev.to/auroratide/pixelart-and-the-image-rendering-paradox-2p8k</guid>
      <description>&lt;p&gt;CSS offers a nifty property called &lt;code&gt;image-rendering&lt;/code&gt; which lets you influence how images scale. Normally, when you take a small image and make it bigger, the image becomes blurry. That's kinda ok for photos, but for pixelart, the effect is... rather devastating.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--233sYHM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xjoto6lsltth0y5pswj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--233sYHM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xjoto6lsltth0y5pswj.png" alt="A pixelart blue-haired character is upscaled into a fuzzy mess."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;strong&gt;Credit:&lt;/strong&gt; Lea, a character from the game &lt;a href="http://cross-code.com"&gt;Cross Code&lt;/a&gt;



&lt;p&gt;
  &lt;small&gt;What is &lt;strong&gt;pixelart&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;Pixelart is a way of creating pictures. Rather than using brush strokes, each individual pixel is carefully colored. It's like if you were given just a few hundred square tiles and asked to make a mosaic out of them.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;However, thanks to &lt;code&gt;image-rendering&lt;/code&gt;, it's possible to upscale images in a way that highlights their pixelated nature! Just a couple lines of code later and...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.pixelart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* This order matters! */&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;crisp-edges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pixelated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/RwVywNK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...hooray! It looks fantastic!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Except, wait just a second.&lt;/em&gt; Why on earth does the above example CSS specify &lt;code&gt;image-rendering&lt;/code&gt; twice, and with two different values? Something's fishy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-paradox"&gt;
  &lt;/a&gt;
  The Paradox
&lt;/h2&gt;

&lt;p&gt;It turns out there's a bit of a &lt;strong&gt;paradox&lt;/strong&gt; in the browser support for &lt;code&gt;image-rendering&lt;/code&gt;. Waddle on over to &lt;a href="https://caniuse.com/css-crisp-edges"&gt;Can I Use&lt;/a&gt; and we see the following weirdness.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbobY3Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqh5bo9rfeup40ud4hv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbobY3Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqh5bo9rfeup40ud4hv2.png" alt="Chrome supports the pixelated value, but not crisp-edges."&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlE3Ljrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cikpwtv4inj3pt9s9n9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlE3Ljrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cikpwtv4inj3pt9s9n9g.png" alt="Firefox supports the crisp-edges value, but not pixelated."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chrome and Firefox notate that they support opposite properties&lt;/p&gt;



&lt;p&gt;That's right! Chrome supports &lt;code&gt;pixelated&lt;/code&gt; but not &lt;code&gt;crisp-edges&lt;/code&gt;, and Firefox supports &lt;code&gt;crisp-edges&lt;/code&gt; but not &lt;code&gt;pixelated&lt;/code&gt;. In order to support both browsers, both values had to be specified in the example above, utilizing the fact of CSS that if one value is invalid then the other will be used.&lt;/p&gt;

&lt;p&gt;What I learned, though, is that resolving this paradox is &lt;strong&gt;not&lt;/strong&gt; as simple as "just specify both properties", because the properties have different &lt;em&gt;semantics&lt;/em&gt;. That is, even though &lt;code&gt;crisp-edges&lt;/code&gt; and &lt;code&gt;pixelated&lt;/code&gt; accomplish the same &lt;em&gt;result&lt;/em&gt;, they &lt;em&gt;mean&lt;/em&gt; different things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QSdBAqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbr8agy0ynrsu5qlexcl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QSdBAqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbr8agy0ynrsu5qlexcl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To resolve this, we'll need to embark on a mystical journey through different versions of the specification, discussions on implementations, and‚Äî&lt;/p&gt;

&lt;p&gt;Well actually, I already did all that! Instead, I'll walk through what I discovered by answering three key questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why is there a paradox?&lt;/li&gt;
&lt;li&gt;What is the difference between &lt;code&gt;pixelated&lt;/code&gt; and &lt;code&gt;crisp-edges&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What CSS should I use for pixelated images? What about for images with crisp edges?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-with-the-paradox"&gt;
  &lt;/a&gt;
  What's with the paradox?
&lt;/h2&gt;

&lt;p&gt;Without being involved in the dialogue directly, it's hard to pinpoint the precise reasons why &lt;code&gt;image-rendering&lt;/code&gt; has the support it has. After delving through documentation, discussions, and definitions &lt;small&gt;(oh my!)&lt;/small&gt;, there was one truth underpinning it all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rules for how &lt;code&gt;image-rendering&lt;/code&gt; should work are not set in stone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fact, despite this property having first appeared in 2012, just a few months ago in &lt;time&gt;February 2021&lt;/time&gt; the &lt;strong&gt;&lt;a href="https://drafts.csswg.org/css-images-3/#the-image-rendering"&gt;images specification&lt;/a&gt;&lt;/strong&gt; changed! And furthermore, it had seen periodic change over its nine-year history. In other words, &lt;code&gt;image-rendering&lt;/code&gt; is undergoing active discussion, at least some of which has come from feedback from browsers implementing the feature for testing.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is the &lt;strong&gt;CSS Specification&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;The specification is a set of documents detailing what the features of CSS are, how they should be used, and how they should be implemented by browsers. It's basically the source of truth for what CSS is and will be, and has been in constant development since its inception decades ago. Feel free to read more about the &lt;a href="https://www.w3.org/Style/2011/CSS-process"&gt;CSS standardization process&lt;/a&gt;.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;As a result, the property has only ever been implemented to different degrees, with Firefox and Chrome having taken different routes. And since the spec is still under discussion, no one has a complete implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHWWf5MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jktu93f4rcw6j3f9iyqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHWWf5MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jktu93f4rcw6j3f9iyqf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the end, Firefox developed &lt;code&gt;crisp-edges&lt;/code&gt; because it already supported the non-standard property &lt;code&gt;-moz-crisp-edges&lt;/code&gt;, which was meant to be the same thing. Chrome had implemented &lt;code&gt;pixelated&lt;/code&gt; because, at the time in 2014, the spec for &lt;code&gt;pixelated&lt;/code&gt; was more straightforward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pixelated-or-crisp-edges"&gt;
  &lt;/a&gt;
  Pixelated or Crisp Edges?
&lt;/h2&gt;

&lt;p&gt;To grasp the &lt;code&gt;pixelated&lt;/code&gt; and &lt;code&gt;crisp-edges&lt;/code&gt; values, it's important to understand the purpose of the &lt;code&gt;image-rendering&lt;/code&gt; property.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-semantics-of-imagerendering"&gt;
  &lt;/a&gt;
  The Semantics of image-rendering
&lt;/h3&gt;

&lt;p&gt;I'm gonna unoriginally paste a direct quote from the CSS spec, emphasis added:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The image-rendering property provides a hint to the user-agent about &lt;strong&gt;what aspects of an image are most important to preserve&lt;/strong&gt; when the image is scaled...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When an image is scaled, the computer either has to fill in missing details when scaled up or choose what to collapse when scaled down. That can be tricky, kinda like doubling a cooking recipe but realizing you don't have enough ingredients. And so, there's no single correct strategy for scaling images, leading to a diversity of &lt;strong&gt;scaling algorithms&lt;/strong&gt; meant to do the job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drG7_XZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chvd3vza423gy6odgumq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drG7_XZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chvd3vza423gy6odgumq.png" alt="Lea is doubled in size, but the gaps in the large image are not filled in."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scaling algorithms fill in the gaps.&lt;/p&gt;



&lt;p&gt;That said, notice that the spec does &lt;em&gt;not&lt;/em&gt; say that the purpose of &lt;code&gt;image-rendering&lt;/code&gt; is to choose a scaling algorithm. Rather, the goal is to specify &lt;q&gt;what aspects of an image are most important to preserve&lt;/q&gt;. For example, when we scale an image, do we care more about the way colors blend, or about keeping the edges sharp? Depending on the answer, one algorithm may be better than another.&lt;/p&gt;

&lt;p&gt;Though a scaling algorithm will be ultimately chosen, the point of &lt;code&gt;image-rendering&lt;/code&gt; is really to provide the browser additional information so it knows better how to treat the image!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-semantics-of-pixelated-and-crispedges"&gt;
  &lt;/a&gt;
  The Semantics of pixelated and crisp-edges
&lt;/h3&gt;

&lt;p&gt;Knowing that &lt;code&gt;image-rendering&lt;/code&gt; is all about identifying what aspects of the image are important to preserve, we can see how &lt;code&gt;pixelated&lt;/code&gt; and &lt;code&gt;crisp-edges&lt;/code&gt; are defined.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;pixelated&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The image is scaled in a way that &lt;strong&gt;preserves the pixelated nature&lt;/strong&gt; of the original as much as possible.&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;crisp-edges&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The image is scaled in a way that &lt;strong&gt;preserves contrast and edges&lt;/strong&gt;, and which does not smooth colors or introduce blur to the image in the process.&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;For pixelated images, the emphasis is on the pixels, but for crispy images, the emphasis is on the edges. The key point here is that pixels are &lt;em&gt;not&lt;/em&gt; the same as edges!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;code&gt;pixelated&lt;/code&gt; and &lt;code&gt;crisp-edges&lt;/code&gt; values are not semantically interchangeable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can illustrate the difference by scaling up our pixelart Lea image by a non-integral factor, say 2.5 times the original size, using algorithms the spec currently mandates.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What algorithms does the spec mandate?&lt;/small&gt;
  &lt;small&gt;For &lt;code&gt;crisp-edges&lt;/code&gt;, the &lt;a href="https://tech-algorithm.com/articles/nearest-neighbor-image-scaling/"&gt;nearest neighbor&lt;/a&gt; algorithm is used. For &lt;code&gt;pixelated&lt;/code&gt;, nearest neighbor is used to take the image to the nearest integer scale. Afterward, a smooth-scaling algorithm takes the image the rest of the way.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVsn03HE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv02t1bll40cw2vy7elv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVsn03HE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv02t1bll40cw2vy7elv.png" alt="A close-up of Lea's pixelart."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The original for reference&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5lbuyPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywbyj4z4otw3zqi7751x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5lbuyPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywbyj4z4otw3zqi7751x.png" alt="The version upscaled with pixelated has minor blurring between pixel boundaries. The crisp-edges version has no blurring, but pixels are different sizes."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pixelated introduces blurring, but crisp-edges distorts the pixelation.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;pixelated&lt;/code&gt;, pixels must be square, and the only way to preserve that property is to allow the enlarged pixels to overlap. The blurring on cell boundaries represent places where pixels are overlapping.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;crisp-edges&lt;/code&gt;, blurring is not allowed since the contrast between colors is most important. Resizing a pixelart image, therefore, results in cells that are not square, which distorts the pixelation aesthetic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resolving-the-paradox"&gt;
  &lt;/a&gt;
  Resolving the Paradox
&lt;/h2&gt;

&lt;p&gt;Equipped with the history and semantics of &lt;code&gt;image-rendering&lt;/code&gt;, we can resolve the paradox!&lt;/p&gt;

&lt;p&gt;For pixelart, it is clear the &lt;code&gt;pixelated&lt;/code&gt; value should be used; that's what most closely matches the semantics of the art. However, since Firefox does not yet support &lt;code&gt;pixelated&lt;/code&gt;, we can fall back onto its currently provided solution, &lt;code&gt;crisp-edges&lt;/code&gt;, which will resolve to the nearest neighbor algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.pixelart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;crisp-edges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pixelated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The fact that &lt;code&gt;pixelated&lt;/code&gt; is last is &lt;em&gt;very important&lt;/em&gt;! If we imagine a future where Firefox has implemented &lt;code&gt;pixelated&lt;/code&gt;, then we want that value to be applied instead of &lt;code&gt;crisp-edges&lt;/code&gt;. Letting the most semantically appropriate value be last future-proofs the solution.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;For maximum compatibility, the undead Internet Explorer browser can be supported with &lt;code&gt;-ms-interpolation-mode: nearest-neighbor&lt;/code&gt;.&lt;/small&gt;&lt;/p&gt;




&lt;p&gt;And what about images which should have high contrast?&lt;/p&gt;

&lt;p&gt;Chrome and Safari do not support &lt;code&gt;crisp-edges&lt;/code&gt;, but instead support a webkit property called &lt;code&gt;-webkit-optimize-contrast&lt;/code&gt; which bears similar semantics. Therefore, rather than use &lt;code&gt;pixelated&lt;/code&gt;, it is better to use something that more closely resembles what &lt;code&gt;crisp-edges&lt;/code&gt; means:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.crispy-art&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-optimize-contrast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;crisp-edges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;And with that, we can celebrate with the final demo!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/wvdYgwv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pixelart is of Lea from the game &lt;a href="http://cross-code.com"&gt;Cross Code&lt;/a&gt; by &lt;a href="http://www.radicalfishgames.com/"&gt;Radical Fish Games&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://caniuse.com/css-crisp-edges"&gt;Can I Use&lt;/a&gt; - current browser support for &lt;code&gt;image-rendering&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;cite&gt;&lt;a href="https://drafts.csswg.org/css-images-3/#the-image-rendering"&gt;CSS Images Module Level 3&lt;/a&gt;&lt;/cite&gt; - the current Editor's Draft of the specification for CSS images&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=317991"&gt;Chromium Issue&lt;/a&gt; - Tracking Chrome's supprt&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=856337"&gt;Mozilla Issue&lt;/a&gt; - Tracking Firefox's support&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/w3c/csswg-drafts/issues/5837"&gt;Pixelated Github Issue&lt;/a&gt; - Tracking recent updates to the spec&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And some extra stuff on my website, cut from this article for brevity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://auroratide.com/posts/pixelart-and-the-image-rendering-paradox#timeline-of-image-rendering"&gt;Timeline of image-rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auroratide.com/posts/pixelart-and-the-image-rendering-paradox#what-changed-in-february-2021"&gt;What changed in February 2021?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>art</category>
    </item>
    <item>
      <title>10 Tips For Clean Code</title>
      <author>Clean Code Studio</author>
      <pubDate>Sat, 07 Aug 2021 20:49:27 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/10-tips-for-clean-code-4nm6</link>
      <guid>https://dev.to/cleancodestudio/10-tips-for-clean-code-4nm6</guid>
      <description>&lt;center&gt;
&lt;h2&gt;
  &lt;a href="#10-tips-for-clean-code"&gt;
  &lt;/a&gt;
  10 Tips for Clean Code
&lt;/h2&gt;


&lt;/center&gt;




&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4gKG1jT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtysl91txx7r5rzj2i6i.png" alt="down arrow"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ‚òï profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ‚òï
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      You are responsible for your code.&lt;br&gt;&lt;br&gt;Not your organization.&lt;br&gt;Not your manager.&lt;br&gt;Not your team.&lt;br&gt;&lt;br&gt;You.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:27 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424089754006695941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424089754006695941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424089754006695941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ‚òï profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ‚òï
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Comments are often lies waiting to happen. Code should speak for itself when possible.&lt;br&gt;&lt;br&gt;Ask yourself: ‚ÄúCan I write code that expresses this comment so I can remove this comment?‚Äù
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:30 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424090538685386756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424090538685386756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424090538685386756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ‚òï profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ‚òï
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Single responsibility.&lt;br&gt;&lt;br&gt;Clean code does one thing, &lt;br&gt;does it well, and does it only.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:34 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424091698758656012" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424091698758656012" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424091698758656012" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ‚òï profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ‚òï
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Clean code is minimalistic.&lt;br&gt; &lt;br&gt;Less code is less buggy.&lt;br&gt;Less code is less onboarding.&lt;br&gt;Less code is less maintenance.&lt;br&gt;&lt;br&gt;Less Code = Less Liability.&lt;br&gt;&lt;br&gt;Clean Code is minimalistic.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:38 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424092656515362822" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424092656515362822" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424092656515362822" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ‚òï profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ‚òï
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Write code that expresses intent.&lt;br&gt;&lt;br&gt;Ex: Use verbs to name functions.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:28 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424090135214399490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424090135214399490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424090135214399490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ‚òï profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ‚òï
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Work in cycles: incremental and iterative.&lt;br&gt;&lt;br&gt;Nothing is ever done, iteratively make code better.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:35 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424091952736313348" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424091952736313348" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424091952736313348" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ‚òï profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ‚òï
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Boy Scout rule - leave the code better than you found it.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:31 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424090768113815557" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424090768113815557" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424090768113815557" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://twitter.com/cleancodestudio"&gt;Follow Clean Code Studio on Twitter for more!&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;More Clean Code Tips&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;


&lt;center&gt;

&lt;p&gt;(Note: Dev.to wouldn't let me put all 10 Clean Code twitter tips in this post. Remaining tips are posted in the comments section!) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;
&lt;br&gt;
&lt;/center&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>codequality</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What are your predictions for how the web will look like 10 years from now?</title>
      <author>Siddharth Chaudhary (he/him)</author>
      <pubDate>Sat, 07 Aug 2021 20:41:27 +0000</pubDate>
      <link>https://dev.to/sidthedev/what-are-your-predictions-for-how-the-web-will-look-like-10-years-from-now-3lhi</link>
      <guid>https://dev.to/sidthedev/what-are-your-predictions-for-how-the-web-will-look-like-10-years-from-now-3lhi</guid>
      <description>&lt;p&gt;What are your predictions for how the web will look like 10 years from now? Will frontend frameworks like react still exist or will everything change completely? Answer in the comments üëá, I want to see what y'all think ü§î &lt;/p&gt;

</description>
      <category>healthydebate</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tic-tac-toe with Java</title>
      <author>Nina Hwang</author>
      <pubDate>Sat, 07 Aug 2021 19:29:03 +0000</pubDate>
      <link>https://dev.to/ninahwang/tic-tac-toe-with-java-16db</link>
      <guid>https://dev.to/ninahwang/tic-tac-toe-with-java-16db</guid>
      <description>&lt;p&gt;After studying Java arrays, I created this simple tic-tac-toe application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iFuVVoVX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya64zq678hnur41nt750.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iFuVVoVX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya64zq678hnur41nt750.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Arrays&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;game&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// get the name of players&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;playersInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;player1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Player 1: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;player1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;playersInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Player 2: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;player2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;playersInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;},{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;},{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;}};&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isFirstTurn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// repeat until the game's over&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;isEnd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!!&lt;/span&gt;&lt;span class="n"&gt;isFirstTurn&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"'s turn"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"'s turn"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// get the number b/w 1 &amp;amp; 9&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;};&lt;/span&gt;
            &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The number should be between 1 and 9"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Select another spot"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// change the value of game array&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!!&lt;/span&gt;&lt;span class="n"&gt;isFirstTurn&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;isFirstTurn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;isFirstTurn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right_diagonal_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left_diagonal_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;zero_cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;h_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;v_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;h_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;v_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;left_diagonal_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;zero_cnt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;v_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;isEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;v_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;isEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;right_diagonal_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEnd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_diagonal_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;right_diagonal_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;isEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_diagonal_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;right_diagonal_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;isEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zero_cnt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;isEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// print the board&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"  "&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"X "&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"O "&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// print the final result&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Draw"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The winner is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;winner&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>java</category>
      <category>beginners</category>
    </item>
    <item>
      <title>PHP _call üßô‚Äç‚ôÇÔ∏è(Lesson 3: PHP Magic Methods)</title>
      <author>Clean Code Studio</author>
      <pubDate>Sat, 07 Aug 2021 18:33:34 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/php-call-lesson-3-php-magic-methods-5bi0</link>
      <guid>https://dev.to/cleancodestudio/php-call-lesson-3-php-magic-methods-5bi0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Today we're diving into the powerful __call PHP magic method&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LH-UCiPseP8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#php-magic-call-method"&gt;
  &lt;/a&gt;
  PHP magic __call method
&lt;/h2&gt;




&lt;p&gt;Imagine being able to call any method with any number of parameters on an instance of a class...&lt;/p&gt;

&lt;p&gt;Well today we're going to learn how you can! &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q_T56LLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a971gqu82b7ajn7znsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_T56LLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a971gqu82b7ajn7znsr.png" alt="PHP Magic method breakdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6bRyFka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qep1ceqslon1pgjf7h6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6bRyFka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qep1ceqslon1pgjf7h6b.png" alt="Another PHP magic method breakdown example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LHj_MNTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs26jqcvwsz31u9c62yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHj_MNTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs26jqcvwsz31u9c62yv.png" alt="$parameters example of PHP magic methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf0XyfuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilhu5bru2ql3arznlhna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf0XyfuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilhu5bru2ql3arznlhna.png" alt="$parameters and $method PHP magic method call together"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03W6lzsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dep5em581yks6ld6nny7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03W6lzsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dep5em581yks6ld6nny7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LH-UCiPseP8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.cleancode.studio/series/php-magic-methods/episodes/3"&gt;PHP __call magic method&lt;/a&gt;&lt;/p&gt;





&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Did you know I have a newsletter? üì¨&lt;/p&gt;

&lt;p&gt;If you want to get notified when I publish new blog posts or&lt;br&gt;
make major project announcements, head below and do what you do!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zhorton34/embed/BaRPYdB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>API Calls </title>
      <author>Buddhadeb Chhetri</author>
      <pubDate>Sat, 07 Aug 2021 18:18:56 +0000</pubDate>
      <link>https://dev.to/buddhadebchhetri/api-calls-2338</link>
      <guid>https://dev.to/buddhadebchhetri/api-calls-2338</guid>
      <description>&lt;h1&gt;
  &lt;a href="#javascript-api-calls"&gt;
  &lt;/a&gt;
  Javascript API Calls
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#xml-http-request"&gt;
  &lt;/a&gt;
  XML HTTP Request
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All modern browsers support the XMLHttpRequest object to request data from a server.&lt;/li&gt;
&lt;li&gt;It works on the oldest browsers as well as on new ones.&lt;/li&gt;
&lt;li&gt;It was deprecated in ES6 but is still widely used.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var request = new XMLHttpRequest();
request.open('GET','https://jsonplaceholder.typicode.com/users')
request.send();
request.onload =() =&amp;gt;{
console.log(JSON.parse(request.response));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetch-api"&gt;
  &lt;/a&gt;
  Fetch API
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The Fetch API provides an interface for fetching resources including across the network in an asynchronous.&lt;/li&gt;
&lt;li&gt;It returns a Promise.&lt;/li&gt;
&lt;li&gt;It is an object which contains a single value either a Response or an Error that occurred.&lt;/li&gt;
&lt;li&gt;.then() tells the program what to do once Promise is completed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch('https://jsonplaceholder.typicode.com/users')
.then(response=&amp;gt;{
return response.json();})
.then(data=&amp;gt;{
console.log(data);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is an open-source library for making HTTP requests.&lt;/li&gt;
&lt;li&gt;It works on both Browsers and Node js.&lt;/li&gt;
&lt;li&gt;It can be included in an HTML file by using an external CDN.&lt;/li&gt;
&lt;li&gt;It also returns promises like fetch API
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&amp;gt;&amp;lt;/script&amp;gt;

axios.get('https://jsonplaceholder.typicode.com/users')
.then(response =&amp;gt;{
console.log(response.data)})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#jquery-ajax"&gt;
  &lt;/a&gt;
  JQuery AJAX
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It performs asynchronous HTTP requests.&lt;/li&gt;
&lt;li&gt;Uses $.ajax() method to make the requests.&lt;/li&gt;
&lt;li&gt;Ability to send GET and POST requests&lt;/li&gt;
&lt;li&gt;Ability to Load JSON, XML, HTML or Scripts
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;

$(document).ready(function(){
$.ajax({
url:"https://jsonplaceholder.typicode.com/users",
type:"GET",success:function(result){
console.log(result);
}
   })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>api</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are your best reads of the week?</title>
      <author>Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥</author>
      <pubDate>Sat, 07 Aug 2021 18:00:46 +0000</pubDate>
      <link>https://dev.to/jmfayard/what-are-your-best-reads-of-the-week-17je</link>
      <guid>https://dev.to/jmfayard/what-are-your-best-reads-of-the-week-17je</guid>
      <description>&lt;p&gt;Anything you would like to share from this week? I want to read insightful things. It can be on DEV and outside. It can be non-technical if you feel like it.&lt;/p&gt;

</description>
      <category>discuss</category>
    </item>
    <item>
      <title>Github Pages</title>
      <author>Code Chappie</author>
      <pubDate>Sat, 07 Aug 2021 17:32:11 +0000</pubDate>
      <link>https://dev.to/codechappie/github-pages-82</link>
      <guid>https://dev.to/codechappie/github-pages-82</guid>
      <description>&lt;h1&gt;
  &lt;a href="#sabes-lo-que-es-github-pages"&gt;
  &lt;/a&gt;
  ¬øSabes lo que es Github Pages?
&lt;/h1&gt;

&lt;p&gt;Es un servicio que brinda GitHub y nos permite subir repositorios de nuestro c√≥digo para almacenarlo y pueda servir &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuraci%C3%B3n-b%C3%A1sica-de-github"&gt;
  &lt;/a&gt;
  Configuraci√≥n b√°sica de Github
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Primero que todo, instala Git en tu m√°quina. Este es el software del sistema de control de versiones subyacente en el que GitHub funciona.&lt;/li&gt;
&lt;li&gt;Seguido, Reg√≠strate para una cuenta de GitHub. Es simple y f√°cil.&lt;/li&gt;
&lt;li&gt;Una vez te hayas registrado, inicia sesi√≥n en github.com con tu nombre de usuario y contrase√±a.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aqu√≠ puedes encontrar un tutorial explicado a detalle:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Igbcg_rzIt4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gPWMGBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1dv20oof0c3uje77eea.jpg" alt="Tutorial GitHub Pages"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>hosting</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top Interview Questions for Backend Developers(Node)</title>
      <author>Abhishek Raj</author>
      <pubDate>Sat, 07 Aug 2021 17:18:29 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/top-interview-questions-for-backend-developers-node-2133</link>
      <guid>https://dev.to/abhishekraj272/top-interview-questions-for-backend-developers-node-2133</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Being a Full Stack Developer, I had appeared for Backend Developer position as well. In this post, I will be sharing most common Backend Dev question asked to me in all those interviews except the DSA part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#q1-create-a-sleep-function-using-asyncawait"&gt;
  &lt;/a&gt;
  Q1. Create a sleep function using Async/Await.
&lt;/h2&gt;

&lt;p&gt;In the below example, the sleep function returns a promise which is resolved after given millisecond using setTimeout API.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekraj272/embed/MWmzKPZ?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#q2-how-javascript-engine-works"&gt;
  &lt;/a&gt;
  Q2. How Javascript Engine works?
&lt;/h2&gt;

&lt;p&gt;When a js file is ran,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A global execution context is created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A memory heap is created where all variables (with var keyword) and functions (except arrow func) are declared.&lt;br&gt;&lt;br&gt;
In the below image we can see, variable &lt;strong&gt;a&lt;/strong&gt; is declared w/o even execution has started.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LG3XqPG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hhm6xi44nd77wt0w2sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LG3XqPG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hhm6xi44nd77wt0w2sc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Call Stack is created which stores the line which is going to be executed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFyipVLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l92hu7kh951mk9w6flg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFyipVLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l92hu7kh951mk9w6flg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; gets a function call, it creates a &lt;em&gt;functional context&lt;/em&gt; and the process is repeated in the functional context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; encounters WEB APIs like setTimeout/Interval/Immediate, these are sent to callback queue to process after call stack is empty.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; encounters a Promise it is sent to micro task queue (higher priority than callback queue) to process after call stack is empty.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once call stack is empty, event loop moves functions from queues to call stack for execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#q3-difference-between-single-threaded-amp-asynchronous"&gt;
  &lt;/a&gt;
  Q3. Difference between Single Threaded &amp;amp; Asynchronous.
&lt;/h2&gt;

&lt;p&gt;My View:&lt;br&gt;
Single Threaded -&amp;gt; It means only once function can be executed at a time.&lt;br&gt;
Async -&amp;gt; It is about non-blocking of execution of functions.&lt;/p&gt;

&lt;p&gt;In this below image, we can easily understand the difference. Thanks to &lt;a href="https://www.baeldung.com/"&gt;Baeldung&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-7eOEU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mjmugbgn2w6cucwvirp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-7eOEU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mjmugbgn2w6cucwvirp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqb5q9Ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepu91vawolbj365xtcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqb5q9Ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepu91vawolbj365xtcm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/cs/async-vs-multi-threading"&gt;Read More&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#q4-how-to-debug-a-slow-api"&gt;
  &lt;/a&gt;
  Q4. How to debug a slow API?
&lt;/h2&gt;

&lt;p&gt;My View:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-consolelog-approach"&gt;
  &lt;/a&gt;
  The Console.log approach
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Check if the issue is with network by sending request from different network.&lt;/li&gt;
&lt;li&gt;Log time when &lt;em&gt;req&lt;/em&gt; is received by the backend.&lt;/li&gt;
&lt;li&gt;Log time before a DB query.&lt;/li&gt;
&lt;li&gt;Log time after a DB query.&lt;/li&gt;
&lt;li&gt;Log time before/after some heavy operation.&lt;/li&gt;
&lt;li&gt;Log time before sending response.&lt;/li&gt;
&lt;li&gt;Analyse the time, you will get your culprit.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#profiler-approach"&gt;
  &lt;/a&gt;
  Profiler Approach
&lt;/h3&gt;

&lt;p&gt;Use any profiling tool to check where the execution is lagging.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-eventemitter-in-nodejs"&gt;
  &lt;/a&gt;
  What is EventEmitter in NodeJS?
&lt;/h2&gt;

&lt;p&gt;My View: EventEmitter is used to create event listeners in JS.&lt;/p&gt;

&lt;p&gt;Read More:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abhishekraj272" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdzDIguE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MIti9vi4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/419056/462b1794-0cb4-4ae6-8bd4-8577be4f295e.jpeg" alt="abhishekraj272"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhishekraj272/top-interview-questions-for-frontend-developers-3d5j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Interview Questions for Frontend Developers(React)&lt;/h2&gt;
      &lt;h3&gt;Abhishek Raj „Éª Jul 30 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/abhishekraj272" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdzDIguE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MIti9vi4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/419056/462b1794-0cb4-4ae6-8bd4-8577be4f295e.jpeg" alt="abhishekraj272"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhishekraj272/if-you-don-t-know-this-you-don-t-know-javascript-2355" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn these awesome Javascript concepts.&lt;/h2&gt;
      &lt;h3&gt;Abhishek Raj „Éª Aug 2 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt;, &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt; üòá&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Faker.js Generator - Never write sample data manually again ‚åõ</title>
      <author>Matej Baƒço</author>
      <pubDate>Sat, 07 Aug 2021 16:50:50 +0000</pubDate>
      <link>https://dev.to/meldiron/faker-js-generator-never-write-sample-data-manually-again-57ba</link>
      <guid>https://dev.to/meldiron/faker-js-generator-never-write-sample-data-manually-again-57ba</guid>
      <description>&lt;p&gt;I created this project when I tried to learn proper state management on the frontend. I wanted to come up with a project that has a complex state and will be helpful for at least one person. There you go, &lt;strong&gt;Faker.js Generator&lt;/strong&gt; üò±&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://faker-generator.netlify.app/"&gt;Live demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Meldiron/faker-generator"&gt;Github project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#problem-solution"&gt;
  &lt;/a&gt;
  Problem ‚û°Ô∏è Solution
&lt;/h2&gt;

&lt;p&gt;First of all, I believe we can all agree that testing the frontend with sample data is necessary to lower changes of visual bugs on production. If you placed the same &lt;code&gt;Lorem ipsum ...&lt;/code&gt; into every paragraph on your website, you would not get far because there are some texts that you expect to be short, such as the user's first name. On the other hand, if you used simple &lt;code&gt;Hello world&lt;/code&gt; everywhere, you would not test long paragraphs properly and might miss text alignment issues.&lt;/p&gt;

&lt;p&gt;Secondly, you always need to test your frontend with multiple sample data. Data is the dynamic part of your website, and chances are, there will be some content generated by a user. Believe me, my most common problem when developing a frontend application was that I &lt;strong&gt;expected&lt;/strong&gt; the user to do something. I learned this is not true the hard way when I found users with emails like &lt;code&gt;daniel-michael-blake-day-lewis-1985@gmail.com&lt;/code&gt; started joining the platform, and I was trying to fit the whole email into 100px wide element.&lt;/p&gt;

&lt;p&gt;Last but not least, there are many cases when a team is developing a full-stack application, and sadly, some companies force frontend developers to work on UI without backend prepared. You end up copy&amp;amp;pasting texts from Figma... Yeah, that will fit. It will... But what about actual data? You need to make sure! Get some fake data and test the UI with random data to make sure it really fits, so you don't have to re-check your whole application on every single device once you start hooking it to the API server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To solve these problems&lt;/strong&gt; I came up with a simple web application that lets you define a scheme you need for your frontend application and simply generate JSON object with random data using &lt;a href="https://github.com/marak/Faker.js/"&gt;Faker.js&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2PsTgHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jhckoocgjff1hcdi0f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2PsTgHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jhckoocgjff1hcdi0f3.png" alt="CleanShot 2021-08-07 at 17.57.20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is pretty much as simple as it gets üòÖ Follow a few simple steps to prepare sample JSON data for your application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a scheme using no-code GUI

&lt;ul&gt;
&lt;li&gt;I came up with a simple yet powerful interface where you can design any shape of a JSON object. The tool supports plain values, arrays and objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spam &lt;code&gt;Generate&lt;/code&gt; button until you are satisfied with fake data

&lt;ul&gt;
&lt;li&gt;After defining a scheme, you can generate a unique object with sample data by pressing one single button! Define multiple objects easily to test your application for different data. Sure, your UI can fit the name &lt;code&gt;Matej&lt;/code&gt;. But can it fit &lt;code&gt;Chernyshevsky&lt;/code&gt;? ü§î&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make adjustments to generated JSON manually, if required

&lt;ul&gt;
&lt;li&gt;Since this is a simple no-code platform, you cant expect to build a helicopter with it... The most significant limitation I found out about from feedbacks is joining multiple fake data into one field, such as &lt;code&gt;firstName + middleName + lastName&lt;/code&gt;. These changes can be easily done manually once you have your JSON ready. For these purposes, the generated JSON is editable right inside the platform in Visual Studio Code-like editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Copy the JSON and paste it into your project

&lt;ul&gt;
&lt;li&gt;There you go, your JSON is ready! Simply copy the content of the editor into your source code and start using it. The output includes &lt;code&gt;"&lt;/code&gt; around every key and value to make it a valid JSON if you put it into &lt;code&gt;.json&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can configure the amount of sample data inside JSON arrays, so you fill your UI with multiple blocks. This works for both simple arrays and arrays of objects.&lt;/li&gt;
&lt;li&gt;Everything is saved into localStorage! Prepare the schema, leave, come back tomorrow and generate a new sample JSON.&lt;/li&gt;
&lt;li&gt;If you paste the output into a javascript file and save it, most IDEs will automatically transfer it into the format without &lt;code&gt;"&lt;/code&gt; around keys. This makes the code easier to read and smaller in size.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That's it, for now ‚ú® If you are like my side-projects, feel free to follow me, and you will be notified whenever a new post is published. You can also give the project &lt;a href="https://github.com/Meldiron/faker-generator"&gt;star on github&lt;/a&gt; to keep me motivated üôè&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>sideprojects</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
