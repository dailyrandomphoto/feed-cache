<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Productivity Hacks Using Puppeteer  </title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Wed, 05 May 2021 03:27:08 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/productivity-hacks-using-puppeteer-81d</link>
      <guid>https://dev.to/sudarshansb143/productivity-hacks-using-puppeteer-81d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr-"&gt;
  &lt;/a&gt;
  TL:DR :
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Puppeteer&lt;/strong&gt; is one of the greatest tools available on the web in order to perform the automation regarding website or In-Browser Activities. Today, Instead of single huge chunk of code (which does nothing helpful other than only page screenshots ) I will try to explain the several tricks which you can use in your next project or any testing purposes.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-puppeteer-"&gt;
  &lt;/a&gt;
  üëª What is Puppeteer  :
&lt;/h3&gt;

&lt;p&gt;Puppeteer is browser automation tool which is used to automated activities on the internet using &lt;em&gt;Headless Chromium Browser&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Puppteer uses the high level API provided by the google in order to interact with headless chrome. It provides high level of flexibility and extensibility in order to modify the default behavior of Puppeteer.  &lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#launch-it-"&gt;
  &lt;/a&gt;
  üöÄ Launch It :
&lt;/h4&gt;

&lt;p&gt;For launching Puppeteer, people normally use basic configuration, but here I will show some advance modification in order to launch Puppeteer in various modes &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3teJffg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg4pjn3ioksn68p1bq58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3teJffg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg4pjn3ioksn68p1bq58.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are  using main three options &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lauching Puppteer using headless flag as &lt;em&gt;false&lt;/em&gt; , because it will show the activity of browser on the screen
&lt;/li&gt;
&lt;li&gt;Second flag is linux specific. I used it here, because if i excluded it then code will break on ubuntu 20.04 &lt;/li&gt;
&lt;li&gt;This option is pretty useful because it removes the  tag from the  browser window which is "* Google chrome is  controlled by the automated software*" &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then all we are doing is launching it using &lt;em&gt;launch()&lt;/em&gt; and then redirecting the page to google &lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#launching-the-puppeteer-in-the-incognito-mode-"&gt;
  &lt;/a&gt;
  ü§ñ Launching the Puppeteer in the Incognito Mode :-
&lt;/h4&gt;

&lt;p&gt;Whenever we are doing automation, there is a point when you will be forced to use the incognito mode  of the chrome. It is pretty helpful, if a site is preventing  you from accessing the useful stuff, because they stored the cookie in you &lt;em&gt;localStorage&lt;/em&gt; marking you as a robot and when you are accessing the stuff it is blocking your access &lt;/p&gt;

&lt;p&gt;Then solution is here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPbUsbQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mwlwlu3cgk53m5te5tv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPbUsbQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mwlwlu3cgk53m5te5tv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add this two line snippet while launching and Puppteer will open automatically in the incognito mode. COOL 8)&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#handle-navigation-"&gt;
  &lt;/a&gt;
  Handle Navigation :
&lt;/h4&gt;

&lt;p&gt;Handling navigation is pretty important while you are extending the testing / automation to the multiple pages. If the navigation isn't handled properly then we may get this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Failed to execute. Mostly because context destroyed due to navigation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid this stuff handle navigation as follows &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFDuNCt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjnk109eorm54lj0i9ou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFDuNCt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjnk109eorm54lj0i9ou.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the example of performing the search on the google. Type the search term in the search box &lt;em&gt;(with provided delay in order to avoid the bot detection)&lt;/em&gt; and then press &lt;strong&gt;Enter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After it, wait until navigation completed and when the DOM content is loaded completely then proceed further. &lt;/p&gt;

&lt;p&gt;Further to these, we can use two constraint to check whether the page is loaded completely or not &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;'domcontentloaded' :- as soon as DOM loaded proceed &lt;/li&gt;
&lt;li&gt;'load' :- wait for all things load using Javascript and CSS files and images&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#interact-with-elements-"&gt;
  &lt;/a&gt;
  üòé Interact with elements :
&lt;/h4&gt;

&lt;p&gt;We have to click on the web in order to get info regarding something. We all Know that but Puppteer doesn't. Hence, forcing it to click on element is one of crucial functionality we all must know. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3C6QvwrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/civ59z290v9mfipa8xob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3C6QvwrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/civ59z290v9mfipa8xob.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üòÇ You will use this a lot, because it allows the smooth scrolling  up to the element which is to be clicked. If it is present at the bottom then instead of clicking it directly, it will first scroll up to the point and the click on it. &lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#evaluate-things-using-eval-"&gt;
  &lt;/a&gt;
  Evaluate things using $$eval() :
&lt;/h4&gt;

&lt;p&gt;It is pretty useful, if the scenario occurs where you don't want to interact directly with DOM then we can use the eval() in order to get things from element &lt;br&gt;
For ex. clicking on it, getting text content etc &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VvUXRZ3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxg3bbpowom16k5v0f78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvUXRZ3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxg3bbpowom16k5v0f78.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;using $$eval() over the native dom API's like&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript document.getElementById("blah")&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
  is preferred  by  many individual. Because, if we used eval() then Puppteer will efficiently  searches through the DOM and intern manages  all things internally but by using native API's we are adding  additional load on puppteer.  Although it is preferential &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thought-"&gt;
  &lt;/a&gt;
  üéØ Final Thought :
&lt;/h2&gt;

&lt;p&gt;Puppeteer is pretty useful for automated testing and other stuff. But, you must have to take care of detection. In this article, I touched over the few things (* Less than 1% *) which are important in day to usage. but, if you want to explore more please let me know in comments. I will love to hear your thoughts üíú&lt;/p&gt;

&lt;p&gt;üôè Thanks For Reading....&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 8</title>
      <author>David Tetreau</author>
      <pubDate>Wed, 05 May 2021 02:31:38 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-8-2p2h</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-8-2p2h</guid>
      <description>&lt;p&gt;Welcome to Part 8 of the "JavaScript Made Easy" series. Last time, we talked about function scope and nested functions. For part 8, we will continue talking functions and introduce a few new concepts related to that topic. Open up a repl and code along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-function-expressions"&gt;
  &lt;/a&gt;
  Arrow Function Expressions
&lt;/h2&gt;

&lt;p&gt;An arrow function expression (or just "arrow function") is another way to write a function. As of 2015 (ES6), traditional functions and arrow functions are both valid ways to write functions. Some code bases will have traditional functions and some will have arrow functions. That is why it is important to know both. Also, you cannot use arrow functions in all situations and vice versa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formatting-differences"&gt;
  &lt;/a&gt;
  Formatting Differences
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Traditional Function
function cubed (num){
  return num * num * num;
}

cubed(2);//returns 8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Arrow Function

const cubed = num =&amp;gt; num * num * num;

cubed(2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The word "function" was removed.&lt;/li&gt;
&lt;li&gt;A fat arrow was placed between the parameter and opening body bracket.&lt;/li&gt;
&lt;li&gt;The brackets and the word return was removed.&lt;/li&gt;
&lt;li&gt;The parameter parenthesis were removed. &lt;/li&gt;
&lt;li&gt;The function was assigned to a variable. This makes it easy to use the function other places in the codebase. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As previously stated, both of these functions are valid. They will return the same value. However, arrow functions are considered to be short-hand of traditional functions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-formatting-differences"&gt;
  &lt;/a&gt;
  Additional Formatting Differences
&lt;/h2&gt;

&lt;p&gt;If you have multiple parameters or no parameters, you'll need to leave the parentheses around the parameters. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Arrow Function
const sum = (num1, num2) =&amp;gt; num1 + num2;

sum(25, 50);//returns 75

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that there are two parameters listed (and two arguments passed in, so the parenthesis are required. Also, the same will be true for an arrow function with no parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Arrow Function (no arguments)
let num1 = 2;
let num2 = 4;
const sum = () =&amp;gt; num1 + num2;

sum();//returns 6

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of listing parameters and taking arguments when the function is called, this function used variables that were declared outside the function. Therefore, since the arrow function does not have any parameters, you must include the parenthesis. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-formatting-differences"&gt;
  &lt;/a&gt;
  More Formatting Differences
&lt;/h2&gt;

&lt;p&gt;If the information between the brackets in a function is complex, you'll have to leave the brackets. That is to say, there are multiple lines within the function (such as declaring local variables and also having a return statement). For these, situations, brackets should be left on the arrow function as well as the return keyword. It looks like kind of a mix between a traditional function and an arrow function. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Arrow Function
const interpolateExpressions = (firstName, job) =&amp;gt; {
  let age = 38;
  return `My name is ${firstName}, I am ${age} years old, and I am a ${job}.`;
}

interpolateExpressions("David", "Web Developer");

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that since there were several lines of code within the function body (between the brackets), there had to be brackets included as well as a return statement. Remember we learned about interpolation. This is a good example of how that concept is used within a function. &lt;/p&gt;

&lt;p&gt;There is some additional syntax to note relevant to arrow functions once we get to objects, but you should have a good handle on arrow functions once you practice the concepts above. Experiment with these examples, and make them your own!&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to create a website using S3 + Certificate Manager + Cloud Front with CDK ?</title>
      <author>Sergio Kaz</author>
      <pubDate>Wed, 05 May 2021 00:17:20 +0000</pubDate>
      <link>https://dev.to/skaznowiecki/how-to-create-a-website-using-s3-certificate-manager-cloud-front-using-cdk-3cen</link>
      <guid>https://dev.to/skaznowiecki/how-to-create-a-website-using-s3-certificate-manager-cloud-front-using-cdk-3cen</guid>
      <description>&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Before start we need a few things installed on our computer. &lt;/p&gt;

&lt;p&gt;1) npm&lt;br&gt;
2) NodeJs + TypeScript(2.7 or later)&lt;br&gt;
3) &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/getting_started.html"&gt;CDK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that we have to set up your aws credentials, to achieve that you can follow this &lt;a href="https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last one, you should have created a hosted zone in AWS and delegate your domain. &lt;/p&gt;

&lt;p&gt;Well, we can start!!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#configure-ssl-certificate"&gt;
  &lt;/a&gt;
  Configure SSL certificate
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hostedZone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;HostedZone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromLookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myZone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;domainName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;certificate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Certificate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`myCertificate`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;domainName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;subjectAlternativeNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;www.example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;validation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CertificateValidation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromDns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hostedZone&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;On the first part we got the hosted zone related to your domain. &lt;br&gt;
After that we created the SSL certificate using &lt;code&gt;Certificate Manager&lt;/code&gt;. Adding the key &lt;code&gt;validation&lt;/code&gt; into the &lt;code&gt;CM&lt;/code&gt;, &lt;code&gt;AWS&lt;/code&gt; automatically add the necessary records to validate your domain. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#set-up-bucket"&gt;
  &lt;/a&gt;
  Set up bucket
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`myBucket`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;encryption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BucketEncryption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S3_MANAGED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;bucketName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`your-bucket-name`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;allowedMethods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HttpMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HttpMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;allowedOrigins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;allowedHeaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this way we create the bucket. It's recommended to use the domain's name as bucket's name and use a prefix to difference the environments. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up-policy-and-cdnoai"&gt;
  &lt;/a&gt;
  Set up policy and CDNOAI
&lt;/h2&gt;

&lt;p&gt;In this part, I am going to explain step by step, because It could be a bit confuse.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CDNOAI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CfnCloudFrontOriginAccessIdentity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myCDNOAI&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cloudFrontOriginAccessIdentityConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;S3 OAI&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-cloud-front-origin-access-identity-"&gt;
  &lt;/a&gt;
  What is cloud front origin access identity ?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;An Origin Access Identity (OAI) is used for sharing private content via CloudFront. The OAI is a virtual user identity that will be used to give your CF distribution permission to fetch a private object from your origin server (e.g. S3 bucket).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;iam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PolicyStatement&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s3:Get*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Effect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALLOW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bucketArn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arnForObjects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created a policy to allow get object on the whole bucket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCanonicalUserPrincipal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CDNOAI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrS3CanonicalUserId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add our &lt;code&gt;CDNOAI&lt;/code&gt; to our policy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bucketPolicy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BucketPolicy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`myBucketPolicy`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;bucketPolicy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addStatements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step of this section is create a bucket policy and attach to it our policy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-cloud-front"&gt;
  &lt;/a&gt;
  Set up Cloud front
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cloudFront&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cloudfront&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Distribution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;`myCloudFront`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;defaultBehavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;origins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S3Origin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="na"&gt;allowedMethods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AllowedMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALLOW_GET_HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;viewerProtocolPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewerProtocolPolicy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIRECT_TO_HTTPS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;certificate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;defaultRootObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;domainNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;errorResponses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;httpStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;responseHttpStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;responsePagePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;httpStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;responseHttpStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;responsePagePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a basic cloudfront configuration. &lt;/p&gt;

&lt;p&gt;I want to highlight the &lt;code&gt;certificate&lt;/code&gt; variable. It is the same certificate that we previously created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-record"&gt;
  &lt;/a&gt;
  Create A record
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ARecord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`myARecord`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;zone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hostedZone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RecordTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAlias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CloudFrontTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cloudFront&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="na"&gt;recordName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this part we are going to create an A record within our hosted zone, and reference it with our cloud front. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GITHUB
&lt;/h1&gt;

&lt;p&gt;This is my github, and here you are going to find a full complete example using CDK to create and deploy powerfull webapps!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/skaznowiecki/cdk-s3-cloudfront"&gt;https://github.com/skaznowiecki/cdk-s3-cloudfront&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Animated CSS Checkbox</title>
      <author>Abdullah-Noor557</author>
      <pubDate>Tue, 04 May 2021 23:45:48 +0000</pubDate>
      <link>https://dev.to/abdullahnoor/animated-css-checkbox-2ig2</link>
      <guid>https://dev.to/abdullahnoor/animated-css-checkbox-2ig2</guid>
      <description>&lt;p&gt;So i made this animated check with pure html and css. The image upload is static but it is animated when you click on the check box.&lt;/p&gt;

&lt;p&gt;Here is a link to the codepen:&lt;br&gt;
&lt;a href="https://codepen.io/Abdullah_Noor/pen/xxqKjzq"&gt;https://codepen.io/Abdullah_Noor/pen/xxqKjzq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My twitter:&lt;br&gt;
&lt;a href="https://twitter.com/ANoorDev?s=09"&gt;https://twitter.com/ANoorDev?s=09&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Can You Move the Button 30px to the Left?</title>
      <author>Radek Pazdera</author>
      <pubDate>Tue, 04 May 2021 22:04:44 +0000</pubDate>
      <link>https://dev.to/pazdera/can-you-move-the-button-30px-to-the-left-mpj</link>
      <guid>https://dev.to/pazdera/can-you-move-the-button-30px-to-the-left-mpj</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; I started working on a design early to speed things up. It ended up taking twice as long.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some months ago, I worked on a simple React component ‚Äî a save dialog with some advanced functionality. The UI designer I was collaborating with was busy, but I had a pretty good grasp of what needed to be done. To speed things up, we agreed that I'd start working from an unpolished version of the design. Once he finished the UI, we'd do a review and tweak the styles to match.&lt;/p&gt;

&lt;p&gt;The save dialog was a simple form with a more complex section that depended on the type of file being saved. My instinct was to set up an interface and move the file-type-specific functionality into separate components. The main component would load up the appropriate subcomponent, let it do its thing and forward the result up along with the data from the rest of the form.&lt;/p&gt;

&lt;p&gt;To me, this seemed like a clean solution. The file-type-specific details were encapsulated inside the relevant subcomponent. To support a new file type in the future, we'd add a new one.&lt;/p&gt;

&lt;p&gt;I made a draft PR and moved on. Later, the designer pinged me with the final version of the UI. He made some good improvements. When I had a closer look at the Figma, I noticed that he moved one of the buttons to the left side of the form.&lt;/p&gt;

&lt;p&gt;One of the file types allowed recording a short GIF before saving. In the rough designs, the record button was on the side of the component that was managed by the subcomponents in the code. Moving the button to the left meant the form had to be aware that the subcomponents could optionally record GIFs. And just like that, my little abstraction broke into a thousand pieces.&lt;/p&gt;

&lt;p&gt;I pushed back, but honestly, I knew that he was right. The button made a lot more sense on the left. It was on the right side just because the design was unfinished at the time. He wasn't thinking about it.&lt;/p&gt;

&lt;p&gt;As for me, I briefly considered taking out the big guns...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;21px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end, I had to restructure the whole thing and make the form aware of what the subcomponents were doing. It would become too convoluted otherwise. Moving the button took me about as long as to implement the dialog from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h2&gt;

&lt;p&gt;Changes in requirements/designs don't translate linearly into implementation. How difficult can it be to move a button? Well, that depends...&lt;/p&gt;

&lt;p&gt;The problem is that it's non-linear in unexpected ways. It takes about 0.4223 seconds to move a button in Figma. Someone not familiar with the codebase will expect it will take a proportionate amount of time to do it in the code. Often, that's true. Occasionally, it's not true at all.&lt;/p&gt;

&lt;p&gt;It works the other way around too. Sometimes, you can turn around complex work surprisingly fast. Maybe you've been diligently building a design system and a library of reusable components. The next time a product manager asks you to build a huge, complicated UI, you cash in on all that effort and get it done in record time.&lt;/p&gt;

&lt;p&gt;Or maybe someone else had that exact problem before, and they built an open-source library that solves it. You're done after two hours of duct tape engineering, feeling like you should be asking for a raise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embrace-the-uncertainty"&gt;
  &lt;/a&gt;
  Embrace the Uncertainty
&lt;/h2&gt;

&lt;p&gt;The problem is that things like that are unpredictable from the outside. Unless you've analysed the work to a point where you pretty much know which lines in the code will have to change, you're dealing with some degree of risk.&lt;/p&gt;

&lt;p&gt;In this scenario, the risk I took was to start working on an unfinished design. It could've gone either way.&lt;/p&gt;

&lt;p&gt;It depends on what level of risk is appropriate in your situation and what you're comfortable with. In this case, it was just a save dialog. Although it was annoying having to redo it, it wasn't the end of the world. Larger decisions warrant more certainty.&lt;/p&gt;

&lt;p&gt;Sometimes, you might be trying to predict how the requirements might change and accommodate those cases in advance. Again, that might turn out to be a smart idea. I've also seen some grave over-engineering when people tried to outsmart the spec.&lt;/p&gt;

&lt;p&gt;Estimates are exactly that ‚Äî estimates. Whether it's a formal estimate for a task or just your colleague wondering why is it taking you days to move a button 30px to the left.&lt;/p&gt;

&lt;p&gt;Depending on the amount of risk you're looking for, you might be tempted to add more process. Have the developers do the estimates themselves. Set expectations, keep people accountable. Look for anomalies in burndown charts. That sort of thing.&lt;/p&gt;

&lt;p&gt;However, making something &lt;em&gt;less&lt;/em&gt; unpredictable doesn't make it predictable. Trying to get 'accurate estimates' just gives you a false sense of security. They'll be accurate until they aren't.&lt;/p&gt;

&lt;p&gt;Anytime a software project is delayed for years, I assume their process involved having people give 'accurate estimates'.&lt;/p&gt;

&lt;p&gt;I work at a small company which affects how I think about these things. I'm not saying that it's never worth reducing risk. But when you do it, you have to acknowledge the uncertainty. Only then you can have a productive conversation about how long the project will take.&lt;/p&gt;

&lt;p&gt;Computers may be deterministic, but the process of building software really isn't.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Azure DevOps pipeline optimization for .net core projects</title>
      <author>Alexey Ryazhskikh </author>
      <pubDate>Tue, 04 May 2021 21:36:17 +0000</pubDate>
      <link>https://dev.to/musukvl/azure-devops-pipeline-optimization-for-net-core-26m7</link>
      <guid>https://dev.to/musukvl/azure-devops-pipeline-optimization-for-net-core-26m7</guid>
      <description>&lt;p&gt;I own a pipeline that builds, tests, and deploys many asp.net core services to k8s cluster. The pipeline is running on Azure DevOps hosted agents. They are scalable, but not robust, so I need to do some performance optimizations for my pipeline.&lt;/p&gt;

&lt;p&gt;The pipeline has three main stages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;running various automated tests&lt;/li&gt;
&lt;li&gt;building and pushing number of docker images for k8s deployment&lt;/li&gt;
&lt;li&gt;deploying services by terraform&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#running-stages-in-parallel"&gt;
  &lt;/a&gt;
  Running stages in parallel
&lt;/h2&gt;

&lt;p&gt;My pipeline runs in two modes: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Pull request validation&lt;/strong&gt; - it runs all tests and executes only &lt;code&gt;terraform plan&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deployment mode&lt;/strong&gt; - it runs all tests and does actual deployment to the k8s cluster.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My pipeline doesn't change anything in PR validation mode, so I can validate terraform configuration, Dockerfiles, and run autotests in parallel.&lt;/p&gt;

&lt;p&gt;Normal flow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ep3ZN91x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fn29rwnz02nambimvfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ep3ZN91x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fn29rwnz02nambimvfw.png" alt="Normal stages flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pull Request flow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C0ByGPNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65xegxsfss87426u4a4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0ByGPNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65xegxsfss87426u4a4w.png" alt="Pull Request flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default stages are depend on each other, but you can change this behaviour by forcing &lt;code&gt;dependsOn: []&lt;/code&gt; in azure-pipelines.yml:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;isPullRequestValidation&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ eq(variables['Build.Reason'], 'PullRequest') }}&lt;/span&gt;

&lt;span class="nn"&gt;...&lt;/span&gt;

&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy_to_dev&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Dev"&lt;/span&gt;
  &lt;span class="s"&gt;${{ if eq(variables.isPullRequestValidation, &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="s"&gt;) }}&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;dependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sql-server-startup-optimization"&gt;
  &lt;/a&gt;
  SQL Server startup optimization
&lt;/h2&gt;

&lt;p&gt;For running integration tests, I use docker-compose with SQL Server and test container declarations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.7"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;mssql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;mcr.microsoft.com/mssql/server"&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;SA_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Sa123321"&lt;/span&gt;
      &lt;span class="na"&gt;ACCEPT_EULA&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Y"&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5433:1433&lt;/span&gt;

  &lt;span class="na"&gt;integrationTests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IntegrationTests&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my/my_integration_tests&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;..&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./Integration.Tests/Dockerfile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a problem with running SqlServer in docker - it needs few minutes to start.&lt;br&gt;
My idea is to run SQL Server before start building test containers. &lt;br&gt;
For that, I split the docker-compose.yml into two ones: &lt;code&gt;docker-compose.db.yml&lt;/code&gt; and &lt;code&gt;docker-compose.tests.yml&lt;/code&gt;.&lt;br&gt;
Docker-compose services running with the same &lt;code&gt;--project-name&lt;/code&gt; share the same scope.&lt;br&gt;
So my integration test job does the following steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.db.yml    &lt;span class="nt"&gt;--project-name&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;up &lt;span class="nt"&gt;-d&lt;/span&gt;
docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.tests.yml &lt;span class="nt"&gt;--project-name&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;build
docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.tests.yml &lt;span class="nt"&gt;--project-name&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;up &lt;span class="nt"&gt;-d&lt;/span&gt;
docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.tests.yml &lt;span class="nt"&gt;--project-name&lt;/span&gt; &lt;span class="nb"&gt;test exec &lt;/span&gt;integrationTests &lt;span class="s2"&gt;"/src/Integration.Tests/init-db.sh"&lt;/span&gt;
docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; docker-compose.tests.yml &lt;span class="nt"&gt;--project-name&lt;/span&gt; &lt;span class="nb"&gt;test exec &lt;/span&gt;integrationTests dotnet &lt;span class="nb"&gt;test&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1l62f8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z68vh9muvs0cc92aixpf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1l62f8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z68vh9muvs0cc92aixpf.png" alt="Integration test tasks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the optimization &lt;code&gt;Init test database&lt;/code&gt; step doesn't wait for SQL Server running, and I found no build speed degradation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-core-services-build-optimization"&gt;
  &lt;/a&gt;
  .Net Core services build optimization
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#build-parallelism"&gt;
  &lt;/a&gt;
  Build Parallelism
&lt;/h3&gt;

&lt;p&gt;Azure DevOps agents do not guarantee persistence for docker cache between jobs running. However, you can be lucky and get an agent with prepopulated docker cache.&lt;br&gt;
Anyway, you surely can rely on the docker cache for layers built due to the current job. &lt;br&gt;
It might be better to have many build tasks in one job, rather than having multiple parallel jobs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dockerfile-code-generation"&gt;
  &lt;/a&gt;
  Dockerfile code generation
&lt;/h3&gt;

&lt;p&gt;My pipeline builds one .Net solution with C# project for each service. Each service has a similar Dockerfile. &lt;br&gt;
I created a simple template tool for generating Dockerfiles for each service to keep them identical as much as possible.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#copy-and-restore-csproj"&gt;
  &lt;/a&gt;
  Copy and restore .csproj
&lt;/h3&gt;

&lt;p&gt;There is a recommendation to copy only *.csproj files for all projects and restore them before copying other source files. It allows creating a long-live caching image layer with restored dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# copy only *.csproj and restore&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ["MyService/MyService.csproj", "MyService/"]&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ["My.WebAPI/My.WebAPI.csproj", "My.WebAPI/"]&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet restore &lt;span class="s2"&gt;"MyService/MyService.csproj"&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet restore &lt;span class="s2"&gt;"My.WebAPI/My.WebAPI.csproj"&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet build My.WebAPI/My.WebAPI.csproj&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is not so important for Azure DevOps hosted agents, but useful for the local builds. &lt;br&gt;
But you need to maintain a list of *.csproj in each Dockerfile of your project. So every new .csproj leads you to update every Dockerfile in your solution. &lt;br&gt;
I think code-generation is the best way to automate it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#do-more-but-once"&gt;
  &lt;/a&gt;
  Do more, but once
&lt;/h3&gt;

&lt;p&gt;Building single *.csproj with all dependencies takes about 1 minute for my case. Building an entire solution takes ~3 minutes. But thanks to image layer caching I need to build the solution only once. &lt;br&gt;
Here is an example of a service Dockerfile I have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; mcr.microsoft.com/dotnet/aspnet:5.0-buster-slim AS base&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; mcr.microsoft.com/dotnet/sdk:5.0-buster-slim AS build&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /src&lt;/span&gt;

&lt;span class="c"&gt;# creating common references cache&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ["Common/Common.csproj", "Common/"]&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet restore &lt;span class="s2"&gt;"Common/Common.csproj"&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="c"&gt;# exclude test projects from restore/build&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet sln ./My.sln remove &lt;span class="k"&gt;**&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;Tests.csproj
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet restore ./My.sln

&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet build ./My.sln &lt;span class="nt"&gt;-c&lt;/span&gt; Release

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; "Services/My.WebAPI"&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; build AS publish&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet publish &lt;span class="s2"&gt;"My.WebAPI.csproj"&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; Release &lt;span class="nt"&gt;-o&lt;/span&gt; /app/publish

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; base AS final&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=publish /app/publish .&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["dotnet", "My.WebAPI.dll"]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is another way to improve solution build speed: exclude unnecessary projects from &lt;code&gt;.sln&lt;/code&gt; file with &lt;code&gt;dotnet sln&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;A piece of job execution that builds the services&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqqJbCgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvso3bcsfbb7v6vx3um7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqqJbCgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvso3bcsfbb7v6vx3um7.png" alt="Services images build and publish"&gt;&lt;/a&gt;&lt;br&gt;
As you see, building the entire solution took 2 minutes for the first service, other services used created cache and do only &lt;code&gt;RUN dotnet publish&lt;/code&gt; for 30 seconds. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Job parallelism and utilizing docker layer cache are orthogonal technics, but you can find the balance for your project.&lt;/li&gt;
&lt;li&gt;Docker-compose for integration tests could be split: so one set of services could be built while the other set is initializing.&lt;/li&gt;
&lt;li&gt;Code generation can help to keep Dockerfiles similar and utilize the docker layer cache.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aspnetcore</category>
      <category>devops</category>
      <category>azuredevops</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>7 editores de c√≥digo en la nube para frontends</title>
      <author>dux</author>
      <pubDate>Tue, 04 May 2021 21:31:34 +0000</pubDate>
      <link>https://dev.to/duxtech/7-editores-de-codigo-en-la-nube-para-frontends-3343</link>
      <guid>https://dev.to/duxtech/7-editores-de-codigo-en-la-nube-para-frontends-3343</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introducci%C3%B3n"&gt;
  &lt;/a&gt;
  Introducci√≥n
&lt;/h2&gt;

&lt;p&gt;A medida que pasan los a√±os van apareciendo nuevos y mejores editores de c√≥digo y otros van mejorando sus caracter√≠sticas para no morir en un mercado tan exigente. &lt;br&gt;
Empec√© mis estudios de ingenier√≠a inform√°tica usando Dreamweaver, de hecho muchos desarrolladores de la vieja escuela aun lo usan por su vista de dise√±ador al momento de escribir c√≥digo; despu√©s investigando un poco m√°s encontr√© &lt;a href="https://notepad-plus-plus.org/downloads/"&gt;NotePad++&lt;/a&gt;, muy b√°sico pero interesante; posteriormente Adobe saco su editor &lt;a href="http://brackets.io/"&gt;Brackets&lt;/a&gt; que me encanto pero lastimosamente no fue del gusto total de la comunidad, uno de los √∫ltimos y que lo use mucho fue &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; desarrollado por Github y el m√≠tico e inmortal &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; (que a conciencia, todos lo usabamos crakeado XD), &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; de Microsoft al parecer nos acompa√±ara por un buen tiempo.&lt;/p&gt;

&lt;p&gt;En fin, despu√©s de una introducci√≥n tan larga y aburrida, vamos al meollo del asunto, editores de c√≥digo online que uso y sugiero.&lt;br&gt;
Muchas veces necesitamos probar algo simple que no vale la pena instalar o abrir nuestro editor de escritorio, los siguientes lo recomiendo un mont√≥n espero que sea de su inter√©s y los puedan emplear:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#codepen"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/following"&gt;CodePen&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Probablemente el m√°s usado y el m√°s conocido por los devs, permite crear desde snippets peque√±os de c√≥digo hasta proyectos funcionales enteros usando claro nuestras tecnolog√≠as favoritas: HTML5, CSS3 y JavaScript.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/twhite96/embed/XKqrJX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stackblitz"&gt;
  &lt;/a&gt;
  &lt;a href="https://stackblitz.com/"&gt;Stackblitz&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Muy parecido a Visual Studio Code pero completamente online, permite crear variedad de proyectos con m√∫ltiples tecnolog√≠as, como por ejemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;li&gt;React (con JavaScript)&lt;/li&gt;
&lt;li&gt;React (con TypeScript)&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;TypeScript puro&lt;/li&gt;
&lt;li&gt;Ionic&lt;/li&gt;
&lt;li&gt;Vanilla Js&lt;/li&gt;
&lt;li&gt;Svelte&lt;/li&gt;
&lt;li&gt;HTML y CSS puros, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/ball-demo?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codesandbox"&gt;
  &lt;/a&gt;
  &lt;a href="https://codesandbox.io/"&gt;CodeSandbox&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Al igual que el anterior propone crear proyectos completos con variedad de tecnolog√≠as modernas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adonis&lt;/li&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;li&gt;React (con JavaScript)&lt;/li&gt;
&lt;li&gt;Gatsby&lt;/li&gt;
&lt;li&gt;React (con TypeScript)&lt;/li&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;TypeScript puro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/ppxnl191zx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsfiddle"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsfiddle.net/"&gt;JSFiddle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Editor mucho m√°s sencillo permite probar c√≥digo frontend b√°sico, HTML, CSS y JavaScript&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/link2twenty/v2kx9jcd/embedded//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsitor"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsitor.com/"&gt;JSitor&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Por defecto para trabajar con vanilla js pero es posible instalarle librer√≠as externas como Moment.js, Chart.js, Bootstrap, y tambi√©n frameworks como React, Angular y Vue.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="400" src="https://jsitor.com/embed/B7FQ5tHbY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dotnetfiddle"&gt;
  &lt;/a&gt;
  &lt;a href="https://dotnetfiddle.net/"&gt;DotnetFiddle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;S te gustan o trabajas m√°s a menudo con tecnolog√≠as .NET esta p√°gina te gustar√° mucho&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsbin"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsbin.com/"&gt;JSbin&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Posiblemente el m√°s simple de todos pero cumple con su prop√≥sito de escribir c√≥digo HTML, CSS y JS con vista de salida de consola y de navegador, personalmente es uno de los que m√°s uso para probar peque√±os fragmentos de c√≥digo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;La lista presentada no est√° escrita en ning√∫n orden en concreto, hay mucha variedad de editores en la nube que te ofrecen peculiaridades adaptables a tus necesidades.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusi√≥n&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Usar editores de c√≥digo en la nube puede ahorrarte tiempos ya que son sencillos de usar y cada vez te ofrecen una gama m√°s amplia de tecnolog√≠as para trabajar c√≥modamente. √ösalos cuando los necesites, todos tienen una versi√≥n gratuita muy buena.&lt;/p&gt;

&lt;p&gt;Te invito a leer m√°s entradas m√≠as que podr√≠an ser de tu inter√©s:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/las-bondades-del-metodo-slice-en-javascript-1efa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Las bondades del m√©todo slice() en Javascript üéÇ&lt;/h2&gt;
      &lt;h3&gt;dux „Éª Apr 26 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/7-repositorios-de-desarrollo-web-que-debes-conocer-4g6l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 repositorios de desarrollo web que debes conocer&lt;/h2&gt;
      &lt;h3&gt;dux „Éª Apr 12 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#spanish&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/10-trucos-y-optimizaciones-de-codigo-con-javascript-para-2021-3759" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 trucos y optimizaciones de c√≥digo con JavaScript para 2021üòé &lt;/h2&gt;
      &lt;h3&gt;dux „Éª Mar 29 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#spanish&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>spanish</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Level up with The Relicans at FutureStack</title>
      <author>Mia Moore</author>
      <pubDate>Tue, 04 May 2021 21:18:28 +0000</pubDate>
      <link>https://dev.to/newrelic/level-up-with-the-relicans-at-futurestack-139i</link>
      <guid>https://dev.to/newrelic/level-up-with-the-relicans-at-futurestack-139i</guid>
      <description>&lt;p&gt;I am excited to personally invite you to &lt;a href="https://bit.ly/futurestack-dev"&gt;FutureStack 2021&lt;/a&gt;! This will be our first year at the conference as &lt;a href="https://developer.newrelic.com/relicans"&gt;The Relicans&lt;/a&gt;, and we can‚Äôt wait to see you there.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uSZwI9VKBms"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-keynotes-12-handson-workshops-50-sessions"&gt;
  &lt;/a&gt;
  3 keynotes, 12 hands-on workshops, 50 sessions
&lt;/h2&gt;

&lt;p&gt;FutureStack 2021 is a free, online conference where New Relic is bringing together Data Nerds to learn, share, and get inspired about observability ‚Äî while we have fun!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's what to expect:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 Keynotes and on-demand recordings to watch anytime.&lt;/li&gt;
&lt;li&gt;12 Workshops with hands-on demos.&lt;/li&gt;
&lt;li&gt;50 Sessions led by Data Nerds like you and me.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also choose from four different learning tracks, whether you have a particular focus or want to start with the basics, we‚Äôve got you covered with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Extending New Relic One&lt;/strong&gt; to connect technology to business performance&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Getting Data In&lt;/strong&gt; to instrument everything and send data to the Telemetry Data Platform&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AI/ML-Powered Observability&lt;/strong&gt; to wrangle complexity with AIOps&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modern Architectures&lt;/strong&gt; from containers to serverless apps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-relicans-welcome-you-to-nerd-island"&gt;
  &lt;/a&gt;
  The Relicans welcome you to Nerd Island
&lt;/h2&gt;

&lt;p&gt;In addition to the tracks mentioned above, there will be several side tracks, including Networking, FutureHack, Relax and Mingle Active, Swag Stack and ‚Äî our personal favorite ‚Äî the &lt;strong&gt;Nerd Island&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Nerd Island is where you can come to hang out with us from &lt;a href="https://developers.newrelic.com/relicans"&gt;The Relicans&lt;/a&gt;. We will play Minecraft, live stream, write code together, and share talks from our team. We're especially excited to welcome special guests &lt;a href="https://twitter.com/kelseyhightower"&gt;Kelsey Hightower&lt;/a&gt;, &lt;a href="https://twitter.com/waxpancake"&gt;Andy Baio&lt;/a&gt;, and &lt;a href="https://twitter.com/samaaron"&gt;Sam Aaron&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is a spoiler, just for you:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the Nerd Island and &lt;em&gt;on the Nerd Island ONLY&lt;/em&gt;, you can be one of the first users of &lt;a href="https://skittish.com/"&gt;Skittish&lt;/a&gt;, an interactive, playful virtual event space! Inside Skittish, you can be a cute animal, explore Nerd Island, connect with friends (that also happen to be cute animals) via voice chat, and watch some great talks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N5ZPQ_Sfmhs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-and-join-us"&gt;
  &lt;/a&gt;
  Sign up and join us!
&lt;/h2&gt;

&lt;p&gt;FutureStack is May 25-27, 2021, and you can save your spot now. &lt;a href="https://bit.ly/futurestack-dev"&gt;Just click here to sign up&lt;/a&gt;, and you will be all set! Until then, keep an eye out as we share more about upcoming sessions and surprises we have planned for FutureStack.&lt;/p&gt;

&lt;p&gt;We can't wait to see you at FutureStack! &lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>observability</category>
      <category>microservices</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Ditch For... Loops - How to Use ES6 Array Methods to Loop Over An Array</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 04 May 2021 21:06:21 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/ditch-for-loops-how-to-use-es6-array-methods-to-loop-over-an-array-1jnh</link>
      <guid>https://dev.to/ubahthebuilder/ditch-for-loops-how-to-use-es6-array-methods-to-loop-over-an-array-1jnh</guid>
      <description>&lt;p&gt;Do you remember something like this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The number is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those of you completely new to using JavaScript, let‚Äôs break down that code spippet fellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All that statement is saying is that ‚Äì ‚Äúi is initially equals to zero. For as long as i is less than five, run the code inside the code block (i.e update the ‚Äòtext‚Äô variable) and increment i by one (signified with the ++).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This used to be the standard way of looping through an array of items. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Used to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmcaScript 2016 (ES6)&lt;/strong&gt; came with a set of utility methods for looping through an array. For those of you wondering, EmcaScript is a general-purpose programming language, standardised by Ecma International according to the document ECMA-262.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I like to think of EmcaScript as a new, modern and improved way of writing JavaScript.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: If you‚Äôre looking for a more in-depth guide on ES6 syntax, I‚Äôll recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt; . It‚Äôs really good!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These array iterators includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array.map()&lt;/li&gt;
&lt;li&gt;Array.find()&lt;/li&gt;
&lt;li&gt;Array.filter()&lt;/li&gt;
&lt;li&gt;Array.forEach()&lt;/li&gt;
&lt;li&gt;Array.every()&lt;/li&gt;
&lt;li&gt;Array.some()&lt;/li&gt;
&lt;li&gt;Array.sort()&lt;/li&gt;
&lt;li&gt;Array.reduce()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To properly understand how these methods work, we have to first understand two concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The size of an array&lt;/li&gt;
&lt;li&gt;The shape of an array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;backend engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lara&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ux designer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;manager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
javascript&lt;/p&gt;

&lt;p&gt;There are two thing to note about this array:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has a size of five items (objects),&lt;/li&gt;
&lt;li&gt;Each item has a shape: a name and position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these in mind, all of the array iterator methods has it‚Äôs own behaviour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  map()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes the shape, but not the size,&lt;/li&gt;
&lt;li&gt;Example: Get just the name of everyone on the team.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;//Result: ['jack', 'lara', 'kingsley', 'mark', 'chris']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sort"&gt;
  &lt;/a&gt;
  sort()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes neither the size nor the shape, but changes the order.&lt;/li&gt;
&lt;li&gt;Example: Get the team members in alphabetical order.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//Result: [{name: 'chris', position: 'developer'}, {name: 'jack' ...}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  filter()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes the size, but not the shape.&lt;/li&gt;
&lt;li&gt;Example: Get only the developers.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;developer&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: [{name: 'kingsley', position: 'developer'}, {name: 'chris', position:'developer'}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  find()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes the size to exactly one, but not the shape. It Does not return an array. &lt;/li&gt;
&lt;li&gt;Example: Get the manager.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: {name: 'justin', position: 'manager'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;N/B: If there were two managers present, find() will only return the first&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  forEach()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Uses the shape, but returns nothing.&lt;/li&gt;
&lt;li&gt;Example: Give all members a bonus!
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="nx"&gt;sendBonus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//code for bonus goes here\&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;sendBonus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//Result: Jack gets a bonus! Lara get a bonus!‚Ä¶ (but no return value).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  reduce()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Action: Changes the size and the shape to pretty much anything
you want.&lt;/li&gt;
&lt;li&gt;Example: Get the unique team positions.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniquePos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="c1"&gt;// Result: [‚Äòbackend engineer‚Äô, ‚Äòux designer‚Äô, ‚Äòdeveloper‚Äô, ‚Äòmanager‚Äô]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A bit confused, let‚Äôs break down this code guys.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The essence of this all is to get every unique postion of each member. Duplicate positions (developer) will be picked once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first parameter taken by the reduce method is the ‚ÄòcollectedValue‚Äôfrom the last iteration. When the iteration is just starting, then the reduce() second argument ([] in our case) will be used. For every iteration, the collected or total value is added the current item.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In our case, when iteration just starts, the initial value [] wraps the current item in the array. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The conditional checks to see if the total value (the array at this point in the loop) includes the position of the current member. If it does, the position is ignored and the CollectedValue is returned as it was. If not, the position of the current member is added to the array (with the spread operator).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#every"&gt;
  &lt;/a&gt;
  every()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes neither the size nor the shape. Returns a Boolean: true if all items meet a condition, false if any doesn‚Äôt.&lt;/li&gt;
&lt;li&gt;Example: Check if all items are objects.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Results: True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#some"&gt;
  &lt;/a&gt;
  some()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes neither the size nor the shape. Returns a Boolean: true if any of the items meet a condition, false if all doesn‚Äôt.&lt;/li&gt;
&lt;li&gt;Example: Check if any of the items is number.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs it. I hope you learnt something from these brothers and sisters. If you did, consider buying me my favourite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will really appreciate it.&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Awesome Illustrations Resources</title>
      <author>rafaelvieirab</author>
      <pubDate>Tue, 04 May 2021 20:59:43 +0000</pubDate>
      <link>https://dev.to/rafaelvieirab/awesome-illustrations-resources-5346</link>
      <guid>https://dev.to/rafaelvieirab/awesome-illustrations-resources-5346</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://undraw.co/illustrations"&gt;Undraw&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.drawkit.io/"&gt;Draw Kit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://iconscout.com/illustration-pack/indian-doodle"&gt;Indian Doodle&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.karthiksrinivas.in/poke"&gt;Poke&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.opendoodles.com/"&gt;open Doodles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lukaszadam.com/illustrations"&gt;Lukaszadam&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://iradesign.io/"&gt;IRA Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mixkit.co/free-stock-art/"&gt;Mixkit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://2.flexiple.com/scale/all-illustrations"&gt;Scale&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://sleekbundle.com/product/pulse-illustration-kit/"&gt;Pulse&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://geeme.vercel.app/"&gt;Gee Me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://absurd.design/#slide-6"&gt;Absurd&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://thenounproject.com/"&gt;The Noun project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://fresh-folk.com/"&gt;Fresh-folk&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.rawpixel.com/search/illustration?sort=curated&amp;amp;page=1"&gt;Rawpixel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://webpixels.io/illustrations"&gt;Webpixels : Eye Pop&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://delesign.com/free-designs/graphics/"&gt;Delesign&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.manypixels.co/gallery?ref=lapaninja"&gt;Manypixels&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://icons8.com/illustrations"&gt;Icon8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://humaaans.com/"&gt;Humaans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lab.streamlinehq.com/"&gt;Streamline&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lucid.pixsellz.io/"&gt;Lucid&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ui8.net/"&gt;Ui8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://control.rocks/"&gt;Control.Rocks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://niceillustrations.com/free-illustrations/"&gt;Niceillustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pixeltrue.com/packs"&gt;Pixel True&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://isometric.online/"&gt;Isometric&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://storyset.com/"&gt;Story Set&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.openpeeps.com/"&gt;Open Peeps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.blackillustrations.com/"&gt;Black illustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://freeillustrations.xyz/"&gt;Free Illustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://illlustrations.co/"&gt;Illlustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.getillustrations.com/illustration-packs"&gt;Getillustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freepik.com/"&gt;FreePik&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vecteezy.com/"&gt;Vecteezy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freevector.com/"&gt;FreeVector&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://all-free-download.com/"&gt;All Free Download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vectorstock.com/"&gt;VectorSock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stubborn.fun/"&gt;Stubborn&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blush.design/"&gt;Blush&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://usesmash.com/"&gt;UseMash&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.glazestock.com/"&gt;Glazestock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vectorportal.com/"&gt;VectorPortal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to update all your NPM packages at once</title>
      <author>Craig Holliday</author>
      <pubDate>Tue, 04 May 2021 20:42:31 +0000</pubDate>
      <link>https://dev.to/craigaholliday/how-to-update-all-your-npm-packages-at-once-458j</link>
      <guid>https://dev.to/craigaholliday/how-to-update-all-your-npm-packages-at-once-458j</guid>
      <description>&lt;p&gt;You come back to a 6-month-old project that you haven't touched in a while and now all of your NPM packages are vastly out of date. That's just the speed at which web development moves.&lt;/p&gt;

&lt;p&gt;So you need to update all your packages, how can we do that?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-safe-method"&gt;
  &lt;/a&gt;
  The safe method
&lt;/h2&gt;

&lt;p&gt;NPM does provide a command to update packages. This is the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm update --save/--save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Though this only updates to the latest &lt;em&gt;minor version.&lt;/em&gt; For example, &lt;code&gt;1.0.5&lt;/code&gt; to &lt;code&gt;1.1.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if we have a major version change like &lt;code&gt;1.0.5&lt;/code&gt; to &lt;code&gt;3.1.3&lt;/code&gt;, this command will only update to the highest version before &lt;code&gt;2.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A major version can introduce breaking changes to packages that can break your project. Because of this, the above command promotes manually updating packages.&lt;/p&gt;

&lt;p&gt;Manually updating your packages can be great to reduce the chance of a package breaking your application without you noticing.&lt;/p&gt;

&lt;p&gt;But we haven't touched this project in months and we want to get everything up to date that we know won't break our application (and if it does we will suffer the consequences).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-lesssafe-method"&gt;
  &lt;/a&gt;
  The less-safe method
&lt;/h2&gt;

&lt;p&gt;To update our NPM packages we will reach for &lt;em&gt;another&lt;/em&gt; NPM package.&lt;/p&gt;

&lt;p&gt;This package is called &lt;code&gt;npm-check&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/npm-check"&gt;https://www.npmjs.com/package/npm-check&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;npm-check&lt;/code&gt; will not just update your packages with no regard to the consequences. Instead, &lt;code&gt;npm-check&lt;/code&gt; will allow you to interactively check and choose what packages to update.&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;npm-check&lt;/code&gt; we will install it globally and then we can use the command to interactively update our packages.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;npm install -g npm-check&lt;/code&gt; to install the package globally.&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;npm-check&lt;/code&gt; command to interactively update packages&lt;/p&gt;

&lt;p&gt;When using the &lt;code&gt;npm-check&lt;/code&gt; command we will see the below in our command line allowing us to see what packages we can update.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dI5pIBGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx122f3c3uwpruwo9pkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dI5pIBGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx122f3c3uwpruwo9pkd.png" alt="Command line tool showing an interactive GUI for updating NPM packages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;There are more ways to update your packages either automatically or with other packages, but this is a super simple one that you can start using today.&lt;/p&gt;

&lt;p&gt;Try this out the next time you have a project that needs to be updated!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;If you like what you read also check out my brother and my blog where we post this and tons of other content!&lt;br&gt;
üëâ &lt;a href="https://koalatea.io/"&gt;https://koalatea.io/&lt;/a&gt; üëà&lt;/p&gt;

&lt;p&gt;&lt;a href="https://koalatea.io/how-to-update-all-your-npm-packages-at-once/"&gt;And here is this post on our blog!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>npm</category>
      <category>node</category>
    </item>
    <item>
      <title>Trivia or Job Interview?</title>
      <author>Stephan Meijer</author>
      <pubDate>Tue, 04 May 2021 20:38:38 +0000</pubDate>
      <link>https://dev.to/smeijer/trivia-or-job-interview-4mpj</link>
      <guid>https://dev.to/smeijer/trivia-or-job-interview-4mpj</guid>
      <description>&lt;p&gt;I've built multiple SaaS, and some are used by multinationals. Yet, I fail miserably at tricky interview questions. In this article, I'm going to show you a few recent questions I got, and share my thoughts.&lt;/p&gt;

&lt;p&gt;In case you haven't seen any of my work. In the last 12 months, I've launched &lt;a href="https://testing-playground.com"&gt;testing-playground.com&lt;/a&gt;, &lt;a href="https://updrafts.app"&gt;updrafts.app&lt;/a&gt;, &lt;a href="https://rake.red"&gt;rake.red&lt;/a&gt; and a bunch of &lt;a href="https://meijer.ws/open-source"&gt;open source projects&lt;/a&gt;. I like to believe that I know what I'm talking about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#question-1"&gt;
  &lt;/a&gt;
  Question 1
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Here is a simple design of a navbar menu, we are struggling to stick the &lt;code&gt;login&lt;/code&gt; button to the right edge of the &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; (borders are added for a better understanding).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYkssloY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/felxzv89t6jhfx4m498x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYkssloY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/felxzv89t6jhfx4m498x.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Products&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log in&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Options - Single Choice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a:last-of-type { margin-left: auto; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:last-of-type { margin-left: 100%; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:last-of-type { float: right; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:last-child { margin-left: auto; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nav:last-child { float: right; }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;The interview existed of 12 questions, that had to be answered within 16 minutes. That sounds doable, until you meet the trick questions.&lt;/p&gt;

&lt;p&gt;Have you thought about the question? I think that &lt;code&gt;a:last-child { margin-left: auto; }&lt;/code&gt; is the correct answer. But &lt;code&gt;a:last-of-type { margin-left: auto; }&lt;/code&gt; works as well. As this is an automated interview, I can only hope that I choose whatever the interviewer prefers. As &lt;code&gt;a:last-of-type&lt;/code&gt; is listed first, this is easy to get tricked by. Time is limited, so when the candidate is confident that an option works, they are going to choose that, and move on to the next question.&lt;/p&gt;

&lt;p&gt;I usually tend to group the left and right options, and add a &lt;code&gt;justify-content: space-between&lt;/code&gt;. Why is that not an option? Is that wrong? Can we talk about it?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#question-2"&gt;
  &lt;/a&gt;
  Question 2
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;raiseError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the return type of this function in TypeScript?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options - Single Choice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MyError&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;void&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;never&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;The clock was ticking, and I chose &lt;code&gt;void&lt;/code&gt;. As that's how I would annotate this function. Makes sense, right? Think again! The return type of this function isn't &lt;code&gt;void&lt;/code&gt;, it's &lt;code&gt;never&lt;/code&gt;. As it's impossible for this function to return.&lt;/p&gt;

&lt;p&gt;To make it return &lt;code&gt;void&lt;/code&gt;, the throwing should be conditional. (wrapped with an &lt;code&gt;if&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;I believe this question is wrong because it doesn't say much about your TypeScript experience. I mean, how many dedicated throw functions do you have in your codebase? Most functions are constructed in a way that they have a return path. Either with a value, undefined, or void.&lt;/p&gt;

&lt;p&gt;And when you do come across this edge case in your day job, how hard would it be to place your cursor at the function, and wait for that pretty tool-tip to appear, telling you the exact return type?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#question-3"&gt;
  &lt;/a&gt;
  Question 3
&lt;/h1&gt;

&lt;p&gt;Which HTTP methods are idempotent?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options - Multiple Choice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All of them are idempotent as it is a stateless protocol&lt;/li&gt;
&lt;li&gt;None of the HTTP methods are idempotent.&lt;/li&gt;
&lt;li&gt;All of them except for POST, CONNECT and sometimes PATCH.&lt;/li&gt;
&lt;li&gt;All of them except for POST, OPTIONS and TRACE.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;First of all, this was a test for a &lt;code&gt;frontend developer&lt;/code&gt; position. Are frontend developers really expected to know if certain HTTP methods are idempotent or not? Isn't that for the API developers to know? I really did not know the answer to this question.&lt;/p&gt;

&lt;p&gt;After the test, I found out that the HTTP spec does have this specified, while I assumed that it was for the API spec (like &lt;code&gt;open-api&lt;/code&gt;) to decide.&lt;/p&gt;

&lt;p&gt;Anyways, I guessed that &lt;code&gt;all of them&lt;/code&gt; are idempotent, as HTTP doesn't hold state. My database does. But according to &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Idempotent#technical_knowledge"&gt;MDN&lt;/a&gt;, it should have been &lt;code&gt;all of them except for POST, OPTIONS, and TRACE&lt;/code&gt;. Today I learned.&lt;/p&gt;

&lt;p&gt;Now the question is, what if I make my &lt;code&gt;POST&lt;/code&gt; handler &lt;code&gt;idempotent&lt;/code&gt;? Doesn't this question depend a tiny bit on the API that we're talking about?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#question-4"&gt;
  &lt;/a&gt;
  Question 4
&lt;/h1&gt;

&lt;p&gt;Which of the following browser actions/events are triggered by changing the CSS property &lt;code&gt;opacity&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options - Multiple Choice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Layout operations performed&lt;/li&gt;
&lt;li&gt;Painting/Rasterizing&lt;/li&gt;
&lt;li&gt;Page composited together&lt;/li&gt;
&lt;li&gt;None of the above&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;Seriously? For what would we need this? I guess that the browser does a &lt;code&gt;repaint&lt;/code&gt;, so that excludes the last option. &lt;code&gt;Opacity&lt;/code&gt; doesn't change the layout, so there wouldn't be any &lt;code&gt;layout operations&lt;/code&gt;. But what about &lt;code&gt;Page composited together&lt;/code&gt;? I don't know. I really don't. Does that make me a bad developer? &lt;/p&gt;

&lt;p&gt;Let's move on. Do you still want that opacity on your navbar?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#trick-questions"&gt;
  &lt;/a&gt;
  Trick Questions
&lt;/h1&gt;

&lt;p&gt;There were six more weird technical questions that made more or less sense than the four above. But they all had one thing in common. It felt like they were trying to trick me, and it are questions that I don't need to know to be able to develop solid applications.&lt;/p&gt;

&lt;p&gt;When I would need to know it, I'm able to open my browser, and find the right answer in a matter of minutes. I'm a developer, but I suck at trivia.&lt;/p&gt;

&lt;p&gt;Two more questions to wrap this up? Remember... your time is ticking:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 11&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How would you explain a complicated technical problem to a colleague having none to very little technical understanding?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Write answer here...&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Question 12&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How would you go about getting a buy-in for your project from multiple stakeholders at work?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Write answer here...&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don't know what you want me to say. Do you have more details? Can I get another coffee and 30 minutes of your time? Let's talk about it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-score"&gt;
  &lt;/a&gt;
  My score
&lt;/h1&gt;

&lt;p&gt;The "nice" thing about this automated test, is that you'll get your score right away. I had a total score of 47%. I suck at React, HTTP, Communication, well, basically in every area.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZPeKKBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekbriyjxvp2lyoutk8vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZPeKKBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekbriyjxvp2lyoutk8vr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As expected, a few hours after my submission, I got the following mail. A little surprised that that part wasn't automated as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi Stephan,&lt;/p&gt;

&lt;p&gt;Thanks for doing the skills test! It was a tough decision as we've had so many great applications, but we've decided to move forward with other candidates. &lt;strong&gt;Really looking for folks who've got more experience with javascript.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, this really was a motivational experience &lt;em&gt;(not)&lt;/em&gt;. Do you know the saying &lt;em&gt;"You've dodged a bullet?"&lt;/em&gt;. That's how I came to think about this kind of interview tests. &lt;/p&gt;

&lt;p&gt;As I also operate on the hiring side, this provides me valuable insights into how the industry works. But if any recruiting person is reading this, please stop it. You're hiring developers specialized in interviews. Not in creating awesome software.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>interview</category>
    </item>
  </channel>
</rss>
