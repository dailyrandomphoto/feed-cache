<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Beating TimSort at Merging</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Fri, 30 Jul 2021 14:49:40 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/beating-timsort-at-merging-29hc</link>
      <guid>https://dev.to/adamgordonbell/beating-timsort-at-merging-29hc</guid>
      <description>&lt;p&gt;Here is a problem. You are tasked with improving the hot loop of a Python program: maybe it is an in-memory sequential index of some sort. The slow part is the updating, where you are adding a new sorted list of items to the already sorted index. You need to combine two sorted lists and keep the result sorted. How do you do that update?&lt;/p&gt;

&lt;p&gt;Yes, this sounds like a LeetCode problem, and maybe in the real-world you would reach for some existing &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedSet.html"&gt;sorted set&lt;/a&gt; &lt;a href="http://www.cplusplus.com/reference/set/set/"&gt;data structure&lt;/a&gt;, but if you were working with python lists, you might do something like this&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;merge_sorted_lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sorted_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt; &lt;span class="c1"&gt;# Compare both heads
&lt;/span&gt;            &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Pop from the head
&lt;/span&gt;            &lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add the remaining of the lists
&lt;/span&gt;    &lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sorted_list&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python has a built-in method in &lt;a href="https://github.com/python/cpython/blob/3.7/Lib/heapq.py#L314"&gt;&lt;code&gt;heapq.merge&lt;/code&gt;&lt;/a&gt; that does this. It takes advantage of the fact that our lists are already sorted, so we can get a new sorted list linear time rather than the &lt;code&gt;n*log(n)&lt;/code&gt; time it would take for combining and sorting two unsorted lists.&lt;/p&gt;

&lt;p&gt;Imagine my surprise then when I saw this performance graph from Stack Overflow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7mheXWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/performance-sort1-800-629c946b4.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7mheXWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/performance-sort1-800-629c946b4.webp" alt="Python sort is beating merge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sorting the list is faster than just merging the list in almost all cases! That doesn't sound right, but I checked it, and it's true. As Stack Overflow user &lt;a href="https://stackoverflow.com/users/4279/jfs"&gt;JFS&lt;/a&gt; puts it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Long story short, unless &lt;code&gt;len(l1 + l2)&lt;/code&gt; &amp;gt;= 1,000,000 use sort&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The reason sort beats merge in most cases is because of a man named Tim Peters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timsort"&gt;
  &lt;/a&gt;
  TimSort
&lt;/h2&gt;

&lt;p&gt;Python's &lt;code&gt;list.sort&lt;/code&gt; is the original implementation of a hybrid sorting algorithm called TimSort, named after its author, &lt;a href="https://github.com/python/cpython/commit/92f81f2e63b5eaa6d748d51a10e32108517bf3bf#diff-6d09fc0f0b57214c2e3a838d366425836c296fa931fe9dc430f604b7e3950c29"&gt;Tim&lt;/a&gt; Peters.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Here is] stable, natural merge sort, modestly called&lt;br&gt;
Timsort (hey, I earned it ). It has supernatural performance on many&lt;br&gt;
kinds of partially ordered arrays (less than lg(N!) comparisons needed, and&lt;br&gt;
as few as N-1), yet as fast as Python's previous highly tuned sample sort&lt;br&gt;
hybrid on random arrays.&lt;/p&gt;
&lt;/blockquote&gt;
Tim Peters explaining TimSort



&lt;p&gt;Timsort is designed to find runs of sequential numbers and merge them together:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main routine marches over the array once, left to right,&lt;br&gt;
alternately identifying the next run, then merging it into the previous&lt;br&gt;
runs "intelligently". Everything else is complication for speed, and some&lt;br&gt;
hard-won measure of memory efficiency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is why &lt;code&gt;(x + y).sort()&lt;/code&gt; can be surprisingly fast: once it finds the sequential runs of numbers, it functions like our merge algorithm: combining the two sorted lists in linear time.&lt;/p&gt;

&lt;p&gt;Timsort does have to do extra work, though. It needs to do a pass over the data to find these sequential runs, and &lt;code&gt;heapq.merge&lt;/code&gt; knows where the runs are ahead of time. Timsort overcomes this disadvantage by being written in C rather than Python. Or as ShawdowRanger on Stack Overflow explains it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CPython's &lt;code&gt;list.sort&lt;/code&gt; is implemented in C (avoiding interpreter overhead), while &lt;code&gt;heapq.merge&lt;/code&gt; is mostly implemented in Python, and optimizes for the "many iterables" case in a way that slows the "two iterables" case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that if I drop down to C and write a C extension I should be able to beat Timsort. This turned out to be easier than I thought it would be&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-c-extension"&gt;
  &lt;/a&gt;
  The C Extension
&lt;/h2&gt;

&lt;p&gt;The bulk of the C Extension, whose performance I'm going to cover in a minute, is just the pop the stack algorithm discussed before, but using an index to point to the head of the stack (&lt;a href="https://github.com/earthly/pymerge/blob/main/merge.c"&gt;full version&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;  &lt;span class="c1"&gt;//New List&lt;/span&gt;
  &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mergedList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyList_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;elem1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyList_GetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;listObj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;elem2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyList_GetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;listObj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyObject_RichCompareBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Py_LT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// List1 has smallest, Pop from list 1&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;PyList_SetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;mergedList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;// List2 has smallest, Pop from list 2&lt;/span&gt;
        &lt;span class="n"&gt;PyList_SetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;mergedList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//One list is empty, add remainder of other list to result&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mergedList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
C merge





&lt;p&gt;The nice thing about C extensions in Python is that they are easy to use. Once compiled, I can just &lt;code&gt;import merge&lt;/code&gt; and use my new merge method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;merge&lt;/span&gt;

&lt;span class="c1"&gt;# create some sorted lists
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1700&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1800&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# merge them
&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-it"&gt;
  &lt;/a&gt;
  Testing It
&lt;/h2&gt;

&lt;p&gt;Testing my new merge with a list of integers and floats, we can see that we are beating Timsort, especially for long lists:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;merge&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1700&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1800&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;merge_test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="n"&gt;m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort_test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="n"&gt;m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
   &lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;sort_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sort_test()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"from __main__ import sort_test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;merge_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"merge_test()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"from __main__ import merge_test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'timsort took &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sort_time&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; seconds'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'merge took &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;merge_time&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; seconds'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;timsort took 3.9523325259999997 seconds
merge took 3.0547665259999994 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Graphing the performance we get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTYjGbUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/beating-with-hetro1-1000-f0ab30520.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTYjGbUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/beating-with-hetro1-1000-f0ab30520.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
We are beating Timsort with our merge





&lt;p&gt;But if we switch to a list of only integers &lt;code&gt;sort&lt;/code&gt; is beating us for small lists and even on big lists our performance improvement is thin at best:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBNkqrEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/losing-with-homo-1000-f3e6b8fd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBNkqrEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/losing-with-homo-1000-f3e6b8fd6.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
With lists of all `int` or all `float` we lose our advantage.



&lt;p&gt;What is going on here?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timsorts-special-comparisons"&gt;
  &lt;/a&gt;
  Timsort's Special Comparisons
&lt;/h2&gt;

&lt;p&gt;It turns out that Timsort has some extra tricks up its sleeves in the case of a list of integers. In that initial pass over the list, it checks the types of the elements, and if they are all uniform it tries to use a cheaper comparison operation.&lt;/p&gt;

&lt;p&gt;Specifically, if your list is all &lt;a href="https://github.com/python/cpython/blob/main/Objects/listobject.c#L2085"&gt;longs&lt;/a&gt;, &lt;a href="https://github.com/python/cpython/blob/main/Objects/listobject.c#L2113"&gt;floats&lt;/a&gt;, or &lt;a href="https://github.com/python/cpython/blob/main/Objects/listobject.c#L2061"&gt;Latin strings&lt;/a&gt; Timsort will save a lot of cycles on the comparison operations.&lt;/p&gt;

&lt;p&gt;Learning from Timsort we can bring in these comparison operations ourselves. We don't want to do a full pass over the list, or we will lose our advantage, so we can just specialize our merge by offering separate calls for longs, floats, and Latin alphabet strings like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Default comparison&lt;/span&gt;
&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Compare assuming ints&lt;/span&gt;
&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;merge_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Compare assuming floats&lt;/span&gt;
&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;merge_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Compare assuming latin&lt;/span&gt;
&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;merge_latin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
merge.h





&lt;h2&gt;
  &lt;a href="#beating-timsort"&gt;
  &lt;/a&gt;
  Beating TimSort
&lt;/h2&gt;

&lt;p&gt;Doing that, we now can finally beat Timsort at merging sorted lists, not just when the list is a heterogeneous mix of elements, but also when it's all integers, or floating-point numbers, or one byte per char strings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpzAbcla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary1-int-1000-b27eb2dbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpzAbcla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary1-int-1000-b27eb2dbe.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
merge vs TimSort for `int`.



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfbKwIz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary2-float-1000-28225b9ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfbKwIz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary2-float-1000-28225b9ff.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
merge vs TimSort for `float`.



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eh_cD5M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary3-latin-1000-af4f97615.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eh_cD5M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary3-latin-1000-af4f97615.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
merge vs TimSort for Latin alphabet strings.



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuyRItk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary4-else-1000-34d33a495.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuyRItk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary4-else-1000-34d33a495.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
merge vs TimSort for everything without a specialized compare.



&lt;p&gt;The default &lt;code&gt;merge&lt;/code&gt; beats Timsort for heterogeneous lists, and the specialized versions are there for when you have uniform types in your list, and you need to go fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timsort-is-good"&gt;
  &lt;/a&gt;
  TimSort Is Good
&lt;/h2&gt;

&lt;p&gt;There, I have beat Timsort for merging sorting lists, although I had to pull in some code from TimSort itself to get here. I'm not sure how valuable this is: if you need to go fast, you might not choose Python, but it was a fun learning project.&lt;/p&gt;

&lt;p&gt;Also, I learned that dropping down to C isn't as scary as it sounds. The build steps are a bit more involved, but with the included &lt;a href="https://github.com/earthly/pymerge/blob/main/Earthfile"&gt;Earthfile&lt;/a&gt;, the build is a one-liner and works cross-platform. You can find the code &lt;a href="https://github.com/earthly/pymerge"&gt;on GitHub&lt;/a&gt; and an intro to &lt;a href="https://earthly.dev/"&gt;Earthly&lt;/a&gt; on this very site, and with that example, you can build your own C extension reasonably quickly.&lt;/p&gt;

&lt;p&gt;The surprising thing, though, is how good Timsort still is. It wasn't designed for merging sorted lists but for sorting real-world data. It turns out real-world data is often partially sorted, just like our use case.&lt;/p&gt;

&lt;p&gt;Timsort on partially sorted data shows us where Big O notation can misinform us. If your input always keeps you near the median or best-case performance, then the worst-case performance doesn't matter much. It's no wonder then that since its first creation, Timsort has spread from Python to JavaScript, Swift, and Rust. Thank you, Tim Peters!&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Practically, you might not want to use pop, but just track an index of where the head of the stack should be, like the C code shown later. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;It was easier because my teammate Alex has experience writing C extensions for Python, so by the time I had found the Python header files, Alex had already put together a prototype solution. &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>python</category>
      <category>computerscience</category>
      <category>cpp</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Introduction to Python Functions</title>
      <author>Mary-softeng</author>
      <pubDate>Fri, 30 Jul 2021 14:42:53 +0000</pubDate>
      <link>https://dev.to/marysofteng/introduction-to-python-functions-de1</link>
      <guid>https://dev.to/marysofteng/introduction-to-python-functions-de1</guid>
      <description>&lt;p&gt;What are python functions?&lt;br&gt;
Python Functions are a set of actions that we group together, and give a name to. The core functions in Python language includes string.title() and list.sort(). In python one can define his or her own functions, in order to "teach" Python new behavior.&lt;/p&gt;

&lt;p&gt;Advantages of using Python functions&lt;br&gt;
•We write a set of instructions once. We save some work in this simple example, and we save even more work in larger programs.&lt;br&gt;
•When our function works, we don't have to worry about that code anymore. Every time you repeat code in your program. Writing a function means there is one place to fix mistakes, and when those bugs are fixed, we can be confident that this function will continue to work correctly.&lt;br&gt;
•We can modify our function's behavior, and that change takes effect every time the function is called. This is much better than deciding we need some new behavior, and then having to change code in many different places in our program.&lt;/p&gt;

&lt;p&gt;Basic python syntax&lt;br&gt;
In Python a function is defined using the def keyword:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phjYupG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjyrprdh3cap0mmjuc3j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phjYupG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjyrprdh3cap0mmjuc3j.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Calling a Function&lt;br&gt;
To call a function, use the function name followed by parenthesis:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1z3GJY1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w66m0u3nb69que7n81xv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1z3GJY1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w66m0u3nb69que7n81xv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arguments in Python&lt;br&gt;
Information can be passed into functions as arguments.&lt;br&gt;
Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.&lt;br&gt;
The following example has a function with one argument (planguage). When the function is called, we pass along a programming language, which is used inside the function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAKNWOIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmbk2mhlipbcrd24etfb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAKNWOIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmbk2mhlipbcrd24etfb.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NOTE: &lt;br&gt;
A parameter is the variable listed inside the parentheses in the function definition.&lt;br&gt;
An argument is the value that is sent to the function when it is called.&lt;/p&gt;

&lt;p&gt;Number of Arguments&lt;br&gt;
By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJCuiqCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ku6ykej9locdx03rpnm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJCuiqCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ku6ykej9locdx03rpnm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arbitrary Arguments, *args&lt;br&gt;
If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.&lt;br&gt;
This way the function will receive a tuple of arguments, and can access the items accordingly:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bt1xFLqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rd3q83gldz5k4onjxmh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bt1xFLqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rd3q83gldz5k4onjxmh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keyword Arguments&lt;br&gt;
You can also send arguments with the key = value syntax.&lt;br&gt;
This way the order of the arguments does not matter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsLdDF2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu2szu8vprtpet2bleg9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsLdDF2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu2szu8vprtpet2bleg9.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arbitrary Keyword Arguments, *&lt;em&gt;kwargs&lt;br&gt;
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: *&lt;/em&gt; before the parameter name in the function definition.&lt;br&gt;
This way the function will receive a dictionary of arguments, and can access the items accordingly:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PA7hFWrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2awo17342y30rzttnkd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PA7hFWrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2awo17342y30rzttnkd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Default Parameter Value&lt;br&gt;
If we call the function without argument, it uses the default value:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BX32pKST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8bwwimdaxtuw55h33srl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BX32pKST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8bwwimdaxtuw55h33srl.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Passing a List as an Argument&lt;br&gt;
You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.&lt;br&gt;
E.g. if you send a List as an argument, it will still be a List when it reaches the function:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfGSy1tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx108ipx39cmqrrhrhqq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfGSy1tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx108ipx39cmqrrhrhqq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Return Values&lt;br&gt;
To let a function return a value, use the return statement:&lt;br&gt;
The pass Statement&lt;br&gt;
Function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEDpy3tL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3kqjcyua9git9pz18ib.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEDpy3tL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3kqjcyua9git9pz18ib.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Recursion&lt;br&gt;
Python also accepts function recursion, which means a defined function can call itself.&lt;br&gt;
Recursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.&lt;br&gt;
The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.&lt;br&gt;
In this example, tri_recursion() is a function that we have defined to call itself ("recurse"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6sxpPK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckalikj4mmesmp4jasqj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6sxpPK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckalikj4mmesmp4jasqj.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Three more satisfying buttons and how to make them</title>
      <author>Ammadeo</author>
      <pubDate>Fri, 30 Jul 2021 14:24:07 +0000</pubDate>
      <link>https://dev.to/ammadeo/three-more-satisfying-buttons-and-how-to-make-them-5abc</link>
      <guid>https://dev.to/ammadeo/three-more-satisfying-buttons-and-how-to-make-them-5abc</guid>
      <description>&lt;p&gt;Satisfying buttons can take many forms. Let's see three more!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simple-button"&gt;
  &lt;/a&gt;
  Simple button
&lt;/h1&gt;

&lt;p&gt;Not every satisfying button must be hard to implement. This simple button will use only small transitions and shadows to make it feel great.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-look"&gt;
  &lt;/a&gt;
  How does it look?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ammadeo/embed/BaWEEoZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-make-it"&gt;
  &lt;/a&gt;
  Let's make it
&lt;/h2&gt;

&lt;p&gt;The implementation will be very similar to the one in the first part of this series. So if You didn't read it, do it now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Use realistic shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.06&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Make sure that transform-origin match translate() direction. 
     It makes translate() and scale() work it the same axis */&lt;/span&gt;  
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make shadows much smaller */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.06&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Apply perspective transformation */&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="c"&gt;/* Translate down on Y axis */&lt;/span&gt;
    &lt;span class="n"&gt;translatey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.25em&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="c"&gt;/* Make button smaller */&lt;/span&gt;
    &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#plastic-button"&gt;
  &lt;/a&gt;
  Plastic button
&lt;/h1&gt;

&lt;p&gt;The button will deform inwards on press.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-the-implementation"&gt;
  &lt;/a&gt;
  Let's see the implementation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ammadeo/embed/jOBRgvQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-it"&gt;
  &lt;/a&gt;
  How to make it?
&lt;/h2&gt;

&lt;p&gt;To make a neuromorphic button, we need to give it a few shadows. By default, we want to make it look raised.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add outside shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="c"&gt;/* Top left white shadow */&lt;/span&gt;
    &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c"&gt;/* Bottom right black shadow */&lt;/span&gt;
    &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add inside shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="c"&gt;/* Inner top left black shadow */&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c"&gt;/* Inner bottom right white shadow */&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Make it a bit darker */&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.96&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget about UX! Let's add a light border around it to make it easier to spot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add glass-like border  */&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about plastic like buttons from &lt;a href="https://uxdesign.cc/neumorphism-in-user-interfaces-b47cef3bf3a6"&gt;Neumorphism in user interfaces&lt;/a&gt; by Michal Malewicz.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#glowing-button"&gt;
  &lt;/a&gt;
  Glowing button
&lt;/h1&gt;

&lt;p&gt;This button is made of glass and has a colourful light inside. The light follows a user's interactions — like mouse movement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-it-in-action"&gt;
  &lt;/a&gt;
  Let's see it in action
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ammadeo/embed/mdmxOwP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-it"&gt;
  &lt;/a&gt;
  How to implement it
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I'd say upfront the implementation is not beginner-friendly.&lt;/strong&gt;&lt;br&gt;
Firstly We'll use inner shadows to make a glass-like effect.&lt;br&gt;
If You want to learn more about Glassmorphism, check out &lt;a href="https://blog.prototypr.io/new-glassmorphism-how-to-create-neon-glass-effect-ui-design-3a6c866d3b63"&gt;New Glassmorphism? How to Create Neon Glass Effect UI Design&lt;/a&gt; by &lt;br&gt;
Przemysław Baraniak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Background color in HSL 
     It's "raw" because it needs to work with custom alpha */&lt;/span&gt;
  &lt;span class="py"&gt;--color-background-raw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;16%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Glass effect inner shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;0.25em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-0.25em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-2em&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color-background-raw&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.25em&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll use the &lt;strong&gt;after pseudo-element&lt;/strong&gt; as a glowing circle following a user's interactions. Let's make use of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API/guide"&gt;CSS Properties and Values API&lt;/a&gt;. This API allows us to define types of CSS Properties, which is needed to animate them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Use CSS Properties and Values API
It enables transitions for css properties 
*/&lt;/span&gt;
&lt;span class="c"&gt;/* Will control the left position of the glowing circle. */&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--glow-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Allow any length or percentage e.g. 1px, 1em or 20% */&lt;/span&gt;
  &lt;span class="nt"&gt;syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;length-percentage&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Allow children elements to inherit this property */&lt;/span&gt;
  &lt;span class="nt"&gt;inherits&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Set default value */&lt;/span&gt;
  &lt;span class="nt"&gt;initial-value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* Will control the top position of the glowing circle. */&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--glow-top&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;length-percentage&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Glowing circle */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nc"&gt;.glow&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make sure it shows */&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Position it */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--glow-top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--glow-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c"&gt;/* Keep it centred */&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Make it smooth!
     This is why we need CSS Properties and Values API
   */&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="m"&gt;80ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;left&lt;/span&gt; &lt;span class="m"&gt;80ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's use a bit of JavaScript to control them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Select the button&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button.glow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Set glow position css properties&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setGlowPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Get the event's coordinates relative to the button&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offsetX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offsetY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Prevent setting position on keyboard click&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;offsetY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// wait for animation frame for better performance&lt;/span&gt;
    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// set css property&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--glow-left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--glow-top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;offsetY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Set glow position on mousemove (mouse) and click (touch and keyboard)&lt;/span&gt;
&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mousemove&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGlowPosition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGlowPosition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#challenge-for-you"&gt;
  &lt;/a&gt;
  Challenge for You
&lt;/h1&gt;

&lt;p&gt;Make Your satisfying button and share it in a comment below. I'd love to see it!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>design</category>
    </item>
    <item>
      <title>What are Callbacks in JavaScript?</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 30 Jul 2021 14:00:22 +0000</pubDate>
      <link>https://dev.to/codesphere/what-are-callbacks-in-javascript-297h</link>
      <guid>https://dev.to/codesphere/what-are-callbacks-in-javascript-297h</guid>
      <description>&lt;p&gt;Anyone familiar with programming, already knows what functions do and how to use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But, what exactly is a callback function?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me walk you through a few examples that will help you understand what callback functions are and how to use them in JavaScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;Let's start with what a function is.&lt;br&gt;
A function is a block of code that can be executed repeatedly, as needed. Functions are really useful because you write the code once and then you can run it multiple times.&lt;br&gt;
To run the code inside a function, simply call the function.&lt;br&gt;
Here's an example that defines a function and then calls it ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the code sample above, we created a function called greet() (lines 1 ‒ 3) that has a parameter called name. This parameter serves as a placeholder so that when the function is called, a value can be passed to the parameter.&lt;/p&gt;

&lt;p&gt;In line 6, we called the greet() function and we passed the string value 'John' as an argument.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#callback-functions"&gt;
  &lt;/a&gt;
  Callback Functions
&lt;/h2&gt;

&lt;p&gt;A callback function is simply a function that is passed into another function as an argument, which is then triggered when the other function is executed.&lt;br&gt;
The following is an example of using a simple callback function.&lt;/p&gt;

&lt;p&gt;Let's start by creating an array of numbers that we will use in our example ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here's a function that checks for even numbers ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To find all the even numbers in the array that we created above, we can use the JavaScript filter() method, which returns a new array that only contains the numbers that match the function's condition, meaning that they are even.&lt;/p&gt;

&lt;p&gt;Now, we can pass the evenNumbers() function, described above, to the filter() method and assign it to the filteredEvenNumbers variable, as shown below ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In this example, the evenNumbers() function is a &lt;strong&gt;callback function&lt;/strong&gt;, because it is being passed as an argument to another function.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#synchronous-callback-functions"&gt;
  &lt;/a&gt;
  Synchronous Callback Functions
&lt;/h2&gt;

&lt;p&gt;By default, JavaScript runs code sequentially from top to bottom by completing one command line before starting the next.&lt;/p&gt;

&lt;p&gt;The evenNumbers() function we created is an example of a synchronous callback function.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#asynchronous-callback-functions"&gt;
  &lt;/a&gt;
  Asynchronous Callback Functions
&lt;/h2&gt;

&lt;p&gt;Asynchronicity means that JavaScript does not wait for the operation of a command line to complete before it starts executing the next line of the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are familiar with setTimeout, then you've been using callback functions all along!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the following example, we are going to use the setTimeout() method that only executes after 2 seconds ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the example above, we used the setTimeout() method and called the greet() function to execute 2 seconds later. JavaScript starts counting 2 seconds. But meanwhile, it proceeds to the next command, which immediately displays 'Hello Oliver!'. Then after the 2 seconds are over, the greet() function is run, and displays 'Hello world!'. &lt;/p&gt;

&lt;p&gt;Therefore, even though the greet() function was called before the sayName() function, they were executed in reverse order.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-next%C2%A0step"&gt;
  &lt;/a&gt;
  The Next Step
&lt;/h2&gt;

&lt;p&gt;I hope this tutorial has helped you understand what callback functions are and how to use them as easily as functions!&lt;br&gt;
There is still much to learn about callback functions, so I encourage you to continue practicing and learning.&lt;/p&gt;




&lt;p&gt;To practice using callbacks, check out &lt;a href="https://link.codesphere.com/BY"&gt;Codesphere&lt;/a&gt;, an online code editor in which you can build, test, and deploy your apps all within a single tab of your browser.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 30th July 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 30 Jul 2021 13:41:06 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-30th-july-2021-bnc</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-30th-july-2021-bnc</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-trackingjs"&gt;
  &lt;/a&gt;
  1. tracking.js
&lt;/h3&gt;

&lt;p&gt;The tracking.js library brings different computer vision algorithms and techniques into the browser environment. By using modern HTML5 specifications, we enable you to do real-time color tracking, face detection and much more — all that with a lightweight core (~7 KB) and intuitive interface.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/eduardolundgren"&gt;
        eduardolundgren
      &lt;/a&gt; / &lt;a href="https://github.com/eduardolundgren/tracking.js"&gt;
        tracking.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A modern approach for Computer Vision on the web
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/eduardolundgren/tracking.js/master/banner.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c7xYMW5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/eduardolundgren/tracking.js/master/banner.svg" alt="Banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;👉 &lt;strong&gt;&lt;a href="https://github.com/eduardolundgren/tracking.js/issues/395"&gt;https://github.com/eduardolundgren/tracking.js/issues/395&lt;/a&gt;&lt;/strong&gt; 👈&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;
tracking.js&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/eduardolundgren/tracking.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2dfe482f92cd5a20e5ddd3a1c11d165aded53464888fde2072fe6de96e4fbcf6/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6564756172646f6c756e646772656e2f747261636b696e672e6a732e7376673f7374796c653d666c6174" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/eduardolundgren/tracking.js#info=devDependencies" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fa24b464ae2ea49fee34a0cf13b67410e4558531aed7c44aa0650758059f7f7d/687474703a2f2f696d672e736869656c64732e696f2f64617669642f6465762f6564756172646f6c756e646772656e2f747261636b696e672e6a732e7376673f7374796c653d666c6174" alt="DevDependencies Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The tracking.js library brings different computer vision algorithms and techniques into the browser environment. By using modern HTML5 specifications, we enable you to do real-time color tracking, face detection and much more — all that with a lightweight core (~7 KB) and intuitive interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com" rel="nofollow"&gt;Official website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/api/" rel="nofollow"&gt;API Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;Install via &lt;a href="http://bower.io/" rel="nofollow"&gt;Bower&lt;/a&gt;, &lt;a href="https://www.npmjs.com/" rel="nofollow"&gt;npm&lt;/a&gt;, or &lt;a href="https://github.com/eduardolundgren/tracking.js/archive/master.zip"&gt;download as a zip&lt;/a&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;bower install tracking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install tracking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://trackingjs.com/examples/face_tag_friends.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z1D731v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709347/ec72876c-1453-11e4-8450-149d06d487f2.jpg" alt="Demo 1"&gt;&lt;/a&gt;
&lt;a href="http://trackingjs.com/examples/face_fish_tank.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0WvKN8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709357/1a1c2e16-1454-11e4-804d-e6ada6c65997.jpg" alt="Demo 2"&gt;&lt;/a&gt;
&lt;a href="http://trackingjs.com/examples/color_hexgl.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wOxNmLGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709361/38f86e8a-1454-11e4-811d-52bd21b37e85.jpg" alt="Demo 3"&gt;&lt;/a&gt;
&lt;a href="http://trackingjs.com/examples/color_draw_something.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJNItWli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709464/5447a302-1456-11e4-96b2-d2fae28e2a01.jpg" alt="Demo 4"&gt;&lt;/a&gt;
&lt;a href="http://trackingjs.com/examples/color_fish_tank.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Tiq-IP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709469/6a3e859a-1456-11e4-982a-d46a55890e1e.jpg" alt="Demo 5"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://trackingjs.com/docs.html#trackers" rel="nofollow"&gt;Trackers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#color-tracker" rel="nofollow"&gt;Color Tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#object-tracker" rel="nofollow"&gt;Object Tracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://trackingjs.com/docs.html#utilities" rel="nofollow"&gt;Utilities&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#feature-detection" rel="nofollow"&gt;Feature Detection (Fast)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#feature-descriptor" rel="nofollow"&gt;Feature Descriptor (Brief)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#convolution" rel="nofollow"&gt;Convolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#gray-scale" rel="nofollow"&gt;Gray Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#image-blur" rel="nofollow"&gt;Image Blur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#integral-image" rel="nofollow"&gt;Integral Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#sobel" rel="nofollow"&gt;Sobel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#viola-jones" rel="nofollow"&gt;Viola Jones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://trackingjs.com/docs.html#web-components" rel="nofollow"&gt;Web Components&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#color-element" rel="nofollow"&gt;Color Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#object-element" rel="nofollow"&gt;Object Element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Browser Support&lt;/h2&gt;
&lt;p&gt;You can plug &lt;em&gt;tracking.js&lt;/em&gt; into some well supported HTML elements such as &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528325/20373e76-078e-11e4-8e3a-1cb86cf506f0.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_c82fED9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528325/20373e76-078e-11e4-8e3a-1cb86cf506f0.png" alt="IE"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528328/23bc7bc4-078e-11e4-8752-ba2809bf5cce.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eud2Dysl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528328/23bc7bc4-078e-11e4-8752-ba2809bf5cce.png" alt="Chrome"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528329/26283ab0-078e-11e4-84d4-db2cf1009953.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cB3ew3ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528329/26283ab0-078e-11e4-84d4-db2cf1009953.png" alt="Firefox"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528330/27ec9fa8-078e-11e4-95cb-709fd11dac16.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNW0SMKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528330/27ec9fa8-078e-11e4-95cb-709fd11dac16.png" alt="Opera"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528331/29df8618-078e-11e4-8e3e-ed8ac738693f.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5RWeZ_R8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528331/29df8618-078e-11e4-8e3e-ed8ac738693f.png" alt="Safari"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IE 9+ ✔
&lt;/td&gt;
&lt;td&gt;Latest ✔
&lt;/td&gt;
&lt;td&gt;Latest ✔
&lt;/td&gt;
&lt;td&gt;Latest ✔
&lt;/td&gt;
&lt;td&gt;Latest ✔
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;However, the browser support may vary if you request the user's camera (which relies on &lt;a href="http://caniuse.com/#feat=stream" rel="nofollow"&gt;getUserMedia API&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/eduardolundgren/tracking.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-welcome-ui"&gt;
  &lt;/a&gt;
  2. Welcome UI
&lt;/h3&gt;

&lt;p&gt;Welcome to the Welcome UI library created by Welcome to the jungle, a customizable design system with react, styled-components, styled-system and reakit.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/WTTJ"&gt;
        WTTJ
      &lt;/a&gt; / &lt;a href="https://github.com/WTTJ/welcome-ui"&gt;
        welcome-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Customizable design system of @wttj with react • styled-components • styled-system • reakit
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Welcome UI&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/WTTJ/welcome-ui/master/docs/public/illustration.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fg2WRk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/WTTJ/welcome-ui/master/docs/public/illustration.png" width="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Welcome to the &lt;em&gt;Welcome UI library&lt;/em&gt; created by &lt;a href="https://www.welcometothejungle.com" rel="nofollow"&gt;Welcome to the jungle&lt;/a&gt;, a customizable design system with react • styled-components • styled-system and reakit.&lt;/p&gt;
&lt;p&gt;Here you'll find all the core components you need to create a delightful webapp.&lt;/p&gt;
&lt;p&gt;🌴 &lt;a href="https://welcome-ui.com" rel="nofollow"&gt;Discover all the components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/WTTJ/welcome-ui/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/7c3d302529a2054f54b29f489364d8cb66c883ecc25994b161b728bc207abe9c/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f77656c636f6d652d75692e737667" alt="License"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/96a65b603836722d6177a916708bdedc4e88f093b24c8a907a68d8e051c12d9d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6465253230666f726d6174696e672d70726574746965722d626c75652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/96a65b603836722d6177a916708bdedc4e88f093b24c8a907a68d8e051c12d9d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6465253230666f726d6174696e672d70726574746965722d626c75652e737667" alt="Code formating"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9f2038c6513488b38a31f31c82920ec478eafe0e6123150826ab6d3d7855751e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d7374796c65642d2d636f6d706f6e656e74732d6666363962342e737667"&gt;&lt;img src="https://camo.githubusercontent.com/9f2038c6513488b38a31f31c82920ec478eafe0e6123150826ab6d3d7855751e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d7374796c65642d2d636f6d706f6e656e74732d6666363962342e737667" alt="Code style"&gt;&lt;/a&gt; &lt;a href="https://github.com/WTTJ/welcome-ui/blob/master/CONTRIBUTING.mdx"&gt;&lt;img src="https://camo.githubusercontent.com/f677fb729d428823ee6adfc930e859ecb27eab2b72080031f406243cb64c047e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d6d656469756d737072696e67677265656e2e737667" alt="PRs Welcome"&gt;&lt;/a&gt; &lt;a href="https://conventionalcommits.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/74420c84a8cdfb2ed88abc162cde2dd9fc6dcf14f2ee0ec0779eb2cca98836e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e76656e74696f6e616c253230436f6d6d6974732d312e302e302d79656c6c6f772e737667" alt="Conventional Commits"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;1 - Install the &lt;strong&gt;peer dependencies&lt;/strong&gt; listed below:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add @xstyled/styled-components @xstyled/system prop-types react react-dom styled-components&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;2 - Install the the &lt;strong&gt;core&lt;/strong&gt; component and any other components you need for your webapp e.g. if you need just a button…&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add @welcome-ui/core @welcome-ui/button&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Import library &amp;amp; Theme&lt;/h2&gt;
&lt;p&gt;Getting started&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;React&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;createTheme&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;WuiProvider&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@welcome-ui/core'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Button&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@welcome-ui/button'&lt;/span&gt;
&lt;span class="pl-c"&gt;// Add theme options (if you want)&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;options&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;defaultFontFamily&lt;/span&gt;: &lt;span class="pl-s"&gt;'Helvetica'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;headingFontFamily&lt;/span&gt;: &lt;span class="pl-s"&gt;'Georgia'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;colors&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;primary&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
      &lt;span class="pl-c1"&gt;500&lt;/span&gt;: &lt;span class="pl-s"&gt;'#124C80'&lt;/span&gt;
    &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;success&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
      &lt;span class="pl-c1"&gt;500&lt;/span&gt;: &lt;span class="pl-s"&gt;'#32CD32'&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/WTTJ/welcome-ui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-waypoint"&gt;
  &lt;/a&gt;
  3. Waypoint
&lt;/h3&gt;

&lt;p&gt;Waypoint allows developers to define their application build, deploy, and release lifecycle as code, reducing the time to deliver deployments through a consistent and repeatable workflow.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hashicorp"&gt;
        hashicorp
      &lt;/a&gt; / &lt;a href="https://github.com/hashicorp/waypoint"&gt;
        waypoint
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A tool to build, deploy, and release any application on any platform.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/hashicorp/waypoint/main/website/public/img/logo-fullcolor-whitebackground-rbg.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUrXSg-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/hashicorp/waypoint/main/website/public/img/logo-fullcolor-whitebackground-rbg.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
Waypoint&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Website: &lt;a href="https://www.waypointproject.io" rel="nofollow"&gt;https://www.waypointproject.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tutorials: &lt;a href="https://learn.hashicorp.com/waypoint" rel="nofollow"&gt;HashiCorp Learn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Forum: &lt;a href="https://discuss.hashicorp.com/c/waypoint" rel="nofollow"&gt;Discuss&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Waypoint allows developers to define their application build, deploy, and release lifecycle as code, reducing the time to deliver deployments through a consistent and repeatable workflow.&lt;/p&gt;
&lt;p&gt;Waypoint supports a number of build methods and target platforms out of the box
and more can be easily added via plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Native Buildpacks&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;AWS EC2 and ECS&lt;/li&gt;
&lt;li&gt;Azure Container Instances&lt;/li&gt;
&lt;li&gt;Google Cloud Run&lt;/li&gt;
&lt;li&gt;And many more...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Waypoint runs on Linux, Mac OS X, and Windows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;: We take Waypoint's security and our users' trust very seriously. If you
believe you have found a security issue in Waypoint, please &lt;a href="https://www.hashicorp.com/security#vulnerability-reporting" rel="nofollow"&gt;responsibly disclose&lt;/a&gt; by
contacting us at &lt;a href="https://raw.githubusercontent.com/hashicorp/waypoint/main/mailto:security@hashicorp.com"&gt;security@hashicorp.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Quick Start&lt;/h2&gt;
&lt;p&gt;A few quick start guides are available on the &lt;a href="https://www.waypointproject.io/docs/getting-started" rel="nofollow"&gt;Waypoint website&lt;/a&gt;
and on &lt;a href="https://learn.hashicorp.com/waypoint" rel="nofollow"&gt;HashiCorp Learn&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.waypointproject.io/docs/getting-started" rel="nofollow"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-intro" rel="nofollow"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-install" rel="nofollow"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-docker" rel="nofollow"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-kubernetes" rel="nofollow"&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-nomad" rel="nofollow"&gt;Nomad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-ui" rel="nofollow"&gt;Waypoint UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/aws-ecs" rel="nofollow"&gt;AWS ECS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/azure-container-instance" rel="nofollow"&gt;Azure Container Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/google-cloud-run" rel="nofollow"&gt;Google Cloud&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hashicorp/waypoint"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-vs-code-database-client"&gt;
  &lt;/a&gt;
  4. VS Code Database Client
&lt;/h3&gt;

&lt;p&gt;Database Client for Visual Studio Code. It supports databases MySQL/MariaDB, Microsoft SQL Server, PostgreSQL, SQLite, MongoDB, Redis, and ElasticSearch.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cweijan"&gt;
        cweijan
      &lt;/a&gt; / &lt;a href="https://github.com/cweijan/vscode-database-client"&gt;
        vscode-database-client
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Database Client For Visual Studio Code
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Database Client&lt;/h1&gt;
&lt;p&gt;Database Client for Visual Studio Code. It supports databases MySQL/MariaDB, Microsoft SQL Server, PostgreSQL, SQLite, MongoDB, Redis, and ElasticSearch.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Project site: &lt;a href="https://github.com/cweijan/vscode-database-client"&gt;vscode-database-client&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/README_CN.md"&gt;中文文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#database-client"&gt;Database Client&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#connect"&gt;Connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#table"&gt;Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#execute-sql-query"&gt;Execute SQL Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#generate-mock-data"&gt;Generate Mock Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#history"&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#backupimport"&gt;Backup/Import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#setting"&gt;Setting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#filter"&gt;Filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Install from vscode marketplace &lt;a href="https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-mysql-client2" rel="nofollow"&gt;vscode-database-client&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Connect&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open Database Explorer panel, then click the&lt;code&gt;+&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Select your database type, input connection config then click the connect button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/connection.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPQzxw5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/connection.jpg" alt="connection"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Table&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Click table to open table view.&lt;/li&gt;
&lt;li&gt;Then you can do data modification on the view page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/QueryTable.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_xHaNzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/QueryTable.jpg" alt="query"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Execute SQL Query&lt;/h2&gt;
&lt;p&gt;In the Database Explorer panel, click the &lt;code&gt;Open Query&lt;/code&gt; button.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/newquery.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6FicuvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/newquery.jpg" alt="newquery"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That will open a sql editor bind of database, it provider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IntelliSense sql edit.&lt;/li&gt;
&lt;li&gt;snippets:&lt;code&gt;sel、del、ins、upd、joi&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;Run selected or current cursor sql (Shortcut : Ctrl+Enter).&lt;/li&gt;
&lt;li&gt;Run all sql (Shortcut : Ctrl+Shift+Enter).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/run.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5_AVrSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/run.jpg" alt="run"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Generate Mock Data&lt;/h2&gt;
&lt;p&gt;You can easily generate test data.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/mockData.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DuStEdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/mockData.jpg" alt="mockData"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
History&lt;/h2&gt;
&lt;p&gt;Click the history button to open the list…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/cweijan/vscode-database-client"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-create-eth-app"&gt;
  &lt;/a&gt;
  5. Create Eth App
&lt;/h3&gt;

&lt;p&gt;Create Ethereum-powered apps with one command.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/paulrberg"&gt;
        paulrberg
      &lt;/a&gt; / &lt;a href="https://github.com/paulrberg/create-eth-app"&gt;
        create-eth-app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create Ethereum-powered apps with one command
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Create Eth App &lt;a href="https://prettier.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/48a41f43affa2e6253d6a48e0ee662ec53ce13c46442ac815e81d36b6e6b434d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d6666363962342e737667" alt="Styled with Prettier"&gt;&lt;/a&gt; &lt;a href="http://commitizen.github.io/cz-cli/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aca3301042bdedae125df537db587fe82c2123dc8a2c46f0859840b5fa4b7f1a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6d6d6974697a656e2d667269656e646c792d627269676874677265656e2e737667" alt="Commitizen Friendly"&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt; &lt;a href="https://github.com/facebook/create-react-app/blob/master/CONTRIBUTING.md"&gt;&lt;img src="https://camo.githubusercontent.com/7c0ba324ca86899e51bd333f373b37b8939d40a263fa734f091f992bdc7fdd9b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d626c75652e737667" alt="PRs Welcome"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Create Ethereum-powered apps with one command.&lt;/p&gt;
&lt;p&gt;Create Eth App works on macOS, Windows, and Linux.&lt;br&gt;
If something doesn’t work, please &lt;a href="https://github.com/paulrberg/create-eth-app/issues/new"&gt;file an issue&lt;/a&gt;.&lt;br&gt;
If you have questions or need help, please ask in our &lt;a href="https://discord.gg/bsS8T47" rel="nofollow"&gt;Discord&lt;/a&gt; community.&lt;/p&gt;
&lt;h2&gt;
Quick Overview&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn create eth-app my-eth-app
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; my-eth-app
yarn react-app:start&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;If you've previously installed &lt;code&gt;create-eth-app&lt;/code&gt; globally via &lt;code&gt;yarn global add create-eth-app&lt;/code&gt;, we recommend you
uninstall the package using &lt;code&gt;yarn global remove create-eth-app&lt;/code&gt; and use the &lt;code&gt;yarn create eth-app&lt;/code&gt; shorthand to ensure that you use the last version.&lt;/p&gt;
&lt;p&gt;Then open &lt;a href="http://localhost:3000/" rel="nofollow"&gt;http://localhost:3000/&lt;/a&gt; to see your app.&lt;br&gt;
When you’re ready to deploy to production, create a minified bundle with &lt;code&gt;yarn run react-app:build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/paulrberg/create-eth-app/develop/./screencast.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hF4sTEu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/paulrberg/create-eth-app/develop/./screencast.gif" width="600" alt="yarn react-app:start"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Creating an App&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You’ll need to have Node 8.16.0 or Node 10.16.0 or later version on your local development machine&lt;/strong&gt; (but it’s not required on the server). You can use &lt;a href="https://github.com/creationix/nvm#installation"&gt;nvm&lt;/a&gt; (macOS/Linux) or &lt;a href="https://github.com/coreybutler/nvm-windows#node-version-manager-nvm-for-windows"&gt;nvm-windows&lt;/a&gt; to switch Node versions between…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/paulrberg/create-eth-app"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#6-jsii"&gt;
  &lt;/a&gt;
  6. JSii
&lt;/h3&gt;

&lt;p&gt;jsii allows code in any language to naturally interact with JavaScript classes. It is the technology that enables the AWS Cloud Development Kit to deliver polyglot libraries from a single codebase!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aws"&gt;
        aws
      &lt;/a&gt; / &lt;a href="https://github.com/aws/jsii"&gt;
        jsii
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      jsii allows code in any language to naturally interact with JavaScript classes. It is the technology that enables the AWS Cloud Development Kit to deliver polyglot libraries from a single codebase!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/aws/jsii/main/./logo/png/128.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcv4H4oz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/aws/jsii/main/./logo/png/128.png" alt="jsii"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://cdk.dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/77f72ca5a7f8e06ee5be5981b9db9ad36731ec4a2bbf10918dde04a09ddeb2d0/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d536c61636b266d6573736167653d63646b2e64657626636f6c6f723d627269676874677265656e266c6f676f3d736c61636b" alt="Join the chat at https://cdk.Dev"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/aws/jsii/main/#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/6e82457b7261ec730ecd636f553d8b2118715ad8bda6d89aa99eeda80bd1d9dd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616c6c2d636f6e7472696275746f72732f6177732f6a7369692f6d61696e3f6c6162656c3d254532253943254138253230416c6c253230436f6e7472696275746f7273" alt="All Contributors"&gt;&lt;/a&gt;
&lt;a href="https://github.com/aws/jsii/actions?query=workflow%3AMain+branch%3Amain"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eAtDDLD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws/jsii/workflows/Main/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/jsii" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ae1430366f8227660b6bc0a03e7025a866626c5ab61a9bb72887c40b1d44b09b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6a7369693f6c6f676f3d6e706d" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://hub.docker.com/r/jsii/superchain" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80b1a3645b3490b03ce5248d931b2586b64f355d12ddbe70ba2407173e4a4e66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f636b65722d6a7369692532467375706572636861696e2d627269676874677265656e3f6c6f676f3d646f636b6572" alt="docker"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;jsii&lt;/code&gt; allows code in any language to naturally interact with JavaScript classes. It is the technology that enables the
&lt;a href="https://github.com/aws/aws-cdk"&gt;AWS Cloud Development Kit&lt;/a&gt; to deliver polyglot libraries from a single codebase!&lt;/p&gt;
&lt;p&gt;A class library written in &lt;strong&gt;TypeScript&lt;/strong&gt; can be used in projects authored in &lt;strong&gt;TypeScript&lt;/strong&gt; or &lt;strong&gt;Javascript&lt;/strong&gt; (as
usual), but also in &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;Java&lt;/strong&gt;, &lt;strong&gt;C#&lt;/strong&gt; (and other languages from the &lt;em&gt;.NET&lt;/em&gt; family), ...&lt;/p&gt;
&lt;h2&gt;
❓ Documentation&lt;/h2&gt;
&lt;p&gt;Head over to our &lt;a href="https://aws.github.io/jsii" rel="nofollow"&gt;documentation website&lt;/a&gt;!&lt;/p&gt;
&lt;h1&gt;
📖 Blog Posts&lt;/h1&gt;
&lt;p&gt;Here's a collection of blog posts (in chronological order) related to &lt;code&gt;jsii&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;2020-01-11:&lt;/strong&gt; &lt;a id="user-content-blog-mbonig" href="https://raw.githubusercontent.com/aws/jsii/main/"&gt; &lt;/a&gt;&lt;a href="https://www.matthewbonig.com/2020/01/11/creating-constructs/" rel="nofollow"&gt;How to Create CDK Constructs&lt;/a&gt;, by &lt;a href="http://www.matthewbonig.com/" rel="nofollow"&gt;Matthew Bonig&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2020-05-27:&lt;/strong&gt; &lt;a id="user-content-blog-floydpink" href="https://raw.githubusercontent.com/aws/jsii/main/"&gt; &lt;/a&gt;&lt;a href="https://aws.amazon.com/fr/blogs/opensource/generate-python-java-dotnet-software-libraries-from-typescript-source/" rel="nofollow"&gt;Generate Python, Java, and .NET software libraries from a TypeScript
source&lt;/a&gt;, by &lt;a href="https://harimenon.com/" rel="nofollow"&gt;Hari Pachuveetil&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2020-12-23:&lt;/strong&gt; &lt;a id="user-content-blog-romainmuller" href="https://raw.githubusercontent.com/aws/jsii/main/"&gt; &lt;/a&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/how-the-jsii-open-source-framework-meets-developers-where-they-are/" rel="nofollow"&gt;How the jsii open source framework meets developers where they are
&lt;/a&gt;, by &lt;a href="https://github.com/RomainMuller"&gt;Romain Marcadier&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ℹ️ If you wrote blog posts about &lt;code&gt;jsii&lt;/code&gt; and would like to have them referenced here, do…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws/jsii"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-flagiconcss"&gt;
  &lt;/a&gt;
  7. flag-icon-css
&lt;/h3&gt;

&lt;p&gt;A collection of all country flags in SVG — plus the CSS for easier integration&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lipis"&gt;
        lipis
      &lt;/a&gt; / &lt;a href="https://github.com/lipis/flag-icon-css"&gt;
        flag-icon-css
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🎏 A collection of all country flags in SVG — plus the CSS for easier integration
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
flag-icon-css&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A collection of all country flags in SVG — plus the CSS for easier integration
See the &lt;a href="https://flagicons.lipis.dev" rel="nofollow"&gt;demo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;You can either &lt;a href="https://github.com/lipis/flag-icon-css/archive/master.zip"&gt;download&lt;/a&gt;
the whole project as is or install it via Bower or NPM:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;$ bower install flag-icon-css
$ npm install flag-icon-css&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;For using the flags inline with text add the classes &lt;code&gt;.flag-icon&lt;/code&gt; and
&lt;code&gt;.flag-icon-xx&lt;/code&gt; (where &lt;code&gt;xx&lt;/code&gt; is the
&lt;a href="https://www.iso.org/obp/ui/#search/code/" rel="nofollow"&gt;ISO 3166-1-alpha-2 code&lt;/a&gt;
of a country) to an empty &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;. If you want to have a squared version flag
then add the class &lt;code&gt;flag-icon-squared&lt;/code&gt; as well. Example:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-c1"&gt;class&lt;/span&gt;="&lt;span class="pl-s"&gt;flag-icon flag-icon-gr&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;span&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-c1"&gt;class&lt;/span&gt;="&lt;span class="pl-s"&gt;flag-icon flag-icon-gr flag-icon-squared&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;span&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You could also apply this to any element, but in that case you'll have to use the
&lt;code&gt;flag-icon-background&lt;/code&gt; instead of &lt;code&gt;flag-icon&lt;/code&gt; and you're set. This will add the
correct background with the following CSS properties:&lt;/p&gt;
&lt;div class="highlight highlight-source-css position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;background-size&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lipis/flag-icon-css"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-mermaid"&gt;
  &lt;/a&gt;
  8. Mermaid
&lt;/h3&gt;

&lt;p&gt;Generation of diagram and flowchart from text in a similar manner as markdown &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mermaid-js"&gt;
        mermaid-js
      &lt;/a&gt; / &lt;a href="https://github.com/mermaid-js/mermaid"&gt;
        mermaid
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Generation of diagram and flowchart from text in a similar manner as markdown
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
mermaid &lt;a href="https://travis-ci.org/mermaid-js/mermaid" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0d7e7effeff169cc55aeade60bb087abcc507122e8d5ab7d8dba780590029d75/68747470733a2f2f7472617669732d63692e6f72672f6d65726d6169642d6a732f6d65726d6169642e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/mermaid" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7da8b7965d1f5f3cadbdf9f4ef9983b1da2a7f1fbc22a9bf0ac7a305eba5959e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d65726d616964" alt="NPM"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/mermaid-js/mermaid?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9e5716a33036665843728776991d398c189d6fc61dc5a4bd91de686ef6a3bc7e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d65726d6169642d6a732f6d65726d6169642f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt; &lt;a href="https://join.slack.com/t/mermaid-talk/shared_invite/enQtNzc4NDIyNzk4OTAyLWVhYjQxOTI2OTg4YmE1ZmJkY2Y4MTU3ODliYmIwOTY3NDJlYjA0YjIyZTdkMDMyZTUwOGI0NjEzYmEwODcwOTE" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eaa8f296d1ffaf8630076d6af62392be1d03e86c7c21fcb258f9a2b17a26fa73/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6d6573736167653d6a6f696e2532306368617426636f6c6f723d396366266c6f676f3d736c61636b266c6162656c3d736c61636b" alt="Join our Slack!"&gt;&lt;/a&gt; &lt;a href="https://percy.io/Mermaid/mermaid" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b5059bda3f1e150a4efde71c4764a36049ea24135156d700e3d1587e6cd8f03b/68747470733a2f2f70657263792e696f2f7374617469632f696d616765732f70657263792d62616467652e737667" alt="This project is using Percy.io for visual regression testing."&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/mermaid-js/mermaid/develop/./img/header.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1jtpLL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mermaid-js/mermaid/develop/./img/header.png" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🏆 &lt;strong&gt;Mermaid was nominated and won the &lt;a href="https://osawards.com/javascript/2019" rel="nofollow"&gt;JS Open Source Awards (2019)&lt;/a&gt; in the category "The most exciting use of technology"!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to all involved, people committing pull requests, people answering questions! 🙏&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;Mermaid is a Javascript based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams.  The main purpose of Mermaid is to help documentation catch up with development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Doc-Rot is a Catch-22 that Mermaid helps to solve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Diagramming and documentation costs precious developer time and gets outdated quickly
But not having diagrams or docs ruins productivity and hurts organizational learning. &lt;br&gt;
Mermaid addresses this problem by cutting the time, effort and tooling that is required to create modifiable diagrams and charts, for smarter and more reusable content
The text definitions for Mermaid diagrams allows for it to be updated easily, it can also be made part of production…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mermaid-js/mermaid"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-babylonjs"&gt;
  &lt;/a&gt;
  9. Babylon.js
&lt;/h3&gt;

&lt;p&gt;Babylon.js is a powerful, beautiful, simple, and open game and rendering engine packed into a friendly JavaScript framework. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BabylonJS"&gt;
        BabylonJS
      &lt;/a&gt; / &lt;a href="https://github.com/BabylonJS/Babylon.js"&gt;
        Babylon.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Babylon.js is a powerful, beautiful, simple, and open game and rendering engine packed into a friendly JavaScript framework.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Babylon.js&lt;/h1&gt;
&lt;p&gt;Getting started? Play directly with the Babylon.js API using our &lt;a href="https://playground.babylonjs.com/" rel="nofollow"&gt;playground&lt;/a&gt;. It also contains a lot of samples to learn how to use it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://badge.fury.io/js/babylonjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/df71cfd7e712177705d052f40735126af6690378961a7104a64da8aa7654a3f3/68747470733a2f2f62616467652e667572792e696f2f6a732f626162796c6f6e6a732e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://dev.azure.com/babylonjs/ContinousIntegration/_build/latest?definitionId=1&amp;amp;branchName=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1359a4c9ddcece577e36590e8c1717e14b88c565ab3363ce3db26e44da5b3bf4/68747470733a2f2f6465762e617a7572652e636f6d2f626162796c6f6e6a732f436f6e74696e6f7573496e746567726174696f6e2f5f617069732f6275696c642f7374617475732f43493f6272616e63684e616d653d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="http://isitmaintained.com/project/BabylonJS/Babylon.js" title="Average time to resolve an issue" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5bc9324b6c6cf75063681fa0c9535f92efa2a28a202e21b4b29421b4f00a3f3f/687474703a2f2f697369746d61696e7461696e65642e636f6d2f62616467652f7265736f6c7574696f6e2f426162796c6f6e4a532f426162796c6f6e2e6a732e737667" alt="Average time to resolve an issue"&gt;&lt;/a&gt;
&lt;a href="https://isitmaintained.com/project/babylonJS/babylon.js" title="Percentage of issues still open" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c46a699cad4de04cafb76af52f73b34eb4b4e0b94d8b569b97f2dfd96d2b75e1/68747470733a2f2f697369746d61696e7461696e65642e636f6d2f62616467652f6f70656e2f626162796c6f6e4a532f626162796c6f6e2e6a732e737667" alt="Percentage of issues still open"&gt;&lt;/a&gt;
&lt;a href="https://img.badgesize.io/BabylonJS/Babylon.js/master/dist/preview%20release/babylon.js.svg?compression=gzip" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c59bc7b3af6f58fe97dd0ad96d6401c7c340708ee290238eec3372a5b489fe4e/68747470733a2f2f696d672e626164676573697a652e696f2f426162796c6f6e4a532f426162796c6f6e2e6a732f6d61737465722f646973742f7072657669657725323072656c656173652f626162796c6f6e2e6a732e7376673f636f6d7072657373696f6e3d677a6970" alt="Build Size"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/intent/follow?screen_name=babylonjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/69af60c8ccc5b072db79002809eed2c200e54f90961fefa2d035280e6853a345/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f626162796c6f6e6a732e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77" alt="Twitter"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7ece69f0da9a479764c62443022d013462d18afae57b68a4e0e3b52750006ad4/68747470733a2f2f696d672e736869656c64732e696f2f646973636f757273652f75736572733f7365727665723d6874747073253341253246253246666f72756d2e626162796c6f6e6a732e636f6d"&gt;&lt;img src="https://camo.githubusercontent.com/7ece69f0da9a479764c62443022d013462d18afae57b68a4e0e3b52750006ad4/68747470733a2f2f696d672e736869656c64732e696f2f646973636f757273652f75736572733f7365727665723d6874747073253341253246253246666f72756d2e626162796c6f6e6a732e636f6d" alt="Discourse users"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Any questions?&lt;/strong&gt; Here is our official &lt;a href="https://forum.babylonjs.com/" rel="nofollow"&gt;forum&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
CDN&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cdn.babylonjs.com/babylon.js" rel="nofollow"&gt;https://cdn.babylonjs.com/babylon.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cdn.babylonjs.com/babylon.max.js" rel="nofollow"&gt;https://cdn.babylonjs.com/babylon.max.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional references can be found on &lt;a href="https://cdn.babylonjs.com/xxx" rel="nofollow"&gt;https://cdn.babylonjs.com/xxx&lt;/a&gt; where &lt;code&gt;xxx&lt;/code&gt; is the folder structure you can find in the /dist folder like &lt;a href="https://cdn.babylonjs.com/gui/babylon.gui.min.js" rel="nofollow"&gt;https://cdn.babylonjs.com/gui/babylon.gui.min.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the preview release, use the following URLs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://preview.babylonjs.com/babylon.js" rel="nofollow"&gt;https://preview.babylonjs.com/babylon.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://preview.babylonjs.com/babylon.max.js" rel="nofollow"&gt;https://preview.babylonjs.com/babylon.max.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional references can be found on &lt;a href="https://preview.babylonjs.com/xxx" rel="nofollow"&gt;https://preview.babylonjs.com/xxx&lt;/a&gt; where xxx is the folder structure you can find in the /dist/preview release folder like &lt;a href="https://preview.babylonjs.com/gui/babylon.gui.min.js" rel="nofollow"&gt;https://preview.babylonjs.com/gui/babylon.gui.min.js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
npm&lt;/h2&gt;
&lt;p&gt;BabylonJS and its modules are published on npm with full typing support. To install, use:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install babylonjs --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will allow you to import BabylonJS entirely using:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;BABYLON&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'babylonjs'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;or individual classes using:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Scene&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;Engine&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'babylonjs'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;If using TypeScript, don't forget to add 'babylonjs' to…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/BabylonJS/Babylon.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-dinerojs"&gt;
  &lt;/a&gt;
  10. Dinero.js
&lt;/h3&gt;

&lt;p&gt;Money is complex, and the primitives of the language aren't enough to properly represent it. Dinero.js is a JavaScript library that lets you express monetary values, but also perform mutations, conversions, comparisons, formatting, and overall make money manipulation easier and safer in your application.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dinerojs"&gt;
        dinerojs
      &lt;/a&gt; / &lt;a href="https://github.com/dinerojs/dinero.js"&gt;
        dinero.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create, calculate, and format money in JavaScript and TypeScript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://v2.dinerojs.com/docs" rel="nofollow"&gt;
    &lt;img alt="Dinero.js" src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9L_J8YH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/dinerojs/dinero.js/main/.github/banner.png"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://www.npmjs.com/package/dinero.js?activeTab=versions" rel="nofollow"&gt;&lt;img alt="Stability: alpha" src="https://camo.githubusercontent.com/d6941b3cbb65bb62764d1dbe8270071a0464c8ec8ea83b41031a81f335ddc46f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73746162696c6974792d616c7068612d6634643033662e737667"&gt;&lt;/a&gt;
  &lt;a href="https://circleci.com/gh/dinerojs/dinero.js" rel="nofollow"&gt;&lt;img alt="CircleCI" src="https://camo.githubusercontent.com/5abcd47ea24e13bba2cf4a9e464a80228aa9b471768c35c3145d99afe2c49a20/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f67682f64696e65726f6a732f64696e65726f2e6a73"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/dinerojs/dinero.js/blob/master/LICENSE"&gt;&lt;img alt="NPM" src="https://camo.githubusercontent.com/f1c906234d046fba23ccdeac2fd04fcffe1e6b4e889c76259bd816c90f1768a7/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f64696e65726f2e6a73"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Dinero.js lets you create, calculate, and format money safely in JavaScript and TypeScript.&lt;br&gt;
  &lt;a href="https://v2.dinerojs.com/docs" rel="nofollow"&gt;&lt;strong&gt;v2.dinerojs.com/docs&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;p&gt;Money is complex, and the primitives of the language aren't enough to properly represent it. Dinero.js is a JavaScript library that lets you express monetary values, but also perform mutations, conversions, comparisons, formatting, and overall make money manipulation easier and safer in your application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ Dinero.js v2 is currently in alpha. For v1, check the &lt;a href="https://github.com/dinerojs/dinero.js/tree/v1"&gt;&lt;code&gt;v1&lt;/code&gt; branch&lt;/a&gt; and &lt;a href="https://v1.dinerojs.com/" rel="nofollow"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
📦 Install&lt;/h2&gt;

&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install dinero.js@alpha
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;

yarn add dinero.js@alpha&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
⚡️ Quick start&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Dinero&lt;/code&gt; objects are minimal. Every function in &lt;code&gt;dinero.js&lt;/code&gt; is side-effect free, allowing you only to bundle exactly what you use.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;USD&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@dinero.js/currencies'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;dinero&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;add&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'dinero.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;d1&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;dinero&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;amount&lt;/span&gt;: &lt;span class="pl-c1"&gt;500&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;currency&lt;/span&gt;: &lt;span class="pl-c1"&gt;USD&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;d2&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;dinero&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;amount&lt;/span&gt;: &lt;span class="pl-c1"&gt;800&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;currency&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/dinerojs/dinero.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +2,546 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +2,509 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nocodb/nocodb"&gt;NocoDB&lt;/a&gt; +1,038 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +1,037 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt; +735 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +71%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bring-shrubbery/use-cookie-consent"&gt;useCookieConsent&lt;/a&gt; +34%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/junhoyeo/use-color"&gt;use-color&lt;/a&gt; +25%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vechai/vechaiui"&gt;Vechai UI&lt;/a&gt; +17%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/elad2412/the-new-css-reset"&gt;The New CSS Reset&lt;/a&gt; +15%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +11,622 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +5,094 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +3,408 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/solidjs/solid"&gt;Solid&lt;/a&gt; +3,121 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +3,080 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/ossf/scorecard"&gt;Security Scorecards&lt;/a&gt; +179%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NoQuarterTeam/boilerplate"&gt;Fullstack Boilerplate&lt;/a&gt; +171%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/netlify/framework-info"&gt;Framework Info&lt;/a&gt; +147%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/snowpackjs/astro"&gt;Astro&lt;/a&gt; +72%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bradtraversy/50projects50days"&gt;50 Projects in 50 Days&lt;/a&gt; +65%&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Help a teacher. Become a better developer.</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 30 Jul 2021 13:19:18 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/help-a-teacher-become-a-better-developer-16dp</link>
      <guid>https://dev.to/alvaromontoro/help-a-teacher-become-a-better-developer-16dp</guid>
      <description>&lt;p&gt;Teachers play a key role in our communities. They sacrifice their time, their money, and much more for their students. And, more often than not, their efforts are not as recognized and appreciated as they deserve.&lt;/p&gt;

&lt;p&gt;While fixing this situation requires systemic changes, there are some ways in which software developers can help. And in the end, it can be a mutually beneficial collaboration.&lt;/p&gt;

&lt;p&gt;I often talk to teachers (my wife is one), and most have great ideas for apps and games for their classrooms. But unfortunately, many don't have the resources available or the technical practice to turn them into reality. And that's where developers need to step up.&lt;/p&gt;

&lt;p&gt;We can help them. And teaming up with teachers is a win-win:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Teachers will get valuable assets for their classrooms that will help them present lessons in innovative ways.&lt;/li&gt;
&lt;li&gt;Developers will earn experience developing real-life projects, working with clients, and testing new technologies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These collaborations are not fully altruistic. Apart from being rewarding, developers will benefit from the exchange: experience, demos, a portfolio... all while helping a greater cause.&lt;/p&gt;

&lt;p&gt;The apps that teachers require are a nice break from the work routine or the school projects. They spark creativity and encourage research and learning. Teachers don't need to-do lists, tic-tac-toes, or Netflix clones that no one will ever see. Instead, they need something practical that dozens of students will use. &lt;/p&gt;

&lt;p&gt;The projects may be simple, but they are perfect for developers of all levels (especially for beginners). And there's always the satisfaction of knowing that your work is being utilized and that there are people that find it extremely helpful.&lt;/p&gt;

&lt;p&gt;Over the years and alongside my wife, we have developed many apps and mini-games for her Spanish classes. Some examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An 8-ball with personalized expressions.&lt;/li&gt;
&lt;li&gt;A webpage for students to practice verb conjugations.&lt;/li&gt;
&lt;li&gt;An app to reorder and complete sentences.&lt;/li&gt;
&lt;li&gt;A fill-in-the-gaps using songs and videos.&lt;/li&gt;
&lt;li&gt;A virtual assistant that listens to the students and answers questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of them helped me learn/practice new things: randomization, multimedia integration, third-party and Web APIs, drag-and-drop, etc., along with the core concepts of programming: loops, conditionals, data structures, events, asynchronous functions... Plus, they were fun to develop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B7Vzj2xX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edozxm05yr83jcy4667k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7Vzj2xX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edozxm05yr83jcy4667k.jpg" alt="Cartoon version of Frida Kahlo"&gt;&lt;/a&gt;&lt;/p&gt;
Frida is a &lt;a href="https://codepen.io/alvaromontoro/full/gOWorVj"&gt;virtual teacher assistant&lt;/a&gt; that helps during Spanish class. It was&lt;br&gt;developed in vanilla JavaScript using Web APIs and basic control structures.&lt;br&gt; 



&lt;p&gt;These are apps that require similar skills as the classic learning projects but have a cool edge that will impress friends, colleagues, and even recruiters.&lt;/p&gt;

&lt;p&gt;So, next time you sit down in front of your computer, thinking &lt;em&gt;What should I build next?&lt;/em&gt;, don't look at the same old threads with the same old dull learning project ideas. Reach out to a teacher friend! Ask them what they need. They’ll give you ideas.&lt;/p&gt;

&lt;p&gt;Teachers inspire students daily, and they can be a great source of inspiration for developers too.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>watercooler</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How programming is better with TypeScript ?</title>
      <author>Kat Holder</author>
      <pubDate>Fri, 30 Jul 2021 13:17:33 +0000</pubDate>
      <link>https://dev.to/katholder/how-programming-is-better-with-typescript-ji0</link>
      <guid>https://dev.to/katholder/how-programming-is-better-with-typescript-ji0</guid>
      <description>&lt;p&gt;TypeScript is a typed superset of JavaScript by definition. As a result, all current JavaScript is TypeScript compliant. Also, you may transform an existing JavaScript project to include type definitions and other language qualities that make long-term project upkeep and scaling much effective and simpler.&lt;/p&gt;

&lt;p&gt;TypeScript includes a compiler that converts a .ts file (which cannot be viewed in a browser) to a .js file (which is vanilla JavaScript), as if we had written the entire project in JavaScript. It is quite useful to include this layer of 'convenience' above JavaScript code.&lt;/p&gt;

&lt;p&gt;There has been a lot of comparison between &lt;a href="https://codersera.com/blog/typescript-vs-javascript/"&gt;TypeScript &amp;amp; JavaScript&lt;/a&gt; &amp;amp; also a lot of confusion as to which one to learn. However, in this article we will talk about TypeSCript &amp;amp; why it is loved by the programmers.&lt;/p&gt;

&lt;h2&gt;Key Concepts in TypeScript&lt;/h2&gt;

&lt;p&gt;There are three things that make Typescript so useful:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Types &lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt; Classes and OOP&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a JavaScript developer, TypeScript will help you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;boosting your confidence&lt;/li&gt;
&lt;li&gt;catching errors before they reach production&lt;/li&gt;
&lt;li&gt;making it possible to refactor code&lt;/li&gt;
&lt;li&gt;saving you time from writing tests&lt;/li&gt;
&lt;li&gt;giving you a good coding experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When working with new codebases and in larger teams, TypeScript will give you more confidence. You will be less concerned if you are familiar with TypeScript and join a new team or project that uses it. You can count on TypeScript to help you out. Because you can look at something and quickly infer how it works, the language improves code readability and predictability. The type system is to blame for this.&lt;/p&gt;

&lt;p&gt;Because TypeScript will detect errors for you, refactoring code becomes easy. When you rename a function, it will warn you if you fail to use the new name someplace else. TypeScript will correct you if you change the form of an interface or type and eliminate a property that you thought wasn't being utilised.&lt;/p&gt;

&lt;p&gt;In essence, TypeScript is a JS linter. Alternatively, JS with compiler-friendly documentation.&lt;/p&gt;

&lt;p&gt;As a result, unlike other languages like CoffeeScript (which adds syntactic sugar) or PureScript (which looks nothing like JavaScript), you don't need to know much to get started creating TypeScript code.&lt;/p&gt;

&lt;p&gt;Types are unnecessary in TypeScript, and any JS file is a valid TypeScript file. While the compiler will warn if your starting files contain type problems, it will return a JavaScript file that works as it did before. TypeScript will meet you wherever you are, and it's simple to improve your skills over time.&lt;/p&gt;

&lt;p&gt;Nevertheless, even if you don't use TypeScript to its full potential, it's a useful tool to have in your toolbox. It's simple to start small and gradually expand your capabilities, learning and adding new features as you go. There's no need to be terrified of TypeScript because it's practical and accommodating to beginners.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Implementing programmatic file transformations in PHP, Part 2</title>
      <author>Shalvah</author>
      <pubDate>Fri, 30 Jul 2021 13:14:36 +0000</pubDate>
      <link>https://dev.to/shalvah/implementing-programmatic-file-transformations-in-php-part-2-58i</link>
      <guid>https://dev.to/shalvah/implementing-programmatic-file-transformations-in-php-part-2-58i</guid>
      <description>&lt;p&gt;Hi! Still working on the upgrade tool from &lt;a href="https://blog.shalvah.me/posts/implementing-programmatic-file-transformations-in-php"&gt;last time&lt;/a&gt;. As we saw, the current implementation works, but there are a few issues. There are three main ones I'll tackle here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Namespace resolution. Imagine our user's old config has this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'something'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;A\B&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And the sample new config has this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;A\B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'something'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The class &lt;code&gt;A\B&lt;/code&gt; referenced in &lt;code&gt;something&lt;/code&gt; is the same in both configs, but written in different ways. As it stands, when we try to check if any new items were added, we'll get a "yes", even though both classes are the same. We'll fix things so both nodes resolve to the same value (&lt;code&gt;A\B&lt;/code&gt;) in our AST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Printing. The default printing style isn't the best. My main ick is that long arrays are printed on a single line. Let's change this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our tests. When we wrote them, we were loading the config files via &lt;code&gt;require&lt;/code&gt;. We need to update them to match the parsing-into-AST approach.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you prefer, you can head to &lt;a href="https://github.com/shalvah/upgrader"&gt;the GitHub repo&lt;/a&gt; instead, where I've already addressed these issues. This article just explains my process.&lt;/p&gt;

&lt;p&gt;Okay, let's go. We'll start with namespace resolution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#traversing-the-ast"&gt;
  &lt;/a&gt;
  Traversing the AST
&lt;/h2&gt;

&lt;p&gt;When you work with an AST, you typically want to &lt;em&gt;traverse&lt;/em&gt; (or &lt;em&gt;walk&lt;/em&gt;) it. Remember that an AST is a tree: one node can contain other nodes, which can contains more nodes, and so on. In HTML, a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; node can contain an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and a &lt;code&gt;&amp;lt;span?&lt;/code&gt;. In PHP, a statement, &lt;code&gt;$x = 2 + 5&lt;/code&gt; can contain an assignment (&lt;code&gt;$x =&lt;/code&gt;) and an expression (&lt;code&gt;2 + 5&lt;/code&gt;), which itself contains two literal nodes (&lt;code&gt;2&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;), and an operator (&lt;code&gt;+&lt;/code&gt;). Traversing an AST allows you to visit all the nodes of the tree and modify it or extract some information.&lt;/p&gt;

&lt;p&gt;Most parsers provide some way for you to easily traverse the generated AST and perform some action against each node of a certain type. For example, here's how you can convert all &lt;strong&gt;bold&lt;/strong&gt; nodes in a Markdown file to &lt;em&gt;italics&lt;/em&gt; with &lt;a href="https://github.com/remarkjs/remark"&gt;remark&lt;/a&gt;, which uses unified (&lt;a href="https://github.com/unifiedjs/handbook/blob/main/readme.md#unist-util-visit"&gt;docs&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;visit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unist-util-visit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emphasis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See it in action on &lt;a href="https://astexplorer.net/#/gist/9ee2308d1bef23b49d58d7a58d8bc682/05c9e60de030024dc36cf6681e515e64669b12ab"&gt;astexplorer.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example of converting &lt;code&gt;var x = 2 + 5&lt;/code&gt; to &lt;code&gt;let x = 2 + 5&lt;/code&gt; &lt;a href="https://github.com/jamiebuilds/babel-handbook/blob/920aa8c6005630c86203dc0de1f007216a1b5982/translations/en/plugin-handbook.md#toc-writing-your-first-babel-plugin"&gt;using a Babel plugin&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;visitor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;VariableDeclaration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;let&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See it in action on &lt;a href="https://astexplorer.net/#/gist/c49fa5da630886d6fc23f4299452d161/b687f67199ddd03bdea0cd9fc168c4c5382d4fc3"&gt;astexplorer.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Get the idea? We can use a visitor to walk our config files' ASTs and replace any &lt;code&gt;::class&lt;/code&gt; constants with the full names. In this particular case, we don't need to write our own visitor. PHP-Parser comes with a &lt;code&gt;NameResolver&lt;/code&gt; visitor, which does this for us. Using this visitor, we can ensure that both files resolve to the same thing, "A\B".&lt;/p&gt;

&lt;p&gt;So let's rewrite our code to apply this name resolution before we begin any comparisons with the ASTs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parseFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$filePath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$sourceCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filePath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ParserFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ParserFactory&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PREFER_PHP7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$parser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$sourceCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NodeTraverser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addVisitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NodeVisitor\NameResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;// We want to still keep the original text&lt;/span&gt;
            &lt;span class="s1"&gt;'preserveOriginalNames'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;]));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getUserOldConfigFileAsAst&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;parseFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;configFiles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user_old'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getSampleNewConfigFileAsAst&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;parseFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;configFiles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sample_new'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool. Let's test this out. We'll run a simple dry run, and dump the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;ofConfigFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test_config.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'test_config_sample.php'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dryRun&lt;/span&gt;&lt;span class="p"&gt;();;&lt;/span&gt;
&lt;span class="nf"&gt;ray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$changes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Before (no name resolution)&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0a1EYX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.shalvah.me/store/media/image_10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0a1EYX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.shalvah.me/store/media/image_10.png" alt="" title="before_name_resolution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;After (name resolution)&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--muWSkzuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.shalvah.me/store/media/image_14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--muWSkzuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.shalvah.me/store/media/image_14.png" alt="" title="after_name_resolution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So it works! It correctly shows no changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reversing-the-change-with-a-custom-visitor"&gt;
  &lt;/a&gt;
  Reversing the change with a custom visitor
&lt;/h2&gt;

&lt;p&gt;But there's more work to do. If we leave this as it is, when we eventually write the upgraded config file back, we'd have replaced all the &lt;code&gt;::class&lt;/code&gt; constants with the resolved full names, which works, but isn't ideal. Ideally, we should keep things as the user wrote it.&lt;/p&gt;

&lt;p&gt;We can do this with another visitor, that traverses the upgraded AST before we print it. This time, we'll have to implement a custom visitor. With PHP-Parser's &lt;code&gt;NodeVisitor&lt;/code&gt;, you implement a number of methods and manually filter by node type. In our case, we filter for instances of &lt;code&gt;FullyQualified&lt;/code&gt; and return the &lt;code&gt;originalName&lt;/code&gt; attribute (which we have, since we set &lt;code&gt;preserveOriginalNames&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;). We return this from &lt;code&gt;leaveNode()&lt;/code&gt;, and it will replace the class name node with the one we returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UnresolveNamespaces&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;PhpParser\NodeVisitor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;leaveNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PhpParser&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$node&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nc"&gt;PhpParser\Node\Name\FullyQualified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Return the original node if it exists&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'originalName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;beforeTraverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;enterNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Node&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;afterTraverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;writeNewConfigFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NodeTraverser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addVisitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnresolveNamespaces&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$prettyPrinter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PrettyPrinter\Standard&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'shortArraySyntax'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nv"&gt;$astAsText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$prettyPrinter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prettyPrintFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$configFilePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$configFilePath&lt;/span&gt;&lt;span class="s2"&gt;.bak"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$configFilePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$astAsText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#synchronising-imports"&gt;
  &lt;/a&gt;
  Synchronising imports
&lt;/h2&gt;

&lt;p&gt;One more thing. We need to bring in any new &lt;code&gt;use&lt;/code&gt; statements. Imagine the new config file adds a new class &lt;code&gt;C\D&lt;/code&gt;, but writes it this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;C\D&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'some_list'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we're "unresolving" the names before printing, this new item will get added to the upgraded config as &lt;code&gt;D::class&lt;/code&gt;, but without the extra import of &lt;code&gt;C\D&lt;/code&gt;, leading to a bug. We can fix this by checking for any new &lt;code&gt;use&lt;/code&gt; statements in the sample config file and copying them into the upgraded config before we print:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;cleanUpAstForPrinting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// First, unresolve namespaces&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NodeTraverser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addVisitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnresolveNamespaces&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Then find any new use statements and add them to the AST&lt;/span&gt;
        &lt;span class="nv"&gt;$sampleConfigAst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getSampleNewConfigFileAsAst&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$newUseStatements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$sampleConfigAst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Node&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;Stmt\Use_&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$alreadyPresentUseStatements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Node&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$node&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;Stmt\Use_&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$newUseStatements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;subtractOtherListFromList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$newUseStatements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$alreadyPresentUseStatements&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$newUseStatements&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$newUseStatement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;array_unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$newUseStatement&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ast'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've created a new method, &lt;code&gt;cleanUpAstForPrinting()&lt;/code&gt;, which handles the unresolving and syncing of &lt;code&gt;use&lt;/code&gt; statements. The actual implementation is pretty easy: we find all instances of &lt;code&gt;PhpParser\Node\Stmt\Use_&lt;/code&gt; in both files, then we use our &lt;code&gt;subtractOtherListFromList()&lt;/code&gt; method (which we implemented last time) to find the ones that are in the sample new config but not in the one we're about to print. If we find any, we add them to the AST with &lt;code&gt;array_unshift()&lt;/code&gt;, and we're ready to go.&lt;/p&gt;

&lt;p&gt;Awesome. We've achieved three things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Resolving the classes to their full names before comparing&lt;/li&gt;
&lt;li&gt;"Unresolving" them back to the way they were written orginally before printing out.&lt;/li&gt;
&lt;li&gt;Including any new &lt;code&gt;use&lt;/code&gt; statements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's move on to the second problem: the printing. Can we fix that?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#printing-with-better-formatting"&gt;
  &lt;/a&gt;
  Printing with better formatting
&lt;/h2&gt;

&lt;p&gt;One option I considered was using &lt;a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer"&gt;PHP-CS-Fixer&lt;/a&gt; to reformat the code after printing, but that proved daunting because PHP-CS-Fixer &lt;a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/5728"&gt;doesn't expose an API&lt;/a&gt; to build on.&lt;/p&gt;

&lt;p&gt;Luckily, PHP-Parser includes an &lt;a href="https://github.com/nikic/PHP-Parser/blob/master/doc/component/Pretty_printing.markdown#formatting-preserving-pretty-printing"&gt;alternative printer&lt;/a&gt;, which attempts to preserve the original format of the file when printing.&lt;/p&gt;

&lt;p&gt;To use the printer, we have to change how we &lt;em&gt;parse&lt;/em&gt; the user's config file. Rather than simply calling &lt;code&gt;(new ParserFactory)-&amp;gt;create(ParserFactory::PREFER_PHP7)-&amp;gt;parse($sourceCode);&lt;/code&gt;, now we have to do some more work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$originalAst&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$originalTokens&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getUserOldConfigFileAsAst&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$sourceCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;configFiles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user_old'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="c1"&gt;// 1. Create a new tokenizer (aka "lexer", the component that&lt;/span&gt;
        &lt;span class="c1"&gt;// splits the code into tokens for the parser). &lt;/span&gt;
        &lt;span class="c1"&gt;// This lexer records extra information like where each token starts and ends.&lt;/span&gt;
        &lt;span class="nv"&gt;$lexer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PhpParser\Lexer\Emulative&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="s1"&gt;'usedAttributes'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'comments'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'startLine'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'endLine'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'startTokenPos'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'endTokenPos'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="c1"&gt;// 2. Make sure our parser uses the lexer.&lt;/span&gt;
        &lt;span class="nv"&gt;$parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Parser\Php7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$lexer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// 3. Store the tokens returned by our tokenizer and the AST returned by our parser,&lt;/span&gt;
        &lt;span class="c1"&gt;// so the printer can use them for comparisons later.&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;originalAst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$parser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$sourceCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;originalTokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$lexer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTokens&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// 4. Make a copy of all the nodes using the CloningVisitor, &lt;/span&gt;
        &lt;span class="c1"&gt;// so any modifications we make won't affect the original nodes.&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NodeTraverser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addVisitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NodeVisitor\CloningVisitor&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="c1"&gt;// PS: we still have to do our namespace resolution&lt;/span&gt;
        &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addVisitor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NodeVisitor\NameResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
             &lt;span class="s1"&gt;'preserveOriginalNames'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;]));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;userOldConfigFileAst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$traverser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;originalAst&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;userOldConfigFileAst&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, when we're printing, we pass in the original AST and tokens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;writeNewConfigFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;cleanUpAstForPrinting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$prettyPrinter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PrettyPrinter\Standard&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'shortArraySyntax'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nv"&gt;$astAsText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$prettyPrinter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;printFormatPreserving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;originalAst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;originalTokens&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$configFilePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$configFilePath&lt;/span&gt;&lt;span class="s2"&gt;.bak"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$configFilePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$astAsText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before (default printer)&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qbd55dbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.shalvah.me/store/media/image_12_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qbd55dbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.shalvah.me/store/media/image_12_1.png" alt="" title="before_format_preserving"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;After (format-preserving printer)&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MVSxMGwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.shalvah.me/store/media/image_15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVSxMGwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.shalvah.me/store/media/image_15.png" alt="" title="after_format_preserving"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it works! When we upgrade our config this time, we can see that the &lt;code&gt;strategies&lt;/code&gt; array is printed over multiple lines, as we have in our original user config.&lt;/p&gt;

&lt;p&gt;The format-preserving printer is experimental, so it probably won't be perfect in all cases, but I think it's good enough to go with.&lt;/p&gt;

&lt;p&gt;Finally, let's update our tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reworking-our-tests"&gt;
  &lt;/a&gt;
  Reworking our tests
&lt;/h2&gt;

&lt;p&gt;In the first iteration of the upgrader, our dry run tests made use of a &lt;code&gt;mockUpgraderWithConfigs()&lt;/code&gt; function that mocked the &lt;code&gt;getConfigs()&lt;/code&gt; function to return specific configs. Now that we've switched to parsing code into ASTs, we can't use that anymore. I decided to go with the obvious file-based approach: I'll move the configs to files, and pass the file path to the upgrader, the way it was meant to be used. No need to mock anything. To make things easier, I'll combine all the old configs into one, but separate the new configs by test case.&lt;/p&gt;

&lt;p&gt;For example, let's do the test for detecting added/removed map items. First, we create the old config file (which all the tests will use), which goes in &lt;code&gt;tests/fixtures/old.php&lt;/code&gt; ("fixtures" is a term used to refer to static data used for testing):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'map'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'key_1'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'key_2'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'nested'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'map'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'baa'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'black'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sheep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'and'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'more'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;'list'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'list'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'thing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'other_thing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the sample new config for each test case goes in &lt;code&gt;tests/fixtures/new_samples&lt;/code&gt;. For this case, we'll create &lt;code&gt;added_removed_map.php&lt;/code&gt;. It should be nearly the same as the &lt;code&gt;old.php&lt;/code&gt;, with the difference being the change we plan to test (in this case, adding and removing some map items):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'map'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;// 'key_1' removed&lt;/span&gt;
        &lt;span class="s1"&gt;'key_2'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'key_3'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'added'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Added&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'nested'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'map'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'baa'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'black'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sheep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;// 'and' removed&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;'list'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// Remaining items are same as old config...&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we update the test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/fixtures/old.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"can detect items added to/removed from maps"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$sampleNewConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/fixtures/new_samples/added_removed_map.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;ofConfigFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$sampleNewConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dryRun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toHaveCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;assertArraySubset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CHANGE_ADDED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'map.key_3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CHANGE_REMOVED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'map.key_1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CHANGE_REMOVED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'nested.map.and'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$changes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool. Let's do the test for moved items. We reuse the same &lt;code&gt;old.php&lt;/code&gt; file as the user's old config, and we create a new file for the sample new config (&lt;code&gt;test/fixtures/new_samples/moved.php&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// Other keys same as the old...&lt;/span&gt;
    &lt;span class="s1"&gt;'thing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'new_other_thing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Replaces `other_thing`&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"handles move()d items properly"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$sampleNewConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/fixtures/new_samples/moved.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;ofConfigFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$sampleNewConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'other_thing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'new_other_thing'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dryRun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toHaveCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;assertArraySubset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CHANGE_ADDED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'new_other_thing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CHANGE_MOVED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'other_thing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'new_key'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'new_other_thing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$changes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All good. The rest of the tests follow this pattern, and you can see them &lt;a href="https://github.com/shalvah/upgrader/blob/master/tests/dry_run.test.php"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-some-more-tests"&gt;
  &lt;/a&gt;
  Adding some more tests
&lt;/h2&gt;

&lt;p&gt;We have tests for dry run, now we need some tests for the actual upgrade. I'll add just one test for that, a sort of "God" test that combines the multiple types of changes into one config file, and tests that it is upgraded correctly. Now, I could split them into multiple small tests and files like I did for dry run, but I think that's unnecessary, since dry run and apply follow the same code path. Okay, on to the test.&lt;/p&gt;

&lt;p&gt;First, the fixtures. We'll use the same &lt;code&gt;old.php&lt;/code&gt; as the user's initial config, but this time we'll create a new sample that combines all the different kinds of changes (&lt;code&gt;new_samples/all.php&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'map'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;// `key_1` removed&lt;/span&gt;
        &lt;span class="s1"&gt;'key_2'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'key_3'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'added'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Added&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'nested'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'map'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'baa'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'black'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sheep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;// `and` removed&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;'list'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'new_item_dont_touch'&lt;/span&gt; &lt;span class="c1"&gt;// Added, but should be ignored&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'list'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'black'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'thing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'new_other_thing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Replaces `other_thing`&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, an &lt;code&gt;expected.php&lt;/code&gt; that contains the final config file we expect (when the changes from &lt;code&gt;all.php&lt;/code&gt; are applied to &lt;code&gt;old.php&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'map'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'key_2'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'key_3'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'added'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'nested'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'map'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'baa'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'black'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sheep'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;'list'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'list'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'baa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'black'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'thing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'new_other_thing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, finally, the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/fixtures/old.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"works as expected"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$configFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sys_get_temp_dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'/config.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$configFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$sampleNewConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/fixtures/new_samples/all.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nc"&gt;Upgrader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;ofConfigFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$configFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$sampleNewConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'other_thing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'new_other_thing'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;dontTouch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'nested.list'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sys_get_temp_dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'/config.php.bak'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toBeFile&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sys_get_temp_dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'/config.php.bak'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userOldConfig&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nv"&gt;$upgradedConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$configFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$expectedConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/fixtures/expected.php'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$upgradedConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$upgradedConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$expectedConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expectedConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$upgradedConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$expectedConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we copy the &lt;code&gt;old.php&lt;/code&gt; fixture to a temporary location so we don't overwrite it during the upgrade (since other tests make use of it too). Then we run the upgrade. After the upgrade, we make our assertions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We check that the old config was backed up correctly&lt;/li&gt;
&lt;li&gt;Then we test that the new config matches what we expect. Note that we have to replace any uses of &lt;code&gt;\r\n&lt;/code&gt; (Windows newlines) with &lt;code&gt;\n&lt;/code&gt; (newlines used in the generated code), so we don't get any false mismatches.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And we're good!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; pest --stop-on-failure --coverage

   PASS  Tests\applytest
  ✓ it works as expected

   PASS  Tests\dryruntest
  ✓ it can detect items added to/removed from maps
  ✓ it ignores maps marked as dontTouch()
  ✓ it can detect items added to lists
  ✓ it ignores lists marked as dontTouch()
  ✓ it handles move()d items properly
  ✓ it properly handles class name constants written differently

  Tests:  7 passed
  Time:   0.61s

  Cov:    100.00%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I've said earlier, testing is an inexact science; there's no formula for what or how to test. A lot of it is down to your judgment. Frankly, I'm not entirely satisfied with this test suite, but I think it does the job for now, so I'll move on, and add more tests as I encounter more real-world scenarios.&lt;/p&gt;

</description>
      <category>php</category>
    </item>
    <item>
      <title>JS - Mocking a GraphQL API with GraphQL Faker</title>
      <author>Pablo Veiga</author>
      <pubDate>Fri, 30 Jul 2021 13:01:13 +0000</pubDate>
      <link>https://dev.to/vcpablo/js-mocking-a-graphql-api-with-graphql-faker-25i5</link>
      <guid>https://dev.to/vcpablo/js-mocking-a-graphql-api-with-graphql-faker-25i5</guid>
      <description>&lt;p&gt;Mock API's are very useful when you need to "hit the ground running" with the front-end of a project. There are times when we need to have something visual to validate an idea with a client or to move forward with the interface while the back end is still being built.&lt;/p&gt;

&lt;p&gt;Two weeks ago I published another article about it, explaining &lt;a href="https://dev.to/vcpablo/js-mocking-a-rest-api-with-json-server-368"&gt;how to mock a REST API using JSON Server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;This time I'm going to write about how to mock a &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; API using &lt;a href="https://github.com/APIs-guru/graphql-faker"&gt;GraphQL Faker&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;p&gt;Assuming you already know the basics of how GraphQL works, I'm not going to dive deep into its details. But, just to contextualize this article, according to &lt;a href="https://graphql.org/"&gt;GraphQL official website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Apps using GraphQL are fast and stable because they control the data they get, not the server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#mocking-a-graphql-api"&gt;
  &lt;/a&gt;
  Mocking a GraphQL API
&lt;/h3&gt;

&lt;p&gt;Building a fake GraphQL API is not difficult at all and all you need to do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install &lt;a href="https://github.com/APIs-guru/graphql-faker"&gt;GraphQL Faker&lt;/a&gt; package;&lt;/li&gt;
&lt;li&gt;configure a &lt;code&gt;.graphql&lt;/code&gt; file containing the schema definitions (types, inputs, queries and mutations);&lt;/li&gt;
&lt;li&gt;take advantage of the &lt;a href="https://github.com/marak/Faker.js/"&gt;Faker JS&lt;/a&gt; extension to easily mock contextualized data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#installing-graphql-faker"&gt;
  &lt;/a&gt;
  Installing GraphQL Faker
&lt;/h4&gt;

&lt;p&gt;First, add GraphQL Faker package to your project.&lt;br&gt;
If you need to build a VueJS project but you don't know where to start from, check &lt;a href="https://dev.to/vcpablo/vuejs-one-more-way-of-structuring-your-project-13mj"&gt;this article of mine&lt;/a&gt; where I explain how I structure my new VueJS projects from scratch.&lt;br&gt;
If your project is not going to be written in VueJS (sorry to hear that :(), you may check your favourite JavaScript framework's tutorial page to see how to start a fresh new project with it or even built it from scratch. These are the most common JavaScript ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angular.io/guide/setup-local"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brudhu/creating-my-first-node-js-app-30kk"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Access its root directory and, in a terminal window, execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install graphql-faker --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Notice that we'll use &lt;code&gt;--save-dev&lt;/code&gt; flag to install this dependency only for development since the production version of the application will require the real GraphQL API to work&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configuring-the-schema-types"&gt;
  &lt;/a&gt;
  Configuring the Schema - Types
&lt;/h4&gt;

&lt;p&gt;This is the most important part of building your mocked GraphQL API. By configuring the schema, you will be able to really use the API to return data as you need.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you still don't know how a GraphQL Schema is configured, take a look at &lt;a href="https://graphql.org/learn/schema/"&gt;this link&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's imagine a simple application that needs to display a list of users and details of their respective addresses like street, city and country.&lt;/p&gt;

&lt;p&gt;In this case, we need to create these two &lt;em&gt;types&lt;/em&gt; within our &lt;code&gt;schema.graphql&lt;/code&gt; file. The good thing about GraphQL Faker is that it already provides the &lt;code&gt;@fake&lt;/code&gt; and &lt;code&gt;@examples&lt;/code&gt; directives that allow us to define possible values to be mocked when retrieving data from our mocked API. Check this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;35&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;streetName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;303&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;409&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stateAbbr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obs.: Faker JS provides several different types of fake data that will allow you to create real-world mocked data according to your needs. I'm not sure exactly &lt;a href="https://github.com/marak/Faker.js/#api-methods"&gt;which types&lt;/a&gt; are available to be used along with GraphQL Faker, but most of them are according to some tests I've made.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configuring-the-schema-queriesmutations"&gt;
  &lt;/a&gt;
  Configuring the Schema - Queries/Mutations
&lt;/h4&gt;

&lt;p&gt;After configuring the &lt;code&gt;Types&lt;/code&gt;, we need to set the &lt;code&gt;Queries&lt;/code&gt; and &lt;code&gt;Mutations&lt;/code&gt; to be able to perform operations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Keep in mind that the &lt;code&gt;Mutations&lt;/code&gt; will not create any data anywhere like &lt;a href="https://dev.to/vcpablo/js-mocking-a-rest-api-with-json-server-368"&gt;JSON Server mock API&lt;/a&gt; but they will support you in building the correct inputs the front end will need to send when calling them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When creating a &lt;code&gt;Query&lt;/code&gt; we may define which is the type it should return and also the minimum and maximum size of the array it will return. In the example below, the &lt;code&gt;User&lt;/code&gt; query, the API will return lists containing between 3 and 20 users, randomly each time we call it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;listLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;20)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may also define an &lt;code&gt;input&lt;/code&gt; types and &lt;code&gt;Mutations&lt;/code&gt; to allow your front end to perform these operations without receiving a &lt;code&gt;400&lt;/code&gt; or &lt;code&gt;404&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;Imagine that your application will allow people to create users and their address. So, we need to define, in our Schema a &lt;code&gt;UserInput&lt;/code&gt; and an &lt;code&gt;AddressInput&lt;/code&gt; (you may call it whatever you prefer) to be used in the mocked Mutation we'll create later:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddressInput&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddressInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating the inputs properly, we can define our mutation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#running-graphql-faker"&gt;
  &lt;/a&gt;
  Running GraphQL Faker
&lt;/h4&gt;

&lt;p&gt;In order to test the mocked API you've just created, first we need to include a new &lt;code&gt;script&lt;/code&gt; into our &lt;code&gt;package.json&lt;/code&gt; file like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"mock:api"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"graphql-faker ./schema.graphql"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, all you need to do is run the command on a terminal using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run mock:api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By running it you will see the following information:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ejsMUmf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n8pw8d7evoybzf6xzh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ejsMUmf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n8pw8d7evoybzf6xzh2.png" alt="Running GraphQL Faker mock API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The three links are:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#interactive-editor"&gt;
  &lt;/a&gt;
  Interactive Editor
&lt;/h5&gt;

&lt;p&gt;A text editor where you can update your schema&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MCOmuBFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkpfdcr4nkqusj8mc2d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MCOmuBFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkpfdcr4nkqusj8mc2d3.png" alt="GraphQL Schema Interactive Editor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#graphql-api"&gt;
  &lt;/a&gt;
  GraphQL API
&lt;/h5&gt;

&lt;p&gt;A playground where you can test all of your queries and mutations and also check all of the types defined in the schema.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OScjN81w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpr9i3vtgm00yufqrn5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OScjN81w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpr9i3vtgm00yufqrn5f.png" alt="GraphQL Playground"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#voyager"&gt;
  &lt;/a&gt;
  Voyager
&lt;/h5&gt;

&lt;p&gt;An interactive graph representation of your schema&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nvsIHSOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9w4a0pgo0jlxxs9n820.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nvsIHSOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9w4a0pgo0jlxxs9n820.png" alt="GraphQL Voyager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The ports may defer. If you want to define a specific port to use the GraphQL Faker, you may define it in the script in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;It&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"mock:api"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"graphql-faker --port 4000 ./schema.graphql"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#testing-graphql-faker-api"&gt;
  &lt;/a&gt;
  Testing GraphQL Faker API
&lt;/h4&gt;

&lt;p&gt;Access the &lt;strong&gt;GraphQL API&lt;/strong&gt; address (&lt;a href="http://localhost:PORT/graphql"&gt;http://localhost:PORT/graphql&lt;/a&gt;) and try out your query and check the full (and interactive) documentation of your schema :).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/e2239a80be6e4d7b99d3c4e75de89884"&gt;&lt;br&gt;
    GraphiQL Playground - Watch Video&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0XBKWkQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.loom.com/sessions/thumbnails/e2239a80be6e4d7b99d3c4e75de89884-with-play.gif"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You can find a simple and fully functional project similar to what we've built together in this article at &lt;a href="https://github.com/vcpablo/graphql-mock-api"&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#considerations"&gt;
  &lt;/a&gt;
  Considerations
&lt;/h3&gt;

&lt;p&gt;If you got until this point, it means you've read the last piece of text from a series of 16 articles, published weekly since April 6th, when I decided to write about &lt;a href="https://dev.to/vcpablo/vuejs-2-different-ways-to-implement-v-model-1mjf"&gt;Different ways of implementing v-model (in VueJS)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The inspiration came after reading an article that said that "every developer should write". Unfortunately, this article is no longer available on the internet but its message was transmitted.&lt;/p&gt;

&lt;p&gt;I'm not sure if I'll keep writing and, if I decide so, I don't know how frequently, but the most important thing is that I achieved my personal goal: 1 published article per week along 16 weeks in a row.&lt;/p&gt;

&lt;p&gt;During this period three of my articles were delivered in &lt;a href="https://vuejsdevelopers.com/newsletter/"&gt;one of the biggest VueJS newsletters&lt;/a&gt; around the world and one person reached out to me with an international job offer.&lt;/p&gt;

&lt;p&gt;You can see more about these stories in my &lt;a href="https://linkedin.com/in/pablo-veiga"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow me here, if you still do not and I'll bring you news soon!&lt;br&gt;
Thanks for all of the support!&lt;/p&gt;

&lt;p&gt;Comment and share!&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using multiple GNU/Linux at the same time-Bedrock Linux</title>
      <author>nuh yurduseven</author>
      <pubDate>Fri, 30 Jul 2021 12:55:47 +0000</pubDate>
      <link>https://dev.to/noaahhh/using-multiple-gnu-linux-at-the-same-time-bedrock-linux-3fj6</link>
      <guid>https://dev.to/noaahhh/using-multiple-gnu-linux-at-the-same-time-bedrock-linux-3fj6</guid>
      <description>&lt;p&gt;Hello, in this article, I will talk about Bedrock Linux, which is a daemon that allows to use software packages from more than one package manager, while also installing and using multiple distributions in layers. Although it is described as a separate Linux distribution, we can say that it is a daemon that connects the distributions installed to the root directory and then installed in layers, to the root directory. This is a system that allows to use multiple different software packages together with a very useful and customizable architecture.&lt;/p&gt;

&lt;p&gt;In order to understand this architecture, I will first talk about the linux system hierarchy. Next, I'll review the bedrock Linux hierarchy and simply explain how to install and use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linux-system-hierarchy"&gt;
  &lt;/a&gt;
  Linux System Hierarchy
&lt;/h3&gt;

&lt;p&gt;Linux is an operating system kernel with a Unix-like design. The kernel is designed by Linus Torvalds and is still developing it as open source. The latest kernel version is Linux 5.14. and available at the link. Linus Torvalds also owns the git project, a source code management and version control software. Named in 1991, this monolithic kernel is widely used in operating systems used by supercomputers, personal or mobile devices. For example, Android, Debian, RHEL(Red Hat Enterprise Linux), CentOS are examples of GNU/Linux distributions. Especially Debian and Debian-based distributions, RHEL and RHEL-based distributions are frequently used as server operating systems.&lt;br&gt;
Linux and Unix are monolithic kernels. Monolithic kernels occupy a larger area than microkernels. Essentially, operating systems using Monolithic kernels run all operating system functions in "kernel mode", that is, kernel space. Each process is in separate address spaces. Kernel and OS services are in the same address space. Processes can request service from the kernel. This creates a layer of security between the kernel and applications. It also provides high speed as there will be no message traffic. However, a change to the kernel requires recompilation and the kernel code can become quite complex. In systems using microkernel, "kernel mode" takes up less space. System services such as the file system, virtual memory manager, and CPU scheduler are in the "user mode" area on the kernel, and each has its own address space. Applications also have their own address space. Such cores are customizable and easily expandable. In Microkernel, a fault in a component does not affect the whole system thanks to the system architecture. In this respect, we can describe this architecture as durable. However, in case of an error in monolithic systems, the whole system will be affected because the services are interconnected. But it has a clear advantage over monolithic architecture in terms of speed. Examples of microkernels are symbian, minix, GNU. Most Linux distributions are not actually a Linux project, but rather a GNU project. Because linux is just a kernel and it makes up a very small part of the whole system. Hybrid architectures, on the other hand, are a combination of the good features of monolithic and microkernels, thereby reducing weaknesses. They keep more code in the kernel space. Communication units and many drivers are embedded in the kernel area. However, when a new component is added, it does not require recompilation as in monolithic architecture. For example, Darwin and macos kernel XNU, BSD-based freeBSD, windows NT are coded in this architecture. Modern operating systems prefer this architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FXBqcJ3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20g5ipx99ugostjyktbi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FXBqcJ3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20g5ipx99ugostjyktbi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt; : &lt;a href="https://en.wikipedia.org/wiki/Monolithic_kernel"&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#init-system"&gt;
  &lt;/a&gt;
  Init System
&lt;/h4&gt;

&lt;p&gt;It is the ancestor process on a GNU/Linux system. It takes 1 as pid and after the kernel is loaded, it is decided which runlevel the system will start with by checking the runlevels in /etc/inittab in modes such as windows or safemod that we are used to from macos. Runlevels can be seen in the figure below. As seen in the inittab file in Centos7 system, 0 halt, 1 single usermode, 2 multiuser etc. is being used. 3, ie Full multiuser mode, is used by default as initdefault. After init is started, other processes are started in the appropriate order and in the mode used under /etc/rc.d/init.d. For example, udev , apache, preload services can be started after init. This is used like /etc/rc.d/init.d/init3.d/S100preload. init3.d is in 3rd mode and S100 indicates that preload will be started in 100th order.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xg_nR0FO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bip1tkh9kzezqnrbiati.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xg_nR0FO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bip1tkh9kzezqnrbiati.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This structure is not preferred in today's GNU/Linux distributions. In most of them, systemd, which was written in 2010, comes by default. It is also used in new generation structures such as runit, OpenRC, Upstart. The old build is the SysV init system. In new structures, there are features such as starting processes in parallel, automatically starting the process that a process needs, automatic restarting if the process terminates. Systemd is a slightly slower init system than others. The system with the fastest boot time among them is Runit and it is cross platform. Available on GNU/linux, Solaris, Macos X.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#file-system-and-directory-hiearchy"&gt;
  &lt;/a&gt;
  File System and Directory Hiearchy
&lt;/h4&gt;

&lt;p&gt;The file system is a markup structure on the disk that allows the operating system to find the file. GNU/Linux distributions usually use ext2–3–4 journaling systems. It can also find file traces on NTFS, the windows file system. Everything is a file and designed in a hierarchical order in directories. Files, drivers, executables, libraries are located in these directories. This directory structure can be seen in the figure below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWJDNhbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye60yom2xkt68spmmfyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWJDNhbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye60yom2xkt68spmmfyt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In normal use, we can say that the most used directories are /var, /lib, /usr and /home. In addition, directories branch themselves into trees. For example, the /usr directory contains the /usr/bin directory with binary files. Or the directory /var/lib is available under /var. &lt;strong&gt;/bin&lt;/strong&gt; directory is loaded at boot and contains basic commands. &lt;strong&gt;/sbin&lt;/strong&gt; contains binary files that provide system information or make changes. &lt;strong&gt;/lib&lt;/strong&gt; contains shared libraries, &lt;strong&gt;/media&lt;/strong&gt; contains removable disks, &lt;strong&gt;/mnt&lt;/strong&gt; contains new mounted filesystem, &lt;strong&gt;/var&lt;/strong&gt; contains variables. The &lt;strong&gt;/home&lt;/strong&gt; directory contains users' private files. &lt;strong&gt;/etc&lt;/strong&gt; contains configuration files. The &lt;strong&gt;/boot&lt;/strong&gt; directory contains the bootloader and some core files, such as grub, lilo, related to system boot. These directories can be divided into different partitions and connected to the system. This is a widely used method. For example, when the home directory is installed on a partition separate from root, the programs installed in the users' files and user directory are not deleted when the system is reinstalled or a different GNU/Linux distribution is installed. Bedrock Linux designers have developed a different model on this hierarchy.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bedrock-linux"&gt;
  &lt;/a&gt;
  Bedrock Linux
&lt;/h3&gt;

&lt;p&gt;Bedrock Linux is a productivity-oriented daemon that aims to use modules from many distributions, defined as a meta-distribution, together in a single operating system. In other words, you can work on debian and use pacman or AUR package managers and packages from arch linux. You can use libraries in different operating systems and fonts installed in different systems for different programming. This system also has some bugs. It is currently progressing above 0.7 poki minor. In addition, it cannot be said that it is security-oriented. This system is very useful for users who want to benefit from the power of not only a single system, but also many systems, and who want to use more than one package manager, different packages or different init systems at the same time. You can check it from the &lt;a href="https://bedrocklinux.org/index.html"&gt;link&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The system is very simple to use. Once the Strata concept is well understood, it is quite easy to adapt for an advanced user. After a shell script is downloaded from Github, it is started as root and you will be asked to confirm the action you want to do, as a warning that the actions cannot be reversed. It then takes the distribution in your root directory and moves it to a stata under /bedrock. You can integrate other distributions into your system with the &lt;strong&gt;brl&lt;/strong&gt; command. You can also configure your system in bedrock.conf file. It is located under /etc/becrock. &lt;strong&gt;brl apply&lt;/strong&gt; is used to apply the changes. Community side usage rates are given on the official page of Bedrock linux (&lt;a href="https://bedrocklinux.org/0.7/distro-compatibility.html"&gt;link&lt;/a&gt;). Generally, you have a low error rate for frequently used distributions. For example debian,ubuntu,centos,arch are used quite often and there are no known problems. But many problems have been reported in different distributions such as clear linux, nixOS. The concept of Strata will be discussed in the next section.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#strata"&gt;
  &lt;/a&gt;
  Strata
&lt;/h4&gt;

&lt;p&gt;Bedrock installs each distribution on one layer, establishing a communication bridge between them and providing the appropriate environment for other inter-use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brl fetch &lt;span class="nt"&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the command, distributions that can be used as stratum can be seen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brl fetch void
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this command void linux startum can be created. It has the void linux runit init system. When Bedrock init interface comes, you can see it as void:runit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;strat &lt;span class="nt"&gt;-r&lt;/span&gt; debian neofetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the command is used, the neofetch package in debian stratum will run and see debian as the root directory. It outputs debian as os-release. But when neofetch is used directly, bedrock linux will be seen as os-release. Occurs when build tools scan the environment and find dependencies from different distributions. In case of confusion due to the bedrock environment like this, inter layer hooks can be bypassed using the &lt;strong&gt;restrick -r&lt;/strong&gt; parameter. If you are using two distributions with the same package manager, for example apt and rpm are the most used package managers, then you can start ubuntu as apt. Such an application may be needed because the source repos are different.&lt;/p&gt;

&lt;p&gt;If a package exists in more than one startum then it will be executed in “pinned” stratum. You can check this with &lt;strong&gt;brl which&lt;/strong&gt; . All layers can see /run , /temp , /home directories as global file path.&lt;/p&gt;

&lt;p&gt;You can enable-disable some stratums if needed. You can use the &lt;strong&gt;brl enable/disable&lt;/strong&gt; command. You can use the &lt;strong&gt;brl remove -d&lt;/strong&gt; command to delete Stratum directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brl remove &lt;span class="nt"&gt;-d&lt;/span&gt; fedora
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#installation-use-and-review"&gt;
  &lt;/a&gt;
  Installation, Use and Review
&lt;/h4&gt;

&lt;p&gt;In this section, some topics such as how to create and configure some startums by installing bedrock on ubuntu-based virtual linux lite in virtualbox, how to install package software will be explained. You can choose in a different distribution. In particular, distributions that have not undergone major changes based on common or frequently used distributions can run smoothly. For installation, you can download the script suitable for the CPU architecture from the link. First of all, daemon installation should be done by running bedrock shell script as root user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGX56pzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bgknqwgs8b4ea82si4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGX56pzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bgknqwgs8b4ea82si4z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Not reversable!” By typing you agree to these terms and installation begins. Before the installation, the os in the root is taken to a temporary location. Then bedrock is installed on root and the os in the temporary location is installed in a layer. After the process is finished, you can see the init selection textmode interface with reboot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0Ov5LSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvldwsqq7fyuwy69jiqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0Ov5LSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvldwsqq7fyuwy69jiqw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, the system is booted from the system marked with "*". /sbin/init points to /usr/lib/systemd/systemd here. Systemd services are started and system boot is provided. When ubuntu is booted, processes named crossfs and etcfs are file systems for moving files, libraries, fonts between layer boundaries. In addition, the paths containing the stratum binary files are added to the PATH variable. This way bash or any shell&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mG2J9fjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvi22k93jmb0q1xxa1to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mG2J9fjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvi22k93jmb0q1xxa1to.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am installing the neofetch package on Ubuntu. You can install it from the ubuntu apt repos. Then, when I use the neofetch command, the base system appears as bedrock. To run neofetch in Ubuntu startum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;strat &lt;span class="nt"&gt;-r&lt;/span&gt; ubuntu neofetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;command should be used. With restrict cross-startum hooks are disabled. This way neofetch will only work in ubuntu stratum.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88iz0rjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93jgn2d8zqiwcnrivrhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88iz0rjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93jgn2d8zqiwcnrivrhb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create another startum,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brl fetch &lt;span class="nt"&gt;--list&lt;/span&gt; 
alpine
&lt;span class="nb"&gt;arch&lt;/span&gt;
...
...
&lt;span class="nv"&gt;$ &lt;/span&gt;brl fecth void
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check the distros out with the command. Then it is downloaded and installed from stratum mirror with &lt;strong&gt;brl fetch&lt;/strong&gt;. For example, for void linux using runit, after the packages are pulled, void can be seen in the init menu. When &lt;strong&gt;strat -r void neofect&lt;/strong&gt; is run again, it will warn that the package is not present. Because there are no hooks in between, it cannot reach the neofetch package in ubuntu startum. In this stratum, the package is installed and run with &lt;strong&gt;sudo xbps-install neofetch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are both ubuntu and void startums in the system. Here the xbps package manager and apt package manager can be used jointly. E.g&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;xbps-install filezilla 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;via this command , Filezilla can be installed and run in ubuntu stratum. The opposite is also true. For example, in Arch linux startum, you can install a package from AUR packages and access it from other startums. For this, git can be installed with pacman and the spring helper software can be installed from the github repo. With &lt;strong&gt;yay -Sy brave&lt;/strong&gt; a package belonging to arch stratum can be used by all stratums.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EpO74O9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e557bb5c3589ofhq0lal.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EpO74O9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e557bb5c3589ofhq0lal.gif" alt="filezilla on void stratum "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next system startup, there are three options for init selection. Besides arch and ubuntu using systemd, void linux uninit system using runit can be used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GuW6TtRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ianxoi2qryi9ylzgjf49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GuW6TtRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ianxoi2qryi9ylzgjf49.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;System-related settings can be made in the &lt;strong&gt;bedrock.conf&lt;/strong&gt; file. For example, the default init can be changed, the timeout period can be shortened, the directory where the fonts are located or the priority settings between the stratums can be made. Mirror servers can be changed for &lt;strong&gt;"brl fetch"&lt;/strong&gt;. For detailed information, you can use this &lt;a href="https://bedrocklinux.org/0.7/configuration.html"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This system is completely productivity-oriented. There may be some security related problems.The official page has some answers for those who have security concerns.&lt;br&gt;
However, if security is at the forefront for you and the features of multiple distributions are desired to be used together, it is more appropriate to use distributions such as Qubes.Qubes virtualizes each OS to the next level. It is a system that aims to provide security through isolation. It recommends Whonix by default, but you can also install windows or fedora, debian. Safety and productivity/speed are two conflicting concepts here. I think this distro is a meta distro to be used by distro-hoopers after major 1.0.0 release. Even this version is free from many problems and lives a very stable user experience.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bedrock</category>
      <category>gnu</category>
      <category>systems</category>
    </item>
    <item>
      <title>Top python projects of last year!</title>
      <author>Code_Jedi</author>
      <pubDate>Fri, 30 Jul 2021 12:46:11 +0000</pubDate>
      <link>https://dev.to/code_jedi/top-python-projects-of-last-year-2e56</link>
      <guid>https://dev.to/code_jedi/top-python-projects-of-last-year-2e56</guid>
      <description>&lt;h2&gt;
  &lt;a href="#heres-a-compilation-of-the-most-popular-python-projects-of-last-year"&gt;
  &lt;/a&gt;
  Here's a compilation of the most popular python projects of last year!
&lt;/h2&gt;




&lt;ul&gt;
&lt;li&gt;A terminal based stock analysis tool written completely in python:
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/GamestonkTerminal"&gt;
        GamestonkTerminal
      &lt;/a&gt; / &lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal"&gt;
        GamestonkTerminal
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A FOSS alternative to Bloomberg Terminal.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/deaeb2111d8b10ebe4951a129de7499c9404193c1a19eebf89d3542e00b4c24f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f47616d6573746f6e6b5465726d696e616c2f47616d6573746f6e6b5465726d696e616c2e7376673f7374796c653d666f722d7468652d6261646765" alt="Stargazers"&gt;&lt;/a&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/network/members"&gt;&lt;img src="https://camo.githubusercontent.com/e6d1d84a4815279114a84a31952587ac3afaf94135deb1c1e4d47a6f0a1de65f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f47616d6573746f6e6b5465726d696e616c2f47616d6573746f6e6b5465726d696e616c2e7376673f7374796c653d666f722d7468652d6261646765" alt="Forks"&gt;&lt;/a&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/graphs/contributors"&gt;&lt;img src="https://camo.githubusercontent.com/f4f178f6149aea06586d7a08b3deadea9651a5daa82c0f8ca69d96b426c44711/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f47616d6573746f6e6b5465726d696e616c2f47616d6573746f6e6b5465726d696e616c2e7376673f7374796c653d666f722d7468652d6261646765" alt="Contributors"&gt;&lt;/a&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/blob/master/LICENSE.txt"&gt;&lt;img src="https://camo.githubusercontent.com/b6d641c1789c7768700a7e5f48e91538926fa2eda3a92c1def9d05db30b48af0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f47616d6573746f6e6b5465726d696e616c2f47616d6573746f6e6b5465726d696e616c2e7376673f7374796c653d666f722d7468652d6261646765" alt="MIT License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/issues"&gt;&lt;img src="https://camo.githubusercontent.com/3c0e399a290400ec0f0dd044e0bfecc9b87eb21a7c9adf103b09b326a444d3cf/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f47616d6573746f6e6b5465726d696e616c2f47616d6573746f6e6b5465726d696e616c2e7376673f7374796c653d666f722d7468652d626164676526636f6c6f723d626c7565" alt="Issues"&gt;&lt;/a&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/issues?q=is%3Aissue+label%3Atype%3Abug+is%3Aopen"&gt;&lt;img src="https://camo.githubusercontent.com/6f630193b440fbc2a29550936210ba92c25fda97e98e1825f05f177ff1b20f10/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f47616d6573746f6e6b5465726d696e616c2f47616d6573746f6e6b5465726d696e616c2f747970652533416275672e7376673f7374796c653d666f722d7468652d626164676526636f6c6f723d79656c6c6f77" alt="Bugs Open"&gt;&lt;/a&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/issues?q=is%3Aissue+label%3Atype%3Abug+is%3Aclosed"&gt;&lt;img src="https://camo.githubusercontent.com/755348c453be45dba115c075d625b0284cfd565568d4487126717ad41561e3d5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d636c6f7365642f47616d6573746f6e6b5465726d696e616c2f47616d6573746f6e6b5465726d696e616c2f747970652533416275672e7376673f7374796c653d666f722d7468652d626164676526636f6c6f723d73756363657373" alt="Bugs Closed"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZKeXZmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/GamestonkTerminal/GamestonkTerminal/actions/workflows/test.yml/badge.svg%3Fbranch%3Dmain" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/releases"&gt;&lt;img src="https://camo.githubusercontent.com/5bfe557d5798cb26378ed1174c77661026cd75342d1a391218cc49d2291dfdaf/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f47616d6573746f6e6b5465726d696e616c2f47616d6573746f6e6b5465726d696e616c2e7376673f6d61784167653d33363030" alt="GitHub release"&gt;&lt;/a&gt;
&lt;a href="https://github.com/psf/black"&gt;&lt;img src="https://camo.githubusercontent.com/d91ed7ac7abbd5a6102cbe988dd8e9ac21bde0a73d97be7603b891ad08ce3479/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667" alt="Code style: black"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/1f267821594e4cc9a753e460a3750fec544f1d4a6d6a91f2fcc5ebaaf33adf05/68747470733a2f2f646973636f72646170702e636f6d2f6170692f6775696c64732f3833313136353738323735303738393637322f7769646765742e706e673f7374796c653d736869656c64"&gt;&lt;img src="https://camo.githubusercontent.com/1f267821594e4cc9a753e460a3750fec544f1d4a6d6a91f2fcc5ebaaf33adf05/68747470733a2f2f646973636f72646170702e636f6d2f6170692f6775696c64732f3833313136353738323735303738393637322f7769646765742e706e673f7374796c653d736869656c64" alt="Discord Shield"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/gamestonkt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/db5f3c80b458cd0f27303941d5d2510e74db215d68edebfa7a9ee0a6e67bfdd1/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f67616d6573746f6e6b742e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343067616d6573746f6e6b74" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkE010ho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/images/gst_logo_lockup_rGreen_with_letters.png" alt="Logo" width="800" height="276"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Gamestonk Terminal 🚀
&lt;/h3&gt;
  &lt;p&gt;
    The next best thing after Bloomberg Terminal. #weliketheterminal
    &lt;br&gt;
    &lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/blob/main/ROADMAP.md"&gt;&lt;strong&gt;≪  ROADMAP&lt;/strong&gt;&lt;/a&gt;
      ·  
    &lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/tree/main/gamestonk_terminal/README.md"&gt;&lt;strong&gt;FEATURES »&lt;/strong&gt;&lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=%5BBug%5D"&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=enhancement.md&amp;amp;title=%5BIMPROVE%5D"&gt;Suggest Improvement&lt;/a&gt;
    ·
    &lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/issues/new?assignees=&amp;amp;labels=new+feature&amp;amp;template=feature_request.md&amp;amp;title=%5BFR%5D"&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;

  &lt;h2&gt;
Table of Contents&lt;/h2&gt;
  &lt;ol&gt;
    &lt;li&gt; &lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#about-the-project"&gt;About The Project&lt;/a&gt; &lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#donation"&gt;Donation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;
      &lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#getting-started"&gt;Getting Started&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#install"&gt;Install&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#advanced-user-install---machine-learning"&gt;Advanced User Install - Machine Learning&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#update-terminal"&gt;Update Terminal&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#api-keys"&gt;API Keys&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#disclaimer"&gt;Disclaimer&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#contacts"&gt;Contacts&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/GamestonkTerminal/GamestonkTerminal/main/#acknowledgments"&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;

&lt;h2&gt;
About The Project&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How it started:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gamestonk Terminal is an awesome stock and crypto market terminal that has been developed for fun, while I saw my GME shares tanking. But hey, I like the stock 💎🙌.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it's going:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gamestonk Terminal provides a modern Python-based integrated environment for investment research, that allows the average joe retail trader to leverage state-of-the-art Data Science and Machine Learning technologies.&lt;/p&gt;
&lt;p&gt;As a modern Python-based environment, GamestonkTerminal opens access to numerous Python data libraries in Data Science (Pandas, Numpy, Scipy, Jupyter), Machine Learning (Pytorch, Tensorflow, Sklearn, Flair), and Data Acquisition (Beautiful Soup, and…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/GamestonkTerminal/GamestonkTerminal"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;A Smart, Automatic, Fast and Lightweight Web Scraper for Python:
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/alirezamika"&gt;
        alirezamika
      &lt;/a&gt; / &lt;a href="https://github.com/alirezamika/autoscraper"&gt;
        autoscraper
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Smart, Automatic, Fast and Lightweight Web Scraper for Python
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
AutoScraper: A Smart, Automatic, Fast and Lightweight Web Scraper for Python&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/17881612/91968083-5ee92080-ed29-11ea-82ec-d99ec85367a5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOAiLxGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17881612/91968083-5ee92080-ed29-11ea-82ec-d99ec85367a5.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This project is made for automatic web scraping to make scraping easy
It gets a url or the html content of a web page and a list of sample data which we want to scrape from that page. &lt;strong&gt;This data can be text, url or any html tag value of that page.&lt;/strong&gt; It learns the scraping rules and returns the similar elements. Then you can use this learned object with new urls to get similar content or the exact same element of those new pages.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;It's compatible with python 3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install latest version from git repository using pip:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;$ pip install git+https://github.com/alirezamika/autoscraper.git&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Install from PyPI:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;$ pip install autoscraper&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Install from source:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;$ python setup.py install&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
How to use&lt;/h2&gt;
&lt;h3&gt;
Getting similar results&lt;/h3&gt;
&lt;p&gt;Say we want to fetch all related post titles in a stackoverflow page:&lt;/p&gt;
&lt;div class="highlight highlight-source-python position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s1"&gt;autoscraper&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/alirezamika/autoscraper"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;A python project that lets you quickly fetch your WiFi password and if needed, generate a QR code of your WiFi to allow phones to easily connect to it!
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sdushantha"&gt;
        sdushantha
      &lt;/a&gt; / &lt;a href="https://github.com/sdushantha/wifi-password"&gt;
        wifi-password
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Quickly fetch your WiFi password and if needed, generate a QR code of your WiFi to allow phones to easily connect
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
wifi-password
&lt;/h1&gt;
&lt;p&gt;
Quickly fetch your WiFi password and if needed, generate a QR code of your WiFi to allow phones to easily connect
&lt;br&gt;
Works on &lt;b&gt;macOS&lt;/b&gt; and &lt;b&gt;Linux&lt;/b&gt;, &lt;b&gt;Windows&lt;/b&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/sdushantha/wifi-password/master/images/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jLeFFI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/sdushantha/wifi-password/master/images/demo.gif"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;h3&gt;
Install using &lt;code&gt;pip&lt;/code&gt;
&lt;/h3&gt;
&lt;div class="highlight highlight-text-shell-session position-relative js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-s1"&gt;python3 -m pip install --user wifi-password&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Install using &lt;code&gt;git&lt;/code&gt;
&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/sdushantha/wifi-password
$ cd wifi-password
$ python3 setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
Install using the &lt;a href="https://aur.archlinux.org/packages/wifi-password/" rel="nofollow"&gt;AUR&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight highlight-text-shell-session position-relative js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-s1"&gt;sudo pamac build wifi-password&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;div class="highlight highlight-text-shell-session position-relative js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-s1"&gt;wifi-password --help&lt;/span&gt;
&lt;span class="pl-c1"&gt;usage: wifi_password [options]&lt;/span&gt;

&lt;span class="pl-c1"&gt;optional arguments:&lt;/span&gt;
&lt;span class="pl-c1"&gt;  -h, --help            show this help message and exit&lt;/span&gt;
&lt;span class="pl-c1"&gt;  --show-qr, -show      Show a ASCII QR code onto the terminal/console&lt;/span&gt;
&lt;span class="pl-c1"&gt;  --save-qr [PATH], -save [PATH]&lt;/span&gt;
&lt;span class="pl-c1"&gt;                        Create the QR code and save it as an image&lt;/span&gt;
&lt;span class="pl-c1"&gt;  --ssid SSID, -s SSID  Specify a SSID that you have previously connected to&lt;/span&gt;
&lt;span class="pl-c1"&gt;  --version             Show version number&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This project is an improvement of &lt;a href="https://github.com/rauchg/wifi-password"&gt;wifi-password&lt;/a&gt; created by &lt;a href="https://github.com/rauchg"&gt;@rauchg&lt;/a&gt;, where I have added support for multiple platforms and have added the feature for generating QR codes.&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sdushantha/wifi-password"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;A terminal based python project that easily lets you identify emails, IP addresses, and more. Feed it a .pcap file or some text and it'll tell you what it is!
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bee-san"&gt;
        bee-san
      &lt;/a&gt; / &lt;a href="https://github.com/bee-san/pyWhat"&gt;
        pyWhat
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🐸   Identify anything. pyWhat easily lets you identify emails, IP addresses, and more. Feed it a .pcap file or some text and it'll tell you what it is! 🧙‍♀️
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/bee-san/pyWhat/main/images_for_README/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9Z8lMDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bee-san/pyWhat/main/images_for_README/logo.png"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;➡️ &lt;a href="http://discord.skerritt.blog" rel="nofollow"&gt;Discord&lt;/a&gt; ⬅️&lt;br&gt;
&lt;i&gt;The easiest way to identify anything&lt;/i&gt;&lt;br&gt;
&lt;code&gt;pip3 install pywhat &amp;amp;&amp;amp; pywhat --help&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;a href="http://discord.skerritt.blog" rel="nofollow"&gt;&lt;img alt="Discord" src="https://camo.githubusercontent.com/73633b0c649cf5f6619dc9a1ca6834becf4c9c7461077b7bb92f9ff6cf14d28c/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f373534303031373338313834333932373034"&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/pywhat/" rel="nofollow"&gt;&lt;img alt="PyPI - Downloads" src="https://camo.githubusercontent.com/5a6bb1e5fac4f5be2edf3d2bc54bb020c6c1b1744142b6f2a0e0fc441af239dd/68747470733a2f2f706570792e746563682f62616467652f7079776861742f6d6f6e7468"&gt;&lt;/a&gt;  &lt;a href="https://twitter.com/bee_sec_san" rel="nofollow"&gt;&lt;img alt="Twitter Follow" src="https://camo.githubusercontent.com/e99ca3a1c1e62d488dfe82fe7d78dce3ab218cee66ac37c2f9c63aac925d40f4/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6265655f7365635f73616e3f7374796c653d736f6369616c"&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/pywhat/" rel="nofollow"&gt;&lt;img alt="PyPI - Python Version" src="https://camo.githubusercontent.com/42f9e2d2c82eb0e3be05318cbafecce73fdc46945b2f99064ec967689f84b0c4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707977686174"&gt;&lt;/a&gt; &lt;a href="https://pypi.org/project/pywhat/" rel="nofollow"&gt;&lt;img alt="PyPI" src="https://camo.githubusercontent.com/58bb5ef6403974c09f55ad88dd129b9e035ad97a9dd28a536018d4730fe450d2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707977686174"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
🤔 &lt;code&gt;What&lt;/code&gt; is this?&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/bee-san/pyWhat/main/images_for_README/main_demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0TZywXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/bee-san/pyWhat/main/images_for_README/main_demo.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Imagine this: You come across some mysterious text 🧙‍♂️ &lt;code&gt;0x52908400098527886E0F7030069857D2E4169EE7&lt;/code&gt; or &lt;code&gt;dQw4w9WgXcQ&lt;/code&gt; and you wonder what it is. What do you do?&lt;/p&gt;
&lt;p&gt;Well, with &lt;code&gt;what&lt;/code&gt; all you have to do is ask &lt;code&gt;what "0x52908400098527886E0F7030069857D2E4169EE7"&lt;/code&gt; and &lt;code&gt;what&lt;/code&gt; will tell you!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;what&lt;/code&gt;'s job is to &lt;strong&gt;identify &lt;em&gt;what&lt;/em&gt; something is.&lt;/strong&gt; Whether it be a file or text! Or even the hex of a file! What about text &lt;em&gt;within&lt;/em&gt; files? We have that too! &lt;code&gt;what&lt;/code&gt; is recursive, it will identify &lt;strong&gt;everything&lt;/strong&gt; in text and more!&lt;/p&gt;
&lt;h1&gt;
⚙ Use Cases&lt;/h1&gt;
&lt;h2&gt;
🦠 Wannacry&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/bee-san/pyWhat/main/images_for_README/wantocry_demo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibi3Oz26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bee-san/pyWhat/main/images_for_README/wantocry_demo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You come across a new piece of malware called WantToCry. You think back to Wannacry and remember it was stopped because a researcher found a kill-switch in the code.&lt;/p&gt;
&lt;p&gt;When a domain, hardcoded into Wannacry, was registered the virus would stop.&lt;/p&gt;
&lt;p&gt;You use &lt;code&gt;What&lt;/code&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bee-san/pyWhat"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;A python project that turns your machine learning code into microservices with web API, interactive GUI, and more!
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ml-tooling"&gt;
        ml-tooling
      &lt;/a&gt; / &lt;a href="https://github.com/ml-tooling/opyrator"&gt;
        opyrator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🪄 Turns your machine learning code into microservices with web API, interactive GUI, and more.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    Opyrator
&lt;/h1&gt;
&lt;p&gt;
    &lt;strong&gt;Turns your Python functions into microservices with web API, interactive GUI, and more.&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;a href="https://pypi.org/project/opyrator/" title="PyPi Version" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/272c89790946c4028499b57358d46655cb3f372f2d24db61e6d1bd61817be908/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f70797261746f723f636f6c6f723d677265656e267374796c653d666c6174"&gt;&lt;/a&gt;
    &lt;a href="https://pypi.org/project/opyrator/" title="Python Version" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/14a43c7823fb8efd21197d933b80deaad49d7e8e0edbc7f9bd453d03ef91acfb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e362532422d626c7565267374796c653d666c6174"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/ml-tooling/opyrator/blob/main/LICENSE" title="Project License"&gt;&lt;img src="https://camo.githubusercontent.com/fd551ba4b042d89480347a0e74e31af63b356b2cac1116c7b80038f41b04a581/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d677265656e2e737667"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/ml-tooling/opyrator/actions?query=workflow%3Abuild-pipeline" title="Build status"&gt;&lt;img src="https://camo.githubusercontent.com/c2476302c2943037b45a397c830b28622d5cf64cc00dccb9195e103dba33efed/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6d6c2d746f6f6c696e672f6f70797261746f722f6275696c642d706970656c696e653f7374796c653d666c6174"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/5042565e9cc3a40bff3d9be7b59955d984831f594d38297b6efecf804e41b8f7/687474703a2f2f6269742e6c792f324d643972784d"&gt;&lt;img src="https://camo.githubusercontent.com/5042565e9cc3a40bff3d9be7b59955d984831f594d38297b6efecf804e41b8f7/687474703a2f2f6269742e6c792f324d643972784d"&gt;&lt;/a&gt;
    &lt;a href="https://twitter.com/mltooling" title="Follow on Twitter" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/994f8690532de6c59d23b878394a15a783e425094ba88cbde0d9ee10f25ee361/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6d6c746f6f6c696e672e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/ml-tooling/opyrator/main/#getting-started"&gt;Getting Started&lt;/a&gt; •
  &lt;a href="https://raw.githubusercontent.com/ml-tooling/opyrator/main/#features"&gt;Features&lt;/a&gt; •
  &lt;a href="https://raw.githubusercontent.com/ml-tooling/opyrator/main/#examples"&gt;Examples&lt;/a&gt; •
  &lt;a href="https://raw.githubusercontent.com/ml-tooling/opyrator/main/#support--feedback"&gt;Support&lt;/a&gt; •
  &lt;a href="https://github.com/ml-tooling/opyrator/issues/new?labels=bug&amp;amp;template=01_bug-report.md"&gt;Report a Bug&lt;/a&gt; •
  &lt;a href="https://raw.githubusercontent.com/ml-tooling/opyrator/main/#contribution"&gt;Contribution&lt;/a&gt; •
  &lt;a href="https://github.com/ml-tooling/opyrator/releases"&gt;Changelog&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Instantly turn your Python functions into production-ready microservices. Deploy and access your services via HTTP API or interactive UI. Seamlessly export your services into portable, shareable, and executable files or Docker images. Opyrator builds on open standards - OpenAPI,  JSON Schema, and Python type hints - and is powered by FastAPI, Streamlit, and Pydantic. It cuts out all the pain for productizing and sharing your Python code - or anything you can wrap into a single Python function.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;Alpha Version: Only suggested for experimental usage.&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/opyrator-header.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVQHhvKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ml-tooling/opyrator/main/docs/images/opyrator-header.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
     Try out and explore various examples in our playground &lt;a href="https://opyrator-playground.mltooling.org" rel="nofollow"&gt;here&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Highlights&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
🪄  Turn functions into production-ready services within seconds.&lt;/li&gt;
&lt;li&gt;
🔌  Auto-generated HTTP API based on FastAPI.&lt;/li&gt;
&lt;li&gt;
🌅  Auto-generated Web UI based on Streamlit.&lt;/li&gt;
&lt;li&gt;
📦  Save…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ml-tooling/opyrator"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;







&lt;p&gt;If you're a beginner who likes discovering new things about python, try &lt;a href="https://rebrand.ly/Python_Weekly"&gt;my weekly python newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" alt="minecraft in python"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#thats-it-for-this-compilation"&gt;
  &lt;/a&gt;
  That's it for this compilation!
&lt;/h4&gt;

&lt;p&gt;Byeeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>github</category>
    </item>
    <item>
      <title>Which Programming Language Is Best for Taxi Dispatch Software Development? </title>
      <author>Johnmarison</author>
      <pubDate>Fri, 30 Jul 2021 12:35:47 +0000</pubDate>
      <link>https://dev.to/johnmarison2/which-programming-language-is-best-for-taxi-dispatch-software-development-11o2</link>
      <guid>https://dev.to/johnmarison2/which-programming-language-is-best-for-taxi-dispatch-software-development-11o2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--99DySesR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppyuwpsvhbhn36wvppj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--99DySesR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppyuwpsvhbhn36wvppj9.png" alt="Alt Text"&gt;&lt;/a&gt;The programming languages are the vocabulary and a bunch of rules that instruct a computer, app, software, web panel, etc. how to work. There have been different languages to choose from. They enable the developers to code programs according to client requirements on a specific digitized platform solution like a mobile app for the business.&lt;/p&gt;

&lt;p&gt;Selecting such an area is much more important to develop taxi dispatch software more advanced and effective to the contemporary market. The highly upgraded programming languages offer notable advantages like quick learning, fast development, enhanced options, simple processes, etc.&lt;/p&gt;

&lt;p&gt;In which, we are going to see the top two program languages, Swift and Java, to develop taxi dispatch software that is too trendy and too achievable to the latest mart.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swift-and-java-in-technology-stack"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Swift and Java in Technology Stack?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Both Swift and Java are different programming languages and are mostly used by developers all around the world. Swift is a high-level language just like Java, it would be used for developing iOS apps while Java for others. Their individual interfaces and protocols are almost the same. Java could be used for different stuff, development purposes, the Android app is one of them. &lt;/p&gt;

&lt;p&gt;As both languages could be used for mobile app development on different OS platforms, they sustain stable connectivity between app development service providers and their clients. Most of the well-known development companies are still using the languages for custom-satisfying app creation services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-part-of-swift-in-the-development-field-today"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The Part of Swift in the Development Field Today?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Being Swift is a fast and efficient language for development, programmers find it great to use for creating iOS business apps. Right from its real-time feedback to seamless incorporation into current Objective-C code, you can quickly provide client-centric apps for real-time startup launching. Utilizing its dynamic library, as a developer,  you can provide your clients decreased app size for upgraded app performance and speedy loading.&lt;/p&gt;

&lt;p&gt;Some winning example apps developed from this easy-to-use and open-source code language are Uber, Lyft, and Airbnb. This cross-platform nature is compatible with Linux too. Its playground offers developers to try new implements and discard when not okay. So, you can immediately import new features as requested by your client from his business plan for workouts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-swift-has-still-evolved-in-taxi-app-development"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How Swift Has Still Evolved in Taxi App Development?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Since Swift was introduced by Apple, it has been evolving and modifying continuously. It is a free and open-source language that could be easily learned by anyone. Its complete upgrading from its version 2.0 to 2.2 to 2.6 to 3.0 to 5 made the programming language great and true to itself. Its improved frameworks like GCD and lib dispatch make concurrent programs too easy at the developers' end.&lt;/p&gt;

&lt;p&gt;Though Swift is highly focused on security, it is widely used for the purpose of data safety. The elimination of specific classes by the high-tech program language solution allows entrepreneurs to provide a secure platform for their app users. Along with much such greatness, the key reason for the language’s mass evolution in the development field is cost-effective solutions could be given to your customers for high productivity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-java-nowadays"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How is Java Nowadays?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Java, the object-oriented programming language, assists you to develop multiple platforms regarding service businesses. While you write programs in this language, the compiled byte code runs in different operating systems (OS) which include Android, Mac OS, Windows, etc. It deduces a lot of its syntax from the C and C++ program languages. Java offers a number of APIs for developing on-demand taxi service apps.&lt;/p&gt;

&lt;p&gt;Because the Java programming language is linked with concepts like class, object, abstraction, inheritance, encapsulation, etc., it allows you to easily develop a pre-made taxi business software solution for business. Its integral portion of design ensures its robust security to the service app usage. The perfect mobile program still holds its ranking in 2nd place on global developers as they use the language in maximum for developing mobile apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-programmers-use-java-the-most"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Do Programmers Use Java the Most?&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java is an easy-to-use open-source while Swift is an upgraded one than the object-oriented programming language. Its design includes write, compile, and debug, making the developers learn development stuff too quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The language is majorly benefitted with its platform-independent ability. The programmers can run the same program in different systems, which allows them to move software smartly from one computing system to another.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As Java is the official development platform for google android apps, utilizing its wide range of libraries and tools, building on-demand business apps is most popular amongst developers. Its modern UI toolkits allow them to attractively set UI elements for captivating app design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java has strong memory management, so the developers can easily handle the exceptions through coding. Furtherly, the type checking boosts the complete developed app for business more secure to the service operations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Its multi-threaded environment lets the developers split a bigger task into a diverse of threads and run individually. So, the advantage of not providing every running thread is covered with the tech stack while developers use the programming language for building taxi dispatch software&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#which-one-is-the-best-for-taxi-dispatch-software-development"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Which One is the Best for Taxi Dispatch Software Development?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;When it comes to an argument on which one  Swift or Java is the best for app development processes, the result would be concluded as both. Both programming languages are important to develop a successful &lt;a href="https://www.spotnrides.com/taxi-dispatch-software"&gt;taxi dispatch software&lt;/a&gt; app supported with multiple OS platforms. &lt;/p&gt;

&lt;p&gt;Consequently, it assists you to provide an achievable app design with the arguable React Native (JS), based on Javascript the app developers offer fundamental building blocks which work in both iOS and the Android platforms. Applying all their advancements, you can build a complete scalable app for businesses apt to the existing taxi service marketplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;App development for business should be comprehended with client expectations, market demands, adaptable solutions, etc. to make the entrepreneurs fully satisfied with your services. Taking it into consideration, as an individual developer/organization/company, making use of both Swift and Java programming languages to build your taxi dispatch software brings mentioned advantages to your service.&lt;/p&gt;

</description>
      <category>java</category>
      <category>technology</category>
      <category>appdevelopment</category>
      <category>swift</category>
    </item>
  </channel>
</rss>
