<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>[Video] Manage configuration and multiple environments in Node.JS with Foal</title>
      <author>Loïc Poullain</author>
      <pubDate>Mon, 10 May 2021 07:22:37 +0000</pubDate>
      <link>https://dev.to/loicpoullain/video-manage-configuration-and-multiple-environments-in-node-js-with-foal-j0m</link>
      <guid>https://dev.to/loicpoullain/video-manage-configuration-and-multiple-environments-in-node-js-with-foal-j0m</guid>
      <description>&lt;p&gt;This tutorial describes how to manage configuration with Foal across one or more environments using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON, YAML and JS files,&lt;/li&gt;
&lt;li&gt;.env files&lt;/li&gt;
&lt;li&gt;and environment variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also explains how to check and convert the types of configuration values.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/e_W8QnImazo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS open source news and updates #67</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 10 May 2021 06:59:30 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-67-1jn0</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-67-1jn0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#may-10th-2021-instalment-67"&gt;
  &lt;/a&gt;
  May 10th, 2021 - Instalment #67
&lt;/h2&gt;

&lt;p&gt;Newsletter #67. &lt;/p&gt;

&lt;p&gt;This week more great open source projects for you to get stuck into. The big news last week was the release in alpha of the new Rust SDK for AWS, so make sure you check that out if you are exploring the world of Rust. We also have a couple of interesting new projects on awslabs, always a great place to explore if you have the time, awsclii a nice little tool that generates groovy ascii graphics as well as some significant updates to some projects I have covered in earlier newsletters. As always AWS and Community blog posts covering Apache Airflow, Apache Kafka, Pixie, Kubernetes, cdk8s and CDK and many more. If you missed out on AWS Container Day at Kubecon, check out the links to the sessions. To finish off we have the usual events and an interesting video on open source documentation.&lt;/p&gt;

&lt;p&gt;Before you dive in, a few short notices you should read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python 2.7 in AWS Chalice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On July 15, 2021, AWS will publish a minor version update for AWS Chalice that will require Python 3.6 or greater, formally ending our support for Python 2.7. You can read more in the post from James Saryerwinnie,&lt;br&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/hd"&gt;Announcing the end of support for Python 2.7 in AWS Chalice&lt;/a&gt; which provides more details as well as some options for what you can do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you want to write a blog on the AWS open source blog?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am always looking our for new content that we can share with readers of the AWS open source blog, so if you have some great content you would love to share, please get in touch. It has been really good over the past year to see many builders share their open source stories/projects/knowledge, and we can help you through the process, so don't worry if you have never done this before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give your project some love&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://aws-oss.beachgeek.co.uk/gz"&gt;this tweet from David Boyne&lt;/a&gt; if you have an open source project that you might want to benefit from this tool David is developing. From the short video, it looks really nice and one of the best ways to help raise awareness and get interest in your project is having clear documentation. This could be a great way to help with that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback please&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please let us know howe are doing by &lt;a href="https://eventbox.dev/survey/UZS3EF5"&gt;completing this very short survey&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: iliana etaoin, Jesse Butler, Matt Hansen, David Boyne, Jilles van Gurp, Matthew Lau, Heitor Lessa, Joshua McKiddy, Valter Silva, Brent Langston, Adam Keller, Stéphane Maarek, Manabu McCloskey, Nima Kaviani, Rob Hilton, Jeremy Schiefer, Fabio Nonato de Paula, Mahadevan Balasubramaniam, James Saryerwinnie, Colin Bookman, Mark Carter, Srihari Prabaharan, Rucha Deshpande, Jason Nichols, Ron Xing, Yudho Ahmad Diponegoro, Dirk Boekee, Matt Coulter, Anna Geller, Vu Dao and Nočnica Fee.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;aws-sdk-rust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hs"&gt;aws-sdk-rust&lt;/a&gt; last week we released the alpha of the new AWS SDK for Rust developers. During the alpha, you can install the SDK via a Git dependency and this will be published to crates.io when the SDK is Generally Available. You can read more about this from the launch blog post from iliana etaoin, &lt;a href="https://aws-oss.beachgeek.co.uk/ht"&gt;A New AWS SDK for Rust – Alpha Launch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;awscii-cli&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h5"&gt;awscii-cli&lt;/a&gt; folks that know me understand how much I love retro/ascii art/graphics, so when I saw the latest project from the lovely folks at the MatHem tech team I got super excited. This is an open source tool that renders ASCII-art graphs from AWS resource metrics. The purpose of this tool is to give cloud engineers instant access to their resources' graphs without context switching into the AWS console. Check out this little animated gif demo to see more, then head over and check out the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--paifeH1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/awscii-cli/main/images/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paifeH1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/awscii-cli/main/images/demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;node-go-live&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hu"&gt;node-go-live&lt;/a&gt; the folks at Eyevinn Technology released this node package that provides the functionality to build an API layer on top of AWS Media Services to automate and simplify setting up a media pipeline for live using RTMP as the video signal contribution protocol. If you work with AWS Media Services, this is going to come in real handy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-auto-inventory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h6"&gt;aws-auto-inventory&lt;/a&gt; this very handy new tool, AWS Auto Inventory, allows you to quickly and easily generate inventory reports of your AWS resources. Check out the repo to take a look at what those reports look like and how configurable this tool is. I think a lot of folks are going to find this tool very useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MWT_ZFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/aws-samples/aws-auto-inventory/blob/master/clencli/terminalizer/run.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MWT_ZFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/aws-samples/aws-auto-inventory/blob/master/clencli/terminalizer/run.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;assisted-log-enabler-for-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h7"&gt;assisted-log-enabler-for-aws&lt;/a&gt; this is an interesting tool that is for customers who do not have logging turned on for various services, and lack knowledge of best practices and/or how to turn them on. Check out the README to find out more details as to which AWS service logs it can enable, and more about the typical use cases where this might be useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3JnqJm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awslabs/assisted-log-enabler-for-aws/blob/main/diagrams/assisted_log_enabler.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3JnqJm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awslabs/assisted-log-enabler-for-aws/blob/main/diagrams/assisted_log_enabler.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-react-elasticsearch-terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h3"&gt;aws-react-elasticsearch-terraform&lt;/a&gt; The right to study/modify/use that open source gives you is what this project is all about, and is a complete sample project/architecture from Matthew Lau that uses a number of open source technologies to build a sample todo application that is perhaps a little over-engineered but you can re-purpose potentially for your own needs. It uses Terraform to deploy, and this is on my todo list for the weekend..see what I did there :-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PKdSqgNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/MatthewCYLau/aws-react-elasticsearch-terraform/blob/master/img/aws-elasticsearch.JPG%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKdSqgNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/MatthewCYLau/aws-react-elasticsearch-terraform/blob/master/img/aws-elasticsearch.JPG%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, if you are a fan of Terraform then you should check out AWS Hero Anton Babenko's weekly Terraform newsletter which you can &lt;a href="https://aws-oss.beachgeek.co.uk/hq"&gt;sign up for here&lt;/a&gt;. The &lt;a href="https://aws-oss.beachgeek.co.uk/hr"&gt;latest edition, #40&lt;/a&gt; is jam packed with great Terrform resources and whilst not all the content covers AWS, there is plenty of relevant AWS content on a regular basis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tool-compare&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/iacsecurity/tool-compare"&gt;tool-compare&lt;/a&gt; a nice simple tool helps you compare various infrastructure as code (IaC) open source security tools. This allows you to see what the tool can do, and how it compares, before even installing it. Currently supporting Checkov, Indeni Cloudrail,Kics,   Snyk, Terrascan and Tfsec.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;AWSsert&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hv"&gt;AWSsert&lt;/a&gt; this Python library popped up on my radar over the weekend, and is a library providing declarative assertions about AWS resources to your tests. Installing the package will make AWSserts extra assertions available to all of your tests. Assertions are attached directly to boto3 resource objects, allowing you to write clean and declarative tests. Whilst only a subset of AWS Services is currently supported, one to watch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;other open source project updates&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h0"&gt;es-kotlin-client&lt;/a&gt; - es-kotlin-client is an open source tool from Jilles van Gurp that provides a friendly Kotlin API on top of the official Elastic Java client, that adds kotlin DSLs, support for co-routines, and more to the official Java client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h1"&gt;aws-graviton-getting-started&lt;/a&gt; - updated last week, this project  helps new users start using the Arm-based AWS Graviton and Graviton2 processors and has been updated to include .NET/.NET Core &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h4"&gt;aws-lambda-powertools-python&lt;/a&gt; big release last week from one of the most loved projects that I know about, Lambda powertools. This release has three major goodies: 1/ Idempotency utility is now GA, 2/ New API Gateway and ALB event handler, and 3/ MANY enhancements to Logger. As AWS Community Builder Luc van Donkersgoed tweeted last week "Check out this new feature in Lambda Powertools for Python: fully managed event handling for ALB, REST and HTTP API Gateways. Just decorate your handler function with a route and boom, it works."&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if you are a Terraform user and interested in using that to automate Amazon Lightsail deployments, then &lt;a href="https://aws-oss.beachgeek.co.uk/h2"&gt;check out this thread&lt;/a&gt; and think about supporting (up voting) some of these. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Magpie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hg"&gt;Magpie&lt;/a&gt; is a free, open-source framework and a collection of community developed plugins that can be used to build complete end-to-end security tools such as a Cloud Security Posture Manager (CSPM). In this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/hf"&gt;Magpie RFC - Security Rules and Policies&lt;/a&gt; Jason Nichols describes the planned approach for how the open source Magpie framework will also be able to apply policies against the persisted discovery data from discovered information of your AWS resources that are persisted. To find out more about this project, check out their other blog posts including the origin story &lt;a href="https://aws-oss.beachgeek.co.uk/hh"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hm"&gt;How I Built CI/CD For Data Pipelines in Apache Airflow on AWS&lt;/a&gt; one of my favourite posts this week, Anna Geller puts together this detailed walkthrough of how you can create a CI/CD pipeline for your Apache Airflow environment, using Buddy as your CI/CD tool. Really nice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With CDK Day still fresh in my mind, it was amazing to see Matt Coulter put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/hn"&gt;CDK Day In Review&lt;/a&gt;. Consider this your essential companion when revisiting or checking out for the first time the sessions that ran over the two tracks. Great stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDK8s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On a related note, Vu Dao put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ho"&gt;CDK8S Example&lt;/a&gt;, that uses the CDK8s tool to generate Kubernetes YAML from code you write to describe your application using the same constructs approach that you will be familiar with in AWS CDK. This is a great primer into how this works, walking you through a sample application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aws-open-source-posts"&gt;
  &lt;/a&gt;
  AWS open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pixie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/he"&gt;Gathering insights on Kubernetes applications, services, and network traffic with Pixie&lt;/a&gt; Colin Bookman and Mark Carter share a great post on Pixie, an Extended Berkeley Packet Filter (eBPF) powered, open source, observability platform for Kubernetes that makes observability easily accessible to developers. The post provides more info on Pixie, how AWS is partnering with New Relic to contribute to this project and the announcement last week of AWS joining Pixies board to collaborate with New Relic on this open source project. The post provides some great links to getting started and tutorials so you should be able to try this out for yourself very quickly indeed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwnjpeF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/bookman_f1_1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwnjpeF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/bookman_f1_1000.png" alt="pixie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check out the post from Nočnica Fee at New Relic over on dev.to, &lt;a href="https://aws-oss.beachgeek.co.uk/hp"&gt;Pixie is now open source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Policy Agent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hj"&gt;Open Policy Agent&lt;/a&gt; (OPA) is an open source, general-purpose policy engine, which decouples policy decision-making from policy enforcement, which allows you to release, analyse, and review policies (which security and compliance teams love) without sacrificing availability or performance. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/hi"&gt;Creating a custom Lambda authorizer using Open Policy Agent&lt;/a&gt; Srihari Prabaharan and Rucha Deshpande demonstrate how you can create a custom Lambda authoriser to offload authorisation decisions by leveraging the OPA policy engine, showing how authorisation can be as straightforward as passing request headers to OPA to return a decision.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyoJfl3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/srihap_custom_lambda_f1_500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyoJfl3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/srihap_custom_lambda_f1_500.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TiDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hk"&gt;Achieve Better Price to Performance for TiDB on Amazon EKS with Graviton2 Processors&lt;/a&gt; Ron Xing from PingCAP, and Yudho Ahmad Diponegoro from AWS collaborate on a post that combines two of my favourite things: open source technology and AWS Graviton2 processors. In this post you will hear how TiDB benchmarking was undertaken using a number of different benchmarks to provide a much better price/performance result. I always recommend that customers look to use these kinds of posts as helpful illustrations only and that you should look to benchmark your own workloads, leveraging the how-to and other nuggets provided to help you with that effort.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkHW69MM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/cb4e5208b4cd87268b208e49452ed6e89a68e0b8/2021/05/05/Pingcap-TIDB-Cluster-on-EKS-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkHW69MM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/cb4e5208b4cd87268b208e49452ed6e89a68e0b8/2021/05/05/Pingcap-TIDB-Cluster-on-EKS-1.png" alt="benchmark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spinnaker Keel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ha"&gt;How to deploy Spinnaker Keel on Amazon EKS&lt;/a&gt; Manabu McCloskey, Nima Kaviani, and Rob Hilton look at the process of deploying Spinnaker core micro services and Keel to a Kubernetes cluster and then deploying a sample Kubernetes application using Keel. Spinnaker is a continuous delivery platform for releasing software changes rapidly and reliably that was open sourced by Netflix, and Keel is an optional micro service of Spinnaker that enables the GitOps experience. To find out more, read on...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PyTorch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hb"&gt;Achieve 12x higher throughput and lowest latency for PyTorch Natural Language Processing applications out-of-the-box on AWS Inferentia&lt;/a&gt; winner of this weeks longest blog post title, we have Fabio Nonato de Paula and Mahadevan Balasubramaniam who show you how to optimise running a NLP-based solution using HuggingFace Transformers pretrained BERT base models, with no modifications to the model and one-line code change at the PyTorch framework level that achieves 12 times higher throughput at 70% lower cost. This is done using AWS Inferentia instance types, leveraging the open source &lt;a href="https://aws-oss.beachgeek.co.uk/hc"&gt;Neuron SDK's&lt;/a&gt; capabilities for PyTorch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Miywx8U0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/04/29/topPicture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Miywx8U0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/04/29/topPicture.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gu"&gt;AWS RoboMaker now supports ROS2 Foxy Fitzroy featuring Navigation2&lt;/a&gt; Matt Hansen provides an update on the latest ROS2 release,  Foxy Fitzroy, and how you can now use this when using AWS RoboMaker. In this post, Matt takes a look at Navigation2 (Nav2) which is the second generation of the ROS Navigation software stack, enabling robots to move autonomously from point A to B. He covers the main features and architecture as well as getting you started with Nav2 in AWS RoboMaker. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWciLkrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/05/03/figure-d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWciLkrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/05/03/figure-d.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gv"&gt;Planning Kubernetes Upgrades with Amazon EKS&lt;/a&gt; Jesse Butler kicks off what will be a new series of blog posts on the Containers blog covering new features as well as calling out specific changes that you should make note of when planning your cluster upgrades. Jesse kicks this series off with this post taking a look at Kubernetes version 1.19, and shares a broader perspective on versions and observations of running this version of Kubernetes. If you do containers, this is a must read this week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DiSmNZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/01/EKS-Lifecycle-Management.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DiSmNZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/01/EKS-Lifecycle-Management.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SimpleSAMLphp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h9"&gt;Enabling Federation with SimpleSAMLphp and Amazon AppStream 2.0&lt;/a&gt; Jeremy Schiefer writes about an old favourite project of mine that I have used many times in the past, SimpleSAMLphp. This is an open-source project written in native PHP that deals with authentication for SAML 2.0 as a Service Provider and as an Identity Provider. In this post, Jeremy explains how to configure federated user access for Amazon AppStream 2.0 for customers already using SimpleSAMLphp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SRT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Secure Reliable Transport (SRT) is an open source video transport protocol that optimises video streaming performance, and in this post, &lt;a href="https://aws-oss.beachgeek.co.uk/hl"&gt;Getting started with SRT inputs in AWS Elemental Live&lt;/a&gt;, Dirk Boekee dives deeper into SRT and then shows you how you can integrate this with AWS Elemental Live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azs6EE5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fb644351560d8296fe6da332236b1f8d61b2828a/2021/05/05/Picture1-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azs6EE5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fb644351560d8296fe6da332236b1f8d61b2828a/2021/05/05/Picture1-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/h8"&gt;Securing Apache Kafka is easy and familiar with IAM Access Control for Amazon MSK&lt;/a&gt; this guest post from AWS Data Hero Stéphane Maarek takes a look at how easy it is to secure an Amazon MSK cluster and Apache Kafka with IAM Access Control, showing you how to configure access from your developer tooling. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4-fxTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/05/06/bdb1447-access-control-msk-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4-fxTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/05/06/bdb1447-access-control-msk-1.jpg" alt="arch"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you missed this last week, then this will be good news as we announced reducing the price of metric samples ingested by up to 84% for Amazon Managed Service for Prometheus (AMP). Amazon Managed Service for Prometheus (AMP) is a fully managed Prometheus-compatible monitoring service that makes it easy to monitor containerised applications at scale. With AMP, you can use the open source Prometheus Query Language (PromQL) to monitor the performance of containerised workloads on AWS or on-premises. AMP automatically scales the ingestion, storage, and querying of operational metrics (from, for example, your Amazon Kubernetes Service (Amazon EKS) clusters) as workloads grow or shrink, and is integrated with AWS security services such as AWS Identity and Access Management (IAM), AWS PrivateLink, and AWS CloudTrail to enable fast and secure access to data.&lt;/p&gt;

&lt;p&gt;Find out more by reading the post, &lt;a href="https://aws-oss.beachgeek.co.uk/gx"&gt;AWS announces a price reduction for Amazon Managed Service for Prometheus (AMP)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Elasticsearch Service now offers instances from the AWS Graviton2 instance family. Instance types include general purpose (M6g), compute optimized (C6g), and memory optimized (R6g, R6gd). Customers can enjoy up to 38% improvement in indexing throughput, 50% reduction in indexing latency, and 30% improvement in query performance when compared to the corresponding x86-based instances from the current generation (M5, C5, R5). &lt;/p&gt;

&lt;p&gt;Amazon Elasticsearch Service Graviton2 instances support Elasticsearch version 7.9 and above. The instances also include support for all recently launched features like encryption at rest and in-flight, role-based access control, cross-cluster search, Auto-Tune, Trace Analytics, Kibana Reporting, and UltraWarm.&lt;/p&gt;

&lt;p&gt;Amazon Elasticsearch Service Graviton2 instances provide up to 44% price/performance improvement over previous generation instances. Further savings are available via reserved instance (RI) pricing for these instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Porting Assistant for .NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In case you missed this last week, Porting Assistant for .NET is now available as a Visual Studio IDE extension. With this release, developers can access Porting Assistant for .NET directly from the Visual Studio IDE to assess incompatibilities and be more productive with an integrated experience for porting their .NET applications. Along with rich source code editing features provided by the IDE, this extension provides developers with feedback on lines of code that need to be modified to make the source code compatible with .NET Core. Developers can now run automated porting and take advantage of continuous assessment of incompatibilities as they make updates to the code.&lt;/p&gt;

&lt;p&gt;Porting Assistant for .NET is an open source analysis tool that scans .NET Framework applications and generates a .NET Core or .NET 5 compatibility assessment, helping you port your applications to Linux faster. Porting .NET Framework applications to .NET Core or .NET 5 helps customers take advantage of the performance, cost savings, and the robust Linux ecosystem.&lt;/p&gt;

&lt;p&gt;The new Porting Assistant for .NET extension is available for download through the Visual Studio marketplace &lt;a href="https://aws-oss.beachgeek.co.uk/gw"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FreeRTOS version 202104.00 includes a new managed over-the-air update (OTA) library, coreMQTT-Agent library and the AWS IoT Device Defender custom metrics feature as generally available. Developers can use these libraries to update firmware, manage IoT device fleets, design multi-threaded applications, and monitor fleet metrics for their IoT devices.&lt;/p&gt;

&lt;p&gt;The OTA library makes it easier to download and perform cryptographic verification of firmware updates. You can use the OTA library with your preferred MQTT library, HTTP library, and underlying operating system (e.g. FreeRTOS, Linux). The coreMQTT-Agent library manages the MQTT connection by serializing the access to the coreMQTT library and reducing implementation overhead (e.g., the need for repeated calls to the process loop from the application). This allows your multi-threaded applications to share the same MQTT connection, and enables you to design an embedded application without having to worry about thread safety. See coreMQTT-Agent demo that uses OTA, Device Shadow, and Device Defender in multiple threads. The Device Defender library enables you to send device metrics to the AWS IoT Device Defender service. This library also supports custom metrics, a feature that helps you monitor operational health metrics that are unique to your fleet or use case. For example, you can define a new metric to monitor the memory usage or CPU load on your devices. These libraries have been optimized for modularity and memory usage for constrained microcontrollers, and have undergone code quality checks (e.g. MISRA-C compliance, Coverity static analysis), and memory safety validation with the C Bounded Model Checker (CBMC) automated reasoning tool.&lt;/p&gt;

&lt;p&gt;You can read more in the announcement, &lt;a href="https://aws-oss.beachgeek.co.uk/gy"&gt;FreeRTOS 202104.00 includes new managed OTA and MQTT capabilities for IoT applications&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aws-container-day-at-kubecon"&gt;
  &lt;/a&gt;
  AWS Container Day at KubeCon
&lt;/h3&gt;

&lt;p&gt;If you missed it last week, then don't worry. You can now sit back and take in over the next eight hours all the content you need about Amazon EKS and Kubernetes at AWS, hosted by Brent Langston and Adam Keller of Containers from the Couch&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MZ-4HzOC_ac"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Benefits of Open-sourcing Content with Andrew Etter of Amazon Web Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Andrew Etter, the Senior Technical Writer at Amazon Web Services, shares his journey in the field of technical writing in this video, looking at the documentation process at Amazon Web Services and how it is necessary to make the content accessible to users.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pcz6qGrLrn4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Building And Maintaining Your Own Secure Container OS&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 13th 9am PST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Curtis Rissi, a Principal Partner SA at AWS will walk attendees through the Bottlerocket (an open-source Linux-based operating system meant for hosting containers) build process, and provide some key use cases for customisation: how to add new configuration options; how to add new packages; how to configure your own update repositories; how to add security policy; and other common customisations. &lt;/p&gt;

&lt;p&gt;Find out more and to register, click &lt;a href="https://aws-oss.beachgeek.co.uk/ed"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROS 2 Industrial Training (Europe)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 18th - 21st&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you were looking to increase your knowledge of open source robotics, then this training event might be of interest. Being held over 4 days, this is an industry focused event, that teaches the basics of ROS 2&lt;br&gt;
and how to use ROS 2 for manipulation and for navigation. The class is completed by a session of best&lt;br&gt;
practices, with the goal of the training is to get you started in developing with ROS. This is not a free event, so check the prices in the links, which you can &lt;a href="https://www.eventbrite.de/e/ros-2-industrial-training-europe-may-2021-tickets-149655392307"&gt;find here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile and Front-End Live&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 9:00 - 15:00 PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a LIVE streamed event on Twitch  focused on accelerating full-stack mobile and web development. Learn about AWS Amplify, a set of purpose-built tools and services for front-end web and mobile developers that simplify app development. Deep dive into GraphQL and AWS AppSync, a fully-managed GraphQL service that improves app performance and developer productivity.&lt;/p&gt;

&lt;p&gt;You can read more about what you can expect in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/f4"&gt;Mobile and Front-End Live, May 25&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/f3"&gt;register via this link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>It's out now - Berry Free React Admin Template</title>
      <author>Rakesh S Nakrani</author>
      <pubDate>Mon, 10 May 2021 06:28:03 +0000</pubDate>
      <link>https://dev.to/rakesh_nakrani/it-s-out-now-berry-free-react-admin-template-hk3</link>
      <guid>https://dev.to/rakesh_nakrani/it-s-out-now-berry-free-react-admin-template-hk3</guid>
      <description>&lt;p&gt;It's finally here. Berry open-source react admin template is available to download. &lt;/p&gt;

&lt;p&gt;If you don't know about Berry - Here is my post on &lt;a href="https://dev.to/rakesh_nakrani/all-you-need-to-know-about-berry-react-li6"&gt;Everything about Berry&lt;/a&gt;. This product is minimal yet beautiful for your next React backend project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Berry is managed by team &lt;a class="mentioned-user" href="https://dev.to/codedthemes"&gt;@codedthemes&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have made lots of design Iteration and usability testing to overcome the customer’s pain points. Our customer-first approach gives us the motivation towards the Berry journey. You feel amazed after seeing the Berry User Interface.&lt;/p&gt;

&lt;p&gt;It is build using Material-UI a top-rated Material design React component library. For newcomers React is an open-source library, the most popular at this moment which actively supported by Facebook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-berry"&gt;Why Berry?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#technology-stack"&gt;Technology Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-berry"&gt;
  &lt;/a&gt;
  Why Berry?
&lt;/h3&gt;

&lt;p&gt;Berry brings everything you need for dashboard development. We have added the following features in the initial release.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modern aesthetics UI design&lt;/li&gt;
&lt;li&gt;Material UI components&lt;/li&gt;
&lt;li&gt;Fully Responsive, all modern browser supported&lt;/li&gt;
&lt;li&gt;Easy to use code structure&lt;/li&gt;
&lt;li&gt;Flexible &amp;amp; High-Performance code&lt;/li&gt;
&lt;li&gt;Easy Documentation Guide&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#free-version"&gt;
  &lt;/a&gt;
  Free version
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Preview&lt;/li&gt;
&lt;li&gt;Download from &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#pro-version"&gt;
  &lt;/a&gt;
  Pro version
&lt;/h5&gt;

&lt;p&gt;Berry is soon available to purchase. Expected to launch on mid of May-2021&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berrydashboard.io"&gt;Preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Purchase from Material UI Store&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;Clone from GitHub&lt;br&gt;
&lt;code&gt;git clone https://github.com/codedthemes/berry-free-react-admin-template.git&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;Berry documentation helps you out in all aspects from installation to deployment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technology-stack"&gt;
  &lt;/a&gt;
  Technology Stack
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://material-ui.com"&gt;Material-UI&lt;/a&gt; Component library.&lt;/li&gt;
&lt;li&gt;Built with React Hooks API.&lt;/li&gt;
&lt;li&gt;Redux &amp;amp; React Context API for State Management.&lt;/li&gt;
&lt;li&gt;React Router for Navigation Routing.&lt;/li&gt;
&lt;li&gt;Support of react-script.&lt;/li&gt;
&lt;li&gt;Code Splitting.&lt;/li&gt;
&lt;li&gt;CSS-in-JS where CSS is composed using JavaScript instead of defined in external files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h3&gt;

&lt;p&gt;Please generate a &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template/issues"&gt;GitHub issue&lt;/a&gt; if you found a bug in any version. We love to resolve any issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Free&lt;/strong&gt; version cover under &lt;a href="https://github.com/codedthemes/datta-able-bootstrap-dashboard/blob/master/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-us"&gt;
  &lt;/a&gt;
  Follow us
&lt;/h3&gt;

&lt;p&gt;Website &lt;a href="https://berrydashboard.io"&gt;https://berrydashboard.io&lt;/a&gt;&lt;br&gt;
Blog &lt;a href="https://blog.berrydashboard.io"&gt;https://blog.berrydashboard.io&lt;/a&gt;&lt;br&gt;
CodedThemes &lt;a href="https://codedthemes.com"&gt;https://codedthemes.com&lt;/a&gt;&lt;br&gt;
Dribbble &lt;a href="https://dribbble.com/codedthemes"&gt;https://dribbble.com/codedthemes&lt;/a&gt;&lt;br&gt;
Facebook &lt;a href="https://www.facebook.com/codedthemes"&gt;https://www.fb.com/codedthemes&lt;/a&gt;&lt;br&gt;
Twitter &lt;a href="https://twitter.com/codedthemes"&gt;https://twitter.com/codedthemes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Static Code Analyses - Terrascan, Terraform and Azure DevOps</title>
      <author>James Cook</author>
      <pubDate>Mon, 10 May 2021 06:27:17 +0000</pubDate>
      <link>https://dev.to/officialcookj/static-code-analyses-terrascan-terraform-and-azure-devops-3690</link>
      <guid>https://dev.to/officialcookj/static-code-analyses-terrascan-terraform-and-azure-devops-3690</guid>
      <description>&lt;p&gt;In my &lt;a href="https://jamescook.dev/codeanalyses-checkov-terraform-azuredevops"&gt;previous post&lt;/a&gt; I looked at Static Code Analyses with two of the three tools I am going to use in this post. We are now going to look at &lt;a href="https://github.com/accurics/terrascan"&gt;Terrascan&lt;/a&gt; as our analyses tool and have it running from CI/CD platform Azure DevOps which will also host the Terraform code we want to review.&lt;/p&gt;

&lt;p&gt;To follow with the post in configuring this setup, you will need the above mentioned tools with permissions on Azure DevOps to be able to create a Pipeline, add extensions from a marketplace and commit to a repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;As per my previous post, I will be reusing the example Terraform configuration file which contains bad practices like password in plain text. This will allow me to test the tool as it should flag some of these bad practices.&lt;/p&gt;

&lt;p&gt;This is the code example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OJOo-MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619359048086/_nMzNoobR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OJOo-MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619359048086/_nMzNoobR.png" alt="code.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my example, this is stored in a Azure DevOps repository but you can use a third party repository like GitHub as an alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pipeline-configuration"&gt;
  &lt;/a&gt;
  Pipeline Configuration
&lt;/h2&gt;

&lt;p&gt;We will create a separate pipeline within Azure DevOps rather than use the same one we used in the previous post (you can combine them but I will cover this later). This will be used to run Terrascan to analyse the code. You will want to open your project within Azure DevOps and go into &lt;strong&gt;Pipelines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V2qLk6yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363601470/3IVJn3d6C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V2qLk6yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363601470/3IVJn3d6C.png" alt="1-pipelines.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you want to create a pipeline for this. Select the new pipeline option and within the new window select &lt;strong&gt;Use the classic editor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5Rx9LwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363733896/_vfeOLXBz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5Rx9LwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363733896/_vfeOLXBz.png" alt="2-classiceditor.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you want to select the repository where the configuration file is stored. I have stored it in an Azure DevOps repository so will select this as my location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fmqCKOeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363876562/LKhvYUEUo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fmqCKOeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363876562/LKhvYUEUo.png" alt="3-demorepo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once selected, you will then need to select &lt;strong&gt;Empty job&lt;/strong&gt; as the template option for this pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBE_mOlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363999506/38kKmnKic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBE_mOlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363999506/38kKmnKic.png" alt="4-emptyjob.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first fields will appear asking you to give the pipeline a name and select the agent pools you want to use. For this demo, I have selected to use Hosted Agents where I will run Terrascan on an Ubuntu OS. Below are the configurations I set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBjxGB1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457346436/3glSyAWc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBjxGB1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457346436/3glSyAWc1.png" alt="devops_name.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After all fields are filled, you want to select the &lt;strong&gt;Run on agent&lt;/strong&gt; option and configure the agent job name. I opted to calling the agent &lt;strong&gt;Terrascan Analyses&lt;/strong&gt; as it seemed appropriate for what it is doing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZtJ0BWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457500596/KIm_E0CA0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZtJ0BWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457500596/KIm_E0CA0.png" alt="agent_name.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to select the &lt;strong&gt;plus icon&lt;/strong&gt; on the run on agent field to add a job. You will be asked to select something from your currently installed extensions or from the marketplace. We will initially need to install Terraform as this is a prerequisite of Terrascan, so we will need to use the &lt;strong&gt;Terraform extension&lt;/strong&gt; from the marketplace (you may have this already so skip this step).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k1HzvMme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364620421/3xN2AXqZ9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k1HzvMme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364620421/3xN2AXqZ9.png" alt="7-terraformgetmarket.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once acquired from the marketplace you can then select to &lt;strong&gt;install Terraform&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYNW-hI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364882704/3_XNaLmon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYNW-hI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364882704/3_XNaLmon.png" alt="8-installterraform.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within the Terraform configuration window of the extension, select the version of Terraform you want to run on the Hosted Agent (as of writing this, v0.15.0 of Terraform has a bug that stops the initialisation, this may cause Terrascan not to function so use an earlier version).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0-041XxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364981261/atDE04-A2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-041XxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364981261/atDE04-A2.png" alt="terraformconfigversion.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;plus icon&lt;/strong&gt; on the &lt;strong&gt;Run on agent&lt;/strong&gt; and select the &lt;strong&gt;Bash&lt;/strong&gt; extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_trCmfqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365206606/Hb3hZ4zKm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_trCmfqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365206606/Hb3hZ4zKm.png" alt="9-bash.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you want to install Terrascan using the inline function. Here is what I used to install the software.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4nrc57T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459155102/H4WpSzuXf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4nrc57T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459155102/H4WpSzuXf.png" alt="terrascan install.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat the process of adding another &lt;strong&gt;Bash&lt;/strong&gt; extension to the pipeline and this time we are configuring the inline so Terrascan can run the analyses and output the results into an xml file. Make sure to also tick under &lt;strong&gt;Control Options&lt;/strong&gt; heading the &lt;strong&gt;Continue on error&lt;/strong&gt; option or it will fail the pipeline run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XO-3ku3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459328127/oScV4vWyI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XO-3ku3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459328127/oScV4vWyI.png" alt="terrascan.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, select the &lt;strong&gt;plus icon&lt;/strong&gt; on &lt;strong&gt;Run on agent&lt;/strong&gt; and select the &lt;strong&gt;Publish Test Results&lt;/strong&gt; extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekSeNcyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365705659/EsZfM8LO7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekSeNcyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365705659/EsZfM8LO7.png" alt="11-publishtestresult.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are importing the xml output from Terrascan into the test results feature in Azure DevOps. Here is the configurations I used to import.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyAwu0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459414733/NEBbmSqNs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyAwu0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459414733/NEBbmSqNs.png" alt="results config.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all configured, select &lt;strong&gt;Save&lt;/strong&gt; on the Pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pipeline-run"&gt;
  &lt;/a&gt;
  Pipeline Run
&lt;/h2&gt;

&lt;p&gt;You are now ready to run the pipeline. All you need to do is select the &lt;strong&gt;Run&lt;/strong&gt; option under the three dotted icon next to the pipeline name. The pipeline will report a failure if Terrascan flags something in its analyses, if nothing is flagged the pipeline will succeed.&lt;/p&gt;

&lt;p&gt;In my code, I have been flagged by Terrascan which has set the status of the pipeline build as failed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EksqImqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459759523/mwnD7Beq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EksqImqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459759523/mwnD7Beq6.png" alt="status.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-analyses-report"&gt;
  &lt;/a&gt;
  Code Analyses Report
&lt;/h2&gt;

&lt;p&gt;Now we have the pipeline running and the report being published into the Azure DevOps test reports, we can review these reports in two location. The first is within the pipeline build, select the pipeline job and open the tab &lt;strong&gt;Tests&lt;/strong&gt;. Here you will see the tests than was ran by Terrascan, what passed and failed and reasons for this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rwhn0vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459874390/YYoRycEzH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rwhn0vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459874390/YYoRycEzH.png" alt="pipeline results.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the flagged test failure, you will see more details as to why it failed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOgxuDcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459955423/PDNw1-No7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOgxuDcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459955423/PDNw1-No7.png" alt="results details.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can view the test reports via the side menu under &lt;strong&gt;Test Plans&lt;/strong&gt; and &lt;strong&gt;Runs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-MY_8Il--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620460084653/n_vVCe5xV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-MY_8Il--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620460084653/n_vVCe5xV.png" alt="runs results.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do more with Terrascan but this will not be covered in this post but future posts on the topic. In the meantime, checkout the &lt;a href="https://github.com/accurics/terrascan"&gt;Terrascan GitHub&lt;/a&gt; page for more information.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>devops</category>
      <category>security</category>
    </item>
    <item>
      <title>🧢 Stefan's Web Weekly #18 </title>
      <author>Stefan Judis</author>
      <pubDate>Mon, 10 May 2021 06:18:47 +0000</pubDate>
      <link>https://dev.to/stefanjudis/stefan-s-web-weekly-18-2hal</link>
      <guid>https://dev.to/stefanjudis/stefan-s-web-weekly-18-2hal</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-web-weekly-18"&gt;
  &lt;/a&gt;
  Welcome to Web Weekly #18!
&lt;/h2&gt;

&lt;p&gt;Hello friends! The increasing number of vaccinations and today's 25°C made it a perfect weekend. It slowly feels like we get a hold of all this madness here in Germany. &lt;/p&gt;

&lt;p&gt;Before we jump into web stuff, look at this badass gang of friends taking a selfie! 👇 I had a good laugh about &lt;a href="https://twitter.com/JoaquimCampa/status/1386030529250832388"&gt;this Twitter thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp2y519E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/lv0rwNvVdUmO9vmyGDleD/dea3f7efc10b268249cb3c2206bb9373/Screenshot_2021-05-09_at_22.30.16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp2y519E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/lv0rwNvVdUmO9vmyGDleD/dea3f7efc10b268249cb3c2206bb9373/Screenshot_2021-05-09_at_22.30.16.png" alt="Badass animal selfie on Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week's Web Weekly includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Glue work in tech&lt;/li&gt;
&lt;li&gt;Facts about the &lt;code&gt;display&lt;/code&gt; CSS property&lt;/li&gt;
&lt;li&gt;"body-ok" in HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... and, as always, GitHub repositories, a new Tiny Helper and some music.&lt;/p&gt;

&lt;p&gt;Ready? Steady. Go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-glue-work"&gt;
  &lt;/a&gt;
  What's "Glue work"?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wHLr7ew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/nswSeWAZUgcYlxTn8f5ov/3e6e5a86d1a45e14d75c9a0c3f9f6621/Screenshot_2021-05-09_at_22.22.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wHLr7ew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/nswSeWAZUgcYlxTn8f5ov/3e6e5a86d1a45e14d75c9a0c3f9f6621/Screenshot_2021-05-09_at_22.22.52.png" alt='Sketch note about Talk "being glue"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Glue work is activities that enable teams and make them successful. It can include coordinating activities, writing docs or helping out new team members. And while there's nothing wrong with glue work, people are often not recognized for their time-consuming work. Glue work can literally harm your career. &lt;/p&gt;

&lt;p&gt;If you're not familiar with the concept, check out Tanya Reilly's fantastic talk on the topic. 👇&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://noidea.dog/glue"&gt;Learn about "Glue work"&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-things-webperf-the-new-webpagetest-blog"&gt;
  &lt;/a&gt;
  All things #webperf – the new WebPageTest blog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec49FR4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3FvI30zTgMPbBt7WF2WiCe/85c2f00210caf6280173124a6d91dc50/Screenshot_2021-05-09_at_20.25.32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec49FR4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3FvI30zTgMPbBt7WF2WiCe/85c2f00210caf6280173124a6d91dc50/Screenshot_2021-05-09_at_20.25.32.png" alt="WebPageTest Blog by Catchpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tim Kadlec recently joined the team working on the web performance monitoring service WebPageTest. And he didn't waste any time and published multiple excellent articles on the WebPageTest blog right away:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.webpagetest.org/posts/understanding-the-new-cumulative-layout-shift/"&gt;Diving Into the New Cumulative Layout Shift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.webpagetest.org/posts/why-first-contentful-paint-doesnt-work-as-a-cross-browser-metric/"&gt;Why First Contentful Paint Doesn't Work As a Cross-Browser Metric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.webpagetest.org/posts/extending-webpagetest-with-custom-metrics/"&gt;Extending WebPageTest with Custom Metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily, &lt;a&gt;the blog has an RSS feed&lt;/a&gt; to keep up with all this web performance education.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://blog.webpagetest.org/"&gt;Check the new WebPageTest blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bunch-of-handpicked-personal-websites"&gt;
  &lt;/a&gt;
  A bunch of handpicked personal websites
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfWapa-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/5qFaSfqJCsFGzVELYO1nq5/35635298bc4cfeb2235ca51a517187b0/Screenshot_2021-05-09_at_22.12.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfWapa-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/5qFaSfqJCsFGzVELYO1nq5/35635298bc4cfeb2235ca51a517187b0/Screenshot_2021-05-09_at_22.12.52.png" alt="A list of 100+ handpicked personal websites"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following resource is one for the bookmarks: if you're rebuilding your website and need some inspiration, &lt;code&gt;personalwebsites.top&lt;/code&gt; lists many good-looking sites.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://www.personalwebsites.top/"&gt;Check personal websites&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-use-css-custom-properties"&gt;
  &lt;/a&gt;
  How do you use CSS custom properties?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0UqzQTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/24cxg5zxuy2dCEYNHDCzX0/b8313cd959fcac3407ca8fd39711608f/Screenshot_2021-05-09_at_22.01.25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0UqzQTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/24cxg5zxuy2dCEYNHDCzX0/b8313cd959fcac3407ca8fd39711608f/Screenshot_2021-05-09_at_22.01.25.png" alt="We had a period of a few minutes where we were talking past one another, because, as it turns out, we have completely opposite ideas about the use of CSS custom properties. I had never considered his approach, and I found it interesting enough to write this quick post."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I chatted with Peter-Paul Koch about CSS this week. He's working on a book that teaches CSS for JavaScript developers. It turned out that Peter and I approach and use CSS custom properties differently... 😆 It's a very subtle difference and shows the power and flexibility of CSS! 💪&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://www.quirksmode.org/blog/archives/2021/05/two_options_for.html"&gt;Read about the two approaches&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#celebrate-what-you-learn"&gt;
  &lt;/a&gt;
  Celebrate what you learn!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pU7WuvLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3LHzNg9NsdXwoGjeNkuMX/505a79575553d8025b5a673d12481f22/Screenshot_2021-05-09_at_20.39.41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pU7WuvLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/3LHzNg9NsdXwoGjeNkuMX/505a79575553d8025b5a673d12481f22/Screenshot_2021-05-09_at_20.39.41.png" alt="The bar for a TIL is literally “did I just learn something?”—they effectively act as a public notebook."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A year ago, Simon Willison started publishing TIL ("Today I learned") posts. He looked back and shared his motivation for writing down all these short notes. If you want to start blogging, I highly recommend kicking it off with writing TIL posts. &lt;/p&gt;

&lt;p&gt;(&lt;a href="https://www.stefanjudis.com/today-i-learned/"&gt;I document my learnings since February 2017&lt;/a&gt;, too. 🙈)&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://simonwillison.net/2021/May/2/one-year-of-tils/"&gt;Learn why TIL blogging is great&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-and-password-managers-when-input-names-matter"&gt;
  &lt;/a&gt;
  HTML and password managers – when input names matter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNPm8ImM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/5m9HtX1BiPkq5UqQLOMwSk/d37d0673119f1398be09833515e76287/Screenshot_2021-05-09_at_21.09.58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNPm8ImM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/5m9HtX1BiPkq5UqQLOMwSk/d37d0673119f1398be09833515e76287/Screenshot_2021-05-09_at_21.09.58.png" alt="Substack's UI and 1Password just cost me $2,023"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How do password manager browser extensions work? One might think that there's a standard to define what input fields should be filled, but often these extensions scan the DOM and try to populate the correct fields depending on their name. Timmy O'Mahony shared how an HTML input name led to a 2k$ charge he didn't even notice.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://timmyomahony.com/blog/substacks-ui-and-1password-just-cost-me-2023-dollars"&gt;Find out what happened&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-big-benefits-of-little-changes"&gt;
  &lt;/a&gt;
  The big benefits of little changes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsRrIrH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/1uQsgLSLNlN8Xioqa5GHIt/2ee7c19be0484397fb277ca35f1a80bb/Screenshot_2021-05-09_at_21.01.09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsRrIrH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/1uQsgLSLNlN8Xioqa5GHIt/2ee7c19be0484397fb277ca35f1a80bb/Screenshot_2021-05-09_at_21.01.09.png" alt="I recently shipped two things at GitHub that had an impact beyond my wildest dreams. The amount of gratitude and love that spilled out of the community is like nothing I’ve seen before. But the things I shipped weren’t these huge, meaty projects. They were tiny."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oldie but goldie: Joel Califa wrote a post about tiny feature releases and how they make a difference in product perception. Often it's not the "big bang release" but rather a tiny feature addition that gets people excited. Joel shares examples from GitHub and Netflix. The post is golden, not only for product managers.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://joelcalifa.com/blog/tiny-wins/"&gt;Implement Tiny Wins in your product&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-bodyok-in-html"&gt;
  &lt;/a&gt;
  What's "body-ok" in HTML?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VfnUqv_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/46rlPAbU9oStmt3et3rXBn/957c6e3e0f54a5f0aac53114cf73a229/Screenshot_2021-05-09_at_21.27.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VfnUqv_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/46rlPAbU9oStmt3et3rXBn/957c6e3e0f54a5f0aac53114cf73a229/Screenshot_2021-05-09_at_21.27.21.png" alt="Twitter Poll: #HTML quiz! What is “body-ok”? Content is king – 20.6%, You may omit body tags – 7.4% link's okay in body – 10.9% There’s no such thing – 61.1%"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jens Oliver Meiert asked the Twittersphere if the term "body-ok" is a thing in HTML. I haven't heard of it, and he explains what it's about on his blog.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://meiert.com/en/blog/html-body-ok/"&gt;Learn about body-ok&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pro-tip-how-to-get-sites-you-use-daily-out-of-your-browser"&gt;
  &lt;/a&gt;
  Pro tip: how to get sites you use daily out of your browser
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVwrUNy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/492LqakmgH6Ztko4woBqVv/ba5ad4564707818350139085ea5e76b5/Screenshot_2021-05-09_at_21.54.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVwrUNy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/492LqakmgH6Ztko4woBqVv/ba5ad4564707818350139085ea5e76b5/Screenshot_2021-05-09_at_21.54.22.png" alt='Chrome -&amp;gt; More Tools -&amp;gt; Create Shortcut " ☑️  Open as Window" turns any website into a Desktop app and it is glorious! (Accessible via Dock/CMD+TAB or whatever your OS jam is) I have no idea why it is called "Create Shortcut".'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Malte Ubl shared a Chome trick that helps you deal with your most-used apps. In Chrome, you can create "Shortcuts" for a particular website (it doesn't need to be a PWA). I use separated Gmail and Google Calendar windows (shortcuts) for a while now and it works great. &lt;/p&gt;

&lt;p&gt;Give it a try!&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://twitter.com/cramforce/status/1385369724662403072"&gt;Check Malte's Tweet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-css-display"&gt;
  &lt;/a&gt;
  Understanding CSS display
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCGNRnr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/HzL2k1MHw0yid83xL85Qy/f3ca3be0b4366d3c628b6d6ccc52a6fe/Screenshot_2021-05-09_at_22.39.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCGNRnr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/HzL2k1MHw0yid83xL85Qy/f3ca3be0b4366d3c628b6d6ccc52a6fe/Screenshot_2021-05-09_at_22.39.52.png" alt="Understanding Display – Rachel Andrew"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rachel Andrew is one of these speakers that can teach you an incredible amount of knowledge in a single talk. I haven't had the time to go over all the 113 slides of Rachel Andrew's talk "Understanding Display" yet, but I'm sure it's fantastic!&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://noti.st/rachelandrew/VeraEX/understanding-display"&gt;Go over Rachel's slides&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reader-shout-out"&gt;
  &lt;/a&gt;
  Reader shout out 💙
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gyekii8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/25ZifSMNQHxZwuumAGjF6K/5076e5f15de5a2ceb413fa8f177f9e22/Screenshot_2021-05-09_at_22.43.25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gyekii8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/25ZifSMNQHxZwuumAGjF6K/5076e5f15de5a2ceb413fa8f177f9e22/Screenshot_2021-05-09_at_22.43.25.png" alt="If you’re looking for interesting newsletters, here’s one. I rarely read newsletters, but  @stefanjudis  here always seems to have a very interesting list of topics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Jules_K/status/1389176782549622785"&gt;Jules Kulcsar shared this newsletter on Twitter&lt;/a&gt;. When these Tweets enter my notifications, they make my day! &lt;/p&gt;

&lt;p&gt;Thank you, Jules! And thank you all for reading along. 💙&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-new-tiny-helper"&gt;
  &lt;/a&gt;
  A new Tiny Helper
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BP0OcD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4dNB9CfwaseMHzrTqmXgAp/bafd88fb4316d1e4b4ccacd127d6cfc8/Screenshot_2021-05-09_at_22.46.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BP0OcD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/4dNB9CfwaseMHzrTqmXgAp/bafd88fb4316d1e4b4ccacd127d6cfc8/Screenshot_2021-05-09_at_22.46.44.png" alt="grep.app screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;//grep.app&lt;/code&gt; searches code from over a half-million public repositories on GitHub. And it's very speedy!&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://grep.app/"&gt;Search GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find more single-purpose online tools on &lt;a href="https://tiny-helpers.dev/"&gt;tiny-helpers.dev&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-valuable-projects-to-have-a-look-at"&gt;
  &lt;/a&gt;
  Three valuable projects to have a look at
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/github/github-elements"&gt;github/github-elements&lt;/a&gt; –  GitHub's Web Component collection.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arzzen/git-quick-stats"&gt;arzzen/git-quick-stats&lt;/a&gt; – A simple and efficient way to access various statistics in git repository. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/impressivewebs/frontend-feeds"&gt;impressivewebs/frontend-feeds&lt;/a&gt; – An up to date list of RSS feeds for front-end developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-quote-to-think-about"&gt;
  &lt;/a&gt;
  A quote to think about
&lt;/h2&gt;

&lt;p&gt;I read the news over my morning coffee usually, but there might be some truth in &lt;a href="https://twitter.com/shl/status/1384870434772946947"&gt;this week's quote from Sahil&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read before sleeping, write after waking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-song-that-makes-you-stop-coding"&gt;
  &lt;/a&gt;
  A song that makes you stop coding
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQUrKZkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/XCwHDiwG5tIL6IRj3YSJG/c5cd797bc50188c56a78f0b73d06581e/Screenshot_2021-05-09_at_22.53.13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQUrKZkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/f20lfrunubsq/XCwHDiwG5tIL6IRj3YSJG/c5cd797bc50188c56a78f0b73d06581e/Screenshot_2021-05-09_at_22.53.13.png" alt="Cover: Mojjo, Meca, LUISAH - Love The Way"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I went out for a run today, and "Mojjo, Meca, LUISAH - Love The Way" entered my headphones. The funky house track sounds like friends, open-airs, and pure summer!&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://www.youtube.com/watch?v=d61zXt_TtQU"&gt;Listen to "Love the way"&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h2&gt;

&lt;p&gt;And that's a wrap for the eighteenth Web Weekly! If you enjoy my newsletter, I'd love you to tell others about it. ♥️&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/intent/tweet?text=I%20like%20@stefanjudis%20weekly%20newsletter&amp;amp;url=https://www.stefanjudis.com/blog/web-weekly-18/"&gt;Share it on Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Forward it to someone who might like it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're not a subscriber, &lt;a href="https://www.stefanjudis.com/newsletter/"&gt;you can change that&lt;/a&gt;! 😉&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Stay safe, and I'll talk to you next week!&lt;/strong&gt; 🎉 👋&lt;/p&gt;

&lt;p&gt;PS. I heard the cool kids use RSS. You can find &lt;a href="https://www.stefanjudis.com/feeds/"&gt;multiple feeds on my site&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Reacts useRef Hook: What It Is and How to Use It</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 10 May 2021 06:08:55 +0000</pubDate>
      <link>https://dev.to/alexdevero/reacts-useref-hook-what-it-is-and-how-to-use-it-fma</link>
      <guid>https://dev.to/alexdevero/reacts-useref-hook-what-it-is-and-how-to-use-it-fma</guid>
      <description>&lt;p&gt;React useRef hook can be helpful when you need to create mutable variables in your components without causing these components to re-render. For example, store references to elements or some other values. In this tutorial, you will learn about what React useRef hook is, how it works and how to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-useref-hook-briefly"&gt;
  &lt;/a&gt;
  React useRef hook briefly
&lt;/h2&gt;

&lt;p&gt;The useRef hook may not be as popular as other hooks such as &lt;a href="https://blog.alexdevero.com/react-usestate-hook-in-action/"&gt;useState&lt;/a&gt;, &lt;a href="https://blog.alexdevero.com/react-useeffect-hook/"&gt;useEffect&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;useReducer&lt;/a&gt;. Due to this, it may not be clear what is the purpose of this hook. Nonetheless, useRef hook can be very useful in certain situations. The ref, in useRef, is a shorthand for "reference".&lt;/p&gt;

&lt;p&gt;What this hook does is it allows you to store data, and persist them across renders. What's even more interesting and important, this hook does this without causing the component to re-render. This means that when you update the value stored by useRef, React will not re-render your component.&lt;/p&gt;

&lt;p&gt;The most common use case for the useRef hook is to store references to DOM nodes and React components. This then allows you to access these nodes directly and work with them as you need. This is similar to using JavaScript &lt;code&gt;querySelector()&lt;/code&gt; method to find DOM node and storing the node in a variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-useref-hook"&gt;
  &lt;/a&gt;
  Using the useRef hook
&lt;/h2&gt;

&lt;p&gt;Using the useRef hook requires few steps. The first step is about initializing the hook. You initialize the useRef hook by calling it and storing it in a variable. You can also pass some value to the hook as an argument. React will use this value as the initial value for the hook.&lt;/p&gt;

&lt;p&gt;When the useRef is used to store references to DOM nodes or React components, developers usually set the initial value to &lt;code&gt;null&lt;/code&gt;. When you initialize the hook, it will return an object. This object contains property called &lt;code&gt;current&lt;/code&gt;. The initial value you used for the hook will become the value of this property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useRef hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the useRef hook&lt;/span&gt;
  &lt;span class="c1"&gt;// with null as initial value:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Note:&lt;/span&gt;
  &lt;span class="c1"&gt;// The value of myRef now: { current: null }&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from the metaverse!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#storing-references-to-nodes-and-elements"&gt;
  &lt;/a&gt;
  Storing references to nodes and elements
&lt;/h3&gt;

&lt;p&gt;The next steps depend on what you want to do. You use the hook to store references to DOM node or React element. To do this, you find the node or element and add &lt;code&gt;ref&lt;/code&gt; attribute. The value for this attribute will be the initialized useRef hook. You will pass the variable name to this attribute.&lt;/p&gt;

&lt;p&gt;When you do this, the value of &lt;code&gt;current&lt;/code&gt; property returned by the ref object will be the element. From now, you will be able to access the element by using this &lt;code&gt;current&lt;/code&gt; property on the ref.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useRef hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the useRef hook:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Create button click handler:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of input:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;What's your name?&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*
          Add ref "attribute" to the input
          and pass in the created ref as a value:
        */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Create button */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Load text&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useref-hook-and-storing-values"&gt;
  &lt;/a&gt;
  useRef hook and storing values
&lt;/h3&gt;

&lt;p&gt;Just as useRef can store references to nodes and elements it can also store values. This can be handy when you want to store values without triggering re-render. You can't do this with useState hook. Every update of a state value will cause re-render. That said, this is a feature, not a bug.&lt;/p&gt;

&lt;p&gt;You want to keep your component in sync with state. This is one thing useState was created to do. Using useRef hook allows you to bypass this by directly manipulating with the value of &lt;code&gt;current&lt;/code&gt; property. This property is not read-only. You can change its value manually. This allows you to use useRef to store anything you want.&lt;/p&gt;

&lt;p&gt;When you want to use useRef to store values and update them remember that these updates are side effects. As such, you should do these updates in the "layout" or "commit" phase. This is a phase when React applies any changes. To make updates to ref vales during this phase you can use &lt;code&gt;useLayoutEffect&lt;/code&gt; or &lt;code&gt;useEffect&lt;/code&gt; hooks.&lt;/p&gt;

&lt;p&gt;Aside to these two, another option for these updates are handler functions. You can create function to handle specific actions. Then, you can update ref values inside these functions. Whatever option you choose, avoid updating ref in the root of your React components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect and useRef hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the useRef hook with 1 as initial value:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Don't do this - update values in root:&lt;/span&gt;
  &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use useEffect to update "current" value&lt;/span&gt;
    &lt;span class="c1"&gt;// on every render of the component:&lt;/span&gt;
    &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="c1"&gt;// Using handler function:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onIncrementRenderCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update "current" value manually:&lt;/span&gt;
    &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// NOTE: this log will not show up if you update&lt;/span&gt;
  &lt;span class="c1"&gt;// the value by clicking on the "Increment count" button.&lt;/span&gt;
  &lt;span class="c1"&gt;// useRef doesn't cause re-renders.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rendered!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show the number of renders: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Number of renders: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add button to ref's current value: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onIncrementRenderCount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#storing-previous-state-values-with-react-useref-hook"&gt;
  &lt;/a&gt;
  Storing previous state values with React useRef hook
&lt;/h3&gt;

&lt;p&gt;One interesting use case for useRef hook is storing previous state values. The useRef hook persists values between renders. With the help of &lt;code&gt;useEffect&lt;/code&gt; hook, you can store value of state in a ref before the value changes. This will make the old value available in the next render, through the ref.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect, useRef and useState hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Add state for name:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Use useRef hook to store reference to input:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Use useRef hook to store previous name:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldNameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// On re-render, store the old name in ref:&lt;/span&gt;
    &lt;span class="nx"&gt;oldNameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSaveNameButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update the value of name state,&lt;/span&gt;
    &lt;span class="c1"&gt;// and trigger re-render:&lt;/span&gt;
    &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// This will also trigger the useEffect which&lt;/span&gt;
    &lt;span class="c1"&gt;// will update the ref's value with the previous&lt;/span&gt;
    &lt;span class="c1"&gt;// value of "name" state.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;New name: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Previous name: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;oldNameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add button to save name: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSaveNameButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Save name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-values-rerenders-and-updating-ui"&gt;
  &lt;/a&gt;
  Updating values, re-renders and updating UI
&lt;/h2&gt;

&lt;p&gt;One thing to keep in mind. In the example with updating values manually, click on the button will update the value. However, change of the value will not cause re-render. So, you will still see the same value until something causes the component to re-render and the UI to update itself with the latest value.&lt;/p&gt;

&lt;p&gt;You can test that the ref value is really updated by triggering re-render manually. For example, you can add new state. When you update the state with new value it will also trigger re-render. The re-render will update the UI. After this update the UI will also show the latest value of ref.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useEffect, useRef and useState hooks from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the useRef hook:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Add state to trigger re-render:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use useEffect to update "current" value&lt;/span&gt;
    &lt;span class="c1"&gt;// on every render of the component:&lt;/span&gt;
    &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onIncrementRenderCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update "current" value manually:&lt;/span&gt;
    &lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onIncrementCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update state value:&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;// Note: this will trigger re-render.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Show the number of renders: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Number of renders: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add button to ref's current value: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onIncrementRenderCount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add button to increase state value (trigger re-render): */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onIncrementCount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment state&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-word-of-caution"&gt;
  &lt;/a&gt;
  A word of caution
&lt;/h2&gt;

&lt;p&gt;The useRef hook makes it very easy to work with DOM nodes and React components. This can make it tempting to use it every time you want to communicate with your components or between them. This is generally not a good idea. It is usually better to create these communication bridges by using props and passing data through them.&lt;/p&gt;

&lt;p&gt;This is one of the things the system of props was designed for. It is also probably the most reliable way to establish this communication between components. So, use useRef when you really need to, when you need to work with components and props are not capable of doing the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-reacts-useref-hook"&gt;
  &lt;/a&gt;
  Conclusion: Reacts useRef Hook
&lt;/h2&gt;

&lt;p&gt;The React useRef hook can be handy. It allows you to store data between renders and update this data without causing a re-renders. You can also use it to store references to DOM nodes and React components so you can work with them directly. I hope that this tutorial helped you understand what the useRef hook is and how to use it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Como personalizar tu terminal utilizando oh-my-zsh con powerlevel10k 👨‍💻</title>
      <author>Christopher Montero D'oleo</author>
      <pubDate>Mon, 10 May 2021 06:06:22 +0000</pubDate>
      <link>https://dev.to/christopherjael/como-personalizar-tu-terminal-utilizando-oh-my-zsh-con-powerlevel10k-4bdi</link>
      <guid>https://dev.to/christopherjael/como-personalizar-tu-terminal-utilizando-oh-my-zsh-con-powerlevel10k-4bdi</guid>
      <description>&lt;p&gt;Siempre llega el momento donde queremos personalizar nuestra terminal ya sea porque nos parece poco &lt;strong&gt;atractiva&lt;/strong&gt; o queremos mayor &lt;strong&gt;funcionalidad&lt;/strong&gt; para aumentar la productividad a la hora de utilizarla. Aunque el punto fuerte de las &lt;strong&gt;Terminales&lt;/strong&gt; no sea su apartado estético ni las extensas utilidades. Pero eso no quiere decir, que no podamos hacer algo al respecto 🙋.&lt;/p&gt;

&lt;p&gt;Para darle un &lt;strong&gt;powerup&lt;/strong&gt; 💯 a la terminal solo necesitaremos los &lt;strong&gt;siguientes requisitos&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Equipo con &lt;strong&gt;Sistema linux&lt;/strong&gt; 🐧

&lt;ul&gt;
&lt;li&gt;Fedora&lt;/li&gt;
&lt;li&gt;Debian&lt;/li&gt;
&lt;li&gt;Ubuntu&lt;/li&gt;
&lt;li&gt;Arch Linux&lt;/li&gt;
&lt;li&gt;openSUSE&lt;/li&gt;
&lt;li&gt;Mint&lt;/li&gt;
&lt;li&gt;Etc...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Git&lt;/strong&gt; 🗄️🌐&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Distribución&lt;/th&gt;
&lt;th&gt;Comando&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Debian/Ubuntu&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apt-get install git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fedora&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;yum install git&lt;/code&gt; o &lt;code&gt;dnf install git&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arch Linux&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pacman -S git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openSUSE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;zypper install git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FreeBSD&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pkg install git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Curl&lt;/strong&gt; 📂🌐&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Distribución&lt;/th&gt;
&lt;th&gt;Comando&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Debian/Ubuntu&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apt-get install curl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fedora&lt;/td&gt;
&lt;td&gt;&lt;code&gt;yum install curl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arch Linux&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pacman -Sy curl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openSUSE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;zypper install curl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Si ya cumples con todos los requisitos, puedes seguir con el tutorial.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#instalar-zsh"&gt;
  &lt;/a&gt;
  Instalar ZSH
&lt;/h2&gt;

&lt;p&gt;Para instalar zsh solo tienes que abrir la terminal y escribir las siguientes líneas de comandos &lt;strong&gt;(si no usas ubuntu/debian recuerda cambiar el comando para el administrador de paquetes de la distro que utilizas)&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instalar ZSH:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Comprobar la instalación de ZSH:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;zsh&lt;/span&gt; &lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;

&lt;span class="c1"&gt;//zsh 5.8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Establecer ZSH como predeterminado:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Cierre y vuelva abrir la terminal para verificar que ZSH este como predeterminado:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;SHELL&lt;/span&gt;

&lt;span class="c1"&gt;///usr/bin/zsh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si todo va bien y no se han presentado errores, podemos seguir con el siguiente paso, instalar el administrador de &lt;strong&gt;frameworks&lt;/strong&gt; de código abierto &lt;strong&gt;Oh-my-zsh&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#instalar-ohmyzsh"&gt;
  &lt;/a&gt;
  Instalar oh-my-zsh
&lt;/h2&gt;

&lt;p&gt;Ejecute este comando para instalar oh-my-zsh:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se mostrar la siguiente pantalla:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca6ktv1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpq6ut4sopy0gl6mgp03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca6ktv1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpq6ut4sopy0gl6mgp03.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bueno ahora podemos hacer muchas cosas con oh-my-zsh instalado, una de ellas es cambiar el tema e instalar plugins.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para acceder a la configuración de ZSH ejecutamos la siguiente línea de comando:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Se abrirá el siguiente documento.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--if_lERnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3ccgrhd8u3x2lkfueq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--if_lERnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3ccgrhd8u3x2lkfueq1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para cambiar el tema solo hay que cambiar el valor de  &lt;code&gt;ZSH_THEME&lt;/code&gt;, para saber la lista de temas puedes visitar el siguiente link &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes"&gt;zsh-themes&lt;/a&gt;. Solo tienes que copiar el nombre del tema y pegarlo. &lt;code&gt;ZSH_THEME = "[Nombre del tema]"&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jX_cyqjV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04rsdcvb192xwkx5cxqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jX_cyqjV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04rsdcvb192xwkx5cxqe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La lista de los plugins está más abajo en el documento, por defecto solo trae el plugin de git, más adelante veremos cómo agregar más plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--724kC4yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/haqhmfv5wy04bqjfdzgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--724kC4yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/haqhmfv5wy04bqjfdzgm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#descargar-powerlevel10k"&gt;
  &lt;/a&gt;
  Descargar Powerlevel10k
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ejecutar la siguiente línea de comandos:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Para una buena experiencia utilizando &lt;code&gt;powerlevel10k&lt;/code&gt; se recomienda la instalación de una fuente &lt;code&gt;font-nerd&lt;/code&gt;, la más adecuada es la fuente &lt;code&gt;Meslo Nerd Font&lt;/code&gt;. Para descargar la fuente entre a este link &lt;a href="https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Meslo"&gt;Meslo-Nerd-Font&lt;/a&gt;. Yo recomiendo descargar la fuente, Media, tipo regular, completa y compatible con sistemas windows y linux. La ruta en Github es: &lt;code&gt;nerd-fonts/patched fonts/Meslo/M/Regular/complete/&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIFfxHZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uymwr2ha5s5ks9hl48q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIFfxHZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uymwr2ha5s5ks9hl48q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para cambiar la fuente de la terminal a la nueva, Abra Terminal → Preferencias y haga clic en el perfil seleccionado en Perfiles . Marque Fuente personalizada en Apariencia del texto y seleccione &lt;code&gt;MesloLGS NF Regular&lt;/code&gt;. &lt;strong&gt;(Para ver algun cambio talvez tenga que reiniciar el equipo)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#configurar-powerlevel10k"&gt;
  &lt;/a&gt;
  Configurar Powerlevel10k
&lt;/h2&gt;

&lt;p&gt;Hay dos formas de iniciar el proceso de configuración de &lt;code&gt;powerlevel10k&lt;/code&gt;, la primera es escribiendo en la terminal &lt;code&gt;pk10 configure&lt;/code&gt; y la segunda reiniciando el equipo y abriendo una terminal.&lt;/p&gt;

&lt;p&gt;Cuando inicia con la configuración se mostrará una ventana como esta:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--og2rGHyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko6f0ve2k9khkj8e2761.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--og2rGHyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko6f0ve2k9khkj8e2761.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZscdIKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mn40c4g6powl36ufawl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZscdIKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mn40c4g6powl36ufawl9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solo tiene que seguir las instrucciones y continuar con la configuración. Escoja las opciones que desee y a disfrutar 😄.&lt;/p&gt;

&lt;p&gt;Al final de todo le puede aparecer una terminal como esta pero no es necesario:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOTdcnJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zubgkgu2ufi5iyq53nb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOTdcnJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zubgkgu2ufi5iyq53nb5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A partir de ahora puede personalizar tando estetica como funcional su terminal. Recuerde que este es solo el comienzo de algo grande.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDcimbRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sky9omaaoaptne7jtl3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDcimbRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sky9omaaoaptne7jtl3n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#instalar-plugins-para-zsh"&gt;
  &lt;/a&gt;
  Instalar Plugins para ZSH
&lt;/h2&gt;

&lt;p&gt;Para instalar plugins en ZSH primero hay que descargarlos e instalarlos, para ver la lista de plugins que hay disponibles visita el siguiente link &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins"&gt;zsh-plugins&lt;/a&gt;. Yo recomiendo instalar 2 plugins muy útiles: &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt; y &lt;code&gt;zsh-autosuggestions&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#zshsyntaxhighlighting"&gt;
  &lt;/a&gt;
  zsh-syntax-highlighting
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;zsh-syntax-highlighting&lt;/code&gt; te muestra qué comandos están bien escritos o si existen y también los que están mal escritos o no existen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oSblI6ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6edb8in9c7lmjfl3rhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oSblI6ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6edb8in9c7lmjfl3rhd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zshautosuggestions"&gt;
  &lt;/a&gt;
  zsh-autosuggestions
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;zsh-autosuggestions&lt;/code&gt; te muestra sugerencias y predice los que quieres hacer en base a los comandos más utilizados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WV8lzAyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anm4039oqgbq4f2km0ir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WV8lzAyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anm4039oqgbq4f2km0ir.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abra el documento de configuracion de ZSH:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Añada el nombre del plugin a la lista.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plugins=( 
[plugins...]
zsh-syntax-highlighting
zsh-autosuggestions
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NoBwKAER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmdmfrwlumra8vfxfg4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NoBwKAER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmdmfrwlumra8vfxfg4p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El  mismo proceso se hace con la mayoría de plugins aunque hay algunos donde la instalación se realiza de otras maneras.&lt;/p&gt;




&lt;p&gt;Ya has llegado al final de este tutorial, espero haberte ayudado en algo y no olvides dejar sus agradecimientos. bayy 🙋🙋&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lema:&lt;/strong&gt; &lt;em&gt;Don't be the spectator of your life, be the main character.&lt;/em&gt; 🚀🌟&lt;/p&gt;

&lt;p&gt;Instagram 📷: &lt;a href="https://www.instagram.com/reakine.rd/"&gt;@reakine.net&lt;/a&gt;&lt;br&gt;
Github 💻: &lt;a href="https://github.com/christopherjael"&gt;christopherjael&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Para más información del tema:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/ohmyzsh/ohmyzsh"&gt;oh-my-zsh&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/romkatv/powerlevel10k"&gt;Powerlevel10k&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/ryanoasis/nerd-fonts"&gt;Nerd Fonts&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ux</category>
      <category>bash</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Why do you need Helmet in NodeJs ? </title>
      <author>Siddharth Udeniya</author>
      <pubDate>Mon, 10 May 2021 05:27:49 +0000</pubDate>
      <link>https://dev.to/sid__/why-do-you-need-helmet-in-nodejs-h1b</link>
      <guid>https://dev.to/sid__/why-do-you-need-helmet-in-nodejs-h1b</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Helmet helps you secure your Express apps by setting various HTTP headers. It's not a silver bullet, but it can help!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are the lines written on top of the npm's helmet page.&lt;/p&gt;

&lt;p&gt;Most of you might have come across this code &lt;code&gt;app.use(helmet())&lt;/code&gt; in your codebase/boilerplates. Let's dive deep into helmet today.&lt;/p&gt;

&lt;p&gt;In simple words, Helmet adds/secures HTTP headers returned by your express app.&lt;/p&gt;

&lt;p&gt;Most of the newbie devs tend to ignore this (secured HTTP headers).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;helmet()&lt;/code&gt; is a wrapper around 15 middlewares, 11 of them are used by default with preset settings.&lt;/p&gt;

&lt;p&gt;Let's see those 11 headers in detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-contentsecuritypolicy-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Content-Security-Policy&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Used for mitigating XSS Attacks. Helps control what domain/subdomain, which protocol, what kind of media should talk to the server. &lt;br&gt;
&lt;code&gt;helmet.contentSecurityPolicy();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xdnsprefetchcontrol-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-DNS-Prefetch-Control&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As the name of this header suggests, the browser tries to resolve DNS while (in parallel) loading the page content. DNS resolution for what? - For the links, images, etc referenced on the page which is being loaded. Prefetching occurs in the background. Helps reduce latency. By default, helmet sets this as &lt;code&gt;off&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;helmet.dnsPrefetchControl(options)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-expectct-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Expect-CT&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;CT in this header stands for &lt;strong&gt;Certificate Transparency&lt;/strong&gt;. Catch that misissued certificate on that site.&lt;br&gt;
&lt;code&gt;helmet.expectCt()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xframeoptions-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Frame-Options&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A well-known header to prevent clickjacking up to a certain extent. Gets overridden by &lt;code&gt;frame-ancestors&lt;/code&gt; directive of Content Security Policy header.&lt;br&gt;
&lt;code&gt;helmet.frameguard();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xpoweredby-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Powered-By&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This headers makes very less difference even if turned off. Set to &lt;code&gt;express&lt;/code&gt; by default in Express framework.&lt;br&gt;
&lt;code&gt;helmet.hidePoweredBy()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-stricttransportsecurity-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Strict-Transport-Security&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;or HSTS in short, tells browsers that the website should only be accessible via HTTP(S) protocol. No HTTP please! Takes one mandatory param &lt;em&gt;max-age&lt;/em&gt; (which is 180 days in helmet) and 2 optional params &lt;em&gt;includeSubDomains&lt;/em&gt; (defaults to true) &amp;amp; &lt;em&gt;preload&lt;/em&gt; (defaults to false) in options. &lt;br&gt;
&lt;code&gt;helmet.hsts(options)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xdownloadoptions-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Download-Options&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Specific to Internet Explorer, this header forces potentially unsafe files and instead downloads them directly, thus preventing script injections since the file is no longer opened in the security context of the site.&lt;br&gt;
&lt;code&gt;helmet.ieNoOpen()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xcontenttypeoptions-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Content-Type-Options&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;helmet.noSniff sets the X-Content-Type-Options header to nosniff. Browsers in some cases try to guess the MIME types by looking at bytes of resources shared by the server. Hey Browser! Don't do that. That's MIME sniffing. Let me give you a nosniff in the Content Type Options.&lt;br&gt;
&lt;code&gt;helmet.noSniff()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xpermittedcrossdomainpolicies-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Permitted-Cross-Domain-Policies&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Ah! That's a little tricky. Check this &lt;a href="https://owasp.org/www-project-secure-headers/#x-permitted-cross-domain-policies"&gt;article&lt;/a&gt; for a detailed description.&lt;br&gt;
&lt;code&gt;helmet.permittedCrossDomainPolicies(options)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-referrerpolicy-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Referrer-Policy&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Server dictates what all referrer information it needs in the &lt;code&gt;Referer&lt;/code&gt; (Oh yeah! That's a misspell) header via &lt;code&gt;Referrer-Policy&lt;/code&gt; header. It defaults to no-referrer in case of using helmet.&lt;br&gt;
helmet.referrerPolicy(options)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xxssprotection-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-XSS-Protection&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Oh, Stop! I detected an xss attack.&lt;br&gt;
If it's 0 - Disables XSS filtering.&lt;br&gt;
If it's 1 - Enables XSS filtering. sanitize and then load if XSS is detected.&lt;br&gt;
If it's 1; mode=block - Enables XSS filtering. Do not sanitize, just stop the rendering altogether.&lt;br&gt;
&lt;code&gt;helmet.xssFilter()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that was all about the 11 default headers Helmet sets. A snippet from Helmet's &lt;a href="https://www.npmjs.com/package/helmet"&gt;NPM Page&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yEYmFkpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3grhv8ts3fk1y92b7c29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yEYmFkpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3grhv8ts3fk1y92b7c29.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing: Mint UI 🎉</title>
      <author>Szikszai Gusztáv</author>
      <pubDate>Mon, 10 May 2021 05:14:38 +0000</pubDate>
      <link>https://dev.to/gdotdesign/introducing-mint-ui-l7</link>
      <guid>https://dev.to/gdotdesign/introducing-mint-ui-l7</guid>
      <description>&lt;p&gt;Finally after months (and months) of work, I'm proud to present: &lt;a href="https://ui.mint-lang.com"&gt;Mint UI&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/JqDeI2yjpSRgdh35oe/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/JqDeI2yjpSRgdh35oe/giphy.gif" alt="TA-DA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that was a bit anticlimactic 😅 you probably don't know what the hell I am talking about so let me show you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ui.mint-lang.com"&gt;Mint UI&lt;/a&gt; is a component library written in &lt;a href="https://www.mint-lang.com"&gt;Mint&lt;/a&gt; - a programming language specifically designed for &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single Page Applications&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep on reading, to see some of it's features - in video!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components-galore"&gt;
  &lt;/a&gt;
  Components Galore
&lt;/h2&gt;

&lt;p&gt;Mint UI has &lt;strong&gt;60+ components&lt;/strong&gt; that you can use to build your next great application (or side project 🙂).&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544021674" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That was just a taste, you can play around with all the components on the &lt;a href="https://ui.mint-lang.com/components"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seamless-sizing"&gt;
  &lt;/a&gt;
  Seamless Sizing
&lt;/h2&gt;

&lt;p&gt;The size of components are completely fluid, controlled by the &lt;code&gt;font-size&lt;/code&gt; property - &lt;code&gt;em&lt;/code&gt; is used everywhere - so you can make them as large or as small as you want! As a bonus any children will be sized accordingly as well!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544015375" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobile-support"&gt;
  &lt;/a&gt;
  Mobile Support
&lt;/h2&gt;

&lt;p&gt;Most components adapt to the screen size by using media queries, but some change based on available space.  &lt;/p&gt;

&lt;p&gt;For example the &lt;a href="https://ui.mint-lang.com/components/ui-table"&gt;table&lt;/a&gt; changes into a &lt;a href="https://ui.mint-lang.com/components/ui-definition-list"&gt;definition list&lt;/a&gt; if it's width goes below a defined number.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544017739" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keyboard-support"&gt;
  &lt;/a&gt;
  Keyboard Support
&lt;/h2&gt;

&lt;p&gt;All interactive elements besides can be interacted with with mouse and keyboard.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544168530" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#light-and-dark-modes"&gt;
  &lt;/a&gt;
  Light and Dark modes
&lt;/h2&gt;

&lt;p&gt;Mint UI supports light and dark modes and even has a &lt;a href="https://ui.mint-lang.com/components/ui-dark-mode-toggle"&gt;component to toggle them&lt;/a&gt; built in!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544016909" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#themeable-with-css-variables"&gt;
  &lt;/a&gt;
  Themeable with CSS variables
&lt;/h2&gt;

&lt;p&gt;All components can be themed with design tokens by using CSS variables.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544213488" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Currently only colors can be changed but in future versions there will be all kinds of tokens (paddings, spacing, etc...). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#powered-by-mint"&gt;
  &lt;/a&gt;
  Powered by Mint
&lt;/h2&gt;

&lt;p&gt;Mint UI is written in Mint and that means that you can't use in JavaScript projects (yet) only in Mint projects, but that's a good thing! Mint as everything you need to create production ready applications. &lt;/p&gt;

&lt;p&gt;If you are looking to learn Mint, I have a series on it here &lt;a href="https://dev.to/gdotdesign/series/836"&gt;https://dev.to/gdotdesign/series/836&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;Mint UI is hosted on &lt;a href="https://github.com/mint-lang/mint-ui"&gt;Github&lt;/a&gt; and its source code is public but it's licensed differently than other open source projects: it is free (even for commercial use) for individuals and small companies but a paid license is required for bigger companies (4 or more employees).&lt;/p&gt;

&lt;p&gt;With the release there is a special 25% discount for the first 50 companies who purchase using these links:&lt;br&gt;
&lt;a href="https://gum.co/mint-ui-license/u5bjba8"&gt;https://gum.co/mint-ui-license/u5bjba8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gum.co/mint-ui/dbspk6a"&gt;https://gum.co/mint-ui/dbspk6a&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Let me know what do you think in the comments below! &lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>news</category>
      <category>mintlang</category>
    </item>
    <item>
      <title>7 Useful JavaScript Tricks and Tips</title>
      <author>Michael Karén</author>
      <pubDate>Mon, 10 May 2021 05:11:30 +0000</pubDate>
      <link>https://dev.to/this-is-learning/7-useful-javascript-tricks-and-tips-4lp1</link>
      <guid>https://dev.to/this-is-learning/7-useful-javascript-tricks-and-tips-4lp1</guid>
      <description>&lt;p&gt;&lt;em&gt;You Will Be Surprised By Number 9!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, I gathered some JavaScript tips and tricks that I believe can make you a better JavaScript developer. In no particular order, here are seven (?) JavaScript tricks!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-converting-to%C2%A0numbers"&gt;
  &lt;/a&gt;
  1. Converting to numbers
&lt;/h2&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;loosely typed language&lt;/strong&gt;, meaning we don't have to explicitly specify types of variables. JavaScript also freely type-converts values into a type depending on the context of their use.&lt;/p&gt;

&lt;p&gt;Converting values to numbers, especially strings to numbers, is a common requirement and many methods can be used. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unary-operator"&gt;
  &lt;/a&gt;
  Unary + operator
&lt;/h3&gt;

&lt;p&gt;The most concise method for type-converting strings into numbers is the &lt;strong&gt;unary &lt;code&gt;+&lt;/code&gt; operator&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A unary operation is an operation with only one operand. This operand comes either before or after the operator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;The unary plus operator&lt;/em&gt; precedes its operand and evaluates to its operand but attempts to convert it into a number if it isn't already. Here are a few more examples of how it behaves:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;  &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, what if we want to be more explicit in our code?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#number"&gt;
  &lt;/a&gt;
  Number
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"&gt;Number&lt;/a&gt; is a primitive wrapper object used to represent and manipulate numbers. When used as a function, &lt;code&gt;Number(value)&lt;/code&gt; converts a string or other value to the Number type. If the value can't be converted, it returns &lt;code&gt;NaN&lt;/code&gt; (Not a Number).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 1.3&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tax&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parseint"&gt;
  &lt;/a&gt;
  parseInt
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt"&gt;parseInt()&lt;/a&gt; takes a String as a first argument and a base to which that String will be converted to. This method always returns an integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;// 1234&lt;/span&gt;
&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;11 players&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 11&lt;/span&gt;
&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;player 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10.81&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;parseInt()&lt;/code&gt; tries to get a number from a string that does not only contain a number, but if the string does not start with a number, you’ll get &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parsefloat"&gt;
  &lt;/a&gt;
  parseFloat
&lt;/h3&gt;

&lt;p&gt;If we want to retain the decimal part and not just the integer part, we can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"&gt;parseFloat()&lt;/a&gt; that takes a String as an argument and returns the Float point number equivalent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10.42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10.42&lt;/span&gt;
&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10.00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few more ways to convert to numbers but these are the more common ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-managing-objects"&gt;
  &lt;/a&gt;
  2. Managing objects
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Destructuring&lt;/strong&gt; is a huge part of ES6 and something you're probably going to be using often. It allows us to extract data from objects, and assigning the extracted data into variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can rename the variables if we want to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another handy thing we could do is to destructure the returned object by a function and pick and choose what values we want to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Best&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPerson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, with destructuring, we can return multiple values from a function by returning an object and choosing the pieces we want to be returned.&lt;/p&gt;

&lt;p&gt;Removing a property in an immutable way requires a little trick provided by spread’s counterpart, the &lt;strong&gt;rest&lt;/strong&gt; operator, which is written with three dots (...) like spread. However, in this case, we spread the remaining properties into a new object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPerson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {firstName: "Max", lastName: "Best"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;person&lt;/code&gt; object holds all properties from the original person object except &lt;code&gt;age&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-swapping-two-variables"&gt;
  &lt;/a&gt;
  3. Swapping two variables
&lt;/h2&gt;

&lt;p&gt;Using what we learned in the last trick makes swapping variables as easy as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;happy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// me = 'sad', you = 'happy'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code creates an array of [you, me] and immediately destructures them into the opposite variables.&lt;/p&gt;

&lt;p&gt;No need for temp variables anymore!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-setting-defaults"&gt;
  &lt;/a&gt;
  4. Setting defaults
&lt;/h2&gt;

&lt;p&gt;We have all seen them. The endless if statements checking if the values have been set. What if I said there was a better way? Well, that's exactly what I'm saying, default values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;nullish coalescing operator (&lt;code&gt;??&lt;/code&gt;)&lt;/a&gt; is a logical operator that returns its right-hand side operand when its left-hand side operand is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; and otherwise returns its left-hand side operand.&lt;br&gt;
We can use this to set default values, for example when we receive a list that has not been set to an array yet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;receivedBooks&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;We could use the &lt;em&gt;null coalescing operator&lt;/em&gt; to set defaults for variables in functions but there is a better way, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters"&gt;default parameters&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculateArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;calculateArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we set the default value for &lt;code&gt;height&lt;/code&gt; to 100 and calculate the area by only sending in the &lt;code&gt;width&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h3&gt;

&lt;p&gt;Another trick when destructruring objects is setting default values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;750&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 400 - comes from rectangle object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 500 - fallback to default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ES6 destructuring default values only kick in if the value is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-random-number-from-interval"&gt;
  &lt;/a&gt;
  5. Random number from interval
&lt;/h2&gt;

&lt;p&gt;There are times when we need a random number to be generated within a range. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"&gt;&lt;code&gt;Math.random()&lt;/code&gt;&lt;/a&gt; function helps us generate a random number, and then we can transform it to the range we want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomIntFromInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's another trick baked into this one if you look at how the function is constructed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-remove-array-duplicates"&gt;
  &lt;/a&gt;
  6. Remove array duplicates
&lt;/h2&gt;

&lt;p&gt;The Set object type introduced in ES6 lets you store unique values. Together with the spread operator (&lt;code&gt;...&lt;/code&gt;), we can use it to create a new array with only the unique values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniqueArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a Set from an array and because each value in the Set has to be unique we remove all duplicates. We then convert the Set back to a new array using the spread operator.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-dynamic-property%C2%A0names"&gt;
  &lt;/a&gt;
  7. Dynamic property names
&lt;/h2&gt;

&lt;p&gt;ES6 brought us computed property names that allow property keys of object literals to use expressions. By surrounding the key with brackets [], we can use variables as property keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kiwi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {fruit: "kiwi"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is useful in a situation where you want the key to be created on the fly.&lt;/p&gt;

&lt;p&gt;We can access the value with bracket notation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;   &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;
&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with dot notation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-bonus-trick"&gt;
  &lt;/a&gt;
  8. Bonus trick
&lt;/h2&gt;

&lt;p&gt;If we want to add a new item to an array &lt;strong&gt;without mutation&lt;/strong&gt; (which we usually want to avoid), we can create a new array using the ES6 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread operator&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"&gt;slice&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;insert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// first half of array&lt;/span&gt;
  &lt;span class="nx"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="c1"&gt;// new item&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;// rest of array&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;L&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["S", "L", "I", "C", "E"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9"&gt;
  &lt;/a&gt;
  9.
&lt;/h2&gt;

&lt;p&gt;Why was 6 afraid of 7?&lt;/p&gt;

&lt;p&gt;Because 7 ate 9.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope you find some of these JavaScript tricks useful and worth adding to your everyday arsenal.&lt;br&gt;
And remember, being responsible is far more important than being efficient.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>UML diagram for GoF design pattern examples in Python</title>
      <author>Takaaki Teshima</author>
      <pubDate>Mon, 10 May 2021 04:47:47 +0000</pubDate>
      <link>https://dev.to/takaakit/uml-diagram-for-gof-design-pattern-examples-in-python-4j40</link>
      <guid>https://dev.to/takaakit/uml-diagram-for-gof-design-pattern-examples-in-python-4j40</guid>
      <description>&lt;p&gt;This post lists UML diagrams of GoF design pattern examples written in Python.  The UML diagrams are displayed using &lt;em&gt;Diagram Map&lt;/em&gt;. If you want to know about &lt;em&gt;Diagram Map&lt;/em&gt;, see &lt;a href="https://dev.to/takaakit/diagram-map-tracing-uml-sysml-elements-across-diagrams-49i7"&gt;this post&lt;/a&gt;. Also, you can get UML model data and Python code of the examples from &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python"&gt;here&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavioral Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chain-of-responsibility"&gt;Chain of Responsibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command"&gt;Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interpreter"&gt;Interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#iterator"&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mediator"&gt;Mediator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memento"&gt;Memento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#observer"&gt;Observer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strategy"&gt;Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-method"&gt;Template Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visitor"&gt;Visitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Creational Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#abstract-factory"&gt;Abstract Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#builder"&gt;Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#factory-method"&gt;Factory Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prototype"&gt;Prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#singleton"&gt;Singleton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Structural Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#adapter"&gt;Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bridge"&gt;Bridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#composite"&gt;Composite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decorator"&gt;Decorator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#facade"&gt;Facade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flyweight"&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#proxy"&gt;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#chain-of-responsibility"&gt;
  &lt;/a&gt;
  Chain of Responsibility &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A trouble is turned around among supporters, and the trouble will be handled by the supporter who can handle it. There are four types of supporters below:

&lt;ul&gt;
&lt;li&gt;LazySupporter doesn't handle any trouble&lt;/li&gt;
&lt;li&gt;MoodySupporter handles odd ID troubles&lt;/li&gt;
&lt;li&gt;SpecialSupporter handles a trouble of the target ID.&lt;/li&gt;
&lt;li&gt;LimitedSupporter handles troubles below the limit ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ikjlVPXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5xiis69so9sk5azpjtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ikjlVPXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5xiis69so9sk5azpjtf.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/chain_of_responsibility"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/kcLa7su0/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/chain_of_responsibility/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Simple drawing application:

&lt;ul&gt;
&lt;li&gt;Draw a path with points by dragging the mouse.&lt;/li&gt;
&lt;li&gt;Revert to one previous drawing by pressing the Undo button.&lt;/li&gt;
&lt;li&gt;Erase all drawing by pressing the Clear button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Mx_KcRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2xb1c94nu070snwyiob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Mx_KcRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2xb1c94nu070snwyiob.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/command"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/r8b3g7sv/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/command/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#interpreter"&gt;
  &lt;/a&gt;
  Interpreter &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
An interpreter for mini language to operate radio controlled car. It parses the following syntax composed of "forward", "left", "right", and "repeat" commands:&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;program&amp;gt;      ::= program &amp;lt;command list&amp;gt;
&amp;lt;command list&amp;gt; ::= &amp;lt;command&amp;gt;* end
&amp;lt;command&amp;gt;      ::= &amp;lt;repeat&amp;gt; | &amp;lt;action&amp;gt;
&amp;lt;repeat&amp;gt;       ::= repeat &amp;lt;number&amp;gt; &amp;lt;command list&amp;gt;
&amp;lt;action&amp;gt;       ::= forward | right | left
&amp;lt;number&amp;gt;       ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--01aEUwoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjrnadi6jjz2asqico53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--01aEUwoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjrnadi6jjz2asqico53.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/interpreter"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/n1L23exs/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/interpreter/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#iterator"&gt;
  &lt;/a&gt;
  Iterator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Add books in a bookshelf and display the names of the book in turn.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IA3GrPc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yr0x6tiffjv536rtjvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IA3GrPc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yr0x6tiffjv536rtjvr.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/iterator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/skmxbufq/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/iterator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#mediator"&gt;
  &lt;/a&gt;
  Mediator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Show a login dialog for entering a username and password. The dialog has the following elements:

&lt;ul&gt;
&lt;li&gt;"Guest" and "Login" radio buttons&lt;/li&gt;
&lt;li&gt;"Username" and "Password" text fields&lt;/li&gt;
&lt;li&gt;"OK" and "Cancel" buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And change the editable properties of the elements depending on the state of the radio buttons and text fields.&lt;/p&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8yyJIQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yx7sqhqrywki2op6sid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8yyJIQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yx7sqhqrywki2op6sid.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/mediator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/xdykgenz/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/mediator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#memento"&gt;
  &lt;/a&gt;
  Memento &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Without violating encapsulation, capture and externalize an object's internal state so that the object can be returned to this state later (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A dice game in which money increases and decreases:

&lt;ul&gt;
&lt;li&gt;A gamer shakes a dice and the number determine the next state.&lt;/li&gt;
&lt;li&gt;If the number of dice is even, gamer's money doubles, and if it is odd, gamer's money is halved.&lt;/li&gt;
&lt;li&gt;If the gamer's money is less than half of the highest amount, it returns to the highest amount.&lt;/li&gt;
&lt;li&gt;The game is repeated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UXf0KWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv6syu2we3h3lvgkqx28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UXf0KWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv6syu2we3h3lvgkqx28.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/memento"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/pr6Lnxhy/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/memento/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#observer"&gt;
  &lt;/a&gt;
  Observer &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Observers observe a Subject object holding a numerical value and display the value. The display formats are digits and bar charts.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_G4-Kqf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ldugdlkjj8n88nauoam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_G4-Kqf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ldugdlkjj8n88nauoam.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/observer"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/ucg97a86/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/observer/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Allow an object to alter its behavior when its internal state changes. The object will appear to change its class (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Safe security system that the security status changes with time. When you press a button in a dialog, the message displayed will change depending on whether the time is day or night. The internal time of the dialog advances one hour for every second of real time.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9BkXZqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viegibktpwo18ph1pzkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9BkXZqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viegibktpwo18ph1pzkg.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/state"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/L9wnbjea/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/state/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#strategy"&gt;
  &lt;/a&gt;
  Strategy &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from the clients that use it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A game of rock-scissors-paper. Two strategies are available:

&lt;ul&gt;
&lt;li&gt;Random Strategy: showing a random hand signal.&lt;/li&gt;
&lt;li&gt;Mirror Strategy: showing a hand signal from the previous opponent's hand signal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IB1Sloey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gay063tj1ehf5cnc6zvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IB1Sloey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gay063tj1ehf5cnc6zvi.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/strategy"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/axzt2whr/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/strategy/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#template-method"&gt;
  &lt;/a&gt;
  Template Method &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define the skeleton of an algorithm in an operation, deferring some steps to client subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a character or string repeatedly 5 times.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pfbBIr0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faag0u42e4j1kcs0arxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pfbBIr0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faag0u42e4j1kcs0arxr.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/template_method"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/Lpct80wd/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/template_method/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#visitor"&gt;
  &lt;/a&gt;
  Visitor &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Visitor visits the file system composed of files and directories, and displays a list of files/directories.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--beDO4OGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk95xbeucjann8tezcvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--beDO4OGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk95xbeucjann8tezcvo.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/visitor"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/yt6bh847/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/visitor/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#abstract-factory"&gt;
  &lt;/a&gt;
  Abstract Factory &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide an interface for creating families of related or dependent objects without specifying their concrete classes (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create a hierarchical link collection as an HTML file. It can be created in either tabular or list format.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VN-lBJ47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv6oqw0vypj1oit2qh4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VN-lBJ47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv6oqw0vypj1oit2qh4o.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/abstract_factory"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/bdf83h10/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/abstract_factory/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#builder"&gt;
  &lt;/a&gt;
  Builder &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Separate the construction of a complex object from its representation so that the same construction process can create different representations (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create documents in HTML format and text format. It is possible to create different documents in the same construction process.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UxYHpI7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t1ea1eai78pxx576gga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UxYHpI7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t1ea1eai78pxx576gga.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/builder"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/z4asqhc1/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/builder/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#factory-method"&gt;
  &lt;/a&gt;
  Factory Method &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
The subject is a factory to make credit cards. The Factory defines how to create an credit card, but the actual credit card is created by the CreditCardFactory. The "createProduct()" is called a Factory Method, and it is responsible for manufacturing an object.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVpYoHT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4z0n3qgmvpbsl6iei1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVpYoHT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4z0n3qgmvpbsl6iei1a.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/factory_method"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/e0ymt21f/1//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/factory_method/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prototype"&gt;
  &lt;/a&gt;
  Prototype &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string enclosed with a frame line, or drawn with an underline. The Client (Main) registers instances of the Display subclass in the Manager class. When necessary, the Manager class asks those registered instances to return a clone. The Client (Main) requires the returned clones to display.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbKMB-0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f26n923f53g6rg78mgwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbKMB-0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f26n923f53g6rg78mgwx.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/prototype"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/dzy73nk4/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/prototype/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#singleton"&gt;
  &lt;/a&gt;
  Singleton &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Ensure a class has only one instance, and provide a global point of access to it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Check whether the same instance is obtained.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6CpEpJZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoqi1uig68ooc5ct9yyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6CpEpJZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoqi1uig68ooc5ct9yyq.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/singleton"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/71m0ucy5/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/singleton/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adapter"&gt;
  &lt;/a&gt;
  Adapter &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display the given string as follows&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-- Nice to meet you --
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or display it as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[ Nice to meet you ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5iuVQRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmwsz4nd3fiw4q7r4we6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5iuVQRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmwsz4nd3fiw4q7r4we6.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/adapter"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/utp3mbjo/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/adapter/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#bridge"&gt;
  &lt;/a&gt;
  Bridge &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Decouple an abstraction from its implementation so that the two can vary independently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display only one line or display the specified number of lines.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWKKngSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/it5s9sjkfnyckhi4yfzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWKKngSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/it5s9sjkfnyckhi4yfzf.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/bridge"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/g7dphf6e/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/bridge/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#composite"&gt;
  &lt;/a&gt;
  Composite &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Compose objects into tree structures to represent whole-part hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Represents a file system composed of files and directories. FileSystemElement makes it possible to treat File and Directory uniformly.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFdyYe73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mujxvdmu313bc2rq6jmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFdyYe73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mujxvdmu313bc2rq6jmp.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/composite"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/q8hudxfm/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/composite/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#decorator"&gt;
  &lt;/a&gt;
  Decorator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string with decorative frames. The frames can be combined arbitrarily.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJw5s5y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lybgbpaugqweps0kx3gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJw5s5y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lybgbpaugqweps0kx3gd.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/decorator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/2sko5rwy/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/decorator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#facade"&gt;
  &lt;/a&gt;
  Facade &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create a simple homepage through a Facade (PageCreator). The Facade gets info from the DataLibrary and uses the info to create an HTML file.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUwfqOks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiq6tw5qknj1tc30z3tb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUwfqOks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiq6tw5qknj1tc30z3tb.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/facade"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/nfh5kmge/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/facade/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#flyweight"&gt;
  &lt;/a&gt;
  Flyweight &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Use sharing to support large numbers of fine-grained objects efficiently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string consisting of large characters (0-9 digits only). Large character objects are not created until they are needed. And the created objects are reused.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ksO8a6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2bysm3corkh4q1miofx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksO8a6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2bysm3corkh4q1miofx.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/flyweight"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/d680tLjr/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/flyweight/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#proxy"&gt;
  &lt;/a&gt;
  Proxy &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a surrogate or placeholder for another object to control access to it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Print on a named printer. Setting and changing the printer name is done by Proxy (ProxyPrinter). At the time of printing, create an instance of the RealSubject (RealPrinter) for the first time.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YflZ4azN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aajt7bycb23312bmo2x3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YflZ4azN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aajt7bycb23312bmo2x3.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/proxy"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/k72xzr49/7//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/proxy/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Gamma, E. et al. Design Patterns: Elements of Reusable Object-Oriented Software, Addison-Wesley, 1994&lt;/li&gt;
&lt;li&gt;Hiroshi Yuki. Learning Design Patterns in Java [In Japanese Language], Softbank publishing, 2004&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/takaakit/diagram-map-tracing-uml-sysml-elements-across-diagrams-49i7"&gt;Diagram Map: tracing UML/SysML elements across diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takaakit/design-pattern-examples-in-python"&gt;Design Pattern Examples in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>uml</category>
      <category>gof</category>
      <category>designpatterns</category>
      <category>python</category>
    </item>
    <item>
      <title>Basics of Java #10</title>
      <author>Chathu Rashmini</author>
      <pubDate>Mon, 10 May 2021 04:39:20 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-10-lb2</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-10-lb2</guid>
      <description>&lt;p&gt;In this article we are going to learn about how to read user inputs in java.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-user-inputs"&gt;
  &lt;/a&gt;
  Read user inputs
&lt;/h1&gt;

&lt;p&gt;To read user inputs first you need to import &lt;code&gt;java.util.Scanner&lt;/code&gt;. Here &lt;code&gt;scanner&lt;/code&gt; is a predefined java class. Let's see how we can read inputs from the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Age: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Line 01 prints 'Age: ' in the terminal for the user to input his age. Line 02 has created an object named &lt;code&gt;inputAge&lt;/code&gt; which belongs to &lt;code&gt;Scanner&lt;/code&gt; class. You can see that I have used &lt;code&gt;new&lt;/code&gt; to create the object. Then within the parenthesis I have entered &lt;code&gt;System.in&lt;/code&gt;. This is to get inputs into the system. Think it in the same way as &lt;code&gt;System.out&lt;/code&gt;. So line 02 reads the user input (age that user enters) and assigns it to &lt;code&gt;inputAge&lt;/code&gt;.&lt;br&gt;
Now try to print &lt;code&gt;inoutAge&lt;/code&gt;. If you run the following command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputAge&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will see that the program does not print the inputted age, but a long sentence. So how can you print the age? For this you have to use &lt;code&gt;nextByte()&lt;/code&gt; predefined method from &lt;code&gt;Scanner&lt;/code&gt; class. It scans the next token of the input as a byte. Check the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Age: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
        &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextByte&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// line 03&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 04&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in line 03 we have declared a new variable &lt;code&gt;age&lt;/code&gt; which is of type &lt;code&gt;byte&lt;/code&gt;. Then we have applied &lt;code&gt;nextByte()&lt;/code&gt; method to the &lt;code&gt;inputAge&lt;/code&gt;. Then when you print the &lt;code&gt;age&lt;/code&gt; in line 04 you can see the output as expected. Also in line 04 'implicit casting' takes place and &lt;code&gt;age&lt;/code&gt; is converted into a string by java itself.&lt;/p&gt;

&lt;p&gt;Try to enter a number like 10.5 (with decimal digits) and check whether the code will run smoothly.&lt;br&gt;
No right? You will definitely get an error. This is because we have declared &lt;code&gt;age&lt;/code&gt; as a &lt;code&gt;byte&lt;/code&gt; type variable. So it does not accept any floating point numbers. For that there is another predefined method &lt;code&gt;nextFloat()&lt;/code&gt; in the &lt;code&gt;Scanner&lt;/code&gt; class. By using it you can take numbers with floating points as user inputs. Go through the code given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Height in meters: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputHeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"m tall."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's see how can we ask the user to input a string and then to print that string in the terminal. Look at the code given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter your name: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// line 03&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 04&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in line 01 we are asking the user to input his name. Probably he will enter his full name (which means more than one word). Let's assume that he has entered as "Edward Cullen". This name is read by line 02. Now we have to convert this &lt;code&gt;Scanner&lt;/code&gt; object &lt;code&gt;name&lt;/code&gt; into a string. For that here I have used the predefined method &lt;code&gt;next()&lt;/code&gt;. However, when the line 04 prints the output you will only see 'Hello Edward'. Why is that? That is because the &lt;code&gt;next()&lt;/code&gt; method reads only one token. Which means it does not read the whole line. If you want to read the full line use method &lt;code&gt;nextLine()&lt;/code&gt; as shown in the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Full Name: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Oh hey "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;nextLine()&lt;/code&gt; method reads the full name and assign it to the string &lt;code&gt;fullName&lt;/code&gt;. We have used &lt;code&gt;trim()&lt;/code&gt; method just to eliminate any unnecessary white spaces that might be there in the user input. Using &lt;code&gt;trim()&lt;/code&gt; is not mandatory. If you input name as '        Jacob Black     ', you will get the output as 'Oh hey Jacob Black' without any unnecessary spaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Ask the user to enter his name (empName) and salary (salary). Then add a 20,000 bonus to his salary (salWithBonus) and print the line "Hi  your total salary with bonus is ".&lt;br&gt;
Ex: &lt;br&gt;
Input-:&lt;br&gt;
Full Name:      Charlie Swan&lt;br&gt;
Basic Salary: 100000&lt;br&gt;
Expected output-:&lt;br&gt;
Hi Charlie Swan your total salary with bonus is 120000.0&lt;/p&gt;

&lt;p&gt;With that we can wrap up this article. Head to the next article to learn more about java :P&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
