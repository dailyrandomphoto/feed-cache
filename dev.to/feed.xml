<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Which One is The Best Tech Stack Spring-Boot or Laravel for UberEats Clone App?
</title>
      <author>Johnmarison</author>
      <pubDate>Tue, 28 Sep 2021 11:18:12 +0000</pubDate>
      <link>https://dev.to/johnmarison2/which-one-is-the-best-tech-stack-spring-boot-or-laravel-for-ubereats-clone-app-2ifg</link>
      <guid>https://dev.to/johnmarison2/which-one-is-the-best-tech-stack-spring-boot-or-laravel-for-ubereats-clone-app-2ifg</guid>
      <description>&lt;p&gt;On-demand food delivery business online is now at its peak on startups among entrepreneurs. Due to its heavy market value in real-time, contemporary business personalities are highly focused on the profitable marketplace. In which, the UberEats clone app is the most favored for them with high benefits already in-built itself.&lt;/p&gt;

&lt;p&gt;Following, developing an UberEats clone for business could be done much more effectively through using some powerful tech-stack. On that, we are going to see about the two, Spring-boot and Laravel, backend frameworks on the basis of which one is the best for you to build your UberEats clone app to the present market demands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UberEats Clone - An Overview of Client-centric Development Needs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ready to Move Design&lt;/strong&gt; - Today’s increasing competition in the food delivery marketplace rushes new service providers to present themselves online soon as possible. So that their new business apps are effectively visible for the users in real-time shortly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Testing&lt;/strong&gt; - The high possibility to go live that quick with the UberEats clone app for the entrepreneurs’ initiation is depending on fast unit testing. So that all the bugs or exceptions would be entirely clear for perfect business app output speedily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Features Add-on Solution&lt;/strong&gt; - Even the readymade UberEats clone app solution available with all the very latest in-app options, having facilitated with additional add-ons is much expected by contemporary entrepreneurs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Security&lt;/strong&gt; - To securely sustain the digitized food delivery business online, it is crucial to have your yet-to-develop business app as robust. Therefore, ensuring high security is always considered important in UberEats clone development at present. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced App Performance&lt;/strong&gt; - The more smoothie business app performance naturally acquires more users in fact. Hence, the food delivery app to businesses should possess such achievement for great user value and service productivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which One Is The Best Tech Stack Spring-Boot or Laravel for UberEats Clone?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring-Boot and Laravel, both are very popular backend frameworks in the development platform. And, could be widely used by most clone app developers around the world. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring-Boot and Laravel - UberEats Clone App Development Side of Notable Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9ClDM-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpadeqtjwwkj19a7p8by.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9ClDM-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpadeqtjwwkj19a7p8by.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring-Boot and Laravel - UberEats Clone App Development Side of Notable Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-QYHFU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0j072bbdornth5ho3oh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-QYHFU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0j072bbdornth5ho3oh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In which, the majority of today’s developers are highly preferred Laravel compared to Spring-boot because of its notable assistance in the UberEats clone app development as viewed.&lt;/p&gt;

&lt;p&gt;Following, the majority of today’s developers using the Laravel framework focus on its crucial benefits as discussed. Developing an UberEats clone for the on-demand food ordering service startup highly preferred some crucial custom-centric options. So that building your business app according to requirements makes your clients benefit from advanced stuff. &lt;/p&gt;

&lt;p&gt;Taking this into account, the following strategies greatly help you as a developer to create this ready-to-go food delivery app too progressive. For i.e., you could develop your new UberEats clone app powerful to the latest marketplace using the Laravel framework as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Progressively You Can Develop Your UberEats clone with Selective Tech-stack?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Built-in Tech Traits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Laravel has its own templating system. Through this, you can format existing/default data and create a new one based on demands. So that the client could smartly get the new food delivery app apt to his exact business model and plan requirement. &lt;/p&gt;

&lt;p&gt;For i.e., it lets you remove any premade features and add a new one, and the entrepreneurs can create their apps by modulating the complete app look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Utilizing Laravel’s powerful authentication technology, you could create your app much faster than usual. So that the possibility of getting a fully developed new app output for launching is reduced to days.&lt;/p&gt;

&lt;p&gt;As discussed earlier, the quicker the app launching smartly gains high user value for the greatest productivity evolutions. Also, such an advantage provides both sides, on you and on your client-side benefits evenly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full-customizing Solution Provision&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Through your future-ready app creation with Laravel, you can provide a fully tailored app creation solution to entrepreneurs. Using the regularly improving framework technology you can smartly build your food delivery app with extraordinary functionality nature.&lt;/p&gt;

&lt;p&gt;When it goes to the custom modulations, it completes with uniqueness in the actual business app output. And, the top of new technology options for the freshly building food delivery app is finely possessed greatness at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robust App Security Provision&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As your UberEats clone developed with the safeguarding framework Laravel, you and your clients smartly receive one of the most important security benefits on the digitized business functionality certainly. &lt;/p&gt;

&lt;p&gt;As a result, you can develop a secured on-demand food delivery app for businesses that do not allow any malware activities or security threats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottom Line:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.spotnrides.com/ubereats-clone"&gt;UberEats clone&lt;/a&gt; app is now a powerful app source to develop a food delivery app as per the entrepreneurs’ requirements. This is why the clone script is becoming too famous among service providers nowadays. &lt;/p&gt;

&lt;p&gt;As the backend program plays a major role in the food delivery service business online, creating it strong enough using the Laravel framework would be more effective for you.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>appdevelopment</category>
      <category>springboot</category>
    </item>
    <item>
      <title>How To Learn About Artificial Intelligence In Only 10 Days.
</title>
      <author>XTEALTH</author>
      <pubDate>Tue, 28 Sep 2021 11:16:44 +0000</pubDate>
      <link>https://dev.to/xtealth/how-to-learn-about-artificial-intelligence-in-only-10-days-5coe</link>
      <guid>https://dev.to/xtealth/how-to-learn-about-artificial-intelligence-in-only-10-days-5coe</guid>
      <description>&lt;p&gt;Artificial intelligence is trending topic in technology related field and currently many colleges and universities are now adding Artificial intelligence and machine learning in  their technology courses and due to which its creating new Artificial intelligence technologists  , which can advance this Artificial intelligence  industry.&lt;/p&gt;

&lt;p&gt;Below are some of the ways you can learn Artificial intelligence in 10 days. &lt;/p&gt;

&lt;p&gt;1&lt;br&gt;
First setup your goal for Artificial intelligence learning and follow that goal. &lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
Learn basic Python  , there are many online learning Platforms you can learn there. &lt;/p&gt;

&lt;p&gt;3&lt;br&gt;
Learn from youtube Artificial intelligence projects. &lt;/p&gt;

&lt;p&gt;4&lt;br&gt;
Learn about tensorflow and their projects. &lt;/p&gt;

&lt;p&gt;5&lt;br&gt;
Create some AI projects with the help of Python and Tensorflow.&lt;/p&gt;

&lt;p&gt;6&lt;br&gt;
Do debugging in your project. &lt;/p&gt;

&lt;p&gt;Learning Artificial intelligence is totally depends on the person , how quickly they can grab programming and technology. &lt;/p&gt;

&lt;p&gt;Artificial intelligence will be change the ways of learning in the future so it's very important to be get update in the field of Artificial intelligence.&lt;br&gt;
We are XTEALTH, a technology company which can develop and work on new technologies which can solve problems and  technologies for the future like Artificial intelligence  and machine learning. &lt;/p&gt;

&lt;p&gt;We are Artificial intelligence  based services and products development company &lt;a href="https://www.xtealthglobal.com"&gt; XTEALTH.&lt;/a&gt;&lt;br&gt;
We are developing Technology Developers community around the world &lt;/p&gt;

&lt;p&gt;Join our Discord Channel&lt;br&gt;
Links are in the description below.&lt;br&gt;
Like and Share.&lt;br&gt;
Join our Discord Channel  and visit our  website.&lt;br&gt;
Inviting people to join our Discord channel &lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/Errt88sE"&gt;https://discord.gg/Errt88sE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>python</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>How can I integrate the CCAvenue payment gateway in flutter</title>
      <author>anveshrajb</author>
      <pubDate>Tue, 28 Sep 2021 11:14:57 +0000</pubDate>
      <link>https://dev.to/anvesh/how-can-i-integrate-the-ccavenue-payment-gateway-in-flutter-368g</link>
      <guid>https://dev.to/anvesh/how-can-i-integrate-the-ccavenue-payment-gateway-in-flutter-368g</guid>
      <description></description>
    </item>
    <item>
      <title>Flutter: Interesting packages, part 3.</title>
      <author>Samuel Wahome</author>
      <pubDate>Tue, 28 Sep 2021 11:07:21 +0000</pubDate>
      <link>https://dev.to/samueldotcloud/flutter-interesting-packages-part-3-2c5a</link>
      <guid>https://dev.to/samueldotcloud/flutter-interesting-packages-part-3-2c5a</guid>
      <description>&lt;p&gt;Welcome one and all to yet another edition of this blog series, that revolves around flutter packages that can and may be included in your individual flutter projects. The first and second parts can be found right &lt;a href="https://medium.com/@samuelwahome/flutter-interesting-packages-part-1-bcbae82e4d4b"&gt;here&lt;/a&gt; and &lt;a href="https://medium.com/@samuelwahome/flutter-interesting-packages-part-2-b8edd9292e90"&gt;here&lt;/a&gt;. Finally, enough of the niceties and let's cut to the chase.&lt;/p&gt;




&lt;p&gt;1.&lt;a href="https://pub.dev/packages/video_player"&gt;video_player&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Need to include video playback functionality in your flutter app, well look no further than this, as the Flutter dev team has your back with this awesome plugin. It is able to display videos by integrating with &lt;a href="https://exoplayer.dev/"&gt;ExoPlayer&lt;/a&gt; and &lt;a href="https://developer.apple.com/documentation/avfoundation/avplayer"&gt;AVPlayer&lt;/a&gt; for Android and iOS specifically. As much as it is a great package, the tooling isn't exactly a piece of cake, as one would be required to build their own custom controls for volume, playback speed, and everything in between. Plus &lt;a href="https://docs.fileformat.com/video/srt/#:~:text=SRT%20(SubRip%20file%20format)%20is,content%20after%20it%20is%20produced."&gt;SRT&lt;/a&gt; is the only subtitle format it supports at the moment, hence this plugin does have some improvements that should be considered in the near future.&lt;br&gt;
Other than that, if your needs aren't that complex, then this package is definitely a good recommendation for you.&lt;/p&gt;

&lt;p&gt;2.&lt;a href="https://pub.dev/packages/chewie"&gt;chewie&lt;/a&gt;&lt;br&gt;
Enough judgment of the &lt;a href="https://pub.dev/packages/video_player"&gt;video_player&lt;/a&gt; plugin, as it may have just found a suitable companion. Long story short, chewie simply wraps around the video player plugin and adds custom controls that you can easily adjust to your liking, resulting in a unique and positive user experience. In case you do need a bit of help integrating both chewie and &lt;a href="https://pub.dev/packages/video_player"&gt;video_player&lt;/a&gt; in your flutter app, this &lt;a href="https://medium.com/flutterdevs/video-player-in-flutter-22202be72d6e"&gt;post&lt;/a&gt; by &lt;a href="https://medium.com/@shaiq_khan"&gt;Shaiq khan&lt;/a&gt; should be of much help. Therefore, this package is definitely a good recommendation.&lt;/p&gt;

&lt;p&gt;3.&lt;a href="https://pub.dev/packages/url_launcher"&gt;url_launcher&lt;/a&gt;&lt;br&gt;
Ever required your flutter to handle URLs? Well, then this package may be just what you need to accomplish just that. This package supports a wide variety of URL schemes, both on Android and iOS, hence this package definitely has your back. All in all, this package is definitely a good recommendation for all interested flutter developers out there.&lt;/p&gt;

&lt;p&gt;4.&lt;a href="https://pub.dev/packages/flutter_blurhash"&gt;flutter_blurhash&lt;/a&gt;&lt;br&gt;
Ever required a placeholder for an image that may be loaded from storage or a network? Then this package may be just what you need for that very purpose. I know that I've mentioned &lt;a href="https://pub.dev/packages/transparent_image"&gt;transparent_image&lt;/a&gt; somewhere in one of my other posts. Well, this package simply serves as an alternative to that, depending of course, on your preferences or specific use-case. In case you do need help incorporating this package, then this blog &lt;a href="https://medium.com/flutterdevs/exploring-blurhash-image-placeholder-in-flutter-24dad611c487"&gt;post&lt;/a&gt; should be of much help. All in all, this package is definitely a good recommendation.&lt;/p&gt;

&lt;p&gt;5.&lt;a href="https://pub.dev/packages/flutter_bloc"&gt;flutter_bloc&lt;/a&gt;&lt;br&gt;
All this talk about &lt;a href="https://flutter.dev/docs/development/data-and-backend/state-mgmt"&gt;state management&lt;/a&gt;, then suddenly bloc pops into the fray. In addition to other solutions out there such as &lt;a href="https://pub.dev/packages/provider"&gt;provider&lt;/a&gt;, &lt;a href="https://pub.dev/packages/flutter_bloc"&gt;flutter_bloc&lt;/a&gt; simply enables you to share application state between screens, and across your app. Therefore, depending on your specific use case, then this package is definitely a good recommendation.&lt;/p&gt;

&lt;p&gt;6.&lt;a href="https://pub.dev/packages/share_plus"&gt;share_plus&lt;/a&gt;&lt;br&gt;
Do you require your flutter application to be able to share content with other apps, much like implicit &lt;a href="https://developer.android.com/guide/components/intents-filters"&gt;intents&lt;/a&gt; in android? Well, look no further as this package definitely has your back. This package enables you to share files, text, and links with ease, and also invokes the share dialog on your behalf, so it definitely has you covered. All in all, this package is definitely a worthy recommendation.&lt;/p&gt;

&lt;p&gt;7.&lt;a href="https://pub.dev/packages/device_info_plus"&gt;device_info_plus&lt;/a&gt;&lt;br&gt;
Do you need to collect information on the specific device your application is running on, perhaps for analytical or debugging purposes? Well, look no further as this package may just be what you need. With this package, you are able to get current device information from within the Flutter application and is supported on most platforms, which is definitely a huge plus. All in all, this package is definitely a good recommendation.&lt;/p&gt;

&lt;p&gt;8.&lt;a href="https://pub.dev/packages/sign_in_with_apple"&gt;sign_in_with_apple&lt;/a&gt;&lt;br&gt;
Are you a flutter dev that needs an authentication service that is specific to Apple device users, specifically via their Apple ID? Then this package may be just what you need. Implementing this functionality goes beyond just importing this package in your app, but the official package docs do a good job of simplifying the process to ensure a smooth user experience. All in all, this package is definitely a worthy recommendation.&lt;/p&gt;

&lt;p&gt;9.&lt;a href="https://pub.dev/packages/android_alarm_manager_plus"&gt;android_alarm_manager_plus&lt;/a&gt;&lt;br&gt;
Ever needed to include an alarm clock-like functionality in your Flutter application? Then this package may be just what you are looking for. This package works by accessing the android &lt;a href="https://developer.android.com/reference/android/app/AlarmManager"&gt;AlarmManager&lt;/a&gt; service, then runs some dart code underneath to extend even more control to your Flutter app.&lt;br&gt;
With that said, there is one catch though, as this package only caters to the android platform, which kinda beats the logic of designing an app that can work on more than one platform. Anyways, this package is still definitely a worthy recommendation to all who may need it.&lt;/p&gt;

&lt;p&gt;10.&lt;a href="https://pub.dev/packages/infinite_scroll_pagination"&gt;infinite_scroll_pagination&lt;/a&gt;&lt;br&gt;
All this talk about efficiently retrieving information from databases and suddenly pagination pops into mind. Need a package for this exact use case? Well, look no further as this package may be just what you need. Call it auto-pagination, lazy loading pagination, progressive loading pagination, or endless scrolling pagination, then this package definitely has your back, and is also a worthy recommendation to all who may need it.&lt;/p&gt;




&lt;p&gt;I guess that has been a lot to swallow😂. All the afro mentioned packages have null safety incorporated into them, hence no worries about incompatibility with recent versions of Flutter. If you've loved this post, leaving a like❤ won't hurt one bit.&lt;br&gt;
To all readers, cheers to code🥂, and have a blessed day.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
      <category>dart</category>
    </item>
    <item>
      <title>Making of Three Dots Jumping Loader or Loading Status Animation using Vanilla CSS only</title>
      <author>Designing Coder</author>
      <pubDate>Tue, 28 Sep 2021 10:47:50 +0000</pubDate>
      <link>https://dev.to/designingcoder/making-of-three-dots-jumping-loader-or-loading-status-animation-using-vanilla-css-only-3f1b</link>
      <guid>https://dev.to/designingcoder/making-of-three-dots-jumping-loader-or-loading-status-animation-using-vanilla-css-only-3f1b</guid>
      <description>&lt;p&gt;Let's go step-by-step walk-through on How to Make a Simple Three Dots Jumping Loader or Loading Status Animation using Vanilla or Pure CSS only.&lt;br&gt;
&lt;em&gt;If you want to skip reading then you can watch YouTube video on it. The link is at the end of the article.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step1-setting-up-theme-and-container"&gt;
  &lt;/a&gt;
  Step-1: Setting up theme and container
&lt;/h2&gt;

&lt;p&gt;Firstly, we will create a container in which we can have our loader and caption. The following will place the container at the centre of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class =&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"caption"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;midnightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have added a yellow border for the ease of visualisation, which should be removed at the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step2-adding-the-three-dots"&gt;
  &lt;/a&gt;
  Step-2: Adding the three dots
&lt;/h2&gt;

&lt;p&gt;Now we will add the three dots. Since all the three dots have similar look, we can provide them a common class as &lt;code&gt;circle&lt;/code&gt; and assign unique ids as &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; for animation purpose(you'll find why and how as we proceed further).&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Here also we have added yellow border for the ease of visualisation, which should be removed at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class =&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"caption"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;   &lt;span class="nc"&gt;.loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step3-adding-the-caption"&gt;
  &lt;/a&gt;
  Step-3: Adding the caption
&lt;/h2&gt;

&lt;p&gt;Let's add our caption and make sure it is properly placed properly with respect to the loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        ...
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"caption"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;We are almost there...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;    &lt;span class="nc"&gt;.caption&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step4-animating-the-loader"&gt;
  &lt;/a&gt;
  Step-4: Animating the loader
&lt;/h2&gt;

&lt;p&gt;We add a common animation property with animation-name as jump, animation-duration as 1 second, animation-timing-function as linear and animation-iteration-count as infinite. To make them jump at different time, we add animation-dealy to ids &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;    &lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
        &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;jump&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;jump&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="err"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-75px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="nf"&gt;#b&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;#c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can remove the yellow border, we don't need them anymore. Finally, we have our loading animation ready. Thank you for reading.You can also watch a How To YouTube Video on this topic.&lt;/p&gt;

&lt;p&gt;Feel free to connect on Social Media. Please feel free to drop you opinion or any helpful tips.&lt;/p&gt;

&lt;p&gt;Social Media Links: &lt;a href="https://designingcoder.github.io"&gt;https://designingcoder.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c_408ArF1NM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>animation</category>
      <category>webdesign</category>
    </item>
    <item>
      <title>In 7 lines of code, you can turn any Database into Airtable-like spreadsheet using NocoDB!  </title>
      <author>o1lab</author>
      <pubDate>Tue, 28 Sep 2021 10:31:37 +0000</pubDate>
      <link>https://dev.to/o1lab/in-7-lines-of-code-you-can-turn-any-database-into-airtable-like-spreadsheet-using-nocodb-51ah</link>
      <guid>https://dev.to/o1lab/in-7-lines-of-code-you-can-turn-any-database-into-airtable-like-spreadsheet-using-nocodb-51ah</guid>
      <description>&lt;h2&gt;
  &lt;a href="#so-what-is-airtable-"&gt;
  &lt;/a&gt;
  So what is Airtable ?
&lt;/h2&gt;

&lt;p&gt;Airtable is a low-code platform for building collaborative apps. It works like a part spreadsheet &amp;amp; part database.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-is-nocodb-"&gt;
  &lt;/a&gt;
  What is NocoDB ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nocodb/nocodb"&gt;NocoDB is a free &amp;amp; open source Airtable alternative&lt;/a&gt; - that  turns your existing MySQL/Postgres databases into a smart and beautiful spreadsheets. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Jo1mE5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv98dny7q93srxetpi7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Jo1mE5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv98dny7q93srxetpi7e.png" alt="NocoDB - The Open Source Airtable"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-show-me-the-code"&gt;
  &lt;/a&gt;
  Now, show me the code.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Noco&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nocodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Noco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({}));&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Visit : localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dashboard`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lets-break-down-the-7-lines"&gt;
  &lt;/a&gt;
  Let's break down the 7 lines.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// require express &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;

    &lt;span class="c1"&gt;// require nocodb&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Noco&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nocodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// mount nocodb as a middleware&lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Noco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({}));&lt;/span&gt;

    &lt;span class="c1"&gt;// print &lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Visit : localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dashboard`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

    &lt;span class="c1"&gt;// listen to a port &lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Yes, that is it - simple, minimalistic &amp;amp; boring. Like the way it should while starting something new. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-how-to-try-this-quickly-"&gt;
  &lt;/a&gt;
  So how to try this quickly ?
&lt;/h2&gt;

&lt;p&gt;You can get started with just one command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-nocodb-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d --name nocodb -p 8080:8080 nocodb/nocodb:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#where-can-i-find-more-about-the-project-"&gt;
  &lt;/a&gt;
  Where can I find more about the project ?
&lt;/h2&gt;

&lt;p&gt;Please find it below -&amp;gt; &lt;a href="https://github.com/nocodb/nocodb"&gt;fork it&lt;/a&gt; / &lt;a href="https://github.com/nocodb/nocodb"&gt;star it&lt;/a&gt; / &lt;a href="https://github.com/nocodb/nocodb"&gt;twist it&lt;/a&gt; / &lt;a href="https://github.com/nocodb/nocodb"&gt;turn it&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nocodb"&gt;
        nocodb
      &lt;/a&gt; / &lt;a href="https://github.com/nocodb/nocodb"&gt;
        nocodb
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🔥 🔥  The Open Source Airtable alternative  - Powered by Vue.js 🚀 🚀  
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    &lt;b&gt;
        &lt;a href="https://www.nocodb.com" rel="nofollow"&gt;NocoDB&lt;/a&gt;&lt;br&gt;
    &lt;/b&gt;
    ✨ The Open Source Airtable Alternative ✨ &lt;br&gt;
&lt;/h1&gt;
&lt;p&gt;
Turns any MySQL, PostgreSQL, SQL Server, SQLite &amp;amp; MariaDB into a smart-spreadsheet
&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/github/NocoDB/NocoDB" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4e084bac046962268fcf7a8aaf3d4ac422d3327564f9685c9d1b57aa56b142e9/68747470733a2f2f7472617669732d63692e6f72672f6477796c2f657374612e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="http://nodejs.org/download/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78a6449b07220242899619ce10cd5c39cc1e74992b768d308bd98f2a7e9995ae/68747470733a2f2f62616467656e2e6e65742f6e706d2f6e6f64652f6e657874" alt="Node version"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/NocoDB" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ec77e5fb18e5c0eef7b879f7b1473bc68ce6a354bdfdb9510c3bf70ad168eded/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f4e6f636f44422e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f772532302534304e6f636f4442" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
    &lt;a href="http://www.nocodb.com" rel="nofollow"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; •
    &lt;a href="https://discord.gg/5RgZmkW" rel="nofollow"&gt;&lt;b&gt;Discord&lt;/b&gt;&lt;/a&gt; •
    &lt;a href="https://twitter.com/nocodb" rel="nofollow"&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133762127-e94da292-a1c3-4458-b09a-02cd5b57be53.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PB_59gfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133762127-e94da292-a1c3-4458-b09a-02cd5b57be53.png" alt="OpenSourceAirtableAlternative"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/chinese.md"&gt;🇨🇳   读我&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/french.md"&gt;🇫🇷   Lisez-moi&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/german.md"&gt;🇩🇪    Liesmich&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/spanish.md"&gt;🇲🇽    Léame&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/portuguese.md"&gt;🇵🇹   Leia-me&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/italian.md"&gt;🇮🇹   Leggi&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/dutch.md"&gt;🇳🇱    Leesmij&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/japanese.md"&gt;🇯🇵   私を読む&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/korean.md"&gt;🇰🇷   소개글&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/russian.md"&gt;🇷🇺   Прочти меня&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/indonesian.md"&gt;🇮🇩   Baca aku&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/62d299d2b7261e4c5f757e5ac9bc313ef9203b9b819dedf340db82138f8da065/68747470733a2f2f7374617469632e73636172662e73682f612e706e673f782d707869643d63313261373763632d383535652d343630322d386130662d363134623264306461353661"&gt;&lt;img src="https://camo.githubusercontent.com/62d299d2b7261e4c5f757e5ac9bc313ef9203b9b819dedf340db82138f8da065/68747470733a2f2f7374617469632e73636172662e73682f612e706e673f782d707869643d63313261373763632d383535652d343630322d386130662d363134623264306461353661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/nocodb?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-nocodb" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9cff91c3d5ada7906ec16f4adbde10de461bf84718d3cfbb0d37c8ca1ffc2a2d/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d323937353336267468656d653d6461726b" alt="NocoDB - The Open Source Airtable alternative | Product Hunt" width="250" height="54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
Quick try&lt;/h1&gt;

&lt;h3&gt;
1-Click Deploy&lt;/h3&gt;
&lt;h4&gt;
Heroku&lt;/h4&gt;
&lt;a href="https://heroku.com/deploy?template=https://github.com/npgia/nocodb-seed-heroku" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/6979881d5a96b7b18a057083bb8aeb87ba35fc279452e29034c1e1c49ade0636/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e737667" width="300px" alt="Deploy NocoDB to Heroku with 1-Click"&gt;
&lt;/a&gt;
&lt;br&gt;
&lt;h3&gt;
Using Docker&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;docker run -d --name nocodb -p 8080:8080 nocodb/nocodb:latest&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;To persist data you can mount volume at &lt;code&gt;/usr/app/data/&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
Using Npm&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npx create-nocodb-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
Using Git&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/nocodb/nocodb-seed
cd nocodb-seed
npm install
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
GUI&lt;/h3&gt;
&lt;p&gt;Access Dashboard using : &lt;a href="http://localhost:8080/dashboard" rel="nofollow"&gt;http://localhost:8080/dashboard&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Join Our Community&lt;/h1&gt;
&lt;a href="https://discord.gg/5RgZmkW" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/8a7e4d7b3342da59bf8e778636f0860c8045593cc8003a834f88b0315782760e/68747470733a2f2f696e7669646765742e737769746368626c6164652e78797a2f3552675a6d6b57" alt="Join NocoDB : Free &amp;amp; Open Source Airtable Alternative"&gt;
&lt;/a&gt;
&lt;br&gt;
&lt;h1&gt;
Screenshots&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759229-4275b934-873b-4a9b-9f23-96470fec9775.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rdup1vIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759229-4275b934-873b-4a9b-9f23-96470fec9775.png" alt="2"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759218-f8b0bffc-707f-451c-82f2-b5ba2573d6a6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6LATNShL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759218-f8b0bffc-707f-451c-82f2-b5ba2573d6a6.png" alt="1"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759245-a536165b-55f1-46a8-a74e-1964e7e481c6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wv2SIY6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759245-a536165b-55f1-46a8-a74e-1964e7e481c6.png" alt="7"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759240-dd3f2509-aab7-4bd1-9a58-4c2dff08f2f2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zao1XzmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759240-dd3f2509-aab7-4bd1-9a58-4c2dff08f2f2.png" alt="5"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759242-2311a127-17c8-406c-b865-1a2e9c8ee398.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6vTK1eTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759242-2311a127-17c8-406c-b865-1a2e9c8ee398.png" alt="6"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759234-9b539029-be36-4a35-b55a-bee3ebd0e010.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcJfIMgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759234-9b539029-be36-4a35-b55a-bee3ebd0e010.png" alt="3"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759236-dc182129-3768-4e23-874e-98f5f32e962c.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fdapWRRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759236-dc182129-3768-4e23-874e-98f5f32e962c.png" alt="4"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759253-bb9bc729-ee28-4f86-ab95-7d112c0815f2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ve3FcC51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759253-bb9bc729-ee28-4f86-ab95-7d112c0815f2.png" alt="11"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759250-ebd75ecf-31db-4a17-b2d7-2c43af78a54e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aS0r1Yof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759250-ebd75ecf-31db-4a17-b2d7-2c43af78a54e.png" alt="10"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759248-3a7141e0-4b7d-4079-a5f9-cf8611d00bc5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qWJU8PJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759248-3a7141e0-4b7d-4079-a5f9-cf8611d00bc5.png" alt="8"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759249-8c1a85c2-a55c-48f6-bd58-aa6b4195cce7.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fXwYsZln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759249-8c1a85c2-a55c-48f6-bd58-aa6b4195cce7.png" alt="9"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Features&lt;/h1&gt;
&lt;h3&gt;
Rich Spreadsheet Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
⚡  Search, sort, filter, hide columns with uber ease&lt;/li&gt;
&lt;li&gt;
⚡  Create Views : Grid, Gallery, Kanban, Gantt, Form&lt;/li&gt;
&lt;li&gt;
⚡  Share Views : public &amp;amp; password protected&lt;/li&gt;
&lt;li&gt;
⚡  Personal &amp;amp; locked Views&lt;/li&gt;
&lt;li&gt;
⚡  Upload images to cells (Works…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nocodb/nocodb"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#do-you-have-a-video-demo-"&gt;
  &lt;/a&gt;
  Do you have a video demo ?
&lt;/h2&gt;

&lt;p&gt;We do!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-npx"&gt;
  &lt;/a&gt;
  Using npx
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/K-UEecQyiOk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-docker"&gt;
  &lt;/a&gt;
  Using docker
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/v6Nn75P1p7I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>node</category>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I have built Zero: Fast and high performance Python RPC framework to build microservices</title>
      <author>Azizul Haque Ananto</author>
      <pubDate>Tue, 28 Sep 2021 10:18:18 +0000</pubDate>
      <link>https://dev.to/ananto30/i-have-built-zero-fast-and-high-performance-python-rpc-framework-to-build-microservices-3j55</link>
      <guid>https://dev.to/ananto30/i-have-built-zero-fast-and-high-performance-python-rpc-framework-to-build-microservices-3j55</guid>
      <description>&lt;p&gt;Zero is actually a RPC like framework that uses ZeroMQ under the hood for communication over tcp. That's why it's fast and super lightweight.&lt;/p&gt;

&lt;p&gt;Without going into details let's just get started, cause one of the philosophy behind Zero is &lt;strong&gt;Zero Learning Curve&lt;/strong&gt; 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ensure Python 3.8+&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Zero
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install zeroapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Sadly the &lt;code&gt;zero&lt;/code&gt; package is already there&lt;/em&gt; 🙁&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;server.py&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zero&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZeroServer&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"hello world"&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ZeroServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5559&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_rpc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_rpc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that server &lt;strong&gt;RPC methods' args are type hinted&lt;/strong&gt;. Type hint is &lt;strong&gt;must&lt;/strong&gt; in Zero server.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See the method type async or sync, doesn't matter.&lt;/em&gt; 😃&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run it
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python -m server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Call the rpc methods
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zero&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZeroClient&lt;/span&gt;

&lt;span class="n"&gt;zero_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ZeroClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5559&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zero_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"echo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hi there!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zero_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello_world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is it! Tell me about the learning curve 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bit-of-background"&gt;
  &lt;/a&gt;
  A bit of background
&lt;/h2&gt;

&lt;p&gt;After working on large systems (with 50M+ users) over the years, one of the realization is - we waste a good amount of time writing boilerplate code and clients when working on microservices. And also we mostly use HTTP to communicate among them. This is really fine and usual but http has some overheads (headers, separate tcp connection every request etc). In case of microservice communications we can avoid these to get better performance. &lt;br&gt;
Another thing is usual web frameworks are bulky and has a learning curve. So I was looking for something to reduce these costs and overheads.&lt;/p&gt;

&lt;p&gt;Zero is still an idea, though the package is there already 😜 Zero solves the boilerplate code problem by using RPC like structure, you can just focus on the business logic. And use ZeroMQ rather HTTP to solve the overhead and reconnection problem. Though not both of them are solved explicitly, Zero is still a baby to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons-of-zero-over-flask-or-fastapi"&gt;
  &lt;/a&gt;
  Pros and Cons of Zero over Flask or FastAPI
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Inter-service communication is faster as using ZeroMQ and raw TCP under the hood.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple and easy to learn and use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extremely lightweight.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Super flexible zero can be used only for network communication and you can structure your codebase independently.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Not an HTTP framework, not so much traditional like Flask of FastAPI. People need to understand the actual usage. Like if you have fairly large microservice architecture and there are independent services that communicate among them, zero is a good substitute to reduce network overhead and other framework complexity. But if you only have a few services that communicate directly with the client/frontend, zero is not that much of a use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Only Python based framework. Zero server can only be connected with Python zero client for now. (I have plan to introduce Go, in distant future btw)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You always need another HTTP framework as a gateway if your frontend communicates over HTTP, which is the usual and extremely common way.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-will-be-back"&gt;
  &lt;/a&gt;
  I will be back!
&lt;/h2&gt;

&lt;p&gt;There are more, I will write more about Zero in coming weeks. For now I will be looking towards comments, opinions and suggestions 🙏&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/Ananto30/zero"&gt;https://github.com/Ananto30/zero&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>microservices</category>
      <category>showdev</category>
    </item>
    <item>
      <title>My React App is Slow and I Don't Know Why</title>
      <author>Alex Sidorenko</author>
      <pubDate>Tue, 28 Sep 2021 09:59:20 +0000</pubDate>
      <link>https://dev.to/sidkh/my-react-app-is-slow-and-i-don-t-know-why-1c7p</link>
      <guid>https://dev.to/sidkh/my-react-app-is-slow-and-i-don-t-know-why-1c7p</guid>
      <description>&lt;p&gt;What performance testing tools are available in React world, and how to start using them?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#inspect-what-components-are-getting-rerendered"&gt;
  &lt;/a&gt;
  Inspect what components are getting re-rendered
&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;React Developer Tools&lt;/a&gt; to get a quick overview of what components re-render. Enable option &lt;em&gt;"Highlight updates when components render"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rso12zS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dom6xgypvcdiu8cu9oz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rso12zS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dom6xgypvcdiu8cu9oz.gif" alt="rerender"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#figure-out-what-renders-to-fix"&gt;
  &lt;/a&gt;
  Figure out what renders to fix
&lt;/h2&gt;

&lt;p&gt;Not all renders are equal. Some are less performant than others. Don't try to fix every unnecessary render. Instead, find bottlenecks and fix them. &lt;a href="https://www.notion.so/My-React-App-is-Slow-and-I-Don-t-Know-Why-f8b67e4b37c44d23b685b66d1f545c08"&gt;React Developer Tools&lt;/a&gt; Profiler tab will help you with this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xYoaoMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b43p71jjmacpai3keik2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xYoaoMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b43p71jjmacpai3keik2.gif" alt="react-profiler"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=00RoZflFE34"&gt;Ben Award - How to use the React Profiler to find and fix Performance Problems&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#investigate-other-performance-problems"&gt;
  &lt;/a&gt;
  Investigate other performance problems
&lt;/h2&gt;

&lt;p&gt;Often, web app performance issues are not related to React. Analytics tracking libraries, excessive CSS animations, non-optimized images, iframes, and many more factors can contribute to poor performance. You can use the Chrome DevTools Performance tab to debug these issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EAITr_pV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exfgn1q6qk0toin3atus.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAITr_pV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exfgn1q6qk0toin3atus.gif" alt="chrome-profiler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/docs/devtools/evaluate-performance/#analyze"&gt;Chrome Dev Tools documentation - Analyze runtime performance.&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://alexsidorenko.com/blog/react-performance-tools/"&gt;alexsidorenko.com&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Maybe it's time to rethink our project structure with .NET 6</title>
      <author>Tim Deschryver</author>
      <pubDate>Tue, 28 Sep 2021 09:56:30 +0000</pubDate>
      <link>https://dev.to/this-is-learning/maybe-it-s-time-to-rethink-our-project-structure-with-net-6-2dl</link>
      <guid>https://dev.to/this-is-learning/maybe-it-s-time-to-rethink-our-project-structure-with-net-6-2dl</guid>
      <description>&lt;p&gt;Follow me on Twitter at &lt;a href="https://timdeschryver.dev/twitter"&gt;@tim_deschryver&lt;/a&gt; | Subscribe to the &lt;a href="https://timdeschryver.dev/newsletter"&gt;Newsletter&lt;/a&gt; | Originally published on &lt;a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6"&gt;timdeschryver.dev&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6?tldr=true"&gt;Read the TLDR version on timdeschryver.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the upcoming release of .NET 6, we're also getting a new API to build applications.&lt;br&gt;
This new API is called the "Minimal Web API".&lt;/p&gt;

&lt;p&gt;This blog post came to life because seeing this new structure triggered some new brainwaves that made me question my current project structure. After having read about &lt;a href="https://dannorth.net/2021/03/16/cupid-the-back-story/"&gt;CUPID&lt;/a&gt; by &lt;a href="https://twitter.com/tastapod"&gt;Dan North&lt;/a&gt; these thoughts have only amplified.&lt;/p&gt;

&lt;p&gt;Before we're getting to the details, let's first take a look at what the new API looks like.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whats-a-minimal-web-api"&gt;
  &lt;/a&gt;
  What's a Minimal Web API
&lt;/h3&gt;

&lt;p&gt;As the name hints at, a Minimal Web Api keeps things to a minimum and removes most of the ceremony code.&lt;br&gt;
To give an example, the &lt;code&gt;dotnet new web&lt;/code&gt; command (using v6.0.100-rc.1) generates a new project with just a single &lt;code&gt;Program.cs&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   WebApplication.csproj
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Program.cs&lt;/code&gt; file uses &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/top-level-statements"&gt;top-level statements&lt;/a&gt; to configure, build, and run the application. Pretty straightforward if you ask me.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not something that we're used to.&lt;br&gt;
Previously the default folder structure of a .NET Web API project consisting of a &lt;code&gt;Program.cs&lt;/code&gt; file (with the &lt;code&gt;Main&lt;/code&gt; method to run the API) and a &lt;code&gt;Startup.cs&lt;/code&gt; file (with the &lt;code&gt;ConfigureServices&lt;/code&gt; and &lt;code&gt;Configure&lt;/code&gt; methods to configure the API). The project also includes a Controllers folder with a controller file, containing the endpoints of the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   Startup.cs
│   WebApplication.csproj
│
├───Controllers
│       Controller.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In most of the applications and examples I've seen, this structure is used as a basis and new requirements are build on top of this as the project and the complexity grows. The structure of an existing API probably looks like a variation of this, either in a single project, or divided across multiple projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   Startup.cs
│   WebApplication.csproj
│
├───Configuration/Extensions
│       ServiceCollection.cs
│       ApplicationBuilder.cs
├───Controllers
│       ...
├───Commands
│       ...
├───Queries
│       ...
├───Models/DTOs
│       ...
├───Interfaces
│       ...
├───Infrastructure
│       ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can see this a similar structure in the &lt;a href="https://github.com/dotnet-architecture/eShopOnWeb/tree/master/src/Web"&gt;dotnet-architecture/eShopOnWeb&lt;/a&gt; example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because this is an industry-standard, it makes sense to follow this design.&lt;br&gt;
But now with the fresh breath that the Minimal API brings, it might be a good time to reconsider the project structure.&lt;/p&gt;

&lt;p&gt;We have a few options here, so let's take a look at the different options.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-single-file-api"&gt;
  &lt;/a&gt;
  A single file API
&lt;/h3&gt;

&lt;p&gt;The easiest way to add new functionality to the newly generated template is to just append new features (and endpoints) to the &lt;code&gt;Program.cs&lt;/code&gt; file.&lt;br&gt;
While this is the most straightforward way to create a simple service, the downside is that it quickly becomes bloated new requirements are being added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICartRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CartRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IOrdersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OrdersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IPayment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PaymentService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/carts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/carts/{cartId}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#an-api-with-controllers"&gt;
  &lt;/a&gt;
  An API with Controllers
&lt;/h3&gt;

&lt;p&gt;The second option is to revert to what we already know and to what we're used to.&lt;br&gt;
To do this, the endpoints of the service are moved back into controllers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   WebApplication.csproj
│
├───Controllers
│       CartsController.cs
│       OrdersController.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To register the controllers, we use the &lt;code&gt;IServiceCollection.AddControllers()&lt;/code&gt; and &lt;code&gt;WebApplication.MapControllers()&lt;/code&gt; extension methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICartRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CartRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IOrdersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OrdersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IPayment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PaymentService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#pain-points-of-the-current-project-structure"&gt;
  &lt;/a&gt;
  Pain points of the current project structure
&lt;/h4&gt;

&lt;p&gt;But this doesn't challenge the status quo and the pain points are still here.&lt;/p&gt;

&lt;p&gt;This structure slices the application up into technical concerns.&lt;br&gt;
To create new requirements, you need to modify existing files, and probably you'll have to create new files as well.&lt;br&gt;
When you need to find and debug an issue, you need to navigate between multiple files and layers.&lt;br&gt;
This can be hard to do, especially when the project is new to you.&lt;br&gt;
The implementation of a simple endpoint is equivalent to the complex endpoints.&lt;br&gt;
Because simple endpoints follow the same request pipeline as complex endpoints, simple endpoints end up being a lot more complex than that they're supposed to be. Sadly, because it requires more code, it also means that there's a higher chance of bugs.&lt;/p&gt;

&lt;p&gt;Just like a single file API, controllers tend to become bloated over time.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-domaindriven-api"&gt;
  &lt;/a&gt;
  A domain-driven API
&lt;/h3&gt;

&lt;p&gt;What if we move from the traditional folder structure that puts the main focus on the technical aspects of the application to a domain-modeled structure where the application is grouped by its domain. The different domains of the application are organized in module (or feature) folders.&lt;/p&gt;

&lt;p&gt;The structure of a simple application that uses a module structure looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   WebApplication.csproj
│
├───Modules
│   ├───Cart
│   │      CartModule.cs
│   └───Orders
│          OrdersModule.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first, this doesn't seem to be a big change in comparison to using controller folders.&lt;br&gt;
To know the benefits of this structure, we need to take a closer look at the files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The structure is similar to a separation in the Domain Layer, for example &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/net-core-microservice-domain-model"&gt;Domain model structure in a custom .NET Standard Library&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#what-is-a-module"&gt;
  &lt;/a&gt;
  What is a module
&lt;/h4&gt;

&lt;p&gt;A module consists of two parts, &lt;strong&gt;its requirements and how it's consumed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The bare minimum to create a module is a class that has two methods, one to configure the DI container, and one to register the endpoints of the module. Think of this class as the &lt;code&gt;Program.cs&lt;/code&gt;, but for a single module.&lt;br&gt;
This has the benefit that it's clear what the module needs, which can be useful to write tests and makes it easier to remove unnecessary code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrdersModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="nf"&gt;RegisterOrdersModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSingleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;OrderConfig&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IOrdersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OrdersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IPayment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PaymentService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="nf"&gt;MapOrdersEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To hook up the orders module, we need to go back to the &lt;code&gt;Program.cs&lt;/code&gt; file and invoke the two extension methods.&lt;br&gt;
When we do this, the orders module is plugged into the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterOrdersModule&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapOrdersEndpoints&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This keeps the &lt;code&gt;Program.cs&lt;/code&gt; file clean and simple, and it also has &lt;strong&gt;a clear separation between the modules and their own needs&lt;/strong&gt;.&lt;br&gt;
The configuration of the technical parts (e.g. logging, authentication, middleware, swagger, ...) of the application are also found in the &lt;code&gt;Program.cs&lt;/code&gt; file because these go across all modules.&lt;/p&gt;

&lt;p&gt;To add more modules we have to manually repeat this step, but with a little bit of abstraction, it can be automated.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#register-the-modules-automatically"&gt;
  &lt;/a&gt;
  Register the modules automatically
&lt;/h4&gt;

&lt;p&gt;To automate the process to register a new module, we'll first have to introduce an &lt;code&gt;IModule&lt;/code&gt; interface.&lt;br&gt;
This interface is then being used to look up all of the modules that implement the interface within the application.&lt;br&gt;
Once all of the modules are discovered, the modules are automatically registered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="nf"&gt;RegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="nf"&gt;MapEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModuleExtensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this could also be added into the DI container&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IModule&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;registeredModules&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IModule&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;WebApplicationBuilder&lt;/span&gt; &lt;span class="nf"&gt;RegisterModules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;WebApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;DiscoverModules&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;registeredModules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt; &lt;span class="nf"&gt;MapEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;registeredModules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IModule&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DiscoverModules&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IModule&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTypes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsClass&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsAssignableTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IModule&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Activator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cast&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IModule&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The refactored orders module, which implements the &lt;code&gt;IModule&lt;/code&gt; interface, now looks like this.&lt;br&gt;
Nothing much has changed, we're just using the methods from the interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrdersModule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="nf"&gt;RegisterModules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSingleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;OrderConfig&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IOrdersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OrdersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IPayment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PaymentService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="nf"&gt;MapEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/orders"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new &lt;code&gt;Program.cs&lt;/code&gt; now uses the module extension methods &lt;code&gt;RegisterModules()&lt;/code&gt; and &lt;code&gt;MapEndpoints()&lt;/code&gt; to register all the modules within the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterModules&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapEndpoints&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the addition of the &lt;code&gt;IModule&lt;/code&gt; interface, it's now &lt;strong&gt;easy to register new modules as you don't have to modify any of the existing files&lt;/strong&gt;.&lt;br&gt;
To register a new module, you only need to create a new class, implement the &lt;code&gt;IModule&lt;/code&gt; interface, and that's it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This module-driven approach is very similar to the &lt;a href="https://github.com/CarterCommunity/Carter"&gt;Carter&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#the-structure-of-a-module"&gt;
  &lt;/a&gt;
  The structure of a module
&lt;/h4&gt;

&lt;p&gt;The benefit of this approach makes that &lt;strong&gt;every module becomes self-contained&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Simple modules can have a simple setup, while &lt;strong&gt;a module has the flexibility to deviate from the "default" setup&lt;/strong&gt; for more complex modules.&lt;br&gt;
For example, simple modules can be developed within a single file (what we've seen so far), while complex modules can be subdivided into multiple files (see the next project structure).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   WebApplication.csproj
│
├───Modules
│   └───Orders
│       │   OrdersModule.cs
│       ├───Models
│       │       Order.cs
│       └───Endpoints
│               GetOrders.cs
│               PostOrder.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Inspiration taken from the &lt;a href="https://github.com/ardalis/ApiEndpoints"&gt;ApiEndpoints&lt;/a&gt; project by &lt;a href="https://twitter.com/ardalis"&gt;Steve "ardalis" Smith&lt;/a&gt;. More details about this pattern can be found in his article, &lt;a href="https://ardalis.com/mvc-controllers-are-dinosaurs-embrace-api-endpoints/"&gt;MVC Controllers are Dinosaurs - Embrace API Endpoints&lt;/a&gt;, or in the &lt;a href="https://github.com/dotnet-architecture/eShopOnWeb/tree/master/src/PublicApi/CatalogItemEndpoints"&gt;dotnet-architecture/eShopOnWeb&lt;/a&gt; example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what other benefits does this structure bring us?&lt;/p&gt;

&lt;p&gt;A domain-based structure groups files and folders by their (sub)domain, this &lt;strong&gt;gives us a better understanding of the application&lt;/strong&gt; and makes it easier to navigate through the application. No more hopping around all over the place to find the code that does what you need because everything is everywhere.&lt;/p&gt;

&lt;p&gt;I would even go as far as to say that you should try to keep your application as simple as possible.&lt;br&gt;
Meaning that you should start with a simple project (&lt;code&gt;csproj&lt;/code&gt;) divided into one or more module folders.&lt;br&gt;
A module should start off as a single file and be split up when it becomes hard to navigate.&lt;br&gt;
If that happens, you could further divide the module into different files, e.g. extracting the endpoints of the module into their own files.&lt;br&gt;
Of course, if you'd like to keep the modules consistent, you could also use the same structure within all modules.&lt;br&gt;
Briefly said, &lt;strong&gt;your project structure should reflect the simplicity or the complexity of the domain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, when you're creating an application to manage orders, the core of the application is a complex order module that is divided into multiple files. A few of the other modules, the supporting modules, just contain simple CRUD operations and are therefore implemented in a single file to cut to the chase.&lt;/p&gt;

&lt;p&gt;In the example below, the orders module is the core domain containing all of the business rules, thus the endpoints are moved to an &lt;code&gt;Endpoints&lt;/code&gt; folder, where each endpoint gets its individual file. Meanwhile, the carts module, which is a supporting module, contains a few simple methods and is implemented as a single file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   WebApplication.csproj
│
├───Modules
│   ├───Cart
│   │      CartModule.cs
│   └───Orders
│       │   OrdersModule.cs
│       ├───Endpoints
│       │       GetOrders.cs
│       │       PostOrder.cs
│       ├───Core
│       │       Order.cs
│       │───Ports
│       │       IOrdersRepository.cs
│       │       IPaymentService.cs
│       └───Adapters
│               OrdersRepository.cs
│               PaymentService.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#preparing-for-uncertainty"&gt;
  &lt;/a&gt;
  Preparing for uncertainty
&lt;/h4&gt;

&lt;p&gt;Over time as the project grows and you gain more domain knowledge, there will be a need to &lt;strong&gt;move things around&lt;/strong&gt;.&lt;br&gt;
When you get that AHA moment, it's not that hard to convert a submodule into a core module within its own service.&lt;br&gt;
Because the module is self-contained, it's a simple copy-paste of the module folder into a new application.&lt;br&gt;
Basically, a module can be thought of as a plugin, which can easily be moved around.&lt;/p&gt;

&lt;p&gt;Besides moving the module, it's also easier to remove a module, or blend multiple modules into one.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With this project setup, I want to try to continue the Minimal API philosophy and keeping the code to a bare minimum. I want the service to be simple and maintainable while having the flexibility to expand upon it.&lt;/p&gt;

&lt;p&gt;The aim is to reduce the moving parts in the application by removing some clutter.&lt;br&gt;
Instead, the application should be divided into core and sub modules that are self-contained.&lt;/p&gt;

&lt;p&gt;Not every module needs a complex setup, by cutting up the application into domains (or modules) it becomes easier to deviate from the generic technical design. &lt;strong&gt;A module is adaptable&lt;/strong&gt;, meaning that its structure can vary depending on its specific needs.&lt;br&gt;
The goal is to make it easier to start or join a project and to make it easier to maintain an existing codebase.&lt;/p&gt;

&lt;p&gt;A Minimal API application that uses a module-based architecture looks like the following structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   GlobalImports.cs
│   WebApplication.csproj
│
├───Modules
│   ├───Cart
│   │      CartModule.cs
│   └───Orders
│       │   OrdersModule.cs
│       ├───Endpoints
│       │       GetOrders.cs
│       │       PostOrder.cs
│       ├───Core
│       │       Order.cs
│       │───Ports
│       │       IOrdersRepository.cs
│       │       IPaymentService.cs
│       └───Adapters
│               OrdersRepository.cs
│               PaymentService.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I put the suggested project structure next to my current structure, it's clear that a lot of clutter can be removed.&lt;br&gt;
Compare a single endpoint file that is easy to find, to an endpoint which's implementation is shattered across multiple layers. Between these layers, there is, in most cases, also some kind of translation between the layers. For example, my current flow for every request looks like this, Controller |&amp;gt; MediatR |&amp;gt; Application |&amp;gt; Domain |&amp;gt; Repository/Service, compare this to Endpoint (|&amp;gt; Domain) |&amp;gt; Service.&lt;/p&gt;

&lt;p&gt;I get that these layers exist for a reason, but times have changed.&lt;br&gt;
Only a couple of years ago these layers were crucial to make an application testable, but these last few years we're seeing a revolution towards functional tests as I've blogged about in &lt;a href="https://timdeschryver.dev/blog/how-to-test-your-csharp-web-api"&gt;How to test your C# Web API&lt;/a&gt;. That's another big point for keeping your code as simple as possible and trying to trim down the number of interfaces, and only create them when it's beneficial (e.g. when you're communicating with a 3rd party service). With the Minimal API, it also becomes easier to "new" instances up instead of relying on the DI container.&lt;/p&gt;

&lt;p&gt;We've only covered the structure of a Minimal API project, and in the examples all files are included in the API project.&lt;br&gt;
By following this architecture, you can still extract the Core/Domain layer and the Infrastructure layer into different projects. Whether you do that or not, depends on you and your team and it's probably a good thing to discuss this to keep everyone on the same line. Personally, I don't have a strong opinion on that.&lt;/p&gt;

&lt;p&gt;Don't overthink it, just keep it simple.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;




&lt;p&gt;Follow me on Twitter at &lt;a href="https://timdeschryver.dev/twitter"&gt;@tim_deschryver&lt;/a&gt; | Subscribe to the &lt;a href="https://timdeschryver.dev/newsletter"&gt;Newsletter&lt;/a&gt; | Originally published on &lt;a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6"&gt;timdeschryver.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>architecture</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Building a Dating App with MERN</title>
      <author>Collins Mbathi</author>
      <pubDate>Tue, 28 Sep 2021 09:51:38 +0000</pubDate>
      <link>https://dev.to/collins87mbathi/building-a-dating-app-with-mern-478h</link>
      <guid>https://dev.to/collins87mbathi/building-a-dating-app-with-mern-478h</guid>
      <description>&lt;p&gt;we are going to build a dating app using mern stack, the web app has a simple functionality a screenshot of  the finished app below, all the data comes from a MongoDB database, with Api endpoints set in Node.js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBN5boaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aog9s34skeuj3nmyau41.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBN5boaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aog9s34skeuj3nmyau41.PNG" alt="cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s review the React front end and then move to the back end. Open your terminal &lt;br&gt;
and create a dating-app-mern folder. Inside it, use &lt;strong&gt;create-react-app&lt;/strong&gt; to create a new app &lt;br&gt;
called dating-app-frontend. The following are the commands to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd dating-app-mern
npx create-react-app dating-app-frontend

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#react-basic-setup"&gt;
  &lt;/a&gt;
  React Basic Setup
&lt;/h4&gt;

&lt;p&gt;Return to the React project and cd to the dating-app-frontend directory. Start the React &lt;br&gt;
app with npm start.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd dating-app-frontend
npm start

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next delete some of the files that you don't need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PfhK3EOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1z9fzfsn3fcone8vma4c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PfhK3EOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1z9fzfsn3fcone8vma4c.PNG" alt="perez"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-header-component"&gt;
  &lt;/a&gt;
  Creating a Header Component
&lt;/h4&gt;

&lt;p&gt;Let's create a header component. First, you must install Material .since its going to provide for us the icons we are going to use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @material-ui/core @material-ui/icons
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a components folder inside the src folder. Create two files—Header.jsx &lt;br&gt;
and Header.css—inside the components folder. Header.js has two things: a person &lt;br&gt;
icon and a forum icon.&lt;/p&gt;

&lt;p&gt;The following is the Header.jsx file's content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAmwI4Hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsye32gzwjf3syvdf3ph.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAmwI4Hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsye32gzwjf3syvdf3ph.PNG" alt="article2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;include the Header component in the App.js file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcczmzVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iilrav9uii5yydrwstc6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcczmzVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iilrav9uii5yydrwstc6.PNG" alt="article3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the header.css file contain the following content&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9RNpbhM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9dwdirvxbykc187ri5r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9RNpbhM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9dwdirvxbykc187ri5r.PNG" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creating-the-dating-cards-component"&gt;
  &lt;/a&gt;
  Creating the Dating Cards Component
&lt;/h4&gt;

&lt;p&gt;Let’s now work on the second component. Create two files—DatingCards.js and &lt;br&gt;
DatingCards.css—inside the components folder. Then include the DatingCards component in the App.js file.&lt;/p&gt;

&lt;p&gt;Before moving forward, you need to install a react-tinder-card package. This &lt;br&gt;
package has a feature that provides the swipe effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-tinder-card
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, put the content in DatingCards.js. Here, inside a people state variable, you store &lt;br&gt;
the name and images of four people. Next, import DatingCard and use it as a component. &lt;br&gt;
Here, you use the props mentioned in the react-tinder-card documentation.&lt;br&gt;
The swiped and outOfFrame functions are required. When looping through each &lt;br&gt;
person, use the imgUrl background image and display the name in the h3 tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jnscdzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5vaqypp3bsgnmvn96is.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jnscdzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5vaqypp3bsgnmvn96is.PNG" alt="dating1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WyH6H1rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nune45e3nkx9lcrro84l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyH6H1rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nune45e3nkx9lcrro84l.PNG" alt="dating2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#creating-the-swipe-buttons-component"&gt;
  &lt;/a&gt;
  Creating the Swipe Buttons Component
&lt;/h6&gt;

&lt;p&gt;Let’s now create the Swipe component, which are the buttons in the footer. &lt;br&gt;
These buttons add to the app’s styling. They won’t be functional since it’s a simple app. &lt;br&gt;
Create two files : Swipe.jsx and Swipe.css inside the components&lt;br&gt;
folder. You also need to include it in the App.js file.&lt;/p&gt;

&lt;p&gt;The content in Swiper.jsx&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8cw4liw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8egnn6cpxzvynr0sehck.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8cw4liw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8egnn6cpxzvynr0sehck.PNG" alt="dating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, is styling the buttons and the code of styling them is here below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWRBKdYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb570vuld5gosmwyieuv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWRBKdYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb570vuld5gosmwyieuv.PNG" alt="dating2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we are now through with the frontend part ...&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#initial-backend-setup"&gt;
  &lt;/a&gt;
  Initial Back-End Setup
&lt;/h4&gt;

&lt;p&gt;Let’s move to the back end by starting with the Node.js code.create another folder and name it api&lt;/p&gt;

&lt;p&gt;Next, create a package.json file by entering the &lt;code&gt;npm init -y&lt;/code&gt; command in the terminal. &lt;/p&gt;

&lt;p&gt;After that, You need to install two packages before starting. Open the terminal and install &lt;br&gt;
Express and Mongoose in the api folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after this open the mongoDb and copy the link to link to our project.&lt;/p&gt;

&lt;p&gt;Before moving forward, install nodemon in the api folder. Whenever &lt;br&gt;
you make any changes to the code in the index.js file, the Node server restarts &lt;br&gt;
instantaneously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#initial-route-setup"&gt;
  &lt;/a&gt;
  Initial Route Setup
&lt;/h4&gt;

&lt;p&gt;Let’s create the initial route, which generally checks whether everything is set up &lt;br&gt;
correctly. The Express package in Node.js allows you to create routes, which is how most &lt;br&gt;
of the Internet works. Most back-end languages like Node.js, Java offer capabilities to &lt;br&gt;
create these routes, which interact with the databases. The initial route doesn’t interact &lt;br&gt;
with the database and simply returns a text when you go to it, using a GET request.&lt;/p&gt;

&lt;p&gt;Create a index.js file in the api folder. Here, you import the Express &lt;br&gt;
and the Mongoose packages first. Next, use Express to create a port variable to run on &lt;br&gt;
port 5001.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const mongoose = require('express');
//App Config
const app = express()
const port = process.env.PORT || 5001
//Middleware
//DB Config
//API Endpoints

//Listener
app.listen(port, () =&amp;gt; console.log(`Listening on localhost: ${port}`))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#database-user-and-network-access"&gt;
  &lt;/a&gt;
  Database User and Network Access
&lt;/h4&gt;

&lt;p&gt;In MongoDB, you need to create a database user and provide network access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFlBsBAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lur5pkoovw14m309u6d8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFlBsBAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lur5pkoovw14m309u6d8.PNG" alt="database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mongodb-schema-and-routes"&gt;
  &lt;/a&gt;
  MongoDB Schema and Routes
&lt;/h4&gt;

&lt;p&gt;MongoDB stores data in a JSON format instead of the regular table structure found in a &lt;br&gt;
traditional database like Oracle. You create the schema file required by MongoDB. It tells &lt;br&gt;
you how fields are stored in MongoDB.&lt;/p&gt;

&lt;p&gt;Here, cards is considered a collection name, and you store a value like cardSchema in &lt;br&gt;
the database. It consists of an object with a name and imgUrl keys. These are the names &lt;br&gt;
that you use in MongoDB. Create a Cards.js file and put the following content in it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zU1t67qg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/raedhxjb2fnbsu3g2vwv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zU1t67qg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/raedhxjb2fnbsu3g2vwv.PNG" alt="database1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You now use the schema to create the endpoint that adds data to the database. The &lt;br&gt;
MVC pattern is followed here; it is the traditional flow of a web application.&lt;/p&gt;

&lt;p&gt;Next, use a POST request that takes any data from the user and sends it to the &lt;br&gt;
database. You can use any endpoint. For example, if you write an article on Dev.to &lt;br&gt;
and hit the POST button, your article is saved in the Dev.to database once the POST &lt;br&gt;
request is made.&lt;br&gt;
The GET endpoints fetch all the data from the database. Again, you can give any &lt;br&gt;
endpoint. For example, when you browse through the posts in Dev.to, a GET request is &lt;br&gt;
sent to the endpoint, which in turn fetches all posts from the Dev.to database.&lt;/p&gt;

&lt;p&gt;Create a folder and name it routes in the routes folder create a file and call it Card.js In Card.js, create a POST request to the /dating/cards endpoint. The load is &lt;br&gt;
in req.body to MongoDB. Then you use create() to send dbCard. If it’s a success, you &lt;br&gt;
receive status 201; otherwise, you receive status 500. The updated content is marked in &lt;br&gt;
bold.&lt;br&gt;
Next, create the GET endpoint to /dating/cards to get the data from the database. &lt;br&gt;
You are using find() here and receive a status 200 on success (otherwise, status 500). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVGMcI9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycgtvsz305iyya41915a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVGMcI9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycgtvsz305iyya41915a.PNG" alt="router"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see in the image i have used router ..so as to make work easier to connect it in the index.js&lt;br&gt;
To check the routes,let's use the postman app&lt;/p&gt;

&lt;p&gt;Before moving forward with the POST request, you need to complete two things. &lt;br&gt;
First, implement CORS; otherwise, you get cross-origin errors later when you deploy the &lt;br&gt;
app.&lt;/p&gt;

&lt;p&gt;open the terminal and install CORS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In index.js, import CORS and use it in with app.use(). You also need to use the &lt;br&gt;
express.json() middleware. It is required because you need it to parse the incoming &lt;br&gt;
JSON object from MongoDB to read the body.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxsQFtXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v287oo1zfrohocsg8dn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxsQFtXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v287oo1zfrohocsg8dn.PNG" alt="index"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#integrating-the-backend-with-the-frontend"&gt;
  &lt;/a&gt;
  Integrating the backend  with the frontend
&lt;/h4&gt;

&lt;p&gt;Let’s hook the back end to the front end. Use the axios package to call from the front &lt;br&gt;
end. Axios is a JavaScript library that makes the API request to the REST endpoint. You &lt;br&gt;
just created two endpoints in the back end. To access them, you need Axios. Open the client &lt;br&gt;
and install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a new axios.js file , and then create an &lt;br&gt;
instance of axios. The URL is &lt;code&gt;http://localhost:5001&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from 'axios'
const instance = axios.create({
 URL: "http://localhost:5001"
})
export default instance

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In DatingCards.js, get rid of the hard-coded stuff in the people state. Then import &lt;br&gt;
the local axios and use the useEffect hook to do the API call to the /dating/cards&lt;br&gt;
endpoint. Once you receive the data, reset it using the setPeople() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from 'react'
import DatingCard from 'react-tinder-card'
import './DatingCards.css'
import axios from './axios'
const DatingCards = () =&amp;gt; {
 const [people, setPeople] = useState([])
 useEffect(() =&amp;gt; {
 async function fetchData() {
 const req = await axios.get("/dating/cards")
 setPeople(req.data)
 }
 fetchData()
 }, [])
 const swiped = (direction, nameToDelete) =&amp;gt; {
 console.log("receiving " + nameToDelete)
 }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVNwskwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el1lhrbghri5rx6uxhql.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVNwskwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el1lhrbghri5rx6uxhql.PNG" alt="end"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we have completed our dating app project hope you enjoyed it and learnt alot .&lt;br&gt;
we will be talking about how to deploy the app in heroku in our next article&lt;/p&gt;

</description>
      <category>express</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tailwind Select</title>
      <author>MD Bootstrap</author>
      <pubDate>Tue, 28 Sep 2021 09:38:37 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/tailwind-select-2gnm</link>
      <guid>https://dev.to/mdbootstrap/tailwind-select-2gnm</guid>
      <description>&lt;p&gt;Responsive selects built with Tailwind. Customize the native select with custom CSS that changes the element’s initial appearance.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#quick-start"&gt;
  &lt;/a&gt;
  Quick Start
&lt;/h4&gt;

&lt;p&gt;In order to start using Tailwind simply download our starter.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tailwind-elements.com/tw-starter.zip"&gt;DOWNLOAD ZIP STARTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tailwind Elements does not change or add any CSS to the already one from TailwindCSS.&lt;/p&gt;

&lt;p&gt;You can directly copy our components into your Tailwind design and they will work straight away.&lt;/p&gt;

&lt;p&gt;In some dynamic components (like dropdowns or modals) we add Font Awesome icons and custom JavaScript. However, they do not require any additional installation, all the necessary code is always included in the example and copied to any Tailwind project - it will work.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#mdb-go"&gt;
  &lt;/a&gt;
  MDB GO
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RAhugF8NOBs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#basic-example"&gt;
  &lt;/a&gt;
  Basic example
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Required form plugin --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@tailwindcss/custom-forms@0.2.1/dist/custom-forms.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block text-left"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"max-width: 400px;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-700"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Select&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-select block w-full mt-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;Option 1&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;Option 2&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#you-can-see-more-customization-examples-on-the-select-documentation-page"&gt;
  &lt;/a&gt;
  You can see more customization examples on the &lt;a href="https://tailwind-elements.com/docs/standard/components/select/"&gt;📄 Select documentation page&lt;/a&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#crucial-resources"&gt;
  &lt;/a&gt;
  Crucial Resources
&lt;/h2&gt;

&lt;p&gt;Here are the resources that we have prepared to help you work with this component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read &lt;a href="https://tailwind-elements.com/docs/standard/components/select/"&gt;📄 Select documentation page&lt;/a&gt; &amp;lt;-- start here&lt;/li&gt;
&lt;li&gt;In to get the most out of your project, you should also get acquainted with other Forms options related to Select. See the section below to find the list of them.&lt;/li&gt;
&lt;li&gt;After finishing the project you can publish it with CLI in order to receive &lt;a href="https://mdbootstrap.com/docs/standard/cli/"&gt;💽 Free hosting (beta)&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#related-forms-options-amp-features"&gt;
  &lt;/a&gt;
  Related Forms options &amp;amp; features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/checkbox/"&gt;Checkbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/datepicker/"&gt;Datepicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/file-input/"&gt;File input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/form-templates/"&gt;Forms Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/inputs/"&gt;Inputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/multiselect/"&gt;Multiselect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/radio/"&gt;Radios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/range/"&gt;Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/search/"&gt;Searchs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/switch/"&gt;Switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/components/textarea/"&gt;Textarea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwind-elements.com/docs/standard/forms/timepicker/"&gt;Timepicker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional resources
&lt;/h2&gt;

&lt;p&gt;Learn web development with our &lt;strong&gt;learning roadmap&lt;/strong&gt;:&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/docs/standard/getting-started/"&gt;🎓 Start Learning&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our mailing list &amp;amp; receive &lt;strong&gt;exclusive resources&lt;/strong&gt; for developers&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/newsletter/"&gt;🎁 Get gifts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our private FB group for &lt;strong&gt;inspiration &amp;amp; community experience&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.facebook.com/groups/682245759188413"&gt;👨‍👩‍👧‍👦 Ask to join&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support creation of open-source packages&lt;/strong&gt; with a STAR on GitHub&lt;br&gt;
&lt;a href="https://github.com/dawidadach/Tailwind-Elements/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4wcaku9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/dawidadach/Tailwind-Elements.svg%3Fstyle%3Dsocial%26label%3DStar%26maxAge%3D2592000" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Flask User Authentication - Includes Free Sample</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 28 Sep 2021 09:34:17 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-user-authentication-includes-free-sample-12g5</link>
      <guid>https://dev.to/sm0ke/flask-user-authentication-includes-free-sample-12g5</guid>
      <description>&lt;p&gt;Hello coders! &lt;/p&gt;

&lt;p&gt;This article explains how to code a simple &lt;a href="https://blog.appseed.us/flask-user-authentication-free-sample/"&gt;Flask User Authentication&lt;/a&gt; system using &lt;code&gt;Flask-Login&lt;/code&gt; and &lt;code&gt;Bootstrap 5&lt;/code&gt;. Being able to distinguish one user from another web apps can be improved substantially in terms of features and control. For instance, we can split the project structure into public/private sections and also empower users to perform specific actions based on their profiles. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a lightweight framework crafted on top of Python used for any kind of project and web apps: simple sites, APIs, microservices, or even complex eCommerce solutions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Section #1&lt;/strong&gt; - The general view of the project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #2&lt;/strong&gt; - What is Flask&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #3&lt;/strong&gt; - Flask-Login library&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #4&lt;/strong&gt; - Code the project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #5&lt;/strong&gt; - Login, Logout, Registration routes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #6&lt;/strong&gt; - Full Source code (published on Github)
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnDVdQak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3qmqu7b7xt00wayb428.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnDVdQak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3qmqu7b7xt00wayb428.gif" alt="Flask User Authentication - Animated Presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-project-overview"&gt;
  &lt;/a&gt;
  1# - Project Overview
&lt;/h2&gt;

&lt;p&gt;Authentication might not be necessary for simple presentation sites but mandatory for other types of projects where the project design requires to know when a user is authenticated and what resources to be accessed based on his credentials (username, profiles .. etc). The project we will code provides a simple codebase structure, SQLite persistence, and three pages (index, login, register) styled with Bootstrap 5. Here are the project dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Flask&lt;/code&gt; - the framework that powers the app&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-Login&lt;/code&gt; - a popular library used to manage the sessions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-Bcrypt&lt;/code&gt; - used for password encryption&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-SqlAlchemy&lt;/code&gt; - a popular library to access the database&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Codebase structure&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt; PROJECT ROOT &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   |
   |-- app/
   |    |-- static/
   |    |    |-- &amp;lt;css, JS, images&amp;gt;    &lt;span class="c"&gt;# CSS files, Javascripts files&lt;/span&gt;
   |    |
   |    |-- templates/
   |    |    |
   |    |    |-- index.html           &lt;span class="c"&gt;# Index File&lt;/span&gt;
   |    |    |-- login.html           &lt;span class="c"&gt;# Login Page&lt;/span&gt;
   |    |    |-- register.html        &lt;span class="c"&gt;# Registration Page&lt;/span&gt;
   |    |    
   |    |
   |   config.py                      &lt;span class="c"&gt;# Provides APP Configuration &lt;/span&gt;
   |   forms.py                       &lt;span class="c"&gt;# Defines Forms (login, register) &lt;/span&gt;
   |   models.py                      &lt;span class="c"&gt;# Defines app models &lt;/span&gt;
   |   views.py                       &lt;span class="c"&gt;# Application Routes &lt;/span&gt;
   |
   |-- requirements.txt
   |-- run.py
   |
   |-- &lt;span class="k"&gt;**************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#2-what-is-flask"&gt;
  &lt;/a&gt;
  2# - &lt;a href="https://docs.appseed.us/content/what-is/flask"&gt;What is Flask&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Flask is a popular Python Framework designed to a project quick and easy, with the ability to scale up to complex applications. Flask can be used to code from simple one-page sites to APIs and complex eCommerce solutions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDwI35h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e4pqlqpca7wndkzhheo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDwI35h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e4pqlqpca7wndkzhheo.png" alt="Flask - Open-source Python Framework."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to install Flask is to use PIP, the official package manager shipped with Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During the setup, a basic set of core dependencies are also installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Werkzeug&lt;/code&gt; implements WSGI, the standard Python interface between applications and servers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Jinja&lt;/code&gt; is a template language that renders the pages your application serves.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Click&lt;/code&gt; is a framework for writing command-line applications. It provides the flask command and allows adding custom management commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the installation is finished we can open an editor and code our first Flask app with a few lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, Flask Authentication!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#3-flasklogin-library"&gt;
  &lt;/a&gt;
  #3 - Flask-Login Library
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Flask-Login&lt;/code&gt;, probably the most popular authentication library for Flask, provides user session management and handles the common tasks of logging in, logging out, and remembering your users’ sessions over extended periods of time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Install Flask-Login&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask-login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important part of an application that uses &lt;code&gt;Flask-Login&lt;/code&gt; is the &lt;code&gt;LoginManager&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;login_manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the Flask application object has been created, you can configure it for login with a single line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;login_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How it Works&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The app needs to provide a &lt;strong&gt;user_loader&lt;/strong&gt; callback. This callback is used to reload the user object from the user ID stored in the session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;login_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_loader&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above core principles of &lt;code&gt;Flask-Login&lt;/code&gt; cover the basic implementation of a simple authentication system that we will code in full in the next section.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-coding-the-project"&gt;
  &lt;/a&gt;
  #4 - Coding the project
&lt;/h2&gt;

&lt;p&gt;Before we actually code the features, let's visualize again the structure and mention the most relevant files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;run.py&lt;/code&gt; - is the entry point in our project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app&lt;/code&gt; directory bundles all files and assets used in our  project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/config.py&lt;/code&gt; - isolates the app configuration in a single place&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/forms.py&lt;/code&gt; - defines SignIN, SignUP forms&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/models.py&lt;/code&gt; - defines the Users table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/views.py&lt;/code&gt; - handles the app routing like login, logout and register
&lt;/li&gt;
&lt;/ul&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt; PROJECT ROOT &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   |
   |-- app/
   |    |-- static/
   |    |    |-- &amp;lt;css, JS, images&amp;gt;    &lt;span class="c"&gt;# CSS files, Javascripts files&lt;/span&gt;
   |    |
   |    |-- templates/
   |    |    |
   |    |    |-- index.html           &lt;span class="c"&gt;# Index File&lt;/span&gt;
   |    |    |-- login.html           &lt;span class="c"&gt;# Login Page&lt;/span&gt;
   |    |    |-- register.html        &lt;span class="c"&gt;# Registration Page&lt;/span&gt;
   |    |    
   |    |
   |  __init__.py                     &lt;span class="c"&gt;# Bundle APP as package &lt;/span&gt;
   |   config.py                      &lt;span class="c"&gt;# Provides APP Configuration &lt;/span&gt;
   |   forms.py                       &lt;span class="c"&gt;# Defines Forms (login, register) &lt;/span&gt;
   |   models.py                      &lt;span class="c"&gt;# Defines app models &lt;/span&gt;
   |   views.py                       &lt;span class="c"&gt;# Application Routes &lt;/span&gt;
   |
   |-- requirements.txt
   |-- run.py
   |
   |-- &lt;span class="k"&gt;**************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;run.py&lt;/strong&gt; - source code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The file is a super simple loader of the &lt;code&gt;APP&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;app/config.py&lt;/strong&gt; - APP Configuration&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For easier access, all variables are exposed by a &lt;code&gt;Config&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;CSRF_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="c1"&gt;# Set up the App SECRET_KEY
&lt;/span&gt;    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'S#perS3crEt_007'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# This will create a file in &amp;lt;app&amp;gt; FOLDER
&lt;/span&gt;    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'sqlite:///db.sqlite3'&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;SECRET_KEY&lt;/code&gt; variable is used to encrypt the session information and &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; is used to locate the SQLite database (basically a file).&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;app/forms.py&lt;/strong&gt; - Login and registration forms&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlaskForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Username'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PasswordField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Password'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegisterForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlaskForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Username'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PasswordField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Password'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Email'&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The login form requires a username and a password to authenticate and the registration form has an extra email field.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;app/models.py&lt;/strong&gt; Defined the &lt;code&gt;Users&lt;/code&gt; table&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Users'&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="n"&gt;unique&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All above sections are bundled to build the Flask app in a special file saved in the app directory: "&lt;strong&gt;init&lt;/strong&gt;.py"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="c1"&gt;# constructs the Flask app
&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'app.config.Config'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# injects the configuration
&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# flask-sqlalchemy   # connects to SQLite DB
&lt;/span&gt;
&lt;span class="n"&gt;lm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="c1"&gt;# flask-loginmanager
&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                            &lt;span class="c1"&gt;# init the login manager
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#5-authentication-routes"&gt;
  &lt;/a&gt;
  5 - Authentication routes
&lt;/h1&gt;

&lt;p&gt;All app routes are provided by the &lt;code&gt;views.py&lt;/code&gt; file saved in &lt;code&gt;app&lt;/code&gt; directory.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/register&lt;/code&gt; &lt;strong&gt;route&lt;/strong&gt; - handles the onboarding of the new users&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The pseudocode implemented by the method is pretty simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the request type is GET, serve the registration page to the user&lt;/li&gt;
&lt;li&gt;If the user submitted the information, the method performs the checks&lt;/li&gt;
&lt;li&gt;Once the data is validated, the User password is hashed&lt;/li&gt;
&lt;li&gt;The User object is created and saved into the database
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/register'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# declare the Registration Form
&lt;/span&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RegisterForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'register.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# check if both http method is POST and form is valid on submit
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c1"&gt;# assign form data to variables
&lt;/span&gt;        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;email&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

        &lt;span class="n"&gt;pw_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_password_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pw_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;msg&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'User created'&lt;/span&gt;     
        &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Input error'&lt;/span&gt;     

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'register.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/login&lt;/code&gt; &lt;strong&gt;route&lt;/strong&gt; - authenticate registered users&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/login'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# Declare the login form
&lt;/span&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Flask message injected into the page, in case of any errors
&lt;/span&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="c1"&gt;# check if both http method is POST and form is valid on submit
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c1"&gt;# assign form data to variables
&lt;/span&gt;        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

        &lt;span class="c1"&gt;# filter User out of database through username
&lt;/span&gt;        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;login_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Wrong password. Please try again."&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Unknown user"&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'login.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/logout&lt;/code&gt; &lt;strong&gt;route&lt;/strong&gt; - delete the session data associated to the user&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Logout user
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/logout'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;logout_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#6-full-source-code"&gt;
  &lt;/a&gt;
  6# - Full Source Code
&lt;/h2&gt;

&lt;p&gt;The source code explained in this article can be downloaded from Github (MIT license) and used for hobby and commercial projects.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/app-generator/flask-user-authentication"&gt;Flask User Authentication&lt;/a&gt; - source code&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnDVdQak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3qmqu7b7xt00wayb428.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnDVdQak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3qmqu7b7xt00wayb428.gif" alt="Flask User Authentication - Animated Presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Flask Dashboards&lt;/a&gt; - free &amp;amp; commercial products&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Admin Dashboards&lt;/a&gt; - a curated list provided by AppSeed&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>webdev</category>
      <category>authentication</category>
      <category>appseed</category>
    </item>
  </channel>
</rss>
