<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>PHP libraries and tools</title>
      <author>Rubén Rubio</author>
      <pubDate>Wed, 22 Sep 2021 10:10:25 +0000</pubDate>
      <link>https://dev.to/filmineng/php-libraries-and-tools-3blf</link>
      <guid>https://dev.to/filmineng/php-libraries-and-tools-3blf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;We want the new project we are starting at Filmin to be robust. Therefore, besides adopting good coding practices, we checked some PHP libraries and tools that can help us improve its quality.&lt;/p&gt;

&lt;p&gt;Here is a list of the tools we analyzed with the description they have in its Github repository, excluding well known tools or libraries, such as PHPUnit.&lt;/p&gt;

&lt;p&gt;Most of these tools are CLI commands, so they can be integrated in a CI/CD flow. Others can be integrated within the IDE, such as Psalm or PHPStan in PHPStorm. And others are libraries that we use in our project.&lt;/p&gt;

&lt;p&gt;The list is based in our experience, and it is heavily influenced by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ramsey/status/1396592906102722561"&gt;https://twitter.com/ramsey/status/1396592906102722561&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/lulco/status/1397813303037079553"&gt;https://twitter.com/lulco/status/1397813303037079553&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ArkadiuszKondas/status/1338485275002068993"&gt;https://twitter.com/ArkadiuszKondas/status/1338485275002068993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/8rdTSYljts4"&gt;Aggressive PHP Quality Assurance in 2019 | Marco Pivetta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/brick/date-time"&gt;brick/date-time&lt;/a&gt;: Date and time library for PHP&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thecodingmachine/safe8/"&gt;thecodingmachine/safe&lt;/a&gt;: All PHP functions, rewritten to throw exceptions instead of returning false, now for php8&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tactician.thephpleague.com/"&gt;Tactician&lt;/a&gt;: A small, flexible command bus&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ronanguilloux/IsoCodes"&gt;ronanguilloux/isocodes&lt;/a&gt;: PHP library - Validators for standards from ISO, International Finance, Public Administrations, GS1, Manufacturing Industry, Phone numbers &amp;amp; Zipcodes for many countries&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://opensource.box.com/spout/"&gt;box/spout&lt;/a&gt;: Read and write spreadsheet files (CSV, XLSX and ODS), in a fast and scalable way&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flysystem.thephpleague.com/v2/docs/"&gt;league/flysystem&lt;/a&gt;: Abstraction for local and remote filesystems&lt;/li&gt;
&lt;li&gt;Serializer:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://symfony.com/doc/current/components/serializer.html"&gt;Symfony Serializer Component&lt;/a&gt;: The Serializer component is meant to be used to turn objects into a specific format (XML, JSON, YAML, …) and the other way around.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jmsyst.com/libs/serializer"&gt;JMS Serializer&lt;/a&gt;: This library allows you to (de-)serialize data of any complexity. Currently, it supports XML and JSON.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fractal.thephpleague.com/serializers/"&gt;Fractal&lt;/a&gt;: Fractal provides a presentation and transformation layer for complex data output, the like found in RESTful APIs, and works really well with JSON. Think of this as a view layer for your JSON/YAML/etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#code-quality"&gt;
  &lt;/a&gt;
  Code quality
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/qossmic/deptrac"&gt;Deptrac&lt;/a&gt;: Keep your architecture clean.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://phpinsights.com/"&gt;PHP Insights&lt;/a&gt;: Instant PHP quality checks from your console&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/phpro/grumphp"&gt;GrumPHP&lt;/a&gt;: A PHP code-quality tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bmitch/churn-php"&gt;churn-php&lt;/a&gt;: Discover files in need of refactoring.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://psalm.dev/"&gt;Psalm&lt;/a&gt;: A static analysis tool for finding errors in PHP applications. Plugins:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/boesing/psalm-plugin-stringf"&gt;boesing/psalm-plugin-stringf&lt;/a&gt;: Psalm plugin to provide more details for sprintf, printf, sscanf and fscanf functions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hectorj/safe-php-psalm-plugin"&gt;hectorj/safe-php-psalm-plugin&lt;/a&gt;: vimeo/psalm plugin for thecodingmachine/safe.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marartner/psalm-no-empty"&gt;marartner/psalm-no-empty&lt;/a&gt;: Psalm plugin to detect usage of empty().&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marartner/psalm-strict-equality"&gt;marartner/psalm-strict-equality&lt;/a&gt;: Psalm plugin to enforce strict equality.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/psalm/psalm-plugin-phpunit"&gt;psalm/plugin-phpunit&lt;/a&gt;: A PHPUnit plugin for Psalm.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/psalm/psalm-plugin-symfony"&gt;psalm/plugin-symfony&lt;/a&gt;: Psalm Plugin for Symfony.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/psalm/psalm-plugin-doctrine"&gt;weirdan/doctrine-psalm-plugin&lt;/a&gt;: Stubs to let Psalm understand Doctrine better.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://phpstan.org/"&gt;PHPStan&lt;/a&gt;: PHP Static Analysis Tool - discover bugs in your code without running it!. Plugins:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ergebnis/phpstan-rules"&gt;ergebnis/phpstan-rules&lt;/a&gt;: Provides additional rules for phpstan/phpstan.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/spaze/phpstan-disallowed-calls"&gt;spaze/phpstan-disallowed-calls&lt;/a&gt;: PHPStan rules to detect disallowed calls and constant &amp;amp; namespace usages&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/no-floaters"&gt;roave/no-floaters&lt;/a&gt;: static analysis rules to prevent IEEE-754 floating point errors.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phpstan.org/user-guide/extension-library"&gt;More extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://infection.github.io/"&gt;Infection&lt;/a&gt;: PHP Mutation Testing library. Plugins:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/infection-static-analysis-plugin"&gt;roave/infection-static-analysis-plugin&lt;/a&gt;: Static analysis on top of mutation testing - prevents escaped mutants from being invalid according to static analysis&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bitExpert/captainhook-infection"&gt;bitexpert/captainhook-infection&lt;/a&gt;: Captain Hook Plugin to run InfectionPHP only against the changed files of a commit&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/no-leaks"&gt;roave/no-leaks&lt;/a&gt;: PHPUnit Plugin for detecting Memory Leaks in code and tests&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lulco/populator"&gt;lulco/populator&lt;/a&gt;: Allows populate fake data to your database.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thephpleague/openapi-psr7-validator"&gt;OpenAPI PSR-7 Message (HTTP Request/Response) Validator&lt;/a&gt;:
It validates PSR-7 messages (HTTP request/response) against OpenAPI specifications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paratestphp/paratest"&gt;Paratest&lt;/a&gt;: Parallel testing for PHPUnit&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#composer-tools"&gt;
  &lt;/a&gt;
  Composer tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/maglnet/ComposerRequireChecker"&gt;ComposerRequireChecker&lt;/a&gt;: A CLI tool to check whether a specific composer package uses imported symbols that aren't part of its direct composer dependencies&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/composer-unused/composer-unused"&gt;composer-unused&lt;/a&gt;: Show unused composer dependencies by scanning your code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ergebnis/composer-normalize"&gt;composer-normalize&lt;/a&gt;: Provides a composer plugin for normalizing composer.json.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/SecurityAdvisories"&gt;roave/security-advisories&lt;/a&gt;: Security advisories as a simple composer exclusion list, updated daily&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/BackwardCompatibilityCheck"&gt;roave/backward-compatibility-check&lt;/a&gt;: Tool to compare two revisions of a class API to check for BC breaks&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fabpot/local-php-security-checker"&gt;Local PHP Security Checker&lt;/a&gt;: PHP security vulnerabilities checker&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://robo.li/"&gt;Robo&lt;/a&gt;: Modern Task Runner for PHP&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/captainhookphp/captainhook"&gt;CaptainHook&lt;/a&gt;: Very flexible git hook manager for php developers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is a huge amount of tools written by the PHP community that helps us increase the quality of our project, and that ease our task as developers. We need to choose the ones that adapt better to our project and use case.&lt;/p&gt;

&lt;p&gt;And you? Do you know any interesting tool that is not in this list?&lt;/p&gt;

</description>
      <category>php</category>
      <category>tooling</category>
      <category>codequality</category>
      <category>libraries</category>
    </item>
    <item>
      <title>Get your beverage with CSS illustration and animation</title>
      <author>Aneeqa Khan ✨</author>
      <pubDate>Wed, 22 Sep 2021 09:23:02 +0000</pubDate>
      <link>https://dev.to/aneeqakhan/get-your-beverage-with-css-illustration-and-animation-1nf</link>
      <guid>https://dev.to/aneeqakhan/get-your-beverage-with-css-illustration-and-animation-1nf</guid>
      <description>&lt;p&gt;Hi folks! After I made an illustration with CSS, I wanted to try more with some animation and function.&lt;br&gt;
So here I made a cup with pure CSS and added few buttons to fill the cup with the desired beverage, also added simple animation to fill the cup.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#cup-with-html-and-css"&gt;
  &lt;/a&gt;
  Cup with HTML and CSS
&lt;/h2&gt;

&lt;p&gt;So, first of all, I started with an illustration of the cup I made one parent div containing two children's divs which would represent the cup holder and cup body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cupContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cupHolder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cupBody&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and styled it like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cupContainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;justify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cupHolder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="nx"&gt;solid&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cupBody&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, I added another div to represent the beverage inside the cup, so now the code would look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cupContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cupHolder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cupBody&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beverage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;coffee&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="nx"&gt;A624A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we get a cup with coffee in the browser &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YP7wa2os--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h04g7yzqxefcayn2p129.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YP7wa2os--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h04g7yzqxefcayn2p129.png" alt="coffee cup css"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#get-beverage-on-button-click"&gt;
  &lt;/a&gt;
  Get beverage on button click
&lt;/h2&gt;

&lt;p&gt;Next, I wanted to change the beverage type in a cup with a button click just like a coffee machine but not with a javascript state or variable. I wanted to change it with the CSS variable.&lt;br&gt;
I started with creating a beverage named CSS variable in the root.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;beverage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, I made three buttons beside a cup like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btnsContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btnDiv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;coffee&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get_beverage(this.id)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Coffee&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btnDiv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get_beverage(this.id)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Tea&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btnDiv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chocolate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get_beverage(this.id)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Hot&lt;/span&gt; &lt;span class="nx"&gt;Chocolate&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and styled these like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnsContainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;justify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnDiv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see I added &lt;code&gt;get_beverage&lt;/code&gt; function to each &lt;code&gt;onclick&lt;/code&gt; of three buttons and passed ids of each button as a parameter.&lt;br&gt;
Now &lt;code&gt;get_beverage&lt;/code&gt; the function will get our CSS variable through &lt;code&gt;document.querySelector&lt;/code&gt; method and then I simply added an if-else command to check the value of passed id and changed the beverage variable with desired hex code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;get_beverage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;coffee&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--beverage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#8A624A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--beverage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#c1734b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--beverage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#683b39&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also before that don't forget to change the class &lt;code&gt;.coffee&lt;/code&gt; background-color to beverage variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;beverage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you would see that cup is filling with the desired beverage but it's changing color absurdly. For that, I added simple linear animation to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-animation"&gt;
  &lt;/a&gt;
  Adding animation
&lt;/h2&gt;

&lt;p&gt;I made another class for animation and named it as &lt;code&gt;coffeeAnimation&lt;/code&gt; and defined my animation properties like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coffeeAnimation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;defined keyframes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and passed this class to my &lt;code&gt;beverage&lt;/code&gt; div alongside with coffee class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beverage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;coffee coffeeAnimation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding this, you would see that the animation is running for only the first time but I wanted to restart the animation after every click.&lt;br&gt;
For that, I just removed the &lt;code&gt;coffeeAnimation&lt;/code&gt; from the div and added it again. I wrote these lines in my &lt;code&gt;get_beverage&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beverage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and here I got some nice animation of filling a cup. ☕&lt;br&gt;
You can see the full code and results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/get-beverage-t99fw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Injecting and Discovering Dependencies in OTP Supervisors</title>
      <author>Miroslav Malkin</author>
      <pubDate>Wed, 22 Sep 2021 09:16:05 +0000</pubDate>
      <link>https://dev.to/miros/injecting-and-discovering-dependencies-in-otp-supervisors-352m</link>
      <guid>https://dev.to/miros/injecting-and-discovering-dependencies-in-otp-supervisors-352m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#our-task"&gt;
  &lt;/a&gt;
  Our task
&lt;/h2&gt;

&lt;p&gt;We need siblings of supervisors to find out about each other. Preferably we also want our supervisor tree to be "hermetic": the possibility to start multiple tree instances with different options.&lt;/p&gt;

&lt;p&gt;Example: a pipeline for processing network data which consists of several intercommunicating processes that consume and transform data. We would like to start different pipelines for different data sources in an ad-hoc fashion so they should not interfere with each other and be "hermetic".&lt;/p&gt;

&lt;p&gt;There are several ways to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-options"&gt;
  &lt;/a&gt;
  Our options
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#hardcoded-process-name-registration"&gt;
  &lt;/a&gt;
  Hardcoded process name registration
&lt;/h3&gt;

&lt;p&gt;The easiest and most common way is to simply register your processes using global names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;PipelineSupervisor&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;SomeConsumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;ConsumerGlobalName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;SomeWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;consumer:&lt;/span&gt; &lt;span class="no"&gt;ConsumerGlobalName&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="ss"&gt;:rest_for_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SomeWorker&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;consumer:&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_call&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:process_data_chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_chunk&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;do_process_data_chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;do_process_data_chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;parse_data_somehow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parsed_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="no"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:message_received&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parsed_message&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="n"&gt;new_state&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:more_data_necessary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;new_state&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SomeConsumer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;GenServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:undefined_state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:message_received&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parsed_message&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of implicit name registration provided by erlang, you can use some process registry that will serve basically as DI container: a way to register and lookup dependencies (process pid) by some arbitrary id.&lt;/p&gt;

&lt;p&gt;These include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a well-known and reliable registry, for instance, Elixir.Registry&lt;/li&gt;
&lt;li&gt;Using some self-written registry that stores its state (process pid mappings) as GenServer State or in ETS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the process starts, it registers itself. When its pid is required by other processes they ask this DI registry for necessary dependency.&lt;/p&gt;

&lt;p&gt;But the problem is still there. It is a chicken and egg dilemma: To call registry you need in turn to know its pid or name.&lt;/p&gt;

&lt;p&gt;This solution is easy and common, but it prevents us from running the supervision tree multiple times because of the hardcoded process name of Consumer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prefixed-process-name-registration"&gt;
  &lt;/a&gt;
  Prefixed process name registration
&lt;/h3&gt;

&lt;p&gt;To make our supervision tree hermetic, we can prefix all processes with some common key and make it an init parameter of our supervisor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;PipelineSupervisor&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;name_prefix:&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;consumer_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Consumer&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;SomeConsumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="n"&gt;consumer_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;SomeWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;consumer:&lt;/span&gt; &lt;span class="n"&gt;consumer_name&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="ss"&gt;:rest_for_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although it gets the job done, it clutters the process namespace and creates API that might seem awkward ("why do you need me to provide some prefix?").&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-registry-using-supervisorwhichchildren-function"&gt;
  &lt;/a&gt;
  Implicit registry using Supervisor.which_children function
&lt;/h3&gt;

&lt;p&gt;If we pay closer attention to Supervisor we can notice that any supervisor is basically a registry itself. It naturally knows pids of all its processes and all processes have unique ids local to the supervisor.&lt;/p&gt;

&lt;p&gt;Unfortunately (or luckily) supervisors are single-purpose building blocks and therefore lack convenient apis to lookup their children. However, we still have the way to use supervisors as registers using  &lt;a href="https://hexdocs.pm/elixir/1.12/Supervisor.html#which_children/1"&gt;&lt;code&gt;Supervisor.which_children&lt;/code&gt;&lt;/a&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;PipelineSupervisor&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;supervisor_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="no"&gt;SomeConsumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;SomeWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;parent_supervisor:&lt;/span&gt; &lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="ss"&gt;:rest_for_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;child_pid!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;which_children&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_modules&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;is_pid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;pid&lt;/span&gt;

      &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"no started child with id:&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; in supervisor spec:&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SomeWorker&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;supervisor_pid:&lt;/span&gt; &lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;do_process_data_chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;consumer_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PipelineSupervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SomeConsumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:message_received&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parsed_message&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SomeConsumer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;GenServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In some cases calling a supervisor on each message might create a performance bottleneck. You can fix this by calling &lt;code&gt;child_pid!&lt;/code&gt; once in &lt;code&gt;Worker.init&lt;/code&gt; function and saving &lt;code&gt;Consumer&lt;/code&gt; pid in GenServer state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SomeWorker&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;supervisor_pid:&lt;/span&gt; &lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;consumer_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PipelineSupervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_pid!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SomeConsumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;consumer_pid:&lt;/span&gt; &lt;span class="n"&gt;consumer_pid&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;do_process_data_chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="no"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumer_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:message_received&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parsed_message&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But when we save process pids, we should always be careful, and in our case, think about what would happen if &lt;code&gt;Consumer&lt;/code&gt; crashes. In our case, everything will be fine because of the &lt;a href="https://hexdocs.pm/elixir/1.12/Supervisor.html#module-strategies"&gt;&lt;code&gt;rest_for_one&lt;/code&gt;&lt;/a&gt; supervisor strategy. If &lt;code&gt;Consumer&lt;/code&gt; crashes, its pid saved in &lt;code&gt;Worker&lt;/code&gt; will become invalid. But our supervisor is configured with rest_for_one strategy, and &lt;code&gt;Consumer&lt;/code&gt; is higher in its children list than &lt;code&gt;Worker&lt;/code&gt;. Therefore when &lt;code&gt;Consumer&lt;/code&gt; crashes, &lt;code&gt;Worker&lt;/code&gt; will also be restarted and will discover pid of new &lt;code&gt;Consumer&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-dependencies-adhoc"&gt;
  &lt;/a&gt;
  Starting dependencies ad-hoc
&lt;/h3&gt;

&lt;p&gt;Also, we can exploit the fact that Supervisor returns pid of started process in &lt;code&gt;Supervisor.start_child&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;PipelineSupervisor&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;Supervisor&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;supervisor_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;SomeWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;parent_supervisor:&lt;/span&gt; &lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="ss"&gt;:rest_for_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_consumer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SomeConsumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SomeWorker&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;supervisor_pid:&lt;/span&gt; &lt;span class="n"&gt;supervisor_pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:continue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:start_worker&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_continue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:start_worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;PipelineSupervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consumer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:consumer_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_pid&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;do_process_data_chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_chunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="no"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumer_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:message_received&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parsed_message&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SomeConsumer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;GenServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we have to use &lt;code&gt;:handle_continue&lt;/code&gt; callback to avoid deadlocking the supervisor. Otherwise, it would not be able to reply to our &lt;code&gt;start_child&lt;/code&gt; call because it would be waiting &lt;code&gt;init&lt;/code&gt; function to return.&lt;/p&gt;

&lt;p&gt;This method of DI is convoluted and probably not worth it just for the sake of itself. But it can make more sense in more complicated scenarios where &lt;code&gt;Worker&lt;/code&gt; instead of just sending messages to &lt;code&gt;Consumer&lt;/code&gt; also needs to manage its lifetime (kill or restart). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Some of the options that I showed may seem complex and unnecessary. And in many cases that is entirely true. But my point is that using OTP is much more than just writing GenServers and occasionally some custom Supervisor or two. OTP gives us a pretty basic but very smart combination of base elements that we can use to form some higher-level usage patterns. Our task as a community is to discover those patterns and make them simple to use.&lt;/p&gt;

&lt;p&gt;To find out more about supervisors and their usage patterns look at this great blogpost &lt;a href="https://blog.appsignal.com/2021/08/23/using-supervisors-to-organize-your-elixir-application.html"&gt;Using Supervisors to Organize Your Elixir Application&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the author
&lt;/h2&gt;

&lt;p&gt;I am Miroslav Malkin, Erlang/Elixir expert at &lt;a href="https://funbox.ru"&gt;FunBox&lt;/a&gt;. I am also co-founder of &lt;a href="https://cogito-labs.com/"&gt;CogitoΣ&lt;/a&gt;, where we investigate code and process quality and measure their impact on product success.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>erlang</category>
      <category>otp</category>
      <category>supervisors</category>
    </item>
    <item>
      <title>React Tailwind TypeScript Starter Template Free and Open Source</title>
      <author>Remi W.</author>
      <pubDate>Wed, 22 Sep 2021 09:15:33 +0000</pubDate>
      <link>https://dev.to/ixartz/react-tailwind-typescript-starter-template-free-and-open-source-197e</link>
      <guid>https://dev.to/ixartz/react-tailwind-typescript-starter-template-free-and-open-source-197e</guid>
      <description>&lt;p&gt;A simple and easy-to-use React Tailwind TypeScript template to quickly start any projects with the best tools for developer-first experience in mind.&lt;/p&gt;

&lt;p&gt;An open-source and free starter and boilerplate code with already-configured linter, code formatter, type checking and VSCode configuration for React projects.&lt;/p&gt;

&lt;p&gt;Check out a live demo at &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/"&gt;React Tailwind TypeScript Live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code source is hosted on GitHub at &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;React Tailwind TypeScript GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the list of major feature:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;🔥 Next JS 11&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;💅 Design with Tailwind CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🎉 Type checking with Typescript&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✏️ Linter with Eslint and code formatter Prettier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🦊 Husky + Lint-Staged&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ Easy deploy on Netlify or Vercel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤖 SEO friendly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🎨 Include a minimalist theme&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🚀 Production-ready, you just need to focus in your code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;
        Next-js-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Boilerplate and Starter for Next.js 11+, Tailwind CSS 2.0 and TypeScript ⚡️ Made with developer experience first: Next.js + TypeScript + ESLint + Prettier + Husky + Lint-Staged + VSCode + Netlify + PostCSS + Tailwind CSS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Boilerplate and Starter for Next JS 11+, Tailwind CSS 2.0 and TypeScript &lt;a href="https://twitter.com/ixartz" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/22898de970db41d476e65546387c7b5147565904f1a4197980bb0e3eb30eb8ab/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f636c6f7564706f7373652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343049786172747a" alt="Twitter"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOL9mcNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ixartz/Next-js-Boilerplatepublic/assets/images/nextjs-starter-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Boilerplate and Starter for Next.js, Tailwind CSS and TypeScript ⚡️ Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, VSCode, Netlify, PostCSS, Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; (w/ JIT mode)&lt;/li&gt;
&lt;li&gt;
💅 PostCSS for processing Tailwind CSS and integrated to &lt;code&gt;styled-jsx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
🎉 Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✅ Strict Mode for TypeScript and React 17&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt; (default NextJS, NextJS Core Web Vitals and Airbnb configuration)&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 Husky for Git Hooks&lt;/li&gt;
&lt;li&gt;
🚫 Lint-staged for running linters on Git staged files&lt;/li&gt;
&lt;li&gt;
🗂 VSCode configuration: Debug, Settings, Tasks and extension for PostCSS, ESLint, Prettier, TypeScript&lt;/li&gt;
&lt;li&gt;
🤖 SEO metadata, JSON-LD and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-js-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>react</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Supercharge VS Code with 32 JavaScript Refactorings</title>
      <author>Lars Grammel</author>
      <pubDate>Wed, 22 Sep 2021 09:14:02 +0000</pubDate>
      <link>https://dev.to/p42/supercharge-vs-code-with-32-javascript-refactorings-1eef</link>
      <guid>https://dev.to/p42/supercharge-vs-code-with-32-javascript-refactorings-1eef</guid>
      <description>&lt;p&gt;Visual Studio Code is an excellent editor for JavaScript and TypeScript that already contains many refactorings, e.g., rename and extract function.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=p42ai.refactor"&gt;P42 JavaScript Assistant&lt;/a&gt;&lt;/strong&gt; supercharges VS Code with an additional 32 refactorings and code actions. The P42 refactorings cover three main areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A. &lt;strong&gt;Code Restructuring&lt;/strong&gt;: Refactorings that change statements and expressions. &lt;/li&gt;
&lt;li&gt;B. &lt;strong&gt;Conditionals&lt;/strong&gt;: Refactorings that change or simplify conditionals and conditional-related constructs.&lt;/li&gt;
&lt;li&gt;C. &lt;strong&gt;Code Modernization&lt;/strong&gt;: Refactorings that upgrade existing code to &lt;a href="https://yagmurcetintas.com/journal/whats-new-in-es2022"&gt;language features introduced in newer ECMAScript versions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The P42 refactorings are available as quick fixes (Mac: &lt;code&gt;CMD + .&lt;/code&gt;, Windows: &lt;code&gt;CTRL + .&lt;/code&gt;) and in the refactoring context menu (&lt;code&gt;CTRL + SHIFT + R&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;P42 is early in its development and does not cover class-level or multi-file refactorings yet. If you want to provide feedback, e.g., which refactorings or functions you'd like to see in P42, or if you'd like to receive updates, &lt;br&gt;
you can find us on &lt;a href="https://twitter.com/p42ai"&gt;Twitter @p42ai&lt;/a&gt; or &lt;a href="https://www.linkedin.com/company/p42-software/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a visual example for each refactoring in action:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-code-restructuring"&gt;
  &lt;/a&gt;
  A. Code Restructuring
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-inline-const"&gt;
  &lt;/a&gt;
  1. Inline Const
&lt;/h4&gt;

&lt;p&gt;Inline the value of a const declaration into its references and remove the declaration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AlZRalV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-inline-variable.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AlZRalV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-inline-variable.gif" alt="Inline const"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-extract-const"&gt;
  &lt;/a&gt;
  2. Extract Const
&lt;/h4&gt;

&lt;p&gt;Extract (multiple) occurrences of an expression to a const in the enclosing block scope.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9iO44og--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-extract-const.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9iO44og--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-extract-const.gif" alt="Extract const"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-extract-substring-to-const"&gt;
  &lt;/a&gt;
  3. Extract Substring to Const
&lt;/h4&gt;

&lt;p&gt;Extract the selected part of a string literal into a const.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpnTFGHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-extract-substring-to-variable.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpnTFGHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-extract-substring-to-variable.gif" alt="Extract substring to const"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-inline-return-statement"&gt;
  &lt;/a&gt;
  4. Inline Return Statement
&lt;/h4&gt;

&lt;p&gt;Inline returned variable that is assigned in if-else or switch statements into return statements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E2LRZ9Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-inline-return.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E2LRZ9Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-inline-return.gif" alt="Inline return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-push-operator-into-assignment"&gt;
  &lt;/a&gt;
  5. Push Operator into Assignment
&lt;/h4&gt;

&lt;p&gt;Move the operator from a binary expression into an assignment when possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNisgCdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-push-operator-into-assignment.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNisgCdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-push-operator-into-assignment.gif" alt="Push Operator into Assignment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-pull-operator-out-of-assignment"&gt;
  &lt;/a&gt;
  6. Pull Operator out of Assignment
&lt;/h4&gt;

&lt;p&gt;Move the operator out of an operator assignment expression (e.g., &lt;code&gt;+=&lt;/code&gt;) into a regular binary expression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZucF3zdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-pull-operator-out-of-assignment.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZucF3zdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-pull-operator-out-of-assignment.gif" alt="Pull Operator out of Assignment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-convert-for-loop-to-forof-loop"&gt;
  &lt;/a&gt;
  7. Convert for Loop to for..of Loop
&lt;/h4&gt;

&lt;p&gt;Converts a regular &lt;code&gt;for&lt;/code&gt; loop into a &lt;code&gt;for...of&lt;/code&gt; loop and removes the index variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6p_3wv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-to-for-of-loop.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6p_3wv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-to-for-of-loop.gif" alt="Convert for Loop to for..of Loop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-convert-for-loop-to-foreach-loop"&gt;
  &lt;/a&gt;
  8. Convert for Loop to forEach Loop
&lt;/h4&gt;

&lt;p&gt;Converts a regular &lt;code&gt;for&lt;/code&gt; loop into a &lt;code&gt;.forEach()&lt;/code&gt; loop and removes the index variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4NlyzD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-to-for-each-loop.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4NlyzD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-to-for-each-loop.gif" alt="Convert for Loop to forEach() Loop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-convert-ifelse-to-guard-clause"&gt;
  &lt;/a&gt;
  9. Convert If-Else to Guard Clause
&lt;/h4&gt;

&lt;p&gt;Change if-statements which return from a function into guard clauses.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5ciG2Z9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-to-guard-clause.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5ciG2Z9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-to-guard-clause.gif" alt="Convert If-Else to Guard Clause"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-surround-statements-with-trycatch"&gt;
  &lt;/a&gt;
  10. Surround Statements with Try...Catch
&lt;/h4&gt;

&lt;p&gt;Wrap one or more statements in a &lt;code&gt;try..catch&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---nSJ5PYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-surround-with-try-catch.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---nSJ5PYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-surround-with-try-catch.gif" alt="Surround Statements with Try...Catch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#11-split-variable-declaration"&gt;
  &lt;/a&gt;
  11. Split Variable Declaration
&lt;/h4&gt;

&lt;p&gt;Split combined variable declaration into separate variable declarations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xWNlD3Po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-split-variable-declaration.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWNlD3Po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-split-variable-declaration.gif" alt="Split Variable Declaration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#12-collapse-into-shorthand-notation"&gt;
  &lt;/a&gt;
  12. Collapse into Shorthand Notation
&lt;/h4&gt;

&lt;p&gt;Collapse object properties into shorthand notation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_vUVIvtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-collapse-into-shorthand-property-name.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vUVIvtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-collapse-into-shorthand-property-name.gif" alt="Collapse into Shorthand Notation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#13-expand-shorthand-property"&gt;
  &lt;/a&gt;
  13. Expand Shorthand Property
&lt;/h4&gt;

&lt;p&gt;Expand a shorthand notation into the full notation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12t_t6pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-expand-shorthand-property.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12t_t6pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-expand-shorthand-property.gif" alt="Expand Shorthand Property"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-conditionals"&gt;
  &lt;/a&gt;
  B. Conditionals
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#14-invert-condition"&gt;
  &lt;/a&gt;
  14. Invert Condition
&lt;/h4&gt;

&lt;p&gt;Invert the condition of if-else statements and conditional expressions (and flip the content).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8YqBumQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-invert-condition.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YqBumQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-invert-condition.gif" alt="Invert Condition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#15-flip-operator"&gt;
  &lt;/a&gt;
  15. Flip Operator
&lt;/h4&gt;

&lt;p&gt;Swap the argument order of a commutative binary operator (and update the operator when needed, e.g. when flipping &lt;code&gt;&amp;lt;&lt;/code&gt; to &lt;code&gt;&amp;gt;=&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ctvOQu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-flip-operator.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ctvOQu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-flip-operator.gif" alt="Flip Operator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#16-push-down-not-operator"&gt;
  &lt;/a&gt;
  16. Push Down Not Operator
&lt;/h4&gt;

&lt;p&gt;Pushes the &lt;code&gt;!&lt;/code&gt; (not operator) into &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; binary expressions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--464c4F8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-push-down-not-operator.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--464c4F8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-push-down-not-operator.gif" alt="Push Down Not Operator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#17-merge-nested-if"&gt;
  &lt;/a&gt;
  17. Merge Nested If
&lt;/h4&gt;

&lt;p&gt;Merge an &lt;code&gt;if&lt;/code&gt;-statement inside another &lt;code&gt;if&lt;/code&gt; statement into a single &lt;code&gt;if&lt;/code&gt; statement with a &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; condition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldNOYK2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-merge-nested-if.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldNOYK2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-merge-nested-if.gif" alt="Merge Nested If"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#18-merge-nested-elseif"&gt;
  &lt;/a&gt;
  18. Merge Nested Else-If
&lt;/h4&gt;

&lt;p&gt;Merge an &lt;code&gt;if&lt;/code&gt;-statement inside an else statement into an &lt;code&gt;else if&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJxW3i9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-merge-nested-else-if.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJxW3i9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-merge-nested-else-if.gif" alt="Merge Nested Else-If"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#19-convert-to-null-check"&gt;
  &lt;/a&gt;
  19. Convert to '== null' Check
&lt;/h4&gt;

&lt;p&gt;Convert a strict equality check against &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; into an equivalent &lt;code&gt;== null&lt;/code&gt; check.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jenh-tm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-eq-eq-null.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jenh-tm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-eq-eq-null.gif" alt="Convert to '== null' check"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#20-combine-return-statements-with-conditional"&gt;
  &lt;/a&gt;
  20. Combine Return Statements with Conditional
&lt;/h4&gt;

&lt;p&gt;Convert an &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; statement with &lt;code&gt;return&lt;/code&gt; into a conditional.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ooAcYUuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-return-ternary.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ooAcYUuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-return-ternary.gif" alt="Combine Return Statements with Conditional"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c-code-modernization"&gt;
  &lt;/a&gt;
  C. Code Modernization
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#21-add-numeric-separators"&gt;
  &lt;/a&gt;
  21. Add numeric separators
&lt;/h4&gt;

&lt;p&gt;Adds '_' separator to decimal, hex, binary, octal and big int literals (ES2021).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qa-SAwgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-add-numeric-separator.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qa-SAwgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-add-numeric-separator.gif" alt="Add Numeric Separators"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#22-assign-defaults-with-nullish-coalescence"&gt;
  &lt;/a&gt;
  22. Assign Defaults with Nullish Coalescence
&lt;/h4&gt;

&lt;p&gt;Shorten default value assignments with nullish coalescing operator (ES2020).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZH6zjFM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-nullish-coalescing-operator.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZH6zjFM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-nullish-coalescing-operator.gif" alt="Assign Defaults with Nullish Coalescence"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#23-convert-to-optional-chain-expression"&gt;
  &lt;/a&gt;
  23. Convert to Optional Chain Expression
&lt;/h4&gt;

&lt;p&gt;Converts a chain of nullish or falsy checks into an optional chaining expression (ES2020). VS Code supports this refactoring already for some cases (e.g. &lt;code&gt;x &amp;amp;&amp;amp; x.a&lt;/code&gt;). P42 adds support for additional chaining constructs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3spznmao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-optional-chaining.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3spznmao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-optional-chaining.gif" alt="Convert to Optional Chain Expression"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#24-convert-mathpow-to-exponentation-operator"&gt;
  &lt;/a&gt;
  24. Convert Math.pow to Exponentation Operator
&lt;/h4&gt;

&lt;p&gt;Convert &lt;code&gt;Math.pow(...)&lt;/code&gt; expression to use the &lt;code&gt;**&lt;/code&gt; exponentiation operator (ES2016).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mmCDzDv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-math-pow-to-exponentiation.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mmCDzDv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-math-pow-to-exponentiation.gif" alt="Convert Math.pow to Exponentation Operator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#25-convert-var-to-let-and-const"&gt;
  &lt;/a&gt;
  25. Convert Var to Let and Const
&lt;/h4&gt;

&lt;p&gt;Converts &lt;code&gt;var&lt;/code&gt; declarations to &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; (based on their usage) (ES2015).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hm6fyqKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-block-scoped-variable.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hm6fyqKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-block-scoped-variable.gif" alt="Convert Var to Let and Const"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#26-convert-function-to-arrow-function"&gt;
  &lt;/a&gt;
  26. Convert Function to Arrow Function
&lt;/h4&gt;

&lt;p&gt;Convert function expressions into arrow functions (ES2015).  VS Code itself also supports this refactoring.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwdF7fSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-arrow-function.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwdF7fSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-arrow-function.gif" alt="Convert Function to Arrow Function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#27-convert-to-object-method"&gt;
  &lt;/a&gt;
  27. Convert to Object Method
&lt;/h4&gt;

&lt;p&gt;Convert property assignments with functions to method declarations (ES2015).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ImnU5l5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-to-object-method.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImnU5l5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-convert-to-object-method.gif" alt="Convert to Object Method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#28-use-default-parameters"&gt;
  &lt;/a&gt;
  28. Use Default Parameters
&lt;/h4&gt;

&lt;p&gt;Convert default value assignments to parameter default values (ES2015).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wKiu9ARa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-default-parameter.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKiu9ARa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-default-parameter.gif" alt="Use Default Parameters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#29-use-template-literals"&gt;
  &lt;/a&gt;
  29. Use Template Literals
&lt;/h4&gt;

&lt;p&gt;Convert string concatenation to template literals (ES2015).&lt;br&gt;
 VS Code itself also supports this refactoring. The P42 version adds support for a few additional cases, such as pure string concatenation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9k1rHoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-template-literal.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9k1rHoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-template-literal.gif" alt="Use Template Literals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#30-use-stringstartswith"&gt;
  &lt;/a&gt;
  30. Use String.startsWith
&lt;/h4&gt;

&lt;p&gt;Convert check of the first string character to &lt;code&gt;String.startsWith()&lt;/code&gt; (ES2015).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yprVoT9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-string-starts-with.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yprVoT9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-string-starts-with.gif" alt="Use String.startsWith"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#31-use-stringendswith"&gt;
  &lt;/a&gt;
  31. Use String.endsWith
&lt;/h4&gt;

&lt;p&gt;Convert check of the last string character to &lt;code&gt;String.endsWith()&lt;/code&gt; (ES2015).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7NLhirM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-string-ends-with.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7NLhirM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-string-ends-with.gif" alt="Use String.endsWith"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#32-convert-apply-to-spread-operator"&gt;
  &lt;/a&gt;
  32. Convert .apply() to Spread Operator
&lt;/h4&gt;

&lt;p&gt;Convert &lt;code&gt;.apply()&lt;/code&gt; calls to use the spread operator (&lt;code&gt;...&lt;/code&gt;) (ES2015).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4hrZHR4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-spread-operator.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4hrZHR4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-22-supercharge-vscode-with-32-javascript-refactorings/action-spread-operator.gif" alt="Convert '.apply()' to Spread Operator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=p42ai.refactor"&gt;P42 JavaScript Assistant&lt;/a&gt;&lt;/strong&gt; in the &lt;a href="https://marketplace.visualstudio.com/items?itemName=p42ai.refactor"&gt;Visual Studio Code Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy refactoring!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>refactoring</category>
    </item>
    <item>
      <title>📚Angular Interview Questions Part 1</title>
      <author>Stacksjar</author>
      <pubDate>Wed, 22 Sep 2021 09:10:33 +0000</pubDate>
      <link>https://dev.to/stacksjar/angular-interview-questions-part-1-5cc2</link>
      <guid>https://dev.to/stacksjar/angular-interview-questions-part-1-5cc2</guid>
      <description>&lt;p&gt;In this article we are going to see a well curated list of angular interview questions 2021 and answers for experienced as well as freshers.&lt;/p&gt;

&lt;p&gt;Part 2 of this series :- &lt;a href="https://stacksjar.com/post/angular-interview-questions-part-2"&gt;Angular Interview Questions Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Part 3 of this series :- &lt;a href="https://stacksjar.com/post/angular-interview-questions-part-3"&gt;Angular Interview Questions Part 3&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-were-clientside-frameworks-like-angular-introduced"&gt;
  &lt;/a&gt;
  Why were client-side frameworks like Angular introduced?
&lt;/h2&gt;

&lt;p&gt;The advent of modern JavaScript frameworks has made it much easier to build highly dynamic, interactive applications. &lt;/p&gt;

&lt;p&gt;JS frameworks are JavaScript code libraries that have pre-written code to use for routine programming features and tasks. It is literally a framework to build websites or web applications around.&lt;/p&gt;

&lt;p&gt;A framework is a library that offers opinions about how software gets built. These opinions allow for predictability and homogeneity in an application; predictability allows software to scale to an enormous size and still be maintainable; predictability and maintainability are essential for the health and longevity of software.&lt;/p&gt;

&lt;p&gt;Angular is an open-source web application framework led by the Angular Team at Google and by a community of individuals and corporations. It is a complete rewrite from the same team that built AngularJS. Angular was officially released on the 14th of September 2016.&lt;/p&gt;

&lt;p&gt;Angular is a component-based framework which uses declarative HTML templates. At build time, transparently to developers, the framework's compiler translates the templates to optimized JavaScript instructions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-lifecycle-hooks-in-angular"&gt;
  &lt;/a&gt;
  What are lifecycle hooks in Angular?
&lt;/h2&gt;

&lt;p&gt;Angular Lifecycle hooks are different states of an angular applications component or directive through out the time of its instantiation to time when its destroyed. These lifecycle hooks are invoked at different phases and conditions of angular application.&lt;/p&gt;

&lt;p&gt;The lifecycle continues with change detection, as Angular checks to see when data-bound properties change, and updates both the view and the component instance as needed. &lt;/p&gt;

&lt;p&gt;We can use any of these lifecycle hooks to tap into particular event or state of the application to perform task's as required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Below are the lifecycle hooks:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ngOnChanges():&lt;/strong&gt; Called whenever one or more data-bound input properties change just before before ngOnInit().&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ngOnInit():&lt;/strong&gt; Called once, after the first ngOnChanges() and angular has insantiated the component&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ngDoCheck():&lt;/strong&gt; Called on every change detection run, and once after ngOnChanges() and ngOnInit() respectively. The purpose of this lifecycle hook is to act upon changes that Angular can't or won't detect on its own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ngAfterContentInit():&lt;/strong&gt; Called once after the first ngDoCheck(). The purpose of this lifecycle hook is to respond after angular has finished loading any external data into its component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ngAfterContentChecked():&lt;/strong&gt; Called after ngAfterContentInit() and every subsequent ngDoCheck(). The purpose of this lifecycle hook is to check the content projected into the directive or component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ngAfterViewInit():&lt;/strong&gt; Called once after the first ngAfterContentChecked(), This lifecycle hook is invoked when angular initializes the component's views and child views&lt;br&gt;
ngAfterViewChecked(): Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked(). This lifecycle hook is invoked after angular checks the component's views and child views, or the view that contains the directive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ngOnDestroy():&lt;/strong&gt; Called immediately before Angular destroys the directive or component. We can use this lifecycle hook for Cleanup just before Angular destroys the directive or component. Unsubscribe Observables and detach event handlers to avoid memory leaks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#explain-components-modules-and-services-in-angular"&gt;
  &lt;/a&gt;
  Explain Components, Modules and Services in Angular
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Components&lt;/strong&gt; in Angular are the main building block for Angular applications. Each component consists of 4 files by default .html, .less, .ts and .spec.ts. A component is basically a wrapper for our presentation layer and the logical layer.&lt;/p&gt;

&lt;p&gt;An HTML template that declares what renders on the page. A Typescript class that defines behavior. A CSS selector that defines how the component is used in a template.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Module&lt;/strong&gt; in Angular are basically a container for all the code blocks in the application. We declare and import all services, pipes, directives and components in the default main module created by angular at time of project creation which is the AppModule. We can create more than one modules for our application and lazy or eager load as per our requirement. An angular module is defined with the @NgModule() decorator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt; in Angular are way of communicating between the components of an Angular application and sharing data between them. We can make our code modular and re-usable by means of services as it can be used across the application. Services in angular are declared with use of the @Injectable() decorator.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-directives-in-angular"&gt;
  &lt;/a&gt;
  What are directives in Angular?
&lt;/h2&gt;

&lt;p&gt;Directives are classes that add additional behavior to elements in your Angular applications. Directives are basically custom HTML attributes which Angular provides us Built in to use and some of which we can create by ourselves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Below are the different types of Directives&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structural Directives:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are the type of directives which helps us to create DOM Objects. We can add DOM objects and remove DOM objects inside our application dynamically by using these two directives.&lt;/p&gt;

&lt;p&gt;*ngFor: Loop over the Array of objects creating HTML elements on which the directive is used.&lt;br&gt;
 *ngIf: Add or remove the HTML element from DOM depending upon the condition specified.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attribute Directives:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are the type of directives which helps us to change the look and feel and behavior of our HTML elements, attributes, properties, and components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NgClass:&lt;/strong&gt; adds and removes a set of CSS classes.&lt;br&gt;
&lt;strong&gt;NgStyle:&lt;/strong&gt; adds and removes a set of HTML styles.&lt;br&gt;
&lt;strong&gt;NgModel:&lt;/strong&gt; adds two-way data binding to an HTML form element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Component Directives:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are the types of directives with a template. This type of directive is the most common directive type. This Specifies that an Angular component is also a type of Directive.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-angular-router"&gt;
  &lt;/a&gt;
  What is Angular Router?
&lt;/h2&gt;

&lt;p&gt;Angular Router is a Routing service for our angular application provided by Angular. Which we can import and use in our Application. We need specify the Array of Routes to this service and import it in our AppModule. This service is required for Navigating through different components/view of our angular application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-angular-material"&gt;
  &lt;/a&gt;
  What is Angular Material?
&lt;/h2&gt;

&lt;p&gt;Angular Material is a material UI component library built by the Angular team to integrate seamlessly with Angular applications. Angular Material provides built in ready to use components that helps in creating minimal, elegant and functional, HTML elements and pages. It consists of well tested components to ensure performance and reliability with straightforward APIs and consistent cross platform behavior.&lt;/p&gt;

&lt;p&gt;Angular Material provides tools that help developers build their own custom components with common interaction patterns. It helps in creating faster, beautiful, and responsive websites. It is inspired by the Google Material Design.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-string-interpolation-in-angular"&gt;
  &lt;/a&gt;
  What is string interpolation in Angular?
&lt;/h2&gt;

&lt;p&gt;String Interpolation in Angular is method to bind data from the logical layer to the presentation layer. We can bind our ts variables in our html directly by using this mechanism called as string Interpolation which is denoted by double curly braces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Below is the example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//ts file
title: String = 'Angular Application';﻿
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//html file
{{ title }} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-does-one-share-data-between-components-in-angular"&gt;
  &lt;/a&gt;
  How does one share data between components in Angular?
&lt;/h2&gt;

&lt;p&gt;Following are the most common ways in which we can share data between angular components:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Input:&lt;/strong&gt; The @Input method is used when we want to pass data from parent to child.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Output:&lt;/strong&gt; The @Ouput method is used when we want to pass data from child to parent by using it EventEmmitter feature.&lt;br&gt;
Services: Services are the most common way of sharing data across multiple components as its declared in the root of the component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-out-differences-between-angularjs-and-angular"&gt;
  &lt;/a&gt;
  List out differences between AngularJS and Angular
&lt;/h2&gt;

&lt;p&gt;Angular JS is the first ever version of Angular and is based on Javascript. Where as the Angular is completely based on Typescript which is a superset of Javascript and has backward compatibility.&lt;/p&gt;

&lt;p&gt;Angular JS, based on JavaScript, uses terms of scope and controllers while Angular uses a hierarchy of components. Angular is component-based while AngularJS uses directives.&lt;/p&gt;

&lt;p&gt;Angular is based on modern web applications platform and we can develop cross platform applications with single angular code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checkout other Articles on Angular Interview Questions series from below Links&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Part 2 of this series :- &lt;a href="https://stacksjar.com/post/angular-interview-questions-part-2"&gt;Angular Interview Questions Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Part 3 of this series :- &lt;a href="https://stacksjar.com/post/angular-interview-questions-part-3"&gt;Angular Interview Questions Part 3&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Vertical teams at scale a.k.a how to scale frontend work in growing organisation</title>
      <author>Patryk Staniewski</author>
      <pubDate>Wed, 22 Sep 2021 08:59:03 +0000</pubDate>
      <link>https://dev.to/exihuatl/vertical-teams-at-scale-a-k-a-how-to-scale-frontend-work-in-growing-organisation-4lef</link>
      <guid>https://dev.to/exihuatl/vertical-teams-at-scale-a-k-a-how-to-scale-frontend-work-in-growing-organisation-4lef</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-we-were-trying-to-achieve"&gt;
  &lt;/a&gt;
  What we were trying to achieve?
&lt;/h2&gt;

&lt;p&gt;We want to scale our work between multiple independent teams each with its product owner, designer, and multiple engineers. To do that we have a few solutions that we’ll discuss and I’ll try to explain our logic behind making our final decision.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-our-options"&gt;
  &lt;/a&gt;
  What are our options?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#separate-applications-with-a-host"&gt;
  &lt;/a&gt;
  Separate applications with a host.
&lt;/h3&gt;

&lt;p&gt;Creating independent applications that would live in separate repositories is one of the most popular way of building frontend. Each team has its own technologies, tools, and buildchain which some of them really value. There is unfortunately one hefty problem - versioning. In this setup, after making a change in our application we would have to update version in package registry and then bump version inside our “host application”. And then there is our UI library that each app is using.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monorepo-to-the-rescue"&gt;
  &lt;/a&gt;
  Monorepo to the rescue?
&lt;/h3&gt;

&lt;p&gt;Our current application is a monorepo, rather large monorepo.&lt;br&gt;
At the time of writing this article, we have 19290 files with 3580303 lines of code with 89 authors in the last few months.&lt;br&gt;
To create new applications we don’t have to think about build configurations. Linters, unit tests, e2e tests are all already set up and ready for development. It’s as simple as adding a new directory and path to our app routing. It comes at a cost of being forced to use specific technologies and tools. Changing them would need to be approved and developed by each individual team and it’s a nightmare to coordinate.&lt;br&gt;
Additionally, our pipeline’s duration is already ranging between tiresome and infinite (our last worked for 52 minutes). Merge requests are happening on average every hour so we have a constant stream of workers…ehm…working.&lt;br&gt;
Unfortunately, deployment is shared across all teams so even the smallest of changes needs to be verified through multiple people in code review and needs to pass our pipelines two times (one before making a merge and one after on master branch).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#microfrontend-to-the-rescue"&gt;
  &lt;/a&gt;
  Microfrontend to the rescue?
&lt;/h3&gt;

&lt;p&gt;A microfrontend is a microservice that exists within a browser. Each microfrontend has its own repository, its own build configuration and process, and is being able to be deployed individually. There is a lot of implementation of this concept. One of the most popular tool that helps is &lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt; - a framework for bringing together multiple JavaScript microfrontends in a frontend application. It is an incredible tool and should be considered for greenfield projects. It gives a lot of tools and features, such as being able to use different frameworks in the same application.&lt;/p&gt;

&lt;p&gt;These additional features however would mean increased initial payload and memory allocation. Although performance overhead is minor, when we don’t use these additional functionalities it’s a waste of resources, especially when setting up &lt;code&gt;single-spa&lt;/code&gt; would be costly to implement in our existing setup.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#module-federation-to-the-rescue"&gt;
  &lt;/a&gt;
  Module federation to the rescue?
&lt;/h3&gt;

&lt;p&gt;Finally, we decided to integrate new applications using Webpack’s latest feature - module federation. It integrates nicely with our webpack configuration, has a tiny boilerplate, and is straightforward to read (after understanding the complexity of webpack itself).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Multiple separate builds should form a single application. These separate builds should not have dependencies between each other, so they can be developed and deployed individually. - Webpack team  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We distinguish between local and remote modules. Local modules are normal modules that are part of the current application. Remote modules are modules that are being loaded at the runtime.&lt;/p&gt;

&lt;p&gt;The idea is simple. An application references a remote using a configured name that is not known at compile time. That reference is only resolved at runtime by the so-called remote entry point. It’s a minimal script that provides actual external.&lt;/p&gt;

&lt;p&gt;In its simplest form, the code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;
&lt;span class="kr"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mother&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;remotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remote@http://localhost:3001/remoteEntry.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// src/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RemoteApp&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remote/App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our remote application will be imported from an external URL instead of our local repository and loaded at runtime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-gained-by-adopting-microservice-architecture"&gt;
  &lt;/a&gt;
  What we gained by adopting microservice architecture?
&lt;/h2&gt;

&lt;p&gt;Microfrontend gave us a lot of benefits and resolved a lot of issues we had. We’ll walk through in a bit more details.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#independent-teams-independent-applications"&gt;
  &lt;/a&gt;
  Independent teams - independent applications
&lt;/h5&gt;

&lt;p&gt;Our vertical teams can work on their own in separate repositories and are free to choose the technologies they need to create the best user experience.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#autonomous-deployments"&gt;
  &lt;/a&gt;
  Autonomous deployments
&lt;/h5&gt;

&lt;p&gt;Our team can now deploy features without being dependent on the mother app. We were able to set up our pipelines that on average last about 8 minutes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGhFLduB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc8gxtjspgjyryuuhub4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGhFLduB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc8gxtjspgjyryuuhub4.png" alt="pipeline preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#code-trimming"&gt;
  &lt;/a&gt;
  Code trimming
&lt;/h5&gt;

&lt;p&gt;We are not adding additional code to the already humongous codebase of our monorepo.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#onboarding-new-people"&gt;
  &lt;/a&gt;
  Onboarding new people
&lt;/h5&gt;

&lt;p&gt;Onboarding can be overwhelming for new developers, especially juniors that join our teams. We eased the process and new friends were able to contribute even on their first day with confidence.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#developer-experience"&gt;
  &lt;/a&gt;
  Developer experience
&lt;/h5&gt;

&lt;p&gt;It’s often overlooked, but developer experience is crucial for every successful project. Because we created a new project and were independent of our monorepo application, we were able to integrate Snowpack into our day-to-day work. It gave us instant startup time with a fast refresh and cleaner configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-problems-weve-encountered"&gt;
  &lt;/a&gt;
  What problems we've encountered?
&lt;/h2&gt;

&lt;p&gt;On a road to production, we had a few blockades that none of us had met before. We had to be a little bit more creative.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singleton-libraries"&gt;
  &lt;/a&gt;
  Singleton libraries
&lt;/h3&gt;

&lt;p&gt;In libraries such as React, we cannot run multiple versions of the same library at once if they don’t share the same version. We updated to the latest version in both applications which was a lengthy process. After that, we added our react library to shared dependencies in Wepback configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#preview-environment"&gt;
  &lt;/a&gt;
  Preview environment
&lt;/h3&gt;

&lt;p&gt;Our monorepo is using preview deployments to be able to test changes both manually and using e2e tests. By using module federation, we are not creating branches in our mother app - code is dynamically run directly on the client and server-side.&lt;br&gt;
The way we were able to get around that was by dynamically injecting the correct remote based on the parameter in the URL. It was not as easy as we thought. To achieve that we had to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deploy our remote application to be available through some dynamic URL on each pull request. We created a deploy preview step in our CI that created dynamic storage using Amazon’s Simple Storage Service.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;https://&lt;span class="nv"&gt;$bucketName&lt;/span&gt;.s3.eu-central-1.amazonaws.com/federated/remoteEntry.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Inject this dynamic remote into our living staging environment.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// https://website.com?remoteApp1=https://$bucketName.s3.eu-central-1.amazonaws.com/federated/remoteEntry.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remoteApp1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Insert script tag with this remote.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Load actual component to be used in our code.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loadComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#learning-curve"&gt;
  &lt;/a&gt;
  Learning curve
&lt;/h3&gt;

&lt;p&gt;Our setup has a steep learning curve. There is a lot to learn and understand to get a grasp for some of the low-level concepts and webpack documentation isn’t much easier to read with its building blocks defined as &lt;code&gt;ContainerPlugin&lt;/code&gt;, &lt;code&gt;ContainerReferencePlugin&lt;/code&gt;, and &lt;code&gt;ModuleFederationPlugin&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Module federation filled an enormous gap in the frontend world. Lessons learned can help us extract some of the self-contained applications currently living inside monorepo to speed our development and give a lot of freedom to autonomous teams. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What’s next?
&lt;/h2&gt;

&lt;p&gt;Our current setup is impressive for us. With our fast pipelines, separate deployments, and independent teams we are more agile than ever.&lt;br&gt;
But we must not rest on our laurels. There is a new version of React coming and we need to figure out a way of introducing backward-incompatible changes such as this. And we have our eyes on the new cool kids on the block - Javascript’s native module system (ESM) and non-JS bundlers such as esbuild written in Go.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>architecture</category>
      <category>microfrontend</category>
    </item>
    <item>
      <title>First thing to do when joining or building a team</title>
      <author>Raffaele Pizzari</author>
      <pubDate>Wed, 22 Sep 2021 08:12:14 +0000</pubDate>
      <link>https://dev.to/s2engineers/first-thing-to-do-when-joining-or-building-a-team-31bg</link>
      <guid>https://dev.to/s2engineers/first-thing-to-do-when-joining-or-building-a-team-31bg</guid>
      <description>&lt;p&gt;&lt;strong&gt;Building a team or joining an established team&lt;/strong&gt; is certainly hard.&lt;br&gt;
Every transitions leads to new challenges and we have to be as prepared as possible.&lt;/p&gt;

&lt;p&gt;Multiple people means multiple personalities, habits, languages, points of view, opinions, conflicts to deal with.&lt;br&gt;
However, &lt;strong&gt;plurality also represents the strength of a team&lt;/strong&gt;. It is up to us to turn challenges into opportunities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is essential to make rules, expectations and goals explicit&lt;/strong&gt;.&lt;br&gt;
The sooner the team is on the same page and makes "visible" what is "invisible", the sooner it can define the boundaries, start a self-improvement process and become extremely productive. &lt;/p&gt;

&lt;p&gt;Obviously it is a very complex process and cannot be summarised in an article. However, I'd like to share with you &lt;strong&gt;my very first step&lt;/strong&gt;, what I always do when I need to build or join a team: my "&lt;strong&gt;User Manual&lt;/strong&gt;" &lt;em&gt;(I've been calling it this way since I discovered the &lt;a href="https://www.atlassian.com/team-playbook/plays/my-user-manual"&gt;Atlassian Playbook&lt;/a&gt; - thank you, &lt;a href="https://www.linkedin.com/in/dkagerer/"&gt;David&lt;/a&gt;!)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.atlassian.com/team-playbook/plays/my-user-manual"&gt;&lt;img alt="Screenshot from the Atlassian's Playbook User Manual page, showing the title and the description of the workshop" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWhY5wPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts86wralb2zzr8pkrqq1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get to know your teammates and how to effectively work with them by sharing user manuals, which include communication preferences and more.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-is-the-user-manual"&gt;
  &lt;/a&gt;
  What is the "User manual"?
&lt;/h2&gt;

&lt;p&gt;It's a way to &lt;em&gt;get to know your teammates and how to effectively work with them&lt;/em&gt; and of course &lt;em&gt;to let your teammates get to know you and how to effectively work with you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can either do it on your own or &lt;a href="https://www.atlassian.com/team-playbook/plays/my-user-manual"&gt;follow these instructions&lt;/a&gt;. It's just very important that you keep it honest.&lt;br&gt;
At the end it's nothing more than your own list of questions and answers, an "interview" with yourself.&lt;/p&gt;

&lt;p&gt;Those are &lt;strong&gt;my questions&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are the &lt;strong&gt;environments I like to work in&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;What are my preferred working hours?&lt;/li&gt;
&lt;li&gt;What are my &lt;strong&gt;communication preferences&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;What are my preferred ways to &lt;strong&gt;receive feedback&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;What are the things I need?&lt;/li&gt;
&lt;li&gt;What are the &lt;strong&gt;things I struggle with&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;What are the &lt;strong&gt;things I love&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;If I were a meme, I would be...?&lt;/li&gt;
&lt;li&gt;What is my favourite saying?&lt;/li&gt;
&lt;li&gt;What are other things I want you to know about me?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's my list, but as I said, everyone can choose the questions and answers, make it more or less personal, more or less fun, more or less detailed. &lt;/p&gt;

&lt;p&gt;When the "User Manuals" are ready, it is very important to organise a meeting with the team and present the documents.&lt;br&gt;
Please, consider to let your team know the following at the start of the meeting (quoting Atlassian's Playbook):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  This activity is designed for team members to understand how to &lt;strong&gt;support each other’s ideal conditions for getting their best work done&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  No one will be pressured to share anything they’re not comfortable sharing.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;This meeting is a safe space&lt;/strong&gt;. Nothing they share will be used against them.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#my-user-manual"&gt;
  &lt;/a&gt;
  My "User manual"?
&lt;/h2&gt;

&lt;p&gt;I keep my "User Manual" always public and accessible to everyone.&lt;br&gt;
Actually I'm thinking about sharing it on my &lt;a href="https://raffaelepizzari.com/"&gt;personal website&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;/small&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;colgroup&gt;
    &lt;col&gt;
    &lt;col&gt;
  &lt;/colgroup&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;Environments I like to work in&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Inclusive&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;Diverse&lt;/li&gt;
          &lt;li&gt;Positive&lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Supportive&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Proactive&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Happy&lt;/span&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;Preferred working hours&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;p&gt;6:30 - 15:00&lt;/p&gt;
        &lt;p&gt;But I'll be of course available 9:00-17:00. 
          &lt;br&gt;
          &lt;br&gt;
        &lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;Communication preferences&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        
          &lt;p&gt;Feel free to contact me any time. I'll get back to you as soon as I can.&lt;/p&gt;
          &lt;p&gt;However, I do have some communication preferences I would share with you:&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Slack is the best way to communicate with me&lt;/li&gt;
            &lt;li&gt;Write longer messages that scan quickly&lt;/li&gt;
            &lt;li&gt;Use threads&lt;/li&gt;
            &lt;li&gt;Replace short follow-up messages with emoji reactions&lt;/li&gt;
          &lt;/ul&gt;
          &lt;p&gt;
            &lt;em&gt;If you contact me via e-mail:&lt;/em&gt;
          &lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Start with the main point, conclude with the context&lt;/li&gt;
            &lt;li&gt;One email thread per topic&lt;/li&gt;
            &lt;li&gt;Summarise complex email threads upon including new recipients&lt;/li&gt;
            &lt;li&gt;Manage recipients (++Hans, --Lara, explain why in 2 words at email start) 
                
              
            &lt;/li&gt;
            &lt;li&gt;Describe the topic in the subject line&lt;/li&gt;
            &lt;li&gt;Hyperlink whenever possible&lt;/li&gt;
          &lt;/ul&gt;
        
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;Preferred ways to receive feedback&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;p&gt;I would be very happy to receive constructive feedback. I truly believe in a positive feedback culture and I can't stress enough the importance of it.&lt;/p&gt;
        &lt;p&gt;I am sharing here some of my wishes for our feedback sessions:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;1-on-1 meeting&lt;/li&gt;
          &lt;li&gt;Share with me the purpose of the feedback&lt;/li&gt;
          &lt;li&gt;Focus on performance and facts, not personal traits&lt;/li&gt;
          &lt;li&gt;Ensure a neutral environment&lt;/li&gt;
          &lt;li&gt;Set up a meeting&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;Things I need&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;span&gt;Openness&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Transparency&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Respect&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Empathy&lt;/span&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;How I learn best&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;span&gt;Doing pair programming / working&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Focusing on a topic and avoid multitasking&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;Making my health your No. 1 priority&lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Getting constructive Feedback&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Reading books&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Doing retrospectives&lt;/span&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;Things I struggle with&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;span&gt;I don't like wasting time&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;I am impatient when I attend a not well-structured meeting&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;
              &lt;span&gt;I don't like pep talks&lt;/span&gt;
            &lt;/span&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;Things I love&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;span&gt;Achieve goals&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Have fun while reaching goals&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Work in a happy environment and connect with colleagues&lt;/span&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;span&gt;Support other developers&lt;/span&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/td&gt;
      &lt;td&gt;
        
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;If I were a meme, I would be...&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NrvKPZ0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkn8z9pc7y648efjkts8.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="'This is fine' meme. A dog is drinking a coffee in a room full of flames and he is reassuring itself that everything is fine." src="https://res.cloudinary.com/practicaldev/image/fetch/s--NrvKPZ0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkn8z9pc7y648efjkts8.jpg"&gt;&lt;/a&gt;
        &lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;My favorite saying&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;p&gt;I really like the "Retrospective Prime Directive":&lt;/p&gt;
        &lt;p&gt;"Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand."&lt;/p&gt;
        &lt;p&gt;
          &lt;em&gt;
            &lt;span&gt;Norm Kerth&lt;/span&gt;
          &lt;/em&gt;
          &lt;br&gt;
          &lt;em&gt;Project Retrospectives: A Handbook for Team Review&lt;/em&gt;
        &lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;
        &lt;p&gt;
          &lt;strong&gt;Other things I want you to know about me&lt;/strong&gt;
        &lt;/p&gt;
      &lt;/th&gt;
      &lt;td&gt;
        &lt;p&gt;I run a &lt;a href="https://www.codejourneys.org"&gt;free learning community for developers&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;I am volunteering as a mentor.&lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#what-about-your-user-manual"&gt;
  &lt;/a&gt;
  What about your "User Manual"?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Do you have one?&lt;/li&gt;
&lt;li&gt;Would you like to have one?&lt;/li&gt;
&lt;li&gt;Would you like to share your User Manual here?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need support to create one, feel free to write me.&lt;/p&gt;

&lt;p&gt;I'd love to hear your feedback!&lt;/p&gt;




&lt;p&gt;(Cover foto credits: &lt;a href="https://pixabay.com/"&gt;https://pixabay.com/&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>discuss</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Adding Tasks with a Checklist to Wagtail Workflows</title>
      <author>LB (Ben Johnston)</author>
      <pubDate>Wed, 22 Sep 2021 07:54:45 +0000</pubDate>
      <link>https://dev.to/lb/adding-tasks-with-a-checklist-to-wagtail-workflows-29b8</link>
      <guid>https://dev.to/lb/adding-tasks-with-a-checklist-to-wagtail-workflows-29b8</guid>
      <description>&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; Create a simple way for Wagtail's CMS admin users to manage custom Workflow Tasks with checklists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why:&lt;/strong&gt; Wagtail's Workflow feature is incredibly powerful and can be leveraged to help guide our users through their Page publishing process easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#journey"&gt;
  &lt;/a&gt;
  Journey
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: Feel free to skip if you just want to see the code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my favourite books is &lt;a href="https://www.goodreads.com/book/show/7796228-the-checklist-manifesto"&gt;The Checklist Manifesto: How to Get Things Right&lt;/a&gt; and another I am reading right now is &lt;a href="https://www.amazon.com/Everything-Its-Place-Mise-En-Place-Organize/dp/1635650119"&gt;Everything in Its Place: The Power of Mise-En-Place to Organise Your Life, Work, and Mind&lt;/a&gt;. The core message that is in common with these is the simple practice of writing a checklist or a plan before you start and where possible, manage those checklists for future work of the same kind.&lt;/p&gt;

&lt;p&gt;Now, checklists can become a burden to those who are forced to mindlessly tick 700 boxes they never read for the thousandth time this week, so as in all things there is a balance.&lt;/p&gt;

&lt;p&gt;However, I do honestly believe that simple checklists for recurring processes can help both new people to a process and those who are veterans, remember the critical aspects of what they do day to day.&lt;/p&gt;

&lt;p&gt;One visceral memory I have of checklists is when my son, Leo, was born. My wife had to go into an emergency C-section and while I won't go into any more details, I do vividly remember up on the wall were two huge checklists (just like described in the Checklist Manifesto) with four or five key steps regarding the surgery process.&lt;/p&gt;

&lt;p&gt;This memory is obviously key to me for more than just checklists, I got to see my amazing son for the first time. I often think back to that moment and wonder how many times a day, or that week those in the room would have done the same operation but how many lives a simple checklist on the wall would have saved.&lt;/p&gt;

&lt;p&gt;It also puts into perspective the code I write and the processes we design for our team. Most likely what we do is not something that could risk the lives of others but nonetheless, we all have a part to play in helping our teams be excellent and remember the little but non-trivial things they do in their job.&lt;/p&gt;

&lt;p&gt;So that leads us to Wagtail's Workflow system, which was introduced in &lt;a href="https://docs.wagtail.io/en/stable/releases/2.10.html#moderation-workflow"&gt;Wagtail 2.10&lt;/a&gt;. This system replaced the previous moderation workflow and was a sponsored feature (a special thanks to those who contribute to Open Source / Free Software) and may have flown under the radar for many of those who use Wagtail.&lt;/p&gt;

&lt;p&gt;However, this Workflow feature has been built from the ground up to be very extensible and even borrows a lot of the approaches from Wagtail's core &lt;code&gt;Page&lt;/code&gt; model itself where a mix of custom code and CMS Admin editing can be combined to make something incredibly flexible and powerful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-are-building"&gt;
  &lt;/a&gt;
  What We Are Building
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you may have guessed, we will be putting together a way for Workflow Tasks to be created with a checklist and then that checklist is presented to those when they approve that specific step in the workflow.&lt;/p&gt;

&lt;p&gt;This means that Wagtail Admin users could create a Workflow Checklist Task that is specifically for approval of types of pages or a generic one for all pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-0-getting-started"&gt;
  &lt;/a&gt;
  Step 0 - Getting Started
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is assumed at this point you have Wagtail running locally and have a basic understanding of the &lt;a href="https://docs.wagtail.io/en/stable/editor_manual/administrator_tasks/managing_workflows.html#managing-workflows"&gt;Workflow system from a user's perspective&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If not, it would be best to start with the &lt;a href="https://docs.wagtail.io/en/stable/getting_started/index.html"&gt;Wagtail Getting Started&lt;/a&gt; guide.&lt;/li&gt;
&lt;li&gt;It is also assumed you have a basic understanding of Django's &lt;a href="https://docs.djangoproject.com/en/3.2/topics/db/models/"&gt;Model&lt;/a&gt; and &lt;a href="https://docs.djangoproject.com/en/3.2/topics/forms/"&gt;Form&lt;/a&gt; systems, although if not maybe this Tutorial will be a good way to get some deeper understanding.&lt;/li&gt;
&lt;li&gt;Versions:

&lt;ul&gt;
&lt;li&gt;Django 3.2&lt;/li&gt;
&lt;li&gt;Wagtail 2.14&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-the-raw-checklistapprovaltask-endraw-model"&gt;
  &lt;/a&gt;
  Step 1 - Create the &lt;code&gt;ChecklistApprovalTask&lt;/code&gt; Model
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Firstly, we need to think about what this &lt;code&gt;Task&lt;/code&gt; model is and what we want to let the user fill out.&lt;/li&gt;
&lt;li&gt;The Wagtail &lt;code&gt;Workflow&lt;/code&gt; area has a few key models, the main being a &lt;code&gt;Workflow&lt;/code&gt; and a &lt;code&gt;Task&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When creating a &lt;code&gt;Task&lt;/code&gt; in the Wagtail admin, the user is presented with what kind of &lt;code&gt;Task&lt;/code&gt; to use (similar to when creating a new &lt;code&gt;Page&lt;/code&gt;), this UI only shows if there are more than one kind of &lt;code&gt;Task&lt;/code&gt; models available (Wagtail will search through your models and find all those that are subclasses of the core &lt;code&gt;Task&lt;/code&gt; model).&lt;/li&gt;
&lt;li&gt;So, the &lt;code&gt;Task&lt;/code&gt; model we are creating contains the fields that the user enters for multiple &lt;code&gt;Task&lt;/code&gt;s of that 'kind', which are then mapped to one or more user created &lt;code&gt;Workflow&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;For our base &lt;code&gt;Task&lt;/code&gt; model in that case, we do not actually need to define sets of checklists but rather a way for users to enter a set of checklist items and the simplest way to do this would be with a multi-line &lt;code&gt;TextField&lt;/code&gt; where each line becomes a checklist item.&lt;/li&gt;
&lt;li&gt;Along with that, we will also add a field to determine whether this &lt;code&gt;Task&lt;/code&gt; will require ALL checklist items to be ticked when submitting, this way the checklists can be a 'suggestion' or a 'requirement' on a per &lt;code&gt;Task&lt;/code&gt; instance basis.&lt;/li&gt;
&lt;li&gt;It is important to remember that the &lt;code&gt;Task&lt;/code&gt; instance can be changed at any time, so the checklist the user views today could be different tomorrow and as such we will keep this implementation simpler by not tracking that the checklist was submitted and which items were ticked but that could be implemented as an enhancement down the road.&lt;/li&gt;
&lt;li&gt;The following code is loosely based on the &lt;a href="https://docs.wagtail.io/en/stable/advanced_topics/custom_tasks.html"&gt;Wagtail docs How to add new Task Types&lt;/a&gt; section, however, to save a bunch of reimplementation, instead of building all the user logic on our own we will just extend the existing (built-in) &lt;a href="https://github.com/wagtail/wagtail/blob/main/wagtail/core/models/__init__.py#L3425"&gt;&lt;code&gt;GroupApprovalTask&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The reason for extending &lt;code&gt;GroupApprovalTask&lt;/code&gt; is that our &lt;code&gt;ChecklistApprovalTask&lt;/code&gt; is very similar, we want to assign a user group that can approve/reject as a &lt;code&gt;Task&lt;/code&gt; but we just want to allow the approve step to show extra content in the approval screen.&lt;/li&gt;
&lt;li&gt;Once you implement the code below you should be able to create a new Workflow and add one of the new &lt;code&gt;ChecklistApprovalTask&lt;/code&gt; instances. For the rest of this tutorial it would be good to have one ready to go to test with as we build out the features.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-raw-modelspy-endraw-"&gt;
  &lt;/a&gt;
  Code &lt;code&gt;models.py&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create a new model &lt;code&gt;ChecklistApprovalTask&lt;/code&gt; that extends &lt;code&gt;GroupApprovalTask&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This new model will contain two fields; &lt;code&gt;checklist&lt;/code&gt; a &lt;code&gt;TextField&lt;/code&gt; which will be used to generate the checklist items (per line), and a &lt;code&gt;is_checklist_required&lt;/code&gt; &lt;code&gt;BooleanField&lt;/code&gt; which will be ticked to force each checklist item to be ticked.&lt;/li&gt;
&lt;li&gt;Similar to &lt;code&gt;Page&lt;/code&gt; &lt;code&gt;panels&lt;/code&gt;, we can use the &lt;code&gt;admin_form_fields&lt;/code&gt; class attribute to define a List of fields that will be shown when a user creates/edits this &lt;code&gt;Task&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The last part of our model is to leverage the &lt;code&gt;get_description&lt;/code&gt; class method and the meta verbose names to provide a user-facing description &amp;amp; name of this &lt;code&gt;Task&lt;/code&gt; type, plus we want to override the one that comes with the &lt;code&gt;GroupApprovalTask&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;Once you have built your model, run &lt;code&gt;django-admin makemigrations&lt;/code&gt; and then &lt;code&gt;django-admin migrate&lt;/code&gt; to apply your new model.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.core.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GroupApprovalTask&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChecklistApprovalTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GroupApprovalTask&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Custom task type where all the features of the GroupApprovalTask will exist but
    with the ability to define a custom checklist that may be required to be checked for
    Approval of this step. Checklist field will be a multi-line field, each line being
    one checklist item.
    """&lt;/span&gt;

    &lt;span class="c1"&gt;# Reminder: Already has 'groups' field as we are extending `GroupApprovalTask`
&lt;/span&gt;
    &lt;span class="n"&gt;checklist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"Checklist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Each line will become a checklist item shown on the Approve step."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;is_checklist_required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"Required"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"If required, all items in the checklist must be ticked to approve."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;admin_form_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GroupApprovalTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin_form_fields&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"checklist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"is_checklist_required"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_description&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"Members of the chosen User Groups can approve this task with a checklist."&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Checklist approval task"&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Checklist approval tasks"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Li_zAi2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrki188v8nwm4fyk58ol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Li_zAi2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrki188v8nwm4fyk58ol.png" alt="Step 1a - Create the Model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LiE7L5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b96xndiwoita8j3auh9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LiE7L5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b96xndiwoita8j3auh9m.png" alt="Step 1b - Task Model Editing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before you continue:&lt;/strong&gt; Check that when you create a new Task you can now see that there are two options available; 'Group approval task' and 'Checklist approval task'.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-revise-the-actions-to-always-show-the-form-modal"&gt;
  &lt;/a&gt;
  Step 2 - Revise the Actions to Always Show the Form Modal
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The built-in &lt;code&gt;GroupApprovalTask&lt;/code&gt;, when in a Workflow, will give the user two options; 'Approve and Publish' and 'Approve with Comment and Publish', the difference is that the one with the comment will open a form modal when clicked where the user can fill out a comment.&lt;/li&gt;
&lt;li&gt;What we want to do for our custom &lt;code&gt;Task&lt;/code&gt; is to ensure that the approval step can &lt;strong&gt;only&lt;/strong&gt; be completed with a form modal variant, and in this form we will show the checklist.&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;Task&lt;/code&gt; has a method &lt;a href="https://docs.wagtail.io/en/stable/advanced_topics/custom_tasks.html?highlight=get_actions#customising-behaviour"&gt;&lt;code&gt;get_actions&lt;/code&gt;&lt;/a&gt; which will return a list of &lt;code&gt;(action_name, action_verbose_name, action_requires_additional_data_from_modal)&lt;/code&gt; tuples.&lt;/li&gt;
&lt;li&gt;We will now revise this method to leverage the existing check if the user is in the right group but only return one option with the form modal being required, we will also ensure there is a reject action allowed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-raw-modelspy-endraw-"&gt;
  &lt;/a&gt;
  Code &lt;code&gt;models.py&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Within the &lt;code&gt;CrosscheckApprovalTask&lt;/code&gt; built above, create a new method &lt;code&gt;get_actions&lt;/code&gt;, this should copy the user check from &lt;a href="https://github.com/wagtail/wagtail/blob/main/wagtail/core/models/__init__.py#L3456"&gt;the GroupApprovalTask implementation&lt;/a&gt; but only return two actions.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CrosscheckApprovalTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GroupApprovalTask&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ... checklist etc, from above step
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_actions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Customise the actions returned to have a reject and only one approve.
        The approve will have a third value as True which indicates a form is
        required.
        """&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_superuser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;REJECT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"reject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Request changes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;APPROVE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"approve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Approve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;REJECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;APPROVE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="c1"&gt;# ... @classmethod etc
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Before you continue:&lt;/strong&gt; Check that when you put an existing Page into the workflow that contains this new task type, when approving the change it will show only one option 'Approve and Publish' and this should open a form modal. No need to approve just yet though.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fURUVEQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3902n6avyawhiwso3tim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fURUVEQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3902n6avyawhiwso3tim.png" alt="Step 2 - Basic actions form modal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-build-a-basic-checklist-form"&gt;
  &lt;/a&gt;
  Step 3 - Build a Basic Checklist Form
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We now need to create a custom form that leverages the existing form that &lt;code&gt;GroupApprovalTask&lt;/code&gt; makes, this form needs to have a &lt;code&gt;MultipleChoiceField&lt;/code&gt; where each of the &lt;code&gt;choices&lt;/code&gt; is a line in our &lt;code&gt;Task&lt;/code&gt; model's &lt;code&gt;checklist&lt;/code&gt; field.&lt;/li&gt;
&lt;li&gt;We also want to make the form field dynamic based on the &lt;code&gt;Task&lt;/code&gt; model's &lt;code&gt;is_checklist_required&lt;/code&gt; saved value.&lt;/li&gt;
&lt;li&gt;To override the &lt;code&gt;Task&lt;/code&gt; form we can add a &lt;a href="https://docs.wagtail.io/en/stable/advanced_topics/custom_tasks.html?highlight=get_actions#customising-behaviour"&gt;&lt;code&gt;get_form_for_action&lt;/code&gt;&lt;/a&gt; method and when the action is &lt;code&gt;'approve'&lt;/code&gt; we can provide a custom Form.&lt;/li&gt;
&lt;li&gt;The things we need to answer is what form to extend (we want to ensure we get the comment field still), how do we ensure that the checklist values do not try to be 'saved' to the &lt;code&gt;TaskState&lt;/code&gt; (the model that reflects each state for a &lt;code&gt;Task&lt;/code&gt; as it is processed).&lt;/li&gt;
&lt;li&gt;If we take a look at the implementation of &lt;a href="https://github.com/wagtail/wagtail/blob/main/wagtail/core/models/__init__.py#L3319"&gt;&lt;code&gt;get_form_for_action&lt;/code&gt; on the &lt;code&gt;GroupApprovalTask&lt;/code&gt;&lt;/a&gt; we can see that it returns a &lt;a href="https://github.com/wagtail/wagtail/blob/main/wagtail/core/forms.py#L23"&gt;&lt;code&gt;TaskStateCommentForm&lt;/code&gt;&lt;/a&gt; which extends a Django &lt;code&gt;Form&lt;/code&gt; with one field, &lt;code&gt;comments&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-raw-modelspy-endraw-"&gt;
  &lt;/a&gt;
  Code &lt;code&gt;models.py&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;To build a dynamic Class in Python, we can declare a new class in a function or we can also use the &lt;a href="https://docs.python.org/3/library/functions.html#type"&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; built-in function, passing in three args. A name, base classes tuple and a dict where each key will be used to generate dynamic attributes (fields) and methods (e.g. the clean method).&lt;/li&gt;
&lt;li&gt;In this dynamic class we will extend whatever the super's &lt;code&gt;get_form_for_action&lt;/code&gt; returns, this way we do not need to think about what this is in the code, but know that it is the &lt;code&gt;TaskStateCommentForm&lt;/code&gt; above.&lt;/li&gt;
&lt;li&gt;We will also need to add a &lt;a href="https://docs.djangoproject.com/en/3.2/ref/forms/api/#django.forms.Form.clean"&gt;&lt;code&gt;clean&lt;/code&gt; method&lt;/a&gt; that will remove any checklist values that are submitted (as we do not want to save these).&lt;/li&gt;
&lt;li&gt;We will need to add a field, &lt;code&gt;checklist&lt;/code&gt;, which we will pull out to a new class method &lt;code&gt;get_checklist_field&lt;/code&gt; which can return a &lt;a href="https://docs.djangoproject.com/en/3.2/ref/forms/fields/#multiplechoicefield"&gt;&lt;code&gt;forms.MultipleChoiceField&lt;/code&gt;&lt;/a&gt; that has dynamic values for &lt;code&gt;required&lt;/code&gt; and the &lt;code&gt;choices&lt;/code&gt; based on the &lt;code&gt;Task&lt;/code&gt; instance. Note: The default widget used for this field is &lt;code&gt;SelectMultiple&lt;/code&gt; which is a bit cluncky, but we will enhance that in the next step.&lt;/li&gt;
&lt;li&gt;We will also want to ensure that our &lt;code&gt;checklist&lt;/code&gt; field shows before the &lt;code&gt;comment&lt;/code&gt; field, for that we can dynamically add a &lt;a href="https://docs.djangoproject.com/en/3.2/ref/forms/api/#django.forms.Form.field_order"&gt;&lt;code&gt;field_order&lt;/code&gt;&lt;/a&gt; attribute.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="c1"&gt;# ... other imports
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChecklistApprovalTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GroupApprovalTask&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# ... checklist etc, from above step
&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_checklist_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Prepare a form field that is a list of checklist boxes for each line in the
        checklist on this Task instance.
        """&lt;/span&gt;

        &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_checklist_required&lt;/span&gt;

        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Checklist"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"choices"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultipleChoiceField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_for_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        If the action is 'approve', return a new class (using type) that has access
        to the checklist items as a field based on this Task's instance.
        """&lt;/span&gt;

        &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;get_form_for_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"approve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="s"&gt;"""
                When this form's clean method is processed (on a POST), ensure we do not pass
                the 'checklist' data any further as no handling of this data is built.
                """&lt;/span&gt;
                &lt;span class="n"&gt;cleaned_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"checklist"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"checklist"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ChecklistApprovalTaskForm"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
                &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;checklist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_checklist_field&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                    &lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;field_order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"checklist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"comment"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;

    &lt;span class="c1"&gt;# ... @classmethod etc
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Before you continue:&lt;/strong&gt; Check that when you click the Approve step on a Page with this Task, you now see a list of checklist items and it is required (or not, based on the data saved on the original Task type).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PPQiKQhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubp07ihvacszr2w2pz9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PPQiKQhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubp07ihvacszr2w2pz9u.png" alt="Step 3 - Basic checklist form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-enhance-the-checklist-form"&gt;
  &lt;/a&gt;
  Step 4 - Enhance the Checklist Form
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now, we will modify the &lt;a href="https://docs.djangoproject.com/en/3.2/ref/forms/fields/#help-text"&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/3.2/ref/forms/fields/#validators"&gt;&lt;code&gt;validators&lt;/code&gt;&lt;/a&gt; and the &lt;a href="https://docs.djangoproject.com/en/3.2/ref/forms/fields/#widget"&gt;&lt;code&gt;widget&lt;/code&gt;&lt;/a&gt; of our field generated in the method &lt;code&gt;get_checklist_field&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The goals here are to ensure that, when the checklist is required, we show and actually validate against all items being ticked.&lt;/li&gt;
&lt;li&gt;I find all of this pretty amazing, how powerful it is to build up blocks of built-in functions and logic into what we want without really writing much code ourselves, just calling the right methods/functions/classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-raw-modelspy-endraw-"&gt;
  &lt;/a&gt;
  Code &lt;code&gt;models.py&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;help_text&lt;/code&gt; needs to be a dynamic value based on the required value we set up in the previous step.&lt;/li&gt;
&lt;li&gt;If the checklist is required, we will leverage the built-in &lt;a href="https://docs.djangoproject.com/en/3.2/ref/validators/#minlengthvalidator"&gt;&lt;code&gt;MinLengthValidator&lt;/code&gt;&lt;/a&gt;, while this is usually used to validate string length it can be used just the same for validating the length of the list of values provided to the field (in our case it will be a list of indices). We will also pass in a custom &lt;code&gt;message&lt;/code&gt; kwarg to this validator so it makes sense to the user.&lt;/li&gt;
&lt;li&gt;For the &lt;code&gt;widget&lt;/code&gt; we will use the built-in &lt;a href="https://docs.djangoproject.com/en/3.2/ref/forms/widgets/#django.forms.CheckboxSelectMultiple"&gt;&lt;code&gt;CheckboxSelectMultiple&lt;/code&gt;&lt;/a&gt;, but note in the docs that even if we set &lt;code&gt;required&lt;/code&gt; on the field the checkbox will not actually put required on the inputs HTML attributes so we need to pass in an extra &lt;code&gt;attrs&lt;/code&gt; to the widget to handle this.&lt;/li&gt;
&lt;li&gt;Note: the only parts added below are the &lt;code&gt;min_length_validator&lt;/code&gt;, &lt;code&gt;help_text&lt;/code&gt;, &lt;code&gt;validators&lt;/code&gt; and &lt;code&gt;widget&lt;/code&gt; lines.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MinLengthValidator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ngettext_lazy&lt;/span&gt;

&lt;span class="c1"&gt;# ... other imports
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChecklistApprovalTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GroupApprovalTask&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# ... checklist etc, from above step
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_checklist_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Prepare a form field that is a list of checklist boxes for each line in the
        checklist on this Task instance.
        """&lt;/span&gt;

        &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_checklist_required&lt;/span&gt;

        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Checklist"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"choices"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;min_length_validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinLengthValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"choices"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ngettext_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"Only %(show_value)d item has been checked (all %(limit_value)d are required)."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"Only %(show_value)d items have been checked (all %(limit_value)d are required)."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"show_value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"help_text"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please check all items."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please review all items."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validators"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_length_validator&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"widget"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckboxSelectMultiple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="c1"&gt;# required attr needed as not rendered by default (even if field required)
&lt;/span&gt;            &lt;span class="c1"&gt;# https://docs.djangoproject.com/en/3.2/ref/forms/widgets/#django.forms.CheckboxSelectMultiple
&lt;/span&gt;            &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"required"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"required"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultipleChoiceField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Before you continue:&lt;/strong&gt; Check that the Approve modal form now contains actual checkboxes for each checklist item and that validation works as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-implementation"&gt;
  &lt;/a&gt;
  Final Implementation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uLPKNABH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04v9e6orsuzr9q4qxr8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLPKNABH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04v9e6orsuzr9q4qxr8d.png" alt="Step 4 - Final form modal implementation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You should now have a fully functional new Task type where your CMS admin users can create for specific workflows that leverage existing user group approval logic along with custom checklists on a per Task instance.&lt;/li&gt;
&lt;li&gt;You can view the steps on the &lt;a href="https://github.com/lb-/bakerydemo/commits/tutorial/workflow-checklist"&gt;tutorial/workflow-checklist&lt;/a&gt; branch or the &lt;a href="https://github.com/lb-/bakerydemo/blob/tutorial/workflow-checklist/bakerydemo/base/models.py#L29-L150"&gt;final code in the models.py file&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I think it is really important to now require all the checklist items by default, but some will insist that this is required no doubt, but checklists work better as reminders and not rigid rules in this context.&lt;/li&gt;
&lt;li&gt;Please comment in response if you think something is missing here or have some other useful content relating to Wagtail Workflows that might be helpful.&lt;/li&gt;
&lt;li&gt;Thanks to my brother Sam for proofing and to &lt;a href="https://unsplash.com/photos/IuLgi9PWETU"&gt;Danielle MacInnes&lt;/a&gt; for the cover photo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#future-improvements-ideas"&gt;
  &lt;/a&gt;
  Future Improvements Ideas
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adding a &lt;code&gt;description&lt;/code&gt; field to the &lt;code&gt;Task&lt;/code&gt; so that users can put content above the checklist that explains part of a process.&lt;/li&gt;
&lt;li&gt;Storing the checklist values (or maybe how many were checked), if that is useful for reporting, remember that the Page history will contain which users Approved the step and that may be enough as it is.&lt;/li&gt;
&lt;li&gt;Other Form content that applies to an Approval (or some other step like Rejection) and needs to be dynamic, maybe even requiring a comment when the workflow is Rejected.&lt;/li&gt;
&lt;li&gt;If you end up building one of these, even as a Github Gist, be sure to put a link to it in the comments.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>wagtail</category>
      <category>django</category>
      <category>process</category>
    </item>
    <item>
      <title>What's the revenue of your most successful project?</title>
      <author>Madza</author>
      <pubDate>Wed, 22 Sep 2021 07:32:05 +0000</pubDate>
      <link>https://dev.to/madza/what-s-the-revenue-of-your-most-successful-project-36fl</link>
      <guid>https://dev.to/madza/what-s-the-revenue-of-your-most-successful-project-36fl</guid>
      <description>&lt;p&gt;Creating you own own product can be an exciting journey. It's awesome to see your business ideas coming to life and develop a successful career.&lt;/p&gt;

&lt;p&gt;Indie hackers, entrepreneurs and builders in public, could you share your most successful project and it's approx. *MRR?  &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;MRR (Monthly recurring revenue) is a metric that shows the total revenue generated per month.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>business</category>
    </item>
    <item>
      <title>Git Commits and Commit Messages : The Final Guide</title>
      <author>ZigRazor</author>
      <pubDate>Wed, 22 Sep 2021 07:24:42 +0000</pubDate>
      <link>https://dev.to/zigrazor/git-commits-and-commit-messages-the-final-guide-2g6f</link>
      <guid>https://dev.to/zigrazor/git-commits-and-commit-messages-the-final-guide-2g6f</guid>
      <description>&lt;p&gt;&lt;strong&gt;A commit should be a self-contained update to the code tree.&lt;/strong&gt; Despite bug fixes that could be introduced later in the development, a commit should be never considered as &lt;em&gt;"I’m saving my work now, I’ll continue later"&lt;/em&gt;, especially if the commit is pushed to a remote repository.&lt;br&gt;
On the other hand, a commit should not contain multiple changes to the code base. &lt;br&gt;
If, during development, I have to change something in two different modules, and the changes are unrelated, then the changes should be placed in two different commits.&lt;br&gt;
That is: &lt;strong&gt;make separate commits for logically separate changes.&lt;/strong&gt;&lt;br&gt;
Making good commits is a form of art. A good way to decide whether a commit is self contained, developers should answer themselves he question: "will I be able to cherry pick this commit in the future, shall I need it?". If the answer is yes, then most&lt;br&gt;
likely it is a good commit.&lt;br&gt;
&lt;strong&gt;Commit messages should be meaningful&lt;/strong&gt;. A one-line commit message like &lt;em&gt;"I’m developing foo"&lt;/em&gt; will not allow other developers to understand what that commit is for. A minimal&lt;br&gt;
commit message would be of the format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Short log
(Optional pointers to external resources, such as defect tracking)
The intent of your change.
(Optional, if it's not clear from above) how your change resolves the
issues in the first part.
Tag line(s) at the end.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example of a good commit message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;foobar: Adjusted the foo setting in bar When using foobar on systems with less than a gigabyte of RAM common usage patterns often result in an Out-of-memory condition causing slowdowns and unexpected application termination.

Low-memory systems should continue to function without running into memory-starvation conditions with minimal cost to systems with more available memory. High-memory systems will be less able to use the full extent of the system, a dynamically tunable option may be best, long-term.

The foo setting in bar was decreased from X to X-50% in order to
ensure we don't exhaust all system memory with foobar threads.

Signed-off-by: Joe Developer &amp;lt;joe.developer@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Several things should be noted here. The minimal commit message is good for new code development and simple changes. An empty line must always come after it, otherwise post processing software might not be able to distinguish it from the rest of the&lt;br&gt;
commit text.&lt;br&gt;
The single short log message indicates what needed to be changed. It should begin with an indicator as to the primary item changed by this work, followed by a short summary of the change. In the above case we're indicating that we've changed the "foobar" item, by "adjusting the foo setting in bar".&lt;br&gt;
The single short log message is analogous to the git "commit summary". While no maximum line length is specified by this policy, it is suggested that it remains under&lt;br&gt;
50 characters wherever possible. Think of it as the subject of an email: you should never write too much text in it, otherwise receivers will not understand easily what the email is about.&lt;br&gt;
Optionally, you may include pointers to defects this change &lt;br&gt;
corrects. Unless the defect format is specified by the component you are modifying, it is suggested that you use a full URL to specify the reference to the defect information. Generally, these pointers will precede any long description, but as an optional item it may be after the long description. This could be a good way, for example, to refer to open issues in a bug tracker. You must then have a full description of the change. &lt;br&gt;
Specifying the intent of your change and if necessary how the change resolves the issue.&lt;br&gt;
Finally, one or more tag lines should exist. Each developer responsible for working on the patch is responsible for adding a Signed-off-by: tag line. This tag line should be added by people writing the patch, and additional tag lines should be added by&lt;br&gt;
people, for example, merging the patch into different branches. This allows to easily track the updates to the code base, and determine who did what.&lt;br&gt;
It is not acceptable to have an empty or non-existent header, or just a single line message. The summary and description is required for all changes. The commit messages should be manually indented. Usually, each line of the message, should not be longer than 78 characters. Note that in order to do this easily, is&lt;br&gt;
always better to avoid using the &lt;code&gt;-m&lt;/code&gt; switch when committing: in fact, simply issuing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will fire up the text editor specified in the EDITOR environment variable (you can set it to your preferred editor), so that you can freely write your commit message respecting the adopted layout. Note that if you set your favorite editor to vim, you can add the following lines to &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype plugin indent on
au FileType gitcommit set tw=72
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which automatically wraps the text to the specified 72 characters for git commit messages. To check whether vim is correctly identifying the commit message as gitcommit, the following command can be used within vi:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:set filetype?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or to save a few keystrokes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:se ft?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If, for any reason, you have pushed commits with non-meaningful descriptions (due to hurry, pressure, git fire , etc.), these should never end up in the master branch.&lt;br&gt;
Here, interactively rebasing you local branch (and issuing a force push if possible) is a good practice.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;For More "The Final Guide" see the &lt;a href="https://dev.to/zigrazor/the-final-guide-index-4954"&gt;Index Page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 59: Notebook Python Engine</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Wed, 22 Sep 2021 07:12:08 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-59-notebook-python-engine-1e79</link>
      <guid>https://dev.to/taw/electron-adventures-episode-59-notebook-python-engine-1e79</guid>
      <description>&lt;p&gt;In previous episodes we created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP-based Ruby language server&lt;/li&gt;
&lt;li&gt;HTTP-based Python language server&lt;/li&gt;
&lt;li&gt;process-based Ruby language server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now it's time to create a process-based Python language server as well.&lt;/p&gt;

&lt;p&gt;We'll be reusing the whole frontend from the previous episode - other than changing name of the script we run from &lt;code&gt;ruby_language_server&lt;/code&gt; to &lt;code&gt;python_language_server&lt;/code&gt;, and replacing Ruby code examples by Python examples.&lt;/p&gt;

&lt;p&gt;All the new code will be Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-pythonlanguageserver-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;python_language_server&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Capturing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stringio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stringio&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stringio&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stringio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stdout&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stderr&lt;/span&gt;

&lt;span class="n"&gt;sessions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"session_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Capturing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's very little new. We already had all the code for executing code and capturing the output in the Flask version.&lt;/p&gt;

&lt;p&gt;We just need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read the input with &lt;code&gt;for line in sys.stdin&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;parse it with &lt;code&gt;body = json.loads(line)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;print the result with &lt;code&gt;print(json.dumps(result), flush=True)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;flush=True&lt;/code&gt; is important, as communication between processes is normally buffered, so it won't actually be sent until the 4kB buffer is full. This buffering does not happen if you print to the terminal, and normally if you send things to files, you don't care about exact timing of when each line gets there. But when talking to processes, we need to do this.&lt;/p&gt;

&lt;p&gt;We don't need to do any tricks on input, as only the sending process can potentially have such a buffer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;Here's the result if we press "Run All" button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kc49IZq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/your5blj71thaohst65z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc49IZq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/your5blj71thaohst65z.png" alt="Electron Adventures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was all very easy as we basically just merged what we did in previous two episodes.&lt;/p&gt;

&lt;p&gt;In the next episode we'll do something a little more complicated and try to do the same for a language you might not have heard of in a while. And we'll also move session control into Electron side.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-59-notebook-python-engine"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
      <category>react</category>
      <category>python</category>
    </item>
  </channel>
</rss>
