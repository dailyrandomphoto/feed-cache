<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Decorators and Mixins in Lightning Web Components</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 08 Jun 2021 14:49:58 +0000</pubDate>
      <link>https://dev.to/salesforcedevs/decorators-and-mixins-in-lightning-web-components-5d83</link>
      <guid>https://dev.to/salesforcedevs/decorators-and-mixins-in-lightning-web-components-5d83</guid>
      <description>&lt;h2&gt;
  &lt;a href="#decorators-and-mixins-in-lightning-web-components"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Decorators and Mixins in Lightning Web Components&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It's safe to say that every modern web application these days relies to some degree on three foundational web standards: HTML, CSS, and JavaScript. While HTML has largely stabilized since the HTML5 standard, both CSS and JavaScript continue to evolve to meet developers' and users' needs.&lt;/p&gt;

&lt;p&gt;The evolving nature of these three technologies has lead to the introduction of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;web components&lt;/a&gt;, a cross-browser solution for building complex web apps. On top of this open source standard, Salesforce developed &lt;a href="https://lwc.dev/"&gt;Lightning Web Components&lt;/a&gt; (LWC) as a fast, enterprise-grade wrapper around vanilla web components. The result is a thin, performant, and feature-packed framework built entirely on the open web.&lt;/p&gt;

&lt;p&gt;LWC is not only built on top of the ECMAScript standard, it also provides some nifty syntactic sugar that can transpile into standard JavaScript. Because of this, the LWC framework is able to incorporate&lt;a href="https://github.com/tc39/proposals"&gt; proposed language features&lt;/a&gt;, which simplifies app development by future proofing your code in the always evolving JavaScript ecosystem. In this post, we'll take a closer look at two relatively recent features—mixins and decorators—and see how they can be used in your LWC apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-mixin"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a Mixin?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In many object-oriented programming languages, classes can "receive" additional methods through a feature called inheritance. For example, if you have a &lt;code&gt;Vehicle&lt;/code&gt; class with the methods &lt;code&gt;go&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt;, subclasses like &lt;code&gt;Bicycle&lt;/code&gt; and &lt;code&gt;Car&lt;/code&gt; can implement them directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Vehicle {

  void go();

  void stop();

}

class Bicycle &amp;amp;lt; Vehicle {

  void go() {

    usePedal();

  }

  void stop() {

    stopPedal();

  }

}

class Car &amp;amp;lt; Vehicle {

  void go() {

    useEngine();

  }

  void stop() {

    stopEngine();

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inheritance affects the composition of an object by changing its hierarchy. Every &lt;code&gt;Bicycle&lt;/code&gt; and &lt;code&gt;Car&lt;/code&gt; is now also a &lt;code&gt;Vehicle&lt;/code&gt;. But what if you merely wanted to add in common methods to objects without dealing with any parent class? That's what a &lt;a href="https://en.wikipedia.org/wiki/Mixin"&gt;mixin&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://javascript.info/mixins"&gt;a JavaScript context&lt;/a&gt;, mixins can add behaviors to JavaScript classes, which is useful, because classes can only extend from one other class, while multiple mixins can be added to a class. Mixins take advantage of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;Object.assign&lt;/a&gt; method, which copies all of the properties from one object onto another:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// mixin

let greetingsMixin = {

  sayHi() {

    alert(`Hello ${this.name}`);

  },

  sayBye() {

    alert(`Bye ${this.name}`);

  }

};

class User {

  constructor(name) {

    this.name = name;

  }

}

// copy the methods

Object.assign(User.prototype, greetingsMixin);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;User&lt;/code&gt; can now call &lt;code&gt;sayHi&lt;/code&gt; and &lt;code&gt;sayBye&lt;/code&gt; natively. Per JavaScript rules, &lt;code&gt;User&lt;/code&gt; can also inherit from just one class, while including properties and function) from any number of mixins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User extends Person {

  // ...

}

Object.assign(User.prototype, greetingsMixin);

Object.assign(User.prototype, someOtherMixin);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, writing out &lt;code&gt;Object.assign&lt;/code&gt; is somewhat akin to littering your code. What's worse is figuring out what the method is doing isn't very intuitive. Through some native JavaScript syntax, you can actually create a "subclass factory" with mixins, and declare which mixins you're using right at the top:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User extends greetingsMixin(Person) {

  // ...

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(For more information on this technique, check out&lt;a href="https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/"&gt; this article&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;User&lt;/code&gt; includes the &lt;code&gt;greetingsMixin&lt;/code&gt; and inherits from the &lt;code&gt;Person&lt;/code&gt; class, all in one line.&lt;/p&gt;

&lt;p&gt;This technique is more than syntactical sugar: it's actually the one which LWC regularly prefers. For example, the &lt;a href="https://developer.salesforce.com/docs/component-library/bundle/lightning-navigation/documentation"&gt;Navigation Mixin&lt;/a&gt; provides methods that are useful to navigational UI elements, but ultimately, each class that includes it should also derive from a plain &lt;code&gt;LightningElement&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { LightningElement } from 'lwc';

import { NavigationMixin } from 'lightning/navigation';

export default class TestComponent extends NavigationMixin(LightningElement) {

  // ...

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;NavigationMixin&lt;/code&gt; provides functionality that's crucial to components dealing with navigating through pages, while &lt;code&gt;LightningElement&lt;/code&gt; provides all the base functionality for every component. Thus, &lt;code&gt;TestComponent&lt;/code&gt; will need to include &lt;code&gt;NavigationMixin&lt;/code&gt; and subclass from &lt;code&gt;LightningElement&lt;/code&gt;, and can do so in the easy-to-see, single-line format.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-decorator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a Decorator?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tc39.es/proposal-decorators/"&gt;Decorators&lt;/a&gt; are currently a proposal to add to JavaScript, but they're so incredibly useful that many frameworks already support them. In essence, a decorator is a function that can modify a class, or any of its properties and methods. That's a pretty high-level definition, so let's take a look at what that means in practice.&lt;/p&gt;

&lt;p&gt;Suppose we have a class like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User {

  constructor(firstName, lastName) {

    this.firstName = firstName;

    this.lastName = lastName;

  }

  getFullName() {

    return `${this.firstName} ${this.lastName}`;

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, any code which makes use of this class can create a user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let user = new User("Jane", "Eyre");

user.getFullName(); // returns "Jane Eyre"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But because of the way JavaScript is designed, a developer could inadvertently change the &lt;code&gt;getFullName&lt;/code&gt; method if they so desired:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let user = new User("Jane", "Eyre");

user.prototype.getFullName = function() {

  return "not the name!;"

}

user.getFullName(); // returns "not the name!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this is obviously a trite example, but the danger still remains. You can write code to make a class property read-only, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Object.defineProperty(User.prototype, 'gettFullName', {

  writable: false

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works, but it's obviously cumbersome to write for multiple properties.&lt;/p&gt;

&lt;p&gt;Enter decorators. You can define a decorator function to apply any behavior you want to a target property. For example, to set a target as &lt;code&gt;writable: false&lt;/code&gt;, you could do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function readonly(target) {

  target.descriptor.writable = false;

  return target;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just defined a decorator called &lt;code&gt;readonly&lt;/code&gt; which, when passed a target, sets its &lt;code&gt;descriptor.writable&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;. This can be applied to our &lt;code&gt;User&lt;/code&gt; class like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User {

  // ...

  @readonly

  getFullName() {

    return `${this.firstName} ${this.lastName}`;

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! The same functionality, in a single line of code.&lt;/p&gt;

&lt;p&gt;LWC provides &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/en/lwc/lwc.reference_decorators"&gt;several decorators&lt;/a&gt; for developers to use. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;@api&lt;/code&gt;: by default, every property is hidden and private. &lt;code&gt;@api&lt;/code&gt; exposes it publicly.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;@track&lt;/code&gt;: this marks a property as reactive, which means that when its value changes, the web component will re-render and display the new value.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;@wire&lt;/code&gt;: this is a decorator which signifies that we want to read Salesforce data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These three decorators, which are unique to LWC, aim to help reduce rewriting the same code while easily providing common functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Since LWC is built on web standards, it can leverage native APIs and languages in order to make developers immediately productive, since they're using existing skills rather than learning proprietary techniques.&lt;/p&gt;

&lt;p&gt;If you'd like to take a closer look at &lt;a href="https://lwc.dev/"&gt;Lightning Web Components&lt;/a&gt;, &lt;a href="https://github.com/diervo/lwc-typescript-boilerplate"&gt;Salesforce has a boilerplate app that's built in TypeScript&lt;/a&gt;. There's also &lt;a href="https://trailhead.salesforce.com/quests/web-components?&amp;amp;utm_source=event&amp;amp;utm_medium=paid&amp;amp;utm_campaign=codemotion&amp;amp;utm_content=webinar-promo_web_components"&gt;a Trailhead lesson&lt;/a&gt; to help you learn about web components in less than an hour. Or, feel free to check out&lt;a href="https://lwc.dev/"&gt; the LWC dev docs&lt;/a&gt; for more specific reference information.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>architecture</category>
    </item>
    <item>
      <title>What is gun.js?</title>
      <author>Caio Gomes Braga</author>
      <pubDate>Tue, 08 Jun 2021 14:49:03 +0000</pubDate>
      <link>https://dev.to/caiobraga/what-is-gun-js-2f0d</link>
      <guid>https://dev.to/caiobraga/what-is-gun-js-2f0d</guid>
      <description>&lt;p&gt;Lately a technology that has been calling my attention is Gun.js, besides being easy to use it also has a very interesting concept about how we should see data, usage and rights over it. Today I'm going to talk a little more about what gun.js is, as well as discuss Decentralized web concepts&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-gun-is-based-on-decentralized-web-or-dweb-and-aims-to-make-the-internet-freer-and-less-greedy"&gt;
  &lt;/a&gt;
  1 - Gun is based on Decentralized web or "Dweb" and aims to make the internet freer and less greedy
&lt;/h3&gt;

&lt;p&gt;The way the internet works today is dependent on large corporations, which store their data on their own servers. However, this has caused some discomfort for millions of people around the world, with the suspicion that these large corporations are using data and personal information for marketing and choosing what people see on the internet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-what-is-dweb"&gt;
  &lt;/a&gt;
  2 - What is Dweb
&lt;/h3&gt;

&lt;p&gt;Dweb stands for decentralized internet, and it's the concept Gun.js is based on.&lt;/p&gt;

&lt;p&gt;The idea behind Dweb and hence behind Gun.js is that the internet is formed by a concept of community. Soon the information would be stored through the devices of all users of the system. Each one storing a bit of information along with the free servers provided by Gun.js itself&lt;/p&gt;

&lt;p&gt;This makes the internet not only freer but also cheaper for programmers and consequently for end users. Since, large companies today are responsible for taking a large part of the money that goes into the system and also able to freely access a large part of the data without having to know for sure whether we are providing data to be spied on or not&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-gunjs"&gt;
  &lt;/a&gt;
  3 - Gun.js
&lt;/h3&gt;

&lt;p&gt;GUN is an ecosystem of tools that allows you to create encrypted applications that run thanks to a community.&lt;/p&gt;

&lt;p&gt;With it were created versions of youtube and other social networks&lt;/p&gt;

&lt;p&gt;The database is formed by the user's information stored on his own machine, on other users' machines and on larger servers in the system, which allows the information to remain reliable and prevents loss of information if a user's device is lost. Besides, it's an amazing concept to think you're part of a giant database.&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>gunjs</category>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Load-Balancing Minecraft Servers with Kong Gateway</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 08 Jun 2021 14:41:16 +0000</pubDate>
      <link>https://dev.to/mbogan/load-balancing-minecraft-servers-with-kong-gateway-59ml</link>
      <guid>https://dev.to/mbogan/load-balancing-minecraft-servers-with-kong-gateway-59ml</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_T3OwzPVECQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's time to have some fun. Sure, tell your colleagues or your family that you're doing research, experimenting with some new tech—because that is what we'll be doing—but just don't let them see you playing Minecraft!&lt;/p&gt;

&lt;p&gt;Here's the scenario: You're organizing a full-day Minecraft class for local STEM students. You need to run your own Minecraft servers to ensure a kid-friendly multiplayer environment, restricted only to your students. One server won't be enough, so you'll run two servers simultaneously, expecting your load balancer to handle sending students to Server A or Server B, depending on the load.&lt;/p&gt;

&lt;p&gt;In this article, we're going to explore port forwarding and load balancing with &lt;a href="https://konghq.com/kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Gateway&lt;/a&gt;. We're going to do this by spinning up multiple Minecraft servers, and then placing Kong Gateway in front of these upstream services to handle port forwarding and load balancing.&lt;/p&gt;

&lt;p&gt;Before we dive in, let's briefly cover a few important technology concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-concepts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Key Concepts&lt;/strong&gt;
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#port-forwarding"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Port Forwarding&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Port forwarding is receiving network requests on a certain port of a machine and forwarding those requests to a different port. A router, firewall or &lt;a href="https://konghq.com/learning-center/api-gateway/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;API gateway&lt;/a&gt; usually handles this task. For example, you might have a web server listening on port 3000 and a database server listening on port 5000. Your API gateway would listen for requests from outside your network. Requests addressed to port 80 would be forwarded by the gateway to your web server at port 3000. Meanwhile, requests addressed to port 5432 would be forwarded to your database server at port 5000.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#load-balancing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Load Balancing&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Load balancing is the task of distributing multiple requests to a server in a balanced manner across numerous replicas of that server. A specific piece of hardware or software called a load balancer usually handles this. The outside world is unaware that there are multiple replicas of a server running. They believe they’re making requests to a single server. The load balancer, however, distributes the request load to prevent any one server from being overwhelmed. In the case of a replica failing completely, the load balancer ensures that requests only go to healthy nodes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#kong-gateway"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Kong Gateway&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Kong Gateway is a thin API gateway layer that sits in front of upstream services, capable of performing these port forwarding and load balancing tasks. Whether those upstream services are web servers or databases or even Minecraft game servers, Kong is the front-door greeter to all requests. In addition to traffic control, Kong Gateway can manage &lt;a href="https://konghq.com/learning-center/api-gateway/api-gateway-authentication/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;authentication&lt;/a&gt;, request transformations, analytics, and logging.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tcp-stream-support"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TCP Stream Support&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;One aspect of our Minecraft project that sets it apart from deploying a typical web server or database is that Minecraft requires an established connection between the Minecraft client (the gamer) and server. Rather than expecting stateless HTTP requests, we'll need to handle TCP connections with streaming data. Fortunately, &lt;a href="https://konghq.com/blog/tcp-stream-support-kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Gateway fully supports TCP streaming&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-project-approach"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Our project approach&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We're going to walk through this project step-by-step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Spin up a single, local Minecraft server without any port forwarding.&lt;/li&gt;
&lt;li&gt;Spin up a Minecraft server on a non-default port, configuring Kong Gateway to port forward requests to that server.&lt;/li&gt;
&lt;li&gt;Spin up two Minecraft servers on different ports, configuring Kong Gateway to load balance and port forward connection requests.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, we'll start simple, and we'll slowly build on complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-youll-need-to-get-started"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What you'll need to get started&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You don't &lt;em&gt;actually&lt;/em&gt; need a lot of familiarity with Minecraft to progress through this mini-project. Since it’s easiest to spin up Minecraft servers within Docker containers, basic familiarity with Docker may be helpful. &lt;/p&gt;

&lt;p&gt;You will need to &lt;a href="https://docs.docker.com/engine/install/"&gt;install Docker Engine&lt;/a&gt; on your local machine. Lastly, if you want to test that our project results are successful, you'll need to &lt;a href="https://www.minecraft.net/en-us/about-minecraft"&gt;install the Minecraft game client&lt;/a&gt; and log in as a paid owner of the game. The free trial of Minecraft doesn't allow connecting to multiplayer servers, which is what we'll be running for our project.&lt;/p&gt;

&lt;p&gt;Are you ready to do this? Here we go!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-single-minecraft-server-with-default-port"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1: Single Minecraft Server with Default Port&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;In this first step, we want to spin up a single Minecraft server on our local machine. We'll use the default port for the server, and then we'll connect our game client to the server. It’s simple to deploy the Minecraft server as a Docker container, with the Docker image found &lt;a href="https://hub.docker.com/r/itzg/minecraft-server"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a terminal window, we'll run this command to pull down the server image and spin it up in a container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ docker run -p 25000:25565 -e EULA=true itzg/minecraft-server

Unable to find image 'itzg/minecraft-server:latest' locally
latest: Pulling from itzg/minecraft-server
...

Status: Downloaded newer image for itzg/minecraft-server:latest
...

[init] Checking for JSON files.
[init] Setting initial memory to 1G and max to 1G
[init] Starting the Minecraft server...
...

[Server thread/INFO]: Preparing start region for dimension minecraft:overworld
[Worker-Main-5/INFO]: Preparing spawn area: 1%
...


...

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As our container starts up, it downloads the Docker image for the Minecraft server. Once the image downloads, it starts up the server, and we see the log messages of the server startup. Here's an explanation of flags and options we provided to docker run in our command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;-p&lt;/code&gt; specifies a port on the host (your local machine) that Docker should bind to a port on the container. In this case, our local machine's port 25000 will point to the container's port 25565. By default, Minecraft servers run on port 25565. Typically, you will always bind to the container's port 25565, regardless of the port on the host that you choose to use.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;-e EULA=true&lt;/code&gt; provides an environment variable that the Docker container needs to use when starting up the server within the container. The Minecraft server application requires that you accept the EULA upon startup. Providing this environment variable is the Docker way to do that.&lt;/li&gt;
&lt;li&gt;  Lastly, we specify the name of the Docker image (on &lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt;), which contains the Minecraft server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With our server running, let's see if we can connect to the server at localhost:25000. Open up the Minecraft Launcher client and click on "Play".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYtunAIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0zgst3gf0x6sd56kjut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYtunAIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0zgst3gf0x6sd56kjut.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The actual Minecraft game should launch. For game options, click on "Multiplayer".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--werSsEdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osyinj35j1yl8sxdvsad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--werSsEdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osyinj35j1yl8sxdvsad.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click on "Direct Connection".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9svBApb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7lta1uuzrzwbbgqq8rm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9svBApb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7lta1uuzrzwbbgqq8rm.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For server address, enter localhost:25000. Our local port 25000, of course, is bound to the container running our Minecraft server. Finally, we click on "Join Server".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LywZURrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7ztj6340mtftnsgpj26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LywZURrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7ztj6340mtftnsgpj26.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And… we're in!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v4BVsSp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r7uixaj0a9m4g1pog67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4BVsSp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r7uixaj0a9m4g1pog67.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look back at the terminal with the &lt;code&gt;docker run&lt;/code&gt; command, you'll recall that it continues to output the log messages from the Minecraft server. It might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
 
[User Authenticator #1/INFO]: UUID of player familycodingfun is 8b4fb92b-24c6-423a-bf32-fea282fc8a25
[Server thread/INFO]: familycodingfun[/172.17.0.1:53248] logged in with entity id 282 at (243.5, 65.0, -138.5)
[Server thread/INFO]: familycodingfun joined the game
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The server notes that a new player (my username is &lt;code&gt;familycodingfun&lt;/code&gt;) has joined the game. Our single game server setup is complete. Now, let's add Kong Gateway and port forwarding to the mix. For now, we'll exit the game and then kill our Docker container with the server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-minecraft-server-with-kong-gateway-and-port-forwarding"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2: Minecraft Server with Kong Gateway and Port Forwarding&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Next, we'll put Kong Gateway in front of our Minecraft server and take advantage of port forwarding. If you were running a private network, you might forbid requests from outside the network to reach your Minecraft server port. At the same time, you might expose a single port on which Kong listens. Kong, as the API gateway, would listen to requests on that port and then forward those requests to your Minecraft server. Doing so ensures that any requests that want to go to a Minecraft server must go through Kong first.&lt;/p&gt;

&lt;p&gt;Although we'll be working within localhost, we'll set up this kind of port forwarding through Kong. Just like in our previous step, we want our Minecraft server to run on port 25000. Meanwhile, Kong will listen on port 20000. Kong will take TCP connection requests on port 20000 and forward them to the Minecraft server at port 25000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-and-setup-kong"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Install and Setup Kong&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The first step is to &lt;a href="https://konghq.com/install/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;install Kong Gateway&lt;/a&gt;. The &lt;a href="https://konghq.com/blog/kong-gateway-tutorial/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;installation steps&lt;/a&gt; vary depending on your unique setup. After installing Kong, we'll need to set up the initial configuration file. In your &lt;code&gt;/etc/kong&lt;/code&gt; folder, you'll see a template file called &lt;code&gt;kong.conf.default&lt;/code&gt;. We will copy this file and rename it as &lt;code&gt;kong.conf&lt;/code&gt;, which is the file that Kong will look to for its startup configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ cd /etc/kong
/etc/kong$ sudo cp kong.conf.default kong.conf
/etc/kong$ tree
.
├── kong.conf
├── kong.conf.default
└── kong.logrotate

0 directories, 3 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;kong.conf&lt;/code&gt;, we'll need to make the following three edits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# PATH: /etc/kong/kong.conf

#
# Around line 368. Uncomment and set for TCP listening on port 20000
#

stream_listen = 127.0.0.1:20000
 
#
# Around line 922. Uncomment and set database to off
#
 
database = off

#
# Around line 1106. Uncomment and set to a file we're about to create.
#                   Use the absolute path to a project folder
#

declarative_config = /PATH/TO/MY/project/minecraft-kong.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The stream_listen configuration tells Kong to listen for streaming TCP traffic. We're telling Kong to listen on port 20000 for this. For the needs of this mini project, we can configure Kong using its &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/db-less-and-declarative-config/"&gt;DB-less and Declarative configuration&lt;/a&gt; style. Kong will not need to use a database (database = off), and all of our configurations for port forwarding and load balancing will be stored in a single YAML file. That is the &lt;code&gt;declarative_config&lt;/code&gt; file path that we've set above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-declarative-configuration-file"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Write Declarative Configuration File&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before we start up Kong, we need to write that &lt;code&gt;minecraft-kong.yml&lt;/code&gt; file with our port forwarding configuration. In a project folder (that matches the path you specified above), open up a new file called &lt;code&gt;minecraft-kong.yml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# PATH: ~/project/minecraft-kong.yml

_format_version: "2.1"

services:
  - name: Minecraft-Server-A
    url: tcp://localhost:25000
    routes:
      - name: Server-A-TCP-Routes
        protocols: ["tcp", "tls"]
        destinations:
          - ip: 127.0.0.1
            port: 20000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file, we declare a new &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/admin-api/#service-object"&gt;Service entity&lt;/a&gt; named Minecraft-Server-A. The server uses the TCP protocol, listening on localhost port 25000, so we set these values together as the service's url. Next, we define a &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/admin-api/#route-object"&gt;Route&lt;/a&gt; for the service, which associates our service with a URL path or an incoming connection destination that Kong will listen for. We provide a name for our route, telling Kong to listen for requests using TCP/TLS on the destination that we specified in our kong.conf file: ip 127.0.0.1 and port 20000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-up-minecraft-server-and-kong"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Start Up Minecraft Server and Kong&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We’ve written all of our configuration for this step. Let's start up our Minecraft server in Docker. Remember, we want our host (our local machine) to be ready on port 25000, binding that port to the standard Minecraft server port of 25565 on the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ docker run -p 25000:25565 -e EULA=true itzg/minecraft-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That command might take a little time to run as the server starts up. Now, in a separate terminal window, we'll start up Kong:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ sudo kong start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With our server up and running, we go back to our game client and, just like above, choose "Multiplayer" and try to establish a "Direct Connection" with a game server. We know that we could connect directly to localhost:25000, since that's the actual host port bound to the container's port; rather, we want to test Kong's port forwarding. We want to connect to the supposed game server on localhost:20000, pretending that we're the casual user who is unaware that port 20000 points to a port forwarding gateway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lS1qeUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq0p4z71tysqukrhoitu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lS1qeUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq0p4z71tysqukrhoitu.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on "Join Server." Like Step 1, your connection should be successful, and you'll have entered the Minecraft world. Our TCP connection request to localhost:20000 went to Kong Gateway, which then forwarded that request to port 25000, our actual Minecraft server. We have port forwarding up and running!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-loadbalancing-two-minecraft-servers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3: Load-Balancing Two Minecraft Servers&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;We will spin up two Minecraft servers for the final step in our mini-project, listening on ports 25000 and 26000. Previously, when we only had one Minecraft server, Kong would naturally forward TCP requests at port 20000 to that sole Minecraft server's port. Now, with two Minecraft server ports to choose from, we'll need to use port forwarding and load balancing. Kong Gateway will take TCP connection requests that come to port 20000 and distribute connections evenly between Minecraft Server A and Minecraft Server B.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-up-minecraft-servers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Start Up Minecraft Servers&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you haven't done so already, terminate the single Minecraft server that was running in the previous step. We'll start everything up again from a clean state, spinning up each server in its own terminal window. In your first terminal window, run the Docker container for Server A, binding the host's port 25000 to the container's port 25565:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ docker run -p 25000:25565 -e EULA=true itzg/minecraft-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in a separate terminal window, we will start up Server B, this time binding the host's port 26000 to the container's port 25565:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ docker run -p 26000:25565 -e EULA=true itzg/minecraft-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have Servers A and B running, accessible at ports 25000 and 26000, respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#edit-declarative-configuration-file"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Edit Declarative Configuration File&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Next, we want to edit our declarative configuration file (minecraft-kong.yml), configuring Kong for load balancing. Edit your file to reflect the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# PATH: ~/project/minecraft-kong.yml
_format_version: "2.1"

upstreams:
  - name: Minecraft-Servers
    targets:
      - target: localhost:25000
        weight: 100
      - target: localhost:26000
        weight: 100
services:
  - name: Load-Balancing-Service
    host: Minecraft-Servers
    protocol: tcp
    routes:
      - name: Load-Balancing-Route
        protocols: ["tcp", "tls"]
        destinations:
          - ip: 127.0.0.1
            port: 20000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's walk through what we've done here. First, we added an &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/admin-api/#upstream-object"&gt;Upstream Object&lt;/a&gt; (arbitrarily named Minecraft-Servers), which functions as a virtual host for load balancing to multiple services. That's exactly the functionality that we need. We added two &lt;a href="https://docs.konghq.com/gateway-oss/2.4.x/admin-api/#target-object"&gt;Target Objects&lt;/a&gt; to our upstream service. Each target has an address with host and port; in our case, our two targets point to localhost:25000 (Minecraft Server A) and localhost:26000 (Minecraft Server B). Then, we set a weight for each target, which the load balancer uses to distribute load. Even though we've explicitly set the weights evenly to 100, the default for this optional configuration is 100.&lt;/p&gt;

&lt;p&gt;Next, we declared our Service Object, which in this case is our load balancer service. Requests that satisfy the routes we establish will be forwarded to the Minecraft-Servers host, our load balancing upstream object. Similar to our previous step, we configured a route, telling Kong Gateway to listen for TCP/TLS requests destined for 127.0.0.1:20000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restart-kong"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Restart Kong&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Since our Kong configuration has changed, we need to restart Kong for the changes to take effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/project$ sudo kong restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, everything is up and running. We have our two Minecraft servers (Server A and Server B) running in Docker containers in two separate terminal windows. We have Kong configured to listen for TCP on port 20000, forwarding those requests to our load balancer, distributing connections across our two servers.&lt;/p&gt;

&lt;p&gt;Open the Minecraft game client again. Similar to previous steps, we will attempt to connect to the multiplayer server at localhost:20000 directly. As you connect, keep an eye on your two server terminal windows. As you repeatedly connect to the game, disconnect, and then reconnect, you will at times see a connection log message for Server A, and then at other times a message for Server B.&lt;/p&gt;

&lt;p&gt;And just like that, we have set up our load balancer to distribute connection requests across our two Minecraft servers!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ready-to-play-work"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ready to &lt;del&gt;Play&lt;/del&gt; Work&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;To recap, we slowly progressed in complexity for our mini-project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We started by simply spinning up a single Minecraft server in a Docker container, using port 25000 for accepting game client connections.&lt;/li&gt;
&lt;li&gt;Next, we configured Kong Gateway to sit in front of our single server to perform port forwarding. Kong listened on port 20000 for game client connections, forwarding those requests to the port on our host where the Minecraft server was accessible.&lt;/li&gt;
&lt;li&gt;Lastly, we set up two Minecraft servers to run concurrently. Then, we configured Kong Gateway to act as a load balancer. Kong listened on port 20000 for game client connections, this time funneling them through its load balancing service to distribute connections across our two servers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From here, you have many opportunities for adding complexity. You can add more game servers. For example, if some servers run on machines that can handle a heavier load of connections than others, then you can configure the load balancer to distribute the load unevenly. You can configure health check rules for Kong's load balancer to ensure requests are only forwarded to those servers which are presently healthy. You can even select from a handful of load balancing algorithms besides the default "round-robin" strategy.&lt;/p&gt;

&lt;p&gt;So, we've had a little fun and learned to use some important tools and concepts along the way. We have discovered that load balancing and port forwarding with Kong Gateway is simple and easy to set up. Yet, even with such ease, these features are extremely powerful. Now that you've got a handle on it, it's time to get to work and face the &lt;a href="https://minecraft.fandom.com/wiki/Ender_Dragon"&gt;Ender Dragon&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Finding A Web Design Company - Factors To Consider</title>
      <author>Alex</author>
      <pubDate>Tue, 08 Jun 2021 14:36:48 +0000</pubDate>
      <link>https://dev.to/alexanderkdev/finding-a-web-design-company-factors-to-consider-11n0</link>
      <guid>https://dev.to/alexanderkdev/finding-a-web-design-company-factors-to-consider-11n0</guid>
      <description>&lt;p&gt;In this rapidly changing world where change is the new constant, a website's life is only limited to a few years if not correctly designed or updated frequently. Thus, partnering with an experienced web design company ensures these aspects are taken care of to see a constant rise in the charts. (&lt;a href="https://www.mediafire.com/view/66bjmol7x8a2wks/Finding_A_Web_Design_Company_-_Factors_To_Consider.png/file#"&gt;https://www.mediafire.com/view/66bjmol7x8a2wks/Finding_A_Web_Design_Company_-_Factors_To_Consider.png/file#&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>company</category>
      <category>webdesign</category>
    </item>
    <item>
      <title>What is An Application Programming Interface?</title>
      <author>Rezaul karim</author>
      <pubDate>Tue, 08 Jun 2021 14:33:28 +0000</pubDate>
      <link>https://dev.to/rezaulkarim014/what-is-an-application-programming-interface-5ea6</link>
      <guid>https://dev.to/rezaulkarim014/what-is-an-application-programming-interface-5ea6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fuV3pPDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162278151/whHt5e6Ao.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fuV3pPDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162278151/whHt5e6Ao.jpeg" alt="api-application-programming-interface-isometric_107791-2716.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-programming-interface"&gt;
  &lt;/a&gt;
  Application Programming Interface
&lt;/h2&gt;

&lt;p&gt;In this article. I’m going to be talking about what an application programming interface. Both in general and related specifically to web development. Let’s start now.&lt;/p&gt;

&lt;p&gt;To get started API stands for application programming interface. Which is just a fancy way of saying what one application exposes to another. That is the API. Let’s take an&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-of-a-restaurant-to-describe-how-an-api-works-in-nontechnical-terms"&gt;
  &lt;/a&gt;
  Example of a restaurant to describe how an API Works in non-technical terms.
&lt;/h2&gt;

&lt;p&gt;So when you go to a restaurant you don’t go directly up to this chef and tell him what you want to order. You need to look at the In order something off of the menu. Because the menu tells you what the restaurant offers that is their API. This menu the API essentially tells you what that certain application is giving to you and the things that you can use from the application. So you go to the restaurant and you order something off of that menu. Then after you order something from that menu you tell them what you want. And restaurant is Going to give you whatever you ordered off of that menu. They’re going to give you back data.&lt;/p&gt;

&lt;p&gt;So when you access an API that API you’re going to send it what you want, then it will send you back information based on what you wanted It.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80-1SdMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162478930/GZbwAf4W8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80-1SdMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162478930/GZbwAf4W8.png" alt="api-5582541_960_720.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you go to this restaurant, for example a steak restaurant and you try to order a peanut butter jelly sandwich, they’re going to throw an error at you. They’re going to tell you we don’t serve peanut butter jelly sandwiches. You have to choose something on the menu and this makes API’s secure because the only exposed what you want to expose to the rest of the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-applications-role"&gt;
  &lt;/a&gt;
  Web Application’s Role:
&lt;/h2&gt;

&lt;p&gt;For example, a web application is not going to expose to the database with all the Information passwords. They’re only going to expose to you the login and sign up pages and not the actual database itself. This makes that website secure because they’re only exposing the parts that they want to some of the most common forms of API’s that you’ll run into as a developer are going to be rest API’s on the web and library API’s from code that you pull into your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-apis"&gt;
  &lt;/a&gt;
  Web API’s
&lt;/h3&gt;

&lt;p&gt;Let’s first talk about these web API’s, which are going to be most likely rest API access. These API’s exposed different endpoints also known as URLs, which you can access to get certain data from that API. You can also access these endpoint in order to modify data on these servers, but it only is what the application actually exposes to you and wants to let you modify.&lt;/p&gt;

&lt;p&gt;For example, you may be able to update it user through a rest API, but they’re not going to let you update the password. They’re only going to let you update the name in the email. For example. You also will to get users from this API, but they’re not going to return to you the password of the user the does give you the name and the email. This is a way that these servers can be secured by only exposing the information. They want through this API which is the contract that the server and the client are having between each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysD_onK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162195330/DrdvIyNQy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysD_onK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623162195330/DrdvIyNQy.jpeg" alt="software-developers-programming-computer-with-script_74855-6661.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-application-programming-interface"&gt;
  &lt;/a&gt;
  Common Application Programming Interface
&lt;/h2&gt;

&lt;p&gt;The other most common Application Programming Interface, which is not really referred to commonly as an API. But is still technically API is an actual library that you pull into your code. These libraries have a bunch of different methods to find on them that do specific things. When you call them and return to you specific data when you call them, this is exactly what an API is it’s a contract between this Library code that you’ve installed and your actual project that using that libraries code you have different ways that you can access it only. Of the methods that they And you aren’t able to access the internals of that Library unless it’s through the methods that the API of the library exposes to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;The common theme with API’s is that the only exposed to exactly what they want you to be able to access. And hide away absolutely everything else that they can in order to make their API as secure as possible. Also commonly with web API. You’re going to need some form of token to authenticate yourself with this API. Which will allow the application to know whose axis in the API.&lt;/p&gt;

&lt;p&gt;In order to limit what that person can access based on their specific permissions in conclusion. API’s are absolutely everywhere from technology to non technology related fields, and it’s really just a contract between two things. Look how they can interact with one another.&lt;/p&gt;

&lt;p&gt;It’s mostly used to make things more secure and easier to use. Because you know how you can use something. And it hides away all the stuff that you cannot access which makes it secure.&lt;/p&gt;

&lt;p&gt;That’s all an API is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrezaulkarim.com/why-should-we-use-dark-mode/"&gt;Read this article on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="//instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

</description>
      <category>uiweekly</category>
      <category>ux</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What Programming Languages Do You Use Everyday?</title>
      <author>Ice or Fire</author>
      <pubDate>Tue, 08 Jun 2021 14:22:21 +0000</pubDate>
      <link>https://dev.to/iceorfiresite/what-programming-languages-do-you-use-everyday-2f81</link>
      <guid>https://dev.to/iceorfiresite/what-programming-languages-do-you-use-everyday-2f81</guid>
      <description>&lt;p&gt;What programming languages do you use everyday? Are they for personal or professional projects?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Website lesson 6: js function realization</title>
      <author>Yuri Filatov</author>
      <pubDate>Tue, 08 Jun 2021 14:21:05 +0000</pubDate>
      <link>https://dev.to/filatovv/website-lesson-6-js-function-realization-27bk</link>
      <guid>https://dev.to/filatovv/website-lesson-6-js-function-realization-27bk</guid>
      <description>&lt;p&gt;Welcome back!&lt;br&gt;
In the previous lesson we talked a lot about the &lt;a href="https://dev.to/filatovv/website-lesson-5-communication-base-42om"&gt;base of communication&lt;/a&gt;. Your goal wat to ket known with the structure of js.&lt;/p&gt;

&lt;p&gt;Today we are moving to the real things.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#keeping-everything-in-structure"&gt;
  &lt;/a&gt;
  Keeping everything in structure
&lt;/h2&gt;

&lt;p&gt;You have your items just placed somewhere in your html file. Now, let's define the types of variables to put your items in some structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var posts = [
    {
        id: '1',
        destination: 'China',
        createdAt: new Date(2014, -1, 1, 2, 3, 4, 567),
        author: 'ChingHang',
        tag: "summer",
        flug: 'A-730'
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;id&lt;/em&gt; - order of your element, then to get your item with no filter but with the order.&lt;br&gt;
&lt;em&gt;destination&lt;/em&gt; - appropriate name for the variable that describes destination of flight.&lt;br&gt;
&lt;em&gt;createdAt&lt;/em&gt; - date type to show when was the post made.&lt;br&gt;
&lt;em&gt;tag&lt;/em&gt; - variable will be used then for filter to apply (to search by tags)&lt;/p&gt;

&lt;p&gt;This way you keep your information in as tructure in js file, then to immitate communication. More code for js you can see &lt;a href="https://dev.to/filatovv/js-object-processing-functions-1g29"&gt;in one of my posts&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;You already know, hot to make simple functions. Here for your items there will be not one function, but many (edit, add, remove and so on). So your functions should also have a structure, like you places masses into one structure, so with the functions. For that opportunity we have &lt;strong&gt;classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Classes have name and all functions connected to one class. You will ask me, how do we connect out items' structure with this class? Class is a uniques place to keep all functions - like a template for any variable, mas or structure. We don't need to connect them. We will call this functions for our structure, but about it later.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#making-class"&gt;
  &lt;/a&gt;
  Making class
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;class work { ... }&lt;/code&gt;&lt;br&gt;
What every class needs? A constructure - a bilder of object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor(posts) {
    this._posts=posts;
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#what-is-this-and-why-do-we-place-dot"&gt;
  &lt;/a&gt;
  What is &lt;em&gt;this&lt;/em&gt; and why do we place dot?
&lt;/h4&gt;

&lt;p&gt;This - marker that we use variables in our class. Like a path: if we don't put &lt;em&gt;this.&lt;/em&gt;, our object don't have path to our class, so it is the object outside the class. Dot is just the separator.&lt;br&gt;
Feel the difference:&lt;br&gt;
&lt;em&gt;this.posts&lt;/em&gt; - variable posts belongs to class (posts from the class, not from the structure, cause it is outside the class)&lt;br&gt;
&lt;em&gt;posts&lt;/em&gt; - outside the class. So we have a structure named &lt;em&gt;posts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Template of this:&lt;br&gt;
&lt;strong&gt;[path].[object]&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-is-in-the-brackets"&gt;
  &lt;/a&gt;
  What is in the brackets?
&lt;/h4&gt;

&lt;p&gt;As always it is something we send to the function (data to work with).&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#validating-object"&gt;
  &lt;/a&gt;
  Validating object
&lt;/h4&gt;

&lt;p&gt;Object, that you will add in the future can be incorrect: some fieds are empty or incorrect length of name (1000 symbols for example)&lt;/p&gt;

&lt;p&gt;We need a validating function not to catch mistakes in future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;validatePost(Object){
        return Object.id != null &amp;amp;&amp;amp; Object.destination != null &amp;amp;&amp;amp; Object.destination.length&amp;lt;400
            &amp;amp;&amp;amp; Object.author != null &amp;amp;&amp;amp; Object.createdAt != null &amp;amp;&amp;amp; typeof Object.id === "string" &amp;amp;&amp;amp; typeof Object.destination === "string" &amp;amp;&amp;amp; typeof Object.flug === "string"
            &amp;amp;&amp;amp; typeof Object.author === "string"

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As always in the brackets is our data to work with. You will ask me, why &lt;em&gt;Object&lt;/em&gt;, but not &lt;em&gt;posts&lt;/em&gt; and moreover &lt;em&gt;posts&lt;/em&gt; is a structure, not an element, where did this Object come from??&lt;/p&gt;

&lt;p&gt;The answer is easy: you can place whatever you want in the brackets (Object or "fkdfjldf" or "hello") even though they are not initialized variables. This data comes from outside and the name in the brackets will be used only in the body in function and then dissapear - it is just inside of the function. You can call the function and send data named &lt;em&gt;post&lt;/em&gt;, but in your brackets it will be &lt;em&gt;object&lt;/em&gt; and it is not a mistake (Imagine in your head that you send this post to object, object works inside and that's all).&lt;/p&gt;

&lt;p&gt;What do we return?&lt;br&gt;
We return a boolean variable (true or false) and we ask our function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the object's id sent to the function not equal to 0&lt;/li&gt;
&lt;li&gt;if its destination isn't empty&lt;/li&gt;
&lt;li&gt;if its author name isn't empty&lt;/li&gt;
&lt;li&gt;if all text variables are less than 400 symbols&lt;/li&gt;
&lt;li&gt;if the type of id, destination and author name is string &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if the answer is yes for this points, out function gives as true answer.&lt;/p&gt;

&lt;p&gt;More functions we will explain later, cause they are not as understandable as these. Btw, if everything is easy for you, just check the whole my code (a little bit old) and try your best.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#communicating"&gt;
  &lt;/a&gt;
  Communicating
&lt;/h3&gt;

&lt;p&gt;How do we communicate with functions? You already now - we call it using its name and data we will send to.&lt;/p&gt;

&lt;p&gt;But these functions were just nowhere, now we have a structure and a class. How to connect??&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let a = new work(posts);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;let a&lt;/em&gt; - is our variable that now has the type for our class&lt;br&gt;
Like we assign the type for variable - object of the work class. &lt;br&gt;
What is in the brackets? Constructure. &lt;br&gt;
What for? Yes, we can make a variable, name it, but it is not initialized.&lt;/p&gt;

&lt;p&gt;Make some temp object (temporary, the object to add, remove and validate, cause it has to be outside to make sense)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;temp = {
        id: '1',
        destination: 'Griechenland',
        createdAt: new Date(2013, 0, 1, 2, 3, 4, 567),
        author: 'SergeevaAnna',
        flug: 'A-322'
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#assigning-the-function"&gt;
  &lt;/a&gt;
  Assigning the function
&lt;/h4&gt;

&lt;p&gt;Object of class -&amp;gt; name of function (path) -&amp;gt; data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("a message that we have tested validatePost: ")
console.log(a.validatePost(temp))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A message is needed then not to forget which answer belongs to which question. Here we output the result of the function. &lt;br&gt;
&lt;em&gt;a&lt;/em&gt; - object&lt;br&gt;
&lt;em&gt;validatePost&lt;/em&gt; - path&lt;br&gt;
&lt;em&gt;temp&lt;/em&gt; - data&lt;/p&gt;

&lt;p&gt;Hopefully, it is still understandable to you!&lt;br&gt;
Next lesson we will move to harder functions, now you have 4 days to try your best, trying to make simple functions but not just somewhere in your js file, but in structures and classes - template.&lt;/p&gt;

&lt;p&gt;More info you can find on my website&lt;br&gt;
Good luck with your job!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to start a task being a junior developer</title>
      <author>Fabrícia Diniz</author>
      <pubDate>Tue, 08 Jun 2021 14:14:04 +0000</pubDate>
      <link>https://dev.to/fabriciadiniz/how-to-start-a-task-being-a-junior-developer-4d16</link>
      <guid>https://dev.to/fabriciadiniz/how-to-start-a-task-being-a-junior-developer-4d16</guid>
      <description>&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL-DR:
&lt;/h3&gt;

&lt;p&gt;In this article I talk about strategies I use to efficiently navigate my tasks at work as a junior developer (who has ADHD).&lt;br&gt;
These are the topics covered (I went a little further than just starting):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#before-starting-a-task"&gt;Before starting a task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#while-developing"&gt;While developing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#at-task-end"&gt;At task completion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Basically, there are 3 types of strategies I use when doing a task: ** those applied to reduce the difficulty of starting, those applied during development to smooth the process, and those applied at the end of the task to reduce the errors that will pass into code review*&lt;em&gt;. To help understanding, I'm going to use a task I did a few months ago, a modal in React.&lt;br&gt;
*I have to warn you that these tips will improve your performance in the medium term, but in the short term it may seem like you're taking things slower than you'd like. I suggest talking to your leadership to align the expectations.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-starting-a-task"&gt;
  &lt;/a&gt;
  Before starting a task
&lt;/h2&gt;

&lt;p&gt;Before starting any task I like to understand the code I'm going to work with, so I look for the components involved in the task and read them, taking notes in a notebook about what each one does, where the data comes from and what its internal functions do. &lt;strong&gt;That way I can have a deeper understanding of what I'm going to be dealing with&lt;/strong&gt; and I prevent that information from staying only in my head (which is not at all reliable), as well create a place to turn to if ever I need to work again on the same components.&lt;/p&gt;

&lt;p&gt;You could argue that doing it this way "consumes" a lot of task time, but I guarantee it makes development easier and reduces time spent looking for bugs later. From a junior's perspective, &lt;strong&gt;you gain code mastery much faster and deeper&lt;/strong&gt; this way. People don't usually do this and I've found that reading and understanding the code beforehand helps me identify points of attention that go unnoticed even by the more experienced.&lt;/p&gt;

&lt;p&gt;However, sometimes the task is to start something from scratch. In these cases I look for similar components and do the same procedure to understand what all its code does because &lt;strong&gt;this prevents me from just copying code snippets without understanding what they actually do&lt;/strong&gt;. My task of creating a modal fell in this case, I had to create the component from scratch based on a more general one that already existed in the project.&lt;/p&gt;

&lt;p&gt;The last thing I do is &lt;strong&gt;taking note of the subtasks&lt;/strong&gt; within the main task. Here I try to make them as simple and short as possible, because this reduces the time between one subtask and another and greatly improves the development flow. Regarding my modal, it was something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create modal component&lt;/li&gt;
&lt;li&gt;condition API call to click&lt;/li&gt;
&lt;li&gt;mock API return&lt;/li&gt;
&lt;li&gt;test the action of clicking the button&lt;/li&gt;
&lt;li&gt;find out how to pass information between different components&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#while-developing"&gt;
  &lt;/a&gt;
  While developing
&lt;/h2&gt;

&lt;p&gt;Having very small and relatively simple subtasks helps reduce the anxiety and procrastination to get started and gives you a better view of progress. Sometimes it is necessary to define &lt;strong&gt;microsteps&lt;/strong&gt; to help break the inertia of starting the task and one that helps me a lot when I need to research a difficult topic is to leave the website or documentation open and then get up from the chair for a while. For some reason I feel less overwhelmed when I've just taken a walk and the website I need is already open just waiting for me. This also works with the code itself, I find the right file to work with and then I'll take a walk around to unwind before starting.&lt;/p&gt;

&lt;p&gt;During the task, unforeseen bugs/fixes always arise, so I &lt;strong&gt;write down all the things I didn't anticipate I would have to do and also all the questions that come up&lt;/strong&gt; to search the internet or ask someone on the team, that way nothing gets lost and I guarantee that I will remember to clarify everything.&lt;br&gt;
Another strategy I have to adopt when it's particularly difficult to focus on the task is to write down the problem I'm trying to solve and write down the little conclusions that will lead me to the solution. An example of how I do this part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;at what moment should the click open the modal?

&lt;ul&gt;
&lt;li&gt;↪ when an element is registered, determined by &lt;code&gt;element.isEnabled&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;what defines isEnabled? At what point is it changed?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;the modal must have: isOpen, onClose, type, name, date, activities

&lt;ul&gt;
&lt;li&gt;date comes from the URL ✅&lt;/li&gt;
&lt;li&gt;where does the other information come from? Does the parent component have them all? Do I need to get any of them from somewhere else?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In some situations it's necessary to do a pair programming and I realized that without my notes I could end up getting pretty lost, so I like to take these steps before having someone help me with answers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#at-task-completion"&gt;
  &lt;/a&gt;
  At task completion
&lt;/h2&gt;

&lt;p&gt;This is the time to check if any silly mistakes have gone unnoticed. Before submitting an assignment for code review I usually recheck a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run all the automated/integration tests to make sure I didn't accidentally break anything&lt;/li&gt;
&lt;li&gt;run lint (if not running automatically)&lt;/li&gt;
&lt;li&gt;update my branch with main/master

&lt;ul&gt;
&lt;li&gt;if necessary, update libraries and database&lt;/li&gt;
&lt;li&gt;if necessary, resolve merge conflicts&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;run the code and make sure the behavior is as expected, including error cases&lt;/li&gt;
&lt;li&gt;check if I've followed the code standards defined by the company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;And here's a tip my tech lead gave me&lt;/strong&gt;: if you think the code is bad after finishing the whole task, call someone on your team to take a look, you can explain what you tried to do and the person can give you feedback on how to improve before submitting to the code review itself.&lt;/p&gt;




&lt;p&gt;Starting a career in development can be quite difficult, especially if you've gone through a career transition or don't have a good theoretical background. With this article I would like to share some strategies I use to make tasks less daunting and less anxiety-provoking.&lt;br&gt;
Do you have any more tips to give not only to me but to other people just starting out? Leave it in the comments and help some more people.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Step By Step Visual Roadmap To Any learn programming Language (Practice Questions included)</title>
      <author>Rishabhraghwendra18</author>
      <pubDate>Tue, 08 Jun 2021 14:13:00 +0000</pubDate>
      <link>https://dev.to/rishabhraghwendra/step-by-step-visual-roadmap-to-any-learn-programming-language-practice-questions-included-3mci</link>
      <guid>https://dev.to/rishabhraghwendra/step-by-step-visual-roadmap-to-any-learn-programming-language-practice-questions-included-3mci</guid>
      <description>&lt;p&gt;It’s always a good idea to plan rather than directly jumping in, to achieve our goals in a shorter period of time.&lt;/p&gt;

&lt;p&gt;To learn a programming language, follow a visual roadmap to understand the basics and succeed in that. Practice questions sheets are provided for some important topics. This roadmap &amp;amp; questions are applicable to any language you are learning because concepts are same in every language , only syntax is different. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: Assuming that you have chosen which programming language to learn.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So let’s get started ,yippee..&lt;/p&gt;

&lt;p&gt;Learn a new topic and practice that topic on alternate days, as shown below :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9itDArQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tz15ylrzu5m4ni05y8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9itDArQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tz15ylrzu5m4ni05y8i.png" alt="Plan/Strategy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blue bar shows the day to learn a new topic . White bar shows the day to practice questions from below the &lt;strong&gt;Practice Questions sheet&lt;/strong&gt; , topics that we have learnt a day before.&lt;br&gt;
Sunday is our day off!!&lt;/p&gt;

&lt;p&gt;Visual roadmap of topics that we should know in any programming language .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link :- &lt;a href="https://cutt.ly/cnEJca4"&gt;https://cutt.ly/cnEJca4&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As promised , here’s the practice questions sheet :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link :- &lt;a href="https://cutt.ly/7nEJffT"&gt;https://cutt.ly/7nEJffT&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Questions are not complex, but enough to make your concepts clear. Solutions of these questions can be very easily found on the internet , but try to spend at least 30mins figuring out the solution.&lt;/p&gt;

&lt;p&gt;With these estimates you can complete the roadmap in about 3 month! It’s just a rough estimate and can vary from person to person.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus Tip:&lt;/strong&gt; If you are still searching for best resources to learn C++,JavaScript,Python , here’s the list:&lt;br&gt;
&lt;strong&gt;- C++(Paid):&lt;/strong&gt; &lt;a href="https://cutt.ly/HnEJIjF"&gt;https://cutt.ly/HnEJIjF&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;- JavaScript(Free):&lt;/strong&gt; &lt;a href="https://cutt.ly/JnEJDu8"&gt;https://cutt.ly/JnEJDu8&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;- Python(Free):&lt;/strong&gt; &lt;a href="https://cutt.ly/LnEJJKd"&gt;https://cutt.ly/LnEJJKd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At last all I would say is, keep on practicing as practice is the only key to success!&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;br&gt;
Written with ❤️ &amp;amp; passion 🔥 by Rishabh Raghwendra &lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>roadmap</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Master Design Patterns By Building Real Projects - Chain of Responsibility Pattern - Javascript</title>
      <author>Hiep Le</author>
      <pubDate>Tue, 08 Jun 2021 14:11:16 +0000</pubDate>
      <link>https://dev.to/hieptl/master-design-patterns-by-building-real-projects-chain-of-responsibility-pattern-javascript-1bce</link>
      <guid>https://dev.to/hieptl/master-design-patterns-by-building-real-projects-chain-of-responsibility-pattern-javascript-1bce</guid>
      <description>&lt;h2&gt;
  &lt;a href="#behavioral-pattern-chain-of-responsibility"&gt;
  &lt;/a&gt;
  Behavioral Pattern - Chain of Responsibility
&lt;/h2&gt;

&lt;p&gt;This is the sixth part in my series (23 GoF Design Patterns). My series will help you understand about design patterns by building real projects. For this reason, you can see the places in which each pattern could be applied. I want to focus on learning by doing instead of talking too much about theories. &lt;/p&gt;

&lt;p&gt;I'm Hiep. I work as a full-time software engineer. Most of my open-source projects are focused on one thing - to help people learn 📚.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the repository is useful, please help me share the post and give me a Github ⭐. It will make me feel motivation to work even harder. I will try to make many open sources and share to the community.&lt;/p&gt;

&lt;p&gt;I also created some series that help you improve your practical skills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Learn React By Buiding Netflix&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/hieptl/learn-react-by-building-netflix-1127"&gt;https://dev.to/hieptl/learn-react-by-building-netflix-1127&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="#definition"&gt;Definition.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="#scenarios"&gt;Scenarios.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="#building-a-promotion-engine-for-amazon"&gt;Building a Promotion Engine for Amazon.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="#result"&gt;Result.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id="definition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-definition"&gt;
  &lt;/a&gt;
  1. Definition.
&lt;/h2&gt;

&lt;p&gt;Chain of responsibility delegates commands to a chain of processing objects.&lt;/p&gt;

&lt;p&gt;&lt;a id="scenarios"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-scenarios"&gt;
  &lt;/a&gt;
  2. Scenarios.
&lt;/h2&gt;

&lt;p&gt;We can imagine that we are buliding a promotion engine for Amazon. When the users add products into their cart. The promotion engine will take responsibility to calculate total discount based on the cart's products.&lt;/p&gt;

&lt;p&gt;We will build the following rules: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the number of products &amp;gt; 3. We will discount 50%. &lt;/li&gt;
&lt;li&gt;If the total price &amp;gt; 100. We will discount 20%.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to implement the feature, we just need to write some if...else statements.&lt;/p&gt;

&lt;p&gt;However, promotion programs are unpredictable because they depend on the business. For this reason, we need to find the solution which has ability to scale when Amazon wants to have new promotion programs so that &lt;strong&gt;we do not need to write too many if...else statements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will implement the feature by using &lt;strong&gt;Chain of Responsibility&lt;/strong&gt; pattern.&lt;/p&gt;

&lt;p&gt;&lt;a id="building-a-promotion-engine-for-amazon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-building-a-promotion-engine-for-amazon"&gt;
  &lt;/a&gt;
  3. Building a Promotion Engine for Amazon.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to use Javascript class to implement the idea because in the case you are using object-oriented programming languages or you have to use those languages in the future, you can still implement design patterns by using different languages. In my opinion, design patterns are mindset and approaches and not depend on programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Step 1: Create &lt;strong&gt;Cart&lt;/strong&gt; class. It will be used to store the information of the shopping cart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1st NOTE&lt;/strong&gt;: &lt;strong&gt;addProduct&lt;/strong&gt; will be used to add a new product to the cart. It accept &lt;strong&gt;product&lt;/strong&gt; as parameter. &lt;strong&gt;product&lt;/strong&gt; parameter specifies the product which is belonging to the cart.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Step 2: The first promotion rule need to be implemented. We create &lt;strong&gt;NumberDiscount&lt;/strong&gt; to check about if the number of products &amp;gt; 3. We will discount 50%.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NumberDiscount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;2nd NOTE: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We are defining &lt;strong&gt;Chain of Responsibility&lt;/strong&gt;. It means that we are defining &lt;strong&gt;chain of promotion rules&lt;/strong&gt;. That's why we have &lt;strong&gt;this.next&lt;/strong&gt;. &lt;strong&gt;this.next&lt;/strong&gt; determines the next promotion rule which would be executed after the current promotion rule. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;setNext&lt;/strong&gt; is used to set the next promotion rules by assigning to &lt;strong&gt;this.next&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;exec&lt;/strong&gt; is used to apply the current promotion rule to list of cart's products. In this case, we are checking the number of products. If it is &amp;gt; 3, we will discount 50%.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In fact, we are executing chain of promotion rules. Therefore, we need to save the result at each step. &lt;strong&gt;currentTotalDiscount&lt;/strong&gt; variable help us to achieve that. We will store the discount value of the current promotion and add it to the result of the next promotion. The process will be continue until we do not have any promotion rules to apply. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Step 3: The second promotion rule need to be implemented. We create &lt;strong&gt;TotalPriceDiscount&lt;/strong&gt; to check if the total price &amp;gt; 100. We will discount 20%.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TotalPriceDiscount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;calculateTotalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculateTotalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 4: After defining different promotion rules, we need to build our promotion engine and set up chain of promotion rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PromotionEngine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NumberDiscount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;priceDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TotalPriceDiscount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberDiscount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;priceDiscount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;execPromotionEngine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberDiscount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;3rd NOTE&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The code above describe the magic of &lt;strong&gt;setNext&lt;/strong&gt; function. We initialize the first promotion rule (&lt;strong&gt;numberDiscount&lt;/strong&gt;) and then we continute to initialize the second promotion rule (&lt;strong&gt;priceDiscount&lt;/strong&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create a chain of promotion rules by writing &lt;strong&gt;this.numberDiscount.setNext(this.priceDiscount)&lt;/strong&gt; It means that we want to excecute the &lt;strong&gt;numberDiscount&lt;/strong&gt; promotion first and then execute the &lt;strong&gt;priceDiscount&lt;/strong&gt; promotion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The last but not least, &lt;strong&gt;execPromotionEngine&lt;/strong&gt; accepts cart's products as parameter. The &lt;strong&gt;products&lt;/strong&gt; parameter will be passed to the chain of responsibility in order to apply promotion programs. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Out full source code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NumberDiscount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TotalPriceDiscount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;calculateTotalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculateTotalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalPrice&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentTotalDiscount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPromotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PromotionEngine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NumberDiscount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;priceDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TotalPriceDiscount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberDiscount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;priceDiscount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;execPromotionEngine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberDiscount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addProduct&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addProduct&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addProduct&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addProduct&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product D&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addProduct&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promotionEngine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PromotionEngine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promotionEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execPromotionEngine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`total discount: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;totalDiscount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-result"&gt;
  &lt;/a&gt;
  4. Result.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above result describes that the total discount value was calculated by applying &lt;strong&gt;Chain of Responsibility&lt;/strong&gt; pattern.&lt;/p&gt;

&lt;p&gt;By using design patterns, we can understand the core concepts and make our code become more readable and cleaner. I hope that the post can help you understand about &lt;strong&gt;Chain of Responsibility&lt;/strong&gt; pattern. &lt;/p&gt;

&lt;p&gt;Thanks and Best Regards,&lt;br&gt;
Hiep.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Moving Perl Mojolicious routes to their own module</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 08 Jun 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/moving-perl-mojolicious-routes-to-their-own-module-53c2</link>
      <guid>https://dev.to/mjgardner/moving-perl-mojolicious-routes-to-their-own-module-53c2</guid>
      <description>&lt;p&gt;A mentee asked me over the weekend if there was a way within a &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt; web application to store the &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Routing"&gt;routes&lt;/a&gt; separately from the main application class. Here’s one way. &lt;strong&gt;These instructions assume you’re using &lt;a href="https://www.perl.org/get.html"&gt;Perl 5.34&lt;/a&gt; and &lt;a href="https://metacpan.org/release/SRI/Mojolicious-9.19"&gt;Mojolicious 9.19&lt;/a&gt;&lt;/strong&gt; (the latest as of this writing) via the terminal command line on a Linux, Unix, or macOS system; make the appropriate changes if this doesn’t apply to you.&lt;/p&gt;

&lt;p&gt;First, if you haven’t already, &lt;a href="https://docs.mojolicious.org/Mojolicious/Command/Author/generate/app"&gt;create your Mojolicious app&lt;/a&gt; at your shell prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mojo generate app Local::RouteDemo
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/script
  [write] /Users/mgardner/Projects/blog/local_route_demo/script/local_route_demo
  [chmod] /Users/mgardner/Projects/blog/local_route_demo/script/local_route_demo 744
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/lib/Local
  [write] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo.pm
  [exist] /Users/mgardner/Projects/blog/local_route_demo
  [write] /Users/mgardner/Projects/blog/local_route_demo/local-route_demo.yml
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo/Controller
  [write] /Users/mgardner/Projects/blog/local_route_demo/lib/Local/RouteDemo/Controller/Example.pm
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/t
  [write] /Users/mgardner/Projects/blog/local_route_demo/t/basic.t
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/public
  [write] /Users/mgardner/Projects/blog/local_route_demo/public/index.html
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/templates/layouts
  [write] /Users/mgardner/Projects/blog/local_route_demo/templates/layouts/default.html.ep
  [mkdir] /Users/mgardner/Projects/blog/local_route_demo/templates/example
  [write] /Users/mgardner/Projects/blog/local_route_demo/templates/example/welcome.html.ep
$ cd local_route_demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new Perl module in your editor for storing your routes. Here we’re using &lt;code&gt;Local::RouteDemo::Routes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch lib/Local/RouteDemo/Routes.pm
$ $EDITOR lib/Local/RouteDemo/Routes.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make the module with a function that will create the routes you want, given a &lt;a href="https://docs.mojolicious.org/Mojolicious/Routes"&gt;Mojolicious::Routes&lt;/a&gt; object. Here we’re just bringing over the default route created when we created our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::RouteDemo::&lt;/span&gt;&lt;span class="nv"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt; &lt;span class="sx"&gt;qw(all -experimental::signatures)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Exporter&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;@EXPORT_OK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw(make_routes)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;make_routes&lt;/span&gt; &lt;span class="p"&gt;($router) {&lt;/span&gt;
    &lt;span class="nv"&gt;$router&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Example#welcome&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="c1"&gt;# add more routes here&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adjust the application class to load your new Routes module and call its &lt;a href="https://perldoc.pl/Exporter"&gt;exported&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;RouteDemo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mojolicious&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Local::RouteDemo::&lt;/span&gt;&lt;span class="nv"&gt;Routes&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;make_routes&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="c1"&gt;# This method will run once at server start&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;startup&lt;/span&gt; &lt;span class="p"&gt;($self) {&lt;/span&gt;

    &lt;span class="c1"&gt;# Load configuration from config file&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;NotYAMLConfig&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Configure the application&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;# Make routes&lt;/span&gt;
    &lt;span class="nv"&gt;make_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, run your tests and/or manually test your routes to be sure everything works OK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ prove -vlr t
t/basic.t .. [2021-06-07 12:21:55.36917] [58779] [debug] [elVGykGVWlOt] GET "/"
[2021-06-07 12:21:55.36972] [58779] [debug] [elVGykGVWlOt] Routing to controller "Local::RouteDemo::Controller::Example" and action "welcome"
[2021-06-07 12:21:55.37137] [58779] [debug] [elVGykGVWlOt] Rendering template "example/welcome.html.ep"
[2021-06-07 12:21:55.37343] [58779] [debug] [elVGykGVWlOt] Rendering template "layouts/default.html.ep"
[2021-06-07 12:21:55.37495] [58779] [debug] [elVGykGVWlOt] 200 OK (0.005772s, 173.250/s)

ok 1 - GET /
ok 2 - 200 OK
ok 3 - content is similar
1..3
ok
All tests successful.
Files=1, Tests=3, 1 wallclock secs ( 0.02 usr 0.01 sys + 0.38 cusr 0.11 csys = 0.52 CPU)
Result: PASS
$ script/local_route_demo get /
[2021-06-07 12:22:29.55930] [58889] [debug] [f3YoaFhkwJ42] GET "/"
[2021-06-07 12:22:29.55990] [58889] [debug] [f3YoaFhkwJ42] Routing to controller "Local::RouteDemo::Controller::Example" and action "welcome"
[2021-06-07 12:22:29.56059] [58889] [debug] [f3YoaFhkwJ42] Rendering template "example/welcome.html.ep"
[2021-06-07 12:22:29.56269] [58889] [debug] [f3YoaFhkwJ42] Rendering template "layouts/default.html.ep"
[2021-06-07 12:22:29.56432] [58889] [debug] [f3YoaFhkwJ42] 200 OK (0.005004s, 199.840/s)
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Welcome&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;Welcome to the Mojolicious real-time web framework!&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;
  This page was generated from the template "templates/example/welcome.html.ep"
  and the layout "templates/layouts/default.html.ep",
  &amp;lt;a href="/"&amp;gt;click here&amp;lt;/a&amp;gt; to reload the page or
  &amp;lt;a href="/index.html"&amp;gt;here&amp;lt;/a&amp;gt; to move forward to a static page.
&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find &lt;a href="https://github.com/mjgardner/local_route_demo"&gt;a git repository of this work on GitHub&lt;/a&gt;, and here’s a &lt;a href="https://github.com/mjgardner/local_route_demo/commit/ea1226793ae689ce7e049b36caaebccabb581c57"&gt;commit of all the changes made to the default Mojolicious application&lt;/a&gt; so you can see the differences.&lt;/p&gt;

</description>
      <category>mojolicious</category>
      <category>perl</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🔴 Create Unique Card Hover Effects | Awesome Hover Animation</title>
      <author>Stackfindover</author>
      <pubDate>Tue, 08 Jun 2021 13:53:16 +0000</pubDate>
      <link>https://dev.to/stackfindover/create-unique-card-hover-effects-awesome-hover-animation-1f23</link>
      <guid>https://dev.to/stackfindover/create-unique-card-hover-effects-awesome-hover-animation-1f23</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello guys, today I am going to show you how to create unique card hover effects, in this video you will learn how to How to make awesome hover animation using HTML &amp;amp; CSS.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Common Query&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to create profile card design&lt;/li&gt;
&lt;li&gt;How to add hover effect using css&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Tbr30u2XKZM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
