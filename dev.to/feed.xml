<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Using Font Ligatures in VS Code</title>
      <author>Sam Wronski</author>
      <pubDate>Mon, 01 Nov 2021 18:36:40 +0000</pubDate>
      <link>https://dev.to/worldofzero/using-font-ligatures-in-vs-code-4lpb</link>
      <guid>https://dev.to/worldofzero/using-font-ligatures-in-vs-code-4lpb</guid>
      <description>&lt;p&gt;Font ligatures combine multiple characters into a single unique character. Some fonts provide ligatures specifically for software development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nX7DzKhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l3iggkf8snkk158mm0fm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nX7DzKhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l3iggkf8snkk158mm0fm.png" alt="Font Ligatures in VS Code infographic" width="880" height="749"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some free fonts that support ligatures are:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Font&lt;/th&gt;
&lt;th&gt;Reference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cascadia Code&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/microsoft/cascadia-code"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fira Code&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/tonsky/FiraCode"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JetBrains Mono&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.jetbrains.com/lp/mono/"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iosevka&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/be5invis/Iosevka"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hasklig&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/i-tu/Hasklig"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Monoid&lt;/td&gt;
&lt;td&gt;&lt;a href="https://larsenwork.com/monoid/"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Victor Mono&lt;/td&gt;
&lt;td&gt;&lt;a href="https://rubjo.github.io/victor-mono/"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To enable font ligatures in Visual Studio Code you will need to edit the &lt;code&gt;settings.json&lt;/code&gt; file. To do this open the VS Code settings (File -&amp;gt; Preferences -&amp;gt; Settings) select the Text Editor group and Font settings. Replace the name of the font with the font you would like to use. For example if you would like to use Cascadia Code then replace the font with &lt;code&gt;Cascadia Code&lt;/code&gt;. You may include fallback fonts that will be used if the first font is not available. &lt;code&gt;Cascadia Code, Fira Code&lt;/code&gt; will prioritize Cascadia Code but use Fira Code if Cascadia Code isn't available on the current machine.&lt;/p&gt;

&lt;p&gt;Once you've configured the font you'll need to explicitly enable ligatures. This is a separate option and requires you to modify the &lt;code&gt;settings.json&lt;/code&gt; file directly. You will need to add the &lt;code&gt;"editor.fontLigatures"&lt;/code&gt; setting to your &lt;code&gt;settings.json&lt;/code&gt; settings file. Once this is done your settings should include two lines that look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*** Your ligature enabled font ***"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontLigatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"your other settings"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've made these changes you should be ready to start taking advantage of ligatures in your code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Different fonts may support a different set of ligatures.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Do you own a domain name without a purpose? Let me give you a project for it!</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 01 Nov 2021 18:28:39 +0000</pubDate>
      <link>https://dev.to/inhuofficial/do-you-own-a-domain-name-without-a-purpose-let-me-give-you-a-project-for-it-5kn</link>
      <guid>https://dev.to/inhuofficial/do-you-own-a-domain-name-without-a-purpose-let-me-give-you-a-project-for-it-5kn</guid>
      <description>&lt;p&gt;In a rush? Head down to the comments and share a domain name you own without a purpose, I (and hopefully some others) will give you a fun side project idea for it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-those-not-in-a-rush"&gt;
  &lt;/a&gt;
  For those not in a rush!
&lt;/h2&gt;

&lt;p&gt;I own quite a few domain names. I recently wrote about my emoji domain &lt;a href="https://dev.to/inhuofficial/i-own-to-2lkc"&gt;üë©‚Äçüíªüë®‚Äçüíª.to&lt;/a&gt;, I also &lt;a href="https://dev.to/inhuofficial/i-own-a-tiny-piece-of-internet-history-plus-a-little-puzzle-to-keep-you-busy-this-weekend-559"&gt;own a domain name purely for the fact it sits on the million dollar homepage&lt;/a&gt; and is a part of internet history! &lt;/p&gt;

&lt;p&gt;I even bought a domain name a few years ago that I still think could be great for a codepen competitor - &lt;strong&gt;codersplayground.co.uk&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Oh and don't forget &lt;a href="https://ultimatemotherfuckingwebsite.com"&gt;ultimatemot*******kingwebsite.com (&lt;b&gt;Warning, do not click this link if swearing offends you&lt;/b&gt;)&lt;/a&gt;, which is probably the naughtiest domain I own and actually use!&lt;/p&gt;

&lt;p&gt;Today, for the first time in a while, I bought a domain name that not only fit a big side project beautifully, but would also work for loads of different use cases.&lt;/p&gt;

&lt;p&gt;It is probably the "best" (best when talking about commercial viability and an obvious use case) I have bought. In fact, I am that amazed it wasn't taken it prompted this whole article!&lt;/p&gt;

&lt;p&gt;The domain is:&lt;/p&gt;





&lt;center&gt;&lt;a href="https://a2z.dev"&gt;a2z.dev&lt;/a&gt;&lt;/center&gt;



&lt;p&gt;I will be writing loads about that domain as it will feature heavily in my content creation strategy over the next year, but it had me thinking about all the domains I have bought over the years that maybe weren't as great! &lt;/p&gt;

&lt;p&gt;Then I realised I can't be the only one with random domains (or really good domains that you are surprised weren't taken) sat idle and needing a purpose!&lt;/p&gt;

&lt;p&gt;So that leads me to the question:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-of-you-have-random-domains-with-no-purpose"&gt;
  &lt;/a&gt;
  How many of you have random domains with no purpose?
&lt;/h2&gt;

&lt;p&gt;As I said I have several domains that are good (and some not so good ones!), but have no purpose at the moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And I certainly can't be the only one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So put your unused domain name into the comments below and I will come up with a fun project and possibly a serious project as well that you could build around that domain name!&lt;/p&gt;

&lt;p&gt;I want to see who has a) the best domain name (can you beat a2z.dev?) and b) the silliest domain name.&lt;/p&gt;

&lt;p&gt;Hopefully a bit of fun coming up with ideas for how to use a domain name will turn into a silly side project, that then turns into something beautiful and massive, and we can all say that it started here and we helped make it happen! üòÅ&lt;/p&gt;






&lt;center&gt;&lt;strong&gt;Add your domain name(s) below that you want a project for and I (and hopefully others) will come up with a killer idea!&lt;/strong&gt;&lt;/center&gt; 




</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>startup</category>
    </item>
    <item>
      <title>Variable Hoisiting in javascript</title>
      <author>Babi-B</author>
      <pubDate>Mon, 01 Nov 2021 18:17:48 +0000</pubDate>
      <link>https://dev.to/babib/variable-hoisiting-in-javascript-m8</link>
      <guid>https://dev.to/babib/variable-hoisiting-in-javascript-m8</guid>
      <description>&lt;p&gt;Hey! So today I was reviewing some of the basic syntax of javascript and I came across javascript hoisting. It completely surprised. I have used javascript before (mostly ES6 for variable declaration) but never came across hoisting (ü§î maybe I did but don't remember).&lt;/p&gt;

&lt;p&gt;For anyone wondering hoisting in js is a default behavior where all variable declarations(those declared using the &lt;em&gt;var&lt;/em&gt; keyword) are moved to the top of the scope before code execution&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIWU-VlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu0bnw7onsmefcijndja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIWU-VlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu0bnw7onsmefcijndja.png" alt="variable hoisting illustration" width="317" height="147"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the advantage of this is that you can use a variable even before declaring it and you can declare it where ever you wish(within its given scope).&lt;/p&gt;

&lt;p&gt;However with ES6 (&lt;em&gt;let&lt;/em&gt; and &lt;em&gt;const&lt;/em&gt;) this is prevented that is a variable must be declared before used.&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>todayisearched</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is React #day31</title>
      <author>Al Siam</author>
      <pubDate>Mon, 01 Nov 2021 18:04:07 +0000</pubDate>
      <link>https://dev.to/alsiamworld/what-is-react-day31-40ch</link>
      <guid>https://dev.to/alsiamworld/what-is-react-day31-40ch</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day31"&gt;
  &lt;/a&gt;
  100daysofcode #day31
&lt;/h1&gt;

&lt;p&gt;What Is React?&lt;br&gt;
=&amp;gt; React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called ‚Äúcomponents‚Äù.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devcommunity"&gt;
  &lt;/a&gt;
  DEVcommunity
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#programming-react-javascript"&gt;
  &lt;/a&gt;
  programming #react #javascript
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhlLTYdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq8dpkqzegguw0lt15va.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhlLTYdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq8dpkqzegguw0lt15va.png" alt="Image description" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How a single JSON file could become your entire code base</title>
      <author>F√°bio M Jr</author>
      <pubDate>Mon, 01 Nov 2021 18:03:56 +0000</pubDate>
      <link>https://dev.to/zelcion/how-a-single-json-file-could-become-your-entire-code-base-356j</link>
      <guid>https://dev.to/zelcion/how-a-single-json-file-could-become-your-entire-code-base-356j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Well, it is no news for us that developing software is expensive, and takes A LOT of time and effort, after all, we're talking about code, &lt;strong&gt;good code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is that kind of code which solves a problem, and it does so while being elegant and readable... But doing that is hard, and here is where we touch the surface of a difficult problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good code is really expensive, and inaccessible for most people and companies.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not only bad/faulty code often fails to solve the problem it should, it also becomes the own problem. I bet you once had to understand the incredibly messy class system of a legacy code base, just because you were tasked to fix a "simple" bug.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-theory"&gt;
  &lt;/a&gt;
  My theory
&lt;/h3&gt;

&lt;p&gt;I have a fun personal theory, that all ever created about code can be somewhat traced back to the code accessibility problem, with the sole purpose of making it bit by bit a little easier.&lt;/p&gt;

&lt;p&gt;People started using C so they do not need to move bytes manually so often. On the web, the rise of JQuery led to more and more complex and capable websites, which was a thing only to dream about. Then came Java, C#, ReactJS, tools like Docker, and uncountable others goodies to make our life better.&lt;/p&gt;

&lt;p&gt;However, &lt;strong&gt;the "writing good code" problem still persists&lt;/strong&gt;, though adapted to the current scenarios.&lt;/p&gt;

&lt;p&gt;Honestly, I don't think this problem has a definitive solution. As our society and technology gets more capable and complex, so does our problems; but I do think we can do better to make software more accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-code-accessible-and-cheaper"&gt;
  &lt;/a&gt;
  Making code Accessible and Cheaper
&lt;/h2&gt;

&lt;p&gt;Now, what if such "good code" could be written only once, and all of us could freely use that code for our own purposes? What if we can chain multiple good codes together, while not needing to write boilerplate code for that?&lt;/p&gt;

&lt;p&gt;Perhaps, even better, &lt;strong&gt;we could be writing only the absolutely necessary code for our use case&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's where that JSON comes in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-as-data"&gt;
  &lt;/a&gt;
  Code as Data
&lt;/h3&gt;

&lt;p&gt;Before we begin, for "code as data" to exist, tho following must be true:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If It is possible to represent any code as a piece of information, it is possible to organize it to compose features and functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Luckily for us, data can represent anything.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't believe me? Try giving this a read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"variables"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"highestAllowedNumber"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"procedureName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"if"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"boolean"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"procedureName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"higherThan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"functionInput1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"targetValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"highestAllowedNumber"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"then"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"procedureName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stdOut"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"too high!"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"else"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"procedureName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stdOut"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"you're fine."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the user input is higher than 3, we will get a message: "Too high!"&lt;/p&gt;

&lt;p&gt;Now, perhaps you're asking yourself, what is the difference from this to regular code?&lt;/p&gt;

&lt;p&gt;At first glance not too much, however, &lt;strong&gt;in practice they are fundamentally different&lt;/strong&gt;. You cannot execute this data, but you can parse it into code (good code too!), then execute it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-as-code"&gt;
  &lt;/a&gt;
  Data as Code
&lt;/h3&gt;

&lt;p&gt;If we think about it, a good part of programming is converting information of a business process into a language the computer can more readily work with.&lt;/p&gt;

&lt;p&gt;Try making this simple exercise. Get that data from the last section and write it in JavaScript, then C#, then C++.&lt;/p&gt;

&lt;p&gt;After completing it, I think you can somewhat visualize that we can tell a computer make this conversion for us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-and-you-making-code-accessible"&gt;
  &lt;/a&gt;
  Data and You Making Code Accessible
&lt;/h3&gt;

&lt;p&gt;Oversimplifying for the sake of comprehension, let's say you've written the best, unrivaled, &lt;code&gt;if statement&lt;/code&gt; there is, and it could be represented by the same data structure we saw above.&lt;/p&gt;

&lt;p&gt;If we manage to get data which correctly represents our intentions, it can become the best code we have, while not even thinking about its implementation at all. For best results, make it &lt;strong&gt;open source&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-a-single-json-file-could-become-your-entire-code-base"&gt;
  &lt;/a&gt;
  How a single JSON file could become your entire code base
&lt;/h2&gt;

&lt;p&gt;Right now, I bet the title is not that far from reality, comparing what it initially seemed to be for you. Well, actually, such thing already exists, and here's a &lt;a href="https://github.com/mapikit/pet-store"&gt;WIP example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was made possible by using &lt;a href="https://mapikit.github.io/meta-system-docs/"&gt;Meta-System&lt;/a&gt;, an open source software in which I had the pleasure of working on. It makes software accessible, while also providing you a way to contribute to such accessibility.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://github.com/mapikit/meta-system"&gt;Repository&lt;/a&gt;, and join the &lt;a href="https://discord.gg/ndGsnbTW7V"&gt;discord&lt;/a&gt;, where we talk about making the world of software more welcoming and less challenging.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>productivity</category>
      <category>opensource</category>
    </item>
    <item>
      <title>React state management: Context API vs Recoil üéØ</title>
      <author>Tuomo Kankaanp√§√§</author>
      <pubDate>Mon, 01 Nov 2021 17:49:08 +0000</pubDate>
      <link>https://dev.to/tumee/react-state-management-context-api-vs-recoil-30mb</link>
      <guid>https://dev.to/tumee/react-state-management-context-api-vs-recoil-30mb</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;my newsletter&lt;/a&gt; last week. I publish previous week's newsletter here on the blog. If you want to read these as soon as they are published, &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;sign up&lt;/a&gt; for the newsletter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ahoy,&lt;/p&gt;

&lt;p&gt;For the past week I have been diving more into React state management. Especially I have learned more about Recoil and the Context API. I also published a new video on the Youtube channel listing some of my favourite Github repos for developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-context-api-vs-recoil"&gt;
  &lt;/a&gt;
  React Context API vs Recoil
&lt;/h2&gt;

&lt;p&gt;I found myself needing some sort of state management for a small React application. I have previously worked with Redux, but in this case I felt like it would just be overkill to use Redux and I would be better off with something a bit lighter.&lt;/p&gt;

&lt;p&gt;So even though there is bunch of different state management options available when it comes to React applications, I decided to test the &lt;a href="https://reactjs.org/docs/context.html"&gt;Context API&lt;/a&gt; and &lt;a href="https://github.com/facebookexperimental/Recoil"&gt;Recoil&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was able to create a working "Redux-like" solution using the Context API based on &lt;a href="https://kentcdodds.com/blog/how-to-use-react-context-effectively"&gt;this&lt;/a&gt; blog post by Kent C Dodds. It worked well but it still had some boilerplate code that could probably be avoided. So it was Recoil's turn.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5E8L5y8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7s59m01p2dj2i6lf2t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5E8L5y8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7s59m01p2dj2i6lf2t1.png" alt="Recoil"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recoil turned out to be super handy and easy to understand. The learning curve was super shallow and I was able to get the hang of it pretty quickly.&lt;/p&gt;

&lt;p&gt;With Recoil it was easy to create a new piece of state and then just use it across the application. I'm not going to go any deeper right now on how Recoil works. Let me know if you would like to see Recoil demo or tutorial video and I shall do that.&lt;/p&gt;

&lt;p&gt;The downside with Recoil is that it is still "an experimental set of utilities for state management with React.". So using it in production might be a bit sketchy.&lt;/p&gt;

&lt;p&gt;I tried to find out if Recoil has some kind of roadmap or information on when they are planning on lifting the experimental status, but with no luck. So I guess time will tell when that is happening.&lt;/p&gt;

&lt;p&gt;At first I was a bit sceptical about Recoil, thinking that it might just be "another state management library" but I am happy to be proven wrong.&lt;/p&gt;

&lt;p&gt;Regardless of Recoil's experimental status, I am definitely going to keep using Recoil on smaller apps in the future. Given that it is developed by Facebook, it has over 14k stars on Github and bunch of contributors and users, chances are it is not going anywhere and it will keep getting better over time.&lt;/p&gt;

&lt;p&gt;I would love to hear your experiences on state management with React apps, what are you using and why? You can &lt;a href="https://www.twitter.com/tumee"&gt;tweet&lt;/a&gt; your answer to me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-github-repos-for-web-developers"&gt;
  &lt;/a&gt;
  Top Github repos for Web developers
&lt;/h2&gt;

&lt;p&gt;As usual, I published one video on the &lt;a href="https://www.youtube.com/tuomokankaanpaa"&gt;Youtube channel&lt;/a&gt; this week.&lt;/p&gt;

&lt;p&gt;There are bunch of different repos that I use and that have helped me over the time. So in this video I share 7 amazing repositories that will help you as a developer!&lt;/p&gt;

&lt;p&gt;You can watch the video below. If you are not yet subscribed to the Youtube channel you can do it from &lt;a href="https://www.youtube.com/channel/UC34UXFLKqdW3cpk5CBu2Siw?sub_confirmation=1"&gt;this link&lt;/a&gt;. By subscribing you get notified on all the latest videos and it is a great way to show your support for me!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UAzWXI_tJyg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's it for this week!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Tuomo&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Environments in software development</title>
      <author>Mehammed Teshome</author>
      <pubDate>Mon, 01 Nov 2021 17:13:14 +0000</pubDate>
      <link>https://dev.to/checoslbches/environments-in-software-development-b3e</link>
      <guid>https://dev.to/checoslbches/environments-in-software-development-b3e</guid>
      <description>&lt;p&gt;in software development you will encounter different environments. these are the highlevel view of these different environments.&lt;/p&gt;

&lt;p&gt;Basically there are 3 software environments.these are &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Runtime Environment&lt;/li&gt;
&lt;li&gt;Build Environment&lt;/li&gt;
&lt;li&gt;Development Environment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so now we will see them in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-runtime-environment"&gt;
  &lt;/a&gt;
  1. Runtime environment
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;everything you need to execute a program, but no tool to change it. it act as small operating systems and provide¬†all the functionality**¬†necessary for a¬†program to run. This includes interfaces to physical parts of the hardware, user interactions, and software components.&lt;/li&gt;
&lt;li&gt;it is an environment which supports the execution of a program/process. for a program to execute , it requires runtime environment and it provide your program the services like ( resident memory(RAM), resources such as file, socket and others, environment variables, proper initialization  and proper disposal).&lt;/li&gt;
&lt;li&gt;it's an environment for the program , like the physical environment is for us.&lt;/li&gt;
&lt;li&gt;so programs/process cannot sustain without runtime environment.&lt;/li&gt;
&lt;li&gt;can be a virtual machines&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;in fact, almost all programming languages use one of three kinds of runtime environment, whose essential structure does not depend on the specific details of the target machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These three kind of runtime environmenta are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fully static environment( example¬†FORTRAN77)&lt;/li&gt;
&lt;li&gt;stack-based environment(C,C++)&lt;/li&gt;
&lt;li&gt;Fully dynamic environment(LISP)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#wellknown-examples-of-runtime-environments"&gt;
  &lt;/a&gt;
  Well-known examples of runtime environments
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;java runtime environment(JRE) for java,&lt;/li&gt;
&lt;li&gt;Common language runtime(CLI) for .NET framework,&lt;/li&gt;
&lt;li&gt;Browser and Nodejs for JavaScript.&lt;/li&gt;
&lt;li&gt;ActionScript Application(ASAP); offer building block for flash developers.&lt;/li&gt;
&lt;li&gt;crystal Space : include a 3D engine and used for game development.&lt;/li&gt;
&lt;li&gt;Cygwin : a runtime environment for Linux applications that allows them to run on other os(windows, mac and others..)&lt;/li&gt;
&lt;li&gt;.Net framework : for windows .NET applications&lt;/li&gt;
&lt;li&gt;WINE : RTE for windows application to run on other operating systems , such as linux and macOS.&lt;/li&gt;
&lt;li&gt;Deno : a runtime environment for js and typescript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-build-environement"&gt;
  &lt;/a&gt;
  2. Build environement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;everything you need to compile a code .&lt;/li&gt;
&lt;li&gt;it refers to how the application is assembled for deployment.&lt;/li&gt;
&lt;li&gt;deployment may be a library or an executable.&lt;/li&gt;
&lt;li&gt;tools are the compilers, scripting tools, code generators , host servers , build automation , test suits and other source repositories .&lt;/li&gt;
&lt;li&gt;datas are : scripts , libraries , configuration files , language definition's and metadata's.&lt;/li&gt;
&lt;li&gt;simalar to development environment but is more about consistent builds, deployement and testing and less about debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-development-environments"&gt;
  &lt;/a&gt;
  3. Development environments
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A development environment is¬†the collection of processes and tools that are used to develop the source code for a program or software product.&lt;/li&gt;
&lt;li&gt;helps the developers to develop the application or product using a set of processes and programming tools.&lt;/li&gt;
&lt;li&gt;everything you need to write a code , built it and test it.&lt;/li&gt;
&lt;li&gt;examples are code editors like VS code, Eclipse, Netbeans&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are various¬†software development environments¬†that a software has to pass through before it can be used.&lt;/p&gt;

&lt;p&gt;The three common software development environments are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developmentcoding-environment"&gt;
  &lt;/a&gt;
  Development(coding) environment
&lt;/h3&gt;

&lt;p&gt;In this environment, the developers code and build the application. The coding is done on a local machine, and the access is restricted to the developers themselves. Once the developer(s) are confident about a version, they release it to the beta environment for testing purposes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beta-testing-environment"&gt;
  &lt;/a&gt;
  Beta testing environment
&lt;/h3&gt;

&lt;p&gt;This environment is used to test the application. The software is granted access to a limited number of users who test it for some time. Developers can find out whether the code is working correctly as intended or not. Users also provide feedback regarding the application functionality, bugs, or any other features that can be added to the application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#production-environment"&gt;
  &lt;/a&gt;
  Production environment
&lt;/h3&gt;

&lt;p&gt;This is the final stage where the application is ready to be used publicly. Only the most thoroughly tested code and application version makes it to the production environment stage. The production environment can also act as a platform where the final code is stored until the application URL is made public.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>You (probably) don't need that useState + useEffect</title>
      <author>Don Juan Javier</author>
      <pubDate>Mon, 01 Nov 2021 17:06:17 +0000</pubDate>
      <link>https://dev.to/townofdon/you-probably-dont-need-that-usestate-useeffect-3ijh</link>
      <guid>https://dev.to/townofdon/you-probably-dont-need-that-usestate-useeffect-3ijh</guid>
      <description>&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hooks were a godsend for the React community. However, like any tool, these can easily be abused.&lt;/p&gt;

&lt;p&gt;Here's one an example of one misuse I've seen a lot in my tenure as a software dev:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyAwesomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// ---- PROBLEMATIC HOOKS: ----&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemsLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItemsLength&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;someAsyncApiCall&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// ---- UNNECESSARY USAGE OF HOOKS: ----&lt;/span&gt;
  &lt;span class="c1"&gt;// anytime data changes, update the items &amp;amp; the itemsLength&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItemsLength&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// ...JSX&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem with the above use case is that we are keeping track of some redundant state, specifically &lt;code&gt;items&lt;/code&gt; and &lt;code&gt;itemsLength&lt;/code&gt;. These pieces of data can instead be &lt;strong&gt;derived&lt;/strong&gt; functionally from &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-better-way"&gt;
  &lt;/a&gt;
  A Better Way:
&lt;/h2&gt;

&lt;p&gt;Any data that can be derived from other data can be abstracted and re-written using pure functions.&lt;/p&gt;

&lt;p&gt;This is actually pretty simple to pull off - here is one example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I always like to protect against bad/unexpected data&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getItemsLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, our component is simplified to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyAwesomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// DERIVED DATA - no need to keep track using state:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getItemsLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;someAsyncApiCall&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// ...JSX&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;The cool thing about this pattern is that &lt;code&gt;getItems&lt;/code&gt; and &lt;code&gt;getItemsLength&lt;/code&gt; are very easy to write unit tests for, as the output will always be the same for a given input.&lt;/p&gt;

&lt;p&gt;Perhaps the above example was a little contrived, but this is definitely a pattern I have seen in a lot of codebases over the years.&lt;/p&gt;

&lt;p&gt;As apps scale, it's important to reduce complexity wherever we can in order to ward off technical debt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr:
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hooks is often unavoidable, but if you can, abstract out any data that can be derived from other data using pure functions. The benefits can have huge payoffs down the road.&lt;/p&gt;

&lt;p&gt;Banner Photo by &lt;a href="https://unsplash.com/@lautaroandreani?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Lautaro Andreani&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/react?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Hawk Open Source Project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Mon, 01 Nov 2021 17:04:50 +0000</pubDate>
      <link>https://dev.to/medpaf/hawk-open-source-project-ao</link>
      <guid>https://dev.to/medpaf/hawk-open-source-project-ao</guid>
      <description>&lt;p&gt;Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;br&gt;
Currently, this script can perform a good variety of tasks such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ifconfig, &lt;/li&gt;
&lt;li&gt;ping, &lt;/li&gt;
&lt;li&gt;traceroute, &lt;/li&gt;
&lt;li&gt;port scans (including SYN, TCP, UDP, ACK, comprehensive scan), 
host discovery (scan for up devices on a local network), &lt;/li&gt;
&lt;li&gt;MAC address detection (get MAC address of a host IP on a local network), &lt;/li&gt;
&lt;li&gt;banner grabbing, &lt;/li&gt;
&lt;li&gt;DNS checks (with geolocation information), &lt;/li&gt;
&lt;li&gt;WHOIS, &lt;/li&gt;
&lt;li&gt;subdomain enumeration, &lt;/li&gt;
&lt;li&gt;vulnerability reconnaissance, - &lt;/li&gt;
&lt;li&gt;packet sniffing, &lt;/li&gt;
&lt;li&gt;MAC spoofing, &lt;/li&gt;
&lt;li&gt;IP spoofing, &lt;/li&gt;
&lt;li&gt;SYN flooding, &lt;/li&gt;
&lt;li&gt;deauth attack, &lt;/li&gt;
&lt;li&gt;brute-force attack (beta).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;br&gt;
If you want to become a contributor, make a pull request or issue.&lt;br&gt;
Waiting for your feedback. Kudos.&lt;/p&gt;

&lt;p&gt;Link to the repository:¬†&lt;br&gt;
&lt;a href="https://github.com/medpaf/hawk"&gt;https://github.com/medpaf/hawk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>showdev</category>
      <category>github</category>
      <category>security</category>
    </item>
    <item>
      <title>Keeping Kubernetes Clusters Clean and Tidy</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 01 Nov 2021 16:58:29 +0000</pubDate>
      <link>https://dev.to/martinheinz/keeping-kubernetes-clusters-clean-and-tidy-1i3c</link>
      <guid>https://dev.to/martinheinz/keeping-kubernetes-clusters-clean-and-tidy-1i3c</guid>
      <description>&lt;p&gt;As your cluster grows, so does the number of resources, volumes or other API objects and sooner or later you will reach the limits somewhere. Whether it's &lt;code&gt;etcd&lt;/code&gt;, volumes, memory or CPU. Why subject yourself to unnecessary pain and trouble when you can setup simple, yet sophisticated rules, automation and monitoring that can keep you cluster tidy and clean without rogue workloads eating your resources or stale objects lying around?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-bother"&gt;
  &lt;/a&gt;
  Why Bother?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Some forgotten Pods, unused persistent volume, &lt;code&gt;Completed&lt;/code&gt; Jobs or maybe old ConfigMap/Secret doesn't matter, or does it? It's just sitting there and I might need it at some point!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, it isn't causing any damage right now, but when things accumulate over time they start having impact on cluster performance and stability. So, let's look at some common/basic issues which these forgotten resources can cause:&lt;/p&gt;

&lt;p&gt;There are some basic limits that every Kubernetes cluster has. First of them is number of pods per node, which based on Kubernetes docs should be at most 110. That being said, if you have very big nodes with lots of memory/CPU, you surely can go higher - possibly even 500 per node as tested &lt;a href="https://www.openshift.com/blog/500_pods_per_node"&gt;here with OpenShift&lt;/a&gt;, but if you push the limits, don't be surprised when things start acting up and not just because of insufficient memory or CPU.&lt;/p&gt;

&lt;p&gt;Another issue you might encounter is insufficient ephemeral storage. With all the running pods on the nodes, all of them using at least a bit of ephemeral storage for things like logs, cache, scratch space or &lt;code&gt;emptyDir&lt;/code&gt; volumes. You can hit the limit pretty quickly which could lead to pods getting evicted or new pods not being able to start on the node. Running too many pods on the node can also contribute to this issue because ephemeral storage is used for container images, and writeable layers of containers. If the node start to run low on ephemeral storage, it will become tainted and you will probably find out about that pretty quickly. If you want to check what's the current state of storage on node you can run &lt;code&gt;df -h /var/lib&lt;/code&gt; on the node itself.&lt;/p&gt;

&lt;p&gt;Similarly to ephemeral storage also persistent volumes can become source of issues, especially if you're running Kubernetes in some cloud and therefore paying for each PVC you provision. So, it's obvious that it's important to cleanup all the unused PVCs to save money. Additionally, keeping the used PVC clean is also important as to avoid having your applications run out of space, especially if you're running databases in your cluster.&lt;/p&gt;

&lt;p&gt;Problems can arise also from too many objects lying around, as they're all stored in &lt;code&gt;etcd&lt;/code&gt; storage. As &lt;code&gt;etcd&lt;/code&gt; database grows, its performance can start to degrade and you should try really hard to avoid this considering that &lt;code&gt;etcd&lt;/code&gt; is a brain of Kubernetes cluster. With that said, you would need really big cluster to reach limits of &lt;code&gt;etcd&lt;/code&gt; as is shown in this &lt;a href="https://openai.com/blog/scaling-kubernetes-to-2500-nodes/"&gt;post by OpenAI&lt;/a&gt;. There's however no single metric you could look for to gauge performance of &lt;code&gt;etcd&lt;/code&gt; as it depends on number of objects, their size or how frequently they change, so you better keep it clean otherwise you might get some nasty surprises.&lt;/p&gt;

&lt;p&gt;Finally, having messy cluster can also lead to security problems. Leaving role bindings or service accounts lying around when they're not needed/used is kind of an invite for someone to grab them and abuse them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;p&gt;You don't need to do anything complicated to solve most of the above mentioned issues. And the best way to solve them is to prevent them altogether. One way to achieve that is using object quotas that you (as a cluster administrator) can enforce on individual namespaces.&lt;/p&gt;

&lt;p&gt;First issue that you can solve with quotas is number and size of PVCs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LimitRange&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pvc-limit&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PersistentVolumeClaim&lt;/span&gt;
    &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;10Gi&lt;/span&gt;
    &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1Gi&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ResourceQuota&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pvc-quota&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;persistentvolumeclaims&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;10"&lt;/span&gt;
    &lt;span class="na"&gt;requests.storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;10Gi"&lt;/span&gt;
    &lt;span class="c1"&gt;# the sum of storage requested in the bronze storage class cannot exceed 5Gi&lt;/span&gt;
    &lt;span class="na"&gt;bronze.storageclass.storage.k8s.io/requests.storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5Gi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we have two objects - first of them is &lt;em&gt;LimitRange&lt;/em&gt; that enforces minimum and maximum size of individual PVCs in a namespace. This can be helpful for stopping users from requesting huge volumes. The second object here (&lt;em&gt;ResourceQuota&lt;/em&gt;) additionally enforces hard limit for both number of PVCs as well as their cumulative size.&lt;/p&gt;

&lt;p&gt;Next, to stop people from creating bunch of objects and then leaving them around when not needed, you can use &lt;em&gt;object count&lt;/em&gt; quotas which create hard limits on number of instances of specific type of resource in given namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ResourceQuota&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object-count-quota&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;configmaps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2"&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;10"&lt;/span&gt;
    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5"&lt;/span&gt;
    &lt;span class="na"&gt;count/jobs.batch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;8"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are couple of builtin fields you can use to specify object count quotas, for example &lt;code&gt;configmaps&lt;/code&gt;, &lt;code&gt;secrets&lt;/code&gt; or &lt;code&gt;services&lt;/code&gt; shown above. For all other resources you can use &lt;code&gt;count/&amp;lt;resource&amp;gt;.&amp;lt;group&amp;gt;&lt;/code&gt; format as shown with &lt;code&gt;count/jobs.batch&lt;/code&gt; which can be useful in preventing misconfigured CronJob from spawning huge number of jobs.&lt;/p&gt;

&lt;p&gt;We all probably know that we can set memory and CPU quotas, but you might not know that you can also set quota for ephemeral storage. Quota support for local ephemeral storage was added as an alpha feature in v1.18 and allows you to set ephemeral storage limits the same way as for memory and CPU:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ResourceQuota&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ephemeral-storage-quota&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;requests.ephemeral-storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1Gi&lt;/span&gt;
    &lt;span class="na"&gt;limits.ephemeral-storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2Gi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be careful with these however, as pods can get evicted when they exceed the limit, which can be caused for example by size of container logs.&lt;/p&gt;

&lt;p&gt;Apart from setting quotas and limits to resources, one can also set revision history limit to deployments to reduce number of &lt;em&gt;ReplicaSets&lt;/em&gt; that are kept in the cluster. This is done using &lt;code&gt;.spec.revisionHistoryLimit&lt;/code&gt; which is by default 10.&lt;/p&gt;

&lt;p&gt;Finally, you can also set TTL (time to live) to cleanup objects that exist in the cluster for too long. This uses TTL controller which is in beta since v1.21 and currently only works for Jobs using the &lt;code&gt;.spec.ttlSecondsAfterFinished&lt;/code&gt; field, but might be extended to other resources (for example pods) in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manual-cleanup"&gt;
  &lt;/a&gt;
  Manual Cleanup
&lt;/h2&gt;

&lt;p&gt;If prevention isn't enough and you already have bunch of orphaned, unused or otherwise dead resources lying around, then you can do a one-time purge. This can be done with just &lt;code&gt;kubectl get&lt;/code&gt; and &lt;code&gt;kubectl delete&lt;/code&gt;. Some basic example of what you could do are these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl delete all &lt;span class="nt"&gt;-l&lt;/span&gt; some-label&lt;span class="o"&gt;=&lt;/span&gt;some-value  &lt;span class="c"&gt;# Delete based on label&lt;/span&gt;
kubectl delete pod &lt;span class="si"&gt;$(&lt;/span&gt;kubectl get pod &lt;span class="nt"&gt;-o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'{.items[?(@.status.phase=="Succeeded")].metadata.name}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# Delete all "Succeeded" Pods&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First command does basic delete using resource label, which obviously requires you to first label all the related resources with some &lt;code&gt;key=value&lt;/code&gt; pair. The second one shows how you can delete one type of resource based on some field (usually some status field) - in this case all the completed/succeeded pods. This one could be applied to other resources too for example completed Jobs.&lt;/p&gt;

&lt;p&gt;Beyond these 2 commands, it's quite difficult to find pattern based on which you would be able to delete things in bulk, so you would have to look for individual resources which are unused. There's however one tool that might help with this - it's called &lt;a href="https://github.com/yogeshkk/k8spurger"&gt;&lt;code&gt;k8spurger&lt;/code&gt;&lt;/a&gt;. This tool looks for unused &lt;em&gt;RoleBinding&lt;/em&gt;, &lt;em&gt;ServiceAccounts&lt;/em&gt;, &lt;em&gt;ConfigMaps&lt;/em&gt;, etc. and produces list of resources that are good candidates for removal, which can help narrow down your search. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubejanitor"&gt;
  &lt;/a&gt;
  Kube-janitor
&lt;/h2&gt;

&lt;p&gt;Previous sections explored some ways for simple, ad-hoc cleanup, but the ultimate solution for getting rid of any clutter is using &lt;a href="https://codeberg.org/hjacobs/kube-janitor"&gt;&lt;code&gt;kube-janitor&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;kube-janitor&lt;/code&gt; is a tool that runs in your cluster as any other workload and uses JSON queries to find resources which then can be deleted based on specified TTL or expiry date. &lt;/p&gt;

&lt;p&gt;To deploy this tool into your cluster you can run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://codeberg.org/hjacobs/kube-janitor.git
&lt;span class="nb"&gt;cd &lt;/span&gt;kube-janitor
kubectl apply &lt;span class="nt"&gt;-k&lt;/span&gt; deploy/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This deploys &lt;code&gt;kube-janitor&lt;/code&gt; to &lt;code&gt;default&lt;/code&gt; namespace and runs it with sample rules file and in &lt;em&gt;dry-run&lt;/em&gt; mode (using &lt;code&gt;--dry-run&lt;/code&gt; flag in &lt;code&gt;kube-janitor&lt;/code&gt; &lt;em&gt;Deployment&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;Before switching off the &lt;em&gt;dry-run&lt;/em&gt; mode, we should setup our own rules. Those live in &lt;code&gt;kube-janitor&lt;/code&gt; config map, which looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kube-janitor&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules.yaml&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|-&lt;/span&gt;
    &lt;span class="s"&gt;rules:&lt;/span&gt;
      &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're obviously interested in the &lt;code&gt;rules:&lt;/code&gt; section which we need to populate. So, here are some useful samples that you can just grab use for your cluster cleanup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Delete Jobs in development namespaces after after 2 days.&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;remove-old-jobs&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;jobs&lt;/span&gt;
    &lt;span class="na"&gt;jmespath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;metadata.namespace&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'development'"&lt;/span&gt;
    &lt;span class="na"&gt;ttl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2d&lt;/span&gt;
  &lt;span class="c1"&gt;# Delete pods in development namespaces that are not in Running state (Failed, Completed).&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;remove-non-running-pods&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pods&lt;/span&gt;
    &lt;span class="na"&gt;jmespath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;(status.phase&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'Completed'&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;||&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;status.phase&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'Failed')&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;metadata.namespace&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'development'"&lt;/span&gt;
    &lt;span class="na"&gt;ttl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2h&lt;/span&gt;
  &lt;span class="c1"&gt;# Delete all PVCs which are not mounted by a Pod&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;remove-unused-pvcs&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;persistentvolumeclaims&lt;/span&gt;
    &lt;span class="na"&gt;jmespath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;_context.pvc_is_not_mounted"&lt;/span&gt;
    &lt;span class="na"&gt;ttl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1d&lt;/span&gt;
  &lt;span class="c1"&gt;# Delete all Deployments with name starting with 'test-'&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;remove-test-deployments&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;deployments&lt;/span&gt;
    &lt;span class="na"&gt;jmespath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;starts_with(metadata.name,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'test-')"&lt;/span&gt;
    &lt;span class="na"&gt;ttl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1d&lt;/span&gt;
  &lt;span class="c1"&gt;# Delete all resources in playground namespace after 1 week&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;remove-test-deployments&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
    &lt;span class="na"&gt;jmespath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;metadata.namespace&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'playground'"&lt;/span&gt;
    &lt;span class="na"&gt;ttl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;7d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example shows some basic use-cases for cleanup of temporary, stale or unused resources. Apart from this kind of rules, you can also set absolute expiry dates/times for specific objects. That can be done using annotations, for example like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Namespace&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Gets deleted on 18.6.2021 at midnight&lt;/span&gt;
    &lt;span class="na"&gt;janitor/expires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2021-06-18"&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;temp&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Gets deleted on 20.6.2021 at 17:30&lt;/span&gt;
    &lt;span class="na"&gt;janitor/expires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2021-06-20T17:30:00Z"&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you're done setting up your rules and annotations, you probably should let the tool run for a while in the &lt;em&gt;dry-run&lt;/em&gt; mode and with debug logs turned on to see if correct object would get deleted and to avoid wiping something you don't want to (in other words - don't blame me if you wipe for example your production volumes because of your faulty config and lack of testing). &lt;/p&gt;

&lt;p&gt;Finally, one thing to consider when using &lt;code&gt;kube-janitor&lt;/code&gt; is that if you have a lot of objects in cluster, it might require more memory than its default &lt;code&gt;100Mi&lt;/code&gt;. So, to avoid having its pod getting stuck in &lt;em&gt;CrashLoopBackOff&lt;/em&gt;, I prefer to give it &lt;code&gt;1Gi&lt;/code&gt; as memory limit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monitoring-cluster-limits"&gt;
  &lt;/a&gt;
  Monitoring Cluster Limits
&lt;/h2&gt;

&lt;p&gt;Not everything can be solved with manual or even automatic cleanup and for some cases monitoring is the best way to make sure you're not hitting any limits in your cluster, whether it's number of pods, available ephemeral storage or for example &lt;code&gt;etcd&lt;/code&gt; object count.&lt;/p&gt;

&lt;p&gt;Monitoring is however a huge topic and warrants an article (or a couple) of its own, so for purposes of this article, I will just list a couple of metrics from &lt;em&gt;Prometheus&lt;/em&gt; which you might find useful when keeping your cluster nice and tidy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;etcd_db_total_size_in_bytes&lt;/code&gt; - Size of &lt;code&gt;etcd&lt;/code&gt; database&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;etcd_object_counts&lt;/code&gt; - &lt;code&gt;etcd&lt;/code&gt; object count&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pod:container_cpu_usage:sum&lt;/code&gt; - CPU usage for each pod in cluster&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pod:container_fs_usage_bytes:sum&lt;/code&gt; - Filesystem usage for each pod in cluster&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pod:container_memory_usage_bytes:sum&lt;/code&gt; - Memory usage for each pod in cluster&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;node_memory_MemFree_bytes&lt;/code&gt; - Free memory for each node&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;namespace:container_memory_usage_bytes:sum&lt;/code&gt; - Memory usage per namespace&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;namespace:container_cpu_usage:sum&lt;/code&gt; - CPU usage per namespace&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubelet_volume_stats_used_bytes&lt;/code&gt; - Used space for each volume&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubelet_running_pods&lt;/code&gt; - Number of running pods in node&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubelet_container_log_filesystem_used_bytes&lt;/code&gt; - Size of logs for each container/pod&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kube_node_status_capacity_pods&lt;/code&gt; - Recommended maximum of pods for each node&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kube_node_status_capacity&lt;/code&gt; - Maximums for all metrics (CPU, Pods, ephemeral storage, memory, hugepages)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just a few of the many metrics you could use. What metrics will be available also depends on your monitoring tooling, meaning that you might be able to get some extra custom metrics exposed by services you run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In this article we explored a lot of options for cleaning up a Kubernetes cluster - some very simple, some more sophisticated. Regardless of which solution(s) you might choose, try to stay on top of this &lt;em&gt;"cleanup duty"&lt;/em&gt; and clean things up as you go. It can save you a big headache and if nothing else, it will get rid of some unnecessary clutter in your cluster, which serves the same purpose as cleaning your desk. Also keep in mind that if you let thing lie around for a while, you will forget why they're there and whether they're needed or not, which makes it much more difficult to get things to clean state again.&lt;/p&gt;

&lt;p&gt;Beyond the approaches presented here, you might want to also use some &lt;em&gt;GitOps&lt;/em&gt; solution such as &lt;em&gt;ArgoCD&lt;/em&gt; or &lt;em&gt;Flux&lt;/em&gt; to create and manage resources, which can greatly reduce number of orphaned resources and it also makes the cleanup easier as it usually only requires you to delete single instance of a custom resource which will trigger cascading deletion of dependent resources.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Refresh Your webpage on window width change using Javascript</title>
      <author>keshavs759</author>
      <pubDate>Mon, 01 Nov 2021 16:58:05 +0000</pubDate>
      <link>https://dev.to/keshavs759/refresh-your-webpage-on-window-width-change-using-javascript-415b</link>
      <guid>https://dev.to/keshavs759/refresh-your-webpage-on-window-width-change-using-javascript-415b</guid>
      <description>&lt;p&gt;you can refresh your webpage when you change the width of your browser using following logic,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;refresh&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;prev_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reportWindowSize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;new_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev_width&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="nx"&gt;new_width&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onresize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reportWindowSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>This little known javascript physics library blew my mind!</title>
      <author>Martin J</author>
      <pubDate>Mon, 01 Nov 2021 16:48:37 +0000</pubDate>
      <link>https://dev.to/jerzakm/this-little-known-javascript-physics-library-blew-my-mind-57oo</link>
      <guid>https://dev.to/jerzakm/this-little-known-javascript-physics-library-blew-my-mind-57oo</guid>
      <description>&lt;p&gt;In my previous game dev attempts with javascript I always struggled with physics engine performance. I always defaulted to matter.js - it's good documentation and plentiful examples outweighed the performance gains of other available libraries. I was very excited when I first learned about WASM and near-native performance it provides, but for the longest time Box2D was the only viable choice in that area and I truely hated using it. It had poor documentation and felt very archaic to use.&lt;/p&gt;

&lt;p&gt;Now, it seems like my woes might be over. In comes a new contender - Rapier.rs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--31chDU_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/IxHiH6ZYRLuYapuZHFTT" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--31chDU_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/IxHiH6ZYRLuYapuZHFTT" alt="Rapier.rs logo" width="880" height="291"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://rapier.rs/"&gt;Rapier home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rapier.rs is a rust physics library compiled to WASM with javscript bindings and good documentation. I was able to set it up in around 30 minutes and it provided an massive, instant boost to app performance.&lt;/p&gt;

&lt;p&gt;Rapier remained more stable and allowed me to add thousands of more active physics bodies to the world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example from my last article with Rapier.rs instead of matter +300% performance &lt;a href="https://workerized-rapier-pixi.netlify.app/"&gt;LIVE&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jerzakm/gamedev-experiments/tree/main/rapier-pixi-worker"&gt;Github repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYl-4Bx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/6buI1RaOvW2KIklhMDAz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYl-4Bx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/6buI1RaOvW2KIklhMDAz" alt="nbrpJOCJQu.gif" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Active bodies&lt;/th&gt;
&lt;th&gt;Matter FPS&lt;/th&gt;
&lt;th&gt;Rapier FPS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4500&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6000&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7500&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;td&gt;0 - crashed&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;0 - crashed&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12000&lt;/td&gt;
&lt;td&gt;0 - crashed&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15000&lt;/td&gt;
&lt;td&gt;0 - crashed&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#why-you-need-to-consider-rapier-for-your-js-physics-needs"&gt;
  &lt;/a&gt;
  Why you need to consider Rapier for your js physics needs
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-performance"&gt;
  &lt;/a&gt;
  1. Performance
&lt;/h3&gt;

&lt;p&gt;Javascript can't compare to an optimized Rust library compiled to WASM&lt;br&gt;
&lt;a href="https://medium.com/@torch2424/webassembly-is-fast-a-real-world-benchmark-of-webassembly-vs-es6-d85a23f8e193"&gt;WASM is just this fast&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-documentation"&gt;
  &lt;/a&gt;
  2. Documentation
&lt;/h3&gt;

&lt;p&gt;Rapier page provides a good overview of the key features, information how to get started and an in-depth API documentation. All of this for Rust, Rust+bevy and Javascript.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-modern-developer-experience"&gt;
  &lt;/a&gt;
  3. Modern developer experience
&lt;/h3&gt;

&lt;p&gt;I found Rapier API very intuitive to work with, imho making it by far the best choice out of the few performant. It comes with &lt;strong&gt;typescript support&lt;/strong&gt;. Resulting code is readable and easy to reason with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@dimforge/rapier2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the RAPIER module here.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;gravity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gravity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Create the ground&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;groundColliderDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ColliderDesc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cuboid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groundColliderDesc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Create a dynamic rigid-body.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rigidBodyDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RigidBodyDesc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newDynamic&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setTranslation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;1.0&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rigidBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRigidBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rigidBodyDesc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Create a cuboid collider attached to the dynamic rigidBody.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colliderDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ColliderDesc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cuboid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;collider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colliderDesc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rigidBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Game loop. Replace by your own game loop system.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;gameLoop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Step the simulation forward.&lt;/span&gt;
    &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Get and print the rigid-body's position.&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rigidBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rigid-body position: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gameLoop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;gameLoop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-crossplatform-determinism-amp-snapshotting"&gt;
  &lt;/a&gt;
  4. Cross-platform determinism &amp;amp; snapshotting
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running the &lt;strong&gt;same simulation&lt;/strong&gt;, with the same initial conditions on different machines or distributions of Rapier (rust/bevy/js) &lt;strong&gt;will yield the same result.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy data saving and restoring.&lt;/strong&gt; - &lt;em&gt;It is possible to take a snapshot of the whole physics world with &lt;code&gt;world.takeSnapshot&lt;/code&gt;. This results in a byte array of type Uint8Array that may be saved on the disk, sent through the network, etc. The snapshot can then be restored with &lt;code&gt;let world = World.restoreSnapshot(snapshot);&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;I am excited to keep working with Rapier, but in the meanwhile I think a proper physics benchmark is in order. The ones I've found while doing research were a bit dated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-vite-usage-errors"&gt;
  &lt;/a&gt;
  Other: Vite usage errors
&lt;/h3&gt;

&lt;p&gt;I've ran into some issues adding Rapier to my Vite project, the solution can be found here: &lt;a href="https://github.com/dimforge/rapier.js/issues/49"&gt;https://github.com/dimforge/rapier.js/issues/49&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>rust</category>
      <category>webassembly</category>
    </item>
  </channel>
</rss>
