<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a wordcloud of news headlines in python!</title>
      <author>Code_Jedi</author>
      <pubDate>Tue, 03 Aug 2021 12:33:23 +0000</pubDate>
      <link>https://dev.to/code_jedi/create-a-wordcloud-of-news-headlines-in-python-5549</link>
      <guid>https://dev.to/code_jedi/create-a-wordcloud-of-news-headlines-in-python-5549</guid>
      <description>&lt;h3&gt;
  &lt;a href="#today-ill-be-showing-you-a-simple-way-to-make-a-wordcloud-of-news-headlines-in-python"&gt;
  &lt;/a&gt;
  Today, I'll be showing you a simple way to make a wordcloud of news headlines in python!
&lt;/h3&gt;




&lt;p&gt;If you haven't read &lt;a href="https://dev.to/code_jedi/scrape-news-headlines-with-python-1go6"&gt;this tutorial&lt;/a&gt; explaining how to scrape news headlines in python, make sure you do.&lt;br&gt;
In summary, here's the code for scraping news headlines in python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
for x in headlines:
    print(x.text.strip())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a wordcloud out of these news headlines, first import these 2 libraries beside the libraries needed to scrape our news source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup
from wordcloud import WordCloud #add wordcloud
import matplotlib.pyplot as plt #add pyplot from matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, replace&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for x in headlines:
    print(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h3text = ''
for x in el:
    h3text = h3text + ' ' + x.text.strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;em&gt;This will first define the "h3text" string, then add every news headline to the string and seperate them with spaces.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Before we make the wordcloud, you can check the news headlines by using &lt;code&gt;print(h3text)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#to-make-the-wordcloud-add-these-lines-of-code-to-the-end-of-your-script"&gt;
  &lt;/a&gt;
  To make the wordcloud, add these lines of code to the end of your script:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wordcloud = WordCloud(width=500, height=500, margin=0).generate(soup.get_text(h3text))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.margins(x=0, y=0)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let me explain...&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;First create a wordcloud(well, more like a box in this case) sized 500 by 500.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Next, our wordcloud will be created using "plt.imshow()" (&lt;code&gt;interpolation='bilinear'&lt;/code&gt; just makes the words in the wordcloud easier to read).&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;plt.axis("off")&lt;/code&gt; and &lt;code&gt;plt.margins(x=0, y=0)&lt;/code&gt; make sure our wordcloud isn't displayed as a graph.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;_Finally, our wordcloud is displayed using "plt.show()".&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#if-you-run-your-code-your-wordcloud-should-look-something-like-this"&gt;
  &lt;/a&gt;
  If you run your code, your wordcloud should look something like this:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6x50tCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrw1zwfc14j7mkin3u12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6x50tCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrw1zwfc14j7mkin3u12.png" alt="wordcloud"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Of course, your wordcloud will probably be quite different since news headlines change all the time.&lt;/em&gt; &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it-for-this-tutorialminiproject"&gt;
  &lt;/a&gt;
  That's it for this Tutorial/Mini-project!
&lt;/h3&gt;







&lt;p&gt;If you're a beginner who likes discovering new things about python, try &lt;a href="https://rebrand.ly/Python_Explore"&gt;my weekly python newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" alt="Newsletter thumbnail"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Byeeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>Monitor your Spring Boot application with OpenTelemetry and SigNoz</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 03 Aug 2021 12:31:32 +0000</pubDate>
      <link>https://dev.to/signoz/monitor-your-spring-boot-application-with-opentelemetry-and-signoz-1n4b</link>
      <guid>https://dev.to/signoz/monitor-your-spring-boot-application-with-opentelemetry-and-signoz-1n4b</guid>
      <description>&lt;p&gt;OpenTelemetry is a vendor-agnostic instrumentation library. In this article, let's explore how you can auto-instrument your Java Spring Boot application with OpenTelemetry and get the data reported through SigNoz - an open-source APM and observability tool.&lt;/p&gt;

&lt;p&gt;Steps to get started with OpenTelemetry for Spring Boot application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing SigNoz&lt;/li&gt;
&lt;li&gt;Installing sample Spring Boot app&lt;/li&gt;
&lt;li&gt;Auto instrumentation with OpenTelemetry and sending data to SigNoz&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-signoz"&gt;
  &lt;/a&gt;
  Installing SigNoz
&lt;/h2&gt;

&lt;p&gt;You can get started with SigNoz using just three commands at your terminal if you have Docker installed. You can read about other deployment options from SigNoz &lt;a href="https://signoz.io/docs/deployment/requirement/"&gt;documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You will have an option to choose between ClickHouse or Kafka + Druid as a storage option. Trying out SigNoz with ClickHouse database takes less than 1.5GB of memory, and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;When you are done installing SigNoz, you can access the UI at: &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the SigNoz installation package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3v5oXvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z89wdgdwogq8lg3bgyg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3v5oXvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z89wdgdwogq8lg3bgyg4.png" alt="SigNoz dashboard showing application list"&gt;&lt;/a&gt;SigNoz dashboard&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-sample-spring-boot-app"&gt;
  &lt;/a&gt;
  Installing sample Spring Boot app
&lt;/h2&gt;

&lt;p&gt;
For this tutorial, we will use a sample Spring Boot application built using Maven. You can find the code for the application at its &lt;a href="https://github.com/spring-projects/spring-petclinic" rel="noopener noreferrer nofollow"&gt;GitHub repo&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Steps to get the app set up and running:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git clone the repository and go to the root folder
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/spring-projects/spring-petclinic.git
cd spring-petclinic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Update Port&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This app runs on port &lt;code&gt;8080&lt;/code&gt; by default. But port &lt;code&gt;8080&lt;/code&gt; is used by SigNoz for its query service, so let's update the port number to something else.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;application.properties&lt;/code&gt; file located at &lt;code&gt;spring-petclinic/src/main/resources&lt;/code&gt; and update the server.port attribute.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# database init, supports mysql too
database=h2
spring.datasource.schema=classpath*:db/${database}/schema.sql
spring.datasource.data=classpath*:db/${database}/data.sql

# Web
spring.thymeleaf.mode=HTML
server.port=8090

# JPA
spring.jpa.hibernate.ddl-auto=none
spring.jpa.open-in-view=false

# Internationalization
spring.messages.basename=messages/messages

# Actuator
management.endpoints.web.exposure.include=*

# Logging
logging.level.org.springframework=INFO
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.context.annotation=TRACE

# Maximum time static resources should be cached
spring.resources.cache.cachecontrol.max-age=12h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Also, update the port number in petclinic_test_plan.jmx located at &lt;code&gt;spring-petclinic/src/test/jmeter&lt;/code&gt; to &lt;code&gt;port number: 8090&lt;/code&gt;. It will appear under &lt;code&gt;PETCLINIC_PORT&lt;/code&gt; elementProp.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the applicationRun the application using the following commands.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./mvnw package
java -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can now access the application UI here: &lt;a href="http://localhost:8090/"&gt;http://localhost:8090/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZkknk4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e530ie5iv14rthnfaevs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZkknk4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e530ie5iv14rthnfaevs.png" alt="Spring PetClinic app accessed at port:8090"&gt;&lt;/a&gt;Sample Spring Boot application running in your local host&lt;/p&gt;

&lt;p&gt;Once you ensure that your application runs fine, stop it with &lt;code&gt;ctrl + z&lt;/code&gt; on mac, as we will be launching the application with the Java agent downloaded from OpenTelemetry.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#auto-instrumentation-with-opentelemetry-and-sending-data-to-signoz"&gt;
  &lt;/a&gt;
  Auto instrumentation with OpenTelemetry and sending data to SigNoz
&lt;/h2&gt;

&lt;p&gt;
For instrumenting Java applications, OpenTelemetry has a very handy Java JAR agent that can be attached to any Java 8+ application. The JAR agent can detect a number of &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md" rel="noopener noreferrer nofollow"&gt; popular libraries and frameworks&lt;/a&gt; and instrument it right out of the box. You don't need to add any code for that. 
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the latest &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent-all.jar"&gt;Java JAR agent&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Now you need to enable the instrumentation agent as well as run your sample application. You can do so by the following command:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_METRICS_EXPORTER=none OTEL_EXPORTER_OTLP_ENDPOINT="http://&amp;lt;IP of SigNoz&amp;gt;:4317" OTEL_RESOURCE_ATTRIBUTES=service.name=javaApp java -javaagent:/path/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you are running this on your local host, you need to replace &lt;code&gt;&amp;lt;IP of SigNoz&amp;gt;&lt;/code&gt; with &lt;code&gt;localhost&lt;/code&gt;. The path should be updated to where you have kept your downloaded Java JAR agent. Your final command will look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_METRICS_EXPORTER=none OTEL_EXPORTER_OTLP_ENDPOINT="http://localhost:4317" OTEL_RESOURCE_ATTRIBUTES=service.name=javaApp java -javaagent:/Users/Downloads/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note the path is updated for my local environment.&lt;/p&gt;

&lt;p&gt;Check out the Spring Pet Clinic app at: &lt;a href="http://localhost:8090/"&gt;http://localhost:8090/&lt;/a&gt; and play around with it to generate some load. It might take 1-2 minutes before it starts showing up in the SigNoz dashboard.&lt;/p&gt;

&lt;p&gt;Below you can find your &lt;code&gt;javaApp&lt;/code&gt; in the list of applications being monitored.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mX2aVjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7712na7xcfpbrhjoyf1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mX2aVjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7712na7xcfpbrhjoyf1w.png" alt=" raw `Javaapp` endraw  appears in the list of applications monitored through SigNoz"&gt;&lt;/a&gt;javaApp in the list of applications monitored&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#metrics-and-traces-of-the-spring-boot-application"&gt;
  &lt;/a&gt;
  Metrics and Traces of the Spring Boot application
&lt;/h2&gt;

&lt;p&gt;SigNoz makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.&lt;br&gt;
SigNoz comes with out of box RED metrics charts and visualization. RED metrics stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate of requests&lt;/li&gt;
&lt;li&gt;Error rate of requests&lt;/li&gt;
&lt;li&gt;Duration taken by requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQOFZu2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7qs0m54twxn2cjtdce8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQOFZu2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7qs0m54twxn2cjtdce8.png" alt="SigNoz dashboard showing application latency, requests per sec, error percentage and top endpoints"&gt;&lt;/a&gt;Measure things like application latency, requests per sec, error percentage and see your top endpoints&lt;/p&gt;

&lt;p&gt;You can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umMbgvRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sziehilbicti8gwcey0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umMbgvRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sziehilbicti8gwcey0.png" alt="List of traces shown on SigNoz dashboard"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can use flamegraphs to exactly identify the issue causing the latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ImtWUy-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhgim41bzj5m8im3qbaw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImtWUy-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhgim41bzj5m8im3qbaw.png" alt="Flamegraphs and gantt charts to visualize time taken by requests"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry makes it very convenient to instrument your Spring Boot application. You can then use an open-source APM tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; to analyze the performance of your app. As SigNoz offers a full-stack observability tool, you don't have to use multiple tools for your monitoring needs.&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥.   👉  Open source Application Performance Monitoring (APM) &amp;amp; Observability tool
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;
&lt;h3&gt;

  &lt;a href="https://signoz.io/docs" rel="nofollow"&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; •
  &lt;a href="https://github.com/SigNoz/signoz/blob/main/README.zh-cn.md"&gt;&lt;b&gt;ReadMe in Chinese&lt;/b&gt;&lt;/a&gt; •
  &lt;a href="https://bit.ly/signoz-slack" rel="nofollow"&gt;&lt;b&gt;Slack Community&lt;/b&gt;&lt;/a&gt; •
  &lt;a href="https://twitter.com/SigNozHq" rel="nofollow"&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;
&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;
&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/bc8a12f92d8313d86b619bd96c558b458b30f24cdb847b42e4db383aa83238a3/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f7369676e6f7a5f6865726f5f6769746875622e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/bc8a12f92d8313d86b619bd96c558b458b30f24cdb847b42e4db383aa83238a3/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f7369676e6f7a5f6865726f5f6769746875622e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d86b90eea3d56848776f64d2e8188152844713a3079c158954a3f4a49f2fb120/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f436f6e747269627574696e672e737667"&gt;&lt;img src="https://camo.githubusercontent.com/d86b90eea3d56848776f64d2e8188152844713a3079c158954a3f4a49f2fb120/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f436f6e747269627574696e672e737667" width="50px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Join our Slack community&lt;/h2&gt;
&lt;p&gt;Come say Hi to us on &lt;a href="https://join.slack.com/t/signoz-community/shared_invite/zt-lrjknbbp-J_mI13rlw8pGF4EWBnorJA" rel="nofollow"&gt;Slack&lt;/a&gt; 👋&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/61f3487967fd24ab9d66eddfc48ab2b822ef4f1c300ac8db16bf27f70f9f94af/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f46656174757265732e737667"&gt;&lt;img src="https://camo.githubusercontent.com/61f3487967fd24ab9d66eddfc48ab2b822ef4f1c300ac8db16bf27f70f9f94af/68747470733a2f2f7369676e6f7a2d7075626c69632e73332e75732d656173742d322e616d617a6f6e6177732e636f6d2f46656174757265732e737667" width="50px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you want to read more about SigNoz 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/monitoring-your-go-application-with-signoz/"&gt;Golang Application Performance Monitoring with SigNoz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/nodejs-opensource-application-monitoring/"&gt;Nodejs Application Performance Monitoring with SigNoz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>devops</category>
      <category>monitoring</category>
      <category>springboot</category>
    </item>
    <item>
      <title>Scrape news headlines with python!</title>
      <author>Code_Jedi</author>
      <pubDate>Tue, 03 Aug 2021 12:29:45 +0000</pubDate>
      <link>https://dev.to/code_jedi/scrape-news-headlines-with-python-1go6</link>
      <guid>https://dev.to/code_jedi/scrape-news-headlines-with-python-1go6</guid>
      <description>&lt;h4&gt;
  &lt;a href="#today-ill-show-you-a-way-to-scrape-news-headlines-in-python-in-under-10-lines-of-code"&gt;
  &lt;/a&gt;
  Today I'll show you a way to scrape news headlines in python in under 10 lines of code!
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started...
&lt;/h2&gt;

&lt;p&gt;First of all, make sure to import these libraries at the beginning of your python script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;For this tutorial, I'll be using &lt;a href="https://www.bbc.com/news"&gt;BBC news&lt;/a&gt; as my news source, use these 2 lines of code to get it's url:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Now we're ready to scrape using BeautifulSoup!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://www.bbc.com/news"&gt;BBC news&lt;/a&gt; and inspect a news headline by right clicking and pressing inspect.&lt;br&gt;
As you'll see, all news headlines are contained within an "h3" tag:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUT7VTmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk0yvi5qqo9cofx0ddwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUT7VTmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk0yvi5qqo9cofx0ddwg.png" alt="h3 tags"&gt;&lt;/a&gt; &lt;/p&gt;



&lt;p&gt;Now add these 4 lines of code to scrape and display all the h3 tags from BBC news:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
for x in headlines:
    print(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;em&gt;First, we define "soup" as the innerHTML of the BBC news webpage.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Next, we define "headlines" as an array of all h3 tags found within the webpage.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Finally, paddle through the "headlines" array and display all of it's contents one by one ridding each element of it's outerHTML using the "text.strip()" method.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Now if you run your script, your output should look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwz9y3Dt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41118qoy3tgz99q3hge5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwz9y3Dt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41118qoy3tgz99q3hge5.png" alt="h3 results"&gt;&lt;/a&gt;&lt;/p&gt;







&lt;p&gt;If you're a beginner who likes discovering new things about python, try &lt;a href="https://rebrand.ly/Python_Explore"&gt;my weekly python newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJC9uHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3tzwrb1iw2wesc8gdc5.png" alt="Newsletter thumbnail"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Byeeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>Introduction to React.js ⚛ and the required JavaScript!</title>
      <author>Bahyaya</author>
      <pubDate>Tue, 03 Aug 2021 12:28:23 +0000</pubDate>
      <link>https://dev.to/bahyaya/introduction-to-react-js-and-the-required-javascript-4ng4</link>
      <guid>https://dev.to/bahyaya/introduction-to-react-js-and-the-required-javascript-4ng4</guid>
      <description>&lt;p&gt;React is the most popular front-end JavaScript library in the field of web development. It is used by large, established companies and newly-minted startups alike (Netflix, Airbnb, Instagram, and the New York Times, to name a few). React brings many advantages to the table, making it a better choice than other frameworks like Angular.js.&lt;/p&gt;

&lt;p&gt;If you’re new to ReactJS or just refreshing yourself on the core concepts, this article will give you an introduction to all of React’s fundamentals. We’ll be covering the following topics in this article:&lt;/p&gt;
&lt;p&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/introduction-to-react-js-%e2%9a%9b-and-the-required-javascript/"&gt;Introduction to React.js ⚛ and the required JavaScript!&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>bbeginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a Resilient Design System</title>
      <author>MAYUKH MALLICK</author>
      <pubDate>Tue, 03 Aug 2021 12:12:03 +0000</pubDate>
      <link>https://dev.to/litmus-chaos/building-a-resilient-design-system-57gf</link>
      <guid>https://dev.to/litmus-chaos/building-a-resilient-design-system-57gf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-the-blog"&gt;
  &lt;/a&gt;
  About the blog
&lt;/h2&gt;

&lt;p&gt;This blog will talk about the journey of creating a design system which brought a uniformity in all our designs and helped in productivity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-design-system"&gt;
  &lt;/a&gt;
  What is a Design System
&lt;/h2&gt;

&lt;p&gt;Working in software development and design, we are often required to ship one-off solutions. In some cases we're working inside time limitations and here and there we simply haven't yet settled upon a way ahead. These one-off solutions are not always bad, but if they are not made on some strategy or foundation we may end up in technical and design debts.&lt;/p&gt;

&lt;p&gt;Design Systems have been characterized numerous ways: an assortment of visual resources, an example library, and a CSS Framework are the most widely recognized. However it’s defined as a collection of related yet independent components that can improve product-development efficiencies and help enable a great customer experience.&lt;/p&gt;

&lt;p&gt;Design has always been largely about systems, and how to create products in a scalable and repeatable way. A universal Design framework is fundamental for building better and quicker; better in creating a cohesive user experience and quicker on the grounds that it's anything but a typical language to work with. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-we-need-design-systems"&gt;
  &lt;/a&gt;
  Why we need Design Systems
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-faster-time-to-market"&gt;
  &lt;/a&gt;
  1. Faster time to market
&lt;/h3&gt;

&lt;p&gt;A Design System dispenses reinvent the wheel every time a designer or developer sits down to work on a frontend element.  Either the library of assets will have a component that can be promptly utilized or the available guidelines will take care of some of the brainstorming. Also, since debates are more averse to happen, organizations can deliver products a lot quicker than without a design system.&lt;/p&gt;

&lt;p&gt;Besides, the Design System evolves with time. So if some team comes across a problem  during advancement, they modify the design system accordingly. This prevents different teams from running into comparative issues later on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-enhanced-collaboration"&gt;
  &lt;/a&gt;
  2. Enhanced Collaboration
&lt;/h3&gt;

&lt;p&gt;In the absence of a regulated set of guidelines, designers and frontend developers often find it difficult to agree on multiple grounds. Designers, on occasion, would design something without contemplating the functionality and implementation perspectives and basically hand over the plans to designers. And afterward now and then, engineers may present a couple of changes in the plan to deal with functionality. With a design system, you get to leave all these issues behind. The Design System deals with aesthetics just as functionality and guarantees designers and engineers run after a shared objective.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-reduced-costs-and-fewer-errors"&gt;
  &lt;/a&gt;
  3. Reduced costs and fewer errors
&lt;/h3&gt;

&lt;p&gt;With a faster turnaround time and fewer elements to create from scratch we can save some valuable design and development hours which can be otherwise used for productive tasks. And since a design system is constantly used by multiple teams and individuals, it’s much easier to isolate errors at an early stage. And with every error isolation, the design system leaves lesser room for errors and streamlines frontend development.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To work through these challenges and keep our decision making process fast, I was teamed up with some front-end developers at ChaosNative who explained to me how react-theming works and all sorts of programming constraints. We cleared our calendars and for around three weeks looking through all the designs of each product we jotted down the common elements, the coloring schemes and then planned in creating the design system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-laying-foundation"&gt;
  &lt;/a&gt;
  1. Laying Foundation
&lt;/h3&gt;

&lt;p&gt;While looking through the designs of each product I became aware that in designs various things are common like buttons, input fields, only they look different due to their colors, or the icons used and many other things. So we needed to bring a common ground for all these things and created a color system, shadows and iconography.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzY_LEiG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3w9xvljs65u4s14bdtn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzY_LEiG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3w9xvljs65u4s14bdtn.png" alt="Laying-the-foundation image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-creating-the-components"&gt;
  &lt;/a&gt;
  2. Creating the components
&lt;/h3&gt;

&lt;p&gt;There can be many components and developers may be creating the same components with different coding styles. So after discussing with the front-end developers they suggested to use a common JS library package and we decided on &lt;a href="https://material.io/"&gt;Material Design&lt;/a&gt; , and after reading through its component style guide , it became easy to know which components we definitely needed to create and assign the properties and make variants.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ziUGg9TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4hmkf833sy1dczqwdbb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ziUGg9TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4hmkf833sy1dczqwdbb.png" alt="creating-components-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-compiling-the-library"&gt;
  &lt;/a&gt;
  3. Compiling the library
&lt;/h3&gt;

&lt;p&gt;While creating these components, we collected them in a master file called the &lt;strong&gt;Litmus Component Library&lt;/strong&gt;, which we referred to throughout the design process. After a week or two we began to see huge leaps in productivity by using the library when iterating on designs. It has also become a guidance for upcoming design of products.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We knew that this was a challenging project. It meant re-designing and rebuilding the majority of the views in our software. As with any project, there are things we wish we would have done differently. While this was a monumental task that ended up requiring efforts from many of our product teams, we found that creating our Design Language System was worth the investment and a huge leap forward. Since the design language and code are often shared, we can now build and release features on all native platforms at roughly the same time. Development is generally faster, since product engineers can focus more on writing the feature logic rather than the view code. Additionally, engineers and designers now share a common language. I believe that aided with these systems we were able to focus more on actual user experiences and concepts we want to create in the future.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;To view the design file with components and guidelines : &lt;br&gt;
&lt;a href="https://www.figma.com/@litmuschaos"&gt;LitmusChaos Community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you an &lt;a href="https://en.wikipedia.org/wiki/Site_reliability_engineering"&gt;SRE&lt;/a&gt; or a &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; enthusiast? Does &lt;a href="https://en.wikipedia.org/wiki/Chaos_engineering"&gt;Chaos Engineering&lt;/a&gt; excite you?&lt;/p&gt;

&lt;p&gt;Join Our Community On Slack For Detailed Discussion, Feedback &amp;amp; Regular Updates On Chaos Engineering For Kubernetes:&lt;br&gt;
&lt;a href="https://kubernetes.slack.com/messages/CNXNB0ZTN"&gt;https://kubernetes.slack.com/messages/CNXNB0ZTN&lt;/a&gt;&lt;br&gt;
(#litmus channel on the Kubernetes workspace)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OaDr_Fp6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acqqtgiqg4ltjrnj6i5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OaDr_Fp6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acqqtgiqg4ltjrnj6i5u.png" alt="LitmusGithubRepo"&gt;&lt;/a&gt;&lt;br&gt;
Check out the &lt;a href="https://github.com/litmuschaos/litmus"&gt;Litmus Chaos GitHub&lt;/a&gt; repo and do share your feedback: &lt;a href="https://github.com/litmuschaos/litmus"&gt;https://github.com/litmuschaos/litmus&lt;/a&gt;&lt;br&gt;
Submit a &lt;a href="https://github.com/litmuschaos/litmus/pulls"&gt;pull request&lt;/a&gt; if you identify any necessary changes.&lt;/p&gt;

&lt;p&gt;Don't forget to share these resources with someone who you think might benefit from them. Peace out. ✌🏼&lt;/p&gt;

</description>
      <category>litmuschaos</category>
      <category>design</category>
      <category>chaosengineering</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to Render HTML string in a React component ?</title>
      <author>jobpick.in</author>
      <pubDate>Tue, 03 Aug 2021 12:09:47 +0000</pubDate>
      <link>https://dev.to/jobpick/how-to-render-html-string-in-a-react-component-3kd2</link>
      <guid>https://dev.to/jobpick/how-to-render-html-string-in-a-react-component-3kd2</guid>
      <description>&lt;p&gt;In this tutorial we will see how to render HTML string in a React component. &lt;/p&gt;

&lt;p&gt;Most of the rich text editor for react uses html for the formatting. So the data in the text editor is saved as string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;p&amp;gt;some dummy &amp;lt;span&amp;gt;data&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We cannot directly render this string, html tags will also get treated as raw string.&lt;/p&gt;

&lt;p&gt;The easiest solution for this is to use &lt;strong&gt;dangerouslySetInnerHTML&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;p&amp;gt;some data &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;by using dangerouslySetInnerHTML, entire html in the string is preserved.&lt;br&gt;
Other alternative would be to use a &lt;a href="https://github.com/remarkablemark/html-react-parser"&gt;html-react-parser&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Like this post?&lt;br&gt;
Our Twitter : &lt;a href="https://twitter.com/job_pick"&gt;@job_pick&lt;/a&gt; &lt;br&gt;
Our website : &lt;a href="https://jobpick.in/"&gt;jobpick.in&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I set up AWS Kubernetes Jenkins pipeline? </title>
      <author>Rahul Wagh</author>
      <pubDate>Tue, 03 Aug 2021 11:33:01 +0000</pubDate>
      <link>https://dev.to/jhooq/how-i-set-up-aws-kubernetes-jenkins-pipeline-4j2l</link>
      <guid>https://dev.to/jhooq/how-i-set-up-aws-kubernetes-jenkins-pipeline-4j2l</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ENNBdmNn4r0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this lab session I will be setting up Kubernetes jenkins pipeline on AWS.&lt;/p&gt;

&lt;p&gt;This will be a long session but I will be setting up everything from the scratch.&lt;/p&gt;

&lt;p&gt;Here are steps which we will go through  - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Setting up AWS EC2 Machine - First we need to set up EC2 machine where we will be installing the Jenkins along with Gradle, kubectl, eksctl, docker. We can not use t2.micro instance because we will need more CPU and memory to run Jenkins and Gradle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect to EC2 machine - After starting the EC2 machine we will use the private key-pair file to connect to EC2 instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install JDK - As we need to install Jenkins so we need to have JDK(&lt;a href="https://adoptopenjdk.net/"&gt;https://adoptopenjdk.net/&lt;/a&gt;) pre-installed onto the EC2 machine. For this lab session I will be using adopt open JDK 11.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install and Setup Jenkins - In this step we are going to install Jenkins and also going to the setup admin user &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assign administrative privileges to Jenkins user - After installing and setting up the Jenkins on EC2 machine we need to assign root privileges so that we can execute Docker and Gradle commands inside the Jenkins pipeline&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Docker - The next step would be to install docker so that we can create a docker image and push the docker image to docker hub&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install and Configure AWS CLI - After installing the docker we need to install and configure AWS CLI so that we can use EKSCTL to set up and start the Kubernetes cluster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install kubectl - Also along with EKSCTL we need to install Kubectl so that we can view the deployments and services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install eksctl - Now we need to install eksctl so that we can set up and start the Kubernetes cluster without using AWS UI &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add docker hub and GITHUB credentials - As we need to clone the github repo and push the docker image to docker hub we need to store credentials of github and docker inside Jenkins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins script for stages - Once we are done all the above steps we are going to write the Jenkins pipeline scripts for all the stages&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>kubernetes</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 1, User defined functions</title>
      <author>Aatmaj</author>
      <pubDate>Tue, 03 Aug 2021 11:22:16 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-1-user-defined-functions-1kg7</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-1-user-defined-functions-1kg7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-all-to-the-first-part-of-the-intermediate-course-today-we-will-start-user-defined-functions"&gt;
  &lt;/a&gt;
  Welcome all to the first part of the intermediate course! Today we will start user defined functions.
&lt;/h2&gt;




&lt;p&gt;In this part, we will cover only function which do not return any value, or as per C syntax 'void' functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-user-defined-functions"&gt;
  &lt;/a&gt;
  What are user defined functions?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;User-defined functions are functions that you use to organize your code in the body.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's say that we want to execute a part of the code many times throughout the program. If we type the same lines of code over and over, what will happen? Not only we will waste time in typing, but the overall code structure will be almost unreadable! Moreover what will happen if you want anytime to change the way the function works! &lt;/p&gt;

&lt;p&gt;This is one of the many places where user defined functions come in handy. Once we tell the functions what to do, that is give them a piece of code to run, we are ready to go. We can then call them again and again with just a single line. Editing the function becomes simple and code looks compact and clean. They are an invaluable part of OOP in Python. User defined methods also allow us to use recursion, but more about that later. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-python-functions"&gt;
  &lt;/a&gt;
  Syntax of python functions
&lt;/h3&gt;

&lt;p&gt;In order to make functions, we first need to define them. this is done using the &lt;code&gt;def&lt;/code&gt; keyword. Then we need to declare input parameters to the function. Finally we put a semicolon at the end. After that, we put the code to be run in an indent. This is done as shown-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def fun(...,...,...):
    ...
    ...
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, a practical example might be more useful-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;9
12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above program, what we have done is we have declared a function named fun, and have given it three input parameters, namely a,b and c. Then in the function code, we have told to print the sum of a, b and c.&lt;/p&gt;

&lt;p&gt;One thing to be noted is that the &lt;strong&gt;function must be declared before it is used.&lt;/strong&gt; If we do not follow this rule, then the code will not run. For example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 1, in &amp;lt;module&amp;gt;
    fun(2,3,4)
NameError: name 'fun' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hence it is a good practice to declare all the functions before writing the main code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sample-question-1-write-a-function-to-check-if-two-numbers-are-greater-than-less-than-or-equal-to-and-print-the-values"&gt;
  &lt;/a&gt;
  Sample question 1- Write a function to check if two numbers are greater than, less than or equal to and print the values.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;3 &amp;lt; 5
-2 &amp;gt; -4
4 = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sample-question-2-write-function-to-print-the-product-of-all-the-elements-in-a-list"&gt;
  &lt;/a&gt;
  Sample question 2- Write function to print the product of all the elements in a list.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; 
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;24
-280
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercise-what-changes-will-you-make-to-the-function-to-print-the-product-if-we-were-to-put-tuples-instead-of-lists-answer"&gt;
  &lt;/a&gt;
  Exercise- What changes will you make to the Function to print the product if we were to put tuples instead of lists? &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/e0742533c3146fd2fc097935e67477e8ae9d1240/Intermediate/Day%201/Exercise%20solutions/Exercise%201.md"&gt;Answer&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>learningpython</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>Historical Test Report Portal — How Developers Accelerate the Testing Process</title>
      <author>TestingNews</author>
      <pubDate>Tue, 03 Aug 2021 10:33:38 +0000</pubDate>
      <link>https://dev.to/katalon/historical-test-report-portal-how-developers-accelerate-the-testing-process-4nm7</link>
      <guid>https://dev.to/katalon/historical-test-report-portal-how-developers-accelerate-the-testing-process-4nm7</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLnp79qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Boost-Your-Projects-Testing-Process-with-Historical-Test-Report-Portal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLnp79qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Boost-Your-Projects-Testing-Process-with-Historical-Test-Report-Portal.png" alt="Boost Your Project's Testing Process with Historical Test Report Portal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your testing team, from developers to testers, has put out a great amount of work to design test cases. As an error-free testing process simply does not exist, when it comes to executing them, this one fails, while the rest passes, or one of them is taking much longer compared to previous runs. How do you determine if your tests have slowed down or increased their probability of failing?&lt;/p&gt;

&lt;p&gt;This requires context–historical logs from past sessions to be more specific. Without trends of test performance over time, decisions made and corrective measures could be misleading, resulting in wasted efforts, time, and the overall ROI for your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-value-of-software-testing-historical-data"&gt;
  &lt;/a&gt;
  The Value of Software Testing Historical Data
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#testing-history-provides-the-insights-to-make-better-decisions"&gt;
  &lt;/a&gt;
  Testing history provides the insights to make better decisions
&lt;/h3&gt;

&lt;p&gt;It is, in fact, true numbers do not lie. Keeping a record of past test results will yield a more accurate judgment of test quality through visible trends of data accuracy &amp;amp; consistency. Subsequently, results collected throughout sessions would permit comparisons to older runs and provide a statistical basis for better product quality evaluation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-history-allows-better-monitoring-of-your-projects-health"&gt;
  &lt;/a&gt;
  Testing history allows better monitoring of your projects’ health
&lt;/h3&gt;

&lt;p&gt;How often does this test fail? How long did it take to run? Has this code been running as expected? With so many critical questions to determine the readiness of a release or product quality, not putting the proper efforts into organizing and keeping track of critical historical test data could leave teams puzzled and slows down the debugging process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-good-test-history-practice-provides-contexts-for-recurring-failure-and-test-flakiness"&gt;
  &lt;/a&gt;
  A good test history practice provides contexts for recurring failure and test flakiness
&lt;/h3&gt;

&lt;p&gt;The notorious struggle of identifying root causes of why a test inconsistently passes and fails so often and who is responsible for it has always been present in testing teams. Proper historical data logging methods could help teams to compare vital metrics from multiple sessions, builds, and runs to quickly figure out the appropriate measures to be taken.&lt;/p&gt;

&lt;p&gt;From the reasoning above, it could be generally accepted that a testing process without historical context is not a complete testing process. However, the different types of tests that would be needed to be executed throughout the &lt;a href="https://en.wikipedia.org/wiki/Systems_development_life_cycle"&gt;Software Testing Life Cycle&lt;/a&gt;, say unit tests or smoke tests, would result in a large amount of data to be processed and stored.&lt;/p&gt;

&lt;p&gt;When looking for an ideal solution for your project, it should be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Automatically collect and centralize results&lt;/strong&gt; and key metrics after all sessions, thus &lt;a href="https://www.katalon.com/resources-center/blog/automated-form-filling-no-coding/"&gt;&lt;strong&gt;eliminating manual efforts in inputting data&lt;/strong&gt;&lt;/a&gt; with traditional methods like Excel.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Empower collaboration&lt;/strong&gt; through a completely accessible portal, allowing full-on involvement across all team members and contributors, regardless of expertise or technical backgrounds.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Not require complicated setup and integration&lt;/strong&gt; to allow a seamless onboarding process for the whole team.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Comply with security guarantees&lt;/strong&gt; to keep users’ data confidential and not to publish test results elsewhere.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Give users total control&lt;/strong&gt; of accessibility and sharing permissions to provide effective collaboration and visibility cross-team.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#katalon-testops-build-quality-insights-into-the-cicd-pipeline"&gt;
  &lt;/a&gt;
  Katalon TestOps | Build Quality Insights into the CI/CD Pipeline.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pavX_AZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Katalon-TestOps-Orchestrate-Tests.-Connect-DevOps.-Act-on-Insights.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pavX_AZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Katalon-TestOps-Orchestrate-Tests.-Connect-DevOps.-Act-on-Insights.png" alt="Katalon TestOps - Orchestrate Tests. Connect DevOps. Act on Insights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having fully recognized the need for effective historical data management and generating insightful reports for better quality assessment, &lt;a href="https://www.katalon.com/testops/"&gt;&lt;strong&gt;Katalon TestOps&lt;/strong&gt;&lt;/a&gt; has been introduced to help software testing teams to achieve &lt;em&gt;Quality at Speed&lt;/em&gt; and maximize effective team collaboration.&lt;/p&gt;

&lt;p&gt;Katalon TestOps is an advanced web-based test analytics hub with powerful &lt;a href="https://dev.to/katalon/container-orchestration-definition-benefits-how-it-works-3i91"&gt;test orchestration&lt;/a&gt; capabilities. Drawing data from common testing tools like Katalon Studio or &lt;a href="https://en.wikipedia.org/wiki/Open_source"&gt;open-source&lt;/a&gt; frameworks like Jasmine, Jest, Mocha, JUnit, and TestNG. Katalon TestOps enables teams to monitor and track testing progress at all stages with advanced real-time data visualizations and historical data storage for trends analysis. Not limited to just reporting, the tool also supports test planning, scheduling, management, and triggering remotely on machines like Kubernetes, and CircleCI.&lt;/p&gt;

&lt;p&gt;The key features of Katalon TestOps include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An accessible and collaborative testing report platform for full visibility across teams&lt;/li&gt;
&lt;li&gt;Centralize all actions, project requirements for time-effective test management&lt;/li&gt;
&lt;li&gt;Effective data reflection based on historical data storage abilities to reduce test latency&lt;/li&gt;
&lt;li&gt;Providing statistical support to your release-readiness assessment&lt;/li&gt;
&lt;li&gt;Integrate with open-source testing frameworks (e.g. Pytest, JUnit, Jest, Mocha, Jasmine)&lt;/li&gt;
&lt;li&gt;Smart scheduling feature to plan and execute tests remotely on different environments (e.g. Kubernetes &amp;amp; Circle CI, Jenkins, Bamboo, Azure DevOps)&lt;/li&gt;
&lt;li&gt;Better context for debugging and flaky tests handling with detailed reports of their occurrences over time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To easier picture how Katalon TestOps would fit into your testing process, a chart is provided below for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8rnPpDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/TO-workflow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8rnPpDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/TO-workflow.png" alt="TestOps workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-developers-can-accelerate-testing-process-with-katalon-testops"&gt;
  &lt;/a&gt;
  How Developers can Accelerate Testing Process with Katalon TestOps
&lt;/h2&gt;

&lt;p&gt;Requiring no more than 3 minutes to set up, TestOps’ integration with &lt;a href="https://docs.katalon.com/katalon-analytics/docs/project-management-import-cli.html"&gt;JUnit&lt;/a&gt;, &lt;a href="https://docs.katalon.com/katalon-analytics/docs/kt-upload-test-jest.html"&gt;Jest&lt;/a&gt;, &lt;a href="https://docs.katalon.com/katalon-analytics/docs/kt-upload-test-mocha.html"&gt;Mocha&lt;/a&gt;, &lt;a href="https://docs.katalon.com/katalon-analytics/docs/kt-upload-test-jasmine.html"&gt;Jasmine&lt;/a&gt;, &lt;a href="https://docs.katalon.com/katalon-analytics/docs/kt-upload-test-pytest.html"&gt;Pytest&lt;/a&gt; frameworks allows data to be reported right after each test session into detailed documentation for you. Metrics ranging from test coverage or flakiness would all be included through &lt;strong&gt;diverse chart types&lt;/strong&gt; to help your team visually inspect and analyze the outcomes.&lt;/p&gt;

&lt;p&gt;As shown in the images below, the yielded test report is pretty straightforward to show visible trends through time, regardless of the framework used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgDjYcyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Test-Run-History-e1620276240890.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgDjYcyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Test-Run-History-e1620276240890.png" alt="Test Run History"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test Run History&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Displaying a test run history, you can see the time and date, the test status, the average duration of each test run, and by whom it was executed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwGVwmgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Status-and-Performance-History-e1620276285254.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwGVwmgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Status-and-Performance-History-e1620276285254.png" alt="Status and Performance History"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Status and Performance History&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7VHdH_LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Run-Frequency-Report-e1620276301670.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VHdH_LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Run-Frequency-Report-e1620276301670.png" alt="Run Frequency Report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run Frequency Report&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You would also have the ability to choose different data representation options, such as vertical bar charts showing the status and performance of a session, or with a frequency report using colors to depict the frequency that a test passes or fails. Additionally, the sizes of the dot represent the number of test cases that have been run at a particular time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  What now?
&lt;/h2&gt;

&lt;p&gt;The need to achieve quality at speed has become more prominent than ever.&lt;/p&gt;

&lt;p&gt;While manually collecting and inputting data with traditional methods could still be considered an option, the resulting latency, false judgments, and wrong decisions could navigate your team down an endless search of an appropriate solution. It’s about time you and your team give this tool a go.&lt;/p&gt;

&lt;p&gt;Get the right insights, &lt;a href="https://www.katalon.com/resources-center/tutorials/data-driven-testing/"&gt;make data-driven decisions&lt;/a&gt; as a team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.katalon.com/testops/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4tRWW-TL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/05/Try-TestOps-for-Free-button-e1620274401350.png" alt="TestOps test orchestration platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://www.katalon.com/resources-center/blog/historical-data-unit-test/"&gt;Historical Test Report Portal — How Developers Accelerate the Testing Process&lt;/a&gt; appeared first on &lt;a href="https://www.katalon.com"&gt;Katalon Solution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>testing</category>
      <category>automation</category>
      <category>report</category>
    </item>
    <item>
      <title>Write better Python - with some help!</title>
      <author>Magda (she/her)</author>
      <pubDate>Tue, 03 Aug 2021 10:33:36 +0000</pubDate>
      <link>https://dev.to/magdapoppins/write-better-python-with-some-help-5g1l</link>
      <guid>https://dev.to/magdapoppins/write-better-python-with-some-help-5g1l</guid>
      <description>&lt;p&gt;When I started shifting more and more towards working with Python, I looked back at the world of JS and thought wow, they have so many nice tools for formatting and linting! I found myself in the wild world of Python programming where &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; sets the standards, but whether or not you follow them and how you write your code is pretty much up to you. This is my letter to myself back in time, to share some of the tips I now have in my toolbox for maintaining a nice and clean Python project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formatting"&gt;
  &lt;/a&gt;
  Formatting
&lt;/h2&gt;

&lt;p&gt;If you want to speed up your coding and rely on a computer to do the polishing for you, you can use a code formatter to automatically walk through and format your code. In the world of python, &lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt; is one of the most used formatters. It could be compared to &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; in the world of JS - they are both opinionated formatters, i.e. they make some choices for you. (You don't have to fight your colleague over whether to use single or double quotes anymore! Great!) &lt;/p&gt;

&lt;p&gt;This is how black responds to a file with &lt;code&gt;print("hello" )&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install black
$ black my-sample.py
reformatted my-sample.py
All done! ✨ 🍰 ✨
1 file reformatted.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#linting"&gt;
  &lt;/a&gt;
  Linting
&lt;/h2&gt;

&lt;p&gt;Linting differs from formatting in that it will not change the code it looks at, but will notify you if it doesn't follow the specified standards. A good option for linting in python is &lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt;. Here is how flake8 responds to the same file contents as black did above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install flake8
$ flake8 my-sample.py
my-sample.py:1:14: E202 whitespace before ')'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to this out of the box -linting, there are loads of &lt;a href="https://github.com/DmytroLitvinov/awesome-flake8-extensions"&gt;flake8 extensions&lt;/a&gt; that can help you with for example switching from &lt;code&gt;.format()&lt;/code&gt; to using f-strings or checking that your naming follows the PEP8 guidelines. For example, adding &lt;code&gt;flake8-length&lt;/code&gt; adds line length checking to the linting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install flake8-length
$ flake8 test.py
test.py:1:80: LN001 line is too long (169 &amp;gt; 79)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like to keep your imports in tact, there are also rules to enforce a specific order amongst them. One tool that does that is &lt;a href="https://pycqa.github.io/isort/"&gt;isort&lt;/a&gt;. Isort follows the order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;absolute imports&lt;/li&gt;
&lt;li&gt;built-in modules&lt;/li&gt;
&lt;li&gt;third-party libraries&lt;/li&gt;
&lt;li&gt;imports from the same project
You can also integrate isort into flake8 using the &lt;a href="https://github.com/gforcada/flake8-isort"&gt;flake8-isort&lt;/a&gt; plugin! &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#type-checking"&gt;
  &lt;/a&gt;
  Type checking
&lt;/h2&gt;

&lt;p&gt;Type annotation support was introduced in python 3.5 and there are tools for watching that the typing is in tact. A good option for checking your type annotations is using &lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt;. Given a sample file that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def return_hello(name: str) -&amp;gt; int:
    return f'Hello, {name}!'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can run mypy and see that our type hints indeed are off:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install mypy
$ mypy my-sample.py
my-sample.py:2: error: Incompatible return value type (got "str", expected "int")
Found 1 error in 1 file (checked 1 source file)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some other good alternatives for type checking are &lt;a href="https://github.com/microsoft/pyright"&gt;Pyright&lt;/a&gt; (which is seen in VSCode via Microsofts PyLance plugin) and &lt;a href="https://pyre-check.org/"&gt;Pyre&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wiring-it-up"&gt;
  &lt;/a&gt;
  Wiring it up
&lt;/h2&gt;

&lt;p&gt;You could choose to manually run these tools from time to time in your project, but you will have a better time if you make them part of your pull request routine. Using GitHub actions, you can set up for example a &lt;a href="https://github.com/marketplace/actions/flake8-action"&gt;flake8 action&lt;/a&gt;. You can alternatively build an action from scratch - here we run isort with the check-only option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check import order&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Python &lt;/span&gt;&lt;span class="m"&gt;3.9&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.9&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install isort&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;python -m pip install --upgrade pip&lt;/span&gt;
        &lt;span class="s"&gt;pip install isort&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check import order&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;isort . -c -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;I love rules, so seeing how systematically one can unify ones codebase using tools like these just makes my day. However I also know lots of devs who don't feel like this kind of rigour is their jam - it should always be discussed in the team how and why we want to set the codebase standards. &lt;/p&gt;

&lt;p&gt;Hope this text gave you all some ideas of what tools are out there and what you could pick into your own toolkit as well! If you know of a useful tool I didn't mention - please let me know in the comments! 😊&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>devops</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Fundamentals of REST API</title>
      <author>Cássio Cappellari</author>
      <pubDate>Tue, 03 Aug 2021 10:19:21 +0000</pubDate>
      <link>https://dev.to/cassiocappellari/fundamentals-of-rest-api-2nag</link>
      <guid>https://dev.to/cassiocappellari/fundamentals-of-rest-api-2nag</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  🔶 Introduction
&lt;/h2&gt;

&lt;p&gt;We live in a modern and ultra-connected world that shares a huge amount of data every second through browsers, servers, softwares and applications. For all these systems to communicate with each other, we have a tool that is the key player to integrate all this complexity: the APIs.&lt;/p&gt;

&lt;p&gt;In this article I share my knowledge, experience and studies about this technology, with the goal to provide a basic understanding of the main fundamentals of API, REST and HTTP Protocol.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-api-concept"&gt;
  &lt;/a&gt;
  🔶 1 API Concept
&lt;/h2&gt;

&lt;p&gt;API means &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface and, like any other interface, allows interactions. In the case of an API, &lt;strong&gt;it allows interactions between systems by following a set of standards and protocols in order to share features, information and data&lt;/strong&gt;. In other words, it provides developers the opportunity to build and design products and services that will communicate with other products and services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MFFDzpx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/166vtvjvmwbvgxmrz2ta.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MFFDzpx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/166vtvjvmwbvgxmrz2ta.jpg" alt="API Concept"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can have different architectural styles of APIs and, nowadays, the main one that is a key part of our Internet world it’s called REST, an acronym for &lt;strong&gt;RE&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rest-fundamentals"&gt;
  &lt;/a&gt;
  🔶 2 REST Fundamentals
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;REST is an architecture style to develop web services, which uses the HTTP protocol as a communication interface in order to transfer data through HTTP methods.&lt;/strong&gt; In other words, it allows performing basic data manipulation within an application with efficiency, such as creating, retrieving, updating and deleting information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUkfhFFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz480n8p0ydcq1vsahk3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUkfhFFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz480n8p0ydcq1vsahk3.jpg" alt="REST API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;REST was born and created in 2000 by Roy Fielding in his PhD dissertation and, according to him:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“The name “Representational State Transfer” is intended to evoke an image of how a well-designed Web application behaves: a network of web pages (a virtual state-machine), where the user progresses through the application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, as Roy Fielding defines, in order to build a well-designed web application, we can use REST principles that help us to develop services that are more scalable, reliable and flexible. To achieve this goal, &lt;strong&gt;the REST architecture has six constraints and an API that is driven by that can be called RESTful&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-clientserver"&gt;
  &lt;/a&gt;
  🔸 2.1 Client-Server
&lt;/h3&gt;

&lt;p&gt;The main principle of the Client-Server web architecture is the Separation of Concerns, which means that the &lt;strong&gt;Client that sends the request it’s completely independent from the Server that returns the response&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7P_3kZ0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbjyai40l64rfj2yowhp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7P_3kZ0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbjyai40l64rfj2yowhp.jpg" alt="Client-Server Constraint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-stateless"&gt;
  &lt;/a&gt;
  🔸 2.2 Stateless
&lt;/h3&gt;

&lt;p&gt;All the information (state) that is required in a request must be sended by the Client. Therefore, the Server must not store any data during a Client-Server communication, which means that &lt;strong&gt;every request is a standalone request&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-cache"&gt;
  &lt;/a&gt;
  🔸 2.3 Cache
&lt;/h3&gt;

&lt;p&gt;Cache is a computational storage structure focused on keeping stored data that is frequently accessed, improving performance and network efficiency. Therefore, &lt;strong&gt;through caching, it’s possible to reduce or even eliminate the need for the Client to send requests to the Server (who must inform if the request can be cacheable or not)&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-interface-uniform"&gt;
  &lt;/a&gt;
  🔸 2.4 Interface Uniform
&lt;/h3&gt;

&lt;p&gt;Means how Client and Server will share information by defining an interface that must be followed in every request. In other words, &lt;strong&gt;it’s a contract between the Client and the Server that determines the standards for their communication&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here, we have four additional constraints that is part of Uniform Interface:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#241-identification-of-resources"&gt;
  &lt;/a&gt;
  2.4.1 Identification of Resources
&lt;/h4&gt;

&lt;p&gt;REST is based on resources, and a resource is an information that can be named. &lt;strong&gt;It’s used in a request to identify what the Client wants to access in the Server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, to retrieve a list of &lt;code&gt;products&lt;/code&gt;, the resource must be setted in the URL: &lt;code&gt;http://api.example.com/products&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#242-manipulation-of-resources-through-representation"&gt;
  &lt;/a&gt;
  2.4.2 Manipulation of Resources Through Representation
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;The Client must be sure that the request to the Server has enough information to manipulate (create, retrieve, update, delete) the informed resource, which can be represented by multiple formats, such as JSON, XML, HTML etc&lt;/strong&gt;. In other words, the Client can specify the desired representation of a resource in every request to a Server.&lt;/p&gt;

&lt;p&gt;For example: a Client can specify in a request to retrieve a resource in JSON format.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#243-selfdescriptive-messages"&gt;
  &lt;/a&gt;
  2.4.3 Self-descriptive Messages
&lt;/h4&gt;

&lt;p&gt;A self-descriptive message &lt;strong&gt;ensures a uniform interface in the communication by containing all the information that a Client or a Server needs&lt;/strong&gt; to understand the request and the response just by checking the semantics of the message.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#244-hateoas-hypertext-as-the-engine-of-application-state"&gt;
  &lt;/a&gt;
  2.4.4 HATEOAS (Hypertext As The Engine Of Application State)
&lt;/h4&gt;

&lt;p&gt;HATEOAS means that a &lt;strong&gt;response sent from the Server should contain information about what the Client can do in further requests.&lt;/strong&gt; In other words, the Server indicates what actions the Client can do next. In REST standards, Servers must send only hypermedia (links) to Clients.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-layered-system"&gt;
  &lt;/a&gt;
  🔸 2.5 Layered system
&lt;/h3&gt;

&lt;p&gt;Layered system &lt;strong&gt;relates to the fact that there can be more components and subsystems between a Client and a Server.&lt;/strong&gt; In other words, the client can’t assume that it is communicating directly to the Server, and don’t know about the complexity to process the request and return the response.&lt;/p&gt;

&lt;p&gt;For example: a Client sends a request to a Server, but first it passes by a proxy layer for security check.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5pMbvNW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04xp96134kt5cncsmqum.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5pMbvNW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04xp96134kt5cncsmqum.jpg" alt="Layered System Constraint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-code-on-demand"&gt;
  &lt;/a&gt;
  🔸 2.6 Code On Demand
&lt;/h3&gt;

&lt;p&gt;Code On Demand is the only optional constraint, and &lt;strong&gt;means that a Server can send an executable code as a response to the Client&lt;/strong&gt;. In other words, it’s what happens when a browser, for example, receives a response from the Server with a HTML tag &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; so, when the HTML document is loaded, the script can be executed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-request-anatomy"&gt;
  &lt;/a&gt;
  🔶 3 Request Anatomy
&lt;/h2&gt;

&lt;p&gt;Basically, &lt;strong&gt;a Client request has 4 main elements that compose all the information that is needed to interact with the Server&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-url"&gt;
  &lt;/a&gt;
  🔸 3.1 URL
&lt;/h3&gt;

&lt;p&gt;URL means &lt;strong&gt;U&lt;/strong&gt;niform &lt;strong&gt;R&lt;/strong&gt;esource &lt;strong&gt;L&lt;/strong&gt;ocator, which &lt;strong&gt;is the address to not just identify a resource, but also to specify how to access it.&lt;/strong&gt; In an API, the URL can be named as Base URL, which means that is the base address that will be used in every request.&lt;/p&gt;

&lt;p&gt;For example: &lt;code&gt;http://api.example.com&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-uri"&gt;
  &lt;/a&gt;
  🔸 3.2 URI
&lt;/h3&gt;

&lt;p&gt;URI means &lt;strong&gt;U&lt;/strong&gt;niform &lt;strong&gt;R&lt;/strong&gt;esource &lt;strong&gt;I&lt;/strong&gt;dentifier, which is used in the URL to &lt;strong&gt;specify which resource the Client would like to access in a request&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example: &lt;code&gt;http://api.example.com/products&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;code&gt;http://api.example.com/&lt;/code&gt;&lt;br&gt;
URI: &lt;code&gt;/products&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Therefore, every URL is an URI, but not all URIs are URLs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#33-parameters"&gt;
  &lt;/a&gt;
  🔸 3.3 Parameters
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Parameters are information that can be sended in a request by the Client in order to influence the response by the Server&lt;/strong&gt;. REST has 4 types of parameters, and its use will depend on the type of action that the request demands.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#34-body-params"&gt;
  &lt;/a&gt;
  🔸 3.4 Body Params
&lt;/h3&gt;

&lt;p&gt;The Body, like the name says, it’s the &lt;strong&gt;body of the request which contains all the data that the Server needs to successfully process the request.&lt;/strong&gt; Therefore, it’s only used in requests that must send information, such as create or update.&lt;/p&gt;

&lt;p&gt;Example of a request body in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    “name”: “Laptop”,
    “price”: 1000
    “available”: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#35-route-params"&gt;
  &lt;/a&gt;
  🔸 3.5 Route Params
&lt;/h3&gt;

&lt;p&gt;Route params are &lt;strong&gt;parameters inserted in the URL with the information to identify a specific resource&lt;/strong&gt; in order to take an action, such as: retrieve, edit, update or delete.&lt;/p&gt;

&lt;p&gt;For example: &lt;code&gt;http://api.example.com/products/1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this given example, the route param with value 1 identifies the resource that will be manipulated in the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#36-query-params"&gt;
  &lt;/a&gt;
  🔸 3.6 Query Params
&lt;/h3&gt;

&lt;p&gt;Query params are also &lt;strong&gt;parameters inserted in the URL, but with the main difference that it’s use cases are related to filter and search information about a resource, or even paginate and ordinate the results&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://api.example.com/products?name=laptop&amp;amp;available=true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this given example, the Client communicates to the Server that the request is to retrieve products with name equals laptop, and available equals true.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#37-headers"&gt;
  &lt;/a&gt;
  🔸 3.7 Headers
&lt;/h3&gt;

&lt;p&gt;Headers &lt;strong&gt;allows sending extra information in a request&lt;/strong&gt;, such as authentication tokens and content types.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authorization: Bearer token
Accept: application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this given example, the Client is sending extra data informing not just it's credentials to access a resource, but also a desired response format.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-http-protocol"&gt;
  &lt;/a&gt;
  🔶 4 HTTP PROTOCOL
&lt;/h2&gt;

&lt;p&gt;Alright, now that we have a basic understanding of REST fundamentals and it’s constraints, let’s talk about &lt;strong&gt;the communication standard that rules the Internet world by defining  the interaction patterns between Clients and Servers&lt;/strong&gt;: the &lt;strong&gt;HTTP Protocol&lt;/strong&gt; (&lt;strong&gt;H&lt;/strong&gt;yperText &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol).&lt;/p&gt;

&lt;p&gt;The HTTP Protocol determines not just the methods that are allowed in a REST API, which means the action types that the Client can demand in a request, but also the status codes that the Server returns as a response in order to have a good communication flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TNB3tnpC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kslln5h0fmx3mngv1dw1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TNB3tnpC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kslln5h0fmx3mngv1dw1.jpg" alt="HTTP Protocol"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-http-methods"&gt;
  &lt;/a&gt;
  🔸 4.1 HTTP Methods
&lt;/h3&gt;

&lt;p&gt;There are &lt;strong&gt;5 main methods that a Client can use in a request in order to manipulate an API resource&lt;/strong&gt;, which are related with the 5 basic data manipulation types in a database, such: Create, Retrieve, Update and Delete.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#411-get"&gt;
  &lt;/a&gt;
  4.1.1 GET
&lt;/h4&gt;

&lt;p&gt;This &lt;strong&gt;method is used to retrieve data from a Server&lt;/strong&gt; by indicating the resource in the URL. For example, to request a list of products of an API, the Client might send:&lt;/p&gt;

&lt;p&gt;GET &lt;code&gt;http://api.example.com/products&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#412-post"&gt;
  &lt;/a&gt;
  4.1.2 POST
&lt;/h4&gt;

&lt;p&gt;This &lt;strong&gt;method is used to create a new resource in the Server&lt;/strong&gt; by indicating it in the URL and sending the resource data in the request body.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;POST &lt;code&gt;http://api.example.com/products&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Request body in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    “name”: “Laptop II”,
    “price”: 1000
    “available”: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this given example, a new product will be created in the database with this provided information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#413-put"&gt;
  &lt;/a&gt;
  4.1.3 PUT
&lt;/h4&gt;

&lt;p&gt;This &lt;strong&gt;method is used to update a resource data in the Server&lt;/strong&gt; by identifying it in the URL, and sending the information that will be updated in the request body.&lt;/p&gt;

&lt;p&gt;PUT &lt;code&gt;http://api.example.com/products/1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Request body in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    “name”: “Laptop”,
    “price”: 5000,
    “available”: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this given example, the product with ID 1 will be updated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#414-patch"&gt;
  &lt;/a&gt;
  4.1.4 PATCH
&lt;/h4&gt;

&lt;p&gt;This &lt;strong&gt;method is also used to update a resource data in the Server&lt;/strong&gt; by identifying it in the URL, but with the main &lt;strong&gt;difference of updating just a specific information&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;PATCH &lt;code&gt;http://api.example.com/products/1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Request body in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    “available”: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this given example, just the &lt;code&gt;available&lt;/code&gt; property of the product with ID 1 will be updated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#415-delete"&gt;
  &lt;/a&gt;
  4.1.5 DELETE
&lt;/h4&gt;

&lt;p&gt;This &lt;strong&gt;method is used to delete a resource in the Server&lt;/strong&gt; by identifying it in the URL.&lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;p&gt;DELETE &lt;code&gt;http://api.example.com/products/1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this given example, the product with ID 1 will be deleted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-http-status-code"&gt;
  &lt;/a&gt;
  🔸 4.2 HTTP Status Code
&lt;/h3&gt;

&lt;p&gt;The HTTP Status Codes &lt;strong&gt;are codes returned by the Server in order to indicate the type of response in a Client’s request&lt;/strong&gt;, facilitating the understanding just by its group and number. &lt;/p&gt;

&lt;p&gt;The most commonly used groups and numbers of status code are:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#421-group-2"&gt;
  &lt;/a&gt;
  4.2.1 Group 2
&lt;/h4&gt;

&lt;p&gt;Status group that &lt;strong&gt;indicates a successful request&lt;/strong&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;200 (Ok)&lt;/th&gt;
&lt;th&gt;201 (Created)&lt;/th&gt;
&lt;th&gt;204 (No Content)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Request succeeded&lt;/td&gt;
&lt;td&gt;Request succeeded and created resource&lt;/td&gt;
&lt;td&gt;Request succeeded and no additional content in response body&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#422-group-3"&gt;
  &lt;/a&gt;
  4.2.2 Group 3
&lt;/h4&gt;

&lt;p&gt;Status group that &lt;strong&gt;indicates redirect responses&lt;/strong&gt;, which are used to inform the Client that the Server needed to perform a redirect to a new URL.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;301 (Moved Permanently)&lt;/th&gt;
&lt;th&gt;304 (Not Modified)&lt;/th&gt;
&lt;th&gt;307 (Temporary redirect)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Requested resource has changed permanently and a new URL is provided in the response&lt;/td&gt;
&lt;td&gt;Requested resource wasn’t modified and the same cached version can be used&lt;/td&gt;
&lt;td&gt;Requested resource has been temporarily redirected to another URL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#423-group-4"&gt;
  &lt;/a&gt;
  4.2.3 Group 4
&lt;/h4&gt;

&lt;p&gt;Status group that &lt;strong&gt;indicates an error in the Client side&lt;/strong&gt;, which means that the request was incorrectly builded.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;400 (Bad Request)&lt;/th&gt;
&lt;th&gt;401 (Unauthorized)&lt;/th&gt;
&lt;th&gt;403 (Forbidden)&lt;/th&gt;
&lt;th&gt;404 (Not Found)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Request couldn’t be understanded by the Server&lt;/td&gt;
&lt;td&gt;Client is not authenticated to access the resource&lt;/td&gt;
&lt;td&gt;Client is not authorized to access the resource&lt;/td&gt;
&lt;td&gt;Requested resource couldn’t be found by the Server&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#424-group-5"&gt;
  &lt;/a&gt;
  4.2.4 Group 5
&lt;/h4&gt;

&lt;p&gt;Status group that &lt;strong&gt;indicates an error in the Server side&lt;/strong&gt;, which means that the request was sent correctly by the Client, but an error occurred while processing it.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;500 (Internal Server Error)&lt;/th&gt;
&lt;th&gt;503 (Service Unavailable)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Indicates that the Server faced an unexpected error, and couldn't return the request response&lt;/td&gt;
&lt;td&gt;Indicates that the Server isn’t able to process the request because it’s unavailable, overloaded or under maintenance&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🔶 Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that this article helped you to have a basic theoretical approach about REST fundamentals, which is an essential knowledge to every programmer that develops web services.&lt;/p&gt;

&lt;p&gt;And, now that we have this core understanding, what about building a RESTful API and having practical experience with this technology? (Coming soon...)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Written with 💙 by Cássio Cappellari!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>webdev</category>
      <category>rest</category>
      <category>api</category>
    </item>
    <item>
      <title>8 Things You Must Do in CSS</title>
      <author>ChrysillaMayasari</author>
      <pubDate>Tue, 03 Aug 2021 10:14:12 +0000</pubDate>
      <link>https://dev.to/chrysillala/8-things-you-must-do-in-css-62d</link>
      <guid>https://dev.to/chrysillala/8-things-you-must-do-in-css-62d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-clean-code"&gt;
  &lt;/a&gt;
  What is Clean Code?
&lt;/h2&gt;

&lt;p&gt;This term might have different meaning for developers. Although there are several best practices you can follow but there is no exact definition for clean code. &lt;/p&gt;

&lt;p&gt;But for what I have learned and read, this is what a clean code is,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Clean code is code that is easy to understand, straightforward and consistent, therefore it would be reusable and refactorable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is important because as a developer, most of the time we will collaborate with other developers so we need to make sure that our code can be understood easily by everyone in team.&lt;br&gt;
Now, let's take a look on what are the things we must do to write clean code in CSS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-write-meaningful-and-self-descriptive-name"&gt;
  &lt;/a&gt;
  1. Write Meaningful and Self Descriptive Name
&lt;/h2&gt;

&lt;p&gt;You should use meaningful and self descriptive names. There are several naming conventions or methodologies that you can follow, such as &lt;a href="http://getbem.com/introduction/"&gt;BEM&lt;/a&gt;, &lt;a href="https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/"&gt;OOCSS&lt;/a&gt;, &lt;a href="http://smacss.com/"&gt;SMACSS&lt;/a&gt;, &lt;a href="https://acss.io/"&gt;Atomic CSS&lt;/a&gt; and many more.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-prefer-css-preprocessor"&gt;
  &lt;/a&gt;
  2. Prefer CSS Preprocessor
&lt;/h2&gt;

&lt;p&gt;By using CSS Preprocessor, it enables you to use things like variables, nested rules, inline imports, prefix, and more. &lt;br&gt;
There are several CSS preprocessor, you can choose such as &lt;a href="https://sass-lang.com/"&gt;SASS&lt;/a&gt;, &lt;a href="https://lesscss.org/"&gt;LESS&lt;/a&gt;, &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt; etc.&lt;/p&gt;

&lt;p&gt;CSS preprocessor is very handy when we are working with team and when our app grows bigger, and by combining with naming convention of your choice it can also help us to avoid repetition in our CSS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-write-modular-css"&gt;
  &lt;/a&gt;
  3. Write Modular CSS
&lt;/h2&gt;

&lt;p&gt;You should split your CSS files into modules for easier maintenance. If you are using SASS, you can follow the &lt;a href="https://sass-guidelin.es/#architecture"&gt;7-1 pattern&lt;/a&gt; for the architecture.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-use-shorthand-properties"&gt;
  &lt;/a&gt;
  4. Use Shorthand properties
&lt;/h2&gt;

&lt;p&gt;Write your CSS in a simpler way using CSS shorthands, you can use shorthands for border, margin, padding, background, font etc.&lt;/p&gt;

&lt;p&gt;For example, this is how we create border in CSS without shorthand properties&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.border&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#aeaeae&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with shorthand, we can refactor into this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.border&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#aeaeae&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-write-flexible-css-selectors"&gt;
  &lt;/a&gt;
  5. Write Flexible CSS Selectors
&lt;/h2&gt;

&lt;p&gt;When writing CSS selectors, don’t make it overly specific, otherwise it would be hard to overwrite. You should maintain low specificity in your selectors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use element selectors (&lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;) to write styling for your project's basic typography.&lt;/li&gt;
&lt;li&gt;Related to naming, plain css names are great for defining class with low specificity that intended for reusability. For example: &lt;code&gt;.container&lt;/code&gt;, &lt;code&gt;.shadow-md&lt;/code&gt;, &lt;code&gt;.shadow-lg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-avoid-raw-important-endraw-"&gt;
  &lt;/a&gt;
  6. Avoid &lt;code&gt;!important&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It has the highest &lt;a href="https://web.dev/learn/css/specificity/"&gt;specificity&lt;/a&gt; of all CSS selectors, and if you want to override, you need another &lt;code&gt;!important&lt;/code&gt; and another &lt;code&gt;!important&lt;/code&gt; and another. This would make your CSS hard to maintain. &lt;br&gt;
To avoid this, in any circumstances, please please avoid using &lt;code&gt;!important&lt;/code&gt; as much as you can. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-follow-css-styleguide"&gt;
  &lt;/a&gt;
  7. Follow CSS Styleguide
&lt;/h2&gt;

&lt;p&gt;Aside from naming convention, there is CSS styleguide that could help you create maintainable CSS. The most famous one is &lt;a href="https://github.com/airbnb/css"&gt;Airbnb styleguide&lt;/a&gt;. It is recommended to combine their style guide with BEM or OOCSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-use-code-formatter-tool"&gt;
  &lt;/a&gt;
  8. Use Code Formatter Tool
&lt;/h2&gt;

&lt;p&gt;You can use a code formatter tool called &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; to help you auto format your code based on your team's preference. You can also integrate with linter, such as &lt;a href="https://eslint.org/"&gt;ESlint&lt;/a&gt; for bugs prevention.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;p&gt;Consistent on what you and your team has decided. And just like any other programming language, keep your code DRY (Don't Repeat Yourself) and KISS (Keep It Simple Stupid).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/maimohamed/css-clean-code-5d3p"&gt;https://dev.to/maimohamed/css-clean-code-5d3p&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.sitepoint.com/golden-guidelines-for-writing-clean-css/"&gt;https://www.sitepoint.com/golden-guidelines-for-writing-clean-css/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://levelup.gitconnected.com/writing-your-css-like-this-will-make-your-code-super-clean-f82d4bfeb468"&gt;https://levelup.gitconnected.com/writing-your-css-like-this-will-make-your-code-super-clean-f82d4bfeb468&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks for reading!&lt;br&gt;
If you want to know more on Javascript clean code, you can head over to &lt;a href="https://dev.to/chrysillala/writing-less-smelly-javascript-code-for-beginners-3jdg"&gt;this article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Would really appreciate if you could share your thoughts and feedback in the comment ✨&lt;/p&gt;

</description>
      <category>css</category>
      <category>web</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
