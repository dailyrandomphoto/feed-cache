<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>There Is No Pot Of Gold At The End Of The Rainbow</title>
      <author>Feli (she/her)</author>
      <pubDate>Tue, 06 Jul 2021 17:26:00 +0000</pubDate>
      <link>https://dev.to/kotzendekrabbe/there-is-no-pot-of-gold-at-the-end-of-the-rainbow-5955</link>
      <guid>https://dev.to/kotzendekrabbe/there-is-no-pot-of-gold-at-the-end-of-the-rainbow-5955</guid>
      <description>&lt;p&gt;Recently I watched a short video with &lt;a href="https://www.youtube.com/watch?v=_gt3SjZW9jA"&gt;Simon Sinek about finding the balance&lt;/a&gt;. He talked about how people looking for the perfect partner &lt;em&gt;doesn’t exist&lt;/em&gt;, the perfect job &lt;em&gt;doesn’t exist&lt;/em&gt; or the perfect company &lt;em&gt;doesn’t exist&lt;/em&gt;. That you can't have impact and happiness every day, that it’s about finding the balance. There will always be some bad days or days where you don’t have the energy to give 100%. You have to have bad days to appreciate the good ones. &lt;/p&gt;

&lt;p&gt;Simon added in the video that people are looking for the pot of gold at the end of a rainbow - but there is no pot at the end of a rainbow. There are a lot of books and speakers who are telling that there is - so people start to find it. However, it's not about finding the pot of gold at the end of a rainbow, it's about the adventure and who we take with us on the journey. &lt;strong&gt;That is the best part&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The video reminded me of a situation where a colleague asked me "Which was the best company you ever worked at". And my answer was "There is no perfect company or job. Every company has issues and you need to find out what kind of issues you can live or work with."&lt;br&gt;
So, I truly agree with Simon that there is no perfect job or company. And especially not for everyone, because we are humans and so we are different. Everyone of us needs something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-telling-talent-marketing-lies"&gt;
  &lt;/a&gt;
  Stop telling talent marketing lies
&lt;/h2&gt;

&lt;p&gt;Which brings me to a topic I have been working on for a while now: Helping our Recruiting department to build trustworthy talent marketing for developers.&lt;/p&gt;

&lt;p&gt;In marketing it's normal to window dress products or stories. That's why a lot of companies use stories people want to hear instead of what their values actually are. How their culture is. They tell the story of the &lt;em&gt;pot of gold at the end of the rainbow&lt;/em&gt; instead of telling the talents:&lt;br&gt;
&lt;em&gt;hey wanna join me for an adventure? I heard there is a pot of gold at the end of the rainbow. I'm not sure if we're gonna find it, but let’s go&lt;/em&gt;. It’s not important if you find the pot of gold or not, it’s about the relationship, the journeys, the experience you make with each other while you are looking for it.&lt;/p&gt;

&lt;p&gt;For Employer Branding and Talent Marketing this would mean for example: Instead of saying "We are a diverse and inclusive company" say "We are committed to become a diverse and inclusive workplace and therefore we are looking for people who are helping us to bring this vision to life".&lt;/p&gt;

&lt;p&gt;If a company tells shiny stories which are not the truth to attract talents, those talents may join the company because they tell them what they want to hear. But those talents that join will recognize sooner or later that it all was just window dressing. And in the best case they quit. In the worst case scenario, they stay at the company without believing in the company, without passion and happiness. Which leads to employees who don’t bring their best to the table. Don’t sell candidates a dummy and have them quit months later. Find candidates who are willing to join your adventure. Who wants to go with &lt;strong&gt;you&lt;/strong&gt; on the journey to find the pot of gold at the end of the rainbow, no matter if you find the pot of gold or not.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@austinchan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Austin Chan&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>leadership</category>
      <category>career</category>
      <category>culture</category>
    </item>
    <item>
      <title>Django full CI-CD flow to AWS with GitHub Actions and S3</title>
      <author>Valentine Solonechnyi</author>
      <pubDate>Tue, 06 Jul 2021 17:24:27 +0000</pubDate>
      <link>https://dev.to/vlntsolo/django-full-ci-cd-flow-to-aws-with-github-actions-and-s3-2enp</link>
      <guid>https://dev.to/vlntsolo/django-full-ci-cd-flow-to-aws-with-github-actions-and-s3-2enp</guid>
      <description>&lt;p&gt;This guide covers all steps needed for setting up your CI-CD workflow for Django project with Amazon Beanstalk and GitHub Actions under the hood.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Link to sample project: &lt;a href="https://github.com/vlntsolo/django-cicd"&gt;https://github.com/vlntsolo/django-cicd&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-aws-beanstalk-environment"&gt;AWS Beanstalk environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-s3-configuration"&gt;S3 configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-iam-user-access"&gt;IAM user access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-github-workflow-settings"&gt;GitHub workflow settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-preparing-django-settings"&gt;Preparing Django settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-first-run"&gt;First run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-composing-postdeploy-commands-hooks"&gt;Composing postdeploy commands (hooks)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we start, what is CI-CD flow in the first place?&lt;/p&gt;

&lt;p&gt;Despite the fact that Django code doesn't require any build step compared to compiled apps, you might find it quite frustrating to repeat a manual re-upload each time you need to deploy a new feature or a bug fix. Because of this, CI-CD (Continuous integration and Continuous delivery) workflows were invented.&lt;/p&gt;

&lt;p&gt;CI-CD workflows or pipelines allow us to safely build, test and deploy web applications in a relatively short period of time (usually, in a matter of minutes). So what about Django? If you have a python application codebase hosted on a GitHub, it would be enormously convenient to push it to the hosting environment right after you update the repository. And that is exactly what we're going to do using GitHub Actions, which is publicly available for free since late 2019.&lt;/p&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-aws-beanstalk-environment"&gt;
  &lt;/a&gt;
  1. AWS Beanstalk environment
&lt;/h2&gt;

&lt;p&gt;Before we start configuring everything, we need to be sure we have our environment warm and ready.&lt;/p&gt;

&lt;p&gt;If you already have an AWS account, go to the Console and search for Beanstalk. If not, &lt;a href="https://aws.amazon.com/"&gt;create one here&lt;/a&gt;. You will be asked to add billing information in order to proceed.&lt;/p&gt;

&lt;p&gt;In the Beanstalk dashboard, make sure you have selected the most suitable region (where services to be deployed) in the right top corner. Check [Environments] and choose [Create a new environment]. Then, on the dialogue page, choose [Web server environment].&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fccIjJbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fccIjJbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk1.jpg" alt="Creating beanstalk python environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill in the details and focus on Platform section. Here we need to select Python platform (last version) and last Amazon Linux 2 available.&lt;/p&gt;

&lt;p&gt;Leave Sample application and hit &lt;strong&gt;[Create environment]&lt;/strong&gt;. In a few moments, you should be able to open your environment URL address and see a sample page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UIxMsqWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-sample-page.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UIxMsqWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-sample-page.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the name of the application and the environment displayed in the top left corner if you open the environment page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juKeFojT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk-details.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juKeFojT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/beanstalk-details.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last thing to do here is to set up the database for Django.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;[Configuration] → [Database]&lt;/strong&gt; and select preferred options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzflPGZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-db.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzflPGZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/beanstalk-db.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It this example I picked a PostgreSQL since this my usual choice, but you can stick with MySQL or even Oracle if you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;! Alert:&lt;/strong&gt; &lt;em&gt;Database server created this way is suited for testing purposes only. It will be strictly attached to the environment. The database will be deleted if you remove or recreate the Beanstalk environment. In production, you should use RDS or Aurora, standalone servers inside your &lt;a href="https://aws.amazon.com/vpc/"&gt;VPC&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we've got a managed python environment and the database, we need to prepare a file storage for our future application builds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-s3-configuration"&gt;
  &lt;/a&gt;
  2. S3 configuration 🪣
&lt;/h2&gt;

&lt;p&gt;We need to set up a custom S3 bucket as a temporary storage for our builds before they will be pushed to the Beanstalk.&lt;/p&gt;

&lt;p&gt;Search for S3 in AWS console or switch to it from the menu. Then select &lt;strong&gt;[Create bucket]&lt;/strong&gt;. Type in some unique name and select your region.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTf71wli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/s3-new-bucket.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTf71wli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/s3-new-bucket.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave the checkbox on &lt;em&gt;"Block all public access"&lt;/em&gt; and proceed with &lt;strong&gt;[Apply]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The next thing we need to do is to generate programmatic access credentials which will be used by GitHub Action to deploy our Django app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-iam-user-access"&gt;
  &lt;/a&gt;
  3. IAM user access 🔐
&lt;/h2&gt;

&lt;p&gt;Search for IAM users in the AWS console and select &lt;strong&gt;[Add user]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6QFqAGNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QFqAGNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the permissions page, select [Attach existing policies directly]. Search for S3FullAccess* and select the checkbox. Repeat the same steps for &lt;em&gt;AdministratorAccess-AWSElasticBeanstalk&lt;/em&gt;* and hit &lt;strong&gt;[Add user]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, copy Access key ID and Secret from the last step. Make sure to save this info somewhere safe, since user secret will be shown only once.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPBudD3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPBudD3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/IAM-3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like we're done with AWS and ready to proceed with GitHub!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-github-workflow-settings"&gt;
  &lt;/a&gt;
  4. GitHub workflow settings 🔡
&lt;/h2&gt;

&lt;p&gt;Go back to your Django project and create a folder called &lt;code&gt;.github&lt;/code&gt;. And one more folder inside it called workflows. GitHub Actions config should be placed inside and formatted with YAML syntax. See my example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Location: .github/workflows/custom_config.yml

name: CI-CD pipeline to AWS
env:
  EB_S3_BUCKET_NAME: "YOUR BUCKET NAME FROM Step 2"
  EB_APPLICATION_NAME: "YOUR APP NAME FROM Step 1"
  EB_ENVIRONMENT_NAME: "YOUR ENVIRONMENT NAME FROM Step 1"
  DEPLOY_PACKAGE_NAME: "django-app-${{ github.sha }}.zip"
  AWS_REGION_NAME: "YOUR AWS REGION ("us-east-1"/"eu-central-1" etc.)"

on:
  push:
    branches:
      - master #Use your own branch here (Might be staging or testing)
jobs:
  build:
    runs-on: ubuntu-latest
    steps: 
      - name: Git clone on our repo
        uses: actions/checkout@v2

      - name: Create zip deployment package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION_NAME }}
      - name: Copying file to S3
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_S3_BUCKET_NAME }}/
      - name: Print nice message on success finish
        run: echo "CI part finished successfuly"
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Create new EBL app ver
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.EB_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "${{ github.sha }}"

      - name: Deploy new app
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "${{ github.sha }}"
      - name: Print nice message on success finish
        run: echo "CD part finished successfuly"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go through the surface of the config blocks and check their purpose. More details can be found here.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;[env]&lt;/strong&gt; block serves as a list of shortcuts for variables inside the config. We define our non-sensitive data here.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;[jobs]&lt;/strong&gt; block defines what actually will be done.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;[build]&lt;/strong&gt; block is just a job name and includes a list of "steps" to perform in our building process. For a pure Django app, this means only zipping the working directory and pushing it to the S3 bucket.&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;[steps]&lt;/strong&gt; block lists names and actual commands to execute on the virtual machine.&lt;/p&gt;

&lt;p&gt;You might easily add another job name called testing and run ./manage.py test step within it.&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;[needs]&lt;/strong&gt; block is a prerequisite for further execution. In our case, we're making sure that our file transfer was completed successfully before we send commands to the Beanstalk.&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;[on]&lt;/strong&gt; block specifies the trigger event, like our "push", as well as the target branch.&lt;/p&gt;

&lt;p&gt;If you come up with several Beanstalk environments (QA, testing, staging, production etc.), you'd need to place new config.yml files for them and change env vars and branch accordingly.&lt;/p&gt;

&lt;p&gt;You might also notice that we didn't define &lt;code&gt;secrets.aws_access_key_id&lt;/code&gt; or &lt;code&gt;secrets.aws_secret_access_key&lt;/code&gt; yet. 🧊 Let's fix that!&lt;/p&gt;

&lt;p&gt;Open your GitHub repo or create one for your project and go to &lt;strong&gt;[Settings]&lt;/strong&gt; → &lt;strong&gt;[Secrets]&lt;/strong&gt; → &lt;strong&gt;[New repository secret]&lt;/strong&gt;. Paste your IAM user key and secret there like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4FQJQsBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/secrets-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4FQJQsBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/2021/07/secrets-1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat the same step for &lt;code&gt;aws_secret_access_key and&lt;/code&gt; it's value. That's it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-preparing-django-settings"&gt;
  &lt;/a&gt;
  5. Preparing Django settings 📦
&lt;/h2&gt;

&lt;p&gt;Remember, we've connected a Relational database to our Beanstalk environment at Step 1? But where are the connection parameters and db user credentials?&lt;/p&gt;

&lt;p&gt;With integrated database, Beanstalk exposes env variables, which can be used right away:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main_django_app settings.py
import os

ALLOWED_HOSTS = ['YOUR_ENVIRONMENT_HOST']

DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'NAME': os.environ['RDS_DB_NAME'],
    'USER': os.environ['RDS_USERNAME'],
    'PASSWORD': os.environ['RDS_PASSWORD'],
    'HOST': os.environ['RDS_HOSTNAME'],
    'PORT': os.environ['RDS_PORT'],
    }
}

# rest of the settings
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add your environment URL and main domain to allowed hosts list.&lt;/p&gt;

&lt;p&gt;At this point, we need to make sure that Beanstalk python platform will be ready to establish a connection with PostgreSQL. Let's tell it to install some extras for us.&lt;/p&gt;

&lt;p&gt;Create a folder in your &lt;a href="https://github.com/vlntsolo/django-cicd"&gt;project root&lt;/a&gt; called &lt;code&gt;.ebextensions&lt;/code&gt; and place there a file &lt;code&gt;01_packages.config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;packages: 
  yum: 
    amazon-linux-extras: []

commands:
  01_postgres_activate: 
    command: sudo amazon-linux-extras enable postgresql10
  02_postgres_install: 
    command: sudo yum install -y postgresql-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add Django config to inform Beanstalk's WSGI server about our main app and settings. Create another file inside &lt;code&gt;.ebextensions&lt;/code&gt; folder called &lt;code&gt;django.config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: main_django_app.wsgi:application
  aws:elasticbeanstalk:application:environment:
    DJANGO_SETTINGS_MODULE: main_django_app.settings
    "PYTHONPATH": "/var/app/current:$PYTHONPATH"
  aws:elasticbeanstalk:environment:proxy:staticfiles:
    /static: static
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change &lt;em&gt;main_django_app&lt;/em&gt; to your Django application name.&lt;/p&gt;

&lt;p&gt;Last row &lt;code&gt;aws:elasticbeanstalk:environment:proxy:staticfiles0:&lt;/code&gt; tells which folder to serve through the reverse proxy and which relative URL to use.&lt;/p&gt;

&lt;p&gt;Finally, freeze your local python environment with &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; (it will be the primary source for Beanstalk to configure EC2 environment).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-first-run"&gt;
  &lt;/a&gt;
  6. First run 🔥
&lt;/h2&gt;

&lt;p&gt;Push any changes to your specified branch and visit Actions tab. If your actions completed successfully, you will see the green mark. If something went wrong, open the logs and resolve the errors inside.&lt;/p&gt;

&lt;p&gt;Got errors after successful GitHub Actions run? Visit Elastic Beanstalk environment and check the Logs.&lt;/p&gt;

&lt;p&gt;Hopefully, you'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNy9g7Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/django-demopage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNy9g7Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.valentine.click/content/images/size/w1000/2021/07/django-demopage.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-composing-postdeploy-commands-hooks"&gt;
  &lt;/a&gt;
  7. Composing postdeploy commands (hooks) 🔌
&lt;/h2&gt;

&lt;p&gt;There's still few commands that should be executed after deploy.&lt;/p&gt;

&lt;p&gt;1) We need to migrate our changes to the Beanstalk database (migration files created by makemigrations command should be a part of your codebase).&lt;/p&gt;

&lt;p&gt;2) We need to collect static files (no need to keep your static files in a codebase).&lt;/p&gt;

&lt;p&gt;This problem could be solved with Beanstalk postdeploy hooks. File names could be totally custom, but file extension is important. All .sh files will be executed in alphanumerical order.&lt;/p&gt;

&lt;p&gt;In your project root, create a folder &lt;code&gt;.platform&lt;/code&gt; with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.platform/
└───hooks/
    └───postdeploy/
        -01_django.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

source /var/app/venv/*/bin/activate &amp;amp;&amp;amp; {

# collecting static files
python manage.py collectstatic --noinput;
# log which migrations have already been applied
python manage.py showmigrations;
# migrate the rest
python manage.py migrate --noinput;
# another command to create a superuser (write your own)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You've got the idea! Now, you can figure out how to create the superuser account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-notes"&gt;
  &lt;/a&gt;
  ⚠️ Important notes:
&lt;/h3&gt;

&lt;p&gt;– &lt;strong&gt;Review IAM user access policy&lt;/strong&gt;. For the tutorial purpose, I've granted full access to S3 and Beanstalk. Make sure that you grant only required permissions for GitHub Actions client in order to prevent unpleasant consequences in case of secret key leakage.&lt;/p&gt;

&lt;p&gt;– &lt;strong&gt;Add lifecycle rules&lt;/strong&gt; to S3 bucket and Application versions storage. By default, S3 doesn't delete application versions or any other files from the buckets. Use lifecycle rules in both S3 and Beanstalk to keep only needed app versions.&lt;/p&gt;

&lt;p&gt;– AWS Beanstalk health checking system might not work properly ( severe health status) because of Django ALLOWED_HOSTS restriction in headers. I don't know the right way of handling this issue (you can either ignore status warnings or set &lt;code&gt;ALLOWED_HOSTS = ['*']&lt;/code&gt; at your own risk).&lt;/p&gt;

&lt;p&gt;– If you're going to use PostgreSQL, don't forget to install the package with &lt;code&gt;pip install psycopg2-binary&lt;/code&gt; and freeze the requirements.txt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://valentine.click/blog/how-to-split-django-settings-for-different-environments"&gt;How to split Django settings for different environments&lt;/a&gt;&lt;br&gt;
&lt;a href="https://valentine.click/blog/django-q-and-beanstalk"&gt;How to configure Django Q with Supervisor on AL2 Beanstalk&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-django.html"&gt;Deploying a Django application to Elastic Beanstalk&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;Workflow syntax for GitHub Actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope, you've enjoyed following this guide. Stay tuned and next time I might cover how to set up a full-stack Django-based project with truly seamless dev experience.&lt;/p&gt;

&lt;p&gt;This article was originally published &lt;a href="https://valentine.click/blog/django-full-ci-cd-flow-to-aws-with-github-actions"&gt;in my blog post&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>django</category>
      <category>aws</category>
      <category>devops</category>
      <category>python</category>
    </item>
    <item>
      <title>Preact, Vite, &amp; Docker Compose in 5 easy steps</title>
      <author>Amin</author>
      <pubDate>Tue, 06 Jul 2021 16:58:32 +0000</pubDate>
      <link>https://dev.to/aminnairi/preact-vite-docker-compose-in-5-easy-steps-j21</link>
      <guid>https://dev.to/aminnairi/preact-vite-docker-compose-in-5-easy-steps-j21</guid>
      <description>&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;li&gt;A terminal emulator&lt;/li&gt;
&lt;li&gt;A text editor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker Compose
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://docs.docker.com/compose/compose-file/"&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;yarn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node:16.0.0&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node&lt;/span&gt;
    &lt;span class="na"&gt;working_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/node&lt;/span&gt;
    &lt;span class="na"&gt;tty&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;stdin_open&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;entrypoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;--help&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/home/node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vite"&gt;
  &lt;/a&gt;
  Vite
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://vitejs.dev/config/"&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;esbuild&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;jsxFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jsxFragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fragment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#preact"&gt;
  &lt;/a&gt;
  Preact
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;a href="https://reactjs.org/docs/introducing-jsx.html#gatsby-focus-wrapper"&gt;&lt;code&gt;index.jsx&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preact/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, Preact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Hello
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;Add these lines to &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./index.jsx"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  Run
&lt;/h2&gt;

&lt;p&gt;Run the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run yarn add preact vite
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run &lt;span class="nt"&gt;--publish&lt;/span&gt; 3000:3000 yarn vite &lt;span class="nt"&gt;--host&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;open http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;You can now build your next awesome &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt; application using the awesome &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; bundler running anywhere with &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use this command to generate your optimized build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker-compose run yarn vite build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Thank you Evan, I can now dev on my 2 cores @1GHz laptop using Docker Compose without going for a coffee break between each updates on my projects.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>preact</category>
      <category>vite</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to push your website online for free (Bonus: How to get domain name for 2$)</title>
      <author>CodeOzz</author>
      <pubDate>Tue, 06 Jul 2021 16:35:19 +0000</pubDate>
      <link>https://dev.to/codeozz/how-to-push-your-website-online-for-free-bonus-how-to-get-domain-name-for-2-1ikp</link>
      <guid>https://dev.to/codeozz/how-to-push-your-website-online-for-free-bonus-how-to-get-domain-name-for-2-1ikp</guid>
      <description>&lt;p&gt;Welcome my friend ! Today I will show you how to deploy your static website for free with Netlify !&lt;/p&gt;

&lt;p&gt;In bonus I will show you where you can bug domain name for 2$ and connect it will Netlify !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create an account on &lt;a href="https://www.netlify.com/"&gt;https://www.netlify.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the overview, you will need to connect your git project to Netlify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Arym6U-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfmobeixdc5bqn38e9xj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Arym6U-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfmobeixdc5bqn38e9xj.png" alt="Screenshot 2021-07-06 at 17.54.55.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://app.netlify.com/start"&gt;https://app.netlify.com/start&lt;/a&gt; Select your plateform between Github, Gitlab or Bitbucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choose the branch to deploy, it's means that when you will push onto this branch, Netlify will build the project and re-deploy it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4NOGJb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5btvkqm3u13vingb5mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NOGJb7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5btvkqm3u13vingb5mk.png" alt="Screenshot 2021-07-06 at 18.01.01.png (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me I create a dedicated branch named &lt;code&gt;prod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18EiB0iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8tzu7umwerely514pow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18EiB0iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8tzu7umwerely514pow.png" alt="Screenshot 2021-07-06 at 18.01.01.png (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to provide the npm command that will build your project (and the output directory name). &lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;npm run build&lt;/code&gt; and I named the output file &lt;code&gt;/dist&lt;/code&gt; (classic).&lt;/p&gt;

&lt;p&gt;Netlify will build your project and deploy it on a &lt;em&gt;special&lt;/em&gt; url.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BONUS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don't have domain name, read this section !&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://www.namecheap.com/domains/domain-name-search/"&gt;https://www.namecheap.com/domains/domain-name-search/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Put your domain name wanted, and select a domain name cheap (for example .art). The first year, the domain name will be cheap and you will need to pay more for the next years, it depends of the domain name (.art stay very cheap).&lt;/p&gt;

&lt;p&gt;Buy your domain name and when you receive the confirmation by email, you will need to verify your mail (in order to link email and your domain name).&lt;/p&gt;

&lt;p&gt;You will just need to select your domain name on the dashboard and click on verify account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GylKlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92siv9ihc803klr9plth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GylKlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92siv9ihc803klr9plth.png" alt="icannwhois_ar2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fourth Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set up a custom domain ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--23IkClQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vo3jw22gxaj91pwx76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--23IkClQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vo3jw22gxaj91pwx76.png" alt="Screenshot 2021-07-06 at 18.11.10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: You can see the &lt;em&gt;special&lt;/em&gt; url generated by Netlify ! (By default any of your build project has this special url in case of you have an issue with your domain name)&lt;/p&gt;

&lt;p&gt;So put your domain name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUq4nrof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgcb5xwz01t3qhiv25le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUq4nrof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgcb5xwz01t3qhiv25le.png" alt="Screenshot 2021-07-06 at 18.12.46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last Step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set up Netlify DNS for your domain !&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;check DNS configuration&lt;/code&gt;, you will have four &lt;em&gt;hostnames&lt;/em&gt;, keep it, we will need it .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2inxTcE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et18zbmazhbodajxng6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2inxTcE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et18zbmazhbodajxng6i.png" alt="Screenshot 2021-07-06 at 17.54.55.png (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Come back into Namecheap, go to &lt;strong&gt;dashboard&lt;/strong&gt; and click on &lt;strong&gt;manage&lt;/strong&gt; into your domain name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juej3wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae1v6aqg46nk913sd5vc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juej3wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae1v6aqg46nk913sd5vc.png" alt="Screenshot 2021-07-06 at 18.19.45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;nameservers&lt;/code&gt; select custom DNS and put the four &lt;em&gt;hostnames&lt;/em&gt; !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JsYr7EFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxw4hr699hasnvwfojx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JsYr7EFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxw4hr699hasnvwfojx.png" alt="Screenshot 2021-07-06 at 18.23.17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save it and wait a few minutes in order to link your hostname with your domain name !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPS:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Netlify will add a SSL in order to have HTTPS on your website ! &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>devops</category>
      <category>netlify</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 06 Jul 2021 16:26:21 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-beo</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-beo</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-bury-the-lede"&gt;
  &lt;/a&gt;
  Don't Bury the Lede
&lt;/h2&gt;

&lt;p&gt;Ok, so the title above IS kind of burying the lede of this fantastic article. In it, &lt;a class="mentioned-user" href="https://dev.to/jmfayard"&gt;@jmfayard&lt;/a&gt;
 shares many learnings from four years (!!!) or writing on DEV. Onne of them is, you guessed it, "don't bury the lede of your article." Read on for many great writing, life, and DEV lessons.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/20-lessons-i-ve-learned-writing-on-dev-for-4-years-4nk3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;20+ Lessons I've Learned Writing on DEV for 4 Years&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴 ・ Jun 29 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#squash-your-git-squash-confusion"&gt;
  &lt;/a&gt;
  Squash Your Git Squash Confusion
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pb"&gt;@pb&lt;/a&gt;
 is here to help you get over the fear of messing up others' commits &lt;em&gt;and&lt;/em&gt; get comfortable with squashing commits.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3sfWXRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--52cZyHb1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618537/3cd782cd-1a3a-4926-9eb6-1e55fba23a61.jpg" alt="pb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pb/git-squash-simplified-3ba1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git Squash Simplified&lt;/h2&gt;
      &lt;h3&gt;Pawel ・ Jul 2 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#graphql-is-like-pizza"&gt;
  &lt;/a&gt;
  GraphQL is Like Pizza
&lt;/h2&gt;

&lt;p&gt;Yep, you read that right. Find out how why &lt;a class="mentioned-user" href="https://dev.to/shrutikapoor08"&gt;@shrutikapoor08&lt;/a&gt;
 likes to compare GraphQL and REST to different types of pizza places. 🤤 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shrutikapoor08" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxsCavCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HHESzKaW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197069/406b42c3-4552-4a6f-8ce9-39a58e542a5a.jpg" alt="shrutikapoor08"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shrutikapoor08/what-is-graphql-hj5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is GraphQL? &lt;/h2&gt;
      &lt;h3&gt;Shruti Kapoor ・ Jul 1 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#design-is-intelligence-made-visible"&gt;
  &lt;/a&gt;
  Design is Intelligence Made Visible
&lt;/h2&gt;

&lt;p&gt;That's why it's important to have at least a basic understanding of product design as a developer. &lt;a class="mentioned-user" href="https://dev.to/flaque"&gt;@flaque&lt;/a&gt;
 is here to help!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flaque" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXQrFVq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H-b5CF7r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/87211/951afa46-47e8-4f65-b0c1-a0dcf19e85b5.jpg" alt="flaque"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flaque/how-to-make-your-product-look-good-h5j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to make your product look good&lt;/h2&gt;
      &lt;h3&gt;Evan Conrad ・ Jun 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#you-are-a-creative-showcase-it-with-css"&gt;
  &lt;/a&gt;
  You Are a Creative. Showcase it with CSS!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/andrewbaisden"&gt;@andrewbaisden&lt;/a&gt;
 says that creating CSS art is one of the best ways to improve your front-end programming skills as a developer — of all levels! Here's how you can get started...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/andrewbaisden" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLg9JixC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bRSmMlC_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/333889/005fe9de-759e-4d70-9c3c-d3aa1289b2ef.png" alt="andrewbaisden"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/andrewbaisden/how-creating-css-art-can-make-you-a-better-developer-4cd5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How creating CSS Art can make you a better developer&lt;/h2&gt;
      &lt;h3&gt;Andrew Baisden ・ Jun 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-whys-and-whats-of-testing"&gt;
  &lt;/a&gt;
  The Whys and Whats of Testing
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/pat_the99"&gt;@pat_the99&lt;/a&gt;
 writes, "Test Driven Development (TDD)'s main idea is to simply start working on code by writing automated tests BEFORE writing the code that is being tested." Pretty useful, no? In this article, Patricia helps us understand JavaScript TDD through the lens of Jest in particular.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pat_the99" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrOrF7B9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jiAMjh3G--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/628161/0fc61315-16e2-4c38-b364-c2515768dc7a.jpeg" alt="pat_the99"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pat_the99/basics-of-javascript-test-driven-development-tdd-with-jest-o3c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Basics of Javascript Test Driven Development (TDD) with Jest&lt;/h2&gt;
      &lt;h3&gt;Patricia Nicole ・ Jul 4 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#youre-invited"&gt;
  &lt;/a&gt;
  You're Invited...
&lt;/h2&gt;

&lt;p&gt;... to &lt;a class="mentioned-user" href="https://dev.to/kharouk"&gt;@kharouk&lt;/a&gt;
's book club — which just might help you land your next job! First up? "Eloquent JavaScript" by Marijn Haverbeke 📚  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kharouk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwCCXRul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XxmUYGMN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/85930/0868ee73-1ee3-424e-a3c3-63b35ec21d68.jpeg" alt="kharouk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kharouk/book-club-eloquent-javascript-chapter-one-5c0d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Book Club: Eloquent Javascript - Chapter One&lt;/h2&gt;
      &lt;h3&gt;Alex Kharouk ・ Jul 3 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bookclub&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>GitHub Copilot and its impact on the future of coding</title>
      <author>Julien</author>
      <pubDate>Tue, 06 Jul 2021 16:24:16 +0000</pubDate>
      <link>https://dev.to/codeinspector/github-copilot-and-its-impact-on-the-future-of-coding-43ld</link>
      <guid>https://dev.to/codeinspector/github-copilot-and-its-impact-on-the-future-of-coding-43ld</guid>
      <description>&lt;p&gt;On June 29, 2021, GitHub announced the technical preview of their new product: &lt;a href="https://copilot.github.com/"&gt;GitHub copilot&lt;/a&gt;. It took many people by surprise and the overall reception from the community is very positive (see for example the stream from &lt;a href="https://twitter.com/rauchg/status/1409907555749351427"&gt;Guillermo Rauch&lt;/a&gt;, &lt;a href="https://twitter.com/cassidoo/status/1410728940797251591?s=20"&gt;Cassidy Williams&lt;/a&gt; or &lt;a href="https://twitter.com/danielgross/status/1410226061959442432"&gt;Daniel Gross&lt;/a&gt;). It’s definitely a major step in terms of technology. Now, what does it mean for the future of coding?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#machine-learning-will-help-you-produce-better-code"&gt;
  &lt;/a&gt;
  Machine Learning will help you produce better code
&lt;/h1&gt;

&lt;p&gt;Machine learning is going to replace the software developer or at least help you produce better code, and in a not-so-distant future, write complete programs. And there is absolutely no doubt about this. &lt;/p&gt;

&lt;p&gt;Some early players (&lt;a href="https://www.tabnine.com/"&gt;tabnine&lt;/a&gt;, &lt;a href="https://www.kite.com/"&gt;kite&lt;/a&gt;) released products that are AI assistance for coders, mostly as a smart autocomplete. IntelliJ (one of the most popular IDE with VS Code) already embeds a &lt;a href="https://www.jetbrains.com/help/idea/auto-completing-code.html#ml_completion"&gt;Machine Learning system for code completion&lt;/a&gt; in their IDE. But none of the existing players generated fully functional code. In that sense, Copilot is a major step in the direction of automating code generation.&lt;/p&gt;

&lt;p&gt;When making a machine-learning based product, the accuracy of the model (and quality of the recommendations) depends on the amount of data available to train it. And GitHub has the best position on the market to get a massive amount of training data since it is the primary platform to host all source code (GitHub has more than 50% of the market for Git hosting and is the primary platform for open source projects).&lt;/p&gt;

&lt;p&gt;There is a controversy around the license on which the code is trained (see &lt;a href="https://drewdevault.com/2021/07/04/Is-GitHub-a-derivative-work.html"&gt;here&lt;/a&gt;, &lt;a href="https://news.ycombinator.com/item?id=27725274"&gt;here&lt;/a&gt;, or &lt;a href="https://twitter.com/eevee/status/1410037309848752128?s=20"&gt;here&lt;/a&gt;, but the argument is unlikely to stand in the case of a lawsuit (see &lt;a href="https://twitter.com/luis_in_brief/status/1410242882523459585?s=20"&gt;this twitter thread&lt;/a&gt;). Even if that was a real concern, Microsoft could train its model on the vast codebase developers at all its companies (Microsoft, GitHub, LinkedIn, etc) and still, probably produce good results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaway: like it or not, machine learning is entering the developer tools space. And it’s here to stay.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-the-beginning-of-a-new-era-of-developer-tools"&gt;
  &lt;/a&gt;
  This is the beginning of a new era of developer tools
&lt;/h1&gt;

&lt;p&gt;Until GitHub copilot, many people were skeptical about the use of machine learning in the developer tools space. Developers, in particular, thought that writing code was art that machines could not replicate (or that it will come in decades and they would not be impacted). The release of Copilot (and its quality for a preview) proved them wrong and they now have to face the reality: the machine can do better than us in some domains (try to write a function that validates an email address in less than 10 seconds, it’s actually very complex and can be done correctly by Copilot in less than five seconds).&lt;/p&gt;

&lt;p&gt;Other people argued a lot about the privacy (e.g. your code being sent to an API) of such tools. Again, the release of Copilot proved them wrong and it was barely a topic of discussion, even if GitHub collects source code, geolocation, operating systems, and a lot of other identifiable data (&lt;a href="https://docs.github.com/en/github/copilot/about-github-copilot-telemetry"&gt;see documentation&lt;/a&gt;. The reality is that developers do not care: the value the tool provides is bigger than its privacy cost.&lt;/p&gt;

&lt;p&gt;Machine learning will impact many domains of computer science, programming is just one domain among many others. The next generation of developer tools will be AI-driven and will leave the other tools in the dust in terms of quality. Expect to see ML-based infrastructure tools that optimize your deployment in real-time depending on your cost and performance targets. Or tools that will generate code according to your comments and test cases. The possibilities are endless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaway: Copilot is not the end of the software developer: it’s the beginning of a new era of developer tools.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-impact-on-the-developer-market"&gt;
  &lt;/a&gt;
  The impact on the developer market
&lt;/h1&gt;

&lt;p&gt;Copilot reduces the barrier to enter the software development workforce and reduces friction to write simple code. In a world where software usage is growing incredibly fast and there is a &lt;a href="https://cacm.acm.org/magazines/2021/7/253461-the-2021-software-developer-shortage-is-coming/fulltext"&gt;shortage of software developers&lt;/a&gt;, this is a much-needed product.&lt;/p&gt;

&lt;p&gt;Tools such as Copilot will also widen the gap between junior developers and senior developers. Such a tool will make it very easy to write a new frontend or a backend system in Javascript: the model will be well trained to generate the correct code. But it will fail on complex legacy codebases, embedded systems (that deal with architecture-specific code), where suggestions might not be accurate for some time.&lt;/p&gt;

&lt;p&gt;Finally, Copilot generates functions but does nothing to organize them into efficient software architecture. You will still require to have experienced engineers to compose your code into efficient software units. But this is just a matter of time before you have an AI that can also automate that job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: It is going to be easier to become a software engineer. Software developers will not disappear but will be more specialized.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-to-expect-in-the-future"&gt;
  &lt;/a&gt;
  What to expect in the future
&lt;/h1&gt;

&lt;p&gt;Machine learning will automate software production, transforming the software developer into an architect that will edit (to fit their need) and compose generated code into an efficient software architecture.&lt;/p&gt;

&lt;p&gt;We will soon see codebases with 80% of auto-generated code by Copilot (or similar product) in the near future, especially for new products written in languages like Javascript or Python (that represent together more than 40% of the actual market).&lt;/p&gt;

&lt;p&gt;The release of GPT-3 and the promise that OpenAI will make available all the work of Copilot on their API is very promising for the developer tools community. And I expect more tools that will make use of AI to make the developer more efficient in the years to come.&lt;br&gt;
What does it mean for Code Inspector?&lt;br&gt;
At Code Inspector, using ML has always been part of our plan and we have been experimenting with various ML techniques and been using the OpenAI API for some time. In all our conversations with users, developers or investors, we always communicated that using machine learning was the future of developer tools which is why we invested early on in these technologies. In that regard, the release of Copilot shows that our vision has been correct since the beginning.&lt;/p&gt;

&lt;p&gt;We are excited by the release of Copilot because it opens a new era of developer tools. It will make available its work on the OpenAI API. Code Inspector will not be a competitor of Copilot. It will complement it. At the end of the day, our mission is simple: help developers write better code, faster.&lt;/p&gt;

&lt;p&gt;Photo Credit: Ilya Pavlov on Unsplash&lt;/p&gt;

</description>
      <category>github</category>
      <category>githubcopilot</category>
      <category>machinelearning</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Migrate Adonis.js v4 user passwords to v5</title>
      <author>Chirill Ceban</author>
      <pubDate>Tue, 06 Jul 2021 16:15:10 +0000</pubDate>
      <link>https://dev.to/bitkidd/migrate-adonis-js-v4-user-passwords-to-v5-2m21</link>
      <guid>https://dev.to/bitkidd/migrate-adonis-js-v4-user-passwords-to-v5-2m21</guid>
      <description>&lt;p&gt;A new version of &lt;a href="https://adonisjs.com"&gt;Adonis.js&lt;/a&gt; isn't just a simple update, it is a complete revamp of all the core modules and structure including hashing mechanism.&lt;/p&gt;

&lt;p&gt;Prior the update Adonis.js used plain &lt;code&gt;bcrypt&lt;/code&gt; hashing implementation but now it became more standartized, the use of &lt;a href="https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md"&gt;PHC string format&lt;/a&gt; allows to incorporate different hashers and verify the hashes against the current configuration and then decide if the hash needs to be rehashed or not.&lt;/p&gt;

&lt;p&gt;This change leads to a situation when old v4 hashes will not be compatible with v5 and your users will not be able to login.&lt;/p&gt;

&lt;p&gt;The way to resolve this problem I'd describe in three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expand hasher with our own &lt;code&gt;legacy&lt;/code&gt; driver&lt;/li&gt;
&lt;li&gt;On user authentication attempt check if the password has been hashed using an old hasher, if yes, use our new &lt;code&gt;legacy&lt;/code&gt; driver&lt;/li&gt;
&lt;li&gt;Authenticate user and rehash password using a new hasher, in my case I'm using &lt;code&gt;argon2&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#expanding-the-hasher"&gt;
  &lt;/a&gt;
  Expanding the hasher
&lt;/h3&gt;

&lt;p&gt;To expand the hasher we have to create a new local provider by running a corresponding command inside our projects folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace make:provider LegacyHasher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a new provider file inside &lt;code&gt;/providers&lt;/code&gt; folder. After the file has been generated, we have to add it to &lt;code&gt;.adonisrc.json&lt;/code&gt; into &lt;code&gt;providers&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;Before actually expending we have to create a new &lt;code&gt;Hash&lt;/code&gt; driver, as an example we can use the code provided in an official documentation &lt;a href="https://docs.adonisjs.com/guides/security/hashing#adding-a-custom-driver"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created a separate folder inside &lt;code&gt;/providers&lt;/code&gt;, named it &lt;code&gt;LegacyHashDriver&lt;/code&gt; and placed my &lt;code&gt;legacy&lt;/code&gt; driver there (inside an &lt;code&gt;index.ts&lt;/code&gt; file).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bcrypt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Implementation of custom bcrypt driver
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Hash value
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Verify value
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashedValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;plainValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plainValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hashedValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it depends on a &lt;code&gt;bcrypt&lt;/code&gt; package, you'll have to install it before running.&lt;/p&gt;

&lt;p&gt;Having created a new driver, we can now expand the &lt;code&gt;Hash&lt;/code&gt; core library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApplicationContract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Application&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./LegacyHashDriver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LegacyHasherProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApplicationContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LegacyHashDriver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two additional things we have to do before proceeding to actual testing of implementation. We have to add our new hasher to &lt;code&gt;contracts/hash.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;HashersList&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BcryptConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BcryptContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;argon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgonConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArgonContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;legacy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
      &lt;span class="nl"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HashDriverContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add it to &lt;code&gt;config/hash.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;legacy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#authenticating-users-with-legacy-hasher"&gt;
  &lt;/a&gt;
  Authenticating users with legacy hasher
&lt;/h3&gt;

&lt;p&gt;As user tries to login the first thing you do (after request validation) is user search, by email or username. When you find a corresponding record, you can check if the password hash has been generated using an old method, by testing it&lt;br&gt;
agains a simple regex. Then later verify it using the right hash driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="sr"&gt;2&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;aby&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isMatchedPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rehashing-old-user-password"&gt;
  &lt;/a&gt;
  Rehashing old user password
&lt;/h3&gt;

&lt;p&gt;Rehashing user password on login is the most convenient way to migrate to a new driver. I do this after I checked all the security things, found the user and know that the password is hashed using an old method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// rehash user password&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usesLegacyHasher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;internalServerError&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can test it and it should work. You can expand hasher not only to migrate from v4 to v5, but even when you try to build your app on top of existing database.&lt;/p&gt;

</description>
      <category>adonisjs</category>
      <category>adonis</category>
      <category>javascript</category>
    </item>
    <item>
      <title>24 time management tips for students</title>
      <author>CodeXtreame</author>
      <pubDate>Tue, 06 Jul 2021 15:46:43 +0000</pubDate>
      <link>https://dev.to/codextreame/24-time-management-tips-for-students-1hmi</link>
      <guid>https://dev.to/codextreame/24-time-management-tips-for-students-1hmi</guid>
      <description>&lt;ol&gt;
&lt;li&gt;The goal of realization&lt;/li&gt;
&lt;li&gt;Make a daily plan&lt;/li&gt;
&lt;li&gt;Keep your agenda.&lt;/li&gt;
&lt;li&gt;Your curriculum and priorities are ready.&lt;/li&gt;
&lt;li&gt;Set your time limit.&lt;/li&gt;
&lt;li&gt;Demanding work in priority.&lt;/li&gt;
&lt;li&gt;Learn to outsource.&lt;/li&gt;
&lt;li&gt;Configure your setting place.&lt;/li&gt;
&lt;li&gt;Ignore buffer time tasks and other tasks.&lt;/li&gt;
&lt;li&gt;Go offline on social media&lt;/li&gt;
&lt;li&gt;Do not multitask.&lt;/li&gt;
&lt;li&gt;Break Management.&lt;/li&gt;
&lt;li&gt;Don't wait for inspiration to do your work now.&lt;/li&gt;
&lt;li&gt;Follow 80-20 rules&lt;/li&gt;
&lt;li&gt;Use the online calendar.&lt;/li&gt;
&lt;li&gt;Create a TODO list.&lt;/li&gt;
&lt;li&gt;Don't hang on to small things.&lt;/li&gt;
&lt;li&gt;Use your waiting time.&lt;/li&gt;
&lt;li&gt;The rest day is Saturday or Sunday.&lt;/li&gt;
&lt;li&gt;Stop pretending to be perfect.&lt;/li&gt;
&lt;li&gt;Say No&lt;/li&gt;
&lt;li&gt;Be inspired.&lt;/li&gt;
&lt;li&gt;Do the same thing together.&lt;/li&gt;
&lt;li&gt;Sleep Well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All Topic Explanation : &lt;a href="https://rb.gy/rugced"&gt;https://rb.gy/rugced&lt;/a&gt;&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>management</category>
      <category>time</category>
      <category>students</category>
    </item>
    <item>
      <title>What is AWS InfiniDash?</title>
      <author>Rain Leander</author>
      <pubDate>Tue, 06 Jul 2021 15:39:42 +0000</pubDate>
      <link>https://dev.to/rainleander/what-is-aws-infinidash-2mjn</link>
      <guid>https://dev.to/rainleander/what-is-aws-infinidash-2mjn</guid>
      <description>&lt;p&gt;TL;DR: AWS InfiniDash is a fake project.&lt;/p&gt;

&lt;p&gt;It started innocently enough, with tweet:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I am convinced that a small and dedicated group of twitter devs could tweet hot takes about a completely made up AWS product, idk AWS Infinidash or something, and it would appear as a requirement on job specs within a week&lt;/p&gt;— Joe Nash (@jna_sh) &lt;a href="https://twitter.com/jna_sh/status/1410178986978775040?ref_src=twsrc%5Etfw"&gt;June 30, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;And it exploded from there.&lt;/p&gt;

&lt;p&gt;Ellen Korbes made an explanatory spoof video:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;hope this helps someone re: infinidash &lt;a href="https://twitter.com/hashtag/i8h?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#i8h&lt;/a&gt; &lt;a href="https://t.co/fmzLt6WH5b"&gt;pic.twitter.com/fmzLt6WH5b&lt;/a&gt;&lt;/p&gt;— @ellenkorbes (@ellenkorbes) &lt;a href="https://twitter.com/ellenkorbes/status/1410796865126346755?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Sy Brand followed up with their own explanation using a bubble machine and their cat:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;AWS Infinidash explained with a bubble machine I found in a cupboard and my cat &lt;a href="https://t.co/h9TToTsDxk"&gt;pic.twitter.com/h9TToTsDxk&lt;/a&gt;&lt;/p&gt;— Sy Brand (&lt;a class="mentioned-user" href="https://dev.to/tartanllama"&gt;@tartanllama&lt;/a&gt;
) &lt;a href="https://twitter.com/TartanLlama/status/1410959645238308866?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;The most AMAZING song was composed and performed:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;An ode to Infinidash - the imaginary AWS service! &lt;a href="https://t.co/3dCntHtUyG"&gt;pic.twitter.com/3dCntHtUyG&lt;/a&gt;&lt;/p&gt;— Forrest Brazeal (&lt;a class="mentioned-user" href="https://dev.to/forrestbrazeal"&gt;@forrestbrazeal&lt;/a&gt;
) &lt;a href="https://twitter.com/forrestbrazeal/status/1410647222853771266?ref_src=twsrc%5Etfw"&gt;July 1, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Massive application developer, Signal, followed up with their own tweet:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Here at Signal we have always placed an emphasis on developer productivity, so Infinidash lifecycle management has been at the core of everything we do from the jump. We hire for it accordingly: &lt;a href="https://t.co/op9ycS9mKM"&gt;&lt;/a&gt;&lt;a href="https://t.co/op9ycS9mKM"&gt;https://t.co/op9ycS9mKM&lt;/a&gt;&lt;/p&gt;— Signal (@signalapp) &lt;a href="https://twitter.com/signalapp/status/1411082628514697217?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;And, yes, a stream with a live demo arrived:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Y'all aren't ready for this AWS &lt;a href="https://twitter.com/hashtag/Infinidash?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Infinidash&lt;/a&gt; live stream&lt;br&gt;&lt;br&gt;Make sure you like and subscribe!🔔&lt;a href="https://t.co/Oj3YGmABEK"&gt;&lt;/a&gt;&lt;a href="https://t.co/Oj3YGmABEK"&gt;https://t.co/Oj3YGmABEK&lt;/a&gt;&lt;/p&gt;— Justin Garrison (&lt;a class="mentioned-user" href="https://dev.to/rothgar"&gt;@rothgar&lt;/a&gt;
) &lt;a href="https://twitter.com/rothgar/status/1411007248965402626?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Now that you understand the joke, too, please don't bash on recruiters, AWS, or anyone who isn't in on the joke.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>infinidash</category>
    </item>
    <item>
      <title>How to migrate from Vue 2 to Vue 3?</title>
      <author>Mad Devs</author>
      <pubDate>Tue, 06 Jul 2021 15:32:27 +0000</pubDate>
      <link>https://dev.to/maddevs/how-to-migrate-from-vue-2-to-vue-3-4le8</link>
      <guid>https://dev.to/maddevs/how-to-migrate-from-vue-2-to-vue-3-4le8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As we know, the official release of Vue 3 was on September 18, 2020, it’s been almost a year, and I think it’s time to move on to it. Buuuut… it’s not that simple.&lt;/p&gt;

&lt;p&gt;At the moment, not all plugins are adapted to Vue 3, so you have to look for replacements. I tried it and you know, it didn’t work.&lt;/p&gt;

&lt;p&gt;But to our great luck, there is a plugin that has the same API as Vue 3. It was kindly provided by the developers themselves to soften the transition from version 2 to version 3. The plugin is called @vue/composition-api. Today we will talk about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-expect-from-this-article"&gt;
  &lt;/a&gt;
  What to expect from this article
&lt;/h2&gt;

&lt;p&gt;Important: This article is an introductory one with which I plan to start a series of articles on VUE 3. So, today I will show you just a few simple examples that will help whet your appetite and smoothly start your transition to the new version of Vue.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/blog/vue-form-validation/?utm_source=devto&amp;amp;utm_medium=migrate-vue-3"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vV_dQXsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d7ac7sl228xo2hfmr0t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-vuecompositionapi"&gt;
  &lt;/a&gt;
  Installing @vue/composition-api
&lt;/h2&gt;

&lt;p&gt;First, we need to update the packages. To do this, open a terminal and use the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;vue&lt;/span&gt; &lt;span class="nx"&gt;upgrade&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But note that you must have Vue CLI and Node.js installed.&lt;/p&gt;

&lt;p&gt;After running the command, you should see a list of packages that need to be updated. If the packages are updated, the message below will appear&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;DONE&lt;/span&gt;  &lt;span class="nx"&gt;Seems&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Good&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the Vue Composition api plugin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;vue&lt;/span&gt;&lt;span class="sr"&gt;/composition-api/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;ornpm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;vue&lt;/span&gt;&lt;span class="sr"&gt;/composition-ap&lt;/span&gt;&lt;span class="err"&gt;i
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, create a file in the scr folder where @vue/composition-api will be initialized. Let’s call it installCompositionApi.js and add the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;VueCompositionApi&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; 
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/composition-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VueCompositionApi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file must be imported into the main.js file, and the import function must be placed first in order for the scripts to initialize properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// INIT COMPOSITION API(VUE 3) &lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/installCompositionApi.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; 
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This concludes the installation of @vue/composition-api. The library is available globally and can be used in any of the files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rewriting-the-vuex-store"&gt;
  &lt;/a&gt;
  Rewriting the Vuex store
&lt;/h2&gt;

&lt;p&gt;The next step is to start rewriting the existing code. I would start with the Vuex store. Let’s do that. Let’s take one of the files, for example, the module responsible for the list of articles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getArticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/api/articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;

  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;SET_ARTICLES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getAllArticles&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getArticles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_ARTICLES&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_ARTICLES&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have to agree it’s pretty wordy. We have to write an additional layer in the form of mutations, actions to write data asynchronously. But come on.&lt;/p&gt;

&lt;p&gt;We delete everything without remorse and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @/modules/articles&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/composition-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getArticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/api/articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useArticles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAllArticles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getArticles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAllArticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useArticles&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The number of lines is reduced, and that is already good. Let’s sort it out.&lt;/p&gt;

&lt;p&gt;The first line imports the method &lt;strong&gt;ref&lt;/strong&gt;. It adds reactivity for any variable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ref&lt;/strong&gt; takes an argument and returns it wrapped in an object with the property &lt;strong&gt;value&lt;/strong&gt;, which can then be used to access or change the value of the reactive variable.&lt;/p&gt;

&lt;p&gt;In the code above, &lt;strong&gt;ref&lt;/strong&gt; has been added for the &lt;strong&gt;articles&lt;/strong&gt; variable, it is now reactive and has additional properties.&lt;/p&gt;

&lt;p&gt;Then we see a function that gets all articles by API and writes them into the articles variable.&lt;/p&gt;

&lt;p&gt;But please note that it writes them to the reactive &lt;strong&gt;value&lt;/strong&gt; property. If it doesn’t, the value won’t change.&lt;/p&gt;

&lt;p&gt;That’s all. Our updated &lt;strong&gt;store&lt;/strong&gt; works in exactly the same way and is even much simpler.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The only question that remains is whether Vuex is needed now?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/blog/how-to-set-up-automated-integration-tests-in-a-vue-application/?utm_source=devto&amp;amp;utm_medium=migrate-vue-3"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9yJitf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1alm0ytbqd0ds9ipsk3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rewriting-the-component"&gt;
  &lt;/a&gt;
  Rewriting the component
&lt;/h2&gt;

&lt;p&gt;After updating the code in our store, let’s rewrite the component that is responsible for displaying the articles.&lt;/p&gt;

&lt;p&gt;The component so far looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @/pages/articles&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;    /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;Search&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;searchQuery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Поиск&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArticlesTable&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapActions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticlesTable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Articles/Table&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ArticlesTable&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllArticles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllArticles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getAllArticles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see the good old Vue 2 syntax. Let’s rewrite it to the new one, and we should get it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @/pages/articles&amp;lt;template&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;    /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;Search&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;searchQuery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Поиск&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArticlesTable&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articlesList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;onMounted&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/composition-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useArticles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/modules/articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticlesTable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Articles/Table&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ArticlesTable&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAllArticles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useArticles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;articlesList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; 
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllArticles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;getAllArticles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="nx"&gt;articlesList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me tell you right away: in @vue/composition-api and therefore in Vue 3, “&lt;strong&gt;this&lt;/strong&gt;” is no longer available. You must use context instead. I’ll talk about it a bit later.&lt;/p&gt;

&lt;p&gt;Let’s take apart the new rewritten component.&lt;/p&gt;

&lt;p&gt;At the beginning of the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;isServer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;slots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 
&lt;span class="nl"&gt;ssrContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Object this&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The global “&lt;strong&gt;this&lt;/strong&gt;” object is now unavailable in components and we cannot use it to access, for example, the &lt;strong&gt;$route&lt;/strong&gt; object or any other global object. To solve this, we added the property root. Now it’s the only way to access all global objects, installed plugins, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Property value&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note, in the rewritten component, in the computed hook, we return the articles variable with the &lt;strong&gt;value&lt;/strong&gt; property. This must be done, otherwise, the &lt;strong&gt;articlesList&lt;/strong&gt; variable will have a reactive object, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;_isRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(...)&lt;/span&gt; 
&lt;span class="nx"&gt;_isRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; 
&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ƒ&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ƒ&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Vue 3, all reactive variables now have a &lt;strong&gt;value&lt;/strong&gt; property.&lt;/p&gt;

&lt;p&gt;But when using reactive variables in a template, you don’t need to call the value property as here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Wrong &lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The object returned by the &lt;strong&gt;setup()&lt;/strong&gt; function will be processed, and the value properties will be discarded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Right &lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in order to have access to the properties from setup in the &lt;strong&gt;template&lt;/strong&gt; block, you have to return them with the return method.&lt;/p&gt;

&lt;p&gt;At this point, I would like to complete the discussion. A more detailed discussion of the topic will follow in the future articles in &lt;a href="https://maddevs.io/blog/?utm_source=devto&amp;amp;utm_medium=migrate-vue-3"&gt;our blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The process of upgrading to version 3 using the @vue/composition-api plugin was very easy because it is fully compatible with Vue 2. The syntax is uncomplicated and easy to understand. I hope you won’t have any trouble mastering it.&lt;/p&gt;

&lt;p&gt;At this point I want to end and continue a more detailed discussion of the topics in future articles.&lt;/p&gt;

&lt;p&gt;To learn more about the Vue Composition API, follow this &lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you and see you soon!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/maddevsio/vue-madboiler?utm_source=devto&amp;amp;utm_medium=migrate-vue-3"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_AyZ-Af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gvmpsn3iz78z7epekx9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Previously published at &lt;a href="https://maddevs.io/blog/how-to-migrate-from-vue-2-to-vue-3/?utm_source=devto&amp;amp;utm_medium=migrate-vue-3"&gt;maddevs.io/blog&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Case Study: Large Scale CSS Refactoring in a Legacy Application</title>
      <author>Kathryn Grayson Nanz</author>
      <pubDate>Tue, 06 Jul 2021 15:25:34 +0000</pubDate>
      <link>https://dev.to/kathryngrayson/case-study-large-scale-css-refactoring-in-a-legacy-application-52lc</link>
      <guid>https://dev.to/kathryngrayson/case-study-large-scale-css-refactoring-in-a-legacy-application-52lc</guid>
      <description>&lt;p&gt;Have you ever faced a project so big, so intimidating, you weren't even really sure where to start? Like anything you did would just be chipping away at the base of a mountain that you'd never really be able to move? I found myself in that position not long ago, looking down the barrel of a large scale CSS refactoring project that I'd been asked to take the lead on. &lt;/p&gt;

&lt;p&gt;The application was huge, and the company had been working without front-end specialists for years, so there was a pretty low level of general CSS hygiene. It had gotten to the point where the tech debt had stacked up far enough that it was impacting the engineers' ability to actually write new code – slowing them down, because they were constantly fighting against a cascade of styles that weren't really intended to cascade. Very few styles were scoped appropriately. A search turned up 3,198 &lt;code&gt;!important&lt;/code&gt;s. The longer we looked, the more it looked like a pile of spaghetti we could never hope to untangle...and yet, throwing it all out and starting over wasn't a realistic option either. &lt;/p&gt;

&lt;p&gt;Tech loves to focus on the new and shiny, but realistically, many of us live our day-to-day lives working with code that is anything but. When I started looking for resources on large-scale CSS refactoring, I was surprised and disheartened to find very little at all on the subject. Christoph Reinartz has an excellent &lt;a href="https://www.youtube.com/watch?v=ALaQC4i1ax8"&gt;talk&lt;/a&gt; (and &lt;a href="https://tech.trivago.com/2016/02/02/large-scale-css-refactoring-at-trivago/"&gt;blog&lt;/a&gt;) on Large Scale CSS Refactoring at Trivago that I found &lt;em&gt;immensely&lt;/em&gt; helpful, but besides that...I realized I was going to have to figure this out on my own. &lt;/p&gt;

&lt;p&gt;So, that's why I'm here (and presumably, why YOU'RE here). Our CSS refactoring project isn't complete yet, so I (unfortunately) can't share any stats and figures with you yet. But that was also part of what I learned as part of this process – sometimes, with a big project like this, you have to be willing to just slowly chip away at it in the background, making improvements where you can and letting the "finish line" be more of a nebulous thing. &lt;/p&gt;

&lt;p&gt;But what I &lt;em&gt;can&lt;/em&gt; talk about is our high-level approach, and how we've been working at this consistently since the project began – while also continuing our work on new feature development. This isn't a glamorous, sparkly case study with a big finish, but it &lt;em&gt;is&lt;/em&gt; a realistic and effective one that's been making slow and steady progress – and rather than sit on this information until everything is 100% complete, I'd like to go ahead and get this out there, in the hopes that it will be helpful to someone else in a similar position. &lt;/p&gt;

&lt;p&gt;Because this is pretty long (hey, there's a lot involved in refactoring a whole application worth of CSS), here's a linked table of contents:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#plan"&gt;Our Plan of Attack&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#stage1"&gt;Stage 1: Assess the current situation and align on the goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#stage2"&gt;Stage 2: Establish baseline styles and structure&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#stage3"&gt;Stage 3: Refactor Page Level Styles&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#stage4"&gt;Stage 4: Refactor Shared Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stage5"&gt;Stage 5: Implement New Styles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#implementation"&gt;Implementing the Plan&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#lessons"&gt;Lessons Learned&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#slow"&gt;Slow and steady wins the race&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#be"&gt;Be ready &amp;amp; willing to pick it up and put it down (without giving it up)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#html"&gt;You can't refactor the CSS without refactoring your HTML (or, you technically can, but it's not a great idea)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hype"&gt;Hype up every little win&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#our-plan-of-attack"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Our Plan of Attack
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#stage-1-assess-the-current-situation-and-align-on-the-goal"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Stage 1: Assess the current situation and align on the goal
&lt;/h3&gt;

&lt;p&gt;First, we needed to really wrap our brains around the current situation. We had a lot of people with a little bit of knowledge about specific parts of the application, but very few people with &lt;em&gt;all&lt;/em&gt; the knowledge about the entire application. We needed to go full Captain Planet and combine our powers.&lt;/p&gt;

&lt;p&gt;To do this, we scheduled a call – a real monster of an all-day call, but we only wanted to have to do this once. We split the call into two parts: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Walking through the current file structure and application setup so everyone was familiar with our starting point. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aligning on our future vision, so we were all moving towards the same target. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the morning, we all got a full walkthrough of the application, focusing on the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determining which styles were linked to which files&lt;/li&gt;
&lt;li&gt;Finding all usages of third-party libraries and evaluating whether or not we could remove / replace them &lt;/li&gt;
&lt;li&gt;Making sure everyone understood how the CSS is compiled and what the final output looked like &lt;/li&gt;
&lt;li&gt;Walking through all the content currently in our Component Library &lt;/li&gt;
&lt;li&gt;Documenting, documenting, documenting! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last part was the most important. We wanted to make sure we had everything written down, so the knowledge wasn't just stored in people's heads anymore, but rather in a place everyone could come back to and reference as we worked. With the CSS being not-quite-ideal to begin with, this proved to be a crucial move. The less expected your setup is, the more important documentation becomes. &lt;/p&gt;

&lt;p&gt;In the afternoon, we turned our focus towards the future – what we wanted the application to look like when we were finished. This meant discussions around: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reviewing and adjusting our planned approach &lt;/li&gt;
&lt;li&gt;Reviewing and adjusting our new CSS Styleguide &lt;/li&gt;
&lt;li&gt;Deciding how we wanted to structure things moving forward – what was missing, what could we consolidate or delete entirely, where we want global variables live, etc.&lt;/li&gt;
&lt;li&gt;Deciding if we wanted to add any new libraries or tools to assist with our work &lt;/li&gt;
&lt;li&gt;Documenting, documenting, documenting! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was a long, full day, but by the time we all signed off, we were feeling confident and ready to tackle the next stage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stage-2-establish-baseline-styles-and-structure"&gt;
  &lt;/a&gt;
  &lt;a id="stage2"&gt;&lt;/a&gt;Stage 2: Establish baseline styles and structure
&lt;/h3&gt;

&lt;p&gt;Because CSS cascades, it's important to refactor from the top down. This is, of course, easier said than done. In this stage, we wanted to focus on setting a strong groundwork for everything moving forward. This meant we worked on the following tasks: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting our branch set up and determining our branching and merging strategy &lt;/li&gt;
&lt;li&gt;Creating any new files we needed and reorganizing the application CSS structure to support our agreed-upon future vision

&lt;ul&gt;
&lt;li&gt;For us, this meant creation of a new &lt;code&gt;global-styles&lt;/code&gt; file, consolidated from several "not-intentionally-global" global style files already in existence, and determining what would live in the application vs. the Component Library.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Installing and configuring any libraries we want to use.

&lt;ul&gt;
&lt;li&gt;For us, this referred to Prettier, a code formatter we agreed to use, and some small tweaks to our existing internal Component Library.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Removing any stylesheets we could safely delete without much work / adjustment. &lt;/li&gt;
&lt;li&gt;Writing global styles that we could leverage as we continued to work on this project. 

&lt;ul&gt;
&lt;li&gt;This one was important because we had a lot of inconsistent component-level styling. By getting our big stuff established up front, it gave us something to replace all that inconsistent stuff with. We defined a lot of variables and wrote a lot of mixins in this step. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#stage-3-refactor-page-level-styles"&gt;
  &lt;/a&gt;
  &lt;a id="stage3"&gt;&lt;/a&gt;Stage 3: Refactor Page Level Styles
&lt;/h3&gt;

&lt;p&gt;In this stage, we moved down the cascade by a step and focused on page / section level styles. This is something that will vary more widely based on the structure of your application, but in our case, the application was fairly easily broken down by "page" (in quotes because...the nature of single page applications is that they don't have "pages" but you get the idea). &lt;/p&gt;

&lt;p&gt;This was the point at which we really started digging into the mess. In fact, we ended up subdividing this stage into two Phases, in order to make it more manageable. It looked like this: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Phase 1&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move page styles into scoped stylesheets wherever they aren't already &lt;/li&gt;
&lt;li&gt;Replace third-party library components or one-off components with Component Library components wherever possible, and delete any associated styles that are no longer needed&lt;/li&gt;
&lt;li&gt;First pass refactoring on the new scoped stylesheets to meet our new CSS Styleguide rules, focusing on these main problem areas:

&lt;ul&gt;
&lt;li&gt;Renaming classes to use the OOCSS approach &lt;/li&gt;
&lt;li&gt;Refactor nesting to be no deeper than 3 levels &lt;/li&gt;
&lt;li&gt;Reduce lines of code by combining classes, reducing specificity, removing duplication, etc. &lt;/li&gt;
&lt;li&gt;Writing mixins and variables to support code simplification goal
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Phase 2&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refactor HTML, focusing on these main problem areas: 

&lt;ul&gt;
&lt;li&gt;Improving semantic structure &lt;/li&gt;
&lt;li&gt;Alignment with new OOCSS naming &amp;amp; structure &lt;/li&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Responsiveness &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Second pass refactoring on CSS, focusing on these main problem areas: 

&lt;ul&gt;
&lt;li&gt;Removing remaining &lt;code&gt;!important&lt;/code&gt;s wherever possible &lt;/li&gt;
&lt;li&gt;Grouping related styles into sections and documenting with comments &lt;/li&gt;
&lt;li&gt;Replacing hex codes, padding, fonts, etc. with variables that can be universally updated&lt;/li&gt;
&lt;li&gt;Swapping &lt;code&gt;px&lt;/code&gt; values with &lt;code&gt;rem&lt;/code&gt; values wherever possible &lt;/li&gt;
&lt;li&gt;Swapping &lt;code&gt;id&lt;/code&gt;s to &lt;code&gt;classes&lt;/code&gt; when there isn't a need for an id &lt;/li&gt;
&lt;li&gt;Writing / updating unit tests to accommodate any changes made&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Full disclosure: this is the stage we're currently on now – so everything from here on out is the plan we have to continue the work, but isn't work we've actually completed yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#stage-4-refactor-shared-components"&gt;
  &lt;/a&gt;
  &lt;a id="stage4"&gt;&lt;/a&gt;Stage 4: Refactor Shared Components
&lt;/h3&gt;

&lt;p&gt;Like basically every team, we have a folder of shared components that hang out in the application outside of the "page" structure mentioned above – because, of course, the whole idea is that they're shared between all those pages. This makes all the sense in the world...until it comes to CSS refactoring, in which case, you just kind of have to pick a time to handle them because they don't really fit naturally anywhere. We opted to wait until basically the end of the project to handle them to avoid the rabbit-holing and stepping-on-each-others'-toes that seemed really easy to slip into if we attempted to refactor them as part of whatever pages we found them used on. &lt;/p&gt;

&lt;p&gt;During this process, we plan to focus on the same kind of detailed comb-through that I've already outlined at the page level: a first, high-level sweep to delete and reorganize, followed by a second, more detail-oriented pass to really tidy things up. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stage-5-implement-new-styles"&gt;
  &lt;/a&gt;
  &lt;a id="stage5"&gt;&lt;/a&gt;Stage 5: Implement New Styles
&lt;/h3&gt;

&lt;p&gt;Technically, the implementation of new styles isn't something that would be required for a CSS refactoring project – in fact, usually "refactoring" means you can expect to see no major changes in the final product, just improvements in how it's executed. However, in our case, one of the driving reasons that we chose to prioritize the CSS refactoring project was to ease the implementation of a new Design System that had been in the works for quite some time. The thought of rolling that out over our existing CSS setup was...painful, to say the least. &lt;/p&gt;

&lt;p&gt;So, why am I including this in the guide, if I just spent the last paragraph acknowledging why it's not really part of a refactoring project? Well, because we actually found it to be an incredibly helpful carrot-on-the-stick approach to getting motivated and excited about what we all knew would realistically be a pretty painful project. Refactoring projects are rarely what anyone would call &lt;em&gt;fun&lt;/em&gt;, and &lt;em&gt;CSS&lt;/em&gt; refactoring? Not exactly a trip to Disneyland. Having this to look forward to at the end – a glimpse of how much nicer our application &lt;em&gt;could&lt;/em&gt; look, and all the things we'd be able to take advantage of once it was in place – it was honestly the light at the end of the tunnel. As we started defining variables and other global styles, we pulled from these new design system styles, which gave us a little sneak peek at what the whole app would look like when we were done. So we got to see those little visual improvements, as we worked, throughout the whole life of the project – and honestly, 10/10, would do again. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-plan"&gt;
  &lt;/a&gt;
  &lt;a id="implementation"&gt;&lt;/a&gt;Implementing the Plan
&lt;/h2&gt;

&lt;p&gt;If you've made it to this point in the writeup, then you probably already know that researching and planning something of that complexity is one thing, but actually making it happen is a whole other task. And, of course, try explaining to Project Management that you need several sprints worth of time to create...basically nothing. No new major features, just (to them) a little spit &amp;amp; polish. A hard sell, to be sure, no matter how much it would improve life on the development side. &lt;/p&gt;

&lt;p&gt;We knew, no matter how much we wanted to, this wouldn't be a project we would be able to just sit down and knock out – we realistically couldn't put new feature development on the back burner for that length of time. So, I &lt;del&gt;stole&lt;/del&gt; borrowed an approach that a previous manager of mine had used when we had a backlog full of small, low-priority bugs that seemed to always be growing, but never disruptive enough to warrant immediate attention: Bug Fix Friday. I've written about Bug Fix Friday in more detail &lt;a href="https://dev.to/kathryngrayson/bug-fix-fridays-2jpe"&gt;here&lt;/a&gt; (and how YOU can steal the idea for your own team), but the gist of it is that we set aside one day each week for all developers to focus on a non-feature-development-related task that we otherwise would have had difficulty allocating a chunk of time for. &lt;/p&gt;

&lt;p&gt;So, in our case, we started &lt;strong&gt;CSS Fix Fridays&lt;/strong&gt;. This allowed us to basically maintain our current pace on feature development projects, while still dedicating regular installments of time to CSS refactoring. It did, technically, slow down feature development &lt;em&gt;slightly&lt;/em&gt;, but for the most part we just factored that into our scoping of the project and honestly didn't see much of an overall change. It was (like many things about working in a legacy application) not ideal, but functional – and that's really all we needed it to be. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  &lt;a id="lessons"&gt;&lt;/a&gt;Lessons Learned
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#slow-and-steady-wins-the-race"&gt;
  &lt;/a&gt;
  &lt;a id="slow"&gt;&lt;/a&gt;Slow and steady wins the race
&lt;/h3&gt;

&lt;p&gt;A huge refactoring project like this is just going to take time. Huge amounts of time. Even if we had been able to block out all the time in one chunk, it would have still been huge. There's a very sizable chunk of research, planning, and getting everyone onboard that has to be done, and that's before you ever even start touching the code. It can be tempting to come in, guns blazing, with the idea that your enthusiasm will be contagious. And maybe it will be, for a little bit, right at first. But that isn't a long-term approach, and you need to be thinking long-term. Set your expectations (and everyone else's expectations) around the idea that you'll be working on this for a long time, and speed isn't necessarily the goal. A burst of work and enthusiasm right at the beginning isn't the goal, so much as setting a sustainable pace for the life of the project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-ready-amp-willing-to-pick-it-up-and-put-it-down-without-giving-it-up"&gt;
  &lt;/a&gt;
  &lt;a id="be"&gt;&lt;/a&gt;Be ready &amp;amp; willing to pick it up and put it down (without giving it up)
&lt;/h3&gt;

&lt;p&gt;In the same vein as the last one, sometimes things will come up that mean you need to hit the pause button on a long-term refactoring project like this. It's almost never going to be priority, and that's okay. The important part is to make sure you keep hitting play again, once you've completed the more urgent work. You need someone on your team to be the advocate for the refactoring work – someone to bring up in every meeting "Okay, so when can we restart CSS Fix Fridays?" You can't be afraid of sounding like a "nag" or a broken record – the point is to keep it in everyone's working memory, and not let it slip into obscurity if you ever have to take a break from the work. Set it down as many times as you need, just make sure you pick it back up again. &lt;/p&gt;

&lt;p&gt;Another potentially useful approach to this that we've used is to not think of the team as an all-or-nothing group. When there's urgent work to complete, ask yourself realistically if it's &lt;em&gt;really&lt;/em&gt; all-hands-on-deck work. If it's not (and it usually isn't), you might be able to have a few folks stay on the refactoring project, and a few folks split off to handle the other work. This keeps the refactoring project on the radar, even if those people aren't able to make huge amounts of progress. Remember: slow &amp;amp; steady. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-cant-refactor-the-css-without-refactoring-your-html-or-you-technically-can-but-its-not-a-great-idea"&gt;
  &lt;/a&gt;
  &lt;a id="html"&gt;&lt;/a&gt;You can't refactor the CSS without refactoring your HTML (or, you technically can, but it's not a great idea)
&lt;/h3&gt;

&lt;p&gt;99% of the time, if you've got bad CSS, you've also got bad HTML. They're like two sides of the same unfortunate coin. So if you're gonna be in there, attempting a huge CSS refactoring project, be ready to write some HTML, too. In order to get our CSS formatted using the OOCSS approach we had all agreed on, it meant making some significant changes. Not to mention, once we got in there, we found a lot of non-semantic, unaccessible HTML just kind of...hanging out. Divs on spans on divs; not cool. It seems kind of obvious in retrospect, but it wasn't something I had considered and factored in when originally writing up the plans for our refactoring project – but you don't have to make the same mistake. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hype-up-every-little-win"&gt;
  &lt;/a&gt;
  &lt;a id="hype"&gt;&lt;/a&gt;Hype up every little win
&lt;/h3&gt;

&lt;p&gt;The combination of "giant project" with "no set completion date" and "not really fun to begin with" can all add up to "one pretty big bummer". It's easy for morale to get low, and you can't even really blame anyone for that. I've found that the answer is &lt;em&gt;not&lt;/em&gt; to pretend that it's awesome and we're all actually having a great time (mandatory fun, anyone?), but rather to make an effort to highlight genuine wins and successes whenever we have them. And you'll find that you actually have them quite a lot, as long as you're not expecting something to be HUGE in order for it to be a win. Got one component completely refactored? Awesome, gif party in Slack. Wrote some new mixins that everyone can use now? Fantastic, have a party parrot. Closed a whole ticket? Time to hype you up, my friend! Give people public kudos, see and appreciate their work, leave positive comments on code reviews, share screenshots. Make Slack a fun, positive place to be when you're working on this project. It's an undertaking, and if you wait for it to be 100% done before you start celebrating, you're gonna be waiting a long time. There are always everyday wins, and when you're working on this, it's more important than ever to lift those up and honor them. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CSS3 Clip-Path Property.</title>
      <author>Swastik Yadav</author>
      <pubDate>Tue, 06 Jul 2021 15:18:54 +0000</pubDate>
      <link>https://dev.to/swastikyadav/css3-clip-path-property-1dne</link>
      <guid>https://dev.to/swastikyadav/css3-clip-path-property-1dne</guid>
      <description>&lt;p&gt;I recently learned about the clip-path property in CSS3.&lt;/p&gt;

&lt;p&gt;The clip-path creates a clipping region that sets what part of an element should be shown.&lt;/p&gt;

&lt;p&gt;This can help in creating really cool slanted Hero sections. The following CSS code snippet will create a slanted hero background section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;polygon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="nt"&gt;vh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPwySrlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFA-ONWuU-jow/article-inline_image-shrink_1000_1488/0/1618950115948%3Fe%3D1631145600%26v%3Dbeta%26t%3D0uSO8ScJiarrf6FUIxo6bRSEEcznXihYSbrK6iZv6v8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPwySrlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFA-ONWuU-jow/article-inline_image-shrink_1000_1488/0/1618950115948%3Fe%3D1631145600%26v%3Dbeta%26t%3D0uSO8ScJiarrf6FUIxo6bRSEEcznXihYSbrK6iZv6v8" alt="clip-path-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The polygon shape takes 4 values in a pair of (x y) each for top-left, top-right, bottom-right, and bottom-left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-djQOyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFpDe6iPFhlAw/article-inline_image-shrink_1500_2232/0/1618950367501%3Fe%3D1631145600%26v%3Dbeta%26t%3DBZciS9FGUspGymZevpHaFwOQLUoRIvng13Y5eSgraYg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-djQOyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFpDe6iPFhlAw/article-inline_image-shrink_1500_2232/0/1618950367501%3Fe%3D1631145600%26v%3Dbeta%26t%3DBZciS9FGUspGymZevpHaFwOQLUoRIvng13Y5eSgraYg" alt="clip-path-explanation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But sometimes it can be very tricky to create a clipping path. So, here is a really cool tool for generating a CSS clip-path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bennettfeely.com/clippy/"&gt;https://bennettfeely.com/clippy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go and create your own clip designs, shapes, and backgrounds.&lt;/p&gt;




&lt;p&gt;If you enjoyed reading this little CSS tip then, join my newsletter &lt;a href="https://8020lessons.in/"&gt;here&lt;/a&gt;. There I share more amazing stuff on web-development.&lt;/p&gt;

&lt;p&gt;I also help beginners to Learn CSS in a 7 days workshop without the tutorial hell, with &lt;a href="https://8020lessons.in/"&gt;8020-CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks a lot for reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
