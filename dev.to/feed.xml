<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React.js - JSX</title>
      <author>The Nerdy Dev</author>
      <pubDate>Wed, 17 Nov 2021 09:10:37 +0000</pubDate>
      <link>https://dev.to/thenerdydev/reactjs-jsx-4a3g</link>
      <guid>https://dev.to/thenerdydev/reactjs-jsx-4a3g</guid>
      <description>&lt;p&gt;Hey guys üëãüèª,&lt;br&gt;
In this post, let us learn what JSX is in React and why it is important for us as React developers to understand it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GJOTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxogniwdxp9s31063jvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GJOTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxogniwdxp9s31063jvq.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, let us understand&lt;/p&gt;

&lt;p&gt;‚úî What is JSX ?&lt;br&gt;
‚úî Example of JSX&lt;br&gt;
‚úî JSX code being equivalent to React.createElement calls.&lt;br&gt;
‚úî JSX Restrictions&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jsx-"&gt;
  &lt;/a&gt;
  What is JSX ?
&lt;/h2&gt;

&lt;p&gt;JSX is a syntax extension to JavaScript. *It is used to write HTMLish code in JavaScript files which later gets transpiled to normal JavaScript by our development workflow. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-of-jsx"&gt;
  &lt;/a&gt;
  Example of JSX
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QuIIx9GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m85vhghflvem3s5pjcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QuIIx9GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m85vhghflvem3s5pjcz.png" alt="Image description" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, you can see we are returning &lt;strong&gt;HTMLish kind of code&lt;/strong&gt; from our component function. &lt;strong&gt;personName&lt;/strong&gt; is a variable that we are interpolating right inside the template of our component. This in the end gets transpiled to JavaScript. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before Transpilation&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QuIIx9GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m85vhghflvem3s5pjcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QuIIx9GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m85vhghflvem3s5pjcz.png" alt="Image description" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After Transpilation&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VWcosHbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du4p7eot77dgy4gji72z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWcosHbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du4p7eot77dgy4gji72z.png" alt="Image description" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSX code is nothing but multiple calls to the &lt;strong&gt;React.createElement&lt;/strong&gt; method to build up the HTML for our component. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsx-restrictions"&gt;
  &lt;/a&gt;
  JSX Restrictions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It allows us to write &lt;strong&gt;HTMLish&lt;/strong&gt; code that we write in JavaScript files. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It enforces restrictions on some keywords that we cannot use like &lt;strong&gt;class&lt;/strong&gt;, &lt;strong&gt;for&lt;/strong&gt; etc that are reserved keywords in JavaScript. We have equivalents for them though. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSX expression must have exactly one &lt;strong&gt;root&lt;/strong&gt; element and it is under this &lt;strong&gt;root&lt;/strong&gt; element that you nest your JSX code. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So this is it for this article. Thanks for reading.&lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>A Brief Introduction to React.js </title>
      <author>The Nerdy Dev</author>
      <pubDate>Wed, 17 Nov 2021 08:42:21 +0000</pubDate>
      <link>https://dev.to/thenerdydev/a-brief-introduction-to-reactjs-1boh</link>
      <guid>https://dev.to/thenerdydev/a-brief-introduction-to-reactjs-1boh</guid>
      <description>&lt;p&gt;Hey everyone üëãüèª,&lt;/p&gt;

&lt;p&gt;In this article, let us cover a brief introduction to React.js &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBcfzzyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkr6xqxwwyrtqh76lznw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBcfzzyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkr6xqxwwyrtqh76lznw.jpg" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React is an open source, front-end JavaScript Library for building &lt;em&gt;modern sleek user interfaces&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is maintained by Facebook. It is used to create SPAs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-react-"&gt;
  &lt;/a&gt;
  Why React ?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Uses &lt;em&gt;component based architecture&lt;/em&gt; to structure your application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allows you to write reusable components that can be used across different applications &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Easy to learn&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensures stable code. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#features-of-react"&gt;
  &lt;/a&gt;
  Features of React
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Optimization of code using a complex development workflow already done for us. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing HTMLish Code in JavaScript files using JSX. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster rendering because of Virtual DOM. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-react"&gt;
  &lt;/a&gt;
  Disadvantages of React
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Not a complete framework&lt;/strong&gt; &lt;br&gt;
Compared to Angular which is like &lt;em&gt;a kitchen of tools&lt;/em&gt; that has everything built in, React depends on a lot of other external libraries that glue with it for creating modern frontends. &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The credits for the vectors used in above articles goes to &lt;strong&gt;Vecteezy&lt;/strong&gt; : &lt;br&gt;
&lt;a href="https://www.vecteezy.com/free-vector/web-developer"&gt;Web Developer Vectors by Vecteezy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Meditee: Medium like Markdown editor</title>
      <author>Anthony Lagrede</author>
      <pubDate>Wed, 17 Nov 2021 08:36:57 +0000</pubDate>
      <link>https://dev.to/alagrede/meditee-medium-like-markdown-editor-4pbk</link>
      <guid>https://dev.to/alagrede/meditee-medium-like-markdown-editor-4pbk</guid>
      <description>&lt;p&gt;Working on my favorite project &lt;a href="https://znote.io"&gt;Znote&lt;/a&gt; a &lt;strong&gt;Note-taking app and Javascript Lab&lt;/strong&gt;, I am currently evaluating existing libraries offering a dedicated writing experience to improve my knowledge.&lt;/p&gt;

&lt;p&gt;During this study, I rediscovered &lt;a href="https://draftjs.org/"&gt;DraftJS&lt;/a&gt; an impressive &lt;em&gt;WYSIWYG&lt;/em&gt; library backed by Facebook, for editing formatted text with high level features like undo/redo in addition to an extensible block mechanism.&lt;/p&gt;

&lt;p&gt;In this rich and mature community, I also found other &lt;a href="https://github.com/nikgraf/awesome-draft-js"&gt;awesome&lt;/a&gt; projects and specifically &lt;a href="https://github.com/brijeshb42/medium-draft"&gt;Medium-draft&lt;/a&gt;, which is a beautiful Medium like rich text editor (built upon &lt;a href="https://facebook.github.io/draft-js/"&gt;draft-js&lt;/a&gt;), eliminating mouse usage by adding relevant keyboard shortcuts.&lt;/p&gt;

&lt;p&gt;These Markdown keyboard shortcuts are really pleasant to use and the integrated side buttons and toolbars are really well built.&lt;/p&gt;

&lt;p&gt;Unfortunately, Draft.js &lt;strong&gt;doesn't natively Markdown&lt;/strong&gt; and even if there are good initiatives, I didn't find a correct Draft/Markdown converter. So I decided to write my own Markdown converter. Moreover, &lt;strong&gt;it could be cool üòé to use DraftJS to edit your Markdown files, right?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is why I come up with a small fully-packaged Desktop application: &lt;a href="https://github.com/alagrede/meditee"&gt;&lt;strong&gt;Meditee&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://github.com/alagrede/meditee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8sFm5m2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu14dfovu5blcmvw1l2b.png" alt="Meditee logo" width="128" height="128"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meditee"&gt;
  &lt;/a&gt;
  Meditee
&lt;/h2&gt;

&lt;p&gt;Meditee is built on top of the &lt;strong&gt;Medium draft&lt;/strong&gt; library and &lt;strong&gt;Electron&lt;/strong&gt; with a custom Markdown two-way converter. This app is also &lt;strong&gt;Free and Open-source&lt;/strong&gt; like all its underlying components.&lt;/p&gt;

&lt;p&gt;This application is built with a &lt;em&gt;relatively&lt;/em&gt; limited amount of code to let you understand how to interact with Draft and Markdown. It could be a source of inspiration for your future project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are free to use the &lt;a href="https://github.com/alagrede/meditee#download"&gt;prebuilt&lt;/a&gt; app or build it from source&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JbaJxia2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dq8zhg4bbuhhan2l98km.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JbaJxia2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dq8zhg4bbuhhan2l98km.gif" alt="Meditee demo" width="880" height="628"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features üí°
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Read/Write Markdown&lt;/strong&gt; files&lt;/li&gt;
&lt;li&gt;Support mapping of inline styles: &lt;strong&gt;Bold/Italic/Strike/Code&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Support of block styles: &lt;strong&gt;Titles, Quotes, Break, List(OL/UL and TODOS)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Links&lt;/strong&gt; and &lt;strong&gt;Images&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code&lt;/strong&gt; block &lt;strong&gt;highlight&lt;/strong&gt; with auto-detection language&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Emoji&lt;/strong&gt; support&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dirty flag&lt;/strong&gt; when file is edited with a confirmation before to quit&lt;/li&gt;
&lt;li&gt;A Dark theme&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  Roadmap üìö
&lt;/h3&gt;

&lt;p&gt;DraftJS has various interesting &lt;a href="https://www.draft-js-plugins.com/"&gt;plugins&lt;/a&gt;. I will be happy to know which plugins you are interested in. &lt;br&gt;
I have already planned to integrate some features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontmatter&lt;/li&gt;
&lt;li&gt;Mermaid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in helping me, I will be happy to read your suggestions and Pull Requests: &lt;a href="https://github.com/alagrede/meditee/discussions"&gt;Discussions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those who would like to see this kind of editor in &lt;a href="https://znote.io"&gt;Znote&lt;/a&gt; you can also reach me the &lt;a href="https://github.com/alagrede/znote-app/discussions"&gt;Znote github&lt;/a&gt; to discuss.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate"&gt;Electron react boilerplate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/brijeshb42/medium-draft"&gt;Medium-draft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hope you will enjoy this small app:&lt;/strong&gt; &lt;a href="https://github.com/alagrede/meditee"&gt;Meditee Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>draftjs</category>
      <category>electron</category>
      <category>markdown</category>
    </item>
    <item>
      <title>9 Python Automation Ideas For Pythonistas</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Wed, 17 Nov 2021 08:33:35 +0000</pubDate>
      <link>https://dev.to/unitybuddy/9-python-automation-ideas-for-pythonistas-13jl</link>
      <guid>https://dev.to/unitybuddy/9-python-automation-ideas-for-pythonistas-13jl</guid>
      <description>&lt;p&gt;Hello, buddies! Did you know Python is known as &lt;em&gt;an all-rounder programming language&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Yes, it is, though it shouldn‚Äôt be used on every single project.&lt;/p&gt;

&lt;p&gt;We can use it to create desktop applications, games, mobile apps, websites, and system software. It is one of the most suitable language for Automation. But what to Automate? So, today we are going to see what to automate using Python. Simply, Python automation ideas üòä &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-automate-the-login-process-for-sites"&gt;
  &lt;/a&gt;
  1. Automate The Login Process For Sites
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihukV_XU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966372375/K6rsrB0Q-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihukV_XU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966372375/K6rsrB0Q-.png" alt="image.png" width="626" height="417"&gt;&lt;/a&gt;&lt;br&gt;
There Are Some Social Sites That we use every day Like Facebook, Twitter, Instagram and etc. Every time you want to log in you need to enter your login id and password which is a very boring procedure. Using python and selenium you can automate the login process. Write a script and pass the user id and password. The script will log in to your account automatically. &lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://theinsightfulcoder.com/automating-facebook-login-using-python"&gt;this article&lt;/a&gt; by @&lt;a href="https://dev.to@SaiAshish"&gt;Sai Ashish Konchada&lt;/a&gt;, where he shows how to automate Facebook login using Python.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-desktop-automation-voice-assistant"&gt;
  &lt;/a&gt;
  2. Desktop Automation (Voice Assistant)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xxn1XlK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966419223/Qp_CibWTi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xxn1XlK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966419223/Qp_CibWTi.png" alt="image.png" width="880" height="493"&gt;&lt;/a&gt;&lt;br&gt;
This Automation Requires lots of work and dedication, has no end. We can use python and its different libraries to create a desktop assistant for you that can do almost every task that you do on your pc. &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;webbrowser&lt;/code&gt;, and &lt;code&gt;speech recognition&lt;/code&gt; are such libraries you can use.&lt;/p&gt;

&lt;p&gt;Luckily, I have 2 articles for you. Check'em out!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/make-your-tasks-automated-with-your-voice"&gt;Make Your Tasks Automated With Your Voice üî•&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/make-your-own-jarvis-using-python"&gt;Make Your Own Jarvis Using Python üî•&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#3-email-automation"&gt;
  &lt;/a&gt;
  3. Email Automation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZnbQkIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966425167/uTQhNaOIg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZnbQkIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966425167/uTQhNaOIg.png" alt="image.png" width="620" height="300"&gt;&lt;/a&gt;&lt;br&gt;
Are You Still Writing emails for every client by your hand? Well you can automate emails using python. Create a CSV File and store all the emails and information you want to send then use the email package to send emails. You can check this article to get an insight. Just use a Loop to iterate over each row of CSV and Your Thousands of emails with custom messages are automated! ‚û∞&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-automatic-desktop-cleaner"&gt;
  &lt;/a&gt;
  4. Automatic Desktop Cleaner
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGh7d3qW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966489825/72-X3vn_6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGh7d3qW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966489825/72-X3vn_6.png" alt="image.png" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like to keep my desktop clean always. I don‚Äôt like seeing a desktop with a lot of junk and useless files. If you are someone who likes to keep your desktop in an arranged manner, you can definitely consider doing this automation project.&lt;/p&gt;

&lt;p&gt;The automatic desktop cleaner is going to be a project that can help you arrange various files and folders on your computer and also remove junk files.&lt;/p&gt;

&lt;p&gt;Some of the functionalities of this desktop cleaner include tasks like automatic shifting of downloaded files to appropriate folders, file organization based on required criteria, and arrangement of files based on different types.&lt;/p&gt;

&lt;p&gt;If you like to automate the process of cleaning your desktop, check out this &lt;a href="https://www.youtube.com/watch?v=HcZ3gS1Rgcs&amp;amp;t=150s"&gt;video&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-sms-automation"&gt;
  &lt;/a&gt;
  5. SMS Automation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kE-eRE1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966515440/rqAWWXPT3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kE-eRE1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966515440/rqAWWXPT3.png" alt="image.png" width="880" height="494"&gt;&lt;/a&gt;&lt;br&gt;
Are you tired of writing SMS from your phone. Just use python and free SMS service(&lt;code&gt;fast2sms&lt;/code&gt;) to send SMS from your desktop. We can even take it further by writing a bat script that runs our Python script with just a single click. and if you are a crazy geek then you can take it more further by writer a keylogger that reads your keys and on a perfect combination of keys, it launches the app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-instagram-automation"&gt;
  &lt;/a&gt;
  6. Instagram Automation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dibz_Y8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966541180/LBZa8bC4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dibz_Y8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966541180/LBZa8bC4j.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Social media plays an active role in our daily life, and the activities we do in these apps are almost recurring ones. So why not try automating these social media activities!&lt;/p&gt;

&lt;p&gt;In this project, we try to automate Instagram activities like photo uploading, following and unfollowing users, commenting etc. Instabot is used here to interact with Instagram.&lt;/p&gt;

&lt;p&gt;The same procedure can be applied to automate other social media activities too. For more information, go through &lt;a href="https://ayushirawat.com/how-to-make-an-instagram-bot-with-python"&gt;this article&lt;/a&gt; by @&lt;a href="https://dev.to@ayushi7rawat"&gt;Ayushi Rawat&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-audiobooks"&gt;
  &lt;/a&gt;
  7. Audiobooks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXUbqXz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966552822/5LPxqWKru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXUbqXz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966552822/5LPxqWKru.png" alt="image.png" width="880" height="660"&gt;&lt;/a&gt;&lt;br&gt;
Kindle is the biggest seller of audiobooks and they sell audiobooks for 9.99 dollars per month. It is not too much but still, you have to pay some money but using python you don‚Äôt have to pay a single penny just some lines of code and your Audiobook is ready. &lt;code&gt;pyttsx3&lt;/code&gt; is a python library in python that can be used to convert the text into audio. You can even change the voice, pitch, and rate according to your requirement. &lt;/p&gt;

&lt;p&gt;It's pretty simple, Use the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyttsx3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;PyPDF2&lt;/span&gt;

&lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mybook.pdf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;' rb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Add path
&lt;/span&gt;&lt;span class="n"&gt;pdf_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyPDF2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfFileReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;num_pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdf_reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numPages&lt;/span&gt;
&lt;span class="n"&gt;play&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyttsx3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Playing Audio Book'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_pages&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#iterating through all pages
&lt;/span&gt;    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdf_reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extractText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#extracting text
&lt;/span&gt;
    &lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runAndWait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-morning-web-automation"&gt;
  &lt;/a&gt;
  8. Morning Web Automation
&lt;/h2&gt;

&lt;p&gt;Every day when we start our work, we usually open a few common websites like StackOverflow, documentation of the library, Spotify, and youtube. &lt;/p&gt;

&lt;p&gt;We can use the web browser module and bash scripting to automate the web. Just write a simple script that opens multiple websites at a time. Next, use the bash and VBS script to run the script without a console with a single click. &lt;/p&gt;

&lt;p&gt;Opening tabs are simply as follows,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webbrowser&lt;/span&gt;

 &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stackoverflow.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hashnode.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"reddit.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-automatic-time-tracking-tool"&gt;
  &lt;/a&gt;
  9. Automatic Time Tracking Tool
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--16LNar1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966596599/sKRFgtPXA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16LNar1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627966596599/sKRFgtPXA.png" alt="image.png" width="880" height="474"&gt;&lt;/a&gt;&lt;br&gt;
If you are a productivity geek, then this is an amazing project for you. You can this project to manage your time wisely and enhance your productivity.&lt;/p&gt;

&lt;p&gt;The aim of this project is to automatically track the current website or application in use and also the time spent on these sites and applications. Using a JSON file, the data will be saved so that it can be used later as and when needed.&lt;/p&gt;

&lt;p&gt;We can specifically mention tracking usage of certain apps or sites that you overuse. This project can be pretty useful in analyzing your social media usage and control it if you wish to do so.&lt;/p&gt;

&lt;p&gt;So buddies, that's it! Hope you enjoyed it. Reading is not enough, you have to use them üòé Happy Coding!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>Trip Report: Meeting C++ 2021</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 17 Nov 2021 07:59:49 +0000</pubDate>
      <link>https://dev.to/sandordargo/trip-report-meeting-c-2021-3bki</link>
      <guid>https://dev.to/sandordargo/trip-report-meeting-c-2021-3bki</guid>
      <description>&lt;p&gt;I feel very lucky that I could attend so many C++ conferences during the last 2 years. It feels a bit strange, but without Covid, this would not have been possible.&lt;/p&gt;

&lt;p&gt;My last conference was &lt;a href="https://meetingcpp.com/2021/"&gt;Meeting C++&lt;/a&gt;, between 10th and 12th November. Even if it was fully virtual this year, I had a great time.&lt;/p&gt;

&lt;p&gt;At a point it was a bit stressful, it was definitely tiring, but it was totally worth it. I'm really grateful to my management for granting me the necessary time to attend it.&lt;/p&gt;

&lt;p&gt;Why was it stressful, you might ask?&lt;/p&gt;

&lt;p&gt;I gave a presentation about the &lt;a href="https://meetingcpp.com/2021/Speaker/items/Sandor_Dargo.html"&gt;basics of C++ concepts&lt;/a&gt; and while I'm generally not someone who stresses a lot, definitely not in advance, but during the presentation, I had some distractions and they made me nervous.&lt;/p&gt;

&lt;p&gt;A few minutes after I started I was told that the slides are not moving forward. So we had to restart the stream and it messed up my timing a bit and as a consequence, at the end, I couldn't take questions. The battery in my mouse died in the middle of the presentation and for some seconds I thought that my laptop froze. That's not all, but I don't want to bore you with the petty details.&lt;/p&gt;

&lt;p&gt;One needs practice to handle this. I've barely given a dozen talks during the last years and I felt that's already a lot. Then Phil Nash said at his talk that since 2015 he delivered about 115 talks. Oh la la!&lt;/p&gt;

&lt;p&gt;I don't like all positive reports, to me they feel not honest. I think we should not forget about the less great parts, so that we can improve. The one thing I didn't find great was the software used for the conference. As talks and Ask Me Anything sessions were categorized differently, it was hard to get one simple overview on the schedule. Talks could be exported to your calendar, other events couldn't be. Besides, based on my experience with other conference software, there were a bit too many technical difficulties.&lt;/p&gt;

&lt;p&gt;Anyway, these didn't overshadow the quality of the sessions. The organizers, with Jens in the lead, worked incredibly lot to make everything as smooth as possible and they made a great job. The more than 320 attendees made a good ambience, the comments, the questions were gentle and relevant at the same time. I didn't hear or read anything inappropriate.&lt;/p&gt;

&lt;p&gt;Once again, thanks for this great event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-3-favourite-talks"&gt;
  &lt;/a&gt;
  My 3 favourite talks
&lt;/h2&gt;

&lt;p&gt;Let me share my 3 favourite talks from the conference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zen-and-the-art-of-code-lifecycle-maintenance-by-phil-nash"&gt;
  &lt;/a&gt;
  Zen and the art of Code Lifecycle maintenance by Phil Nash
&lt;/h3&gt;

&lt;p&gt;It might be surprising, but one of my favourite talks were not about C++. Probably it's less surprising if I tell you that it was about software quality and it was delivered by the main organizer of &lt;a href="https://cpponsea.uk/"&gt;C++ On Sea&lt;/a&gt;, &lt;a href="https://twitter.com/phil_nash"&gt;Phil Nash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Software quality is something difficult to measure, it's even difficult to put it into words. Some even say that it's a meaningless marketing term. It's meaningless because everyone means something different while talking about it. &lt;/p&gt;

&lt;p&gt;Yet, people know what good quality software looks like when they see one. Still, that's something difficult to define upfront. One cannot not think about &lt;a href="https://corporate.findlaw.com/litigation-disputes/movie-day-at-the-supreme-court-or-i-know-it-when-i-see-it-a.html"&gt;Justice Potter Stewart trying to explain hard-core pornography&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Phil cited the criteria of the &lt;a href="https://www.it-cisq.org/"&gt;Consortium for Information &amp;amp; Software Quality&lt;/a&gt;, where they already tried to define software quality and they came up with 4 pillars:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;reliability&lt;/li&gt;
&lt;li&gt;performance efficient&lt;/li&gt;
&lt;li&gt;maintainability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phil rephrased some and added two more ending up with the following 6 elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;m&lt;/strong&gt;alleability / evolability&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;r&lt;/strong&gt;eliability&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;c&lt;/strong&gt;orrectness&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;r&lt;/strong&gt;easonability&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;a&lt;/strong&gt;pplicability&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;p&lt;/strong&gt;erformance / efficiency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connecting the initials made him realize that this list in this form is not really compelling - though I personally think it's related to quality...&lt;/p&gt;

&lt;p&gt;Anyways, he rephrased and reordered the elements and came up with &lt;em&gt;career&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;c&lt;/strong&gt;orrectness&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;a&lt;/strong&gt;pplicability&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;r&lt;/strong&gt;eliability&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;e&lt;/strong&gt;volability&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;e&lt;/strong&gt;efficiency&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;r&lt;/strong&gt;easonability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From that point, the talk could have been a bit boring if these elements had been covered one by one, but Phil was examining the intersections of the elements which was definitely interesting and I'd definitely recommend you to watch it. I particularly liked how he was putting fuzz testing into the intersection of correctness and reliability.&lt;/p&gt;

&lt;p&gt;He absolutely convinced me to read &lt;a href="https://www.amazon.com/gp/product/B0026772N8/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=B0026772N8&amp;amp;linkId=b6e3038308f349e9e00809ff90e2f1ed"&gt;Zen and the Art of Motorcycle Maintenance&lt;/a&gt; which I already started and I find it fascinating after the first few pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-rangify-your-code-by-tina-ulbrich"&gt;
  &lt;/a&gt;
  How to rangify your code by Tina Ulbrich
&lt;/h3&gt;

&lt;p&gt;There were some slots where I wanted to watch multiple talks at the same time. Luckily the uncut recordings were quickly available, so in the evenings and during the next days' lunchtimes I could watch some more talks.&lt;/p&gt;

&lt;p&gt;By the time I got to watch &lt;a href="https://twitter.com/_Yulivee_"&gt;Tina&lt;/a&gt;'s talk, I already heard many people recommending it. They were right, Tina gave a very interesting presentation with many real-life examples on how to use ranges in your code.&lt;/p&gt;

&lt;p&gt;I found it a great idea that she explained what qualifies her to talk about ranges and that she didn't just share youtube links of other videos at the end, but she took the time to explain whose videos and why she'd recommend watching them if you wanted to learn more about ranges.&lt;/p&gt;

&lt;p&gt;I don't want to share her examples, soon you can watch the talk, I'd rather share a few words on my impressions.&lt;/p&gt;

&lt;p&gt;If you are a regular reader of my blog, you know that I'm a fan of &lt;a href="https://www.sandordargo.com/blog/2020/05/13/loops-vs-algorithms"&gt;using standard algorithms over raw loops&lt;/a&gt;. I believe that they make your code not just more correct, but also easier to understand.&lt;/p&gt;

&lt;p&gt;For ranges, I don't see the same yet. In the simpler examples, I found the rangified code more readable for sure, but as we move forward with the presentation, the rangified versions were shorter for sure but more and more obscure - to me. &lt;/p&gt;

&lt;p&gt;I have no problem with the pipe syntax, I have no issues with functional programming concepts either, recently I even started to learn about Clojure that I truly enjoy.&lt;/p&gt;

&lt;p&gt;So what can be the issue?&lt;/p&gt;

&lt;p&gt;The issue is simply that I don't know enough about ranges. &lt;/p&gt;

&lt;p&gt;We have a lot of new &lt;em&gt;verbs&lt;/em&gt; introduced by the ranges library that were not available before and we have to learn them. We have to learn a lot of new vocabulary in order to be able to use ranges effectively.&lt;/p&gt;

&lt;p&gt;Tina's presentation is a great starting point to learn more. Watch it, stop it, try the code yourself, read the documentation and then continue watching the video.&lt;/p&gt;

&lt;p&gt;This is one of the videos that I don't recommend watching once, or watching all at once, but take more time to fully benefit from it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-dependencies-type-erasure-a-design-analysis-by-klaus-iglberger"&gt;
  &lt;/a&gt;
  Breaking Dependencies: Type Erasure - A Design Analysis by Klaus Iglberger
&lt;/h3&gt;

&lt;p&gt;At &lt;a href="https://cpponsea.uk/"&gt;C++ On Sea&lt;/a&gt; I attended a few hours of Klaus' workshop on modern C++ design patterns, but due to work matters, I couldn't stay the whole day. Yet, I was impressed by the calmity and professionality of his way of presenting. I knew I wanted to attend his presentation.&lt;/p&gt;

&lt;p&gt;As its schedule was conflicting with the evening routine of my kids, I watched it the other day. The only thing I lost was the availability to ask live. A fair deal to be able to tell some bedtime stories.&lt;/p&gt;

&lt;p&gt;In his talk, Klaus was sharing his thoughts on software design in general, inheritance and the strategy pattern as well. He covered much more than type erasure - which would have been already worth it.&lt;/p&gt;

&lt;p&gt;The most important challenge of software design is to welcome changes. Software will have to change, no matter what you think or do. It is meant to change by definition, that's why it's called &lt;em&gt;&lt;strong&gt;soft&lt;/strong&gt;ware&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With good design, you have to ease changeability and limit the number and the strength of dependencies.&lt;/p&gt;

&lt;p&gt;With the help of the good old shapes examples Klaus showed why inheritance on its own is not a - good - solution, how we can and how the STL uses the &lt;a href="https://en.wikipedia.org/wiki/Strategy_pattern"&gt;strategy pattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The bigger half of the presentation was dedicated to Type Erasure which lets us creating something that is still dynamic polymorphism but without the burden of any virtual functions. &lt;/p&gt;

&lt;p&gt;Type Erasure is a mixture of three design patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;External Polymorphism&lt;/li&gt;
&lt;li&gt;Bridge&lt;/li&gt;
&lt;li&gt;Prototype&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big strengths of this talk are the detailed example with tons of code and Klaus' great explanations. I don't even try to detail Type Erasure for you here in a couple of lines and I also don't want to claim that now I have a deep understanding of it.&lt;/p&gt;

&lt;p&gt;I'll keep revisiting this video and implement Type Erasure myself on some code katas and post my experience so that I can confirm Klaus' summary on the extremely interesting design pattern that reduces dependencies and improves the performance while also improving readability and comprehension. That sounds like an ideal combination.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-3-favourite-thoughts"&gt;
  &lt;/a&gt;
  My 3 favourite thoughts
&lt;/h2&gt;

&lt;p&gt;Besides my 3 favourite presentations, I'd also like to highlight 3 engaging thoughts that I heard during the conference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-the-alignment-trap-by-phil-nash"&gt;
  &lt;/a&gt;
  On the alignment trap by Phil Nash
&lt;/h3&gt;

&lt;p&gt;I'd like to mention one thought from &lt;a href="https://twitter.com/phil_nash"&gt;Phil Nash&lt;/a&gt;'s presentation on &lt;em&gt;Zen and the art of Code Lifecycle maintenance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;He mentioned the alignment trap that was introduced by &lt;a href="https://twitter.com/allankellynet"&gt;Allan Kelly&lt;/a&gt;. He examined many teams and put categorized them along two axes. What makes a team more successful? Doing the right thing or doing the things right?&lt;/p&gt;

&lt;p&gt;![Alignment Trap(&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/795ldsirjiujdw0pysl1.png"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/795ldsirjiujdw0pysl1.png&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;No surprise that the most successful teams are doing the right things the right way. But it might be surprising that doing the things right is more important than doing the right thing.&lt;/p&gt;

&lt;p&gt;The reason is that fixing what you do is much easier than fixing how you do things. It's easier to reach the ideal quadrant from the wrong thing/right way combination than from the right thing/wrong way combo.&lt;/p&gt;

&lt;p&gt;That's definitely a message that I'll share with my teammates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-tools-by-daniela-engert"&gt;
  &lt;/a&gt;
  On tools by Daniela Engert
&lt;/h3&gt;

&lt;p&gt;One thing that Daniela said during her Ask Me Anything session really resonated with me. As AMAs cannot be rewatched, I cannot quote her properly, but she said something like &lt;em&gt;each and every developer is a snowflake, we are really sensitive when it comes to our tooling. Therefore tools should adapt to the developers and not the other way around.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's a painful truth. Painful because so often we are left with poor tooling and we just try to find our ways around because we don't invest the time and money to find and/or develop tools fitting our needs.&lt;/p&gt;

&lt;p&gt;This thought is far from a novel idea, but it's a very important reminder for us to improve both our productivity and our satisfaction.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-forwarding-universal-references-by-nico-josuttis"&gt;
  &lt;/a&gt;
  On &lt;del&gt;forwarding&lt;/del&gt; universal references by Nico Josuttis
&lt;/h3&gt;

&lt;p&gt;Nico was mentioning certain ranges that cannot be passed by &lt;code&gt;const&amp;amp;&lt;/code&gt;. When you are unsure what kind of ranges should be accepted by a function, you should rather be prepared for everything.&lt;/p&gt;

&lt;p&gt;It's not that difficult in this case as there is a type, a reference that can refer to everything. While a normal non-&lt;code&gt;const&lt;/code&gt; reference cannot refer to temporary objects, a universal reference can. It can universally refer to anything by keeping all its attributes. That was the original usecase for unirversal references, and it's an old term. &lt;/p&gt;

&lt;p&gt;As time passed by, universal references (&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;) were more and more frequently used for perfect forwarding and Nico too started to use the term &lt;em&gt;forwarding references&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But time continued to pass by and we use them more and more not for forwarding, but to accept any kind of references and so people - including Nico - are using more and more the old term, &lt;em&gt;universal references&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;From a technical point of view this is not a particularly interesting story, but from a higher perspective I think it is fascinating. You cannot know how things are going to change, what kind of direction (technical) evolution or history itself takes.&lt;/p&gt;

&lt;p&gt;Old fads, habits and patterns that went out of fashion can reappear anytime and they might become more actual than ever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I would like to thank once more the organizers of &lt;a href="https://meetingcpp.com/2021/"&gt;Meeting C++&lt;/a&gt; for making this great event happen. It's another great place to be if you want to learn about trends and great techniques of modern C++.&lt;/p&gt;

&lt;p&gt;I shared here only a couple of talks and thoughts but I can assure you that there were many others that could have made it to this report. The talks will be soon available at the &lt;a href="https://www.youtube.com/c/MeetingCPP"&gt;Youtube page of Meeting C++&lt;/a&gt; and I'll also update this article with the links to the referenced talks once they are available to the public.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>conference</category>
      <category>meetingcpp</category>
      <category>tripreport</category>
    </item>
    <item>
      <title>HTML tags | a</title>
      <author>Carlos Espada</author>
      <pubDate>Wed, 17 Nov 2021 07:36:35 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-a-3n1</link>
      <guid>https://dev.to/carlosespada/html-tags-a-3n1</guid>
      <description>&lt;p&gt;The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element (or anchor element), &lt;strong&gt;creates a hyperlink&lt;/strong&gt; to web pages, files, email addresses, locations in the same page, or anything else a URL can address.&lt;/p&gt;

&lt;p&gt;Its most important attribute is the &lt;code&gt;href&lt;/code&gt; attribute, which indicates the link's destination.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;href&lt;/code&gt; attribute is present, pressing the enter key while focused on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element will activate it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download"&gt;
  &lt;/a&gt;
  download
&lt;/h3&gt;

&lt;p&gt;Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Without a value, the browser will suggest a filename/extension, generated from various sources:

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Content-Disposition&lt;/code&gt; HTTP header&lt;/li&gt;
&lt;li&gt;The final segment in the URL path&lt;/li&gt;
&lt;li&gt;The media type (from the &lt;code&gt;Content-Type&lt;/code&gt; header, the start of a &lt;code&gt;data:&lt;/code&gt; URL or &lt;code&gt;Blob.type&lt;/code&gt; for a &lt;code&gt;blob:&lt;/code&gt; URL)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Defining a value suggests it as the filename. &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;&amp;lt;/code&amp;gt; characters are converted to underscores (&lt;code&gt;_&lt;/code&gt;). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary.&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;download&lt;/code&gt; only works for same-origin URLs, or the &lt;code&gt;blob:&lt;/code&gt; and &lt;code&gt;data:&lt;/code&gt; schemes.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;Content-Disposition&lt;/code&gt; header has different information from the &lt;code&gt;download&lt;/code&gt; attribute, resulting behavior may differ:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the header specifies a filename, it takes priority over a filename specified in the &lt;code&gt;download&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;If the header specifies a disposition of &lt;code&gt;inline&lt;/code&gt;, Chrome, and Firefox 82 and later, prioritize the attribute and treat it as a download. Firefox versions before 82 prioritize the header and will display the content inline.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#href"&gt;
  &lt;/a&gt;
  href
&lt;/h3&gt;

&lt;p&gt;The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs ‚Äî they can use any URL scheme supported by browsers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sections of a page with fragment URLs&lt;/li&gt;
&lt;li&gt;Pieces of media files with media fragments&lt;/li&gt;
&lt;li&gt;Telephone numbers with tel: URLs&lt;/li&gt;
&lt;li&gt;Email addresses with mailto: URLs&lt;/li&gt;
&lt;li&gt;While web browsers may not support other URL schemes, web sites can with &lt;code&gt;registerProtocolHandler()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hreflang"&gt;
  &lt;/a&gt;
  hreflang
&lt;/h3&gt;

&lt;p&gt;Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global &lt;code&gt;lang&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ping"&gt;
  &lt;/a&gt;
  ping
&lt;/h3&gt;

&lt;p&gt;A space-separated list of URLs. When the link is followed, the browser will send &lt;code&gt;POST&lt;/code&gt; requests with the body &lt;code&gt;PING&lt;/code&gt; to the URLs. Typically for tracking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#referrerpolicy"&gt;
  &lt;/a&gt;
  referrerpolicy
&lt;/h3&gt;

&lt;p&gt;How much of the referrer to send when following the link.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-referrer&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-referrer-when-downgrade&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent to origins without TLS (HTTPS).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin&lt;/code&gt;: the sent referrer will be limited to the origin of the referring page: its scheme, host and port.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin-when-cross-origin&lt;/code&gt;: the referrer sent to other origins will be limited to the scheme, the host and the port. Navigations on the same origin will still include the path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;same-origin&lt;/code&gt;: a referrer will be sent for same origin, but cross-origin requests will contain no referrer information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin&lt;/code&gt;: only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS‚ÜíHTTPS), but don't send it to a less secure destination (HTTPS‚ÜíHTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt; (default): send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS‚ÜíHTTPS), and send no header to a less secure destination (HTTPS‚ÜíHTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unsafe-url&lt;/code&gt;: the referrer will include the origin and the path (but not the fragment, password or username). &lt;strong&gt;This value is unsafe&lt;/strong&gt;, because it leaks origins and paths from TLS-protected resources to insecure origins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rel"&gt;
  &lt;/a&gt;
  rel
&lt;/h3&gt;

&lt;p&gt;The relationship of the linked URL as space-separated link types.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#target"&gt;
  &lt;/a&gt;
  target
&lt;/h3&gt;

&lt;p&gt;Where to display the linked URL, as the name for a browsing context (a tab, window or &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;). The following keywords have special meanings for where to load the URL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;_self&lt;/code&gt; (default): the current browsing context.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_blank&lt;/code&gt;: usually a new tab, but users can configure browsers to open a new window instead.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_parent&lt;/code&gt;: the parent browsing context of the current one. If no parent, behaves as &lt;code&gt;_self&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_top&lt;/code&gt;: the topmost browsing context (the "highest" context that‚Äôs an ancestor of the current one). If no ancestors, behaves as &lt;code&gt;_self&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setting &lt;code&gt;target="_blank"&lt;/code&gt; on &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements implicitly provides the same &lt;code&gt;rel&lt;/code&gt; behavior as setting &lt;code&gt;rel="noopener"&lt;/code&gt; which does not set &lt;code&gt;window.opener&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type"&gt;
  &lt;/a&gt;
  type
&lt;/h3&gt;

&lt;p&gt;Hints at the linked URL‚Äôs format with a MIME type. No built-in functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;By default, links will appear as follows in all browsers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An unvisited link is underlined and blue.&lt;/li&gt;
&lt;li&gt;A visited link is underlined and purple.&lt;/li&gt;
&lt;li&gt;An active link is underlined and red.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can override these styles using CSS properties like &lt;code&gt;text-decoration&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;The content inside a link &lt;strong&gt;should indicate where the link goes&lt;/strong&gt;, even out of context. Avoid using expressions like "&lt;em&gt;click here&lt;/em&gt;" or "&lt;em&gt;here&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;Assistive software has shortcuts to list all links on a page. However, &lt;strong&gt;strong link text benefits all users&lt;/strong&gt; ‚Äî the ‚Äú&lt;em&gt;list all links&lt;/em&gt;‚Äù shortcut emulates how sighted users quickly scan pages.&lt;/p&gt;

&lt;p&gt;Anchor elements are often abused as fake buttons by setting their &lt;code&gt;href&lt;/code&gt; to &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;javascript:void(0)&lt;/code&gt; to prevent the page from refreshing, then listening for their click events.&lt;/p&gt;

&lt;p&gt;These bogus &lt;code&gt;href&lt;/code&gt; values cause unexpected behavior when copying/dragging links, opening links in a new tab/window, bookmarking, or when JavaScript is loading, errors, or is disabled. They also convey incorrect semantics to assistive technologies, like screen readers.&lt;/p&gt;

&lt;p&gt;Use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; instead. In general, you should &lt;strong&gt;only use a hyperlink for navigation to a real URL&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Links that open in a new tab/window via &lt;code&gt;target="_blank"&lt;/code&gt;, or links that point to a download file &lt;strong&gt;should indicate what will happen&lt;/strong&gt; when the link is followed.&lt;/p&gt;

&lt;p&gt;People experiencing low vision conditions, navigating with the aid of screen reading technology, or with cognitive concerns may be confused when a new tab, window, or application opens unexpectedly. Older screen-reading software may not even announce the behavior.&lt;/p&gt;

&lt;p&gt;If an icon is used to signify link behavior, &lt;strong&gt;make sure it has&lt;/strong&gt; &lt;code&gt;alt&lt;/code&gt; &lt;strong&gt;text&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;skip link&lt;/strong&gt; is a link placed as early as possible in &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; content that points to the beginning of the page's main content. Usually, CSS hides a skip link offscreen until focused. &lt;/p&gt;

&lt;p&gt;Skip links let keyboard users &lt;strong&gt;bypass content repeated throughout multiple pages&lt;/strong&gt;, such as header navigation. They are especially useful for people who navigate with the aid of assistive technology such as switch control, voice command, or mouth sticks/head wands, where the act of moving through repetitive links can be laborious.&lt;/p&gt;

&lt;p&gt;Interactive elements, like links, &lt;strong&gt;should provide an area large enough that it is easy to activate them&lt;/strong&gt;. This helps a variety of people, including those with motor control issues and those using imprecise inputs such as a touchscreen. A minimum size of 44√ó44 CSS pixels is recommended.&lt;/p&gt;

&lt;p&gt;Text-only links in prose content are exempt from this requirement, but it‚Äôs still a good idea to make sure enough text is hyperlinked to be easily activated.&lt;/p&gt;

&lt;p&gt;Interactive elements, like links, placed in close visual proximity &lt;strong&gt;should have space separating them&lt;/strong&gt;. Spacing helps people with motor control issues, who may otherwise accidentally activate the wrong interactive content. Spacing may be created using CSS properties like &lt;code&gt;margin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When href attribute is present the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element may have different ARIA roles: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;button&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkbox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menuitem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menuitemcheckbox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menuitemradio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;treeitem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When &lt;code&gt;href&lt;/code&gt; attribute is not present, it may have any ARIA role.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;href="#top"&lt;/code&gt; or the empty fragment (&lt;code&gt;href="#"&lt;/code&gt;) to link to the top of the current page, as defined in the &lt;a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#scroll-to-the-fragment-identifier"&gt;HTML specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create links that open in the user's email program to let them send a new message, use the &lt;code&gt;mailto:&lt;/code&gt; scheme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="mailto:nowhere@mozilla.org"&amp;gt;Send email to nowhere&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;tel:&lt;/code&gt; link behavior varies with device capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cellular devices autodial the number.&lt;/li&gt;
&lt;li&gt;Most operating systems have programs that can make calls, like Skype or FaceTime.&lt;/li&gt;
&lt;li&gt;Websites can make phone calls with &lt;code&gt;registerProtocolHandler&lt;/code&gt;, such as &lt;code&gt;web.skype.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Other behaviors include saving the number to contacts, or sending the number to another device.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements can have &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns"&gt;consequences for users‚Äô security and privacy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;target="_blank"&lt;/code&gt; without &lt;code&gt;rel="noreferrer"&lt;/code&gt; and &lt;code&gt;rel="noopener"&lt;/code&gt; makes the website vulnerable to &lt;code&gt;window.opener&lt;/code&gt; API &lt;a href="https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever/"&gt;exploitation attacks&lt;/a&gt;, although note that, in newer browser versions setting &lt;code&gt;target="_blank"&lt;/code&gt; implicitly provides the same protection as setting &lt;code&gt;rel="noopener"&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;inline&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_a.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_link_test"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_a"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>a</category>
    </item>
    <item>
      <title>Building a Document Scanning and Barcode Recognition Application with Qt Python</title>
      <author>Xiao Ling</author>
      <pubDate>Wed, 17 Nov 2021 07:31:07 +0000</pubDate>
      <link>https://dev.to/yushulx/building-a-document-scanning-and-barcode-recognition-application-with-qt-python-534c</link>
      <guid>https://dev.to/yushulx/building-a-document-scanning-and-barcode-recognition-application-with-qt-python-534c</guid>
      <description>&lt;p&gt;A few months ago, I published a cross-platform &lt;a href="https://github.com/yushulx/python-gui-barcode-reader"&gt;desktop barcode reading application&lt;/a&gt; built with Qt Python and Dynamsoft Barcode Reader. The supported input sources include real-time camera stream, image files, and screenshots. In this article, I will set document scanner as the input source. The SDK used for document scanning is &lt;a href="https://www.dynamsoft.com/web-twain/overview/"&gt;Dynamic Web TWAIN&lt;/a&gt;, which is a cross-platform JavaScript library and supports Windows, macOS, and Linux.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SDK&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dynamsoft.com/web-twain/downloads/"&gt;Dynamic Web TWAIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamsoft Barcode Reader&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;dbr
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qt&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;PyQt5
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;License&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dynamsoft.com/customer/license/trialLicense/?product=dwt"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvWITC9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Get-30--day%2520FREE%2520Trial%2520License%2520of%2520DWT-orange" alt="dwt trial license" width="226" height="20"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dynamsoft.com/customer/license/trialLicense/?product=dbr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIlPC08u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Get-30--day%2520FREE%2520Trial%2520License%2520of%2520DBR-blue" alt="dbr trial license" width="224" height="20"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-build-a-crossplatform-document-scanning-and-barcode-recognition-application"&gt;
  &lt;/a&gt;
  Steps to Build a Cross-platform Document Scanning and Barcode Recognition Application
&lt;/h2&gt;

&lt;p&gt;We are going to create a hybrid application that combines HTML5 and Python code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-qt-application-with-qt-widgets"&gt;
  &lt;/a&gt;
  1. Create Qt application with Qt widgets
&lt;/h3&gt;

&lt;p&gt;Here are the required Qt Widgets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;QWebEngineView&lt;/code&gt;: used to load HTML and JavaScript code. It displays the document images scanned by Dynamic Web TWAIN API.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;QPushButton&lt;/code&gt;: one for acquiring images, and the other for decoding barcodes.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;QTextEdit&lt;/code&gt;: show the barcode results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we create an empty Qt window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtWidgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtGui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtWebEngineWidgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QWebEngineView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt5.QtWebChannel&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QWebChannel&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QWidget&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setWindowTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Dynamic Web TWAIN and Dynamsoft Barcode Reader'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create a layout and add the widgets to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QVBoxLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bt_scan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Scan Barcode Documents'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bt_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QPushButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Read Barcode'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text_area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QTextEdit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bt_scan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bt_read&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shortcut keys are convenient for a desktop application. We use &lt;code&gt;R&lt;/code&gt; to reload the web view and use &lt;code&gt;Q&lt;/code&gt; to quit the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;keyPressEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key_Q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key_R&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;refresh_page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyPressEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyPressEvent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, the basic UI is done. We can run the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-load-html-and-javascript-code-in-qt-application"&gt;
  &lt;/a&gt;
  2. Load HTML and JavaScript code in Qt application
&lt;/h3&gt;

&lt;p&gt;Dynamic Web TWAIN SDK provides a variety of sample code located in the &lt;code&gt;Dynamic Web TWAIN SDK &amp;lt;version&amp;gt;\Samples\&lt;/code&gt; folder. We copy &lt;code&gt;Samples\Scan\SourceList.html&lt;/code&gt; and &lt;code&gt;Samples\Scan\Resources&lt;/code&gt; to the root of our Python project.&lt;/p&gt;

&lt;p&gt;Rename &lt;code&gt;SourceList.html&lt;/code&gt; to &lt;code&gt;index.html&lt;/code&gt; and then add the following Python code to load &lt;code&gt;index.html&lt;/code&gt; and all relevant resource files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Load web page and resource files to QWebEngineView
&lt;/span&gt;        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;local_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QUrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromLocalFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After re-running the Python application, the web page will be presented.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-establish-the-communication-between-python-and-javascript"&gt;
  &lt;/a&gt;
  3. Establish the communication between Python and JavaScript
&lt;/h3&gt;

&lt;p&gt;The communication between Python and JavaScript is the key part of the application.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; has contained the &lt;code&gt;AcquireImage()&lt;/code&gt; function for scanning documents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AcquireImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;OnAcquireImageSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnAcquireImageFailure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;OnAcquireImageSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;OnAcquireImageFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CloseSource&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SelectSourceByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;selectedIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Use method SelectSourceByIndex to avoid the 'Select Source' dialog&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OpenSource&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IfDisableSourceAfterAcquire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// Scanner source will be disabled/closed automatically after the scan.&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AcquireImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;OnAcquireImageSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnAcquireImageFailure&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can execute the JavaScript function by calling &lt;code&gt;runJavaScript&lt;/code&gt; on the Python side:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_barcode&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runJavaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'AcquireImage();'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bt_scan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clicked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acquire_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the scanning process is finished, the current image is kept in  memory. We can convert it to base64 string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCurrentImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConvertToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CurrentImageIndexInBuffer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nx"&gt;Dynamsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DWT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EnumDWT_ImageType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IT_JPG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// TODO:&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How can we pass the base64 string from JavaScript to Python? The answer is &lt;code&gt;QWebChannel&lt;/code&gt;. In &lt;code&gt;index.html&lt;/code&gt;, we include &lt;code&gt;qwebchannel.js&lt;/code&gt; which can be found in &lt;code&gt;Qt\Examples\Qt-5.12.11\webchannel\shared&lt;/code&gt; folder if you have QtCreator installed. Then add the following code to send base64 string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QWebChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webChannelTransport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCurrentImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConvertToBase64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DWObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CurrentImageIndexInBuffer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nx"&gt;Dynamsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DWT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EnumDWT_ImageType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IT_JPG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onDataReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLength&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;onDataReady&lt;/code&gt; function needs to be implemented on the Python side:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pyqtSlot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onDataReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base64img&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;QWebEngineView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Load web page and resource files to QWebEngineView
&lt;/span&gt;        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;local_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QUrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromLocalFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QWebChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registerObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'backend'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setWebChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_barcode&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runJavaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'getCurrentImage();'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bt_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clicked&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_barcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-decode-barcodes-from-scanned-documents"&gt;
  &lt;/a&gt;
  4. Decode barcodes from scanned documents
&lt;/h3&gt;

&lt;p&gt;Finally, we can use Dynamsoft Barcode Reader to decode barcodes from base64 string and display the result on the text area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dbr&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;

&lt;span class="c1"&gt;# Initialize Dynamsoft Barcode Reader
&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Apply for a trial license https://www.dynamsoft.com/customer/license/trialLicense?product=dbr
&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_license&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'LICENSE-KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Backend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pyqtSlot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onDataReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base64img&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;imgdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;text_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode_file_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgdata&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text_results&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text_results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"Barcode Format : "&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;text_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barcode_format_string&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"Barcode Text : "&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;text_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barcode_text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
                    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"-------------------------------------------------"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

                &lt;span class="n"&gt;text_area&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;BarcodeReaderError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bre&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EJvONrIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.dynamsoft.com/codepool/img/2021/11/qt-scan-document-read-barcode.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EJvONrIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.dynamsoft.com/codepool/img/2021/11/qt-scan-document-read-barcode.jpg" alt="Qt application: document scanning and barcode reading" width="656" height="782"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/yushulx/Qt-scan-document-read-barcode"&gt;https://github.com/yushulx/Qt-scan-document-read-barcode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>qt</category>
      <category>barcode</category>
      <category>document</category>
    </item>
    <item>
      <title>React Hook to Allow Undo/Redo</title>
      <author>Jeremy</author>
      <pubDate>Wed, 17 Nov 2021 07:19:30 +0000</pubDate>
      <link>https://dev.to/jeremyling/react-hook-to-allow-undoredo-4poj</link>
      <guid>https://dev.to/jeremyling/react-hook-to-allow-undoredo-4poj</guid>
      <description>&lt;p&gt;If you're looking to build no-code tools like &lt;a href="https://formblob.com"&gt;FormBlob&lt;/a&gt;, one &lt;em&gt;must-have&lt;/em&gt; feature is the ability to undo and redo actions. Why? Imagine you were working on an image-editing software and you made multiple changes to your canvas. After some time, you realise that what you had before looked much better than what you have now. You would undo your way back until you get to a stage you're satisfied with.&lt;/p&gt;

&lt;p&gt;Now, if the software did not have an undo/redo function, you would most probably unleash some flowery language and abandon the software forever.&lt;/p&gt;

&lt;p&gt;So how do we implement an undo/redo function and prevent users from abandoning our app?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h3&gt;

&lt;p&gt;If you're not familiar with React Hooks, I suggest you read up about them &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;here&lt;/a&gt;. One of the most fundamental hooks is React's built-in useState hook. This allows you to store component state within a variable and manage it as required. In this tutorial, we will be writing a hook that extends the useState hook to allow for undo/redo functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h3&gt;

&lt;p&gt;Let's start with the code and then I'll explain below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// lodash methods preferable if you're storing objects within state&lt;/span&gt;
&lt;span class="c1"&gt;// If you're only working with primitives, these are not required&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash/isEqual&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cloneDeep&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash/cloneDeep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useUndoableState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Used to store history of all states&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Index of current state within `states`&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Current state&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use lodash isEqual to check for deep equality&lt;/span&gt;
    &lt;span class="c1"&gt;// If state has not changed, return to avoid triggering a re-render&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cloneDeep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Use lodash cloneDeep to get a deep copy&lt;/span&gt;
    &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This is to remove all future (redo) states after current index&lt;/span&gt;
    &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setStates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Clear all state history&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setStates&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Allows you to go back (undo) N steps&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Allows you to go forward (redo) N steps&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goForward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;resetState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;states&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;goBack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;goForward&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#concept"&gt;
  &lt;/a&gt;
  Concept
&lt;/h3&gt;

&lt;p&gt;As with useState, useUndoableState accepts only 1 argument, the initial value. Behind the scenes, the hook uses two main variables to determine state - &lt;code&gt;index&lt;/code&gt; (number) and &lt;code&gt;states&lt;/code&gt; (array). &lt;code&gt;states&lt;/code&gt; stores the historical values of the state while &lt;code&gt;index&lt;/code&gt; determines current state by indicating the current position in the array.&lt;/p&gt;

&lt;p&gt;You may navigate through historical states by using the &lt;code&gt;goBack&lt;/code&gt; and &lt;code&gt;goForward&lt;/code&gt; functions emitted by the hook. However, if you make a call to &lt;code&gt;setState&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; is not at the end of the &lt;code&gt;states&lt;/code&gt; array, all states after &lt;code&gt;index&lt;/code&gt; is erased and &lt;code&gt;index&lt;/code&gt; will go back to the end of the &lt;code&gt;states&lt;/code&gt; array. In other words, once you call &lt;code&gt;setState&lt;/code&gt;, you can no longer redo.&lt;/p&gt;

&lt;p&gt;The following table attempts to provide a more detailed explanation of the object returned by the hook:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Prop&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;state&lt;/td&gt;
&lt;td&gt;&lt;code&gt;any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Current state, initialised with argument passed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setState&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;setState(value)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets state to &lt;code&gt;value&lt;/code&gt;. All values after current &lt;code&gt;index&lt;/code&gt; is erased&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resetState&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;resetState(value)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes historical states and resets to value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The current index in the &lt;code&gt;states&lt;/code&gt; array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastIndex&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;The last index in the &lt;code&gt;states&lt;/code&gt; array. Can be used to determine if can &lt;code&gt;goForward&lt;/code&gt;. &lt;code&gt;canGoForward = index &amp;lt; lastIndex&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;goBack&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;goBack(2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Goes back the number of steps passed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;goForward&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;goForward(3)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Goes forward the number of steps passed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useUndoableState&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path/to/hook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The quick brown fox jumps over the lazy dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setDoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resetState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resetDoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;docStateIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;docStateLastIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;goBack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;undoDoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;goForward&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redoDoc&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUndoableState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canUndo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;docStateIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canRedo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;docStateIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;docStateLastIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;16px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setDoc&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;undoDoc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Undo
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;redoDoc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;canRedo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Redo
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resetDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Reset&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/use-undoable-state-2spts"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding Remarks
&lt;/h3&gt;

&lt;p&gt;With undo/redo functionality, &lt;a href="https://formblob.com"&gt;FormBlob&lt;/a&gt; is one of a select few no-code form builders that gives you the flexibility to edit your forms without the fear of losing a previous state. As a no-code tool, FormBlob allows anyone to build and publish stunning forms and surveys in 2 minutes. &lt;a href="https://build.formblob.com/builder"&gt;Try it free today!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How Much Does It Cost To Hire An Android App Developer?</title>
      <author>iWebServices</author>
      <pubDate>Wed, 17 Nov 2021 07:17:41 +0000</pubDate>
      <link>https://dev.to/iwebservices/how-much-does-it-cost-to-hire-an-android-app-developer-34pk</link>
      <guid>https://dev.to/iwebservices/how-much-does-it-cost-to-hire-an-android-app-developer-34pk</guid>
      <description>&lt;p&gt;Mobile Apps have become part of our daily life. We use them for almost everything like online shopping, booking a cab, ordering food, tracking health, making an appointment with doctors, or bringing medicine. As a result, the Android mobile application market is growing rapidly.&lt;/p&gt;

&lt;p&gt;Enterprises are utilizing android applications with advanced features and attractive UI/UX to boost sales and revenue as well as to gain new customers. However, hiring a skilled app developer with suitable experience is a crucial step in this regard to get value-per-cost service.&lt;/p&gt;

&lt;p&gt;In this article, we aim to provide you with a complete guide on the cost component to hire an android developer. &lt;a href="https://www.i-webservices.com/blog/android/how-much-does-it-cost-to-hire-an-android-app-developer/"&gt;Read More...&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Weekly web development resources #96</title>
      <author>Vincent Will</author>
      <pubDate>Wed, 17 Nov 2021 07:16:02 +0000</pubDate>
      <link>https://dev.to/vincenius/weekly-web-development-resources-96-dll</link>
      <guid>https://dev.to/vincenius/weekly-web-development-resources-96-dll</guid>
      <description>

&lt;h2&gt;
  &lt;a href="#bbburst"&gt;
  &lt;/a&gt;
  &lt;a href="https://fffuel.co/bbburst/"&gt;bbburst&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fffuel.co/bbburst/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5yykpLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/bbburst.jpg" alt="bbburst" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A SVG generator for confetti-like explosions of shapes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#web-performance-metrics-cheatsheet"&gt;
  &lt;/a&gt;
  &lt;a href="https://bitsofco.de/web-performance-metrics-cheatsheet/"&gt;Web Performance Metrics Cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bitsofco.de/web-performance-metrics-cheatsheet/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPX4GSQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/performance.jpg" alt="Web Performance Metrics Cheatsheet" width="880" height="384"&gt;&lt;/a&gt;&lt;br&gt;
A nice cheat sheet for performance metrics by Ire Aderinokun.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#can-i-include"&gt;
  &lt;/a&gt;
  &lt;a href="https://caninclude.glitch.me/"&gt;Can I Include&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://caninclude.glitch.me/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jz785ats--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/caninclude.jpg" alt="Can I Include" width="880" height="510"&gt;&lt;/a&gt;&lt;br&gt;
A tool to help determine if one HTML tag can be included in another HTML tag.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#morphing-submit-button"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/jkantner/full/zYdaBPJ"&gt;Morphing Submit Button&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codepen.io/jkantner/full/zYdaBPJ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ETppwiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/button.jpg" alt="Morphing Submit Button" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A nice Codepen demo of a button that changes after submit by Jon Kantner.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#you-probably-dont-need-media-queries-anymore"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/kathryngrayson/you-probably-dont-need-media-queries-anymore-a4j"&gt;You Probably Don't Need Media Queries Anymore &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/kathryngrayson/you-probably-dont-need-media-queries-anymore-a4j"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUbckNAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/media-queries.jpg" alt="You Probably Don't Need Media Queries Anymore " width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
An article on how to use Flex and Grid instead of media queries.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#splide"&gt;
  &lt;/a&gt;
  &lt;a href="https://splidejs.com/"&gt;Splide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://splidejs.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lylrQ0k7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/splide.jpg" alt="Splide" width="880" height="462"&gt;&lt;/a&gt;&lt;br&gt;
A lightweight, flexible and accessible slider/carousel written in TypeScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reactburgermenu"&gt;
  &lt;/a&gt;
  &lt;a href="http://negomi.github.io/react-burger-menu/"&gt;react-burger-menu&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://negomi.github.io/react-burger-menu/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7a8JDxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/burger-menu.jpg" alt="react-burger-menu" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An off-canvas sidebar React component with a collection of effects and styles.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#appflowy"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.appflowy.io/"&gt;AppFlowy&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.appflowy.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksn7hk5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/appflowy.jpg" alt="AppFlowy" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An open source alternative to Notion, where you are in charge of your data and customizations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-location"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-location.tanstack.com/"&gt;React Location&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://react-location.tanstack.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHPjNVMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/96/react-location.jpg" alt="React Location" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
A library for powerful, enterprise-grade routing for React applications.&lt;/p&gt;




&lt;p&gt;To see all the weeklies check: &lt;a href="https://wweb.dev/weekly"&gt;wweb.dev/weekly&lt;/a&gt;&lt;/p&gt;

</description>
      <category>weekly</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Will No-Code Replace developers?</title>
      <author>Vik üìà</author>
      <pubDate>Wed, 17 Nov 2021 06:56:12 +0000</pubDate>
      <link>https://dev.to/heyvik/will-no-code-replace-developers-3d1j</link>
      <guid>https://dev.to/heyvik/will-no-code-replace-developers-3d1j</guid>
      <description>&lt;h3&gt;
  &lt;a href="#lets-first-understand-what-even-is-nocode-or-lowcode"&gt;
  &lt;/a&gt;
  Lets first understand, what even is No-Code or Low-Code?
&lt;/h3&gt;

&lt;p&gt;No-Code is made for people in every background to create stuff/software. No code platforms have pre-built drag-and-drop elements that have been coded for reuse and scale, so that anyone, even beginners can make anything they want easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#will-nolow-code-replace-programmers"&gt;
  &lt;/a&gt;
  Will No/Low Code replace programmers?
&lt;/h3&gt;

&lt;p&gt;No Not at all, we will surely need programmers... There will always be a need for coding. They benefited in there both alternatives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-does-nolow-code-does-have-any-future"&gt;
  &lt;/a&gt;
  So does No/Low Code does have any future?
&lt;/h3&gt;

&lt;p&gt;Yes No/Low Code do have a future but they are not the future of code. It is certainly having a place in the future and will be leveraged to make many applications For ANYONE. The future is low-code or no-code with an expected growth rate of 44.4% by 2022 to $27.23 billion (up from $4.32 billion in 2017).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-nolow-code-so-famous"&gt;
  &lt;/a&gt;
  Why No/Low Code so famous?
&lt;/h3&gt;

&lt;p&gt;No/Low Code is popular because it doesnt matter on what background you come from, you can make softwares. Making software in nocode platforms can be fast and done pretty regularly to build prototypes and MVP in a record time.&lt;/p&gt;

&lt;p&gt;Thats all for this blog, its a pretty small blog, but its just a start for me :) &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#consider-following-me-on-twitter"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/vikstack"&gt;Consider Following Me On Twitter&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Best Web Designing Company in Hyderabad | Digital Eyecon </title>
      <author>Digital Eyecon</author>
      <pubDate>Wed, 17 Nov 2021 06:39:04 +0000</pubDate>
      <link>https://dev.to/digitaleyecon/majestic-mighty-panchamukha-hanuman-hyderabad-5el1</link>
      <guid>https://dev.to/digitaleyecon/majestic-mighty-panchamukha-hanuman-hyderabad-5el1</guid>
      <description>&lt;p&gt;Digital eyecon one of the best Web designing Company in Hyderabad, Offering Professional Website Designing for Personal, Business &amp;amp; Ecommerce websites with SEO Optimization. visit:&lt;a href="https://digitaleyecon.com/"&gt;https://digitaleyecon.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
