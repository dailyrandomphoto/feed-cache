<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fast Shopify development with hybrid Debut theme</title>
      <author>Mario Loncarek</author>
      <pubDate>Mon, 12 Apr 2021 11:48:02 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/fast-shopify-development-with-hybrid-debut-theme-3940</link>
      <guid>https://dev.to/bornfightcompany/fast-shopify-development-with-hybrid-debut-theme-3940</guid>
      <description>&lt;p&gt;In this article I will explain how we &lt;a class="comment-mentioned-user" href="https://dev.to/bornfight"&gt;@bornfight&lt;/a&gt;
 approach developing Shopify themes for clients with a budget or timeline that is not suitable for full custom development, which we prefer. If that is the case we love to suggest starting with a theme to lower the cost and shorten the development time. Hybrid in this context means crossing a theme with fully developed features with tools for modern frontend development like ES6, SCSS and utilizing features like Hot Module Replacement etc. &lt;/p&gt;

&lt;p&gt;To achieve this we will be using: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://themes.shopify.com/themes/debut/styles/default"&gt;Shopify Debut theme&lt;/a&gt; - as scaffolding tool for faster development&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Shopify/themekit"&gt;Themekit&lt;/a&gt; - development tools to interact with the Shopify platform to watch for local changes and upload them automatically to Shopify&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hayes0724/shopify-packer"&gt;Shopify Packer&lt;/a&gt; - bridge that allows us to develop using modern tools like Webpack 5 for minification, bundle splitting, bundle analysis, prefetch and easier manipulation with themekit &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bornfight/b-creative"&gt;Bornfight b-creative&lt;/a&gt; - &lt;a href="https://www.bornfight.com"&gt;Bornfight&lt;/a&gt; frontend project template for code style and rules&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-debut-theme"&gt;
  &lt;/a&gt;
  Why Debut theme?
&lt;/h3&gt;

&lt;p&gt;I like starting with the Debut theme because it's designed and written by the Shopify team and it's free. It offers a great number of features like predictive search, adding to cart with Ajax, product image zoom and gallery etc, basically everything you need to develop a shop with all the features . It's also written quite well and offers some of the latest tricks for making ultra fast websites which is very important for any website, and it's fully accessible. It also comes with a large number of locales for the whole theme. Since we are not using Debut because of the design, its minimal looks is a feature, not a bug. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-shopify-packer"&gt;
  &lt;/a&gt;
  Introducing Shopify Packer
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/hayes0724/shopify-packer"&gt;Shopify Packer&lt;/a&gt; written by &lt;a href="https://github.com/hayes0724"&gt;Eric Hayes&lt;/a&gt; is probably the best thing happened to Shopify theme development since Shopify stopped supporting Slate. It's everything we all hoped for and that's a promise. Packer uses Webpack 5 with zero config to compile, bundle, split and minify your modern development technologies and start a server for development with hot module reloading actually working perfectly. It can also create, list and manipulate (delete, download, deploy etc) themes from your shop which is a lifesaver sometimes. I also love using Eric's Shopify Packer because it uses SCSS, Stylelint, ESLint, Babel and PostCSS. It can analyze bundles and have multiple entry points for templates and layouts. It's actually a CLI tool that’s installed globally and you can start a new project or integrate Packer with an existing theme in ridiculously little time. Most importantly you can easily customize all settings for the site and webpack if needed. Eric also provides quick support for the packer so i would highly recommend it and also buy him a beer because he deserves one for this! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#standardising-code-with-bornfights-bcreative"&gt;
  &lt;/a&gt;
  Standardising code with Bornfight’s b-creative
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/bornfight/b-creative"&gt;B-creative&lt;/a&gt; is a modern frontend starter from &lt;a href="https://www.bornfight.com"&gt;Bornfight&lt;/a&gt; that has standardised opinionated code style and architecture for SCSS, Javascript and HTML/PHP/Liquid. It’s used and contributed by multiple teams. B-creative integrates perfectly with Packer because it uses the same linters so we can just copy their configs and have the same style across all platforms. Templates for SCSS and Javascript modules give us faster development times without having to write the same stuff over and over again. Using b-creative’s SCSS is also future proof because it provides tools to scale the site from 1440px (or any configured base resolution) to any bigger resolution and the site will look the same, while still giving the ability to have the other logic for mobile resolutions. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-connect-all-the-tools-to-create-hybrid-setup"&gt;
  &lt;/a&gt;
  How to connect all the tools to create hybrid setup?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#thinking-about-design"&gt;
  &lt;/a&gt;
  Thinking about design
&lt;/h4&gt;

&lt;p&gt;Firstly create a new development store which will then come with a Debut theme pre-installed or just install the Debut as a new theme. Now you can provide the designer with the preview link so he/she can look at all the stuff that it needs to style. Goal here is to create a design that follows Debut themes features, components and repeatable sections. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#integrating-packer"&gt;
  &lt;/a&gt;
  Integrating Packer
&lt;/h4&gt;

&lt;p&gt;Next thing to do is to connect Shopify Packer with the Debut theme for local development and to utilize modern development tools. You can connect Packer with an existing theme or you can create a new blank theme and copy and replace Packers starter theme files from &lt;code&gt;src&lt;/code&gt; folder with all of the Debut files you get when you download, which is my preferred way. This will then leave you with all of the Debut &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;layout&lt;/code&gt;, &lt;code&gt;locales&lt;/code&gt;, &lt;code&gt;sections&lt;/code&gt;, &lt;code&gt;snippets&lt;/code&gt; and &lt;code&gt;templates&lt;/code&gt;, along with Packers &lt;code&gt;styles&lt;/code&gt; and &lt;code&gt;scripts&lt;/code&gt; folder which will then be used to create new custom styles and scripts. Follow Packers docs to generate API access that Packer needs to work with the themekit (same process as only using themekit - private app API password). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9s49iUR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2jcs6zwlya4r4vxwztr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9s49iUR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2jcs6zwlya4r4vxwztr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next thing to do is to include Packers &lt;code&gt;CSS&lt;/code&gt; and &lt;code&gt;JS&lt;/code&gt;  files into &lt;code&gt;theme.liquid&lt;/code&gt; and then you will load all of the assets from Debut and all of the assets from Packer. You can do the same for &lt;code&gt;password.liquid&lt;/code&gt; and &lt;code&gt;gift_card.liquid&lt;/code&gt; if needed.  You will probably want to delete the Debuts CSS file completely and only use its Javascript features, because it's not likely you will need any Debuts styles. Note that in order for all of the Debuts Javascript features to work you should not remove classes from the liquid files, because CSS classes used by Debuts Javascript are not prefixed with &lt;code&gt;js-*&lt;/code&gt; so you can just build upon the necessary sections and snippets with your new custom classes. &lt;/p&gt;

&lt;p&gt;To test if you did everything correctly at this point, running Packers start script should open a new local server for assets and you should see unstyled Debut theme files if you deleted the CSS file or styled Debut theme if you did not. If you try to change the background color of the body in SCSS, Packer should compile it and trigger Hot Module Replacement and you should see the background color changing without you reloading. If that works, then Packer is correctly integrated with Debut. To test if all of the Javascript features from Debut are working, try clicking on the search icon in the navigation bar and predictive search should work properly. Try adding some dummy products to help you with testing that feature. Also on the product single page you should be able to zoom the product image on hover and add to cart without reloading with Ajax. If that works, that means all Javascript features you wanted from Debut are working. &lt;/p&gt;

&lt;p&gt;Feel free to delete all sections and snippets you don't need and which do not contain any wanted Javascript features but always test if everything is working properly. You can also remove unnecessary styles and variables from Debuts theme.liquid file where you included Packers CSS and JS because you probably will not need them. Also reduce the number of assets from Debut by removing the ones you don't need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#integrating-bcreative"&gt;
  &lt;/a&gt;
  Integrating b-creative
&lt;/h4&gt;

&lt;p&gt;Next we will copy SCSS and JS architecture from Bornfight's b-creative along with linter configs to achieve standardised code. Best thing to do is not to change names of the Packer main entrance point files and just include b-creative’s files inside existing Packer files (they are empty anyways). Don't forget to copy the fonts folder because it's needed for including fonts with b-creative. Your new SCSS and JS will also need some dependencies installed which you can find in b-creative’s package.json file under dependencies. B-creative comes with Bornfight’s modern &lt;a href="https://github.com/bornfight/b-reset"&gt;CSS reset&lt;/a&gt; to help you with developing new features.&lt;/p&gt;

&lt;p&gt;Test again if everything compiles properly. Now you should expect opening a new local server for assets with Packer, Roboto font used as main font (for testing purposes) and all of the Javascript features from Debut working as tested few steps back. If so, now you have a Debut theme ready for modern local development with modernisation and code style from Bornfight’s b-creative. If the designer followed the Debut’s flow, you will probably only need to write new styles according to design, without even touching JS because you already use all from Debut. This will then drastically change the time needed for development of the shop.&lt;/p&gt;

&lt;p&gt;Your final structure should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rtofDC72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbjhng5ozck1kvt137ll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rtofDC72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbjhng5ozck1kvt137ll.png" alt="Folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if everything is configured correctly, running &lt;code&gt;packer start&lt;/code&gt; should give you this result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9BeipiED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz7rrivmi0colup6sm21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9BeipiED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz7rrivmi0colup6sm21.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h3&gt;

&lt;p&gt;I would like to finish this article with some pros and cons of using this hybrid setup for developing new themes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Faster and cheaper development time when designing and developing upon the Debut theme for “projects on budget”&lt;/li&gt;
&lt;li&gt;Local development with all of the features&lt;/li&gt;
&lt;li&gt;Using modern tools like ES6 and SCSS to develop themes&lt;/li&gt;
&lt;li&gt;Hot Module Replacement so you don't have to reload all the time while development&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Slightly complex for setting up a new project because it needs multiple tools merged into one&lt;/li&gt;
&lt;li&gt;Leaves a lot of code bloat from Debut theme, mostly in Javascript that you will not use&lt;/li&gt;
&lt;li&gt;Is probably not suitable for anything else then to develop themes cheaper and with tight timeline &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need Shopify development, feel free to contact us at &lt;a href="mailto:hello@bornfight.com"&gt;hello@bornfight.com&lt;/a&gt; .&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>shopify</category>
      <category>webpack</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Istio - securityContext.capabilities.add - NET_ADMIN &amp; NET_RAW</title>
      <author>Maxime Guilbert</author>
      <pubDate>Mon, 12 Apr 2021 11:43:04 +0000</pubDate>
      <link>https://dev.to/adaendra/istio-securitycontext-capabilities-add-netadmin-netraw-35dn</link>
      <guid>https://dev.to/adaendra/istio-securitycontext-capabilities-add-netadmin-netraw-35dn</guid>
      <description>&lt;p&gt;On my EKS cluster, we tried to set-up Istio and Calico together. It seemed right until we deployed a service.&lt;/p&gt;

&lt;p&gt;We receive these errors&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;spec.initContainers[0].securityContext.capabilities.add: Invalid value: "NET_RAW": capability may not be added]
spec.initContainers[0].securityContext.capabilities.add: Invalid value: "NET_ADMIN": capability may not be added]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We thought for a long time that it was a problem with our Pod Security Policy. &lt;em&gt;(And all that I found on internet was related to PSP or Calico issues)&lt;/em&gt; But not at all.&lt;/p&gt;

&lt;p&gt;It was an issue with our Network Policies. A port was missing to our network policy definition.&lt;/p&gt;




&lt;p&gt;I found it when I randomly delete all the network policies to test.&lt;/p&gt;




&lt;p&gt;I hope it will help you!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don't hesitate to give some feedback to help me to improve my writing skills. Thanks!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>istio</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Coragem</title>
      <author>Marcio Frayze David</author>
      <pubDate>Mon, 12 Apr 2021 11:25:14 +0000</pubDate>
      <link>https://dev.to/marciofrayze/coragem-4l94</link>
      <guid>https://dev.to/marciofrayze/coragem-4l94</guid>
      <description>&lt;p&gt;Coragem é um dos valores fundamentais da &lt;a href="https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_extrema"&gt;Programação Extrema&lt;/a&gt; (XP), junto com comunicação, simplicidade, feedback e respeito.&lt;/p&gt;

&lt;p&gt;Ter coragem, neste contexto, não é sobre a coragem necessária&lt;br&gt;
para que um soldado consiga enfrentar uma guerra. Também não é sobre agir de forma irresponsável, pulando do avião sem paraquedas.&lt;/p&gt;

&lt;p&gt;A questão é que ao desenvolvermos softwares vamos encarar &lt;br&gt;
situações que vão causar medo tanto em nós, pessoas desenvolvedoras, quanto em nossas clientes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gest%C3%A3o"&gt;
  &lt;/a&gt;
  Gestão
&lt;/h2&gt;

&lt;p&gt;Entre os medos comuns das clientes estão:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Medo de ser enganada.&lt;/li&gt;
&lt;li&gt;Medo de ter que entregar o futuro de seu produto nas mãos de pessoas técnicas, que não necessariamente estarão tão engajadas quanto ela.&lt;/li&gt;
&lt;li&gt;Medo de perder controle do projeto.&lt;/li&gt;
&lt;li&gt;Medo de não ter suas expectativas atendidas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Já as pessoas desenvolvedoras enfrentam:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Medo de ficar sobrecarregada.&lt;/li&gt;
&lt;li&gt;Medo de expressar opiniões.&lt;/li&gt;
&lt;li&gt;Medo de informar que cometeu um erro.&lt;/li&gt;
&lt;li&gt;Medo de não conseguir cumprir os prazos acordados.&lt;/li&gt;
&lt;li&gt;Medo de não atingir as expectativas geradas por outras pessoas.&lt;/li&gt;
&lt;li&gt;Medo de não ter as informações necessárias para finalizar o trabalho.&lt;/li&gt;
&lt;li&gt;Medo de ter que se sujeitar a um cronograma em que é inviável implementar um código com a qualidade que gostaria.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Em um ambiente assim é comum que ambos os lados tentem levantar um muro para se proteger, e o resultado tende a ser a elaboração de um processo longo, complexo e ineficiente, já que cada lado parece desconfiar das intenções do outro. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dia-a-dia-da-pessoa-desenvolvedora"&gt;
  &lt;/a&gt;
  Dia a dia da pessoa desenvolvedora
&lt;/h2&gt;

&lt;p&gt;As práticas da XP se expandem por todo processo de desenvolvimento.&lt;/p&gt;

&lt;p&gt;Ela também nos auxilia com alguns outros tipos de medos recorrentes que estão mais ligado com as práticas de implementação, como por exemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Medo de fazer uma nova publicação em produção. &lt;/li&gt;
&lt;li&gt;Medo de refatorar um trecho do código. &lt;/li&gt;
&lt;li&gt;Medo de apagar um trecho de código morto.&lt;/li&gt;
&lt;li&gt;Medo de atualizar a versão de uma biblioteca ou framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Este sentimento pode causa uma reação paralisante e não agimos quando deveríamos. Mas existem momentos em que o medo pode nos levar a realizar ações inconsequentes. Em situações adversas é preciso ter coragem para &lt;em&gt;não&lt;/em&gt; agir até entender melhor o que está acontecendo, para então encontrar a melhor forma de solucionar o problema que estamos enfrentando.&lt;/p&gt;

&lt;p&gt;Por exemplo: se o sistema estiver instável e não conseguimos&lt;br&gt;
ainda encontrar a origem do problema, às vezes precisamos&lt;br&gt;
ter coragem para continuar nossa investigação sem tomar nenhuma atitude precipitada, que pode agravar ainda mais a situação ou mascarar a real origem, que pode se manifestar novamente em outro momento. Assim evitamos aqueles diálogos do tipo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Pronto! Voltou a funcionar!
- Ótimo! O que você fez?
- Várias coisas.
- O que?
- Ahhh várias coisas.
- Mas qual era o problema?
- Não sei...
- Mas qual alteração resolveu o problema?
- Não sei...
- Mas o problema pode voltar a acontecer???
- Não sei...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Já presenciei situações onde as desenvolvedoras estavam fazendo várias alterações arriscadas direto em produção, sem saber se aquilo tinha chances de corrigir o problema, já que não não haviam ainda identificado a causa. E no fim descobriam que era uma falha na infraestrutura ou em outro sistema ou qualquer outra coisa que estava fora da visão do time e que nenhuma das ações realizadas tinham relação com a origem do problema.&lt;/p&gt;

&lt;p&gt;Precisamos de paciência e coragem para analisar com calma a&lt;br&gt;
situação antes de tomar alguma ação. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%B5es"&gt;
  &lt;/a&gt;
  Conclusões
&lt;/h2&gt;

&lt;p&gt;Uma boa forma de combater estes medos é utilizar as práticas da Programação Extrema. Elas vão permitir que tenhamos mais coragem para refatorar o código do sistema, melhorar o design, expressar nossas opiniões abertamente, etc.&lt;/p&gt;

&lt;p&gt;Para entender mais sobre Programação Extrema recomendo a leitura&lt;br&gt;
dos seguintes livros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/67833.Extreme_Programming_Explained"&gt;Extreme Programming Explained&lt;/a&gt;, 2004. Kent Beck, Cynthia Andres.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/67839.Planning_Extreme_Programming"&gt;Planning Extreme Programming&lt;/a&gt;, 2000. Kent Beck, Martin Fowler.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/9737235-extreme-programming"&gt;Extreme Programming&lt;/a&gt;, 2004. Vinicius Manhães Teles.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>extremeprogramming</category>
      <category>agile</category>
    </item>
    <item>
      <title>A different approach to frontend architecture</title>
      <author>Huy Ta Quoc</author>
      <pubDate>Mon, 12 Apr 2021 11:08:59 +0000</pubDate>
      <link>https://dev.to/quochuytlbk/a-different-approach-to-frontend-architecture-38d4</link>
      <guid>https://dev.to/quochuytlbk/a-different-approach-to-frontend-architecture-38d4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3W5H8cze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.infoq.com/i18n/software-architecture-trends-2019/styles/illustration.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3W5H8cze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.infoq.com/i18n/software-architecture-trends-2019/styles/illustration.svg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(image source: &lt;a href="https://www.infoq.com/i18n/software-architecture-trends-2019"&gt;https://www.infoq.com/i18n/software-architecture-trends-2019&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article aims to introduce a frontend architecture (for applications built with Vue, React, Svelte, etc.) that is easy to reason about and has high maintainability. If you are building a medium/large application and often find yourself wondering about where things should be, this article might be of use to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-a-good-architecture"&gt;
  &lt;/a&gt;
  The benefits of a good architecture
&lt;/h2&gt;

&lt;p&gt;Before diving into any technical stuff, let's solve a small problem first:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uwSQ0rQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/1es3ne0caaid/4qnEjwkNAIiAmYcms8iKua/5173990eceb6223dc08e6607636dcc48/clean-architecture-ex-1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uwSQ0rQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/1es3ne0caaid/4qnEjwkNAIiAmYcms8iKua/5173990eceb6223dc08e6607636dcc48/clean-architecture-ex-1.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(image source: &lt;a href="https://pusher.com/tutorials/clean-architecture-introduction"&gt;https://pusher.com/tutorials/clean-architecture-introduction&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the image above, can you tell me how to replace the stapler with a tape at a glance? Some of you might come up with an interesting way to do so, but for most of us, we can't immediately figure out how to solve this problem. It looks like a mess to our eyes, and it confuses our brain.&lt;/p&gt;

&lt;p&gt;Now look at this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1qI3JJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/1es3ne0caaid/2Qd2FVYAqIEowM0GySIMyM/5d6acdc87b8149732a6b750fcb09c4b7/clean-architecture-ex-2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1qI3JJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/1es3ne0caaid/2Qd2FVYAqIEowM0GySIMyM/5d6acdc87b8149732a6b750fcb09c4b7/clean-architecture-ex-2.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(image source: &lt;a href="https://pusher.com/tutorials/clean-architecture-introduction"&gt;https://pusher.com/tutorials/clean-architecture-introduction&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Can you now immediately tell me how to replace the stapler? We simply have to untie the string connected to it and put the tape in its place. You need a near-zero mental effort to do it.&lt;/p&gt;

&lt;p&gt;Imagine all the items in the images above are modules or parts in your software. A good architecture should look more like the second arrangement. The benefits of such an architecture are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reducing your cognitive load/mental effort when working on the project.&lt;/li&gt;
&lt;li&gt;Making your code more modular, loosely coupled, thus more testable and maintainable.&lt;/li&gt;
&lt;li&gt;Easing up the process of replacing a particular part in the architecture.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-common-frontend-architecture"&gt;
  &lt;/a&gt;
  The common frontend architecture
&lt;/h2&gt;

&lt;p&gt;The most basic and common way to separate a frontend application nowadays can be something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hx8YxkZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmz7e344q021vt1gf7lq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hx8YxkZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmz7e344q021vt1gf7lq.png" alt="The common frontend architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is nothing wrong with the architecture above at first. But then, a common pattern emerges from this kind of architecture where you tightly couple some parts of the architecture together. For example, this is a simple counter application written in Vue 3 with Vuex 4:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The count is &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;counterValue&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"increment"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"decrement"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;decrement&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that this is a quite common pattern in applications written with Vue 3 and Vuex because it is in &lt;a href="https://next.vuex.vuejs.org/guide/composition-api.html#accessing-state-and-getters"&gt;Vuex 4's guide&lt;/a&gt;. Actually, it is also a common pattern for React with Redux or Svelte with Svelte Stores:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example with React and Redux:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CounterComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The count is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example with Svelte and Svelte Stores:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./stores.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is nothing inherently wrong with these. In fact, most of the medium to large applications out there are probably written like these. They are the recommended ways in the official guides/tutorials.&lt;/p&gt;

&lt;p&gt;However, everything is a trade-off. So, what are the advantages and the disadvantages of this pattern?&lt;/p&gt;

&lt;p&gt;The most obvious benefit is probably simplicity.&lt;/p&gt;

&lt;p&gt;But for that, what have you sacrificed?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You have tightly coupled the stores to the components&lt;/strong&gt;. Now what if one day your team finds out that Redux is not the best fit for the application anymore (probably because it is overly complicated) and wants to switch to something else? Not only will you have to rewrite all your stores, you will also need to rewrite the logic of the React components that have been tightly coupled to Redux.&lt;/p&gt;

&lt;p&gt;The same problems happen to all the other layers in your application. In the end, you cannot easily replace a part of your application with something else because everything has been tightly coupled to each other. It would just be better to leave it be and rewrite everything from scratch.&lt;/p&gt;

&lt;p&gt;But it does not have to be that way. &lt;strong&gt;A truly modular architecture can allow you to replace your React + Redux application with React + MobX (or Valtio), or even crazier, React + Vuex or Vue + Redux (for whatever reason) without impacting other parts of your application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So how do we replace a part of our application without impacting the rest, or in other words, how do we decouple every part of our application from each other?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-a-different-approach"&gt;
  &lt;/a&gt;
  Introducing a different approach
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ejhIJsKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njow1surg6ue3dmzodrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ejhIJsKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njow1surg6ue3dmzodrr.png" alt="Introducing a different architecture"&gt;&lt;/a&gt;&lt;br&gt;
The characteristics of the layers are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Presentation:&lt;/strong&gt; This layer is basically made of UI components. For Vue, they are Vue SFcs. For React, they are React Components. For Svelte, they are Svelte SFCs. And so on. The Presentation Layer is directly coupled to the Application Layer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Application:&lt;/strong&gt; This layer contains application logic. It knows of the Domain Layer and the Infrastructure Layer. This layer, in this architecture, is implemented via React Hooks in React or Vue "Hooks" in Vue 3.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Domain:&lt;/strong&gt; This layer is for domain/business logic. Only business logic lives in the Domain layer, so there is just pure JavaScript/TypeScript code with no frameworks/libraries whatsoever here.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Infrastructure:&lt;/strong&gt; This layer is responsible for communications with the outside world (sending requests/receiving responses) and storing local data. This is an example of the libraries you would use in a real-world application for this layer:

&lt;ul&gt;
&lt;li&gt;HTTP Requests/Responses: Axios, Fetch API, Apollo Client, etc.&lt;/li&gt;
&lt;li&gt;Store (State Management): Vuex, Redux, MobX, Valtio, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#applying-the-architecture"&gt;
  &lt;/a&gt;
  Applying the architecture
&lt;/h2&gt;

&lt;p&gt;If you apply this architecture to an application, it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zlc_eep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sd534wt9634lpj9en029.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zlc_eep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sd534wt9634lpj9en029.png" alt="Applying the architecture to a React app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following characteristics are referred from the above diagram of the architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you replace the UI library/framework, only the Presentation &amp;amp; Application layers are impacted.&lt;/li&gt;
&lt;li&gt;In the Infrastructure layer, when you replace the implementation details of the store (e.g. replacing Redux with Vuex), only the store itself is impacted.
The same goes for replacing Axios with Fetch API or vice versa. The Application layer does not know about the implementation details of the store or the HTTP Client. In other words, we have decoupled React from Redux/Vuex/MobX. The logic of the store is also generic enough that it can be used with not just React but also Vue or Svelte.&lt;/li&gt;
&lt;li&gt;If the business logic changes, the Domain Layer will have to be modified accordingly, and that will impact the other parts in the architecture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is more interesting about this architecture is you can even further modularize it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lztT5E8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwyjt2yg1d1hzibzjfbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lztT5E8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwyjt2yg1d1hzibzjfbw.png" alt="Further modularizing the architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;Even though the architecture can decouple the parts of your application from each other, it does come with a cost: increased complexity. Therefore, if you are working on a small application, I would not recommend using this. &lt;strong&gt;Don't use a sledgehammer to crack a nut&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For a more complex application, this architecture might probably help you achieve something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-py76ek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.simform.com/wp-content/uploads/2020/05/Why-invest-in-React-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-py76ek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.simform.com/wp-content/uploads/2020/05/Why-invest-in-React-architecture.png" alt="The benefits of investing in an architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(image source: &lt;a href="https://www.simform.com/react-architecture-best-practices"&gt;https://www.simform.com/react-architecture-best-practices&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An example
&lt;/h2&gt;

&lt;p&gt;I have built a simple counter app that demonstrates the merits of this architecture. You can check the source code here: &lt;a href="https://github.com/huy-ta/flexible-counter-app"&gt;https://github.com/huy-ta/flexible-counter-app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qKR8bOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YHJGCEE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qKR8bOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YHJGCEE.png" alt="An example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this application, I have included Vue, React and Vue with Vuex, Redux, MobX, Valtio and even localStorage. They can all be replaced without impacting each other. Follow the simple instructions from the README file and try switching a part of the application with another one.&lt;/p&gt;

&lt;p&gt;I know I'm using a sledgehammer to crack a nut, but building a complex application is a little bit out of the question for me right now. However, at &lt;a href="https://linagora.com"&gt;Linagora&lt;/a&gt;, we are trying to apply this architecture to one of our projects - &lt;a href="https://console.twake.app"&gt;Twake Console&lt;/a&gt;, which is going to be open-sourced soon. Please look forward to it.&lt;/p&gt;

&lt;p&gt;Questions &amp;amp; discussions are more than welcomed 😊.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>react</category>
      <category>redux</category>
      <category>vue</category>
    </item>
    <item>
      <title>What are the first things you do on a brand new laptop or PC?</title>
      <author>Alex Georgiev</author>
      <pubDate>Mon, 12 Apr 2021 11:07:58 +0000</pubDate>
      <link>https://dev.to/alexgeorgiev17/what-are-the-first-things-you-do-on-a-brand-new-laptop-or-pc-3c62</link>
      <guid>https://dev.to/alexgeorgiev17/what-are-the-first-things-you-do-on-a-brand-new-laptop-or-pc-3c62</guid>
      <description>&lt;p&gt;Hello all,&lt;/p&gt;

&lt;p&gt;I would like to know what are the first steps you take on a brand new laptop or PC. I personally use Linux, macOS and Windows so the process is always different. I also try to help my family and friends when they buy a new laptop and set it up for them. &lt;/p&gt;

&lt;p&gt;I'm curious to hear what you do on your new laptops or gaming/work PCs and what you'll perform on a friend or family member laptop as well.&lt;/p&gt;

&lt;p&gt;I'll be glad to hear what are the first things you do on your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work/Productive Laptops / PC / Raspberry PIs / Intel NUC, etc&lt;/li&gt;
&lt;li&gt;Entertainment Setups - This can be a Laptop or Gaming Station&lt;/li&gt;
&lt;li&gt;What you do on a laptop for a family member or a friend to ensure they will have everything they need for a daily use.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>What is Redux ? Simply Explained!</title>
      <author>CodeBucks</author>
      <pubDate>Mon, 12 Apr 2021 11:06:30 +0000</pubDate>
      <link>https://dev.to/codebucks/what-is-redux-simply-explained-2ch7</link>
      <guid>https://dev.to/codebucks/what-is-redux-simply-explained-2ch7</guid>
      <description>&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;It's been a while I have created anything. I was getting lot's of messages to create tutorials on Redux! So here it is. I have spent many days to make this tutorials more simple and easy to understand. &lt;/p&gt;

&lt;p&gt;If you prefer to watch video then here it is else you can keep reading 😄!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T_lO9l84oGM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now let's dive in ^_^&lt;/p&gt;

&lt;p&gt;before going into what is Redux? Let's see why we needed Redux in the first place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsrqpZmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh1c1vqoz1hna7onduta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsrqpZmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh1c1vqoz1hna7onduta.png" alt="Component Tree"&gt;&lt;/a&gt;&lt;br&gt;
Let’s say as a root component you have app.js file in your project, and in the component tree, the first layer contains 3 components and in the 2nd layer there are two child component of 2nd component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrRQBQPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nbhcaewzxjo4fzd8caq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrRQBQPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nbhcaewzxjo4fzd8caq.png" alt="Component Tree"&gt;&lt;/a&gt;&lt;br&gt;
Here, you have fetched the data from an API and you save it in the state of 2nd component. You can use this data state in child components by directly passing them downwards.&lt;/p&gt;

&lt;p&gt;Now the problem occurs when the neighbor component which is 3 want to access that data state.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So the problem is when &lt;strong&gt;multiple components that need to share and use the same state.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can be solved by &lt;strong&gt;“lifting up”&lt;/strong&gt; the state to the parent component. So you can lift state from 2nd component to the app.js file. and then you can use this state in the 3rd component.&lt;/p&gt;

&lt;p&gt;But that does not help always because in large application there are many states needed to be used in many different components, so it  is not the best practice.&lt;/p&gt;

&lt;p&gt;One way to solve this problem is to &lt;strong&gt;take state outside of the component tree and set it as centralized.&lt;/strong&gt; So that any component in the tree can access and update the state without worrying about it’s hierarchy in the tree.&lt;/p&gt;

&lt;p&gt;This is the basic idea behind Redux: &lt;strong&gt;a single centralized place to contain the global state in your application, and specific patterns to follow when updating that state.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use redux to store the state and you can use it to any component without worrying about the hierarchy. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#now-lets-see-how-application-works-normally-in-react-without-redux"&gt;
  &lt;/a&gt;
  &lt;em&gt;Now let’s see how application works normally in react without redux.&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eI2VlfLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8excbab1hwjt5a24mrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eI2VlfLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8excbab1hwjt5a24mrm.png" alt="React working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider this action as a trigger to update the state and when state gets changed then view updates the UI with new state.&lt;/p&gt;

&lt;p&gt;For simple counter application, when we increment counter value then increment event goes to state and state updates new value then, view re-renders ui based on the updated state.&lt;/p&gt;

&lt;p&gt;So let’s see what happens when you use Redux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X54SeIj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkirro5er7ctdczdly5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X54SeIj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkirro5er7ctdczdly5l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the redux there is a function called &lt;em&gt;reducer&lt;/em&gt;. &lt;br&gt;
This reducer function takes two arguments, first is the state itself, and second is the action object. &lt;/p&gt;

&lt;p&gt;Action object can have a type of action like increment and any data that wants to modify the state.&lt;/p&gt;

&lt;p&gt;Now based on previous state value and action type redux calculates new value for state and updates it.&lt;br&gt;
These all things happens inside the redux store, you can say it as any centralized database for state management.&lt;/p&gt;

&lt;p&gt;Then when view get new state value it re-renders the UI.&lt;/p&gt;

&lt;p&gt;Let me show you another example of how redux works!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOQnnjvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4l0u5umm0ex29hhnsrq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOQnnjvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4l0u5umm0ex29hhnsrq.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see here this is a simple gif which explains how redux works, you can find it on the official &lt;a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts"&gt;redux documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now using this UI you can either deposit or withdraw money.&lt;/p&gt;

&lt;p&gt;when we click the deposit button, click event goes to event handler, based on event, event handler dispatches an action with the type as deposit and any details needed in the payload property.&lt;/p&gt;

&lt;p&gt;This reducer accepts two things, state and the action object. Previous value of state is 0$ and action is for deposit, so the reducer will update the new state by depositing 10$ amount.&lt;/p&gt;

&lt;p&gt;you can see in the UI balance, it changed from 0 to 10$.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#redux-by-definition"&gt;
  &lt;/a&gt;
  Redux by definition
&lt;/h2&gt;

&lt;p&gt;It is a Predictable State Container for JS Apps.&lt;/p&gt;

&lt;p&gt;It is,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Predictable&lt;/strong&gt; --&amp;gt; because it helps you write applications that behave consistently, and can run in different environments (client, server, and native).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Centralized&lt;/strong&gt; --&amp;gt; because of this feature, we don't need to lift state to parent components and we can use state from any component we want due to this centralized behavior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debuggable&lt;/strong&gt; --&amp;gt; There is an extension called &lt;em&gt;Redux DevTools&lt;/em&gt; which is an excellent tool to debug Redux applications. Using this tool you can see when, where, why, and how your application's state changed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexible&lt;/strong&gt; --&amp;gt; because it works with any UI layer, and has a large ecosystem of addons.&lt;/p&gt;

&lt;p&gt;If you're confused about anything related to this topic feel free to ask me 😉!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-and-supporting"&gt;
  &lt;/a&gt;
  Thanks For Reading and Supporting.😄
&lt;/h3&gt;

&lt;p&gt;Feel free to visit my YouTube channel: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/channel/UCeYt6blRBKuNrEg_-282fSA"&gt;@CodeBucks&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Follow me on Instagram where I'm sharing lot's of useful resources!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.instagram.com/code.bucks"&gt;@code.bucks&lt;/a&gt; 😉
&lt;/h4&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Production deployment Strapi + Gatsby app on VPS Shared Hosting: installing Node &amp;  Creating configs. (2)</title>
      <author>Daniel Krupnyy</author>
      <pubDate>Mon, 12 Apr 2021 10:47:39 +0000</pubDate>
      <link>https://dev.to/danielkrupnyy/production-deployment-strapi-gatsby-app-on-vps-shared-hosting-installing-node-creating-configs-2-3d7h</link>
      <guid>https://dev.to/danielkrupnyy/production-deployment-strapi-gatsby-app-on-vps-shared-hosting-installing-node-creating-configs-2-3d7h</guid>
      <description>&lt;p&gt;Welcome to the second part of the production deployment of the Strapi + Gatsby app on VPS Shared Hosting! 🙌&lt;/p&gt;




&lt;p&gt;Before install Node, you need to connect to the server over SSH. You can find all the data for connecting via SSH on your host.&lt;/p&gt;

&lt;p&gt;So, in your terminal enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shh root@00.0.000.000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead "00.0.000.000" enter your server IP. After enter password.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-node"&gt;
  &lt;/a&gt;
  Installing Node
&lt;/h1&gt;

&lt;p&gt;In order to install Node, you need to find out what OS installed on the your server.&lt;/p&gt;

&lt;p&gt;In different hosts it can be find out on different ways.&lt;br&gt;
So, you need to find out it in your case 🤗&lt;/p&gt;

&lt;p&gt;In my case, the server had Cent OS installed and I'll show you how I installed Node on this OS.&lt;/p&gt;

&lt;p&gt;For different OS Node has some &lt;a href="https://nodejs.org/en/download/package-manager/"&gt;great documentation&lt;/a&gt; 👍&lt;/p&gt;

&lt;p&gt;let's continue.&lt;/p&gt;

&lt;p&gt;First install yum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-sL&lt;/span&gt; https://rpm.nodesource.com/setup_10.x | &lt;span class="nb"&gt;sudo &lt;/span&gt;bash -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install Node:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;yum &lt;span class="nb"&gt;install &lt;/span&gt;nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it!&lt;br&gt;
You can check out the Node version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#adding-new-domain-and-subdomain"&gt;
  &lt;/a&gt;
  Adding new domain and subdomain
&lt;/h1&gt;

&lt;p&gt;To add a domain to VestaCP you must:&lt;br&gt;
Log in to control panel and go to the section Web.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhgnVe9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1618211998/1410341508VestaCP_1_dmcmct.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhgnVe9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1618211998/1410341508VestaCP_1_dmcmct.jpg" alt="vesta menu"&gt;&lt;/a&gt;&lt;br&gt;
In the upper left corner click on Add Web Domain. Fill in all the required fields and click Add.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDOP7H4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1618212109/1410341513VestaCP_2_xxpszc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDOP7H4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1618212109/1410341513VestaCP_2_xxpszc.png" alt="add domain"&gt;&lt;/a&gt;&lt;br&gt;
Also you need to create a subdomain. The procedure for creating a subdomain is the same as for a domain. &lt;/p&gt;

&lt;p&gt;When you're enter your domain name, you need to write "&lt;em&gt;admin.&lt;/em&gt;" in front of it. &lt;br&gt;
It looks like this: &lt;em&gt;admin.your-domain.com&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In the future, we will install the Strapi backend on a subdomain.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adding-template-for-nginx-in-vestacp"&gt;
  &lt;/a&gt;
  Adding template for nginx in VestaCP
&lt;/h1&gt;

&lt;p&gt;Templates for nginx on a server with VestaCP installed are stored along the path: &lt;em&gt;/usr/local/vesta/data/templates/web/nginx/&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each template must be provided in two formats:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;*.tpl - for http&lt;/li&gt;
&lt;li&gt;*.stpl - for ssl(https)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The file names must be the same.&lt;/p&gt;

&lt;p&gt;Let's create them:&lt;/p&gt;

&lt;p&gt;nodeproxy.stpl&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
  listen   %ip%:%proxy_port%&lt;span class="p"&gt;;&lt;/span&gt;
  server_name %domain_idn% %alias_idn%&lt;span class="p"&gt;;&lt;/span&gt;
  error_log /var/log/%web_system%/domains/%domain%.error.log error&lt;span class="p"&gt;;&lt;/span&gt;

  location /error/ &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;alias&lt;/span&gt;  %home%/%user%/web/%domain%/document_errors/&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  location @fallback &lt;span class="o"&gt;{&lt;/span&gt;
    proxy_pass   http://%ip%:%web_port%&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;ht  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;svn/ &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;git/ &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;hg/  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;bzr/ &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

  include %home%/%user%/conf/web/nginx.%domain%.conf&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;nodeproxy.tpl&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
  listen   %ip%:%proxy_port%&lt;span class="p"&gt;;&lt;/span&gt;
  server_name %domain_idn% %alias_idn%&lt;span class="p"&gt;;&lt;/span&gt;
  error_log /var/log/%web_system%/domains/%domain%.error.log error&lt;span class="p"&gt;;&lt;/span&gt;

  location /error/ &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;alias&lt;/span&gt;  %home%/%user%/web/%domain%/document_errors/&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  location @fallback &lt;span class="o"&gt;{&lt;/span&gt;
    proxy_pass   http://%ip%:%web_port%&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;ht  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;svn/ &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;git/ &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;hg/  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
  location ~ /&lt;span class="se"&gt;\.&lt;/span&gt;bzr/ &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return &lt;/span&gt;404&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

  include %home%/%user%/conf/web/nginx.%domain%.conf&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding a template in the domain settings panel, you need to select a template for nginx:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTokZ2R4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1618213049/1538244034_em2tlg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTokZ2R4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1618213049/1538244034_em2tlg.jpg" alt="domain settings panel"&gt;&lt;/a&gt;&lt;br&gt;
All the above steps must be repeated for the subdomain.&lt;/p&gt;

&lt;p&gt;After editing the nginx configurations, it must be restarted for the changes to take effect!&lt;/p&gt;

&lt;p&gt;For that go to the "Server" on top menu of VestaCP:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zQFJKj_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1618213499/top_menu_tzwv7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQFJKj_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1618213499/top_menu_tzwv7g.png" alt="top menu"&gt;&lt;/a&gt;&lt;br&gt;
There you'll see nginx. Move mouse on it end click restart.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#nginx-configuration"&gt;
  &lt;/a&gt;
  Nginx configuration
&lt;/h1&gt;

&lt;p&gt;After applying the template for nginx, configuration files will be automatically generated under the path &lt;em&gt;/home/{username}/conf/web&lt;/em&gt;. Let's take a closer look at the contents of the template, namely, we are interested in the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;include /home/username/conf/web/nginx.example.com.conf&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since nginx configuration files are dynamic, we cannot change their content, otherwise we will lose the changes after regenerating the template. But we can create an &lt;em&gt;nginx.example.com.conf*&lt;/em&gt; file to be extracted. It is worth noting that we only have access to the server block of the configuration file, since include is done there. This is done because the server block should be generated automatically and have basic settings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So let's create files for main domain:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;snginx.example.com.conf*&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Empty
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;nginx.example.com.conf*&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$scheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http"&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 rewrite ^/&lt;span class="o"&gt;(&lt;/span&gt;.&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https://&lt;span class="nv"&gt;$host&lt;/span&gt;/&lt;span class="nv"&gt;$1&lt;/span&gt; permanent&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above redirects the request from http to https.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now create files for subdomain:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;snginx.admin.example.com.conf*&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;location / &lt;span class="o"&gt;{&lt;/span&gt; 
  proxy_pass http://00.0.000.000:1337&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead &lt;code&gt;00.0.000.000&lt;/code&gt; your server IP.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nginx.admin.example.com.conf*&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$scheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http"&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 rewrite ^/&lt;span class="o"&gt;(&lt;/span&gt;.&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https://&lt;span class="nv"&gt;$host&lt;/span&gt;/&lt;span class="nv"&gt;$1&lt;/span&gt; permanent&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's it! 😞&lt;/p&gt;

&lt;p&gt;In next part we will deploy Gatsby and Strapi, create web hooks and install pm2.&lt;/p&gt;

&lt;p&gt;If you want to add something, drop it in the comments👇🏻&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>gatsby</category>
    </item>
    <item>
      <title>How to Plan and Build a Programming Project – A Legitimate Guide for Beginners</title>
      <author>Peter</author>
      <pubDate>Mon, 12 Apr 2021 10:47:12 +0000</pubDate>
      <link>https://dev.to/peterlunch/how-to-plan-and-build-a-programming-project-a-legitimate-guide-for-beginners-1fll</link>
      <guid>https://dev.to/peterlunch/how-to-plan-and-build-a-programming-project-a-legitimate-guide-for-beginners-1fll</guid>
      <description>&lt;p&gt;This is a post I have thought about writing for a long time, I originally published it on my blog in more detail &lt;a href="https://peterlunch.com/how-to-plan-and-build-a-programming-project/"&gt;here&lt;/a&gt;. But, I thought it could help more people in this community so I wanted to share a snappier version.  &lt;/p&gt;

&lt;p&gt;In this article, I am going explain how to plan and build a programming project. I will show you how to break down a  project, so that you can start making awesome projects to help you level up your coding skills.&lt;/p&gt;

&lt;p&gt;This article aims to help code newbies feel less intimidated as they attempt to leave tutorial purgatory and build their own awesome coding projects. So if that sounds like you keep reading. &lt;/p&gt;

&lt;p&gt;Projects are super intimidating when you are first starting out, it can seem like such a huge mountain to climb when you can't even reproduce the results of the YouTube tutorial you just watched without looking at it again 30 times 🤦‍♂️. &lt;/p&gt;

&lt;p&gt;When I first started out learning to code, I would start a course or follow a tutorial and think that I was understanding things. But, when I'd stop watching and try to reproduce the project I couldn't get anywhere.&lt;/p&gt;

&lt;p&gt;To overcome this, I posted my frustration on the popular subreddit r/learnprogramming. The responses I received were all centered around building my own projects. This advice sounds great on the surface and was the right advice, yet the issue for me was I couldn't even watch a tutorial and reproduce the results. How was I supposed to build a project? A project is 10 levels above a tutorial and at the time it seemed that projects were so far away from my abilities. I had no clue how to even get started, let alone how I was going to put it all together. The problem essentially was I didn't know how to get from point A to point B.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAkolaRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vatoqsbdoxq2y34nttfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAkolaRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vatoqsbdoxq2y34nttfv.png" alt="Reddit conversation of users asking how to build a project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an issue I see all the time on r/learnprogramming. Beginners like me are frustrated that they can't seem to get out of tutorial purgatory and so they seek advice. But, what they get is well meaning redditor's slamming the build projects response in their face without even considering that if the newbie can't even replicate a tutorial how are they going to create their own project.  In my time learning to program I have seen so many examples of the same question I had and the same responses. I thought it was about time I did something about it and gave back to the universe.&lt;/p&gt;

&lt;p&gt;So here I am, writing a post that actually breaks down how to build your own projects so that you can become a better developer and cement what you learning.&lt;/p&gt;

&lt;p&gt;In order to plan and build a programming project there are three key steps I now use when building projects so let's start with the first step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-defining-the-project"&gt;
  &lt;/a&gt;
  Step 1: Defining the project
&lt;/h2&gt;

&lt;p&gt;The first step when planning a programming project is to define it.&lt;/p&gt;

&lt;p&gt;When I am defining the project I ask myself these 4 questions:&lt;/p&gt;

&lt;p&gt;What is the project?&lt;br&gt;
What is the MVP (Minimal Viable Product)?&lt;br&gt;
What are the nice to haves?&lt;br&gt;
When will the project be complete?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-project-definition"&gt;
  &lt;/a&gt;
  Example project definition
&lt;/h4&gt;

&lt;p&gt;To give a simple example, let's say we are going to build a calculator app we would have a basic project definition like below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calculator app project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is the project?&lt;/em&gt; - The calculator project is a project to build a calculator that is accessible in a web browser. The project is going to be solved using HTML, CSS and JavaScript. It will allow users to input numbers and calculate the results of those numbers based on the arithmetic operation they choose.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is the MVP?&lt;/em&gt; - The minimal viable product is a calculator that renders in a web browsers that can perform addition, subtraction, multiplication and division operations based on a users input and show the user the result of that equation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What are the nice to haves?&lt;/em&gt; - The nice to haves for this project are styling the calculator, taking keyboard presses as input not just users clicking buttons and adding higher order operations like 'to the power of x'.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When will the project be complete?&lt;/em&gt; - The project will be complete once all the MVP features have been implemented and the calculator has been styled.&lt;/p&gt;

&lt;p&gt;The above definition is simple and straight forward. If my Mum picked it up she would understand what the project is about. She would understand because it tells you what the project is, the MVP features you must build, the nice to have features and when it will be complete. By defining the project you make a project less intimidating.&lt;/p&gt;

&lt;p&gt;Once you have the project definition you can begin the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-creating-the-workflow"&gt;
  &lt;/a&gt;
  Step 2: Creating the workflow
&lt;/h2&gt;

&lt;p&gt;The next step is the simplest. Usually this step can be combined with step 3.  But, just for now we are going to look at it here as a separate step so that I can show you how to set up a very basic workflow for your own projects. Once you have done it once, it can be a default step for the rest of your projects.&lt;/p&gt;

&lt;p&gt;You first want to use something like Trello a free tool to manage projects.&lt;/p&gt;

&lt;p&gt;To set up our Kanban board we want to create 4 columns.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TODO&lt;/li&gt;
&lt;li&gt;DOING&lt;/li&gt;
&lt;li&gt;DONE&lt;/li&gt;
&lt;li&gt;BUGS / NOT SURE HOW TO DO&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xqPaF75U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q221um3ta9modcompicc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqPaF75U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q221um3ta9modcompicc.png" alt="Kanban board with 4 columns listed above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within these columns we are going to add cards. As we work on the cards we move them into the &lt;strong&gt;doing&lt;/strong&gt; column and once we have finished with that card we can move it to the &lt;strong&gt;done&lt;/strong&gt; column. If you have a bug you are stuck on or are not sure how to do something we can move it to the &lt;strong&gt;bugs/not sure&lt;/strong&gt; column.&lt;/p&gt;

&lt;p&gt;Now we have our workflow set up we can get onto the last step, the one that stumped me the most when I was learning to code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-breaking-the-project-down-into-smaller-components"&gt;
  &lt;/a&gt;
  Step 3: Breaking the project down into smaller components
&lt;/h2&gt;

&lt;p&gt;The key to building your own projects starts with breaking the big project down into smaller, less intimidating components. These smaller components are what become our cards from step 2.&lt;/p&gt;

&lt;p&gt;Now this sounds simple enough, but when I was first starting out it did not occur to me that you could do this. I thought most developers just start coding and the project flowed out of them like you see in the movies. I thought that was what I was supposed to be able to do. However, now that I have had a chance to work in the industry I know that is definitely not the case, in fact a good developer will break that project down into smaller tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yKTONWxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x82xv7vdi7vakgvli8a3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yKTONWxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x82xv7vdi7vakgvli8a3.gif" alt="estefannie pretending to code like they do in the movies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yet, as a beginner it can be hard to know how to break something down into smaller tasks. If you don't know how to actually build the project then how can you break it down?&lt;/p&gt;

&lt;p&gt;Well the first thing you need to do is look at your project definition and then break it down into smaller parts.&lt;/p&gt;

&lt;p&gt;Let's continue using the calculator app example to make our component cards:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calculation functions - MVP&lt;/li&gt;
&lt;li&gt;Get user input - MVP&lt;/li&gt;
&lt;li&gt;HTML user interface - MVP&lt;/li&gt;
&lt;li&gt;Style user interface - sprinkles &lt;/li&gt;
&lt;li&gt;JavaScript event listeners - MVP&lt;/li&gt;
&lt;li&gt;Add animations for calculations - sprinkles &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MvhGQWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8pdhznp06ranyffza8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MvhGQWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8pdhznp06ranyffza8c.png" alt="trello board with todo cards from list above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice that for each card, we assigned a label of either MVP or sprinkles this is to visually help you see which cards are the most important and therefore the ones to work on first.&lt;/p&gt;

&lt;p&gt;The biggest benefit of the cards is that they have simplified what we have to do already. This makes projects less intimidating as you are not making a big daunting calculator app, rather you are doing 6 smaller projects that will combine to create one big project.&lt;/p&gt;

&lt;p&gt;As you work on a card you move it into the doing column. Taking your time to get the component working before you move onto the next card.&lt;/p&gt;

&lt;p&gt;But we are not done yet, we can simplify and improve our workflow even more to ensure we are not getting blocked by the size of the project when building.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-each-component-into-smaller-checklists"&gt;
  &lt;/a&gt;
  Break each component into smaller checklists
&lt;/h3&gt;

&lt;p&gt;Once we have the high level cards we can then break those components down again into smaller tasks by breaking those tasks into checklists so we can track our progress.&lt;/p&gt;

&lt;p&gt;The example below is just how my brain works so you can break it into smaller or larger items depending on what works for you. Let's use the calculation functions card as an example of how to break a component down further.&lt;/p&gt;

&lt;p&gt;As the task is an MVP task and I have defined the MVP as basic calculations addition, subtraction, multiplication and division we need to add those functions to the checklist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N4Ro7IyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j89e7xq9op8x8shkhwcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4Ro7IyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j89e7xq9op8x8shkhwcg.png" alt="component checklist on kanban card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have now broken our calculation functions card into 4 little projects that we can work on. How much easier is that than the abstract and super daunting task of building a calculator app, or even writing the calculator functions (the card).&lt;/p&gt;

&lt;p&gt;We can now focus and figure out how to make each of these functions. As we do that we get to check those items off giving us a sense of accomplishment and progress. Then once we have done all four of those items we can move the card into the done column and get cracking on the next card.&lt;/p&gt;

&lt;p&gt;From here on we just need to repeat the process for each card. So you are ready to get building awesome projects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-building-your-programming-project"&gt;
  &lt;/a&gt;
  Start building your programming project
&lt;/h2&gt;

&lt;p&gt;Now you have the tools to plan and build a programming project. Hopefully this post has made the concept of building projects less abstract and intimidating.&lt;/p&gt;

&lt;p&gt;The key is to clearly define the project, set up your workflow and then break the project down into smaller components that all build towards creating the larger project. By doing so the project doesn't seem like this enormous mountain to climb, instead it should feel more like a ladder with each step helping you reach your goal.&lt;/p&gt;

&lt;p&gt;If you see someone on r/learnprogramming in the future struggling to get out of tutorial purgatory, don't just tell them to build. Tell them how to plan and build.&lt;/p&gt;

&lt;p&gt;Planning is great, but the key is to then start and build. So go forth and build amazing projects and level up your coding skills.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TypeScript: Spelling out tsconfig. Part 1</title>
      <author>Barin Britva</author>
      <pubDate>Mon, 12 Apr 2021 10:22:42 +0000</pubDate>
      <link>https://dev.to/barinbritva/typescript-spelling-out-tsconfig-part-1-3nak</link>
      <guid>https://dev.to/barinbritva/typescript-spelling-out-tsconfig-part-1-3nak</guid>
      <description>&lt;h1&gt;
  &lt;a href="#typescript-spelling-out-tsconfig-part-1"&gt;
  &lt;/a&gt;
  TypeScript: Spelling out tsconfig. Part 1
&lt;/h1&gt;

&lt;p&gt;I’m a big fan of TypeScript. Each new project I prefer to write on TS rather than native JavaScript. In this article, I will not discuss the reasons for choosing TypeScript or its advantages and disadvantages. I’d like this article to be a guide for those who want to learn how to set up &lt;code&gt;tsconfig&lt;/code&gt;, to sort out its numerous flags and learn some useful tricks.&lt;/p&gt;

&lt;p&gt;So, in this article I want to provide a revised and streamlined documentation summary, which I believe will be useful to those who are standing at the begging of their path to TypeScript or for those who didn't find time or energy to sort out the details and want to fill this gap.&lt;/p&gt;

&lt;p&gt;When you’re opening official reference &lt;code&gt;tsconfig&lt;/code&gt; you’ll see a full list of settings divided into groups. However, it doesn't allow you to understand what you should start with and which of these options are required and what can be skipped (for some time). Plus, some options are grouped by technical meaning, not logical. For example, some verification flags could be found in &lt;code&gt;Strict Checks&lt;/code&gt; group, some in &lt;code&gt;Linter Checks&lt;/code&gt; and others in &lt;code&gt;Advanced&lt;/code&gt; group. It’s not always easy to understand.&lt;/p&gt;

&lt;p&gt;All the options, just like the article itself, I divided into two groups – basic and “checks”. In the first part we'll talk about basic settings and in the second – different checks, i.e. tuning compiler strictness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tsconfig-structure"&gt;
  &lt;/a&gt;
  Tsconfig structure
&lt;/h2&gt;

&lt;p&gt;Let’s have a look at the structure and some features of the config.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tsconfig.json&lt;/code&gt; has 2 parts. Some options must be specified in &lt;code&gt;root&lt;/code&gt; and some of them in &lt;code&gt;compilerOptions&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tsconfig.json&lt;/code&gt; supports comments. Such IDE like WebStorm or Visual Studio understand this and do not highlight comments as a syntax error&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tsconfig.json&lt;/code&gt; supports inheritance. Options can be divided according to some principle, described in different files and merged with the special directive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a blank of &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;enrich&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;specified&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;file&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;we'll&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tsconfig-checks.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;next&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;article&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./tsconfig-checks.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;project-specific&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;root&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;compiler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;related&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;setting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;placed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;here&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;root&lt;/code&gt; options are: &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;exclude&lt;/code&gt;, &lt;code&gt;references&lt;/code&gt;, &lt;code&gt;typeAcquisition&lt;/code&gt;. Of these, we will consider the first 4. Other options are based in &lt;code&gt;compilerOptions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes some options like &lt;code&gt;compileOnSave&lt;/code&gt; and &lt;code&gt;ts-node&lt;/code&gt; can be placed in &lt;code&gt;root&lt;/code&gt; section. These options are not official and can be used by IDE for its needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#root-section"&gt;
  &lt;/a&gt;
  Root section
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-extends-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;extends&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string | false, default: false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Specifies the path to the file from which to inherit options. For the most part it serves as an organizing tool. Options can be divided according to some logic so that they don’t mix. For example, move config strict settings to separate file the way it’s shown in the config draft. However, given the support of comments in &lt;code&gt;tsconfig.json&lt;/code&gt; this can be done much easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;basic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;settings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;block&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;strict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;settings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;block&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s have a look at another use-case where comments can’t be a solution. If we need to create production and development configs. This is how &lt;code&gt;tsconfig-dev.json&lt;/code&gt; version can look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./tsconfig.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;redefining&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;setting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;needed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;env&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;only&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In general, I recommend using &lt;code&gt;extends&lt;/code&gt;. But don't break setting too much. This can become confusing. Due to the fact that multiple inheritance is not supported.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In case of using this option to see the final merged config version use command &lt;code&gt;tsc --showConfig&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-files-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;files&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string[] | false, default: false, related to &lt;code&gt;include&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can specify a list of specific files for compilation using this option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"core.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"app.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This option will be useful for only small projects with several files.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-include-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;include&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type string[], default: depends on &lt;code&gt;files&lt;/code&gt;, related to &lt;code&gt;exclude&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If option &lt;code&gt;files&lt;/code&gt; is not set up TypeScript will use this directive to search for files to compile. If &lt;code&gt;include&lt;/code&gt; is not declared too then its value will be set up as &lt;code&gt;["**/*"]&lt;/code&gt; by default. This means that the search for files will be carried out in all folders and their subfolders. This behavior is not optimal, so for performance reasons it’s best to always specify paths. There can be paths to specific files or path patterns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"src/**/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"tests/**/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If patterns don’t include specific extensions TypeScript will look for &lt;code&gt;.ts&lt;/code&gt;, &lt;code&gt;.tsx&lt;/code&gt; and &lt;code&gt;.d.ts&lt;/code&gt; files. And if &lt;code&gt;allowJs&lt;/code&gt; flag is enabled - then &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.jsx&lt;/code&gt; files also.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;These formats are doing the same &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;./src&lt;/code&gt;, &lt;code&gt;src/**/*&lt;/code&gt;. I prefer &lt;code&gt;./src&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Technically using &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; options TypeScript will create a list of all matched files and place it to &lt;code&gt;files&lt;/code&gt;. You can check it by running &lt;code&gt;tsc --showConfig&lt;/code&gt; command.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-exclude-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;exclude&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string[], default: ["node_modules", "bower_components", "jspm_packages"].&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This directive can be used to exclude unnecessary paths of files that was added by &lt;code&gt;include&lt;/code&gt; directive. By default, the option is set to the paths of the &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;bower&lt;/code&gt; and &lt;code&gt;jspm&lt;/code&gt; package managers, since the modules are already built in them. Besides TypeScript will ignore this folder from &lt;code&gt;outDir&lt;/code&gt; option if it was added. This is the folder where the collected built artifacts are placed. It is logical for them to be excluded. To add your values to this option it’s necessary to restore the defaults. Because user’s values are not merging with default values. In other words, you need to manually specify the root of your package manager modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"node_modules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"./src/**/*.spec.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;code&gt;exclude&lt;/code&gt; option can’t exclude files added by using &lt;code&gt;files&lt;/code&gt; option.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;exclude&lt;/code&gt; option can’t exclude files that imported in other files which are not excluded.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compileroptions-section"&gt;
  &lt;/a&gt;
  compilerOptions section
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-target-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;target&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string, default: &lt;code&gt;ES3&lt;/code&gt;, affects options &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The version of ECMAScript standard in which code will be compiled. Has a lot of choices: &lt;code&gt;ES3&lt;/code&gt;, &lt;code&gt;ES5&lt;/code&gt;, &lt;code&gt;ES6&lt;/code&gt; (same as &lt;code&gt;ES2015&lt;/code&gt;), &lt;code&gt;ES2016&lt;/code&gt;, &lt;code&gt;ES2017&lt;/code&gt;, &lt;code&gt;ES2018&lt;/code&gt;, &lt;code&gt;ES2019&lt;/code&gt;, &lt;code&gt;ES2020&lt;/code&gt;, &lt;code&gt;ESNext&lt;/code&gt;. For backend apps/packages &lt;code&gt;ES6&lt;/code&gt; is okay if you’re using only modern versions of &lt;code&gt;Node.js&lt;/code&gt; and &lt;code&gt;ES5&lt;/code&gt;, to support the older versions. &lt;code&gt;ES6&lt;/code&gt; is supported by &lt;a href="https://caniuse.com/es6"&gt;97.29% browsers&lt;/a&gt; at the moment. So, the situation for frontend apps is the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-module-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;module&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string, default: depends on &lt;code&gt;target&lt;/code&gt;, affects the option &lt;code&gt;moduleResolution&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A modular system that your compiled application will use. You can choose: &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;CommonJS&lt;/code&gt;, &lt;code&gt;AMD&lt;/code&gt;, &lt;code&gt;System&lt;/code&gt;, &lt;code&gt;UMD&lt;/code&gt;, &lt;code&gt;ES6&lt;/code&gt;, &lt;code&gt;ES2015&lt;/code&gt;, &lt;code&gt;ES2020&lt;/code&gt; or &lt;code&gt;ESNext&lt;/code&gt;. For backend apps/packages &lt;code&gt;ES6&lt;/code&gt; or &lt;code&gt;CommonJS&lt;/code&gt; is suitable depending on &lt;code&gt;Node.js&lt;/code&gt; version you want to support. For frontend apps &lt;code&gt;ES6&lt;/code&gt; is also suitable. And for support of older browsers and isomorphic applications, &lt;a href="https://github.com/umdjs/umd"&gt;&lt;code&gt;UMD&lt;/code&gt;&lt;/a&gt; is definitely worth choosing.&lt;/p&gt;

&lt;p&gt;If your situation is not so easy or you want to know all the intricacies of modular systems, then you need to learn the &lt;a href="https://www.typescriptlang.org/docs/handbook/modules.html"&gt;full documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-moduleresolution-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;moduleResolution&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string, default: depends on &lt;code&gt;module&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A strategy will be used for modules import. Includes only two options: &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;classic&lt;/code&gt;. But &lt;code&gt;classic&lt;/code&gt; won't be using in 99% of cases cause it’s legacy. However, I specifically mentioned this flag as it changes depending on the previous flag. Changing value of &lt;code&gt;module&lt;/code&gt; option &lt;code&gt;moduleResolution&lt;/code&gt; mode can be switched to &lt;code&gt;classic&lt;/code&gt; and the console will start to display error messages on the lines with imports.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To avoid this situation, I recommend that you always explicitly specify the &lt;code&gt;node&lt;/code&gt; value for this  flag.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lib-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;lib&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string[], default: depends on &lt;code&gt;target&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TypeScript includes typings (&lt;code&gt;*.d.ts-files&lt;/code&gt;) to support the corresponding specifications depending on which &lt;code&gt;target&lt;/code&gt; is set in the config. For example, if your &lt;code&gt;target&lt;/code&gt; is set up to &lt;code&gt;ES6&lt;/code&gt; TypeScript will include support of &lt;code&gt;array.find&lt;/code&gt; and other options that are in this standard. But when &lt;code&gt;target&lt;/code&gt; is set up to &lt;code&gt;ES5&lt;/code&gt; &lt;code&gt;find&lt;/code&gt; method can’t be used because it’s not available in this JavaScript version. Polyfills can be added. However, in order for TypeScript to understand that this functionality can now be used, it is necessary to include the related typings in the &lt;code&gt;lib&lt;/code&gt; section. Also, you can connect the entire &lt;code&gt;ES2015&lt;/code&gt; standard or its part &lt;code&gt;ES2015.Core&lt;/code&gt; (only &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;findIndex&lt;/code&gt; etc. methods).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sure it’s better to include typings only for the functionality for which polyfills were previously installed.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;For --target ES5 will be lined up: DOM, ES5, ScriptHost
For --target ES6: DOM, ES6, DOM.Iterable, ScriptHost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The defaults are reset at the time you’re adding anything to &lt;code&gt;lib&lt;/code&gt;. It’s necessary to manually add what you need, for example &lt;code&gt;DOM&lt;/code&gt;:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ES5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"DOM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"ES2015.Core"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-outdir-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;outDir&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string, default: equals a root directory.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final folder where the collected artifacts will be placed. There are: &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.d.ts&lt;/code&gt;, and &lt;code&gt;.js.map&lt;/code&gt; files. If no value was set for this option, then all the above files will be copying the structure of the source files at the root of your project. In this case it’ll create difficulties with deleting previous builds and describing &lt;code&gt;.gitignore&lt;/code&gt; files. As a result, the code base will look like a dump. My advice is to put all artifacts in one folder which may be easily deleted or ignored by the version control system.&lt;/p&gt;

&lt;p&gt;If you leave &lt;code&gt;outDir&lt;/code&gt; option empty:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── module
│   └── core.js
│   └── core.ts
├── index.js
└── index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you specify &lt;code&gt;outDir&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── dist
│   └── module
│   |   └── core.js
│   └── index.js
├── module
│   └── core.ts
└── index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-outfile-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;outFile&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string, default: none.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to the description this option allows to unite all files into one. It seems that bundlers like &lt;code&gt;webpack&lt;/code&gt; are no longer needed... However, this option works only if &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;System&lt;/code&gt;, or &lt;code&gt;AMD&lt;/code&gt; value set up for &lt;code&gt;module&lt;/code&gt;. Much to our regret, the option won't work with &lt;code&gt;CommonJS&lt;/code&gt; or &lt;code&gt;ES6&lt;/code&gt; modules. Therefore, you probably won't need to use &lt;code&gt;outFile&lt;/code&gt;. Since the option looks so attractive, but does not work as expected, I decided to warn you about this giant pitfall.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-allowsyntheticdefaultimports-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;allowSyntheticDefaultImports&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: depends on &lt;code&gt;module&lt;/code&gt; or &lt;code&gt;esModuleInterop&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If one of the libraries doesn't have &lt;code&gt;default import&lt;/code&gt; such loaders as &lt;code&gt;ts-loader&lt;/code&gt; or &lt;code&gt;babel-loader&lt;/code&gt; will create it automatically. But &lt;code&gt;d.ts-files&lt;/code&gt; files of this library don't know anything about it. This flag allows compiler to write like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// instead of this import&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// you can use this&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a default option when flag &lt;code&gt;esModuleInterop&lt;/code&gt; is enabled or &lt;code&gt;module&lt;/code&gt; === "system".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-esmoduleinterop-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;esModuleInterop&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By adding a boilerplate to the output code, it allows you to import &lt;code&gt;CommonJS&lt;/code&gt; packages as &lt;code&gt;ES6&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// moment library exporting only like CommonJS&lt;/span&gt;
&lt;span class="c1"&gt;// trying to import it as ES6&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Moment&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;moment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// without esModuleInterop flag the result is undefined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Moment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// with esModuleInterop flag result is [object Object]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Moment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This flag by dependency activates &lt;code&gt;allowSyntheticDefaultImports&lt;/code&gt;. Together they help to get rid of lots of different imports and write it uniformly across the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-alwaysstrict-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;alwaysStrict&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: depends on &lt;code&gt;strict&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Compiler will parse the code in &lt;code&gt;strict mode&lt;/code&gt; and add &lt;code&gt;“use strict”&lt;/code&gt; to output files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;false by default but if flag &lt;code&gt;strict&lt;/code&gt; enabled then true.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-downleveliteration-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;downlevelIteration&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ES6&lt;/code&gt; specification added new syntax for iteration: cycle &lt;code&gt;for / of&lt;/code&gt;, &lt;code&gt;array spread&lt;/code&gt;, &lt;code&gt;arguments spread&lt;/code&gt;. If the project code is compiled to &lt;code&gt;ES5&lt;/code&gt; then construction with cycle &lt;code&gt;for / of&lt;/code&gt; will be converted to common &lt;code&gt;for&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// es6 code&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// es5 code without downlevelIteration&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;_i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But some symbols like &lt;code&gt;emoji&lt;/code&gt; are encoded with two characters. It means that such a transformation will not work as expected in some places. &lt;code&gt;downlevelIteration&lt;/code&gt; flag generates more verbose and more "correct", but less productive code. This code is huge so I won't take up space on the screen. You can find an example here - &lt;a href="https://www.typescriptlang.org/play?#code/MYewdgzgLgBNBOMC8MBEAJApgG2yAhKgNwBQAZiIgBSiSwQwhlxTwCUMA3iTDLRCGyYAdHgDmVCG1IBfIA"&gt;playground&lt;/a&gt; - and choose &lt;code&gt;target -&amp;gt; es5&lt;/code&gt;, &lt;code&gt;downlevelIteration -&amp;gt; true&lt;/code&gt; in settings.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The browser must have an implementation of &lt;code&gt;Symbol.iterator&lt;/code&gt; to make this flag work. Otherwise, you'll need to set up polyfill.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-forceconsistentcasinginfilenames-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;forceConsistentCasingInFileNames&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enables case-sensitive mode for files import. Thereby even in case-insensitive file systems trying to make &lt;code&gt;import FileManager from './FileManager.ts'&lt;/code&gt; will fail if the file is actually named&lt;code&gt;fileManager.ts&lt;/code&gt;. It doesn't hurt to play it safe. TypeScript is all about strictness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compileroptions-section-options-which-are-not-needed-in-every-project"&gt;
  &lt;/a&gt;
  compilerOptions section options which are not needed in every project
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-declaration-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;declaration&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By enabling this flag, in addition to JavaScript files, annotation files known as &lt;code&gt;d.ts&lt;/code&gt; files or typings will be generated for them.&lt;br&gt;
Due to typings it becomes possible to define types for already compiled js files. Other words code is compiling to &lt;code&gt;js&lt;/code&gt; and types to &lt;code&gt;d.ts&lt;/code&gt;-files. This can be useful if you're publishing your package to &lt;code&gt;npm&lt;/code&gt;. All developers can use this library whether they're using native JavaScript or TypeScript.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-declarationdir-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;declarationDir&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string, default: none, related to &lt;code&gt;declaration&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typings are generated next to &lt;code&gt;js&lt;/code&gt;-files as a default. Using this option you can redirect all &lt;code&gt;d.ts&lt;/code&gt; files to a separate folder.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-emitdeclarationonly-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;emitDeclarationOnly&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false, related to &lt;code&gt;declaration&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If for some reason you only need the &lt;code&gt;d.ts&lt;/code&gt; files, then enabling this flag will prevent the generation of&lt;code&gt;js&lt;/code&gt; files.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-allowjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;allowJs&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This flag will help you to port your JavaScript project to TypeScript. By enabling &lt;code&gt;allowJs&lt;/code&gt; flag you'll make TypeScript compiler process not only &lt;code&gt;ts&lt;/code&gt; but also &lt;code&gt;js&lt;/code&gt; files. There is no need to migrate the whole project before continuing the development. You can do it file by file changing their extensions and adding types to them. And the new functionality can be written directly in TypeScript.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-checkjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;checkJs&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false, related to &lt;code&gt;allowJs&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TypeScript will check for errors not in &lt;code&gt;ts&lt;/code&gt; but in &lt;code&gt;js&lt;/code&gt; files also. In addition to the built-in typings for JavaScript language constructs, the TS compiler can also use jsDoc to parse files. I prefer not to use this flag but to put the code in order when I add types to it. However, if your project has good jsDoc code coverage, it's worth giving it a try.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Since version 4.1 when &lt;code&gt;checkJs&lt;/code&gt; is enabled, the&lt;code&gt;allowJs&lt;/code&gt; flag is automatically enabled.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-experimentaldecorators-endraw-and-raw-emitdecoratormetadata-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;experimentalDecorators&lt;/code&gt; and &lt;code&gt;emitDecoratorMetadata&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://refactoring.guru/design-patterns/decorator"&gt;&lt;code&gt;Decorator&lt;/code&gt;&lt;/a&gt; – is a common OOP pattern. It’s possible to implement it using classical approach by writing wrappers. But using the flags mentioned above, you can enable experimental decorator syntax. This syntax allows you to decorate classes, their methods and properties, access modifiers and function arguments using simple &lt;a href="https://tc39.es/proposal-decorators/"&gt;&lt;code&gt;“at (@)” syntax&lt;/code&gt;&lt;/a&gt;, which is widespread in many programming languages.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;experimentalDecorators&lt;/code&gt; flag just activates the syntax, and&lt;code&gt;emitDecoratorMetadata&lt;/code&gt; provides decorators with additional metadata at runtime, with which you can significantly expand the scope of this feature.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To make &lt;code&gt;emitDecoratorMetadata&lt;/code&gt; work you need to add &lt;a href="https://github.com/rbuckton/reflect-metadata"&gt;reflect-metadata&lt;/a&gt; library.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-resolvejsonmodule-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;resolveJsonModule&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: boolean, default: false.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flag allows to enable ability to import &lt;code&gt;*.json&lt;/code&gt; files. No additional installation is required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .json extension must be specified&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-jsx-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;jsx&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type: string, default: none.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the project uses React, you need to enable &lt;code&gt;jsx&lt;/code&gt; support. In most cases &lt;code&gt;react&lt;/code&gt; or &lt;code&gt;react-native&lt;/code&gt; option will be enough. It is also possible to leave the &lt;code&gt;jsx-code&lt;/code&gt; untouched with the &lt;code&gt;preserve&lt;/code&gt; option or use the custom converters &lt;code&gt;react-jsx&lt;/code&gt; and&lt;code&gt;react-jsxdev&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-the-1st-part"&gt;
  &lt;/a&gt;
  Wrapping up the 1st part
&lt;/h2&gt;

&lt;p&gt;In this article I wrote about the most important flags and options that can be useful in the vast majority of projects. In the next part I'll talk about compiler strict settings. I will add a link after publishing.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>tsconfig</category>
      <category>guide</category>
    </item>
    <item>
      <title>Supercharge your blogging efforts with a solid system ⚡</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Mon, 12 Apr 2021 09:59:35 +0000</pubDate>
      <link>https://dev.to/technoglot/supercharge-your-blogging-efforts-with-a-solid-system-3jhf</link>
      <guid>https://dev.to/technoglot/supercharge-your-blogging-efforts-with-a-solid-system-3jhf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@bank_phrom?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Bank Phrom&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/newspaper-printing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Howdy fellow devs! 👋🏻 Warm greetings from Curacao! 😁&lt;/p&gt;

&lt;p&gt;New here? Bon bini! (That's welcome in Papiamentu, the language spoken here on the island 😉) Else, welcome back. 😎&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: Who is this post for? Anyone! But especially for anyone looking to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get better at blogging consistently,&lt;/li&gt;
&lt;li&gt;get started with blogging on the right foot,&lt;/li&gt;
&lt;li&gt;read a fun, light-hearted yet informative post 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, if any of that checks out, you have come to the right place! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#brief-intro"&gt;
  &lt;/a&gt;
  Brief intro ✍🏻
&lt;/h1&gt;

&lt;p&gt;Last week I followed one of the sessions of the Hashnode Bootcamp III. The goal of said "bootcamp" is to help developers build a strong online presence and personal brand. Cool stuff, really! &lt;/p&gt;

&lt;p&gt;The first session facilitated by Sam Julien, DevRel Manager at Auth0 (pronounced Auth zero), really spoke to me. It was titled: "The Counterintuitive Secret to Shipping Better Articles Faster". If you'd like to check out the slides for this talk, you can find them &lt;a href="https://speakerdeck.com/samjulien/the-counterintuitive-secret-to-shipping-better-articles-faster"&gt;here&lt;/a&gt;. In this post, I'll share with you what I have learned form his talk, as well as some blogging tips I've picked up along the way.&lt;/p&gt;

&lt;p&gt;So, without further ado, let's get to it! 🚀&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-system-for-blogging"&gt;
  &lt;/a&gt;
  A system for blogging?! 🤔
&lt;/h1&gt;

&lt;p&gt;Yep. You read that right. But why a system? Many of us may not be huge fans of systems, but let's not deny their benefits. One major benefit of having a system for blogging in place (as described by Sam) is that you stop relying on motivation to get things done. Truth is, motivation is something you are bound to run out of at some point in time. And blogging (or creating any kind of content) only when you feel inspired and motivated, probably means not doing anything at all. Ever.&lt;/p&gt;

&lt;p&gt;Additionally, by having a system for blogging (or for creating content in general), you streamline and speed up the content creation process significantly. How? By always following a set of steps, you are able to produce content (blogs, videos or otherwise) in the same fashion, always maintaining the same quality. Once you have a system, you no longer need to put effort in thinking how and where to start, and that ultimately saves you time. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cool-what-does-that-system-look-like"&gt;
  &lt;/a&gt;
  Cool, what does that system look like? 🔍
&lt;/h1&gt;

&lt;p&gt;Well, the truth is, it can look different for everyone. There is no one-size-fits-all, sorry.  However, here's what Sam proposes: a content creation system with five steps. See the steps below. 👇🏻&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-draft"&gt;
  &lt;/a&gt;
  Step 1️⃣: Draft 📝
&lt;/h4&gt;

&lt;p&gt;In essence, this is the inception of any content you want to create. You typically start off by putting a structure on paper. You come up with an outline for your next article, you do some research and the like. The same principle applies to other forms of content too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-create"&gt;
  &lt;/a&gt;
  Step 2️⃣: Create 💻
&lt;/h4&gt;

&lt;p&gt;In step 2 of the system, you take your draft and start expanding on it. You add images and GIFs, you create diagrams, you write code snippets and so on, until your post is where you want it to be. Ah, and don't forget the grammar and spell check! Might as well get a friend or colleague to proofread your article too, if possible.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-publish"&gt;
  &lt;/a&gt;
  Step 3️⃣: Publish 🔼
&lt;/h4&gt;

&lt;p&gt;This one speaks for itself. This is the step where you finally release your post into the wild. It can be on your personal website, here on DEV.to or wherever else that you are blogging. Cross-posting is highly encouraged, but don't forget your canonical URL! 😉&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-promote"&gt;
  &lt;/a&gt;
  Step 4️⃣: Promote 📣
&lt;/h4&gt;

&lt;p&gt;Perhaps the part that some of us dread the most. Depending on how serious a blogger/content creator you are, you may promote your posts more aggressively across various channels. If you are a casual blogger or content creator, you probably spend zero time in this phase and that is fine too! Stick to whatever you are comfortable with! 😊&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-garden"&gt;
  &lt;/a&gt;
  Step 5️⃣: Garden 👩🏻‍🌾👨🏻‍🌾
&lt;/h4&gt;

&lt;p&gt;In this step you basically groom your content over time so that it ages gracefully. You maintain your posts by revisiting them, updating them wherever necessary and by fixing broken links and the like. Gardening your posts can entail various tasks and can be arduous work, so make sure to go in with a plan.&lt;/p&gt;

&lt;p&gt;For a visual depiction of the whole system, please click &lt;a href="https://speakerdeck.com/samjulien/the-counterintuitive-secret-to-shipping-better-articles-faster?slide=40"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that this five step system can be split in two (2) phases, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;the Creation Phase&lt;/strong&gt;, which entails activities such as drafting and creating, and&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;the Post-Publication Phase&lt;/strong&gt;, which encompasses the remaining three steps; Publish, Promote and Garden.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#you-need-a-toolbox"&gt;
  &lt;/a&gt;
  You need a toolbox 🧰
&lt;/h1&gt;

&lt;p&gt;You've now got a system, or are in the process of crafting one for yourself, but in addition to it, you need a toolbox. To help you in the &lt;strong&gt;Creation Phase&lt;/strong&gt; of your system, Sam suggests you put the following in your toolbox:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;scratchpad&lt;/strong&gt; 📒&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;task manager&lt;/strong&gt; 📝 and&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;knowledge system&lt;/strong&gt; (aka a second brain) 🧠&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of scratchpad tools are &lt;strong&gt;Notepad++&lt;/strong&gt;, &lt;strong&gt;Sublime Text&lt;/strong&gt;, &lt;strong&gt;Google Docs&lt;/strong&gt;, &lt;strong&gt;Drafts&lt;/strong&gt;, or whatever you like to use for quick note taking. When choosing a scratchpad tool, make sure it is fast, easy to use, and supports various export formats.&lt;/p&gt;

&lt;p&gt;Some task manager tools you can use are &lt;strong&gt;OmniFocus&lt;/strong&gt;, &lt;strong&gt;Things&lt;/strong&gt;, &lt;strong&gt;Google Keep&lt;/strong&gt; or, of course, the tool you prefer most. When looking for a task manager (in case you haven't got one), choose for something that works well with your brain. If &lt;strong&gt;Trello&lt;/strong&gt; boards and list formats work wonders for ya, then go for it! You may also want to settle for a tool that allows you to add extra context and tags.&lt;/p&gt;

&lt;p&gt;Lastly, a knowledge system. I'm sure you have heard of &lt;strong&gt;Notion&lt;/strong&gt; at some point. That's nowadays the go-to second brain option for many, many people. But, there's more tools out there, such as &lt;strong&gt;Evernote&lt;/strong&gt;, &lt;strong&gt;Roam&lt;/strong&gt;, &lt;strong&gt;OneNote&lt;/strong&gt;, &lt;strong&gt;Obsidian&lt;/strong&gt; and more... (Yes, the list goes on and on. Welcome to tool hell! 😈) Struggling to choose a tool? No worries, here's what to look for in a second brain kind of tool: various organization formats (collections and the like) and the possibility to add multimedia and other rich content to your notes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-tips"&gt;
  &lt;/a&gt;
  BONUS tips 💡
&lt;/h1&gt;

&lt;p&gt;Before you go, let me give you a few blogging tips as a parting gift. 🎁 I hope you find them helpful!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#start-with-what-you-have"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Start with what you have.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Technical blogs are awesome, but take more time to craft to "perfection". To avoid the early disillusionment, start by sharing some learnings and/or personal experiences that you think may benefit others in the community. Writing from your heart and personal experiences is 10x quicker than writing more complex and technical content (this is by no means discouraged, but do start small and build up from there).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-til-acronym-for-today-i-learned-blogs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Write TIL (acronym for Today I Learned) blogs.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;These are typically small blogs where you share something new that you learned today. These are easier to craft and also serve as a fun way to keep track of what you have learned over time. Here's a TIL format that Sam shared with the audience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;1) Write a short intro&lt;/strong&gt; (2 to 3 sentences) describing the problem you encountered.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2) Write a paragraph or two describing the solution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3) Share the code&lt;/strong&gt; or resources that helped you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;4) Quick 2-sentence recap&lt;/strong&gt; of the problem and solution. Finally, add some social links where people can connect with you.
(Of course you can use your own TIL format, but if you are stuck and don't know where to start, the steps above may be of help.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#be-consistent-yet-realistic"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Be consistent, yet realistic.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;You know your schedule better than anyone else. Working fulltime and blogging/creating content every day, may not be the way to go for most. Whatever you choose to do, be realistic and consistent about it. &lt;/p&gt;

&lt;p&gt;For example, I like to post two blogs every week. Doesn't matter when exactly (I prefer weekdays over weekends), as long as I post two blogs. For me this is doable, so find what works for you and give it your best shot.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#keep-a-list-of-ideas"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Keep a list of ideas.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Pretty obvious one, but really, keep a list. Your brain can't possibly archive all your ideas. Get 'em out of there ASAP! 🧠&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dont-worry-about-the-numbers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Don't worry about the numbers&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;By this I mean, do not measure your success only with number of likes or number of followers. Yes, these can be good metrics to assess what topics your (target) audience likes the best and such, but it says little about your success in general. &lt;/p&gt;

&lt;p&gt;Don't get demotivated if your post doesn't do as well as you hoped it would do. That's totally normal. If I can give you any advice at all (take it or leave it): do it for yourself. The rest will follow. (It is totally acceptable to be ambitious and to want to have a large followers base and the like, but don't lose your sleep over it. Just saying 😉)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's all folks! 🐷
&lt;/h1&gt;

&lt;p&gt;That's it for today's post! If you liked it, let me know in the comments below. 👇🏻 What system do you have in place for blogging or creating content consistently? I'd love to hear from you! &lt;/p&gt;

&lt;p&gt;Remember: stay safe and code on! 👩🏻‍💻👨🏻‍💻 See you soon! &lt;/p&gt;

&lt;p&gt;Sources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/samjulien/the-counterintuitive-secret-to-shipping-better-articles-faster"&gt;Sam's slide deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://samjulien.hashnode.dev/the-counterintuitive-secret-to-shipping-better-articles-faster-ckn4vier40hvlefs19u7h6xan"&gt;A list of resources recommended by Sam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scratchpad tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://notepad-plus-plus.org/"&gt;Notepad++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/"&gt;Google Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getdrafts.com/"&gt;Drafts (iOS &amp;amp; Mac only)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Task Manager tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.omnigroup.com/omnifocus"&gt;OmniFocus (iOS &amp;amp; Mac only, Premium $$)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/things-3/id904237743"&gt;Things (iOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://keep.google.com/"&gt;Google Keep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2nd Brain 🧠 tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://roamresearch.com/"&gt;Roam (Premium $$)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.onenote.com/"&gt;OneNote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>writing</category>
      <category>techtalks</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Access All Videos BEFORE Anyone Else - For 1 coffee a month!</title>
      <author>Davide Benvegnù</author>
      <pubDate>Mon, 12 Apr 2021 09:56:50 +0000</pubDate>
      <link>https://dev.to/n3wt0n/access-all-videos-before-anyone-else-for-1-coffee-a-month-2j52</link>
      <guid>https://dev.to/n3wt0n/access-all-videos-before-anyone-else-for-1-coffee-a-month-2j52</guid>
      <description>&lt;h1&gt;
  &lt;a href="#announcement"&gt;
  &lt;/a&gt;
  📢ANNOUNCEMENT📢
&lt;/h1&gt;

&lt;p&gt;I'm super hyped to announce that we now have the MEMBERSHIPS enabled on the &lt;a href="https://www.youtube.com/c/CoderDave"&gt;CoderDave YouTube channel&lt;/a&gt;... and for &lt;strong&gt;less than 1 coffee a month&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;By being a member, you get &lt;strong&gt;many benefits&lt;/strong&gt;. But the most &lt;strong&gt;important&lt;/strong&gt; ones are:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#early-access-to-all-videos"&gt;
  &lt;/a&gt;
  📼EARLY ACCESS TO ALL VIDEOS
&lt;/h4&gt;

&lt;p&gt;You can see all the videos as soon as they are uploaded. &lt;br&gt;
Usually I upload the videos about a week in advance, and schedule them.&lt;br&gt;
Being a member you can see them straight away!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vh0EMtyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbvc7l3t6rblab59txn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vh0EMtyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbvc7l3t6rblab59txn.png" alt="Memberships"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#access-to-the-discord-server"&gt;
  &lt;/a&gt;
  💌ACCESS TO THE DISCORD SERVER
&lt;/h5&gt;

&lt;p&gt;You get access to CoderDave's community private Discord Server, where you can chat with me and with the other members, via message and audio!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#priority-reply-to-comments"&gt;
  &lt;/a&gt;
  🔂PRIORITY REPLY TO COMMENTS
&lt;/h5&gt;

&lt;p&gt;You'll get your comments to my video replied as soon as I possibly can :)&lt;/p&gt;

&lt;p&gt;✨&lt;strong&gt;AND MUCH MORE!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://www.youtube.com/c/CoderDave/membership"&gt;Membership tab of the channel&lt;/a&gt; to discover more!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>video</category>
      <category>youtube</category>
      <category>news</category>
    </item>
    <item>
      <title>Building a CSS-in-JS library from scratch</title>
      <author>Thomas Cullen</author>
      <pubDate>Mon, 12 Apr 2021 09:28:25 +0000</pubDate>
      <link>https://dev.to/thomascullen/building-a-css-in-js-library-from-scratch-3id5</link>
      <guid>https://dev.to/thomascullen/building-a-css-in-js-library-from-scratch-3id5</guid>
      <description>&lt;p&gt;CSS-in-JS libraries are popping up all over the place at the moment. They are a really powerful way to style apps but how do they actually work?. In this post we are going to build our own CSS-in-JS library.&lt;/p&gt;

&lt;p&gt;Before we dig in it is worth saying that if you are looking for a CSS-in-JS solution, you should probably use one of the existing libraries out there rather then building your own as they are well tested, more performant and have more functionality. This is purely a learning exercise! Let's dive in.&lt;/p&gt;

&lt;p&gt;We are going to create a simple css-in-js library that follows the 'styled' API made popular by &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;. We will only focus on basic functionality so we won't be looking at things like server side rendering or browser prefixing. Most CSS-in-JS libraries work by taking style definitions, generating class names for them and injecting them inside of a style tag in the document head. So let's start by creating this style tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now attach any CSS rules we want to this style tag using the CSSStyleSheet &lt;code&gt;insertRule&lt;/code&gt; method. We can also make use of the &lt;code&gt;cssRules&lt;/code&gt; method to ensure we are always adding the rule to the end of the list by providing the list length as the index we want to insert the rule at.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.red { color: red; }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about the CSSStyleSheet interface &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next thing we need is a function that will take a CSS rule, generate a className, insert a new rule into our style tag and return the generated class name for us to use in our components. For our use case, we can simply use the index to create a unique class name instead of doing any kind of hashing like most libraries do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`css-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; { &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use our &lt;code&gt;css&lt;/code&gt; function to generate class names that we can provide to our components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: red;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is an example&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's great and all but it's far from the API that we want to have. We want to be able to define components using the popular "styled" API like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  color: red;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to achieve this we need to take a quick detour to explore tagged template literals. First we need to know what a template literal is. A template literal is a type of string that allows you to interpolate values inside of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A tagged template literal is a special way of parsing a template literal with a function. This function will be called with an array of all of the string parts as well as any variables provided.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strings: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;args: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thomas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="s2"&gt;`My name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// strings: ["My name is", "!"]&lt;/span&gt;
&lt;span class="c1"&gt;// args: ["Thomas"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we know a template literal can be tagged with a function, we can revisit out css-in-js implementation to achieve the API we want. We need to create a &lt;code&gt;styled&lt;/code&gt; function that takes the type of dom element we want to render and returns a function that we can then use as a tagged template literal to create our react component. Let's keep things simple to start with and just take the styles that we pass in as is so that we can focus on getting the API we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;styledTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// remember that tagged template literals give us the string parts as an&lt;/span&gt;
      &lt;span class="c1"&gt;// array so for now we just pass the first element of the array which will&lt;/span&gt;
      &lt;span class="c1"&gt;// be the entire CSS rule because we aren't passing any variables.&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😦 I know, that's a lot of functions returning functions. Let's walk through it. The &lt;code&gt;styled&lt;/code&gt; function returns the &lt;code&gt;styledTemplate&lt;/code&gt; function. The &lt;code&gt;styledTemplate&lt;/code&gt; function is similar to our &lt;code&gt;greet&lt;/code&gt; function from earlier. We call it as a tagged template literal. This then returns the react component which we can render. So with all of this in place we can do do the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 24px;
  font-weight: 600;
`&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this is finally starting to look like the styled-components API we wanted. But what about things like adapting styles based on component props? Let's say we wanted our Header component to change color based on a &lt;code&gt;color&lt;/code&gt; prop as well as allowing the background-color to be customized with a &lt;code&gt;bg&lt;/code&gt; prop. For that we need to revisit how we are treating the tagged template literal. Remember how our &lt;code&gt;greet&lt;/code&gt; function was given a second array of all of the variables passed into the template literal? Well we can also pass functions into the template literal, which we can then call will our component props at render time. 🤯. Let's create a new function that will process the string literal parts and any functions we provide it into a single CSS rule.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resolveRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this function we only have one thing left to do which is to update our &lt;code&gt;styled&lt;/code&gt; function to make use of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;styledTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolved&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolveRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolved&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have it! Our very own CSS-in-JS library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 24px;
  font-weight: 600;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bg&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@tkh44/writing-a-css-in-js-library-from-scratch-96cd23a017b4"&gt;https://medium.com/@tkh44/writing-a-css-in-js-library-from-scratch-96cd23a017b4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mxstbr.blog/2016/11/styled-components-magic-explained/"&gt;https://mxstbr.blog/2016/11/styled-components-magic-explained/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wesbos.com/tagged-template-literal"&gt;https://wesbos.com/tagged-template-literal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
