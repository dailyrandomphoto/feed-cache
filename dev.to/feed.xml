<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Complete Glossary of Keras Optimizers and When to Use Them (With Code)</title>
      <author>Avi Arora</author>
      <pubDate>Wed, 06 Oct 2021 20:43:34 +0000</pubDate>
      <link>https://dev.to/aarora4/complete-glossary-of-keras-optimizers-and-when-to-use-them-with-code-iij</link>
      <guid>https://dev.to/aarora4/complete-glossary-of-keras-optimizers-and-when-to-use-them-with-code-iij</guid>
      <description>&lt;p&gt;Read the full article here: &lt;a href="https://analyticsarora.com/complete-glossary-of-keras-optimizers-and-when-to-use-them-with-code/"&gt;https://analyticsarora.com/complete-glossary-of-keras-optimizers-and-when-to-use-them-with-code/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;When a deep neural network ends up going through a training batch, where it propagates the inputs through the layers, it needs a mechanism to decide how it will use the predicted results against the known values to adjust the parameters of the neural network. These parameters are commonly known as the weights and biases of the nodes within the hidden layers.&lt;/p&gt;

&lt;p&gt;This above-mentioned mechanism is where the optimizers kick in. Optimizers are the algorithms deciding how the learning parameters are adjusted. These optimizers, along with the loss functions, are the backbone of all deep neural networks.&lt;/p&gt;

&lt;p&gt;Throughout this guide, we'll go through a detailed explanation of how the optimizers work and the different types of optimizers that Keras provides us, along with instantiation examples. Moreover, we'll also be taking a look at the situations where certain optimizers work better than others.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Article Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How Do Optimizers Work?&lt;/li&gt;
&lt;li&gt;How To Use Optimizers in Keras?&lt;/li&gt;
&lt;li&gt;SGD Optimizer&lt;/li&gt;
&lt;li&gt;Adagrad Optimizer&lt;/li&gt;
&lt;li&gt;RMS Optimizer&lt;/li&gt;
&lt;li&gt;Adadelta Optimizer&lt;/li&gt;
&lt;li&gt;Adam Optimizer&lt;/li&gt;
&lt;li&gt;Summary&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>3 Free super duper Tailwind CSS templates for your next project. </title>
      <author>Michael Andreuzza</author>
      <pubDate>Wed, 06 Oct 2021 20:37:26 +0000</pubDate>
      <link>https://dev.to/mike_andreuzza/3-free-super-duper-tailwind-css-templates-for-your-next-project-2kne</link>
      <guid>https://dev.to/mike_andreuzza/3-free-super-duper-tailwind-css-templates-for-your-next-project-2kne</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone!
&lt;/h2&gt;

&lt;p&gt;Long time no read, how are you all doing? Hope good.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Well, I haven't post because I have been very busy working on side projects with &lt;a class="mentioned-user" href="https://dev.to/gabrielperales"&gt;@gabrielperales&lt;/a&gt;
, and because I took a brake on DevTo also... In fact this is the new account, I deleted my past with 5k followers to start over again.&lt;/p&gt;

&lt;p&gt;If you do not know me, this is &lt;a href="https://wickedlabs.dev/"&gt;what I do&lt;/a&gt; and you can follow our projects on &lt;a href="https://twitter.com/Mike_Andreuzza"&gt;my Twitter&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#straight-to-the-point"&gt;
  &lt;/a&gt;
  Straight to the point.
&lt;/h3&gt;

&lt;p&gt;We have made free templates that you can download from our main side projects &lt;a href="https://www.wickedtemplates.com/"&gt;Wicked Templates&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#let-me-tell-you-about-the-stack"&gt;
  &lt;/a&gt;
  Let me tell you about the stack.
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#html-version"&gt;
  &lt;/a&gt;
  HTML Version
&lt;/h4&gt;

&lt;p&gt;We mainly use plain HTML with Tailwind CSS to create our projects, then we use also build the same template with Next.js ( well, &lt;a class="mentioned-user" href="https://dev.to/gabrielperales"&gt;@gabrielperales&lt;/a&gt;
 passes and I build the HTML Version )&lt;/p&gt;

&lt;p&gt;This scaffolding uses gulp to create workflows to make esier the development. These are other of the dependencies and technologies we use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tailwind CSS as utility CSS framework&lt;/li&gt;
&lt;li&gt;Handlebars as template engine to join our layouts, partials into pages.&lt;/li&gt;
&lt;li&gt;Imagemin to minify images and optimize them for web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#nextjs-version"&gt;
  &lt;/a&gt;
  Next.js version
&lt;/h4&gt;

&lt;p&gt;This is a Next.js project bootstrapped with create-next-app.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#this-are-the-templates"&gt;
  &lt;/a&gt;
  This are the templates
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#marfil-built-in-htmltailwind-css"&gt;
  &lt;/a&gt;
  Marfil built in HTML/Tailwind CSS:
&lt;/h4&gt;

&lt;p&gt;This template is a one page portfolio to list all your projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PdTM6a0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2212936/screenshots/16328731/media/f883d1d0cd0d4938ee6ba4af7983a7b6.png%3Fcompress%3D1%26resize%3D1600x1200" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PdTM6a0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2212936/screenshots/16328731/media/f883d1d0cd0d4938ee6ba4af7983a7b6.png%3Fcompress%3D1%26resize%3D1600x1200" alt="Marfil"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gradientti-is-available-on-htmltailwind-css-and-nextjstailwind-css"&gt;
  &lt;/a&gt;
  Gradientti is available on HTML/Tailwind CSS and Next.js/Tailwind CSS
&lt;/h4&gt;

&lt;p&gt;(&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sthaPhAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2kfjm9i8dgfm2ck1ui5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sthaPhAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2kfjm9i8dgfm2ck1ui5.png" alt="Gradientti"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#synthwave-is-available-on-htmltailwind-css"&gt;
  &lt;/a&gt;
  Synthwave is available on HTML/Tailwind CSS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0C-1s6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcjlkydp3bwmgwuhu5yd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0C-1s6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcjlkydp3bwmgwuhu5yd.png" alt="synthwave"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download"&gt;
  &lt;/a&gt;
  Download
&lt;/h3&gt;

&lt;p&gt;If you like them, feel free to download them &lt;a href="https://www.wickedtemplates.com/demos"&gt;from here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions feel free to reach out here or on twitter:&lt;/p&gt;

&lt;p&gt;Michael: &lt;a href="https://twitter.com/Mike_Andreuzza"&gt;https://twitter.com/Mike_Andreuzza&lt;/a&gt;&lt;br&gt;
Gabriel: &lt;a href="https://twitter.com/g_perales"&gt;https://twitter.com/g_perales&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-free-projects-for-web-developers-and-digital-designers"&gt;
  &lt;/a&gt;
  Other free projects for web developers and digital designers:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.colorsandfonts.com/"&gt;Color and typography for Web Developers and Digital Designers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wickedblocks.dev/"&gt;Wickedblocks, ready Made Tailwind CSS blocks, for your next project. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wickedbackgrounds.com/"&gt;Wicked Backgrounds, Create beautiful backgrounds waves for your next project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>nextjs</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>What does inheritance mean when we talk about programming?</title>
      <author>Leo Barnuevo</author>
      <pubDate>Wed, 06 Oct 2021 19:59:12 +0000</pubDate>
      <link>https://dev.to/leobdev/what-does-inheritance-mean-when-we-talk-about-programming-3714</link>
      <guid>https://dev.to/leobdev/what-does-inheritance-mean-when-we-talk-about-programming-3714</guid>
      <description>&lt;p&gt;When it comes to developing code for apps, websites, or any other software product, time is a key resource in the task. It quickly becomes a crucial factor that can make the difference between a pleasant and easy-to-carry project, or a real nightmare.&lt;/p&gt;

&lt;p&gt;However, in our area, fast is not synonymous with easy. It is important to have an order in what we do, even if it takes us a little more time, in this way we ensure that in the end, everything responds as it is supposed to. When it comes to code, a small mistake can cause us to damage our entire work, so keeping it neat and clean is a priority.&lt;/p&gt;

&lt;p&gt;There are things we can do to make our chores easier for us, and the main one is code reuse. This simplifies on a large scale the action of designing, creating, and maintaining all our software projects. &lt;strong&gt;It is in this process that the concept of Inheritance comes into play.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is inheritance in programming:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inheritance is a concept used when we talk about code reuse that involves creating new classes from previously created classes. What happens is that the new class INHERITS functions and attributes of an existing class.&lt;/p&gt;

&lt;p&gt;Putting it in a visual example, we can take as a base any product that we use in our daily life such as a coffee maker. The first coffee maker that the world knew was Caféolette, a cylinder with a plate full of holes that filtered the ground coffee, from which the industrial coffee maker is derived with variations in its form and operation but with the same beginning and end.&lt;/p&gt;

&lt;p&gt;From them, all the coffee machines that we know today emerged. Some have new functions in them or new ways of preparing coffee, but we continue to call them coffee makers, all with their differences but starting from the same place.&lt;/p&gt;

&lt;p&gt;Now that we have a visual example we can see what this definition means in our code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inheritance in the code:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's take as an example a virtual library-type app, where each user can open their accounts and organize their readings. For example, we create the class for our user, a person who can access the library and read the content, but we also need a user type only for the staff that works in the app.&lt;/p&gt;

&lt;p&gt;As this user requires different functionalities and attributes, what we will do is create a new class that inherits all the info from the class that already existed, and give it the corresponding name. In this case, it would be staff, and from that already existing class we begin to give it new responsibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does inheritance work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to reuse the code of the classes to create new objects, we have the parent classes and the child classes. As in a family, it is the child class that inherits the code from the parent class to adapt it to what is required.&lt;/p&gt;

&lt;p&gt;As in real life, a child inherits characteristics from his parents without ceasing to have its own essence, it is not the same or a copy, but it comes from another existing class.&lt;/p&gt;

&lt;p&gt;If one class derives from another, it inherits its functions and attributes, then you can add new attributes, functions, or redefine the inherited ones.&lt;/p&gt;

&lt;p&gt;Code reuse is a resource that we must use, things can get a bit complex doing it, resulting in dirty, messy, and long code. &lt;/p&gt;

&lt;p&gt;Knowing the reality of the concepts that we apply makes us understand how to use them properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are your tips to reuse code successfully?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Welcome Thread - v145</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 06 Oct 2021 19:58:23 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v145-3led</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v145-3led</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohhwESi9BLJqW7J1C/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohhwESi9BLJqW7J1C/giphy.gif" alt="Polar Bear Graphic Waving Hi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Budgie Console</title>
      <author>Yash Datir</author>
      <pubDate>Wed, 06 Oct 2021 18:51:48 +0000</pubDate>
      <link>https://dev.to/yashdatir/budgie-console-e3k</link>
      <guid>https://dev.to/yashdatir/budgie-console-e3k</guid>
      <description>&lt;p&gt;Hey guys, Here I am publishing my new package. It has the capability for changing background, foreground and styles of a boring console that we all use. It also has built in function for displaying loaders in console with greater controls. I don't know how much more can we add to it, but yeah- its simple, yet have no limits to creativity.&lt;/p&gt;

&lt;p&gt;Please checkout: &lt;a href="https://www.npmjs.com/package/budgie-console"&gt;https://www.npmjs.com/package/budgie-console&lt;/a&gt;&lt;br&gt;
Git Repo: &lt;a href="https://github.com/yashdatir/budgie-console"&gt;https://github.com/yashdatir/budgie-console&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>Vanilla JS "Who's that Pokémon?" game with the PokéAPI</title>
      <author>JS Bits with Bill</author>
      <pubDate>Wed, 06 Oct 2021 18:24:18 +0000</pubDate>
      <link>https://dev.to/js_bits_bill/vanilla-js-who-s-that-pokemon-game-with-pokeapi-34m4</link>
      <guid>https://dev.to/js_bits_bill/vanilla-js-who-s-that-pokemon-game-with-pokeapi-34m4</guid>
      <description>&lt;p&gt;Remember that &lt;em&gt;"Who's that Pokémon?"&lt;/em&gt; TV game? Well we can build our own version of this with the &lt;a href="https://pokeapi.co/"&gt;PokéAPI&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If we make a &lt;code&gt;fetch&lt;/code&gt; call to this endpoint (and specify that we want to limit it to the first 151 Pokémon), we'll get a results array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://pokeapi.co/api/v2/pokemon?limit=151&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="c1"&gt;// Logs:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bulbasaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://pokeapi.co/api/v2/pokemon/1/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ivysaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://pokeapi.co/api/v2/pokemon/2/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;venusaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://pokeapi.co/api/v2/pokemon/3/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That &lt;code&gt;url&lt;/code&gt; property inside each object is the pokémon-specific endpoint that can be hit for more information about that individual character. Inside this JSON, there will be a sprite URL like so: &lt;br&gt;
&lt;code&gt;https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the sprite for Pokémon &lt;code&gt;#1&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jv6aebj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jv6aebj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we saw in the original data that Bulbasaur's &lt;code&gt;url&lt;/code&gt; property shows its number  (&lt;code&gt;1&lt;/code&gt;), and this number is the same that's used in the sprite URL, we can use just this original request to get all the information we need to create a "Who's that Pokémon?" game:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ecEhr_c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1633385632/JS%2520Bits/bulbasaur_kga7x0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecEhr_c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1633385632/JS%2520Bits/bulbasaur_kga7x0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The full code for this project is hosted &lt;a href="https://github.com/doctafaustus/whos-that-pokemon"&gt;here&lt;/a&gt;, but the rest of this article will show the core components we'll need to make this work.&lt;/p&gt;

&lt;p&gt;First, our HTML structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fetching"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"pokemon-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"pokeball"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"background.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"pokemon-image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"placeholder.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"answer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"bg-overlay"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"text-overlay"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"play"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Play&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"choices"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;#pokemon-image&lt;/code&gt; source will be set dynamically to show the featured pokémon, and the &lt;code&gt;#choices&lt;/code&gt; element will be populated with multiple-choice answers from the PokéAPI data. The steps to get the need we'll need is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getPokeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemon&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// #1&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomPokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #2&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemonChoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get4Pokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomPokemon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #3&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;firstPokemon&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pokemonChoices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// #4&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPokemonImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstPokemon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// # 5&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;pokemonChoices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonChoices&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;correct&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;firstPokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1) Fetch the array of 151 Pokémon objects (show above).&lt;/p&gt;

&lt;p&gt;2) Shuffle the array show we can show a random group to the user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unshuffled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shuffled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unshuffled&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;shuffled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Save the first 4 objects from this shuffled array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;get4Pokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomPokemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;randomPokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4) Save a reference to the first Pokémon object (the one we'll feature).&lt;/p&gt;

&lt;p&gt;5) Return an object containing the 4 Pokémon choices (shuffled again), and a "correct" object, containing both the name of the featured pokémon and the image URL to show:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPokemonImage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`https://raw.githubusercontent.com/PokeAPI/`&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="s2"&gt;`sprites/master/sprites/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberRegEx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(\d&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)\/&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberRegEx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[])[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll then plug this URL source into our &lt;code&gt;&amp;lt;img id="pokemon-image"&amp;gt;&lt;/code&gt; element and set the brightness of the PNG to &lt;code&gt;0&lt;/code&gt; with CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#pokemon-image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And generate our &lt;code&gt;#choices&lt;/code&gt; content with answer buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pokemonChoices&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gameData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;choicesHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pokemonChoices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;button data-name="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/button&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;choicesHTML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we hook up some additional event handlers and logic to check if the &lt;code&gt;dataset.name&lt;/code&gt; selected matches the correct pokémon, we can toggle some classes to reveal both the right answers and show the full-color pokémon image!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vD9QI_Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1633387082/JS%2520Bits/bulbasaur-revealed_fadwt7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vD9QI_Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1633387082/JS%2520Bits/bulbasaur-revealed_fadwt7.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project code available here: &lt;a href="https://github.com/doctafaustus/whos-that-pokemon"&gt;https://github.com/doctafaustus/whos-that-pokemon&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#full-youtube-tutorial"&gt;
  &lt;/a&gt;
  Full YouTube Tutorial:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=iBR-Pmr-l6E"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cc_8s-p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1633388056/JS%2520Bits/maxresdefault_hvhdzq.jpg"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;b&gt;Yo!&lt;/b&gt; I post byte-sized tips like these often. Follow me if you crave more! 🍿&lt;/p&gt;

&lt;p&gt;I'm on &lt;a href="https://www.tiktok.com/@js_bits"&gt;TikTok&lt;/a&gt;, &lt;a href="https://twitter.com/JS_Bits_Bill"&gt;Twitter&lt;/a&gt; and I have a new &lt;a href="https://jsbits-yo.com/bug-bash/"&gt;debugging course&lt;/a&gt; dropping soon!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Explore Geopolitical data from GDELT
</title>
      <author>Shreyas Soni</author>
      <pubDate>Wed, 06 Oct 2021 18:15:11 +0000</pubDate>
      <link>https://dev.to/sonishreyas/explore-geopolitical-data-from-gdelt-2hnm</link>
      <guid>https://dev.to/sonishreyas/explore-geopolitical-data-from-gdelt-2hnm</guid>
      <description>&lt;p&gt;In this blog, we will explore the geopolitical data from GDELT and see how that data can be used in the analysis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-gdelt"&gt;
  &lt;/a&gt;
  What is GDELT?
&lt;/h2&gt;

&lt;p&gt;The GDELT Project created by Kalev H. Leetaru monitors the world's news from every country in over 100 languages and identifies the people, locations, organizations, themes, sources, emotions, counts, quotes, images, and events driving our global society.&lt;/p&gt;

&lt;p&gt;In this blog, we will have a look at the Events database of GDELT and how this data can be used for analysis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-database"&gt;
  &lt;/a&gt;
  Event Database
&lt;/h2&gt;

&lt;p&gt;The GDELT Event Database catalog over 20 main categories and more than 300 subcategories. Each category is given a particular cameo code. We will be looking into the 20 main cameo codes. That includes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make Public Statement&lt;/li&gt;
&lt;li&gt;Appeal&lt;/li&gt;
&lt;li&gt;Express intent to cooperate&lt;/li&gt;
&lt;li&gt;Consult&lt;/li&gt;
&lt;li&gt;Engage in diplomatic cooperation&lt;/li&gt;
&lt;li&gt;Engage in material cooperation&lt;/li&gt;
&lt;li&gt;Provide aid&lt;/li&gt;
&lt;li&gt;Yield&lt;/li&gt;
&lt;li&gt;Investigate&lt;/li&gt;
&lt;li&gt;Demand&lt;/li&gt;
&lt;li&gt;Disapprove&lt;/li&gt;
&lt;li&gt;Reject&lt;/li&gt;
&lt;li&gt;Threaten&lt;/li&gt;
&lt;li&gt;Protest&lt;/li&gt;
&lt;li&gt;Exhibit military posture&lt;/li&gt;
&lt;li&gt;Reduce relations&lt;/li&gt;
&lt;li&gt;Coerce&lt;/li&gt;
&lt;li&gt;Assault&lt;/li&gt;
&lt;li&gt;Fight&lt;/li&gt;
&lt;li&gt;Use unconventional mass violence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how we can get the data for these events for all countries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-the-data"&gt;
  &lt;/a&gt;
  How to get the data?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;BigQuery
You can query any data you want according to your need. Here is an example of a query.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select SQLDATE,EventRootCode,Actor1CountryCode,NumMentions from gdeltv2.events;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using gdelt python package&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation: &lt;code&gt;pip install gdelt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Call the gdelt version 2 database.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gd2 = gdelt.gdelt(version=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use gd2 object to search for the data of a given date and set table to events.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;results = gd2.Search(['2020-01-01'],table='events',coverage=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#processing-the-data-to-get-timeseries-data-for-all-countries"&gt;
  &lt;/a&gt;
  Processing the data to get Timeseries data for all countries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Load the data into the notebook.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df = pd.read_csv("gdelt.csv");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The data output of the gdelt object has all the columns present in the events database. Now filter it to the columns necessary, i.e., SQLDATE, EventRootCode, Actor1CountryCode, NumMentions
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;results = results[['SQLDATE','EventRootCode','NumMentions','Actor1CountryCode']]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Convert the SQLDATE format from 'YYYYMMDD' to 'YYYY-MM-DD'.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;results['SQLDATE'] = results['SQLDATE'].apply(lambda x: pd.to_datetime(str(x), format='%Y-%m-%d'))            
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Aggregate the data based on SQLDATE, EventRootCode, and Actor1CountryCode.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;results = results.groupby(['SQLDATE','EventRootCode','Actor1CountryCode']).agg('sum').reset_index()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-analysis-and-visualization"&gt;
  &lt;/a&gt;
  Data Analysis and Visualization
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mapping a Line Chart of a particular Cameo code for the country over time.&lt;br&gt;
Example: Protest in USA (Aggregated to Weekly basis)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VbZLHfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/538qmq746r0pxo7y1v21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VbZLHfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/538qmq746r0pxo7y1v21.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mapping Top Cameo codes in a country based on the Number of Mentions of the particular cameo code.&lt;br&gt;
Example: Top Trends in USA (Last Week)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qhX-NyW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o83j465hua7r8udx6mor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhX-NyW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o83j465hua7r8udx6mor.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mapping Top Countries in a particular cameo code based on the Number of Mentions of the particular cameo code in the country.&lt;br&gt;
Example: Top Countries in Protest (Last Week)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWw9Oyp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eejebzd5yi58hugr471.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWw9Oyp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eejebzd5yi58hugr471.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plot a choropleth map for a particular cameo code.&lt;br&gt;
Example: Protest (Today)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dazr6iSa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8kc0hnua6twynecf301.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dazr6iSa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8kc0hnua6twynecf301.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technology-used"&gt;
  &lt;/a&gt;
  Technology Used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;Plotly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code: &lt;a href="https://colab.research.google.com/drive/11gFRPtbPK7fz6OOUR7dYtmtdnN-O_pWM?usp=sharing"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Co-author: &lt;a class="mentioned-user" href="https://dev.to/ashishsalunkhe"&gt;@ashishsalunkhe&lt;/a&gt;
 &lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>gdelt</category>
    </item>
    <item>
      <title>3 tips from "Atomic habits" that helped me on my journey to becoming a full-stack dev at Microsoft</title>
      <author>kapeel kokane</author>
      <pubDate>Wed, 06 Oct 2021 18:09:22 +0000</pubDate>
      <link>https://dev.to/comscience/3-tips-from-atomic-habits-that-helped-me-get-a-job-at-microsoft-56ih</link>
      <guid>https://dev.to/comscience/3-tips-from-atomic-habits-that-helped-me-get-a-job-at-microsoft-56ih</guid>
      <description>&lt;p&gt;Hey There 👋🏾&lt;/p&gt;

&lt;p&gt;Hope you are doing well. 🙌🏾&lt;/p&gt;

&lt;p&gt;I joined &lt;strong&gt;Microsoft&lt;/strong&gt; as a full-stack developer last month and the announcement tweet went viral on Twitter.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel 💙 Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel 💙 Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today is my first day at &lt;a href="https://twitter.com/Microsoft"&gt;@Microsoft&lt;/a&gt; as a full-stack dev 🙂 Hope its the start of an amazing journey 🙌🏾
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:17 AM - 06 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1434792888433446927" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1434792888433446927" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1434792888433446927" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Many of the fellow devs asked me for my journey and what helped me reach there. So I thought of putting this article together by listing out a few small habits that added up over time which helped me get the desired result. Many of the things that I talk about are mentioned in the amazing book &lt;strong&gt;Atomic habits&lt;/strong&gt; by James Clear which I think, every human being must read at least once!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;disclaimer&lt;/strong&gt;: This article is not a place for &lt;strong&gt;tips and tricks&lt;/strong&gt; or a list of &lt;strong&gt;important questions&lt;/strong&gt; to crack any particular interview. It was a long &amp;amp; gradual process for me and I'm just listing down what worked for me. You can try it out and see if it works for you.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-your-environment"&gt;
  &lt;/a&gt;
  1️⃣ Design your environment
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0Rhh5Ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/_Ss12EWsZHEAAAAd/plan-yoda-plan.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0Rhh5Ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/_Ss12EWsZHEAAAAd/plan-yoda-plan.gif" alt="yoda plan"&gt;&lt;/a&gt;&lt;br&gt;
James talks about the power of &lt;a href="https://jamesclear.com/power-of-environment"&gt;environment design&lt;/a&gt; over motivation and here's how we can apply that. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#phone"&gt;
  &lt;/a&gt;
  Phone
&lt;/h4&gt;

&lt;p&gt;People say phones are distracting and toxic. I say people do not know how to use phones. If used properly, it can act as a prime weapon in your arsenal. &lt;br&gt;
Structure your home screen so that instead of Facebook, Instagram, you see &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt;, &lt;a href="https://hashnode.com/"&gt;hashnode&lt;/a&gt;, &lt;a href="https://daily.dev/"&gt;daily.dev&lt;/a&gt; so that when you open your phone, the decision is easy for you to scroll some technical content instead of mindless binge-scrolling!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  YouTube
&lt;/h4&gt;

&lt;p&gt;Most people under-estimate YouTube's capabilities when it comes to learning. You can create a separate Google account and only subscribe learning channels through it. That way, when you switch accounts from the menu bar, you get a nicely curated feed of tutorials and tech updates that you might be interested in. Here are a few awesome channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/TraversyMedia"&gt;Traversy media&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/Freecodecamp"&gt;Freecodecamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/Academind"&gt;Academind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h4&gt;

&lt;p&gt;Twitter is also an amazing place to learn and connect with industry experts. If you do not have a Twitter account, create one today and &lt;strong&gt;ONLY&lt;/strong&gt; follow the accounts that are creating content around the tech that you are interested in. That way, even if you wanted to binge-scroll, it will be curated. You can also follow accounts specific to a particular language like &lt;a href="https://twitter.com/JavaScript"&gt;Javascript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-systems"&gt;
  &lt;/a&gt;
  2️⃣ Create systems
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vn47pwl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/2AQR9FgLS4UAAAAC/do-it-shia-la-beouf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vn47pwl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/2AQR9FgLS4UAAAAC/do-it-shia-la-beouf.gif" alt="just do it"&gt;&lt;/a&gt;&lt;br&gt;
James also talks about the importance of &lt;a href="https://jamesclear.com/goals-systems"&gt;creating systems&lt;/a&gt; rather that setting goals to be successful in the long run. &lt;br&gt;
Hence, instead of trying to rely on motivation which comes and goes, try to set up systems. Those systems can be something like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set 7pm to 8pm as &lt;strong&gt;learning time&lt;/strong&gt; (can be any time slot)&lt;/li&gt;
&lt;li&gt;Listen to &lt;strong&gt;audio books&lt;/strong&gt; while taking a walk&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Never&lt;/strong&gt; watch television alone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These systems, once established in your mind would make it highly improbable for you not to do the right thing. And they also take out decision fatigue. For instance, if its 7:15pm, you definitely know that you must be learning stuff right now and hence you do that, without thinking much. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identity-based-habits"&gt;
  &lt;/a&gt;
  3️⃣ Identity based habits
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqBEyl8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8gaeekfy4dsa63ugw5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqBEyl8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8gaeekfy4dsa63ugw5r.png" alt="layers of identity"&gt;&lt;/a&gt;&lt;br&gt;
The third thing that can help you on your journey is this concept of &lt;a href="https://jamesclear.com/identity-based-habits"&gt;identity based habits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How this can help you on your tech journey is, instead of &lt;strong&gt;trying to build&lt;/strong&gt; stuff using a new tech stack, you can think of &lt;strong&gt;becoming&lt;/strong&gt; a curious developer. &lt;/p&gt;

&lt;p&gt;Instead of studying about algorithms and data structure, you can become the sort of person who &lt;strong&gt;wonders&lt;/strong&gt; about how stuff works. &lt;/p&gt;

&lt;p&gt;If you are also on the path of content creation, then don't try to create content. Become a person who &lt;strong&gt;shares knowledge&lt;/strong&gt; consistently. &lt;/p&gt;

&lt;p&gt;Maybe the examples that I provided are not perfect. Go through the article link that I provided and try to come up with your own identity that would help you stick to your habit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Doing these things would push you in the direction wherein over a long term, you will see yourself grow as a developer. I did. For me, cracking the interviews was not just a process for those 3 or 4 months. It was an amalgamation of the things that I did over the last 5 years. If you are in it for the long run, you will definitely succeed. And even it you don't. there is nothing to loose here! 🙌🏾&lt;/p&gt;

&lt;p&gt;Cheers ✌🏽&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>First Glance: WSL2 &amp; GoLand on Windows 11</title>
      <author>Daniil Maslov</author>
      <pubDate>Wed, 06 Oct 2021 18:07:17 +0000</pubDate>
      <link>https://dev.to/s0xzwasd/first-glance-wsl2-goland-on-windows-11-26l4</link>
      <guid>https://dev.to/s0xzwasd/first-glance-wsl2-goland-on-windows-11-26l4</guid>
      <description>&lt;p&gt;Windows 11 was just released a few days ago and GoLand introduces support for projects inside the WSL2 mount and it is available in the &lt;a href="https://www.jetbrains.com/go/nextversion/"&gt;Early Access Program&lt;/a&gt;. It is a good time to get started and combine things for modern Go development step-by-step.&lt;/p&gt;

&lt;p&gt;I will show you a small introduction to configure WSL2 and GoLand, how to install Go SDK and open projects inside WSL2 mounts. First off, we have to install WSL2 under Windows 11. There are a few steps to consider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-wsl2-on-windows-11"&gt;
  &lt;/a&gt;
  Configure WSL2 on Windows 11
&lt;/h2&gt;

&lt;p&gt;First off, we are going to install WSL2 itself via &lt;code&gt;wsl --install&lt;/code&gt; in PowerShell with &lt;em&gt;admin rights&lt;/em&gt;. The operation takes a bit of time and at the end of it, you can see the successful message: &lt;em&gt;The requested operation is successful. Changes will not be effective until the system is rebooted&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I would say that the process of installing WSL2 in Windows 11 is much easier than earlier. One command does all things.&lt;/p&gt;

&lt;p&gt;After that, open Ubuntu distribution (or change to a different one using &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install#change-the-default-linux-distribution-installed"&gt;Microsoft article&lt;/a&gt;), enter username, password and install Go SDK.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-go-sdk-under-wsl2"&gt;
  &lt;/a&gt;
  Install Go SDK under WSL2
&lt;/h3&gt;

&lt;p&gt;There are a few ways to install Go SDK:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://golang.org/doc/install"&gt;Official guide&lt;/a&gt; from Go team.&lt;/li&gt;
&lt;li&gt;Go &lt;a href="https://snapcraft.io/go"&gt;snap package&lt;/a&gt; on Ubuntu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer an official guide. It is pretty well documented and easy to start. Pay attention that it requires &lt;em&gt;sudo&lt;/em&gt; privileges for the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget -c https://golang.org/dl/go1.17.1.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few preparations to use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify &lt;code&gt;export PATH=$PATH:/usr/local/go/bin&lt;/code&gt; under &lt;code&gt;$HOME/.profile&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Load &lt;code&gt;$PATH&lt;/code&gt; changes to the current shell session: &lt;code&gt;source ~/.profile&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To confirm that Go is configured properly, we can execute &lt;code&gt;go version&lt;/code&gt; and should get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go version go1.17.1 linux/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are good to go to the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-opening-in-goland"&gt;
  &lt;/a&gt;
  Project opening in GoLand
&lt;/h2&gt;

&lt;p&gt;Let's create our project right from GoLand. On Welcome Screen, select New Project and specify project location under WSL2 mount. You can create directories from the pop-up by right-clicking on the root folder. Make sure that the path to the project contains &lt;code&gt;\\wsl$&lt;/code&gt; prefix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\\wsl$\Ubuntu\home\s0xzwasd\Projects\Go\dev-to-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uWSoDL5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwx6qv6hrm1zj8g8hwh6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uWSoDL5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwx6qv6hrm1zj8g8hwh6.png" alt="An option to create directories in GoLand"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GoLand highlights a warning and requires Go SDK in WSL. We can click on the Plus icon and choose Local, then find Go SDK (&lt;code&gt;\\wsl$\Ubuntu\usr\local\go&lt;/code&gt; by default). Create a project and wait for Go SDK indexing.&lt;/p&gt;

&lt;p&gt;As an example, I take &lt;a href="https://gobyexample.com/interfaces"&gt;Go by Example: Interfaces&lt;/a&gt; code snippet. Let's run it via gutter icons around &lt;code&gt;main()&lt;/code&gt; function. After that, try to debug a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1YgYBlkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wo1ycbak06psplcz24x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1YgYBlkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wo1ycbak06psplcz24x.png" alt="GoLand runs code from WSL2 mount"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've configured all necessary environments to get developer things done. 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;So, there are several limitations at the moment, especially symlinks and File Watchers are not supported (&lt;a href="https://youtrack.jetbrains.com/issue/IDEA-253253"&gt;IDEA-253253&lt;/a&gt;, &lt;a href="https://youtrack.jetbrains.com/issue/WEB-38925"&gt;WEB-38925&lt;/a&gt;) as well as External Tools (&lt;a href="https://youtrack.jetbrains.com/issue/IDEA-201045"&gt;IDEA-201045&lt;/a&gt;) and Mozilla RR (&lt;a href="https://github.com/rr-debugger/rr/issues/2506"&gt;GITHUB-2506&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can use WSL2 and GoLand for Go development for now. It is much easier to get started and separate personal and development environments. As a benefit of Windows 11, we can &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/tutorials/gui-apps"&gt;run GUI apps&lt;/a&gt; inside WSL2 and it looks really promising.&lt;/p&gt;

</description>
      <category>go</category>
      <category>windows</category>
      <category>goland</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Rendering Options on the Web: Server, Client, Static</title>
      <author>Thomas Desmond</author>
      <pubDate>Wed, 06 Oct 2021 18:02:02 +0000</pubDate>
      <link>https://dev.to/thetombomb/rendering-options-on-the-web-server-client-static-20e</link>
      <guid>https://dev.to/thetombomb/rendering-options-on-the-web-server-client-static-20e</guid>
      <description>&lt;p&gt;&lt;em&gt;Server Side Rendering (SSR), Client Side Rendering (CSR), and Static Site Generation (SSG) let's talk about the big three rendering options for the web. Descriptions of each, SEO considerations, and go more deeply into performance indicators, and more.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;Choosing the right rendering option for your architecture is important because it's one of the first decisions you make for your web apps, and it only gets harder and harder to change the more you build out a project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rendering-on-the-web"&gt;
  &lt;/a&gt;
  What is Rendering on the web?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Rendering on the web is the process of transforming website code into the interactive pages that users visit.&lt;/strong&gt; During the rendering process, many things could happen, such as calling an API, loading data from a database, executing JavaScript, and more. In this post, I am not too concerned about the details of what is happening but more interested in the &lt;em&gt;Where&lt;/em&gt; and &lt;em&gt;When&lt;/em&gt; the rendering is happening. Are we performing these actions on a server? In the visitors browser? Or possibly way early at build time before any user has even visited the site? Each of these approaches has its benefits and drawbacks and I want to compare them all. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-visitors-story"&gt;
  &lt;/a&gt;
  The Visitors Story
&lt;/h2&gt;

&lt;p&gt;To help explain web rendering, I want to provide the visitors perspective. I think it will help us understand the differences between SSR, CSR, and SSG. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Johnny wants to visit this site. He types in &lt;a href="http://thetombomb.com"&gt;TheTomBomb.com&lt;/a&gt; into his browsers URL bar and presses the Enter key. Now what?&lt;/strong&gt; Well, Johnny doesn't want to know how the content he loves gets to the page, but he wants an enjoyable experience along the way. He wants to get the answers he came for quickly, be able to interact with the page consistently, and doesn't want unnecessary content popping and shifting around what he is really looking for. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-rendering-performance-indicators"&gt;
  &lt;/a&gt;
  Web Rendering Performance Indicators
&lt;/h2&gt;

&lt;p&gt;Throughout this post, I will reference several performance indicators. Let's dive into those and make sure we are all on the same page for rendering performance measurements. I've broken them up into two sections, early indicators and ending indicators. The early indicators are things that happen at the very beginning of rendering process, while ending indicators happen at the end of the process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XijnLCwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhw7nguhfjk1xi2fh7v7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XijnLCwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhw7nguhfjk1xi2fh7v7.jpg" alt="The starting line of a track meet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-early-performance-indicators"&gt;
  &lt;/a&gt;
  The Early Performance Indicators
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;First Contentful Paint (FCP):&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is it:&lt;/em&gt; The time it takes for the first text or image to be painted on the screen&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do I care:&lt;/em&gt; This is the first thing your visitor sees on the page. Johnny wants some sign that the page is loading. Seeing a blank page is discouraging. If things are loading, even if it's not the main article or image, it reassures the Johnny. This metric may not be the most useful as a loading spinner could be the first thing to be painted, but a loading indicator is better than a blank screen. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to First Byte (TTFB):&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is it:&lt;/em&gt; The time it takes between the visitors browser requesting to view a page and when the browser receives its first byte of information. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do I care:&lt;/em&gt; A high TTFB is a sign of slow load times or slow server. A high TTFB may mean that your server has to do a lot of work before it can respond to a request. Optimizing TTFB can drastically improve user experience. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-ending-performance-indicators"&gt;
  &lt;/a&gt;
  The Ending Performance Indicators
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Largest Contentful Paint (LCP):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is it:&lt;/em&gt; The time it takes for the largest image or text block to become visible within the view port. The megabytes or kilobytes do not come into consideration here it this is physical screen real estate. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do I care:&lt;/em&gt; The assumption is that the largest physical piece of content to be rendered to the page will be what the user came to see. For example, for this blog post you are reading now, the text is the largest piece of content and it is indeed what you came for; I hope.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to Interactive (TTI):&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is it:&lt;/em&gt; The time it takes for the page to become FULLY interactive. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do I care:&lt;/em&gt; This is important because some pages prioritize visuals and will load up a beautiful-looking page. But when you try to click a link or scroll the page, it appears frozen. The page looking complete but not interactive is a big disruption in user experience.  &lt;/p&gt;

&lt;p&gt;There are definitely more performance indicators out there, but FCP, TTFB, LCP, and TTI are what I want to focus in on when compare the different rendering options. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-side-rendering-ssr"&gt;
  &lt;/a&gt;
  Server Side Rendering (SSR)
&lt;/h2&gt;

&lt;p&gt;Server side rendering, this is where you make the server do the bulk of the work. Sometimes referred to as Just In Time (JIT) rendering. With SSR, the server receives the request to visit a page, and the server generates the HTML for the page. &lt;/p&gt;

&lt;p&gt;The server takes on the responsibility of executing most or all of the JavaScript, gathering data from databases, calling API's, and doing any personalization. The server is good at these things because has a fast internet connection, have a powerful processor, and can render ready to go HTML quickly and send that back down to the page visitor.&lt;/p&gt;

&lt;p&gt;Once the server sends the HTML to the visitors browser, the browser may have just a little JavaScript to execute but far less than we'll see in Client Side Rendering. This makes SSR very SEO friendly. Minimal to no JavaScript has to be executed by the browser and search engine crawlers. Many search engine crawlers cannot execute any JavaScript; Google can, but with mixed results. So the less JavaScript required the better for SEO.  &lt;/p&gt;

&lt;p&gt;Something to keep in mind though with SSR is that the user sees nothing until the server responds. So if there is a lot of data gather or API calls that need to happen, there can be quite a delay between the request and Time to First Byte. But once the HTML arrives at the browser it is basically ready to go, so First Contentful Paint and Time To Interactive are the same or very close together. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSR Cheatsheet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✔ Put the rendering work on the fast, powerful server&lt;/p&gt;

&lt;p&gt;👍 SEO, FCP, TTI, Mobile friendly because of less load&lt;/p&gt;

&lt;p&gt;👎 TTFB, Blank screen while server does processing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgUCH27r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gghhlugyt46ooc8px0qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgUCH27r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gghhlugyt46ooc8px0qg.png" alt="Flow Diagram of Server Side Rendering (SSR)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#client-side-rendering-csr"&gt;
  &lt;/a&gt;
  Client Side Rendering (CSR)
&lt;/h2&gt;

&lt;p&gt;Client side rendered applications are websites entirely rendered in the browser with JavaScript. With CSR, an extremely barebones HTML page is sent over with download links the JavaScript required to render the full page. The server sends the building blocks, and it is up to the browser to assemble them. Because so little data is initially sent, CSR can have a quick FCP and TTFB. However, the browser still has a lot of work to do before useful content is ready to be displayed.&lt;/p&gt;

&lt;p&gt;CSR is very popular and most commonly used with frameworks such as React, Angular, and Vue. The JavaScript that loads starts up these frameworks and they take over from there. They handle data fetching, routing, and more. You may have heard of these referred to as SPA or Single Page Applications.&lt;/p&gt;

&lt;p&gt;JavaScript being enabled is essential for CSR to work. And it's important to realize downloading JavaScript takes time, especially on a mobile data connection. JavaScript is great for interactive web pages but requires work up front to download and execute it.&lt;/p&gt;

&lt;p&gt;SEO is also a concern. So far, only Google web crawlers can execute JavaScript and even then there are mixed results. For best SEO results, sticking with SSR or SSG is the way to go. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSR Cheatsheet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✔ A minimal HTML file sent to browser containing all information needed to load JavaScript and bootstrap web app.&lt;/p&gt;

&lt;p&gt;👍 FCP, TTFB, extremely flexible, potential costs savings because of lower server requirements &lt;/p&gt;

&lt;p&gt;👎 SEO, dependent on JavaScript being enabled&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnCMLFt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v5ivkmvow3t1o7ttj14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnCMLFt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v5ivkmvow3t1o7ttj14.png" alt="Flow diagram of Client Side Rendering (CSR)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-site-generation-ssg"&gt;
  &lt;/a&gt;
  Static Site Generation (SSG)
&lt;/h2&gt;

&lt;p&gt;With Static Site Generation, all your HTML gets generated ahead of time during build time. SSG, sometimes referred to as Ahead of Time (AoT) rendering, is also a major part of Jamstack.&lt;/p&gt;

&lt;p&gt;SSG differs from the previous two rendering options. Now, during build time before a user even visits any page, static HTML files get built. This means you do not know who the visitors are going to your pages, meaning personalization is not possible without rehydration. (Rehydration is a topic for another time that I plan on writing about). &lt;/p&gt;

&lt;p&gt;But because all content is static, no server is needed outside of the build server that builds the pages. All the static content can lives on a Content Delivery Network (CDN). When a request for a page comes in, an immediate response of the static HTML is sent back.&lt;/p&gt;

&lt;p&gt;SSG is great because of the low hosting fees and extremely fast speed. But very limiting because all content is created ahead of time. Blogs, product pages, and other content that does not change often are perfect for SSG. This blog is completely statically generated!   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSG Cheatsheet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✔  Generate static pages during build time that get directly served to visitors.&lt;/p&gt;

&lt;p&gt;👍 SEO, TTFB, FCP, mobile friendly, FAST content delivery&lt;/p&gt;

&lt;p&gt;👎 Inflexible because we do not have any information on visitors at build time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11-96bAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmyiqjbc6ol76ig0w4go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11-96bAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmyiqjbc6ol76ig0w4go.png" alt="Flow diagram of Static Site Generation (SSG)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bringing-it-all-together"&gt;
  &lt;/a&gt;
  Bringing it all together
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Cxxi-GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d52yixzbomjnwvqprg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Cxxi-GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d52yixzbomjnwvqprg8.png" alt="Table comparing the three different web rendering options: SSR, CSR, SSG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The big three rendering options SSR, CSR, and SSG all have their place. CSR has become extremely popular with the release of frontend frameworks like React and Angular. Pushing the effort of rendering down to the visitors browser is a nice way of eliminating load on the server. &lt;/p&gt;

&lt;p&gt;Many web applications still use SSR, where most or all the load is on the server, today. When SEO and personalization are a concern, SSR fills those requirements. It may cost more because of the server costs, but you'll need to weigh the options on your own. &lt;/p&gt;

&lt;p&gt;SSG is almost in a category of its own because of its ahead of time rendering. It checks all the boxes for SEO and performance, but you must be prepared for the lack of personalization. Rendering your pages during build times means you have no information about who is or will visit your pages. Sites like this blog are perfect for SSG because of the mostly static content.&lt;/p&gt;

&lt;p&gt;It's up to you to decide what will work best in your environment. If you have come this far, you are considering all your options and on your way to making an informed decision!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Frontend Bundler Braindump</title>
      <author>Konnor Rogers</author>
      <pubDate>Wed, 06 Oct 2021 17:33:18 +0000</pubDate>
      <link>https://dev.to/paramagicdev/frontend-bundler-braindump-10fj</link>
      <guid>https://dev.to/paramagicdev/frontend-bundler-braindump-10fj</guid>
      <description>&lt;h2 id="what-is-this"&gt;
  &lt;a href="#what-is-this"&gt;
    What is this?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The following is a collection of terminology and definitions of various bundling terms I've come across over the last year. This is meant to be an introduction to what a frontend bundler is, what is does, why they exist, and some of the common terminology used by bundlers. This will&lt;br&gt;
not target any specific bundler (webpack, rollup, vite, snowpack, etc) but rather, this will provide some context around some of the things these bundlers do and how they work. This is intended to be a reference to my future&lt;br&gt;
self who will inevitably forget most of this.&lt;/p&gt;

&lt;h2 id="what-will-be-covered"&gt;
  &lt;a href="what-will-be-covered"&gt;
    What will be covered?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-bundlers"&gt;Why do bundlers exist?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-imports"&gt;Why do we have different import syntax?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-bare-module-import"&gt;What is a bare module import?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-an-entrypoint"&gt;What is an entrypoint?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-loader"&gt;What is a loader?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-chunk"&gt;What is a chunk? (code splitting)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-hashing"&gt;What is hashing? (fingerprinting, digest, etc)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-treeshaking"&gt;What is treeshaking?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-side-effects"&gt;What are side-effects?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="why-bundlers"&gt;
  &lt;a href="#why-bundlers"&gt;
    Why do bundlers exist?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Bundlers exist to solve a couple different problems, and they've evolved as the problems they solve has evolved.&lt;/p&gt;

&lt;p&gt;Initially bundlers existed to solve 3 problems (mainly)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concatenation&lt;/li&gt;
&lt;li&gt;Minification&lt;/li&gt;
&lt;li&gt;Compression (kind of)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="concatenation"&gt;
  &lt;a href="#concatenation"&gt;
    Concatenation
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Concatenation is the process of combining multiple files into a singular file. This is important because prior to HTTP/2, the network cost to import asset files was significantly higher, meaning it took longer. This meant it was super important to ship as few asset files to the end user as possible to increase performance.&lt;/p&gt;

&lt;h3 id="minification"&gt;
  &lt;a href="#minification"&gt;
    Minification
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Minification is the process of taking a file, and making it as small as possible. IE: shortening variable names to shorthand, shortening function calls, eliminating whitespace, etc.&lt;/p&gt;

&lt;h3 id="compression"&gt;
  &lt;a href="#compression"&gt;
    Compression
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As an addition to minification there is also the idea of "compression". Compression is the process of taking a file, and reducing its overall size by making it smaller by using some kind of &lt;a href="https://en.wikipedia.org/wiki/Data_compression"&gt;Compression Algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Compression is sometimes referred to as "zipping", "gzipping". What compression does under the hood is beyond the scope of this article, but its just another technique to reduce file size (note that a "gzipped" file can be uncompressed by a browser quite easily and the code inside the file will be the same when uncompressed unlike with&lt;br&gt;
minification)&lt;/p&gt;

&lt;h3 id="additional-problems"&gt;
  &lt;a href="#additional-problems"&gt;
    Additional Problems
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As time went on, developers wanted more from their bundlers. They wanted to use files that "transpile" to JavaScript. Developers wanted bundling, but not 1 massive file. They wanted to "chunk" or "code split" their files. With the advent of HTTP/2 connection multiplexing, shipping&lt;br&gt;
multiple smaller files actually became more advantageous.&lt;/p&gt;

&lt;p&gt;Now, bundlers solve these additional problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sourcemaps&lt;/li&gt;
&lt;li&gt;transpilation&lt;/li&gt;
&lt;li&gt;code splitting (chunking)&lt;/li&gt;
&lt;li&gt;tree shaking (elimination of dead code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the above topics are fairly in-depth, we will cover what they are below. But first, lets circle back to "concatenation", or in other terms, how to share code between files with JavaScript.&lt;/p&gt;

&lt;h2 id="why-imports"&gt;
  &lt;a href="#why-imports"&gt;
    Why do we have different import syntax?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you've been around JavaScript, you've no doubt seen something like&lt;br&gt;
the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then you may have also seen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and been wondering, what the heck is the difference?&lt;/p&gt;

&lt;p&gt;Well the simple answer is Example 1 uses "CommonJS" syntax (also known as CJS)&lt;/p&gt;

&lt;p&gt;Example 2 uses "ES Module" syntax (also know as ESM)&lt;/p&gt;

&lt;p&gt;There is also a third module definition called UMD (universal module definition) that leverages CommonJS.&lt;/p&gt;

&lt;p&gt;To put it plainly, CommonJS is NodeJS's original importing syntax. ES Modules are part of the ES Module spec which is the spec defined by the browser for importing JavaScript files. UMD came out before ES Module syntax existed which attempted to guess the environment it was loaded in&lt;br&gt;
and provide appropriate file sharing.&lt;/p&gt;

&lt;p&gt;Essentially UMD was intended to bridge the CommonJS syntax for use in the browser. It's important to note both UMD and CJS predate the ESM specification and is why they both exist despite ESM being the standard at this point in time.&lt;/p&gt;

&lt;p&gt;For the remainder of this article, we will focus mainly on ESM syntax since its the standard and because having to define caveats for every possible syntax is tiresome.&lt;/p&gt;

&lt;h2 id="what-is-a-bare-module-import"&gt;
  &lt;a href="#what-is-a-bare-module-import"&gt;
    What is a bare module import?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;While we're on the subject of imports, what is a "bare module import" and why is it special?&lt;/p&gt;

&lt;p&gt;A bare module specifier is when you provide a path to a file without a "relative qualifier". For example, the following is a bare module import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jquery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the idea of bare module specifiers comes from NodeJS. Node performs and automatic lookup into your "node_modules" directory when you do not provide a relative qualifier. So the above roughly translates to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../node_modules/jquery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is whats called a "relative module specifier", which means it is being given a "relative" filepath to find the file in your system.&lt;/p&gt;

&lt;p&gt;This is important because the ESM spec does not support "bare module specifiers" which means that a developer needs to do 1 of 2 things to fix bare module specifiers:&lt;/p&gt;

&lt;p&gt;A.) Setup an importmap to tell the browser where to find the module.&lt;br&gt;
B.) Transpile the code to be a relative module.&lt;/p&gt;

&lt;p&gt;Option A introduces the idea of "importmaps", importmaps are a fairly new concept. Essentially an importmap says "when you see this bare module specifier, here is the relative path to the module so you know where to find it". It's essentially a hint of the browser of how to resolve a bare module. To read more about importmaps, check out Modern Web's Importmap documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://modern-web.dev/docs/dev-server/plugins/import-maps/"&gt;https://modern-web.dev/docs/dev-server/plugins/import-maps/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Option B introduces the idea of "transpilation" which we will talk about when we get into "loaders"&lt;/p&gt;

&lt;h2 id="what-is-an-entrypoint"&gt;
  &lt;a href="#what-is-an-entrypoint"&gt;
    What is an entrypoint?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;An entrypoint is another way of saying a "bundle". Essentially an&lt;br&gt;
entrypoint can go by many names, for example in Webpacker &amp;lt; 5, its&lt;br&gt;
called a "pack". Although it may go by many names, at the end of the day an entrypoint&lt;br&gt;
tells a bundler to "bundle this file", in other words, grab all the&lt;br&gt;
files it imports and create whats called a "dependency graph" and then&lt;br&gt;
create a bundled file (and depending on setup, also create "chunks")&lt;/p&gt;

&lt;p&gt;What is a dependency graph you may ask? Well a dependency graph is essentially a way for the bundler to map out what packages and files are in your "entrypoint" file and properly bundle those into the final file.&lt;/p&gt;

&lt;p&gt;This also begs the question of "what happens if one entrypoint imports another?" This can create whats called a "circular dependency". In other words, A depends on B, but B depends on A, so who gets resolved first?&lt;/p&gt;

&lt;p&gt;Circular dependencies can also happen within regular packages, but can usually be resolved by your bundler, although the general recommendation is to try to avoid circular dependencies as much as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spin.atomicobject.com/2018/06/25/circular-dependencies-javascript/"&gt;https://spin.atomicobject.com/2018/06/25/circular-dependencies-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another concept of entrypoints is this is where "loaders" or "transpilers" will generally do what they need to do.&lt;/p&gt;

&lt;h2 id="what-is-a-loader"&gt;
  &lt;a href="#what-is-a-loader"&gt;
    What is a loader?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A loader is a way for a bundler to convert a non-JavaScript file into JavaScript compatible syntax. For example, lets imagine I import a png into a JavaScript file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./circle.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;img src="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's actually happening is if you're using something like "Webpack", there is what's called a "loader" which will transform this png into a JavaScript compatible object and will allow you to grab the final location of the "circle" and point the image src to it. This syntax is not supported by the official ESM spec, but rather is something handled&lt;br&gt;
by bundlers to allow users to reference non-JavaScript files inside a JavaScript file.&lt;/p&gt;

&lt;p&gt;Another filetype that requires a "loader" or "transpiler" is TypeScript! Lets imagine I import a TypeScript file into a JavaScript file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TSFile&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./tsFile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I omitted the &lt;code&gt;.ts&lt;/code&gt; since TypeScript itself doesn't support importing &lt;code&gt;.ts&lt;/code&gt; files. If you import a &lt;code&gt;.ts&lt;/code&gt; file in the browser, it just won't work. Instead, bundlers transpile the &lt;code&gt;.ts&lt;/code&gt; file using the TypeScript transpiler (or compiler whatever you prefer) and then turns it into a&lt;br&gt;
usable JavaScript file.&lt;/p&gt;

&lt;p&gt;The important thing about loaders and minification and everything else changing the final output, is it obscures where the initial code comes from. To solve this problem, bundlers implement something called "sourcemaps". Sourcemaps are a way of mapping transpiled code to it's original source code. This is particularly important for tracking down errors since its very hard to debug minified / transpiled code without sourcemaps available.&lt;/p&gt;

&lt;p&gt;While we're here, now would be a good time to talk about "targets". The idea of a "target" is to tell a bundler to "output JavaScript syntax compatible with this EcmaScript (ES) spec, or output JavaScript syntax compatible with these browsers"&lt;/p&gt;

&lt;p&gt;For example, you may have seen targets written like this:&lt;br&gt;
&lt;code&gt;targets: "es6"&lt;/code&gt; or when targetting browsers:&lt;br&gt;
&lt;code&gt;targets: "&amp;gt; 0.1%, not dead, not IE 11, supports-esmodules"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a way of using "modern" JavaScript syntax while being able to be backwards compatible with older browsers.&lt;/p&gt;

&lt;p&gt;On the subject of "modern", lets move on to talk about code splitting or chunking.&lt;/p&gt;

&lt;h2 id="what-is-a-chunk"&gt;
  &lt;a href="#what-is-a-chunk"&gt;
    What is a chunk? (Code Splitting)
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A chunk is merely a segmented JavaScript file from the main bundle. Chunks are fairly new and they are a result of the browser evolving. As the browser has evolved, so to have bundlers. Browsers have better support for simultaneously&lt;br&gt;
downloading asset files so when using HTTP/2 compatible servers, multiple smaller files can actually be better for performance.&lt;/p&gt;

&lt;p&gt;Let dig in to how chunks are created.&lt;/p&gt;

&lt;p&gt;There are multiple ways to create chunks. The 2 most common ways are "critical path" code splitting and "file size" code splitting.&lt;/p&gt;

&lt;p&gt;The first form of chunking called "file size chunking", means "pick an arbitrary file size and make a chunk at that size". For example, lets choose 20kb (since thats what the Webpack SplitChunks plugin uses &lt;a href="https://webpack.js.org/plugins/split-chunks-plugin/"&gt;https://webpack.js.org/plugins/split-chunks-plugin/&lt;/a&gt;). This means any&lt;br&gt;
file I import thats greater than 20kb will automatically be turned into a chunk.&lt;/p&gt;

&lt;p&gt;The second form of chunking called "critical path code splitting" means:&lt;/p&gt;

&lt;p&gt;"only import the most important files for rendering first, and then import the other 'chunks' after the initial critical bundle has loaded". &lt;/p&gt;

&lt;p&gt;This helps achieve faster initial loading for people browsing your website.&lt;/p&gt;

&lt;p&gt;Another way of talking about critical path code splitting is called "dynamic imports". A dynamic import gets imported at runtime. Heres the difference between a static and dynamic import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mymodule&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; dynamic&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mymodule&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; static&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be important when we talk about "statically analyzable files" when we explain what treeshaking is.&lt;/p&gt;

&lt;h2 id="what-is-treeshaking"&gt;
  &lt;a href="#what-is-treeshaking"&gt;
    What is treeshaking?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Treeshaking, otherwise referred to as "dead code elimination" is a way for your bundler to get rid of unused code. This process is can be error prone and will be specific to the bundler you're using and its internal AST (Abstract Syntax Tree)&lt;/p&gt;

&lt;p&gt;Every bundler implements treeshaking slightly differently but heres the core concepts:&lt;/p&gt;

&lt;p&gt;To be treeshakeable a file should do at least the following:&lt;/p&gt;

&lt;p&gt;A.) Be statically analyzable&lt;br&gt;
B.) Provide static references to imports&lt;br&gt;
C.) Should not have side effects&lt;/p&gt;

&lt;p&gt;Statically analyzable means it cant use an interpolated string to import a file. Here's an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Statically analyzable&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// Not statically analyzable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Static references means you cant use a "dynamic accessor" on an object. This doesnt really affect ESM since it has an explicit "grab only what I need" syntax, but is worth talking about. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Treeshakeable!&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onlyThis&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;large-module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// hard to treeshake / possibly not treeshakeable (depends on bundler)&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Blah&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// Not treeshakeable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dynamic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's talk side-effects, which warrant their own section below.&lt;/p&gt;

&lt;h2 id="what-are-side-effects"&gt;
  &lt;a href="#what-are-side-effects"&gt;
    What are side effects?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A side-effect is a piece of code that runs when a file is&lt;br&gt;
"imported". You may be familiar with side-effects if you've browsed the Webpack docs. &lt;a href="https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free"&gt;https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, lets look at two files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// side-effect.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyCustomElement&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-custom-element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyCustomElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// entrypoint.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;side-effect.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I import "side-effect.js", the code will automatically run despite not calling any functions when its imported. This makes it hard for bundlers to know if &lt;code&gt;side-effect.js&lt;/code&gt; is tree-shakeable since the code runs despite the user not actually acting on the import itself. As a&lt;br&gt;
result, files with side-effects are generally hard to treeshake so most bundlers wont attempt to treeshake them.&lt;/p&gt;

&lt;p&gt;If I wanted to rewrite the above to be "side effect free" I would do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// side-effect.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyCustomElement&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-custom-element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyCustomElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// entrypoint.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;side-effect.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we are "side effect free"! There is one last topic to discuss and then this reference is complete!&lt;/p&gt;

&lt;h2 id="what-is-hashing"&gt;
  &lt;a href="#what-is-hashing"&gt;
    What is hashing? (fingerprinting, digest, etc)
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;File hashing (also called fingerprinting, or a file digest) is the process of analyzing a&lt;br&gt;
files content then generating and adding a "hash" to the end of it. An example of a hashed file looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;file.xj921rf.js&lt;/code&gt; (yes thats a made up hash)&lt;/p&gt;

&lt;p&gt;The size of the hash (number of characters ) is determined by your bundler settings. The higher the number, the more "unique" the hash is. Unique hashes are great for caching purposes since if the hash has not changed,&lt;br&gt;
the browser can just use the cached version. A hash is intended to be "idempotent" in that if I run the same file, with the same contents, n number of times, then I will always get the same final hash regardless of how many times the build is run. This is important for consistency. And this ends my reference to myself.&lt;/p&gt;

&lt;h2 id="final-thoughts"&gt;
  &lt;a href="#final-thoughts"&gt;
    Final Thoughts
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The above may not be 100% accurate. This is purely off the top of my head over the last hour or so. If you have anything to add or anything to correct, feel free. Take this all with a grain of salt. I'm just 1 person, and I've never actually written a bundler. Have a great day and bundle away!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>bundlers</category>
      <category>webpack</category>
    </item>
    <item>
      <title>Aero / AeroCMS - A Simple and Easy to use CMS Designed to create fast and powerful web apps!</title>
      <author>MegaTKC</author>
      <pubDate>Wed, 06 Oct 2021 17:15:54 +0000</pubDate>
      <link>https://dev.to/megatkc/aero-aerocms-a-simple-and-easy-to-use-cms-designed-to-create-fast-and-powerful-web-apps-5ao6</link>
      <guid>https://dev.to/megatkc/aero-aerocms-a-simple-and-easy-to-use-cms-designed-to-create-fast-and-powerful-web-apps-5ao6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-i-created-aero"&gt;
  &lt;/a&gt;
  Why I created Aero
&lt;/h2&gt;

&lt;p&gt;Before I started this project, I was using WordPress or programming in PHP, using HTML and CSS to create a website. I loved WordPress, but it was slow for me because of plugins. You need lots of plugins for additional features, and most plugins had a premium where you need to pay for them to get the full version. There were many problems with WordPress that I experienced such as slow page speeds and low SEO ranking. There are good things about WordPress too, but with site vulnerability and every time you have a plugin that is not functioning with your current PHP version, your site shuts down. These problems with WordPress led me to create a Content Management system that would solve most of these problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-aero"&gt;
  &lt;/a&gt;
  Introducing Aero
&lt;/h2&gt;

&lt;p&gt;Aero is a simple and easy to use CMS that would let you create fast and powerful web applications. Aero can be used as a blogging engine as well as many other things. The SEO is decent or not too bad according to IONOS.com. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yjLiBQ1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u3cff0dgnllgk3ezhb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yjLiBQ1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u3cff0dgnllgk3ezhb6.png" alt="SEO Ranking of a Website Running AeroCMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aero also has a clean user interface for the Admin Panel and the front end site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UqI0GByi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pf25zk20gkgbpsxwoc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqI0GByi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pf25zk20gkgbpsxwoc7.png" alt="Front End Website of Aero"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aero uses Bootstrap which makes the website friendly on all devices which includes, computers, tablets, phones and other devices that you can name that has the ability to surf the internet. The Admin panel and the front end website comes from a bootstrap template. The website search engine also works. To search you need to type in one of the keywords / tags labeled on the post.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-admin-panel"&gt;
  &lt;/a&gt;
  The Admin Panel
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVuxFID4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdmip9289axiuuhfr9nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVuxFID4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdmip9289axiuuhfr9nd.png" alt="The Admin Panel includes a dashboard which shows you all of the users you have on your website, who is online, how many posts, categories and more!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Admin Panel includes a dashboard which shows you all of the users you have on your website, who is online, how many posts, categories and more! It even has a post editor using TinyCloud's html text editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pKzImYW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vee3186knnnlmpswe2wp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pKzImYW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vee3186knnnlmpswe2wp.png" alt="Posts section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XhN-YOcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34kwy6sp647myr852hnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhN-YOcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34kwy6sp647myr852hnr.png" alt="Add or Create a post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the posts section, you can clone a post, make a post public or a draft and delete them. You can also clone or delete posts in bulk. You can even create a post too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ID6mWl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f17m9v4hsdizg26p24i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ID6mWl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f17m9v4hsdizg26p24i.png" alt="Users Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xerVnkhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ogd77wv37tp2p51csj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xerVnkhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ogd77wv37tp2p51csj.png" alt="Add a User"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the users section, you can clone users, create a user, set the users avatar, username, name and more! Like the posts section you can also clone or delete users in bulk. Also, there is an option to give the user a role. The default sign up role is Subscriber. You can change their role and give them Admin permissions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OWEGEqbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtaif4nlcngh47djjuto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWEGEqbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtaif4nlcngh47djjuto.png" alt="Categories Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the categories section, you can create or edit an existing categories name. Or even delete a category too. The Categories appear up in the front end part of the website. Appearing at the top of the navigation or on the right side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIcOIeT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qyp8cf36hiukl9twaj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIcOIeT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qyp8cf36hiukl9twaj6.png" alt="Comments Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the comments section, you can see the post that the user commented on, as well as approve or unapprove or delete their post. When the user submits a comment it is automatically marked as unapprove until the admin approves it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2IgLALd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl7h85swc4ebzg0s2p4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2IgLALd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl7h85swc4ebzg0s2p4k.png" alt="Profile Section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, is the profile section, this section is created so you can edit your profile name, picture, avatar and much more. You can even change your role to a subscriber, but you can't change it back. To change it you need to go to phpmyadmin and set it to Admin again.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#known-issues-and-solutions"&gt;
  &lt;/a&gt;
  Known Issues and solutions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can't change your password which is a security risk for the admin. You need to create a new admin account and delete the old account.&lt;/li&gt;
&lt;li&gt;Draft pages show. The draft pages show but if you click on it as a non admin, it will say page not found. If you search up the draft post, it will show the text and content that you typed up. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#features-coming-soon"&gt;
  &lt;/a&gt;
  Features coming soon
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ability to change password&lt;/li&gt;
&lt;li&gt;A settings page&lt;/li&gt;
&lt;li&gt;Ability to change website name, site widget, copyright&lt;/li&gt;
&lt;li&gt;Probably admin panel and front end themes :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#github-repo"&gt;
  &lt;/a&gt;
  Github Repo
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this post, if you want to support me or the project. Please star or contribute to the repo. Let me know if there are bugs or you need help in the issues tab of the github repository.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/MegaTKC"&gt;
        MegaTKC
      &lt;/a&gt; / &lt;a href="https://github.com/MegaTKC/AeroCMS"&gt;
        AeroCMS
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Aero is a simple and easy to use CMS (Content Management System) designed to create fast and powerful web applications!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
AeroCMS&lt;/h1&gt;
&lt;p&gt;Aero / AeroCMS is a simple and easy to use CMS (Content Management System) designed to create fast and powerful web applications. Aero is built with OOP (Object Oriented Programming) PHP which is known for fast website loading speeds.&lt;/p&gt;
&lt;h2&gt;
System Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PHP 5.6 - PHP 7.4&lt;/li&gt;
&lt;li&gt;MySQL or MariaDB Database&lt;/li&gt;
&lt;li&gt;Apache2 Server&lt;/li&gt;
&lt;li&gt;If you have an XAMPP server, you have all of these requirements already.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
LAMP Installation&lt;/h2&gt;
&lt;p&gt;You can run Aero on any operating system or architecture if it runs linux. You can do it on armhf (arm32), arm64 (aarch64), x86 (i386), or x86_64 (amd64). We recommend Debian or Ubuntu Linux since that is what we ran AeroCMS on. XAMPP also works too, it has everything included. Skip to Aero Installation and Database if you already configured your LAMP stack or have XAMPP.&lt;/p&gt;
&lt;p&gt;Starting off we need to install our lamp stack. We go with the easiest one which…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/MegaTKC/AeroCMS"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>php</category>
      <category>opensource</category>
      <category>showdev</category>
      <category>githunt</category>
    </item>
  </channel>
</rss>
