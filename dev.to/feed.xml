<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 awesome CSS Hamburger Menus</title>
      <author>webdeasy.de</author>
      <pubDate>Sat, 06 Nov 2021 12:50:04 +0000</pubDate>
      <link>https://dev.to/webdeasy/10-awesome-css-hamburger-menus-1iho</link>
      <guid>https://dev.to/webdeasy/10-awesome-css-hamburger-menus-1iho</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://webdeasy.de/?referer=dev-1iho"&gt;webdeasy.de&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Responsive web design has long been standard on the web. Almost every website has a navigation menu, which is often realized by a hamburger menu. A collection of the best CSS hamburger menus (+ icons &amp;amp; animations) can be found here!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In mobile navigation, i.e. on the tablet or smartphone, the &lt;a href="https://webdeasy.de/en/top-css-navigation-menus-en/"&gt;navigation menu&lt;/a&gt; is very often hidden for space reasons and only visible by clicking on the hamburger menu. There is endless scope for design possibilities here. Some are programmed with pure CSS without JavaScript and some with CSS and JavaScript - there is something for everyone.&lt;/p&gt;

&lt;p&gt;A menu of mostly 2-3 layers has established itself - just like a hamburger (bun, patty, bun), which reveals all menu items in an overlay by a click. Individual strokes can be rotated to an X, disappear or whiz around wildly. Endless possibilities! I have compiled the best ones for you here - let yourself be inspired.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The pens shown are licensed with MIT. You can find more info about your own use on the &lt;a href="https://blog.codepen.io/documentation/licensing/"&gt;Codepen Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-gooey-menu"&gt;
  &lt;/a&gt;
  #1 Gooey Menu
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lbebber/embed/LELBEo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/lbebber"&gt;Luca Bebber&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-svg-css3-menuburger-button"&gt;
  &lt;/a&gt;
  #2 SVG CSS3 Menu/Burger Button
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kylehenwood/embed/Alayb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/kylehenwood/"&gt;Kyle Henwood&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-mobile-menu-animation"&gt;
  &lt;/a&gt;
  #3 Mobile Menu Animation
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melnik909/embed/JpJPYp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/melnik909/"&gt;Stas Melnikov&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-page-tilt-effect"&gt;
  &lt;/a&gt;
  #4 Page Tilt Effect
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marco_fugaro/embed/yNGJXE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/marco_fugaro/"&gt;Marco Fugaro&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-elastic-menu"&gt;
  &lt;/a&gt;
  #5 Elastic menu
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nguyenlong/embed/yJNjrN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/nguyenlong/"&gt;Long&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-hamburger-icons-animations"&gt;
  &lt;/a&gt;
  #6 Hamburger Icons Animations
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadbassamemran/embed/VQwPGr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/ahmadbassamemran/"&gt;Ahmad Emran&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-svg-gooey-hover-menu-concept"&gt;
  &lt;/a&gt;
  #7 SVG Gooey Hover Menu Concept
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mikel301292/embed/dMYRYZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/mikel301292/"&gt;Michael Leonard&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-hamburger-icon-animations"&gt;
  &lt;/a&gt;
  #8 Hamburger Icon Animations
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RRoberts/embed/ZBYaJr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/RRoberts/"&gt;Rosa&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-hamburger-menu-animation-with-velocityjs"&gt;
  &lt;/a&gt;
  #9 Hamburger menu animation with velocity.js
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/filippo/embed/WvGbJB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/filippo/"&gt;Filippo&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (Less), JS (jQuery + velocity.js);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-atomic-hamburger-menu-css"&gt;
  &lt;/a&gt;
  #10 Atomic Hamburger Menu CSS
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alcoven/embed/JdoWdx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/alcoven/"&gt;Alex Coven&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conslusion"&gt;
  &lt;/a&gt;
  Conslusion
&lt;/h1&gt;

&lt;p&gt;Which menu would you choose for your website? Feel free to write it in the comments. And if you also have a fancy hamburger menu (icon), I can expand the collection.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: All buttons are all published on &lt;a href="https://codepen.io/"&gt;codepen.io&lt;/a&gt; and not by me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not enough yet? Then this could be something for you!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üòé &lt;a href="https://webdeasy.de/en/loading-animations/"&gt;Cool CSS Buttons&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;4Ô∏è‚É£0Ô∏è‚É£4Ô∏è‚É£ &lt;a href="https://webdeasy.de/en/top-404-pages/"&gt;Creative 404-Error Pages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üèÜ &lt;a href="https://webdeasy.de/en/top-css-navigation-menus-en/"&gt;Top CSS Navigation Menus&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ü§Ø &lt;a href="https://webdeasy.de/en/satisfying-css-animations/"&gt;Satisfying CSS Animations&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ü•µ &lt;a href="https://webdeasy.de/en/loading-animations/"&gt;Inspiring loading animations&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>ELI5 JavaScript: Nullish Coalescing (??) &amp; Logical Nullish Assignment (??=)</title>
      <author>Nisarg Kapkar</author>
      <pubDate>Sat, 06 Nov 2021 12:45:34 +0000</pubDate>
      <link>https://dev.to/nkap/eli5-javascript-nullish-coalescing-logical-nullish-assignment--510g</link>
      <guid>https://dev.to/nkap/eli5-javascript-nullish-coalescing-logical-nullish-assignment--510g</guid>
      <description>&lt;p&gt;Nullish Coalescing and Logical Nullish Assignment... they sure do sound scary!&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/3o6wrfTsqfAepbiHZe/giphy.gif" alt="Scared gif" width="480" height="260"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;This was my reaction when I first heard the words 'Nullish Coalescing' and 'Logical Nullish Assignment' üòÇ&lt;/p&gt;

&lt;p&gt;But don't worry! Both of these are some of the simplest yet powerful concepts introduced in modern JavaScript!&lt;br&gt;
Read the article till the end to learn more about those :)&lt;/p&gt;

&lt;p&gt;Without further ado...&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/64aBXTVfd90zyUH2da/giphy.gif" alt="Let's start gif" width="480" height="270"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;h2&gt; Table of Contents: &lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#nullish-coalescing"&gt;Nullish Coalescing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;¬†¬†¬† 1.1  ¬†¬†¬†&lt;a href="#difference-between"&gt;Difference between OR (||) &amp;amp; Nullish Coalescing (??)&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;¬†¬†¬† 1.2  ¬†¬†&lt;a href="#short-circuiting"&gt;Short-circuiting&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;¬†¬†¬† 1.3  ¬†¬†&lt;a href="#assign-default-values"&gt;Assign default values&lt;/a&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#logical-nullish-assignment"&gt;Logical Nullish Assignment&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3 id="nullish-coalescing"&gt;1. Nullish Coalescing&lt;/h3&gt; 

&lt;p&gt;It is a logical operator that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;returns the first argument if it is 'defined' (not null/undefined)&lt;/li&gt;
&lt;li&gt;returns the second argument if the first argument isn't defined
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Nisarg&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Nisarg&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kapkar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Kapkar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The output of the first two console.log statements would be the second argument ("Nisarg") as the first arguments are either undefined (person1) or null (person2).&lt;/li&gt;
&lt;li&gt;The output of the third console.log will be person3 ("Kapkar") as the first argument is not null or undefined.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="difference-between"&gt; 1.1 Difference between OR (||) and Nullish Coalescing (??) &lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;OR operator does not distinguish between a null/undefined, false, empty string, and 0. All of these are treated as falsy values.&lt;/li&gt;
&lt;li&gt;If the first argument of OR is one of the above values, the second argument is returned as the output.&lt;/li&gt;
&lt;li&gt;Whereas Nullish Coalescing will only return the second argument if the first argument is either null or undefined.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 0&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n2&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n2&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For n1: 0 is a falsy value. So OR returns 10. Since n1 is not null or undefined, Nullish Coalescing returns the first argument. &lt;/li&gt;
&lt;li&gt;For n2: undefined is a falsy value. So OR returns 10. Since n2 is undefined, Nullish Coalescing returns the second argument. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="short-circuiting"&gt; 1.2 Short-circuiting &lt;/h4&gt;

&lt;p&gt;Nullish Coalescing can also be used for 'Short-circuit' evaluation.&lt;br&gt;
The second argument is only evaluated if the first argument is null or undefined!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c called&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Output: c called 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Output: 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For the first expression (a ?? c()), since a is undefined, the right-hand side of the expression is also evaluated (function c). Function c logs "c called" and returns 1, which is then logged by the console.&lt;/li&gt;
&lt;li&gt;For the second expression (b ?? c()), since b is neither undefined nor null, the right-hand side of the expression is not evaluated. So the console logs the value of b (10)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="assign-default-values"&gt; 1.3 Assign default values &lt;/h4&gt; 

&lt;p&gt;Use Nullish Coalescing to assign default values to a variable. Suppose we want to assign a variable to 10 if the number is null or undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Output: 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Output: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using OR to assign default values can have unexpected outcomes! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OR assigns variable a to 10 even though the number is not null or undefined (as stated in section 1.1, OR considers 0 as a falsy value)&lt;/li&gt;
&lt;li&gt;Nullish Coalescing will assign 10 if and only if the number is null or undefined. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="logical-nullish-assignment"&gt; 2. Logical Nullish Assignment &lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Ouput = 100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Ouput = 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logical Nullish is an assignment operator which assigns value if the variable is null or undefined.&lt;/p&gt;

&lt;p&gt;In the above example, since a is undefined, it is assigned 100. b is already defined (10), so the value is not assigned to b!&lt;/p&gt;




&lt;p&gt;Woooo! Thank you for reading üòÑ&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/2E6OYt2yphlWTGZeYK/giphy.gif" alt="wooo Gif" width="480" height="480"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;If you have any questions about Nullish Coalescing or Logical Nullish Assignment (or about JavaScript in general), feel free to ask them in the comments üëá&lt;/p&gt;




&lt;p&gt;This article is part of my ELI5 JavaScript series.&lt;br&gt;
If you want to read &amp;amp; learn more about JavaScript, don't forget to subscribe (more articles coming soon!)&lt;/p&gt;

&lt;p&gt;Follow me üëá for more content on full-stack development, software engineering &amp;amp; data structures/algorithms.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nnkkaapp"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/nisarg-kapkar/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Nkap23"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you again :)&lt;/p&gt;

&lt;p&gt;Have an awesome day and happy coding üòÑ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Showcase your project at Git Commit Show</title>
      <author>Saurabh Rai</author>
      <pubDate>Sat, 06 Nov 2021 12:41:27 +0000</pubDate>
      <link>https://dev.to/srbhr/showcase-your-project-at-git-commit-show-279l</link>
      <guid>https://dev.to/srbhr/showcase-your-project-at-git-commit-show-279l</guid>
      <description>&lt;p&gt;&lt;strong&gt;Git Commit Show #season03 on 27th &amp;amp; 28th November, 2021.&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://gitcommit.show/"&gt;Git Commit Show&lt;/a&gt; is inviting you guys to showcase your breakthrough project ideas on web, robotics, automation, ml, etc. &lt;br&gt;
Giving a platform for those crazy ideas, that can impact a wider audience. Last two seasons we had some amazing projects home cleaner robot, 3D mouse etc.&lt;br&gt;
So this is the &lt;a href="http://push.gitcommit.show/"&gt;link to fill the form&lt;/a&gt;, the whole team at Git Commit Show would like to help you with your idea! Let's have you there! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/JFWP8c2gPG"&gt;Join our Discord&lt;/a&gt; to know more and participate in Giveaways! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>Top 4 Blockchain Projects for African Infrastructure Investors</title>
      <author>Team 3air</author>
      <pubDate>Sat, 06 Nov 2021 11:38:26 +0000</pubDate>
      <link>https://dev.to/team3air/top-4-blockchain-projects-for-african-infrastructure-investors-1c7a</link>
      <guid>https://dev.to/team3air/top-4-blockchain-projects-for-african-infrastructure-investors-1c7a</guid>
      <description>&lt;p&gt;Our post-COVID world has witnessed a massive adoption of cryptocurrencies and blockchain-based solutions worldwide, with many countries in Africa being the quickest to follow suit.&lt;/p&gt;

&lt;p&gt;In fact, recent studies show that &lt;a href="https://www.statista.com/statistics/1202468/global-cryptocurrency-ownership/"&gt;Nigeria has the highest crypto adoption rate&lt;/a&gt; in the world while other countries in the continent, like South Africa, show higher adoption rates than most countries in Europe, for instance.&lt;/p&gt;

&lt;p&gt;The trend has led to the rise of African tech startups that are leveraging the crypto-friendly nature of the continent. Most notable are the blockchain companies offering economic-transforming solutions to the African market.&lt;/p&gt;

&lt;p&gt;That said, let us look into some of the blockchain projects that could facelift the economic infrastructure of the continent and offer investors a higher return on investment (ROI).&lt;/p&gt;


&lt;h1&gt;&lt;b&gt;1. Akon City&lt;/b&gt;&lt;/h1&gt;

&lt;p&gt;You‚Äôve probably heard of &lt;a href="https://marvelcinematicuniverse.fandom.com/wiki/Wakanda/"&gt;Wakanda&lt;/a&gt; from movies or books‚Äîa fictional city with futuristic buildings and advanced technologies. Well, &lt;a href="https://akoncity.com/"&gt;Akon City&lt;/a&gt; turns that fantasy into reality by making blockchain technology investments in the real estate industry, taking &lt;a href="https://www.foxnews.com/entertainment/akon-6-billion-senegalese-city-inspired-wakanda-black-panther"&gt;inspiration from the movie ‚ÄúBlack Panther.‚Äù&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The legendary RnB singer, Akon, &lt;a href="https://www.thehindu.com/news/international/rapper-akon-plans-6-billion-akon-city-in-senegal-homeland/article32501283.ece"&gt;first announced the project in 2018&lt;/a&gt;, and it got approval from the Senegalese government in 2021. His plan is to build a world-class city that would use cryptocurrencies as its official money. The city is intended to cover about 2,000-acres of land and contain futuristic buildings enhanced by the latest technology available, especially blockchain.&lt;/p&gt;

&lt;p&gt;Although the project is planned to be completed by 2029, Akon City‚Äôs official token, Akoin, is already in circulation. After the token public sale in 2019, Akoin‚Äôs adoption grew, with its market cap peaking at $70 million in February 2021.&lt;/p&gt;

&lt;p&gt;Since its announcement, Akon City has drawn tremendous interest and support from the government and investors with a budget estimated at $6 billion.&lt;/p&gt;

&lt;p&gt;Backed with Akon‚Äôs reputation, the city sets out to become a force to bring the African blockchain ecosystem to greater heights, providing a wide range of blockchain investment options.&lt;/p&gt;

&lt;p&gt;While the Senegalese government remains the largest stakeholder in the project, more investors can hop onto the wagon and earn good ROI in the long run.&lt;/p&gt;


&lt;h1&gt;&lt;b&gt;2. 3air&lt;/b&gt;&lt;/h1&gt;

&lt;p&gt;3air is an innovative blockchain telecom company that is bridging the digital divide in Africa. It uses proprietary broadband infrastructure to offer internet access in many countries in Africa.&lt;/p&gt;

&lt;p&gt;3air‚Äôs goal is to provide the most scalable and cheapest &lt;a href="https://3air.io/"&gt;broadband internet in Africa&lt;/a&gt; as it aims to connect Africa to the rest of the world, bank the unbanked, and develop the continent‚Äôs industries through digital transformation.&lt;/p&gt;

&lt;p&gt;To achieve this, the blockchain startup is working in partnership with remarkable leaders in the broadband industry and blockchain technology. With the K3 Lastmile broadband infrastructure patented by the Swiss-based telecom giant, &lt;a href="https://www.k3tele.com/"&gt;K3 Telecom AG&lt;/a&gt;, 3air will make widespread internet access not only possible but affordable to anyone living in countries like Nigeria and the Democratic Republic of the Congo (DRC), among other countries.&lt;/p&gt;

&lt;p&gt;The K3 technology was first deployed in &lt;a href="https://www.telecompaper.com/news/k3-telecom-launches-wireless-services-in-sierra-leone--1278064"&gt;Sierra Leone in 2019&lt;/a&gt;, where it continues to be in use as it has turned successful. While K3 builds the broadband infrastructure, the Cardano blockchain will host the 3air‚Äôs telecom management system.&lt;/p&gt;

&lt;p&gt;3air users can pay for the broadband services and carry out other transactions using the 3air‚Äôs utility token. 3air‚Äôs &lt;a href="https://3air.io/token-presale"&gt;token public sale&lt;/a&gt; is planned to take place in November 2021 and its services to launch in 2022.&lt;/p&gt;

&lt;p&gt;3air already holds operational licenses to kick off operations in Nigeria and DRC, which will soon enjoy the benefits of broadband services. The project is set to become a game-changer, bringing unmeasurable benefits to both economies and societies in Africa.&lt;/p&gt;

&lt;p&gt;Investors who understand 3air‚Äôs economic and cultural significance are attracted to the project, assuming that its success would bring hefty blockchain investment opportunities to the continent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkpicture.com/view.php?img=LPic6180d37fc7ca31679986059"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FsWXHZe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.linkpicture.com/q/img2_1.jpg" width="612" height="382"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;&lt;b&gt;3. The Sun Exchange&lt;/b&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://thesunexchange.com/"&gt;The Sun Exchange&lt;/a&gt; is a South African-based crowdfunded tech startup that provides solar energy services. The company has been active since 2015 and it has distributed over 1.5 million solar cells across more than 100 countries worldwide, generating over 7 million kWh worth of sustainable energy since its inception.&lt;/p&gt;

&lt;p&gt;In 2019, the startup launched its proprietary token sale and it &lt;a href="https://ventureburn.com/2019/01/sun-exchange-ico-closes-misses-target/"&gt;raised $1 million in the initial coin offering (ICO)&lt;/a&gt;. Being one of the earliest blockchain startup companies in Africa, the Sun Exchange has hit major milestones that have gained the project international recognition.&lt;/p&gt;

&lt;p&gt;The Sun Exchange won the award for the &lt;a href="https://techcabal.com/2016/10/21/meet-the-winners-of-the-2016-african-fintech-awards/"&gt;Best Blockchain in Africa in 2016&lt;/a&gt; during the African Fintech Awards in South Africa. In 2017, it won the &lt;a href="https://disrupt-africa.com/2017/06/06/sas-the-sun-exchange-wins-global-blockchain-challenge/"&gt;Smart Dubai Office Global Blockchain Challenge in Dubai&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Sun Exchange‚Äôs reputation and giant strides make it one of the best blockchain firms for African infrastructure investment. The blockchain startup still has a lot going on in its pipeline as it harnesses the weather conditions of the continent to provide sustainable energy.&lt;/p&gt;

&lt;p&gt;The Sun Exchange aims to incorporate more blockchain-oriented systems to ease the distribution and adoption of its services worldwide.&lt;/p&gt;


&lt;h1&gt;&lt;b&gt;4. Circulor&lt;/b&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.circulor.com/"&gt;Circulor&lt;/a&gt; is a UK-based blockchain company intending to reduce child labor in Africa‚Äôs mining industries by introducing foolproof traceability systems. The blockchain startup‚Äôs solution is a direct response to the increasing global calls against the use of minerals„Éºin manufacturing companies„Éºmined using child labor.&lt;/p&gt;

&lt;p&gt;For instance, Rwanda holds the world‚Äôs largest reserve of Tantalum‰∏Äa &lt;a href="https://www.rembar.com/global-tantalum-production-the-u-s-dodd-frank-act-and-conflict-minerals-what-you-should-know/"&gt;conflict mineral&lt;/a&gt; used to manufacture capacitors for smartphones and laptops. The unethical methods companies employ to mine Tantalum in Rwanda have led the &lt;a href="https://www.globalwitness.org/en/campaigns/conflict-minerals/dodd-frank-act-section-1502/"&gt;US and other bodies to pass regulations&lt;/a&gt; for manufacturing companies to prove the origin of the minerals before they can be used to make any product.&lt;/p&gt;

&lt;p&gt;The goal is to show tangible evidence that no child was involved neither in the mining, bagging, shipping, or refining of the minerals nor in the assembly of the final product.&lt;/p&gt;

&lt;p&gt;In 2018, the blockchain startup &lt;a href="https://passive-components.eu/circulor-achieves-first-ever-mine-to-manufacturer-traceability-on-tantalum-from-rwanda/"&gt;developed a blockchain-based system&lt;/a&gt; that involved facial recognition, GPS tracking, QR codes, and weight checkers able to trace the Tantalum supply chain in Rwanda.&lt;/p&gt;

&lt;p&gt;The result saved mines and companies using the mineral money and efforts that would have been spent on compliance and regulations. Since then, Circulor has modified the system to trace cobalt, nickel, mica, plastic, lithium, and other commodities sourced around the world.&lt;/p&gt;

&lt;p&gt;Circulor is notable for offering real-case blockchain-based solutions to everyday regulatory and compliance problems.&lt;/p&gt;

&lt;p&gt;African tech startups are putting a lot of effort to bridge the economic divide between Africa and the rest of the world. So far, their use of blockchain technology has proven to be pivotal towards infrastructure and economic developments in the continent.&lt;/p&gt;

&lt;p&gt;More so, the continent‚Äôs blockchain revolution is at its preliminary stage, which makes this moment the best time for investors to dive in for maximum ROI.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to build a product with just HTML and CSS</title>
      <author>Lucian Tartea</author>
      <pubDate>Sat, 06 Nov 2021 11:35:12 +0000</pubDate>
      <link>https://dev.to/luciantartea/how-to-build-a-product-with-just-html-and-css-101l</link>
      <guid>https://dev.to/luciantartea/how-to-build-a-product-with-just-html-and-css-101l</guid>
      <description>&lt;p&gt;Couple of weeks ago I embarked on a challenge to prove you can build a product with just HTML and CSS that people would love and even pay for. I've set a 30 days deadline and promised to present results transparently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;So 10 days after placing the project online it achieved &lt;strong&gt;4.3K visitors, 31 sales and $465&lt;/strong&gt; as passive income. This means the sales were made while I was relaxing and thinking about my next challenges.&lt;/p&gt;

&lt;p&gt;Of course being a product it also means that sales will continue to happen in the future but at a lower rate compared to the 10 days from launch. It's up to me to increase the frequency.&lt;/p&gt;

&lt;p&gt;Here are some stats from the 5th day from placing it online: close to 3000 visitors, 19 sales and $285.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4my3QXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32b454oalilqwjlmz53k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4my3QXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32b454oalilqwjlmz53k.png" alt="Chart with 5th day results from launch" width="880" height="496"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product"&gt;
  &lt;/a&gt;
  Product
&lt;/h3&gt;

&lt;p&gt;The product itself is a HTML website consisting of 3 pages which present 10 HTML templates for websites and landing pages. The templates are the bulk of the product and took the best part of 30 days to create.&lt;/p&gt;

&lt;p&gt;As tech stack I used HTML, CSS, very little Bootstrap and few JS plugins for advanced features. To design the templates I relied on my previous experience with this and used Adobe Photoshop and Illustrator.&lt;/p&gt;

&lt;p&gt;To power up sales and item delivery I've used Gumroad which probably is the best nocode tool for digital creators. For marketing I used mostly Twitter and had good results with Reddit and Product Hunt.&lt;/p&gt;

&lt;p&gt;Spent $0 on this project besides the domain name cost and super basic hosting. Didn't buy any adds or other marketing help. Not because I didn't want to, just because I didn't have the money :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-of"&gt;
  &lt;/a&gt;
  Making of
&lt;/h3&gt;

&lt;p&gt;I created a tweet journal for the 30 days challenge where I posted all my actions and reasoning behind them. It's filled with tips, ideas and even an HTML template roadmap for devs. Available here &lt;a href="https://launchin30html.carrd.co/"&gt;launchin30html.carrd.co&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this will provide inspiration and motivation for web developers to master HTML and CSS well. Would love to have your feedback and answer your questions in the comments section.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>‚ö†Ô∏è Don't try this at home: CSS-only image detail zoom üñºÔ∏èüîç</title>
      <author>Pascal Thormeier</author>
      <pubDate>Sat, 06 Nov 2021 11:16:01 +0000</pubDate>
      <link>https://dev.to/thormeier/dont-try-this-at-home-css-only-image-detail-zoom-3alg</link>
      <guid>https://dev.to/thormeier/dont-try-this-at-home-css-only-image-detail-zoom-3alg</guid>
      <description>&lt;p&gt;No, seriously, don't. We'll be hacking our way through. This will involve a lot of dirty hacks and bad practices that will make most screen readers and older browsers go bonkers and/or cry bitter tears of sorrow and despair. The... thing we're about to create is meant to serve as a bad example on what &lt;em&gt;not&lt;/em&gt; to do. There. You've been warned. I will however include a few boxes where I'm hacking my way in and explain why you shouldn't be doing this.&lt;/p&gt;

&lt;p&gt;I want to give a shout out to &lt;a class="mentioned-user" href="https://dev.to/nuritnt"&gt;@nuritnt&lt;/a&gt;
! While we were coaching a group of web dev students, she originally asked the question "Can you do an image detail zoom modal with CSS only? You could probably write a post about that?", so, yeah, here we are!&lt;/p&gt;

&lt;p&gt;Now, let's get our hands dirty, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-thing-were-trying-to-build"&gt;
  &lt;/a&gt;
  The thing we're trying to build
&lt;/h2&gt;

&lt;p&gt;So, on some webshops, when clicking on a small product image, the image opens up in a zoomed version. This is especially useful when the product images are, say, sets of different parts and you want to have a look at the individual parts. Or read a small sentence on the packaging.&lt;/p&gt;

&lt;p&gt;To make things a little more convenient, I also want to add the possibility to close the modal with the ESC key. Don't worry, we'll be able to hack that without JS.&lt;/p&gt;

&lt;p&gt;So, click on small image opens large image in modal. ESC key and close button close it again. Sounds good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-the-image"&gt;
  &lt;/a&gt;
  Step 1: The image
&lt;/h2&gt;

&lt;p&gt;First, we need an image. I'm going to use &lt;a href="https://placeholder.com"&gt;placeholder.com&lt;/a&gt; for that:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CtympTRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://via.placeholder.com/640x480.png%3Ftext%3DImage%25201" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtympTRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://via.placeholder.com/640x480.png%3Ftext%3DImage%25201" alt='A grey placeholder image saying "Image 1"' width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you don't know placeholder.com, it's an amazing website to create placeholder images with. You can determine its size via URL (for example, &lt;a href="http://via.placeholder.com/640x480.png"&gt;http://via.placeholder.com/640x480.png&lt;/a&gt;) and add stuff like text via GET parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-aha-youre-going-to-use-the-trusty-ol-checkbox-trick-right"&gt;
  &lt;/a&gt;
  Wait, aha, you're going to use the trusty ol' checkbox trick, right?
&lt;/h2&gt;

&lt;p&gt;Almost! Today, we're going to get even worse than that.&lt;/p&gt;

&lt;p&gt;For those of you that don't know it, the checkbox trick was used back in the days to circumvent using JavaScript for simple style toggles. By using the sibling selector (&lt;code&gt;.a ~ .b&lt;/code&gt;, so any &lt;code&gt;.b&lt;/code&gt; that is a sibling of &lt;code&gt;.a&lt;/code&gt;) and the &lt;code&gt;:checked&lt;/code&gt; pseudo-class, we were able to toggle stuff. A really simple example could've been &lt;code&gt;.some-toggle:checked ~ .menu { display: block; }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I'm going to use the good ol' &lt;code&gt;&amp;lt;input type="text"&amp;gt;&lt;/code&gt; and its focus state for that instead.&lt;/p&gt;

&lt;p&gt;I'll actually go beyond that and will use the text input &lt;em&gt;as the image&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom-container"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 100px; height: 100px;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"
    background-image: url(http://via.placeholder.com/640x480.png?text=Image%201);
  "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.imagezoom-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.imagezoom&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Get rid of any text */&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Get rid of any text selection */&lt;/span&gt;
&lt;span class="nc"&gt;.imagezoom&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow. &lt;/p&gt;

&lt;p&gt;Please don't add images to your page like this! Screen readers will only see an input without a label, there's no possibility to add an &lt;code&gt;alt&lt;/code&gt; text and the image might be skewed/cropped.&lt;/p&gt;

&lt;p&gt;I'm using the input field here to minimize DOM. Also, since we're using the focus state, we can guarantee that any click on the image (even when enlarged) will trigger a focus on the input and thus keep the modal open. Yuck!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-elements-focus-state"&gt;
  &lt;/a&gt;
  Using the elements focus state
&lt;/h2&gt;

&lt;p&gt;Now we'll style the &lt;del&gt;input field&lt;/del&gt; image/modal for its zoomed state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.imagezoom&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make the "image" fill the entire screen */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vw&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Style the background-image */&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Remove the background-color by making it fully transparent */&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Get rid of default focus styling */&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The dark background */&lt;/span&gt;
&lt;span class="nc"&gt;.imagezoom-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.imagezoom&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.imagezoom-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom-container"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 100px; height: 100px;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"
    background-image: url(http://via.placeholder.com/640x480.png?text=Image%201);
  "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom-background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please don't use input fields for this! Screen readers will not know that you're trying to build an image zoom. They will think they're inside a huge form with dozens of inputs instead of an image gallery. They also probably won't know that you're using it as a toggle switch of some sort.&lt;/p&gt;

&lt;p&gt;To round things up, we'll add a close button (conveniently enough, &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; takes focus, therefore closing the modal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result
&lt;/h2&gt;

&lt;p&gt;The result is average at best:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thormeier/embed/YzxaNdN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You probably need to open the pen in a separate window, especially on a mobile device. I also added a min-width to the image in order to make it at least show up on mobile.&lt;/p&gt;

&lt;p&gt;While technically functional on mobile devices, it opens the keyboard, input fields tend to do that. A radio or checkbox instead of an input field might fix that, though. Also, the other image jumps around weirdly, when one is opened.&lt;/p&gt;

&lt;p&gt;I repeat again: please, &lt;em&gt;please&lt;/em&gt; don't do this in production. Use JavaScript instead. I need to go wash my hands...&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ‚ù§Ô∏è &lt;em&gt;or a&lt;/em&gt; ü¶Ñ&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;you can offer me a coffee&lt;/em&gt; ‚òï&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; üê¶&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button" width="262" height="60"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>donttrythisathome</category>
    </item>
    <item>
      <title>Building a Tailwind CSS toggle/switch component</title>
      <author>Zolt√°n Sz≈ëgy√©nyi</author>
      <pubDate>Sat, 06 Nov 2021 10:58:16 +0000</pubDate>
      <link>https://dev.to/themesberg/building-a-tailwind-css-toggleswitch-component-4pc3</link>
      <guid>https://dev.to/themesberg/building-a-tailwind-css-toggleswitch-component-4pc3</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS a lot lately and although I love the new way of working with utility classes, I have to say that I miss having a base set of components to work with similar to Bootstrap or Bulma.&lt;/p&gt;

&lt;p&gt;That is why I started a new series here on the DEV community on how to build commonly used web components using the utility classes from Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9FzZW_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejal03431kph47sdzc1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9FzZW_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejal03431kph47sdzc1g.png" alt="Tailwind CSS toggle" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/building-a-tailwind-css-file-upload-input-component-4he4"&gt;file upload component&lt;/a&gt; and today I want to show you how you can build a toggle/switch element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-toggleswitch-component"&gt;
  &lt;/a&gt;
  Tailwind CSS toggle/switch component
&lt;/h2&gt;

&lt;p&gt;The first step towards building the toggle component is to set up the basic HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="toggle-example"&amp;gt;
  &amp;lt;input type="checkbox" id="toggle-example"&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;span&amp;gt;Toggle me&amp;lt;/span&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we wrapped all of the elements inside a &lt;code&gt;label&lt;/code&gt; tag so that wherever you click it will toggle the checkbox. We also added an empty &lt;code&gt;div&lt;/code&gt; tag which will later be used the background.&lt;/p&gt;

&lt;p&gt;Let's now add the utility classes that are needed to styles the element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="toggle-example" class="flex items-center cursor-pointer relative mb-4"&amp;gt;
  &amp;lt;input type="checkbox" id="toggle-example" class="sr-only"&amp;gt;
  &amp;lt;div class="toggle-bg bg-gray-200 border-2 border-gray-200 h-6 w-11 rounded-full"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;span class="ml-3 text-gray-900 text-sm font-medium"&amp;gt;Toggle me&amp;lt;/span&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The toggle element is not complete yet, because we need to add a few pseudo classes which will be the dot that will move from left to right.&lt;/p&gt;

&lt;p&gt;The easiest way to make it work is to &lt;a href="https://flowbite.com/docs/getting-started/quickstart/"&gt;install the Flowbite package from NPM&lt;/a&gt; and include it as a plugin in your Tailwind CSS project. Then this and other components from Flowbite will work.&lt;/p&gt;

&lt;p&gt;Alternatively, you can also just add the following styles inside your CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.toggle-bg:after {
    content: '';
    @apply absolute top-0.5 left-0.5 bg-white border border-gray-300 rounded-full h-5 w-5 transition shadow-sm;
}

input:checked + .toggle-bg:after {
    transform: translateX(100%);
    @apply border-white;
}

input:checked + .toggle-bg {
    @apply bg-blue-600 border-blue-600;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9FzZW_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejal03431kph47sdzc1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9FzZW_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejal03431kph47sdzc1g.png" alt="Tailwind CSS toggle" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also make the toggle component checked by default:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="toggle-example-checked" class="flex items-center cursor-pointer relative"&amp;gt;
  &amp;lt;input type="checkbox" id="toggle-example-checked" class="sr-only" checked&amp;gt;
  &amp;lt;div class="toggle-bg bg-gray-200 border-2 border-gray-200 h-6 w-11 rounded-full"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;span class="ml-3 text-gray-900 text-sm font-medium"&amp;gt;Toggle me (checked)&amp;lt;/span&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope that this tutorial helped you with your Tailwind CSS journey and expand the components that you can work with. Before you go, I would like to show you a Tailwind CSS component library that this toggle component is part of and which you can use to build websites even faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;As I've said earlier, this &lt;a href="https://flowbite.com/docs/components/forms/#toggle-switches"&gt;Tailwind CSS toggle component&lt;/a&gt; is part of a larger open source component library called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh5keub_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc6zlubo80s9cdy632wj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh5keub_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc6zlubo80s9cdy632wj.png" alt="Flowbite - Tailwind CSS components" width="880" height="569"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite&lt;/a&gt; is basically a set of UI components like buttons, alerts, badges, dropdowns, navbars built with the utility classes from Tailwind CSS but also includes interactive elements like tooltips and datepickers that can help you build websites even faster with Tailwind CSS.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://flowbite.com/docs/getting-started/quickstart/"&gt;quickly get started&lt;/a&gt; by installing Flowbite via NPM and then require it as a plugin inside your Tailwind CSS project or just use the CDN to try it out.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>opensource</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Twitter space on accessibility Sunday 06th Nov at 8pm IST (2:30pm GMT, 10:30am EST)</title>
      <author>InHuOfficial</author>
      <pubDate>Sat, 06 Nov 2021 10:54:42 +0000</pubDate>
      <link>https://dev.to/inhuofficial/twitter-space-on-accessibility-sunday-06th-nov-at-8pm-ist-230pm-gmt-1030am-est-4dd2</link>
      <guid>https://dev.to/inhuofficial/twitter-space-on-accessibility-sunday-06th-nov-at-8pm-ist-230pm-gmt-1030am-est-4dd2</guid>
      <description>&lt;p&gt;I invited myself (yes I am &lt;strong&gt;that&lt;/strong&gt; person!) to speak at a Twitter space tomorrow. &lt;/p&gt;

&lt;p&gt;The space will be about Accessibility, in particular:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to pitch accessibility to your team at work.&lt;/li&gt;
&lt;li&gt;Money! Investment and return on tools, training and accessibility.&lt;/li&gt;
&lt;li&gt;A brief introduction to Screen reader behaviour with HTML tags (as screen reader behaviour is similar to CSS coverage, not always 100%)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note that the Agenda is not limited to only these 3 items if you have questions about anything else accessibility related just let us know!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#come-along-and-say-hi"&gt;
  &lt;/a&gt;
  Come along and say hi!
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9tE8I48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1456282172566884357/UGBG0m6M_normal.jpg" alt="Neha Sharma üçç‚òÅÔ∏è profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Neha Sharma üçç‚òÅÔ∏è
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/hellonehha"&gt;@hellonehha&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Join &lt;a href="https://twitter.com/tanishaaa03"&gt;@tanishaaa03&lt;/a&gt; and me tomorrow on your most fav topic accessibility.&lt;br&gt;&lt;br&gt;BY (bring your)&lt;br&gt;&lt;br&gt;- Questions&lt;br&gt;&lt;br&gt;- Topics&lt;br&gt;&lt;br&gt;- Case studies&lt;br&gt;&lt;br&gt;- Experience&lt;br&gt;&lt;br&gt;Set a reminder for my upcoming Space! &lt;a href="https://t.co/V5GvbcMAZ3"&gt;twitter.com/i/spaces/1ypJd‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:18 AM - 06 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1456868618973503496" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1456868618973503496" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1456868618973503496" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Most of the work will be done by:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#neha-sharma-host"&gt;
  &lt;/a&gt;
  Neha Sharma (Host)
&lt;/h3&gt;

&lt;p&gt;Neha (who is running the space) is an excellent accessibility advocate, so her advice will be invaluable. &lt;/p&gt;

&lt;p&gt;She writes here on DEV so you should check out her stuff:&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__118962"&gt;
  
    .ltag__user__id__118962 .follow-action-button {
      background-color: #99009e !important;
      color: #ffffff !important;
      border-color: #99009e !important;
    }
  
    &lt;a href="/hellonehha" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsw8r74h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--J1XD4o8z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/118962/382c4db7-91d3-4e27-9cd5-a1e0331587b0.jpg" alt="hellonehha image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/hellonehha"&gt;Neha Sharma &lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/hellonehha"&gt;UI Engineer ,I love Web,JavaScript, Design System, A11Y, HTML5, CSS3 ,React; Community Advocate and enjoy giving talks and codelabs at the Meetups and conference.

I am self-taught calligrapher too.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;She also founded &lt;a href="https://twitter.com/jslovers_Del"&gt;&lt;strong&gt;JS Lovers&lt;/strong&gt;&lt;/a&gt; - A Meetup/Workshop community by Developers for Developers in and around Delhi,Mumbai and Pune.&lt;/p&gt;

&lt;p&gt;You can also find her on Twitter &lt;a href="https://twitter.com/hellonehha"&gt;@hellonehha&lt;/a&gt;, so go check out her stuff on there too! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tanisha-sabherwal-co-host"&gt;
  &lt;/a&gt;
  Tanisha Sabherwal (Co Host)
&lt;/h3&gt;

&lt;p&gt;Tanisha (who is co-hosting) works at JPMorgan as a front-end engineer. You can find some stuff Tanisha has written at &lt;a href="https://www.tanishasabherwal.me/"&gt;tanishasabherwal.me&lt;/a&gt; and find her on twitter at &lt;a href="https://twitter.com/tanishaaa03"&gt;@tanishaaa03&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;It is my first time chatting with Tanisha but from the stuff of hers I have read I look forward to it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graham-from-inhu-me-the-tagalong-self-inviter"&gt;
  &lt;/a&gt;
  Graham from InHu (me! - the tag-along self inviter!)
&lt;/h3&gt;

&lt;p&gt;Those of you who follow me know I am outspoken and quite blunt about accessibility. &lt;/p&gt;

&lt;p&gt;I prefer facts over fluffiness and actionable steps over general "you should do it because it is the right thing to do" advice that doesn't get results. &lt;/p&gt;

&lt;p&gt;So you can expect a little bit of that thrown in there!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-you-invited-yourself"&gt;
  &lt;/a&gt;
  Wait, you invited yourself?
&lt;/h2&gt;

&lt;p&gt;Yup, Neha and I have "spoken" (written to each other in comments!) on several occasions and I always like what she has to say. &lt;/p&gt;

&lt;p&gt;The second I saw her space was on accessibility (my passion) I had to reach out and see if she would like me to join in.&lt;/p&gt;

&lt;p&gt;Luckily she said yes, so you get me there too (whether that is a good or a bad thing is a different question! üòã)&lt;/p&gt;






&lt;center&gt;I Look forward to seeing you there!&lt;/center&gt;
&lt;br&gt;&lt;br&gt;
&lt;center&gt;&lt;a href="https://twitter.com/hellonehha/status/1456868618973503496"&gt;Link to Original Tweet so you can set a reminder&lt;/a&gt;&lt;/center&gt;




</description>
      <category>twitter</category>
      <category>a11y</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 Hilarious Cartoons That Depict Real-Life Problems of Programmers</title>
      <author>Pratik Chaudhari</author>
      <pubDate>Sat, 06 Nov 2021 10:28:15 +0000</pubDate>
      <link>https://dev.to/pratikgchaudhari/10-hilarious-cartoons-that-depict-real-life-problems-of-programmers-1hhi</link>
      <guid>https://dev.to/pratikgchaudhari/10-hilarious-cartoons-that-depict-real-life-problems-of-programmers-1hhi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;And how they deal with them...&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#1-estimations"&gt;
  &lt;/a&gt;
  1. Estimations:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/the-art-of-eta-6ec69664ee89"&gt;&lt;em&gt;Estimating the amount of time required to complete your own work is nothing short of a herculean feat.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the fun begins when you add more people to the equation.&lt;/p&gt;

&lt;p&gt;Then estimating becomes a sport of throwing darts (and that too in the dark):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DChbpxkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwzk9fx9hniyaxrzxel9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DChbpxkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwzk9fx9hniyaxrzxel9.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;
Image Credit: workchronicles.com






&lt;h3&gt;
  &lt;a href="#2-fixing-bugs"&gt;
  &lt;/a&gt;
  2. Fixing Bugs:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://medium.com/mind-cafe/expecting-immediate-results-might-hold-you-back-from-achieving-your-dreams-597f8785dc18"&gt;Humans prefer immediate gratification&lt;/a&gt;, which means we choose to indulge (or invest) in activities that could provide us with immediate rewards while conveniently overlooking the (heavy) price we may have to pay in the future.&lt;/p&gt;

&lt;p&gt;But when we do this in our workplaces, we might not be ones paying the price in the end:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ehEicNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzellj3nvuoawj1uxnc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ehEicNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzellj3nvuoawj1uxnc2.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;
Image Credit: workchronicles.com






&lt;h3&gt;
  &lt;a href="#3-dealing-with-ambitious-sales-rep"&gt;
  &lt;/a&gt;
  3. Dealing With Ambitious Sales Rep:
&lt;/h3&gt;

&lt;p&gt;Sales representatives have targets to meet. We understand that.&lt;/p&gt;

&lt;p&gt;But when some overzealous sales rep promises the moon to the clients, programmers are the ones who bear the burnt:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V32Jsc8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0lwf8jaitehwc479kov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V32Jsc8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0lwf8jaitehwc479kov.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt; &lt;/p&gt;
Image Credit: workchronicles.com






&lt;h3&gt;
  &lt;a href="#4-socializing"&gt;
  &lt;/a&gt;
  4. Socializing:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Blessed are the Geek, for they shall reign over the world."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Tech industry has had a tremendous impact on our lives: people can look up anything on Google and hook up with anyone on the likes of Tinder and Bumble.&lt;/p&gt;

&lt;p&gt;As people who built the tech industry, we are its Alpha &amp;amp; Omega.&lt;/p&gt;

&lt;p&gt;And yet, when it comes to in-person interactions and shaping conversations, we are at a loss for words:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RlM0l-N5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ypr3496mjdmwkka9gad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlM0l-N5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ypr3496mjdmwkka9gad.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt; &lt;/p&gt;
Image Credit: workchronicles.com






&lt;h3&gt;
  &lt;a href="#5-finding-a-new-job"&gt;
  &lt;/a&gt;
  5. Finding a new Job:
&lt;/h3&gt;

&lt;p&gt;There are literally hundreds of websites out there that promise to join a potential employee and an employer into holy matrimony üòÇ&lt;/p&gt;

&lt;p&gt;But none of them can help you escape recruiters who sound more like sales reps. Deciphering the actual meaning behind their words is somewhat of an arcane art:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JlBzcbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dylav697gieh02mexnjp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JlBzcbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dylav697gieh02mexnjp.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;
Image Credit: workchronicles.com






&lt;h3&gt;
  &lt;a href="#6-feature-requests"&gt;
  &lt;/a&gt;
  6. Feature Requests:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The 'stories' feature is so popular on the XYZ app. We should introduce it too."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"What if our users could find a date, book a cab, and rent a villa in Europe all at the same time?"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so goes the discussion about the new features that we could provide to our users.&lt;/p&gt;

&lt;p&gt;We understand that there's a need to experiment and evolve, but adding a feature just of the sake of adding it is not cool:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ajhUJjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6jbjhcd09adsazyz9gk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ajhUJjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6jbjhcd09adsazyz9gk.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;
Image Credit: workchronicles.com






&lt;h3&gt;
  &lt;a href="#7-status-updates"&gt;
  &lt;/a&gt;
  7. Status Updates:
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.agilealliance.org/glossary/daily-meeting/"&gt;daily stand-up&lt;/a&gt; meeting in &lt;a href="https://www.agilealliance.org/agile101/"&gt;Agile&lt;/a&gt; is an excellent way for the team to discuss the overall progress on their work and any impediments that might be blocking them.&lt;/p&gt;

&lt;p&gt;But once we are done with that, we are literally done with the status updates.&lt;/p&gt;

&lt;p&gt;There was no substantial progress on that &lt;em&gt;"critical"&lt;/em&gt; feature five minutes ago and there won't be any five minutes from now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6dA32yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gupyr8sfmeoehnhyzpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q6dA32yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gupyr8sfmeoehnhyzpj.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;
Image Credit: workchronicles.com






&lt;h3&gt;
  &lt;a href="#8-showing-off-our-work"&gt;
  &lt;/a&gt;
  8. Showing off Our Work:
&lt;/h3&gt;

&lt;p&gt;We are geeks. Many of us are introverts. Not all of us like announcing our work out loud to the entire world.&lt;/p&gt;

&lt;p&gt;But that doesn't mean we aren't working hard enough or that we aren't worthy of a well-deserved promotion:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XKueSGj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vzphredx83zbdw64qah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XKueSGj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vzphredx83zbdw64qah.png" alt="Image Credit: workchronicles.com" width="880" height="1254"&gt;&lt;/a&gt;&lt;/p&gt;
Image Credit: workchronicles.com


 




&lt;h3&gt;
  &lt;a href="#9-getting-our-priorities-right"&gt;
  &lt;/a&gt;
  9. Getting Our Priorities Right:
&lt;/h3&gt;

&lt;p&gt;Product Managers, please understand this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If all the features are on priority, then none of them are on priority:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i1JbeBm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl038nxuui89g73vfxbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i1JbeBm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl038nxuui89g73vfxbn.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;
Image Credit: workchronicles.com






&lt;h3&gt;
  &lt;a href="#10-meeting-unrealistic-expectations"&gt;
  &lt;/a&gt;
  10. Meeting (Unrealistic) Expectations:
&lt;/h3&gt;

&lt;p&gt;Need I say more:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yNIwGagZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/002e8h9uk2cjqx8a9rvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yNIwGagZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/002e8h9uk2cjqx8a9rvk.png" alt="Image Credit: workchronicles.com" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;
Image Credit: workchronicles.com



&lt;p&gt;(Okay, I admit this one's not specific to programmers, but it nevertheless depicts a chilling reality)&lt;/p&gt;




&lt;p&gt;I hope you folks enjoyed reading this blog!&lt;/p&gt;

&lt;p&gt;Feel free to leave your comments (if any) in the comments section below üëá    &lt;/p&gt;

</description>
      <category>programmerproblems</category>
      <category>programmerlife</category>
      <category>programming</category>
      <category>developers</category>
    </item>
    <item>
      <title>SOLID Principles in iOS Development </title>
      <author>MKilmer</author>
      <pubDate>Sat, 06 Nov 2021 10:23:18 +0000</pubDate>
      <link>https://dev.to/mkilmer/solid-principles-in-ios-development-5cie</link>
      <guid>https://dev.to/mkilmer/solid-principles-in-ios-development-5cie</guid>
      <description>&lt;h2&gt;
  &lt;a href="#solid-principles-in-ios-development"&gt;
  &lt;/a&gt;
  SOLID Principles in iOS Development
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#ok-you-probably-already-hear-this-term-but-in-practice-whats-mean-when-uses-how-uses-keep-reading-for-finally-learn"&gt;
  &lt;/a&gt;
  üò© Ok, you probably already hear this term, but in practice, what's mean? When uses? How uses? Keep reading for &lt;em&gt;FINALLY LEARN&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/AsGnrla1K6FN7ajonc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/AsGnrla1K6FN7ajonc/giphy.gif" alt="Alt Text" width="480" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-solid-is-a-s-a-mnemonic-acronym-for-five-design-principles-intended-to-make-software-design-more-understandable-flexible-and-maintainable"&gt;
  &lt;/a&gt;
  First of all, SOLID is a s a mnemonic acronym for five design principles intended to make software design more understandable, flexible, and maintainable
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#in-all-tutorial-i-will-show-solid-principles-in-action-and-codes-that-dont-follow-solid"&gt;
  &lt;/a&gt;
  In all tutorial, i will show SOLID Principles in action and codes that don't follow SOLID
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#so-lets-go"&gt;
  &lt;/a&gt;
  &lt;strong&gt;So, let's go üòÅ&lt;/strong&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#s-single-responsibility-principle"&gt;
  &lt;/a&gt;
  &lt;em&gt;S&lt;/em&gt; - Single Responsibility Principle
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-classe-should-have-one-reason-to-change-to-exists-"&gt;
  &lt;/a&gt;
  A classe should have one reason to change ( to exists )
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#tips-to-apply"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Tips to apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ask yourself for every &lt;strong&gt;&lt;em&gt;entity&lt;/em&gt;&lt;/strong&gt; ( classes / functions ) : &lt;strong&gt;&lt;em&gt;this entity, does more than one thing?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You shouldn't have use the word &lt;strong&gt;&lt;em&gt;and&lt;/em&gt;&lt;/strong&gt; when have to talk the responsibility to entity &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#not-single-responsibility-principle-apply"&gt;
  &lt;/a&gt;
  üí¢ &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; Single Responsibility Principle apply
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Handler_NOT_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;requestDataToAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;dataReceive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dataReceive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;saveToDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;requestDataToAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;?{&lt;/span&gt;
        &lt;span class="c1"&gt;// send API request and wait the response&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]?{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse the data and create an array&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;saveToDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]?){&lt;/span&gt;
        &lt;span class="c1"&gt;// save array in a database&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you see?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#handlernotsolid-class-have-several-responsibilities"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Handler_NOT_SOLID&lt;/em&gt;&lt;/strong&gt; class  have several responsibilities
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Send request to API&lt;/li&gt;
&lt;li&gt;Create an array with data receive&lt;/li&gt;
&lt;li&gt;Save array in a database&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#single-responsibility-principle-apply"&gt;
  &lt;/a&gt;
  üëç Single Responsibility Principle &lt;strong&gt;&lt;em&gt;apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Handler_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;apiHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;APIHandler&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;parseHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ParseHandler&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;dbHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;DBHandler&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;apiHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;APIHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;parseHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ParseHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dbHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;DBHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apiHandler&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parseHandler&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbHandler&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;APIHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;requestDataToAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;?{&lt;/span&gt;
        &lt;span class="c1"&gt;// send API request and wait the response&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ParseHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]?{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse the data and create an array&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;DBHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;saveToDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]?){&lt;/span&gt;
        &lt;span class="c1"&gt;// save array in a database&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Now, each entity have just one responsibility&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#o-openclosed-principle"&gt;
  &lt;/a&gt;
  &lt;em&gt;O&lt;/em&gt; - Open/Closed Principle
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-software-entity-should-be-open-to-extension-but-closed-for-modification"&gt;
  &lt;/a&gt;
  A software entity should be open to extension, but closed for modification.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#tips-to-apply"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Tips to apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;If you want to modify a class every time a new behavior is added, something isn't quite right&lt;/li&gt;
&lt;li&gt;If/else/switch statements don't be used to modify a behavior &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#not-openclosed-principle-apply"&gt;
  &lt;/a&gt;
  üí¢ &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; Open/Closed Principle apply
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Vehicles_NOT_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;cars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="kt"&gt;Car_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Batmobile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Black"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="kt"&gt;Car_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"SuperCar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Gold"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="kt"&gt;Car_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"FamilyCar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Grey"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;buses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="kt"&gt;Bus_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"School bus"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="kt"&gt;Bus_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Minibus"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="kt"&gt;Bus_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Minicoach"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;buses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;bus&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt;  &lt;span class="kt"&gt;Car_NOT_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"name : &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt; color :&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Bus_NOT_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"bus type : &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you see?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-printdata-receive-other-type-of-object-we-have-to-add-more-rules-to-work"&gt;
  &lt;/a&gt;
  When &lt;strong&gt;printData&lt;/strong&gt; receive other type of object, we have to add more rules to work
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you want to add the possibility to print also the details of a new class, we should change the implementation of printData every time we want to log a new class&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openclosed-principle-apply"&gt;
  &lt;/a&gt;
  üëç Open/Closed Principle &lt;strong&gt;&lt;em&gt;apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Printable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Vehicles_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="kt"&gt;Printable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="kt"&gt;Car_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Batmobile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Black"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="kt"&gt;Car_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"SuperCar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Gold"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="kt"&gt;Car_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"FamilyCar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Grey"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

            &lt;span class="kt"&gt;Bus_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"School bus"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="kt"&gt;Bus_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Minibus"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="kt"&gt;Bus_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Minicoach"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Car_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Printable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"name : &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt; color :&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Bus_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Printable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"bus type : &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;We don't need change behavior of printData, just make a layer between printData and the class&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#l-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  &lt;em&gt;L&lt;/em&gt; - Liskov Substitution Principle
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#objects-should-be-replaceable-with-instances-of-their-subtypes-without-altering-the-correctness-of-that-program"&gt;
  &lt;/a&gt;
  Objects should be replaceable with instances of their subtypes without altering the correctness of that program.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#tips-to-apply"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Tips to apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Instead of one monolithic interface, break an interface up based on what implementers should be doing&lt;/li&gt;
&lt;li&gt;Keeps consumers from having to much power&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#not-liskov-substitution-principle-apply"&gt;
  &lt;/a&gt;
  üí¢ &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; Liskov Substitution Principle apply
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Rectangle_NOT_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Square_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Rectangle_NOT_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;didSet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// MARK: - Implementations &lt;/span&gt;
 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Rectangle_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
     &lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

     &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Rectangle_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 40&lt;/span&gt;
 &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Square_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 40&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;See that printArea(of rectangle:Rectangle_NOT_SOLID) return the same result with different types instead return specific value of each class&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#liskov-substitution-principle-apply"&gt;
  &lt;/a&gt;
  üëç Liskov Substitution Principle &lt;strong&gt;&lt;em&gt;apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Polygon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;area&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Rectangle_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Polygon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Square_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Polygon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;side&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;side&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;/// MARK: - Implementations  &lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Polygon&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Rectangle_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 400.0&lt;/span&gt;
 &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Square_SOLID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;side&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 100.0&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#i-interface-segregation-principle"&gt;
  &lt;/a&gt;
  &lt;em&gt;I&lt;/em&gt; - Interface Segregation Principle
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#many-clientspecific-interfaces-are-better-than-one-generalpurpose-interface"&gt;
  &lt;/a&gt;
  (M)any client-specific interfaces are better than one general-purpose interface
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#tips-to-apply"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Tips to apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Instead of one monolithic interface, break an interface up based on what implementers should be doing&lt;/li&gt;
&lt;li&gt;Keeps consumers from having to much power&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#not-interface-segregation-principle-apply"&gt;
  &lt;/a&gt;
  üí¢ &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; Interface Segregation Principle apply
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;//MARK:- Fat Interface (Protocol)&lt;/span&gt;
&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;GestureProtocol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didTap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didLongPress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didSwipe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;RichButton_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;GestureProtocol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didTap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tap button"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didLongPress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"long press"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didSwipe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"swipe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PoorButton_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;GestureProtocol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didTap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tap"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didLongPress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didSwipe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;See that PoorButton_NOT_SOLID class have methods that not are usable&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interface-segregation-principle-apply"&gt;
  &lt;/a&gt;
  üëç Interface Segregation Principle  &lt;strong&gt;&lt;em&gt;apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;TapGesture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didTap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;LongPressGesture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didLongPress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;SwipeGesture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didSwipe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;RichButton_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;TapGesture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;LongPressGesture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;SwipeGesture&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didTap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tap button"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didLongPress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"long press"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didSwipe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"swipe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PoorButton_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;TapGesture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didTap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tap button"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Now we remove all unnecessary methods&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#d-dependency-inversion-principle"&gt;
  &lt;/a&gt;
  &lt;em&gt;D&lt;/em&gt; - Dependency Inversion Principle
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#highlevel-modules-should-not-depend-on-lowlevel-modules-both-should-depend-on-abstractions"&gt;
  &lt;/a&gt;
  High-level modules should not depend on low-level modules. Both should depend on abstractions.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#tips-to-apply"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Tips to apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;We‚Äôre used to this : High level &lt;strong&gt;&lt;em&gt;-&amp;gt;&lt;/em&gt;&lt;/strong&gt; (uses) Low level&lt;/li&gt;
&lt;li&gt;High level &lt;strong&gt;&lt;em&gt;-&amp;gt;&lt;/em&gt;&lt;/strong&gt; (expects) interface &lt;strong&gt;&lt;em&gt;&amp;lt;-&lt;/em&gt;&lt;/strong&gt; ( fulfills ) low level&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#not-dependency-inversion-principle-apply"&gt;
  &lt;/a&gt;
  üí¢ &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; Dependency Inversion Principle apply
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;SaveData_NOT_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;filesSystemManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FilesSystemManager_NOT_SOLID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;filesSystemManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;FilesSystemManager_NOT_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// save data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;With this, we have just a way to save Data. If we want use any DataBase?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependency-inversion-principle-apply"&gt;
  &lt;/a&gt;
  üëç Dependency Inversion Principle &lt;strong&gt;&lt;em&gt;apply&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Storage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;SaveData_SOLID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Storage&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;FilesSystemManager_SOLID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Storage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;MySQLDataBase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Storage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Now, we can use any storage method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;üëä Thanks for read!! I hope that you have understand all principles about SOLID and how apply in your day by day for build a better software. In doubt, please put your comment below and i will try to help.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mkilmerr/SOLID_Principles_Swift"&gt;Github Project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
      <category>engineer</category>
      <category>solid</category>
    </item>
    <item>
      <title>How to become a Certified Java Developer Professionals in 2022</title>
      <author>javinpaul</author>
      <pubDate>Sat, 06 Nov 2021 10:16:03 +0000</pubDate>
      <link>https://dev.to/javinpaul/how-to-become-a-certified-java-developer-professionals-1jfb</link>
      <guid>https://dev.to/javinpaul/how-to-become-a-certified-java-developer-professionals-1jfb</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Java certification is highly regarded in the IT Industry and provides a Java developer with recognition worldwide. It helps to find a better job, get a better salary, and even a better raise or bonus at a current job. That's why thousands of Java developers try to become certified every year, but success is not easy.&lt;/p&gt;

&lt;p&gt;There are multiple options to become a certified Java developer in 2022, for example, you can pass OCAJP 8 and OCPJP 8 to become a certified Java developer, or you can pass &lt;a href="https://javarevisited.blogspot.com/2019/12/how-to-crack-java-se-11-certification.html"&gt;Oracle Certified Java Developer (1Z0-819) exam&lt;/a&gt; to become a certified developer. &lt;/p&gt;

&lt;p&gt;I suggest you to go for latest one Java SE 11 certification or 1Z0-819 exam but that's also bit tough and if you have only worked in Java 8 then going for Java SE 8 certification is also a good option. &lt;/p&gt;

&lt;p&gt;And, if you can wait, &lt;a href="https://education.oracle.com/java-se-17-developer/pexam_1Z0-829"&gt;Java SE 17 certification 1Z0-819&lt;/a&gt; is also on the way. &lt;/p&gt;

&lt;p&gt;Oracle's Java Certification has a tough passing percentage, close to 65% for both &lt;a href="https://medium.com/javarevisited/7-best-online-courses-to-prepare-for-oracles-java-se-8-certification-ocajp-8-and-ocpjp-8-2fd0d6779a9e"&gt;OCAJP&lt;/a&gt; (the Oracle Certified Associate Java Programmer) and &lt;a href="https://medium.com/javarevisited/top-5-books-and-courses-to-crack-ocpjp-8-certification-java-8-1z0-809-810-813-exam-c5236dde5f8a"&gt;OCPJP&lt;/a&gt; (the Oracle Certified Professional Java Programmer). &lt;/p&gt;

&lt;p&gt;You need in-depth knowledge of the Java language and API to succeed in the exam.&lt;/p&gt;

&lt;p&gt;As a note, preparing for OCPJP is not very different from OCAJP, though you have to use resources that are focused only on OCPJP. You also need to cover more topics and more in-depth because &lt;a href="https://medium.freecodecamp.org/how-to-pass-oracles-java-certifications-a-practical-guide-for-developers-e9b607ba6173"&gt;OCPJP 8&lt;/a&gt; is certainly a tough nut to crack.&lt;/p&gt;

&lt;p&gt;In order to prepare well and get a high score, here are some tips I am going to share. These tips have helped me in the past to score more than 90% on the certifications.&lt;/p&gt;

&lt;p&gt;So, without wasting any more time, here are my five tips to prepare well for the &lt;a href="http://javarevisited.blogspot.com/2013/07/2-books-to-prepare-oracle-java-7-certification-OCA-OCP-OCPJP.html#axzz4gdx9UfxA"&gt;OCAJP&lt;/a&gt; and &lt;a href="http://javarevisited.blogspot.com/2017/01/difference-between-ocpjp-8-upgrade-exams-1Z0-813-1Z0-810.html"&gt;OCPJP&lt;/a&gt; exams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-tips-to-become-a-certified-java-developer-in-2022"&gt;
  &lt;/a&gt;
  5 Tips to become a Certified Java Developer in 2022
&lt;/h2&gt;

&lt;p&gt;Here is a list of 5 tips to prepare better for Java certification and become a certified Java programmer or Oracle certified Java Professional in 2022:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-join-a-good-course"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Join a Good Course&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There is no better way to prepare for Oracle's Java certification than joining a good course. First of all, it's active learning and you learn 80% of important things in just 20% of your time. &lt;/p&gt;

&lt;p&gt;I was a big fan of the book and I am still is but in last a few years, &lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-java-8-certifications-courses-training-online-OCAJP.html"&gt;online courses&lt;/a&gt; have my main source of learning anything.&lt;/p&gt;

&lt;p&gt;One reason of that is cost, in recent years, mostly dude to Udemy, cost of online courses has come down a lot and some of the courses are even cheaper than books the key is to find a good course otherwise you would waste your time on course hopping.&lt;/p&gt;

&lt;p&gt;When it comes to Oracle's Java certification like OCAJP and OCPJP, &lt;a href="http://shareasale.com/r.cfm?b=1130601&amp;amp;u=880419&amp;amp;m=43514&amp;amp;urllink=&amp;amp;afftrack="&gt;Whizlab's OCAJP training course&lt;/a&gt; is my favorite. &lt;/p&gt;

&lt;p&gt;It provides the most comprehensive coverage and given their experience in the area, you can rest assured of quality.  There is also more than 50% discount available on this course for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://shareasale.com/r.cfm?b=1130601&amp;amp;u=880419&amp;amp;m=43514&amp;amp;urllink=&amp;amp;afftrack="&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81qUcAhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-0zWpZUSQ2FI/W1yObsNxL1I/AAAAAAAAL5E/PokD0LeMcfENZgkjXzDDkRJUsV0ATpt9ACLcBGAs/s400/OCAJP%252B8%252BOnline%252BCourse%252BWhizlabs.png" alt="OCAJP 8 Online Training course " width="400" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for one more option then &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Foracle-java-associate-certification-exam-course-1z0-808%2F"&gt;&lt;strong&gt;Oracle Java Certification - Pass the Associate 1Z0-808 Exam!&lt;/strong&gt;&lt;/a&gt; from Udemy is also a good option and you can get it within $10 on flash sale which happens every month.&lt;/p&gt;

&lt;p&gt;Similarly, if you are preparing for Java SE 11 certification, here are the recommended online courses for you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-se-11-developer-1z0-819-ocp-course-part-1%2F"&gt;Java SE 11 Developer 1Z0-819 OCP Course - Part 1&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-se-11-developer-1z0-819-ocp-course-part-2%2F"&gt;Java SE 11 Developer 1Z0-819 OCP Course - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-se-11-developer-1z0-819-ocp-course-part-1%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHzqLBLm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-thumbs.comidoc.net/750/webp/2649928_84c5_2.webp" alt="Java SE 11 Developer 1Z0-819 OCP Course - Part 1 - Coupon" width="650" height="366"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-read-a-good-study-book"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;Read a Good Study Book&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There is no better companion than a good study book if you are preparing for Java certifications. They cover all the exam topics, give practice questions at the end of the chapter, and share a lot of exam-specific tips that you don't find in any normal Java book.&lt;/p&gt;

&lt;p&gt;There are a lot of study guides available in the market, but if you are preparing for OCAJP 8 or Java SE 11 certification you can take a look at these resources to find a good study guide.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.com/2016/10/best-books-for-ocajp8-exam-1z0-808-java8.html"&gt;List of good study guides for OCAJP 8 (1Z0-808) exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.com/2016/10/top-2-books-for-ocpjp8-certification-1Z0-809-810-813.html"&gt;List of study guides for OCPJP8 Certification - Java 8 1Z0-809, 810, 813 Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/top-5-books-courses-to-crack-oracles-java-se-11-certification-OCAJP11.html"&gt;List of study guides for Java SE 11 Certification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/5-best-books-courses-and-practice-tests-to-crack-java-se-11-certification-ocajp-11-1z0-815-6c861d6d147f"&gt;List of Courses for Java SE 11&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.com/2016/06/2-books-to-prepare-java-ee-6-web-component-exam-1z0-899-OCEJWCD.html#axzz4gbChum1G"&gt;List of study guides for OCEJWCD&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But if you just need a one book, I highly recommend OCP Oracle Certified Professional Java SE 11 Developer Complete Study Guide: Exam 1Z0-815, Exam 1Z0-816, and Exam 1Z0-817 book by Jeanne Boyarsky (Author), Scott Selikoff (Author) on Amazon. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/Oracle-Certified-Professional-Developer-Complete/dp/1119619130?tag=javamysqlanta-20"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZsazZ6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/191/0%2AiMw5d_eZawxI0sok.jpg" alt="best Java SE 11 Developer exam book" width="191" height="239"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3choose-a-good-exam-simulator"&gt;
  &lt;/a&gt;
  3.&lt;strong&gt;Choose a Good Exam Simulator&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;After choosing a good book or study guide, the next thing you need is a good exam simulator. This is must if you want to score high but not required if you just aim for passing the exam. The exam simulators will help you to develop speed and accuracy required to complete all questions in 2.5 hours.&lt;/p&gt;

&lt;p&gt;Here are some of my recommendations for exam simulators:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="http://shrsl.com/?g0ce"&gt;Whizlab's Exam Simulator&lt;/a&gt;\
These are the best in the market, tried and tested by many developers including myself.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;&lt;a href="https://enthuware.com/index.php/java-mock-exams/oracle-certified-professional/java-se-8-1z0-809"&gt;Enthuware's Practice Test&lt;/a&gt;&lt;/strong&gt;\
That's again second best in my opinion, also very cheap, you can just get it under $10. It's also tried and tested by many certified Java developers&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;&lt;a href="https://www.certification-questions.com/java8-dumps/1Z0-808-dumps.html?affiliateCode=fcff36fd-557a-4713-abf6-973e9924770f&amp;amp;utm_source=Javin&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=affiliate"&gt;David Mayer's Practice Test&lt;/a&gt;&lt;/strong&gt;
If you need to go the extra mile with your preparation, I suggest you solve the 450+ problems from David Mayer's Test.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fjava-oca%2F"&gt;Java Certification: OCA (1Z0--808) Exam Simulation &lt;/a&gt;&lt;/strong&gt;
260+ multiple-choice questions with explanation to assess Oracle Certified Associate, Java SE 8 Programmer I preparation&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fjava-ocajp%2F"&gt;Java Certification‚Ää---‚ÄäOCA (1Z0--808) Topic-wise Tests [2018]&lt;/a&gt;&lt;/strong&gt;
Multiple choice questions covering all the exam objectives of Oracle Certified Associate, Java SE 8 Programmer I&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Btw, if you are buying Whizlab's simulator then you can also use the coupon code "&lt;strong&gt;JAVACOMBO2"&lt;/strong&gt; to get a 25% discount.&lt;/p&gt;

&lt;p&gt;Since they provide lifetime access to their simulator, I suggest you buy both OCAJP and OCPJP simulator together and take advantage of this coupon code.&lt;/p&gt;

&lt;p&gt;I suggest you to keep doing mock tests until you score 80% on a consistent basis before going for real exam.  If you need more choices, here is some more recommendation on exam simulators&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/03/top-10-ocajp-and-ocpjp-exam-simulators.html"&gt;Top 10 OCAJP and OCPJP Exam Simulators for Java Certifications&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2016/11/top-5-java-8-practice-test-and-exam-simulators-best-OCAJP-OCAPJP.html"&gt;Top 5 Java 8 Practice Test and Exam Simulators (OCAJP and OCPJP) - Best of lot&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, if you are preparing for OCJP Java SE 11 Developer certification, here are the recommended mock tests and practice questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-se-11-certification-exam-1z0-819-practice-tests%2F"&gt;OCP Java SE 11 Developer Exam 1Z0-819 Practice Tests 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Focp-java-se-11-developer-1z0-819-practice-exam%2F"&gt;OCP Java SE 11 Developer 1Z0-819 Practice Exams new 2021!&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are preparing for Java SE 11 Developer exam, I also have a practice test based course on Udemy where I have shared 250+ questions with explanations for practice &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/java-se-11-certification-exam-1z0-819-practice-tests/?referralCode=6A43D9FD2DD560081062"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HS3SDIG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FMQzhgEvAeOXyPo3IjFRz4IZU3K83-ml7z35hd.jpeg%26w%3D3840%26q%3D75" alt="best Java SE 11 Developer Certification Practice Test" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-regularly-participate-on-forums-"&gt;
  &lt;/a&gt;
  *&lt;em&gt;4. Regularly Participate on Forums *&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;You have to keep yourself motivated and up to date on the exam and other details. With that in mind, there is nothing better than participating in forums like &lt;a href="http://coderanch.com/"&gt;CodeRanch&lt;/a&gt; or Oracle's &lt;a href="https://community.oracle.com/community/technology_network_community/certification/"&gt;official Java Certification forum&lt;/a&gt;. You can ask questions, clear doubts, and become familiar with other candidates who are preparing for exams. You may be able to find some buddies as well who can prepare with you for exams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHamkN7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dz2cdn1.dzone.com/storage/temp/5240861-coderanch-java-forum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHamkN7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dz2cdn1.dzone.com/storage/temp/5240861-coderanch-java-forum.png" alt="Image title" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-solve-as-many-practice-questions-as-possible"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Solve As Many Practice Questions As Possible&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Practice makes you perfect, so solve as many as you can. You will slowly develop the speed and accuracy needed for the exam. Here are some free practice tests for the OCPJP exam&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2015/11/5-free-ocajp8-ocpjp8-mock-exams-and-practice-questions.html"&gt;5 free OCAJP 8/OCPJP 8 mock exams, and practice questions --- 1Z0-808 809 (Java 8 Certification)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2017/04/ocajp-1z0-808-best-books-and-mock-exams-Java8-certification.html"&gt;OCAJP 1Z0-808 --- Best books and mock exams for Java 8 OCA certification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2016/08/5-free-ocajp-7-and-ocpjp7-mock-exams.html"&gt;5 free OCAJP 7 and OCPJP 7 mock exams --- online practice test (1Z0-803 and 1Z0-804&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many such free exams available and Google is your friend. You can find a lot of them to get started with.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-code-every-day"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Code Every Day&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There is no substitute for coding. You must code daily to develop a coding sense, which will help you to read the code given in the real exam. In the case of &lt;a href="https://medium.com/javarevisited/java-certifications-how-to-crack-it-practical-tips-to-prepare-ocajp-and-ocpjp-exams-538f6fe36b37"&gt;OCPJP&lt;/a&gt;, it becomes even more important because attention to detail is required to understand each coding question before you select options.&lt;/p&gt;

&lt;p&gt;All the best for your Java certifications. Make it a goal this year, and you will surely be a certified Java Developer in the next year. &lt;/p&gt;

&lt;p&gt;If you want to wait for new Java SE 17 certification, you can also wait but you should start preparation now so that you can cover 90% topics which will most likely remain same. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ps%E2%80%8A%E2%80%8Aif-you-need-some-free-resources-you-can-check-out-this-list-of-free-ocajp-8-and-ocpjp-8-mock-exams-to-start-your-preparation"&gt;
  &lt;/a&gt;
  P.S.‚Ää---‚ÄäIf you need some FREE resources, you can check out this list of &lt;a href="https://javarevisited.blogspot.com/2015/11/5-free-ocajp8-ocpjp8-mock-exams-and-practice-questions.html"&gt;free OCAJP 8 and OCPJP 8 mock exams&lt;/a&gt; to start your preparation.
&lt;/h4&gt;

</description>
      <category>java</category>
      <category>certification</category>
      <category>programming</category>
      <category>development</category>
    </item>
    <item>
      <title>Give your GitHub repository README.md some insightful eye-candy
</title>
      <author>Seif Lotfy</author>
      <pubDate>Sat, 06 Nov 2021 10:03:05 +0000</pubDate>
      <link>https://dev.to/seiflotfy/give-your-github-repository-readmemd-some-insightful-eye-candy-i37</link>
      <guid>https://dev.to/seiflotfy/give-your-github-repository-readmemd-some-insightful-eye-candy-i37</guid>
      <description>&lt;p&gt;During a small hackathon we at &lt;a href="//axiom.co"&gt;Axiom Inc.&lt;/a&gt; we put together a small nifty tool.&lt;/p&gt;

&lt;p&gt;The motivation behind it was to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share interesting stats about your project activity, from code to issues.&lt;/li&gt;
&lt;li&gt;Let everyone see the top contributors, giving them well-deserved visibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We came up with &lt;strong&gt;&lt;a href="//repobeats.axiom.co"&gt;Repobeats&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Repobeats is a way to embed contributor analytics into your GitHub project's README.md&lt;br&gt;
With Repobeats, contributors and users of your projects get a clear, beautiful, view of how your project is evolving over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why should I use Repobeats? you may ask!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You should use Repobeats if you would like some deeper insights into how your project is evolving in regards to contributions and contributors.&lt;br&gt;
Contributions evolve over time as projects mature, however it is often difficult to get the important details from GitHub directly. By presenting clear charts for issues, pull requests, and pushs/commits, Repobeats allows you to visually see changes in contributions over time.&lt;br&gt;
This allows you to manage your project better and potentially entice new collaborators if they can see a clear way in which they could start helping the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Repobeats is completely free. The service is maintained by &lt;a href="//axiom.co"&gt;Axiom Inc.&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--elEVM-a8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeablml8zfbb7l1glh5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--elEVM-a8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeablml8zfbb7l1glh5c.png" alt="Image description" width="880" height="990"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gTNGsJG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cva91tljcufzsazerd0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gTNGsJG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cva91tljcufzsazerd0j.png" alt="Image description" width="880" height="955"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>news</category>
      <category>motivation</category>
    </item>
  </channel>
</rss>
