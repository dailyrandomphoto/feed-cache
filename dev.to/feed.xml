<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create a simple Floating Button with Xamarin.Forms/MAUI</title>
      <author>Federico Navarrete</author>
      <pubDate>Thu, 17 Jun 2021 08:57:46 +0000</pubDate>
      <link>https://dev.to/fanmixco/how-to-create-a-simple-floating-button-with-xamarin-forms-maui-4k7i</link>
      <guid>https://dev.to/fanmixco/how-to-create-a-simple-floating-button-with-xamarin-forms-maui-4k7i</guid>
      <description>&lt;p&gt;For a while, I have been trying to search how to create a simple Floating Button and this is my final code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;AbsoluteLayout&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!--Other components--&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;ImageButton&lt;/span&gt; &lt;span class="na"&gt;Source=&lt;/span&gt;&lt;span class="s"&gt;"plus.png"&lt;/span&gt; 
            &lt;span class="na"&gt;BackgroundColor=&lt;/span&gt;&lt;span class="s"&gt;"Green"&lt;/span&gt;
        &lt;span class="na"&gt;CornerRadius=&lt;/span&gt;&lt;span class="s"&gt;"80"&lt;/span&gt;
            &lt;span class="na"&gt;AbsoluteLayout.LayoutFlags=&lt;/span&gt;&lt;span class="s"&gt;"PositionProportional"&lt;/span&gt;  
            &lt;span class="na"&gt;AbsoluteLayout.LayoutBounds=&lt;/span&gt;&lt;span class="s"&gt;".95,.95,80,80"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/AbsoluteLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Source&lt;/code&gt; is the picture you want to use.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;BackgroundColor&lt;/code&gt; is the color you want to use in HEX.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;CornerRadius&lt;/code&gt; is to create the form.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;AbsoluteLayout.LayoutBounds&lt;/code&gt; is the location.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will be the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.stack.imgur.com/FMDkR.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hMwEt90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/FMDkR.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can get the icon from:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialdesignicons.com"&gt;https://materialdesignicons.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I got some inspiration from here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/a/54519048/1928691"&gt;https://stackoverflow.com/a/54519048/1928691&lt;/a&gt;&lt;/p&gt;

</description>
      <category>xamarinforms</category>
      <category>xamarin</category>
      <category>maui</category>
    </item>
    <item>
      <title>How's your experience with Xcode? (I want to cry 😭)</title>
      <author>Keff</author>
      <pubDate>Thu, 17 Jun 2021 08:34:14 +0000</pubDate>
      <link>https://dev.to/nombrekeff/how-s-your-experience-with-xcode-i-want-to-cry-2lc6</link>
      <guid>https://dev.to/nombrekeff/how-s-your-experience-with-xcode-i-want-to-cry-2lc6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#have-you-used-xcode-if-so-what-has-your-experience-been-so-far"&gt;
  &lt;/a&gt;
  Have you used Xcode? If so, what has your experience been so far?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ScwhYGeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zintposrzjc2s4k7tqpk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ScwhYGeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zintposrzjc2s4k7tqpk.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Not to shit on them but,&lt;/strong&gt; in my case it's been one of the worst developer experiences I've had in all my career...&lt;/p&gt;

&lt;p&gt;I could ramble about it for hours, but I prefer to hear what other people have to say. But I might publish another post, ranting about my experience.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>dev</category>
      <category>ios</category>
    </item>
    <item>
      <title>You need to build a collaborative text editor RIGHT NOW!!</title>
      <author>Abhishek Raj</author>
      <pubDate>Thu, 17 Jun 2021 08:27:48 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/you-need-to-build-a-collaborative-text-editor-right-now-5fcj</link>
      <guid>https://dev.to/abhishekraj272/you-need-to-build-a-collaborative-text-editor-right-now-5fcj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4xAPGEIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s89r4l772hf6jzw1ftf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xAPGEIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s89r4l772hf6jzw1ftf.png" alt="Code Editor Light Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;By building a collaborative text editor you will get to learn&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Send data from server to client - Polling/Sockets&lt;/li&gt;
&lt;li&gt;Algo/DS to use for efficient data transfer - Text Compare&lt;/li&gt;
&lt;li&gt;Update editor in such way, user's cursor doesn't move.
There are way too many things it will teach you, read the below post to learn more or Try out the live project here -&amp;gt; &lt;a href="https://sotly.co/bro-ide"&gt;Live URL&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Recently, I started working on this cool project, a Web Based Code Editor. So, in this post I will talk about how I implemented this project and what will be the further features I will be adding. 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;As we all know there are thousands of AWESOMEEE code editors out there like repl.it, codepen, codesandbox, etc. So most you must be wondering why I decided to write my own code editors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTq7si14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y1hsf5883j433uj0hkb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTq7si14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y1hsf5883j433uj0hkb.png" alt="Am I Stupid?"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;What I think is, if you build a system then you will get to know how that thing really works, so my curiosity made me do it. 🙂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Lets talk about the features this web app currently has,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separate tabs for HTML/CSS/JS for better coding style.&lt;/li&gt;
&lt;li&gt;Code Output Display, shows the output by merging all codes and creating a Virtual DOM.&lt;/li&gt;
&lt;li&gt;Fully Mobile Responsive.&lt;/li&gt;
&lt;li&gt;Download merged code as text file.&lt;/li&gt;
&lt;li&gt;Night Mode&lt;/li&gt;
&lt;li&gt;Code auto save in browser&lt;/li&gt;
&lt;li&gt;Code Sharing Link (Planned)&lt;/li&gt;
&lt;li&gt;Code Collaboration (Planned)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tech-used"&gt;
  &lt;/a&gt;
  Tech Used
&lt;/h2&gt;

&lt;p&gt;In this project, I have used,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React - For UI&lt;/li&gt;
&lt;li&gt;Material UI - Design/Animation&lt;/li&gt;
&lt;li&gt;Redux - For State Management&lt;/li&gt;
&lt;li&gt;Redux Saga - For Side Effects&lt;/li&gt;
&lt;li&gt;Redux Persist - For Auto Save&lt;/li&gt;
&lt;li&gt;Socket IO (Planned) - For socket connection&lt;/li&gt;
&lt;li&gt;JsDiff - For Calculating Difference&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contribution"&gt;
  &lt;/a&gt;
  Contribution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ptjaRQ4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.drupal.org/files/contribute.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ptjaRQ4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.drupal.org/files/contribute.png" alt="Contribute"&gt;&lt;/a&gt;&lt;br&gt;
This project is open for contributions, even contribution to docs, readme, managing people will help others learn and we can grow together.&lt;br&gt;
This is the repo url -&amp;gt; &lt;a href="https://github.com/abhishekraj272/Bro-Code-Web-IDE"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try out the live project here -&amp;gt; &lt;a href="https://sotly.co/bro-ide"&gt;Live URL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt; &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt; &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/abhishek.r.a.j"&gt;Instagram&lt;/a&gt; 😇&lt;/p&gt;

&lt;p&gt;Ping Me Anytime with doubts related to Full Stack / Pen Testing&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Complete Guide To Lazy Load Images For Better Website Performance</title>
      <author>Harish Rajora</author>
      <pubDate>Thu, 17 Jun 2021 07:30:04 +0000</pubDate>
      <link>https://dev.to/harishrajora12/complete-guide-to-lazy-load-images-for-better-website-performance-6ck</link>
      <guid>https://dev.to/harishrajora12/complete-guide-to-lazy-load-images-for-better-website-performance-6ck</guid>
      <description>&lt;p&gt;The pandemic of 2019-2020 made us all lazy. With no option but to sit at home, &lt;a href="https://runrepeat.com/quarantine-15-weight-gain-study"&gt;35.82% of us gained weight in that phase&lt;/a&gt;, thanks to our laziness. Fortunately, that phase gives us an excellent chance to understand a somewhat similar concept in &lt;a href="https://www.lambdatest.com/blog/top-21-web-development-trends-in-2021/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-17062021&amp;amp;utm_term=Harish"&gt;web development&lt;/a&gt;. So, how do you define the term “lazy”? While Google says, “Unwilling to work”, I can rephrase it to “not willing to work until necessary”. Until it is extremely necessary for a lazy person to move to another place than that lousy couch, they will stick to it.&lt;/p&gt;

&lt;p&gt;Similarly, in CSS we call lazy images those images that are not willing to be fetched from the server to the client (from couch to the place X in our analogy) until it’s extremely necessary. Lazy images will serve as the center point of this blog. The post will revolve around encouraging the developers to make more and more images lazy in contrast to real life. The main attractions that will throw a bit of light on what these lazy load images are, how to lazy load images as well as the ways in which a developer can convert an image to lazy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-lazy-load-images"&gt;
  &lt;/a&gt;
  What Are Lazy Load Images?
&lt;/h2&gt;

&lt;p&gt;Lazy loading in “images” or Computer Science as a general concept avoids the fetch request of that element until extremely necessary. For example, in Scala, we use lazy variables to avoid their initialization and calculation until necessary. This executes the program faster and consumes lesser memory.&lt;/p&gt;

&lt;p&gt;In CSS, the same concept is used to load the images only when it is necessary. Images are something that loads the page heavily with their size. On average, Google analyzes that the images account &lt;a href="https://developers.google.com/web/fundamentals/design-and-ux/responsive/images#:~:text=Did%20you%20know%20that%20images,load%20quickly%20on%20any%20device."&gt;for more than 60% of bytes of the web page&lt;/a&gt;. If you own a website, you can also check your &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;page speed insights&lt;/a&gt; and know-how images overload your web page.&lt;/p&gt;

&lt;p&gt;Apart from lazy loading, there are a lot of ways that the developers can try to optimize the web page performance. These may include understanding the images’ responsiveness, making their size smaller and using the correct file format. But still, whatever we do, images contribute to the majority of a web page, and the web page is incomplete today without appropriate images. Therefore, something is needed that can help us improve performance without omitting any images.&lt;/p&gt;

&lt;p&gt;Images contribute so much to the web page today because they are important!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A study shows how &lt;a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=587201"&gt;65% of people learn through visual imagery&lt;/a&gt;, and another one by Brandwatch highlights that &lt;a href="https://www.brandwatch.com/blog/what-visual-listening/"&gt;3.2 billion image shares are executed every day&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We cannot skip the images on our web page, which raises a new technique to load them and still save on the bandwidth. This is where lazy load images come to the rescue. The concept behind lazy load images is that not all the users arriving at a webpage read it entirely till the end. Some people come wandering off the internet to find out that the page is irrelevant to them. Some close the page at a point where they no longer need it.&lt;/p&gt;

&lt;p&gt;Loading the page altogether for every user is wasting bandwidth and a potential user when we know that most &lt;a href="https://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds/"&gt;users do not wait more than 2 seconds&lt;/a&gt; to load. So, why not skip the image loading and wait for our user to reach the point where the image is placed? This way, we are sure that if we are making a heavy request to the user, it would be worth it! For the people abandoning the page before the image is placed, the web page becomes faster, and the server requests become fewer. It is a win-win.&lt;/p&gt;

&lt;p&gt;From the next section onwards, we shall discuss three methods for ‘how to lazy load images?’- the hard one, the mediocre one, and the easy one!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-images-with-javascript-the-hard-way"&gt;
  &lt;/a&gt;
  Lazy Load Images with JavaScript – The Hard Way
&lt;/h2&gt;

&lt;p&gt;The first method to focus on is the conventional way which has been used for a long time to make an image lazy. Implementing lazy load images- JavaScript is more complicated than the other ways discussed in this post, but I am sure it will brush up your JS skills along the way and will bring its own set of benefits.&lt;/p&gt;

&lt;p&gt;To load an image on a webpage, we use the “img” tag with the “src” attribute defining the URL of the image.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src = “URL” /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To apply lazy loading to the “img” tag, we need to remove the “src” tag first. The reason being that the browser quickly loads all the URLs when it sees a “src” tag. So when we are waiting for the event to be triggered through JavaScript, our browser would already have loaded the image as soon as the document object model loads.&lt;/p&gt;

&lt;p&gt;To prevent the automatic loading of the image, we make use of the data-src attribute instead of src.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img data-src = “URL” /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the current demonstration, we will use the “scroll” event to trigger the JavaScript function, but since it’s your website, you can take any event you like to let the browser know the time to load the images.&lt;/p&gt;

&lt;p&gt;To let the browser know that we want to call a function after an event, we need to add the event listener as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;document.addEventListener(“scroll”, function_name);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, we need to replace the function_name with the actual function name. Let’s say our function will be named “Wake_Up_Image” to check if the image is in the viewport or not. If it is, wake it up, i.e. load it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;document.addEventListener(“scroll”, Wake_Up_Image);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we need to implement our function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Wake_Up_Image() {
    if(lazyloadTimeout) {
      clearTimeout(lazyloadTimeout);
    }

    lazyloadTimeout = setTimeout(function() {
        var scrollTop = window.pageYOffset;
        lazyImages.forEach(function(img) {
            if(img.offsetTop &amp;lt; (window.innerHeight + scrollTop)) {
              img.src = img.dataset.src;
            }
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function iterates over the images and calculates the offset of the image with respect to the window to get the viewport. If the image is found to be inside the viewport, the &lt;strong&gt;data-src&lt;/strong&gt; tag we used above will be converted to the &lt;code&gt;src&lt;/code&gt; tag through &lt;code&gt;img.src = img.dataset.src&lt;/code&gt;. Seeing the src tag, the browser will load the image on the webpage.&lt;/p&gt;

&lt;p&gt;The timeout function is used for optimizations and improved performance. This code will work fine in the browser but would need slight performance improvements.&lt;/p&gt;

&lt;p&gt;First, we need to capture images in lazyImages that we want to be lazy. For this, we can implement “ &lt;strong&gt;lazy&lt;/strong&gt; ” as a class in the image tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img class = “lazy” data-src = “URL” /&amp;gt;&amp;lt;pre&amp;gt;

Now we can capture these images using querySelector as follows:

&amp;lt;strong&amp;gt;var lazyImages = document.querySelectorAll("img.lazy");&amp;lt;/strong&amp;gt;

As a next step, we should remove the eventListener as soon as the timeout becomes 0. This can be achieved through the removeEventListener:

&amp;lt;strong&amp;gt;document.removeEventListener("scroll", Wake_Up_Image);&amp;lt;/strong&amp;gt;

Combining all of the above changes and optimizations, the overall code becomes:

&amp;lt;pre&amp;gt;
var lazyImages = document.querySelectorAll("img.lazy");
  var lazyloadTimeout;

  function Wake_Up_Image() {
    if(lazyloadTimeout) {
      clearTimeout(lazyloadTimeout);
    }

    lazyloadTimeout = setTimeout(function() {
        var scrollTop = window.pageYOffset;
        lazyImages.forEach(function(img) {
            if(img.offsetTop &amp;lt; (window.innerHeight + scrollTop)) {
              img.src = img.dataset.src;
              img.classList.remove('lazy');
            }
        });
        if(lazyloadImages.length == 0) {
          document.removeEventListener("scroll", lazyload);
        }
    }, 15);
  }

  document.addEventListener("scroll", lazyload);

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add other event listeners if you feel- like orientation change or window resizing.&lt;/p&gt;

&lt;p&gt;The above code results in the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GPMMW67g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/lazy_loading_javascript.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GPMMW67g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/lazy_loading_javascript.gif" alt="lazy_loading_javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright! With this implementation, we are done with the hard method to implement the lazy load images. As a web developer, I might not use lazy load images JavaScript to implement lazy loading while developing a web page. If the final motive is to load the images based on their viewport visibility only, JavaScript is a bit longer and harder than other methods. It is prone to more errors than other methods, and code reading also becomes complex. Although if you intend to play according to the event listeners, nothing gives better control than the JavaScript.&lt;/p&gt;

&lt;p&gt;In the above demonstration, you might feel that there is a bit of delay in the image loading, and in that time, a grey canvas is visible. As a developer, you can colour that canvas with some dominant colours to not let the user notice the lag. This is just a slight UI adjustment that would not affect the lazy load images’ performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-images-with-intersection-observer-api-the-mediocre-way"&gt;
  &lt;/a&gt;
  Lazy Load Images with Intersection Observer API – The Mediocre Way
&lt;/h2&gt;

&lt;p&gt;Observing the high demand for viewport based functions, JavaScript introduced a new API called &lt;strong&gt;Intersection Observer&lt;/strong&gt;. The Intersection Observer API observes the intersection between the target element with the ancestor element or with the top-level document’s viewport. The intersection observer API skips the usual JavaScript conditions, loops and event handlers that created complex code in the first method.&lt;/p&gt;

&lt;p&gt;We will modify the above given code to adjust it according to the Intersection Observer API as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.addEventListener("DOMContentLoaded", function() {
  var lazyImages;
  if ("IntersectionObserver" in window) {
    lazyImages = document.querySelectorAll(".lazy");
    var imageObserver = new IntersectionObserver(function(entries, observer) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          var image = entry.target;
          image.src = image.dataset.src;
          image.classList.remove("lazy");
          imageObserver.unobserve(image);
        }
      });
    });

    lazyImages.forEach(function(image) {
      imageObserver.observe(image);
    });
  } else {
    var lazyloadTimeout;
    lazyImages = document.querySelectorAll(".lazy");

    function lazyload () {
      if(lazyloadTimeout) {
        clearTimeout(lazyloadTimeout);
      }

      lazyloadTimeout = setTimeout(function() {
        var scrollTop = window.pageYOffset;
        lazyImages.forEach(function(img) {
            if(img.offsetTop &amp;lt; (window.innerHeight + scrollTop)) {
              img.src = img.dataset.src;
              img.classList.remove('lazy');
            }
        });
        if(lazyloadImages.length == 0) {
          document.removeEventListener("scroll", lazyload);
        }
      }, 15);
    }

    document.addEventListener("scroll", lazyload);
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The “unobserve” method tells the Intersection Observer to stop observing the target element while the observed method is the opposite. Notice how we removed the event handlers and the offset calculation while using the API.&lt;/p&gt;

&lt;p&gt;The above code generates the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhCWM2CG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/lazy_loading_intersection_observer.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhCWM2CG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/lazy_loading_intersection_observer.gif" alt="lazy_loading_intersection_observer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As seen in the above interaction video performed on &lt;a href="http://www.lambdatest.com?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-17062021&amp;amp;utm_term=Harish"&gt;LambdaTest&lt;/a&gt;, the Intersection Observer API is faster and performs much better on the scroll event. The lag that was generated while writing the code in JavaScript was also not visible in the API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support-for-intersection-observer-api"&gt;
  &lt;/a&gt;
  Browser Support for Intersection Observer API
&lt;/h3&gt;

&lt;p&gt;The browser support for the intersection observer API is also great, giving us the freedom to use it without worrying about a crash:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXY0_ZSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Browser-Support-for-Intersection-Observer-API-1024x408.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXY0_ZSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Browser-Support-for-Intersection-Observer-API-1024x408.png" alt="Browser Support for Intersection Observer API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Intersection Observer API is a much better option for loading the images lazily on the web page. A more straightforward method for lazy load images is also available in the browsers called the “loading” attribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-images-with-the-loading-attribute-the-easy-way"&gt;
  &lt;/a&gt;
  Lazy Load Images with the Loading Attribute- The Easy Way
&lt;/h2&gt;

&lt;p&gt;The web pages are growing over time. Developers now know that images have a significant effect on the user and how they perceive the website. As a result, it has become a rare phenomenon to see a web page that does not have a single image. Some web pages are just filled with images raising their count to more than ten or sometimes 15. As good as that is for everyone, Google Chrome developers did start to take the lazy loading seriously.&lt;/p&gt;

&lt;p&gt;As our web page’s size has increased so significantly, developers have started to use lazy loading on their website to save from the embarrassment of loading their webpage in a lifetime. Google Chrome developers hence thought out to implement this feature into the native browser library so that developers can skip the complex JS code and directly implement lazy loading and the existence of the src attribute. This attribute is called the “loading” attribute.&lt;/p&gt;

&lt;p&gt;The “loading” attribute consists of three values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;auto&lt;/strong&gt; : The “auto” value depends on the browser’s in-built capabilities. For example, Google Chrome automatically loads the images located deep down the viewport to save the bandwidth. If any other browser does not have that capability, the image will load immediately with the page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;lazy&lt;/strong&gt; : The “lazy” value tellS the browser that this image needs to be loaded lazily in the browser.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;eager&lt;/strong&gt; : The “eager” value is used to tell the browser to load the image immediately as the content is loaded. The “eager” value is opposite to the “lazy” value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we need to load the image lazily, we will use the “ &lt;strong&gt;lazy&lt;/strong&gt; ” value here. This is a Chromium-based update and, therefore, will be available to all Chromium-based browsers.&lt;/p&gt;

&lt;p&gt;There is no need to implement JavaScript, and a small addition to the image tag would work as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src = “URL” loading = “lazy”&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will bring out the same output as the Intersection Observer API without any extra code. So, why don’t we skip everything and use just the native lazy loading feature?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support-for-the-loading-attribute"&gt;
  &lt;/a&gt;
  Browser Support for the Loading Attribute
&lt;/h3&gt;

&lt;p&gt;The browser support for the loading attribute is as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxrbvT8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Loading-Attribute.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxrbvT8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Loading-Attribute.png" alt="Source: Can I use"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Chrome browser and other Chromium-based browsers show full support. In contrast, Mozilla’s Firefox is currently providing partial support to the attribute. The “loading” attribute is more accessible, but as I mentioned above, if you want to play with the events and want more control over your elements, JavaScript is the best choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-images-javascript-libraries"&gt;
  &lt;/a&gt;
  Lazy Load Images JavaScript Libraries
&lt;/h2&gt;

&lt;p&gt;The above methods will invite you to complex code every condition and loop without any support. However, similar to any other operation, JavaScript comes here to our rescue, too, with multiple libraries that can encourage lazy loading not in only images but other elements as well. The following libraries will help you in loading elements lazily in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/malchata/yall.js"&gt;Yet Another Lazy Loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jquery.eisbehr.de/lazy/"&gt;Lazy JQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aFarkas/lazysizes"&gt;Lazysizes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from this, for WordPress fans, you can use the &lt;a href="https://wordpress.org/plugins/a3-lazy-load/"&gt;A3 Lazy Load plugin&lt;/a&gt; for implementing lazy loading very efficiently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-option-is-your-favorite"&gt;
  &lt;/a&gt;
  Which Option is your Favorite?
&lt;/h2&gt;

&lt;p&gt;Lazy load images is an excellent concept for improving website performance. If you have a web page that contains a few images in different areas of the web page, lazy loading will save the network calls and precious time in loading the website. Not only this, &lt;strong&gt;lazy loading provides substantial performance gains and reduces your overall cost&lt;/strong&gt;. For someone who hosts all their images to the AWS cloud, minimizing the server calls can bring down the costs in your monthly bills.&lt;/p&gt;

&lt;p&gt;This does not mean we start to lazy load everything on our web page. Lazy loading everything might sound like a huge performance bonus but is not necessary. The servers today are not that slow, and the networks are faster too. Lazy loading will increase the server calls if the developer starts dividing the sections that could have been fetched through a single request. Hence, it is advisable to use lazy loading but not everywhere.&lt;/p&gt;

&lt;p&gt;The methods explained in this post precisely aim towards lazy load images on a web page. With the three methods available today, all of them have their importance and their demerits. JavaScript might give you a hard time but will provide you with more control. The loading attribute is a work of seconds but might not render on all the browsers. With three options in our hand, we would love to know your thoughts around these methods and which one would you prefer as a development and &lt;a href="https://community.lambdatest.com/"&gt;testing community&lt;/a&gt; ourselves. Mention your method and reason to use in the comment section and help the community to get more personal insights from all the developers.&lt;/p&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Day-21 Drag N Drop </title>
      <author>Sabiya Tabassum</author>
      <pubDate>Thu, 17 Jun 2021 06:17:22 +0000</pubDate>
      <link>https://dev.to/sabiyatabassum/day-21-drag-n-drop-2afp</link>
      <guid>https://dev.to/sabiyatabassum/day-21-drag-n-drop-2afp</guid>
      <description>&lt;p&gt;Hi Folks,&lt;/p&gt;

&lt;p&gt;Before diving into the project, a little bit of &lt;strong&gt;introduction&lt;/strong&gt; about me:&lt;/p&gt;

&lt;p&gt;I am &lt;strong&gt;Sabiya Tabassum&lt;/strong&gt;. I completed my B.Tech under CSE major. I'm currently learning React and recently, I have started 50 Projects 50 Days challenge. If you have any queries/ ideas to collaborate with me, you can connect with me at my social media handles.&lt;/p&gt;

&lt;p&gt;Coming to our &lt;strong&gt;Drag N Drop Project&lt;/strong&gt;, Let's Go!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtK83k0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5wvavf7rdr8m3lwv1i6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtK83k0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5wvavf7rdr8m3lwv1i6.gif" alt="Let's Go"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Glimpse of the &lt;strong&gt;output&lt;/strong&gt; of our project:&lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/Day-21-Drag-N-Drop-d6qi5"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;From the above image, we can get an idea that there are some boxes. Out of these boxes, one box have an image. We can drag the image and drop in any of the boxes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tech stack&lt;/strong&gt; we are using: HTML,CSS, JS&lt;/p&gt;

&lt;p&gt;📌&lt;strong&gt;HTML code:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
   &amp;lt;div class="empty"&amp;gt;
      &amp;lt;div class="fill" draggable="true"&amp;gt;&amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;div class="empty"&amp;gt;&amp;lt;/div&amp;gt;
   &amp;lt;div class="empty"&amp;gt;&amp;lt;/div&amp;gt;
   &amp;lt;div class="empty"&amp;gt;&amp;lt;/div&amp;gt;
   &amp;lt;div class="empty"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Detailed Explanation of HTML code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;According to the output, we need atleast 4-5 boxes. So we create 4-5  tags with an empty class inside it.
&lt;/li&gt;
&lt;li&gt;For a image in the box, we create another  inside the empty  tag. And add an attribute &lt;strong&gt;draggable="true"&lt;/strong&gt;.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;draggable="true"&lt;/strong&gt;: The &lt;strong&gt;draggable&lt;/strong&gt; attribute specifies 
whether an element is draggable or not.&lt;/li&gt;


&lt;p&gt;📌&lt;strong&gt;CSS code:&lt;/strong&gt;&lt;/p&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   @import url("https://fonts.googleapis.com/css2? 
   family=Roboto:wght@400;700&amp;amp;display=swap");
   * {
      box-sizing: border-box;
   }
   body {
      font-family: "Roboto", sans-serif;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      margin: 0;
      height: 100vh;
   }
 .empty {
      height: 150px;
      width: 150px;
      margin: 10px;
      border: solid 3px black;
      background: white;
   }
.fill {
     background-image:
          url("https://source.unsplash.com/random/150x150");
     width: 145px;
     height: 145px;
   }
.hold {
     border: 3px solid red;
   }
.hovered {
     background-color: black;
     border-color: rgb(32, 230, 32);
     border-style: dashed;
   }
 @media (max-width: 480px) {
     body {
          flex-direction: column;
     }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Detailed explanation of CSS code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;Centering of elements&lt;/strong&gt;: Add properties like,

&lt;ul&gt;
&lt;li&gt;display:flex - To lay a collection of items out in one 
              direction or another.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;align-items:center&lt;/strong&gt; - Centering the items.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;justify-content:center&lt;/strong&gt; - Aligns the flexible 
              container's items to center.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;height:100vh&lt;/strong&gt; - The page's overall height&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;overflow: hidden&lt;/strong&gt; - This property makes the page 
              unscrollable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;styling the empty class&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;Specify &lt;strong&gt;height&lt;/strong&gt; and &lt;strong&gt;width&lt;/strong&gt; of the box.&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;background-color&lt;/strong&gt; and &lt;strong&gt;border&lt;/strong&gt; properties.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;styling the fill class&lt;/strong&gt;: 

&lt;ul&gt;
&lt;li&gt;Add &lt;strong&gt;background-image&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt;, &lt;strong&gt;width&lt;/strong&gt; 
properties for the image.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add styling to hold class and hovered class which will be created further in JS.

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;hold class styling&lt;/strong&gt; - To create an effect around the image, when the image is dragged from the box. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;hovered class styling&lt;/strong&gt; - To create an effect when the image is hovering on other boxes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Atlast, Add some responsive media queries 😊 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📌&lt;strong&gt;JS code:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const fill = document.querySelector(".fill");
  const empties = document.querySelectorAll(".empty");

  fill.addEventListener("dragstart", dragStart);
  fill.addEventListener("dragend", dragEnd);

  empties.forEach((empty) =&amp;gt; {
      empty.addEventListener("dragover", dragOver);
      empty.addEventListener("dragenter", dragEnter);
      empty.addEventListener("dragleave", dragLeave);
      empty.addEventListener("drop", dragDrop);
  });

  function dragStart() {
      this.className += " hold"; //append the hold class here
      setTimeout(() =&amp;gt; (this.className = "invisible"), 0);
  }

  function dragEnd() {
      this.className = "fill";
  }

  function dragOver(e) {
      e.preventDefault();
  }

  function dragEnter(e) {
      e.preventDefault();
      this.className += " hovered"; //append hovered class 
                         here while entering into the box.
  }

  function dragLeave() {
      this.className = "empty";
  }

  function dragDrop() {
      this.className = "empty";
      this.append(fill);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Detailed explanation of JS code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firstly, create the variables on which we are making DOM 
 changes.&lt;/li&gt;
&lt;li&gt;On Fill box, we have two functions &lt;strong&gt;dragStart&lt;/strong&gt; and 
 &lt;strong&gt;dragEnd&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;On Empty box, we have &lt;strong&gt;dragOver&lt;/strong&gt;, &lt;strong&gt;dragEnter&lt;/strong&gt;, 
 &lt;strong&gt;dragLeave&lt;/strong&gt;, &lt;strong&gt;drop&lt;/strong&gt; functions.&lt;/li&gt;
&lt;li&gt;These functions are helpful in giving you an idea on drag 
 and drop operations.&lt;/li&gt;
&lt;li&gt;We have to append the respective classes i.e., empty, fill 
 classes while performing drag and drop on respective boxes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#finally-the-live-demo-of-output-will-be"&gt;
  &lt;/a&gt;
  Finally, the &lt;strong&gt;Live demo&lt;/strong&gt; of &lt;strong&gt;output&lt;/strong&gt; will be:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/Day-21-Drag-N-Drop-d6qi5"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#github-link-github-sabiyatabassumday21dragndrop-"&gt;
  &lt;/a&gt;
  Github Link: &lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sabiyatabassum"&gt;
        sabiyatabassum
      &lt;/a&gt; / &lt;a href="https://github.com/sabiyatabassum/Day-21-Drag-N-Drop"&gt;
        Day-21-Drag-N-Drop
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Day-21 Drag N Drop. Created with CodeSandbox
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Day-21-Drag-N-Drop&lt;/h1&gt;
&lt;p&gt;Created with CodeSandbox&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sabiyatabassum/Day-21-Drag-N-Drop"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/h4&gt;


&lt;h4&gt;
  &lt;a href="#connect-me-at-httpstwittercomnerdfswd"&gt;
  &lt;/a&gt;
  Connect me at &lt;a href="https://twitter.com/nerd_fswd"&gt;https://twitter.com/nerd_fswd&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Hope you liked the project!!&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#todays-pinch-of-motivation"&gt;
  &lt;/a&gt;
  Today's Pinch of Motivation:
&lt;/h4&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    When you're high on emotion
    And you're losing your focus
    And you feel too exhausted to pray
    Don't get lost in the moment
    Or give up when you're closest
    All you need is somebody to say
    It's okay not to be okay
    It's okay not to be okay
    When you're down and you feel ashamed
    IT'S OK NOT TO BE OK!!
&lt;/code&gt;&lt;/pre&gt;



</description>
      <category>javascript</category>
      <category>50projects50days</category>
      <category>day21</category>
    </item>
    <item>
      <title>Is there any way I can change a file header in Linux like how I'd change a file extension in Windows (10).</title>
      <author>Calin Baenen</author>
      <pubDate>Thu, 17 Jun 2021 06:02:03 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-there-any-way-i-can-change-a-file-header-in-linux-like-how-i-d-change-a-file-extension-in-windows-10-5257</link>
      <guid>https://dev.to/baenencalin/is-there-any-way-i-can-change-a-file-header-in-linux-like-how-i-d-change-a-file-extension-in-windows-10-5257</guid>
      <description>&lt;p&gt;I know in Windows, "file extensions", the part of a file name after the final period in the file name, are more than just part of the file name, they also act as metadata to tell Windows what kind of file the document should be treated as, and what apps to open them in (i.e. what apps are associated with those file types).&lt;/p&gt;

&lt;p&gt;However, I want to start moving to Linux (Ubuntu) which I installed on my PC a while back, so, I recently tried making a new file ("extensionless"), and I wanted to make it a different type, so I tested to see if that would work by testing by renaming it &lt;code&gt;.go&lt;/code&gt;, so I could try to open it in VSCode like I normally would on WIndows.&lt;br&gt;
Surprise, it doesn't work.&lt;/p&gt;

&lt;p&gt;I look up multiple searches, involving how to change the file extension (only getting results using command line), and eventually coming over to a horrifying S.O. answer that horrified me, it gave me the info that "extensions" (file types) are determined by header.&lt;/p&gt;

&lt;p&gt;There doesn't seem to be any way in the "Files" file manager for Ubuntu to change the header type.&lt;br&gt;
There seems to be no concept of anything other than a plain "Text" file.&lt;br&gt;
(Well, there is, but you just can't see or change it.)&lt;br&gt;
&lt;br&gt;&lt;br&gt;
What I want is a program that can give me a simple GUI to edit the file type of a file so I can easily go between one or the other as needed/wanted.&lt;br&gt;
(Even better, and more appreciated would be some kind of program that works with "Files" to add the option to change the filetype-header in context menu (when a certain file is selected). Though, either will do.)&lt;/p&gt;

&lt;p&gt;Info:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ubuntu 20.04.2 LTS&lt;/span&gt;
&lt;span class="na"&gt;WindowingSystem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;X11&lt;/span&gt;
&lt;span class="na"&gt;GNOME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;3.36.8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>linux</category>
      <category>windows</category>
      <category>watercooler</category>
      <category>help</category>
    </item>
    <item>
      <title>Python's Collections Module: OrderdDict</title>
      <author>Kathan Vakharia</author>
      <pubDate>Thu, 17 Jun 2021 04:54:12 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collections-module-orderddict-30ia</link>
      <guid>https://dev.to/kathanvakharia/python-s-collections-module-orderddict-30ia</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-do-we-need-ordereddict-anway"&gt;
  &lt;/a&gt;
  Why do we need OrderedDict anway?
&lt;/h2&gt;

&lt;p&gt;Since dictionaries in python maintain their insertion order completely after &lt;strong&gt;python 3.7+&lt;/strong&gt;, use case of &lt;code&gt;OrderedDict&lt;/code&gt; is fading away slowly. But still there are some helper methods and functions that we can leverage while using OrderedDicts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5G6kC4bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t806u5fbdsoy6mk0e8i4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5G6kC4bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t806u5fbdsoy6mk0e8i4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-raw-ordereddict-endraw-"&gt;
  &lt;/a&gt;
  Creating &lt;code&gt;OrderedDict&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Since, it is a &lt;code&gt;dict&lt;/code&gt; sub-class. It can leverage all the functionalities of dictionary.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9MRWkyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x5t0qs1ym5tfk5myekm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9MRWkyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x5t0qs1ym5tfk5myekm.png" alt="image"&gt;&lt;/a&gt;Let's discuss some important methods pertaining to &lt;code&gt;OrderedDict&lt;/code&gt; only.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-popitem-endraw-method"&gt;
  &lt;/a&gt;
  &lt;code&gt;popitem&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;popitem(last = True)&lt;/code&gt; method for ordered dictionaries returns and removes a &lt;strong&gt;(key, value)&lt;/strong&gt; pair. &lt;/p&gt;

&lt;p&gt;The pairs are returned in ,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;LastInFirstOut(LIFO)&lt;/em&gt; order if last is &lt;strong&gt;true&lt;/strong&gt;. That is to say, &lt;strong&gt;last&lt;/strong&gt; pair is popped.(default)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;FirstInFirstOut(FIFO)&lt;/em&gt; order if &lt;strong&gt;false&lt;/strong&gt;. That is to say, &lt;strong&gt;first&lt;/strong&gt; pair is popped.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;

&lt;span class="n"&gt;ord_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"founder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"A Geek"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"Ran by"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Geeks"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;last_pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popitem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# last=True by default
&lt;/span&gt;&lt;span class="n"&gt;first_pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popitem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'last pair: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;last_pair&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'first pair: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;first_pair&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT 
last pair: ('Ran by', 'Geeks')
first pair: ('fname', 'The')
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#-raw-movetoend-endraw-method"&gt;
  &lt;/a&gt;
  &lt;code&gt;move_to_end&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;move_to_end(key, last=True)&lt;/code&gt; moves an existing key to either end of an ordered dictionary. &lt;/p&gt;

&lt;p&gt;The item is moved to the right end if last is true (default) or to the beginning if last is false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;

&lt;span class="n"&gt;ord_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"founder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"A Geek"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"Ran by"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Geeks"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Before =&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# move to right-most end
&lt;/span&gt;&lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'founder'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# move to left-most end
&lt;/span&gt;&lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move_to_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Ran by'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'After =&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ord_dict&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT 
Before =&amp;gt;
OrderedDict([('fname', 'The'), ('lname', 'CodeBlooded'), 
            ('founder', 'A Geek'), ('Ran by', 'Geeks')])
After =&amp;gt;
OrderedDict([('Ran by', 'Geeks'), ('fname', 'The'), 
            ('lname', 'CodeBlooded'), ('founder', 'A Geek')])

"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡 &lt;strong&gt;KeyError&lt;/strong&gt; is raised if given key is not present in the dictionary.&lt;/p&gt;

&lt;p&gt;And that wraps our discussion on &lt;code&gt;OrderedDict&lt;/code&gt;! If you notice all of Collections classes we discussed till now are &lt;code&gt;dict&lt;/code&gt; subclass, isn't it interesting ? It's testament to how much powerful dictionaries in python are 😎&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>Learn and Master Flexbox by building commonly used web components </title>
      <author>David Asaolu</author>
      <pubDate>Thu, 17 Jun 2021 04:16:15 +0000</pubDate>
      <link>https://dev.to/arshadayvid/learn-and-master-flexbox-by-building-commonly-used-web-components-14n8</link>
      <guid>https://dev.to/arshadayvid/learn-and-master-flexbox-by-building-commonly-used-web-components-14n8</guid>
      <description>&lt;p&gt;Hello, welcome to this tutorial. Today, I will be explaining how to build commonly used web components with Flexbox. &lt;/p&gt;

&lt;p&gt;After the introduction, I will walk you through building the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; A navigation bar&lt;/li&gt;
&lt;li&gt; A contact card &lt;/li&gt;
&lt;li&gt; A credit card checkout page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's jump right into it! 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/YTbZzCkRQCEJa/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/YTbZzCkRQCEJa/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Flexbox model provides an efficient way to layout, align and arrange elements on a webpage. Learning flexbox may seem to be a pain in the butt at first for some people, but once you get familiar with it, applying it will be a harmless and enjoyable ride. &lt;br&gt;
I also use flexbox in all my projects and it's been awesome!&lt;/p&gt;

&lt;p&gt;Let's learn some rudiments:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-display-flex"&gt;
  &lt;/a&gt;
  1. display: flex
&lt;/h3&gt;

&lt;p&gt;Don't panic! 😨 This is a CSS attribute that you assign to the parent container in order to use flexbox. For instance, if you have&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;main id="parent"&amp;gt;
        &amp;lt;div class="child"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class="child"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class="child"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class="child"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "main" tag is the parent element, also known as the flex container. &lt;br&gt;
Note that, this attribute aligns the children elements inline by default, that is lay them side by side (from left-right). The children can also be referred to as flex items.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nECZfIF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b26zr3xzjf7i0lki7qsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nECZfIF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b26zr3xzjf7i0lki7qsq.png" alt="Flexbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-flexdirection-row-flexdirection-column-flexdirection-columnreverse-flexdirection-rowreverse"&gt;
  &lt;/a&gt;
  2. flex-direction : row || flex-direction : column || flex-direction : column-reverse || flex-direction : row-reverse
&lt;/h3&gt;

&lt;p&gt;I guess this is self-explanatory already. &lt;/p&gt;

&lt;p&gt;Flex-direction : row - This is the default arrangement of flex-items, when display : flex is assigned to the parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nECZfIF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b26zr3xzjf7i0lki7qsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nECZfIF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b26zr3xzjf7i0lki7qsq.png" alt="Flexbox - flex-direction : row"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flex-direction : column  - The flex-items (children elements) are arranged from top to bottom within the parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HliAnWT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dt2ul78tom6em5qv2ne.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HliAnWT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dt2ul78tom6em5qv2ne.png" alt="Flexbox - flex-direction : column"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flex-direction : row-reverse - In this case, the children elements are still arranged from left-right, but the arrangement of the flex items begins from last flex-item to first flex-item.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBNnXqbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0s33ip3cv6sj0cgzgqng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBNnXqbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0s33ip3cv6sj0cgzgqng.png" alt="Flexbox - flex-direction : row-reverse"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flex-direction : column-reverse - The flex-items are in column, but in a reverse order, similar to the row-reverse.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PanBswVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7lurqeap59a2or73stj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PanBswVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7lurqeap59a2or73stj.png" alt="Flexbox - flex-direction : column-reverse"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-justifycontent-flexstart-justifycontent-flexend-justifycontent-center-justifycontent-spacebetween-justifycontent-spacearound"&gt;
  &lt;/a&gt;
  3. justify-content : flex-start || justify-content : flex-end || justify-content : center || justify-content : space-between || justify-content : space-around
&lt;/h3&gt;

&lt;p&gt;If you are already familiar with the float attribute, justify-content is quite similar to the float attribute but with some added functionalities.&lt;/p&gt;

&lt;p&gt;justify-content : flex-start - this attribute aligns the flex items to the left axis within the parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZ7GO4aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wq16lk0fvqxe7u6bo112.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZ7GO4aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wq16lk0fvqxe7u6bo112.png" alt="Flexbox - justify-content : flex-start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;justify-content : flex-end - this aligns the flex items to the right axis within the parent element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhTGvMZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og17jzmi53n69j5o4y5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhTGvMZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og17jzmi53n69j5o4y5v.png" alt="Flexbox - justify-content : flex-end"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;justify-content : center - this aligns the flex items at the center of the parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UMmzXzPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdzydsfwfyat83y4u9qm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UMmzXzPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdzydsfwfyat83y4u9qm.png" alt="Flexbox - justify-content : center"&gt;&lt;/a&gt;&lt;br&gt;
justify-content : space-between - aligns the flex items such that equal amount of space is available BETWEEN them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOkAMhQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn21xff6hx8l8io29r22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOkAMhQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn21xff6hx8l8io29r22.png" alt="Flexbox - justify-content : space-between"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;justify-content : space-around - aligns the flex items such that equal amount of space is available AROUND them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9VLF_YX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzhzsap7yg5igs0yx19f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9VLF_YX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzhzsap7yg5igs0yx19f.png" alt="Flexbox - justify-content : space-around"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-alignitems-flexstart-alignitems-center-alignitems-flexend"&gt;
  &lt;/a&gt;
  4. align-items : flex-start || align-items : center || align-items : flex-end
&lt;/h3&gt;

&lt;p&gt;They are similar to justify-content, the difference is that justify-content align elements on the horizontal axis, while align items align elements vertically.&lt;/p&gt;

&lt;p&gt;align-items : flex-start&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4XAiwcMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtf2bbrbdsfcboiodpmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4XAiwcMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtf2bbrbdsfcboiodpmu.png" alt="Flexbox - align-items : flex-start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;align-items : center &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ABIbMFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pmradae6xva10t6b5jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ABIbMFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pmradae6xva10t6b5jf.png" alt="Flexbox - align-items : center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;align-items : flex-end&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4zU-SUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwy90zb2ec2ppzkdogdm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4zU-SUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwy90zb2ec2ppzkdogdm.png" alt="Flexbox - align-items : flex-end"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TLDR : The properties listed are limited to those needed to complete the projects listed in this tutorial. You can learn about other attributes &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;here&lt;/a&gt; or &lt;a href="https://www.w3schools.com/css/css3_flexbox.asp"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-build"&gt;
  &lt;/a&gt;
  Let's Build! 🚀
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/kyLYXonQYYfwYDIeZl/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/kyLYXonQYYfwYDIeZl/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From what you've learnt so far, try out this web layouts&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-a-simple-check-out-page"&gt;
  &lt;/a&gt;
  1. A simple check out page
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXhtqvtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3lduxcyslq9cc7v6ck0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXhtqvtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3lduxcyslq9cc7v6ck0.png" alt="A checkout page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check &lt;a href="https://codepen.io/arshadayvid/pen/JjWxZoM"&gt;Solution&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-a-contact-page"&gt;
  &lt;/a&gt;
  2. A contact page
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDBGkmWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okyeba5edum6nr58x3ev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDBGkmWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okyeba5edum6nr58x3ev.png" alt="A contact page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check &lt;a href="https://codepen.io/arshadayvid/pen/VwpgdeG"&gt;Solution&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-a-navigation-bar"&gt;
  &lt;/a&gt;
  3. A Navigation bar
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1b9CumC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjjxspij5i2jjsww7bax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1b9CumC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjjxspij5i2jjsww7bax.png" alt="Navigation Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check &lt;a href="https://codepen.io/arshadayvid/pen/qBrgKZY"&gt;Solution&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you enjoy this tutorial or have any questions? Feel free to drop your comments below and connect with me on &lt;a href="https://twitter.com/Arshadayvid"&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/kfvEdnjjcAoea0naii/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/kfvEdnjjcAoea0naii/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🎥 Kubernetes Services, Ingress, Jobs and CronJobs</title>
      <author>Peter Jausovec</author>
      <pubDate>Thu, 17 Jun 2021 03:37:22 +0000</pubDate>
      <link>https://dev.to/peterj/kubernetes-services-ingress-jobs-and-cronjobs-3p1c</link>
      <guid>https://dev.to/peterj/kubernetes-services-ingress-jobs-and-cronjobs-3p1c</guid>
      <description>&lt;p&gt;How can you access workloads inside the Kubernetes cluster? Should you use a NodePort or LoadBalancer service type? How about if you want to expose multiple applications through a single load balancer? In this session, you'll learn how to do all that. We'll deploy an Ambassador ingress controller and show how to expose multiple applications through the load balancer. Finally, we'll look into Jobs and CronJobs and show how to use them to run tasks on schedule. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ef6UJ5Pa3Dw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-covered-in-the-video"&gt;
  &lt;/a&gt;
  What's covered in the video?
&lt;/h3&gt;

&lt;p&gt;00:00 - Introduction&lt;br&gt;
01:00 - Agenda&lt;br&gt;
02:54 - Kubernetes Services&lt;br&gt;
10:24 - Talking to Pods using services (demo/lab)&lt;br&gt;
23:37 - Service types&lt;br&gt;
24:45 - ClusterIP service type&lt;br&gt;
25:56 - NodePort service type&lt;br&gt;
28:00 - LoadBalancer service type&lt;br&gt;
29:00 - ExternalName service type&lt;br&gt;
30:03 - Service types (demo/lab)&lt;br&gt;
40:40 - Ingress introduction (exposing multiple services)&lt;br&gt;
50:50 - Ingress (demo)&lt;br&gt;
54:33 - Deploying Ambassador ingress controller (demo)&lt;br&gt;
01:00:50 - Single service ingress (demo)&lt;br&gt;
01:02:59 - Path-based routing with Ingress (demo)&lt;br&gt;
01:08:13 - Using a hostname instead of an IP address (demo)&lt;br&gt;
01:15:31 - Name-based ingress(multiple hosts) (demo)&lt;br&gt;
01:19:00 - Kubernetes Jobs&lt;br&gt;
01:26:39 - Kubernetes CronJobs&lt;br&gt;
01:32:40 - Jobs and CronJobs (demo) &lt;/p&gt;

&lt;p&gt;You can find all the information on how to join the next live Kubernetes session at &lt;a href="//live.startkubernetes.com"&gt;live.startkubernetes.com&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>EC2 instance types</title>
      <author>Ajit Singh</author>
      <pubDate>Thu, 17 Jun 2021 03:15:24 +0000</pubDate>
      <link>https://dev.to/this-is-learning/ec2-instance-types-4okj</link>
      <guid>https://dev.to/this-is-learning/ec2-instance-types-4okj</guid>
      <description>&lt;p&gt;When we were creating EC2 instances we saw that there are many types of EC2 instances available from which we selected t2.micro .Now we will study some of them so that we can make an educated guess on what type of instance we need.&lt;/p&gt;

&lt;p&gt;EC2 has the following type of instances available: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;General Purpose&lt;/li&gt;
&lt;li&gt;Compute Optimized&lt;/li&gt;
&lt;li&gt;Memory Optimized&lt;/li&gt;
&lt;li&gt;Accelerated Computing &lt;/li&gt;
&lt;li&gt;Storage optimized&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us look each of these:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-purpose"&gt;
  &lt;/a&gt;
  General Purpose
&lt;/h2&gt;

&lt;p&gt;These instances provide a balance of compute power, memory network. These are general purpose and can be used for a variety of workloads these are good for using as web servers, you can use them as your virtual environments to build, deploy, test and so on. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;T series&lt;/li&gt;
&lt;li&gt;M series&lt;/li&gt;
&lt;li&gt;MACos 
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#compute-optimizedcpu-optimized"&gt;
  &lt;/a&gt;
  Compute Optimized(CPU optimized)
&lt;/h2&gt;

&lt;p&gt;Compute optimized instances are ideal for compute bound applications that need high performance computations for running correctly. These types of instances are used for scientific modelling, gaming servers, media trans coding machine learning etc. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C series
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#memory-optimizedram-optimized"&gt;
  &lt;/a&gt;
  Memory Optimized(RAM optimized)
&lt;/h2&gt;

&lt;p&gt;Memory optimized instances are used to deliver fast performance on large datasets in memory. These types of servers are best used to setup real time database analytics, caches etc. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;R series&lt;/li&gt;
&lt;li&gt;x series&lt;/li&gt;
&lt;li&gt;U series&lt;/li&gt;
&lt;li&gt;Z series
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#storage-optimizedrom-optimized"&gt;
  &lt;/a&gt;
  Storage Optimized(ROM optimized)
&lt;/h2&gt;

&lt;p&gt;These instances are used when we need to perform many read and writes simultaneously. these provide low latency to IO operations to applications. These are used for setting up databases, data warehousing etc. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I series&lt;/li&gt;
&lt;li&gt;D series&lt;/li&gt;
&lt;li&gt;H series
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#accelerated-computing"&gt;
  &lt;/a&gt;
  Accelerated Computing
&lt;/h2&gt;

&lt;p&gt;Accelerated computing instances use hardware accelerators, or co-processors, to perform functions, such as floating point number calculations, graphics processing, or data pattern matching, more efficiently than is possible in software running on CPUs. These are used for machine learning, speech recognition, seismic analysis etc. These instances contain the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P series&lt;/li&gt;
&lt;li&gt;G series&lt;/li&gt;
&lt;li&gt;F series
family of servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were about all the servers available on EC2 for details visit &lt;a href="https://aws.amazon.com/ec2/instance-types/"&gt;EC2&lt;/a&gt; documentation. Next we will study how we can save money if we know how long we will these EC2 instances for.&lt;/p&gt;

</description>
      <category>cloudskills</category>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>Day 1 of #100DaysOfCode!
</title>
      <author>Christian Falucho</author>
      <pubDate>Thu, 17 Jun 2021 02:55:50 +0000</pubDate>
      <link>https://dev.to/cfalucho/day-1-of-100daysofcode-4h3k</link>
      <guid>https://dev.to/cfalucho/day-1-of-100daysofcode-4h3k</guid>
      <description>&lt;h2&gt;Today's progress🤓&lt;/h2&gt;

&lt;p&gt;I worked on several &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/convert-celsius-to-fahrenheit"&gt;Basic Algorithm Scripting&lt;/a&gt;
problems. They were a bit challenging but it's okay because that is part of the process. I understand they will be difficult at first. So I just have to practice on them and find ways that helps me solve them.
&lt;/p&gt;

&lt;p&gt;What helped me was to visually see how the code would run. I wrote pseudocode and step by step wrote down the output. Instead of me just telling you, let me show you some examples of.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/repeat-a-string-repeat-a-string"&gt;&lt;em&gt;Repeat a String Repeat a String&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ApviYq6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e68mti4rskrrhzyk0yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ApviYq6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e68mti4rskrrhzyk0yr.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below, by writing pseudocode I was able to logically organize my thoughts and come up with a solution that works. When it comes to repeating anything. &lt;code&gt;For loops&lt;/code&gt; are the way to go as it controls flow statements and specifies iteration. &lt;/p&gt;

&lt;p&gt;Here's another example.&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays"&gt;&lt;em&gt;Return Largest Numbers in Arrays Passed&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yv2MHFGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mxa74r3km260o4gvcf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yv2MHFGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mxa74r3km260o4gvcf1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This algorithm problem dealt with a multi-dimensional array and I have to be honest, multi-anything can be difficult because then you're having to deal with a multitude of data and it can be easy to get lost in it but what worked for me was to visually see what was happening in my code. So running &lt;code&gt;console.log&lt;/code&gt; helped me visualize the output. When I did my &lt;code&gt;if-else&lt;/code&gt; I wrote down what would be happening in within the &lt;code&gt;for loop&lt;/code&gt;. This way I knew that the logic was correct.&lt;/p&gt;

&lt;p&gt;Lastly,&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/confirm-the-ending"&gt;&lt;em&gt;Confirm Ending&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svIj2Q3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqja07pkqq9zdibsjljc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svIj2Q3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqja07pkqq9zdibsjljc.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This problem has to do with using JavaScript's string methods and extracting a letter from the string that matches its target. I used the &lt;code&gt;slice()&lt;/code&gt; method to extract and return a new string. Within the method, I subtracted &lt;code&gt;target&lt;/code&gt; length with &lt;code&gt;str&lt;/code&gt; length to get end of the string. Then used an equality operator to check if the end of string matches the target.&lt;/p&gt;

&lt;h2&gt;What I learned&lt;/h2&gt;

&lt;p&gt;It is good to write pseudocode and organize your thoughts before doing any actual coding. This helps to structure how your algorithm will be. &lt;/p&gt;

&lt;p&gt;It also helps to visualize what is happening. Whether it's doing a &lt;code&gt;console.log&lt;/code&gt; or manually writing out what the output will be. &lt;/p&gt;

&lt;p&gt;When it comes to repeating something or doing iteration, &lt;code&gt;for loops&lt;/code&gt; are the way to go. They helped when dealing with arrays and especially with multi-arrays by checking and iterating through their indexes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Slice()&lt;/code&gt; method as the name implies, slices (or extracts) a section of the string and returns a new string. This helps to specify what sections of the string you want to remove and return the ones that are left without modifying the original string.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 ways to make money as a programmer in 2021</title>
      <author>ABDERRAHIM TIJANI</author>
      <pubDate>Thu, 17 Jun 2021 01:36:24 +0000</pubDate>
      <link>https://dev.to/abderrahimtija1/5-ways-to-make-money-as-a-programmer-in-2021-pnl</link>
      <guid>https://dev.to/abderrahimtija1/5-ways-to-make-money-as-a-programmer-in-2021-pnl</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Yr5DVtfO1kI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
