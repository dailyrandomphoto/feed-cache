<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The very simple mistake that is in your CSS</title>
      <author>Stas Melnikov</author>
      <pubDate>Wed, 28 Jul 2021 20:57:54 +0000</pubDate>
      <link>https://dev.to/melnik909/the-very-simple-mistake-is-in-your-css-10e8</link>
      <guid>https://dev.to/melnik909/the-very-simple-mistake-is-in-your-css-10e8</guid>
      <description>&lt;p&gt;If you add display: block to elements with position: absolute or position: fixed, please, you shouldn't do that. Browsers always use block values by default. &lt;/p&gt;

&lt;p&gt;Besides, the inline or inline-block value will be changed to block, inline-flex -&amp;gt; flex, inline-grid -&amp;gt; grid, and inline-table -&amp;gt; table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="c"&gt;/* or
  position: fixed;
  */&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="c"&gt;/* or
  position: fixed;
  */&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
ü•á If you want to be first who take my tips get &lt;a href="https://www.patreon.com/melnik909"&gt;my paid subscription on Patreon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üñê Also I make written CSS/HTML code review so that you don't make common mistakes. If you're interested in that chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt; or dev.to direct.&lt;/p&gt;

&lt;p&gt;üéÅ Make a gift yourself or friends who like frontends: üëï &lt;a href="https://www.redbubble.com/i/t-shirt/Front-End-developer-by-melnik909/79109127.FPE53"&gt;T-Shirt&lt;/a&gt;, üéÅ &lt;a href="https://www.redbubble.com/i/sticker/Front-End-developer-by-melnik909/79109127.EJUG5"&gt;Stickers&lt;/a&gt;, ü•Ω &lt;a href="https://www.redbubble.com/i/mask/Front-End-developer-by-melnik909/79109127.6BSL1"&gt;Masks&lt;/a&gt;, üß© &lt;a href="https://www.redbubble.com/i/magnet/Front-End-developer-by-melnik909/79109127.TBCTK"&gt;Magnets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>Automated Dapps Scrapping with Selenium and Metamask</title>
      <author>Leonardo Teixeira Menezes</author>
      <pubDate>Wed, 28 Jul 2021 20:41:15 +0000</pubDate>
      <link>https://dev.to/ltmenezes/automated-dapps-scrapping-with-selenium-and-metamask-2ae9</link>
      <guid>https://dev.to/ltmenezes/automated-dapps-scrapping-with-selenium-and-metamask-2ae9</guid>
      <description>&lt;p&gt;One of the newest trends in web development is the rise of decentralized applications, also known as Dapps. These applications are built leveraging decentralized networks in order to provide trustless interactions between users, using predefined interactions built as smart contracts (if you want to know more about dapps &lt;a href="https://ethereum.org/en/dapps/"&gt;head over here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To access Dapps users need to use a crypto wallet to connect with, this creates a new challenge for developers who want to scrap and/or test Dapps using tools like &lt;a href="https://github.com/SeleniumHQ/selenium"&gt;Selenium&lt;/a&gt;. In this post we will cover the basics on how to solve this using Python and Chromium, however, the principles described here can be applied using any programming language and web browser automation tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lNfnNzyssTmR2xOwZd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lNfnNzyssTmR2xOwZd/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most current Dapps depend on a crypto wallet being present in the user browser as an extension, injecting in the web page information about the user wallet and the network it's connected with. One of the most popular browser crypto wallet is &lt;a href="https://metamask.io/"&gt;Metamask&lt;/a&gt;. In order to successfully scrape a Dapp we need to interact not only with the target website but also with the Metamask extension simultaneously, to approve the app connection with our wallet and other possible transactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compressing-the-extension"&gt;
  &lt;/a&gt;
  Compressing the extension
&lt;/h2&gt;

&lt;p&gt;In order to load the extension on our automated browser we will first need to compress the Metamask extension to a .crx file, here are the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Metamask on your regular chrome&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;chrome://extensions/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click 'Pack extension' and enter the local path to the Metamask extension
This will generate a &lt;code&gt;.crx&lt;/code&gt; file that you can use to load as an extension on Chromium. Save the name of the folder where the extension is installed, this will be the 'Extension ID' that we will use later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#loading-the-extension"&gt;
  &lt;/a&gt;
  Loading the extension
&lt;/h2&gt;

&lt;p&gt;To load Chromium with Metamask installed run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;EXTENSION_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'ENTER THE PATH TO YOUR CRX FILE'&lt;/span&gt;
&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChromeOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXTENSION_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#interacting-with-metamask"&gt;
  &lt;/a&gt;
  Interacting with Metamask
&lt;/h2&gt;

&lt;p&gt;In order to interact with the dapp and Metamask simultaneously, we will need to have multiple tabs in our Chromium, one for the target Dapp and another one for Metamask itself.&lt;/p&gt;

&lt;p&gt;When Chromium starts it will have a welcome screen for the Metamask extension, which will prompt you to setup your wallet, this is an example code to import an existing wallet (You may need to update some steps depending on your Metamask version):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'//button[text()="Get Started"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'//button[text()="Import wallet"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'//button[text()="No Thanks"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# After this you will need to enter you wallet details
&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'//input'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SECRET_RECOVERY_PHRASE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NEW_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NEW_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_css_selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.first-time-flow__terms'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'//button[text()="Import"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'//button[text()="All Done"]'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this Metamask will be successfully set up in Chromium, ready to connect to a Dapp.&lt;br&gt;
When you need to interact with Metamask again you will need to use it in a different tab, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;EXTENSION_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'ENTER HERE THE EXTENSION ID THAT YOU SAVED EARLIER'&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"window.open('');"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch_to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window_handles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'chrome-extension://{}/popup.html'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXTENSION_ID&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this Metamask will be opened in this new tab, ready to be interacted with.&lt;/p&gt;




&lt;p&gt;That's it, now you're ready to start automating interactions with Dapps.&lt;br&gt;
Follow me for more articles like this and if you have any questions feel free to leave them in the comments below.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>python</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>HEY-style Pop-ups Using Hotwire</title>
      <author>Jacob Daddario</author>
      <pubDate>Wed, 28 Jul 2021 20:35:38 +0000</pubDate>
      <link>https://dev.to/jacobdaddario/hey-style-pop-ups-using-turbo-14p7</link>
      <guid>https://dev.to/jacobdaddario/hey-style-pop-ups-using-turbo-14p7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Disclaimer: It should be noted that the provided HTML fails to implement  the necessary ARIA attributes required for accessibility. These attributes will need to be added to any implementation of this markup in order to be accessible to screen readers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyone who's used Basecamp's email service, &lt;a href="//hey.com"&gt;Hey.com&lt;/a&gt;, has probably noticed the technique they use for lazy-loading their menus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CpN2Hv0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phj5wr8ik5uik2ky6u6q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpN2Hv0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phj5wr8ik5uik2ky6u6q.gif" alt="hey-menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basecamp uses &lt;code&gt;details&lt;/code&gt; and &lt;code&gt;summary&lt;/code&gt; tags in order to achieve a pop-up behavior with native HTML. They use this in conjunction with a fancy Stimulus controller which seems to add a &lt;code&gt;src&lt;/code&gt; attribute to the revealed turbo-frame. This loads in the menu asynchronously without having to manually manage AJAX requests.&lt;/p&gt;

&lt;p&gt;Thanks to some additions to Turbo during its development, a slightly different approach can be used to achieve a similar result while omitting the complex &lt;code&gt;popup-menu&lt;/code&gt; controller.&lt;/p&gt;

&lt;p&gt;Although this solution omits the use of Basecamp's &lt;code&gt;popup-menu&lt;/code&gt; controller, it still uses the two-part punch of StimulusJS and Turbo.&lt;/p&gt;

&lt;p&gt;The first important element of this setup is the use of a &lt;code&gt;toggle&lt;/code&gt; controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// Unblurring focused target if there is one&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggledTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggleClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's worth mentioning that much of this toggle code was lifted from &lt;a href="https://boringrails.com/articles/better-stimulus-controllers/"&gt;Matt Swanson's excellent article on composing behaviors using StimulusJS&lt;/a&gt;. I highly recommend giving it a read if you haven't already.&lt;/p&gt;

&lt;p&gt;This controller allows for a style to be toggled on elements when a given action occurs. In this case, it's used to toggle the visibility of our pop-up menu.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt; &lt;span class="na"&gt;data-toggle-toggle-class=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;button_to&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;action: &lt;/span&gt;&lt;span class="s2"&gt;"click-&amp;gt;toggle#toggle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    Invite Member
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-toggle-target=&lt;/span&gt;&lt;span class="s"&gt;"toggled"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden absolute top-10 right-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"your-popup"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Loading...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;toggle&lt;/code&gt; controller is added to the HTML markup of a &lt;code&gt;div&lt;/code&gt; containing a &lt;code&gt;turbo-frame&lt;/code&gt;. When the button is clicked, the toggle action of the controller is triggered in order to make the &lt;code&gt;div&lt;/code&gt; containing the &lt;code&gt;turbo-frame&lt;/code&gt; visible.&lt;/p&gt;

&lt;p&gt;This is where Turbo comes into play and a feature added to Turbo during its time in beta, lazy-loading based on visibility, can be used. First a controller action should be added that returns a &lt;code&gt;turbo-frame&lt;/code&gt; matching the id of the &lt;code&gt;turbo-frame&lt;/code&gt; that's in the HTML loaded with the toggle controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResourceController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="vi"&gt;@resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="c1"&gt;# resources/new.html.erb &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"your-popup"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="c1"&gt;# Your menu/form/content goes here &lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to this, we will have to add the special &lt;code&gt;loading="lazy"&lt;/code&gt; attribute as well as a &lt;code&gt;src&lt;/code&gt; attribute to the first &lt;code&gt;turbo-frame&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt; &lt;span class="na"&gt;data-toggle-toggle-class=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;button_to&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;action: &lt;/span&gt;&lt;span class="s2"&gt;"click-&amp;gt;toggle#toggle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    Invite Member
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-toggle-target=&lt;/span&gt;&lt;span class="s"&gt;"toggled"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden absolute top-10 right-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"your-popup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;src: &lt;/span&gt;&lt;span class="n"&gt;new_resource_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;loading: :lazy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Loading...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This ensures that when the pop-up is first toggled open, it will load the &lt;code&gt;turbo-frame&lt;/code&gt; rendered by the &lt;code&gt;new&lt;/code&gt; action. Every subsequent toggle will just reveal the already loaded pop-up. Without the use of the &lt;code&gt;loading="lazy"&lt;/code&gt; attribute, the pop-up would be loaded after the initial page load regardless of its visibility. In that way, the &lt;code&gt;loading="lazy"&lt;/code&gt; attribute provides the secret sauce that allows use to circumvent the use of the more-complex controller used by Basecamp in Hey.&lt;/p&gt;

&lt;p&gt;Once fully styled, here's how the implementation could look for a form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJR9zRPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2plgeek2p8z3603hqy6v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJR9zRPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2plgeek2p8z3603hqy6v.gif" alt="hey-style-menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know if you found this article helpful, and leave any suggestions for improvement below in the comments!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>hotwire</category>
      <category>stimulus</category>
      <category>turbo</category>
    </item>
    <item>
      <title>Welcome Thread - v135</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 28 Jul 2021 19:43:56 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v135-3n1b</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v135-3n1b</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/gVnqn7XhCUKYg8A4yI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gVnqn7XhCUKYg8A4yI/giphy.gif" alt='Angela from the office chewing on straw and saying "hay"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Primeiros passos com Machine Learning</title>
      <author>Leonardo Vieira Neto üáßüá∑#foraBolsonaro</author>
      <pubDate>Wed, 28 Jul 2021 18:22:00 +0000</pubDate>
      <link>https://dev.to/netovieiraleo/primeiros-passos-com-machine-learning-22i8</link>
      <guid>https://dev.to/netovieiraleo/primeiros-passos-com-machine-learning-22i8</guid>
      <description>&lt;p&gt;Criei o reposit√≥rio em meu gitHub, aonde irei salvar os arquivos que utilizaremos para implemebntar nossos exemplos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/LeonardoVieiraNeto/PrimeirosPassosMachineLearning"&gt;https://github.com/LeonardoVieiraNeto/PrimeirosPassosMachineLearning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeFeCrzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p9av02k6v0lwuwkfv50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeFeCrzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p9av02k6v0lwuwkfv50.png" alt="reposit√≥rio criado em meu GitHub para armazenar os arquivos que iremos produzir"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para implementar nossos exemplos, iremos usar uma ferramenta 0800 e f√°cil, o Google CoLab&lt;br&gt;
&lt;a href="https://research.google.com/colaboratory/"&gt;https://research.google.com/colaboratory/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Irei salvar os arquivos .ipynb do GoLab no reposit√≥rio criado em meu GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGFySL4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fma8krdmkvbqrsu7i4pz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGFySL4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fma8krdmkvbqrsu7i4pz.png" alt="Salvar c√≥pia do arquivo no GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para come√ßar, vamos pensar no senguinte cen√°rio:&lt;/p&gt;

&lt;p&gt;Moro fora da cidade grande, estou no inteioro de MG, a vida fora da cidade √© diferente. Os custos das coisas do dia a dia tamb√©m s√£o diferentes. Os pre√ßos aqui com certeza s√£o diferentes dos da cidade! Preciso come√ßar a prestar mais aten√ß√£o √†s finan√ßas se e me sair bem aqui. Voc√™ pode ajudar a descobrir quanto vai custar a minha compra ?&lt;/p&gt;

&lt;p&gt;Tenho algumas listas que irei usar como refer√™ncia. Nelas, tenho o itens que costumo comprar, com o pre√ßo que eu pagava em BH e o valor que pago aqui, em Abaet√©!&lt;/p&gt;

&lt;p&gt;Criei uma lista, com 17 itens, seu valor em BH e o valor aqui em Abaet√©.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BlCXnan_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qih8draobl2wlxlkzdw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BlCXnan_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qih8draobl2wlxlkzdw8.png" alt="C√≥digo implementado em Python, para mostrar o uso de listas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shopping_list - Guarda os itens da minha compra.&lt;br&gt;
BH_price - Guarda os valores pagos nos produtos em BH.&lt;br&gt;
abaete_price - Guarda os valores pagos nos produtos aqui em Abaet√©.&lt;/p&gt;

&lt;p&gt;total_produtos_em_abaete - Armazena a soma dos produtos em BH.&lt;br&gt;
t_abaete&lt;/p&gt;

&lt;p&gt;Com esses dados, conseguimos colocar um primeiro simples exemplo. Calculei o percentual de diferen√ßa, entre os pre√ßos de BH e os pre√ßos aqui de Abaet√©.&lt;/p&gt;

&lt;p&gt;Nos pr√≥ximos dias, vou continuar postando artigos, incrementando os exemplos, aumentando o n√≠vel de dificuldade.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>How I passed the AWS Certified Cloud Practitioner Exam?</title>
      <author>Aditya Gaur</author>
      <pubDate>Wed, 28 Jul 2021 17:48:00 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-i-passed-the-aws-certified-cloud-practitioner-exam-3j71</link>
      <guid>https://dev.to/aws-builders/how-i-passed-the-aws-certified-cloud-practitioner-exam-3j71</guid>
      <description>&lt;p&gt;&lt;em&gt;I recently passed the AWS Cloud Practitioner Exam and felt the need to share my experience with you all. Today I‚Äôm going to tell you how to prepare for this exam and get certified in just one week! Trust me it really feels amazing to be called AWS Certified, and you too can gain this title easily.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why this exam?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Certified Cloud Practitioner is a foundational-level AWS Certification and is for those people who want to kickstart their career in cloud computing, especially for beginners. And it‚Äôs the cheapest AWS exam available that can give you the tag of ‚ÄòAWS Certified.‚Äô If you are looking to become a solutions architect, then you can begin your pathway from this exam. Although it is not mandatory to pass this exam to appear for any other AWS exam, but there are some reasons I‚Äôll tell you that why should you give this exam first but at the end of this blog. It doesn‚Äôt matter if you are technical or non-technical, if you have little interest in the cloud or you want to build your career in it then passing this exam can be a great deal for you!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How should you start preparing for it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, become familiar with the exam, it‚Äôs architecture, format, types of questions, syllabus and all those kinds of things. Then plan accordingly and start studying. You can find the exam‚Äôs official study guide and sample questions by clicking the link given below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/certification/certified-cloud-practitioner/"&gt;https://aws.amazon.com/certification/certified-cloud-practitioner/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Actual Preparation!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The course of this exam is designed in a way to make you aware of almost all the service offerings of AWS and it‚Äôs just not limited to compute, network, storage, and database services. You‚Äôd have to be aware of the other offerings also like Machine Learning, Analytics, Developer Tools, etc. So, it‚Äôs preferable to come up with a list of all the services that fall under the scope of this exam. Do it on your own, it‚Äôll help you to understand the AWS Global Infrastructure. Integrate this list with your schedule, give time to each and every service. For a better learning experience, you can create an AWS account as well. Go ahead and leverage the AWS Free Tier of 12 months. Start experimenting on your own. Although there are limits on the services and usage but for the sake of passing this exam, the free tier is more than sufficient.&lt;/p&gt;

&lt;p&gt;This was the manual guide to prepare for the exam. There are plenty of other resources and already designed courses available on the web. You can purchase one from Cloud Academy, A Cloud Guru, or Linux Academy. These websites are preferred when you are preparing for a higher level of certification. For the Cloud Practitioner exam, you can find many free resources. Let me list them all one by one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Free courses available on aws.training&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This website is not only for registering for exams, besides that it provides free learning material that can be very useful and can be found under the tab ‚ÄòLearning Library‚Äô.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- AWS Virtual Summits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Due to the outbreak of COVID-19, all the AWS summits are being held online and that too free of cost. These virtual summits are very interactive, you can attend webinars and sessions, and sometimes quizzes too! I recently participated in the AWS Hong Kong Virtual Summit and won an AWS Tote Bag as a reward for participating in some of the events.&lt;/p&gt;

&lt;p&gt;Click the link given below to see the upcoming AWS Events.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/events/"&gt;https://aws.amazon.com/events/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- AWS Whitepapers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS keeps on publishing whitepapers of its services, best practices, and usage. These can be very insightful and can help you a lot in your preparation. All these whitepapers can be found online on the AWS official website free of cost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- AWS Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just like the wallpapers, there‚Äôs official documentation associated with each and every service of the AWS Cloud. You can refer to these documentations if you want to have detailed knowledge of the services.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- AWS FAQs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last but not the least, the Frequently Asked Questions! These questions can be very very useful if you are preparing for any associate-level certification or above. Keep reading these FAQs along with your preparation to have a vivid vision over the conflicting topics. FAQs can help you a lot in answering Scenario-based questions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Practice Exams&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS offers Practice Exams at a cost of $20. You can appear for these exams for self-evaluation. There are many other sites that too offer practice questions. Use these questions in an ethical manner as you‚Äôll find a detailed explanation of each and every question. If you‚Äôll run after free dumps, then it‚Äôll lead you to nowhere. You can‚Äôt trust these dumps and you never know whether their answers are correct or not. Refrain yourself from such click baits saying ‚ÄòFree dumps available‚Äô, most of them are just meant for phishing. I‚Äôd suggest appearing for legit practice exams 2‚Äì3 days before your actual exam so that you could self-evaluate and hence improve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- ‚ÄòD-Day‚Äô ‚Äî Facing the Actual Exam!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can book your exam through aws.training by clicking the Certification Tab. The cost is $100 and it can be given through Pearson VUE. Pearson VUE enables you to write these exams under a proctored environment from your home using your own laptops. Just when you start feeling you are confident, book your exam. Don‚Äôt delay it further and start revising. Try to do practical on AWS Management Console on your own and start reading the FAQs more. It will only make your concepts clearer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¬∑ Make a list of services.&lt;br&gt;
¬∑ Focus on the keywords and use cases,&lt;br&gt;
¬∑ Make sure international payments are enabled for your account while making the payment.&lt;br&gt;
¬∑ Don‚Äôt ignore topics like Billing and Monitoring. Each domain has its own weightage!&lt;br&gt;
¬∑ Don‚Äôt spend too much time in the preparation. Schedule it and just do it!&lt;/p&gt;

&lt;p&gt;About the thing that I said, in the beginning, why should you appear for this exam. I giving you the hint and you have to find it on your own. The hint is associated with the ‚Äòbenefits‚Äô of this passing this exam.&lt;/p&gt;

&lt;p&gt;So, All the best! Start preparing and feel free to contact me if you face difficulty during the preparation or any other part. I‚Äôd be glad to help you out!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Are you learning JavaScript? - Here's the only guide you'll ever need</title>
      <author>Kingsley Ubah</author>
      <pubDate>Wed, 28 Jul 2021 17:17:29 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/are-you-learning-javascript-here-s-the-only-guide-you-ll-ever-need-23n8</link>
      <guid>https://dev.to/ubahthebuilder/are-you-learning-javascript-here-s-the-only-guide-you-ll-ever-need-23n8</guid>
      <description>&lt;p&gt;Getting started with JavaScript can be both fun and overwhelming at the same time. Fun because it is not just one of the most popular programming languages in existence but also because the basics are quite easy to get started with as a beginner.&lt;/p&gt;

&lt;p&gt;It can also be overwhelming because there is just a lot to learn.  In one of my  &lt;a href="https://ubahthebuilder.tech/complete-web-development-roadmap-for-newbies"&gt;past articles&lt;/a&gt; , I outlined the steps anyone can take to get started with web development.&lt;/p&gt;

&lt;p&gt;In this post, I am going to highlight the various concepts and topics you will need to learn to become good at writing JavaScript programs.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  VARIABLES
&lt;/h3&gt;

&lt;p&gt;All programming languages work with data. Variables are containers for these data. A variable can hold a string data, a number or any of the various other data types. These keywords used to define these variables in JavaScript are &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#asynchronicity"&gt;
  &lt;/a&gt;
  ASYNCHRONICITY
&lt;/h3&gt;

&lt;p&gt;Normally, computer code runs immediately, one after the other. However, Asychronicity is a code execution situation in which a piece of code or function is paused midway for something else to occur first. At that point, the next instruction starts to run instead. This technique is implemented in JavaScript by using any of the following constructs in your code:&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Callbacks&lt;/li&gt;
&lt;li&gt;Async functions&lt;/li&gt;
&lt;li&gt;await directive&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Generators&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scopes"&gt;
  &lt;/a&gt;
  SCOPES
&lt;/h3&gt;

&lt;p&gt;Scopes simply entails the rules and laws with determines the accessibility of variables to a function, or part of a code.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global scope&lt;/li&gt;
&lt;li&gt;Function scope&lt;/li&gt;
&lt;li&gt;Lexical scope&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#document-object-model"&gt;
  &lt;/a&gt;
  DOCUMENT OBJECT MODEL
&lt;/h3&gt;

&lt;p&gt;Document Object Model is the browsers representation of a web page. DOM is an interface provided by the browser which allows you access and manipulate your HTML elements from your JavaScript.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;document&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;DOM tree&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;document&lt;/code&gt;  (DOM) properties&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;document&lt;/code&gt; (DOM) methods&lt;/li&gt;
&lt;li&gt;DOM traversal&lt;/li&gt;
&lt;li&gt;Virtual DOM (VDOM)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#oop"&gt;
  &lt;/a&gt;
  OOP
&lt;/h3&gt;

&lt;p&gt;Object Oriented Programming (OOP) is a software programming architecture modeled after real life objects with properties and methods (behaviors or actions).  &lt;code&gt;Objects&lt;/code&gt;  are constructed out of a &lt;code&gt;class&lt;/code&gt; design.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;li&gt;Prototypes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  ARRAYS
&lt;/h3&gt;

&lt;p&gt;Arrays are simple data collections. Items stored in an array are indexed. Hence, an array can remember what position an item is positioned at when iterating through it with a loop.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array methods&lt;/li&gt;
&lt;li&gt;Array properties&lt;/li&gt;
&lt;li&gt;Array Destructuring&lt;/li&gt;
&lt;li&gt;Array index looping&lt;/li&gt;
&lt;li&gt;Array Iterators (static methods)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-operators"&gt;
  &lt;/a&gt;
  DATA OPERATORS
&lt;/h3&gt;

&lt;p&gt;Data operators allow you operation on data. You can do operations like addition, substaction, string concatenation, type checking and so on.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Addition and Substraction&lt;/li&gt;
&lt;li&gt;Multiplication&lt;/li&gt;
&lt;li&gt;Assignment&lt;/li&gt;
&lt;li&gt;Strict equals and Loose equals&lt;/li&gt;
&lt;li&gt;Concatenation&lt;/li&gt;
&lt;li&gt;Increment and Decrement&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;typeof()&lt;/code&gt;, type checking&lt;/li&gt;
&lt;li&gt;Less than, &lt;/li&gt;
&lt;li&gt;Greater than&lt;/li&gt;
&lt;li&gt;logical operators ( &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; )&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  OBJECTS
&lt;/h3&gt;

&lt;p&gt;Objects are data collections which stores data or properties in key/value pairs. Objects in JavaScript can be created either via the &lt;code&gt;new&lt;/code&gt; constructor call or with object literal method.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Properties&lt;/li&gt;
&lt;li&gt;Methods&lt;/li&gt;
&lt;li&gt;getters and setters&lt;/li&gt;
&lt;li&gt;static properties and methods&lt;/li&gt;
&lt;li&gt;Object looping&lt;/li&gt;
&lt;li&gt;Object destructuring&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#errors"&gt;
  &lt;/a&gt;
  ERRORS
&lt;/h3&gt;

&lt;p&gt;Errors are statements which stops or inhibits the program from running properly. There are three main types of errors that can occur while compiling a JavaScript program, they include syntax errors, runtime errors, and logical errors.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;try&lt;/li&gt;
&lt;li&gt;catch&lt;/li&gt;
&lt;li&gt;throw&lt;/li&gt;
&lt;li&gt;finally&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;console properties and methods&lt;/li&gt;
&lt;li&gt;RangeError. &lt;/li&gt;
&lt;li&gt;ReferenceError&lt;/li&gt;
&lt;li&gt;SyntaxError&lt;/li&gt;
&lt;li&gt;TypeError&lt;/li&gt;
&lt;li&gt;URIError&lt;/li&gt;
&lt;li&gt;EvalError&lt;/li&gt;
&lt;li&gt;InternalError&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  EVENTS
&lt;/h3&gt;

&lt;p&gt;Events occurs when a user does something o There are many kinds of events capable of occurring in the browser. Some of them are click, mouseover, scroll, right-click and more.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User (DOM) events&lt;/li&gt;
&lt;li&gt;Event listener methods&lt;/li&gt;
&lt;li&gt;Event capturing and bubbling&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;event&lt;/code&gt; object and properties&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conditionals"&gt;
  &lt;/a&gt;
  CONDITIONALS
&lt;/h3&gt;

&lt;p&gt;When writing your JavaScript program, you will definitely need to create conditional statements. These are just if and elses. For a simple &lt;code&gt;if‚Ä¶else&lt;/code&gt; statement, when a condition is true, the code in the if block runs. Otherwise, the code in the &lt;code&gt;else&lt;/code&gt; block runs.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if‚Ä¶else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if‚Ä¶else if‚Ä¶else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ternary operators&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  MODULES
&lt;/h3&gt;

&lt;p&gt;A module is a function or group of similar functions. They are grouped together within a file and contain the code to execute a specific task when called into a larger application.&lt;/p&gt;

&lt;p&gt;Learn&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;default&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;file organization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  LOOPS
&lt;/h3&gt;

&lt;p&gt;Loops are programming constructs which allow you loop or iterate through an iterable data collection such as an array. You can then specify a consistent action which would be performed on each iteration until maybe a condition is met.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do while&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for..in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for‚Ä¶of&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;switch&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#map-and-set-collections"&gt;
  &lt;/a&gt;
  MAP and SET Collections
&lt;/h3&gt;

&lt;p&gt;Map and Set are new data collections part of the ES6 Spec.  Map is similar to JavaScript objects in that it accepts key/value properties. However, Map allows for  keys of different data types and not just strings. Set only accepts one instance of a value, and ignores duplicates.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  STRINGS
&lt;/h3&gt;

&lt;p&gt;Strings are inbuilt data types in JavaScript whose values starts with the comma notation &lt;code&gt;‚Äò‚Äô&lt;/code&gt; or double commas &lt;code&gt;‚Äú ‚Äú&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String properties&lt;/li&gt;
&lt;li&gt;String methods&lt;/li&gt;
&lt;li&gt;Template literals&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  FUNCTIONS
&lt;/h3&gt;

&lt;p&gt;A Function in JavaScript is an object containing blocks of code and which can be called at any part of a program to perform a particular task. &lt;/p&gt;

&lt;p&gt;For example, a &lt;code&gt;SayHi()&lt;/code&gt; functions is expected to display ‚ÄòHi‚Äù when invoked. A &lt;code&gt;getUsername()&lt;/code&gt; function is expected to retrieve a username from the DOM or a database. The in-built &lt;code&gt;setTimeout()&lt;/code&gt; function actually sets a timeout before doing something else. &lt;/p&gt;

&lt;p&gt;Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Normal functions&lt;/li&gt;
&lt;li&gt;Async functions&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Callback functions&lt;/li&gt;
&lt;li&gt;Generator functions&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;At a basic level, understanding these JavaScript concepts will help significantly improve your coding skills. &lt;/p&gt;

&lt;p&gt;Recently, I created an eBook in why I explained most of these JavaScript concepts with short notes and visual illustrations. Check it out  &lt;a href="https://gum.co/js-50"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some other JavaScript articles you might like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://ubahthebuilder.tech/javascript-this-keyword-four-rules-to-know"&gt;Understanding the JavaScript 'this' keyword with four binding rules&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://ubahthebuilder.tech/20-free-ebooks-to-learn-javascript-in-depth"&gt;20 Free eBooks to learn JavaScript in-depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://ubahthebuilder.tech/how-to-use-es6-array-methods-to-loop-over-an-array-collection"&gt;How to use ES6 Array iterator methods &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://ubahthebuilder.tech/how-to-use-es6-array-methods-to-loop-over-an-array-collection"&gt;Introduction To Asynchronous JavaScript &lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading. Follow this blog to stay updated with my latest posts. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Stone-Paper-Scissor-Game</title>
      <author>Jai Irkal</author>
      <pubDate>Wed, 28 Jul 2021 17:17:12 +0000</pubDate>
      <link>https://dev.to/irkal_jai/stone-paper-scissor-game-546k</link>
      <guid>https://dev.to/irkal_jai/stone-paper-scissor-game-546k</guid>
      <description>&lt;p&gt;Hello coders and developers! &lt;br&gt;
This is the first game I have made using Python. I have not used any library like PyGame. I have developed it using the &lt;em&gt;random module&lt;/em&gt; in the &lt;strong&gt;Python Standard Library&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#python-standard-library"&gt;
  &lt;/a&gt;
  Python Standard Library
&lt;/h2&gt;

&lt;p&gt;Python Standard Library is a set of modules which are included with every Python installation.&lt;br&gt;
One of them used in this game is random module.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#random-module"&gt;
  &lt;/a&gt;
  Random Module
&lt;/h2&gt;

&lt;p&gt;Important functions in the random module are &lt;em&gt;randint()&lt;/em&gt; and &lt;em&gt;choice()&lt;/em&gt;.&lt;br&gt;
In this game I have used the &lt;em&gt;choice()&lt;/em&gt; function.&lt;br&gt;
&lt;strong&gt;1. randint()&lt;/strong&gt; ---&amp;gt; This function returns any random integer within the given arguments.&lt;br&gt;
&lt;strong&gt;2. choice()&lt;/strong&gt; ---&amp;gt; This function returns a random value from a tuple or a list.&lt;/p&gt;

&lt;p&gt;Talking about my game, it takes a user input for stone paper or scissors and the computer chooses a random value i.e. stone paper or scissors. You know the rest rules I think üòÇ&lt;br&gt;
So this was the simple logic I used.&lt;/p&gt;

&lt;p&gt;The link for all the files is here. I have also converted the game into a module so that it looks clean üòÅ&lt;/p&gt;

&lt;p&gt;Happy Coding! üë®‚Äçüíªüë©‚Äçüíª&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/JaiIrkal"&gt;
        JaiIrkal
      &lt;/a&gt; / &lt;a href="https://github.com/JaiIrkal/Stone-Paper-Scissors-Game"&gt;
        Stone-Paper-Scissors-Game
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Stone paper scissors game using Python
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Stone-Paper-Scissors-Game&lt;/h1&gt;
&lt;p&gt;Stone paper scissors game using Python&lt;/p&gt;
&lt;p&gt;A simple stone paper scissors game like we used to play when we all were kids.
Simple Python is being used using the random module from Standard Python Library.&lt;/p&gt;
&lt;p&gt;I have also converted the game into module for simple use...&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/JaiIrkal/Stone-Paper-Scissors-Game"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>gamedev</category>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>PHP __construct (üßô‚Äç‚ôÇÔ∏èLesson 1: PHP Magic Methods)
</title>
      <author>Clean Code Studio</author>
      <pubDate>Wed, 28 Jul 2021 17:04:55 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/php-construct-lesson-1-php-magic-methods-5d41</link>
      <guid>https://dev.to/cleancodestudio/php-construct-lesson-1-php-magic-methods-5d41</guid>
      <description>&lt;p&gt;Today, we'll quickly cover the most popular PHP magic method - &lt;code&gt;__construct&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4MLA6ssPHGA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#construct-magic-method"&gt;
  &lt;/a&gt;
  __construct magic method
&lt;/h2&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;PHP allows developers to declare constructor methods for classes. Classes which have a constructor method call this method on each newly-created object, so it is suitable for any initialization that the object may need before it is used.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#using-the-php-construct-magic-method"&gt;
  &lt;/a&gt;
  Using the PHP __construct magic method
&lt;/h2&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$timmy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Timmy'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$timmy&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// "Timmy"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/series/php-magic-methods/episodes/1"&gt;__construct PHP Magic Method&lt;/a&gt;&lt;/p&gt;





&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;Did you know I have a newsletter? üì¨&lt;/p&gt;

&lt;p&gt;If you want to get notified when I publish new blog posts or make major project announcements, head over to &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancodestudio.paperform.co/"&gt;https://cleancodestudio.paperform.co/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>code</category>
      <category>programming</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Pure CSS Olympic Rings</title>
      <author>Jorge Baumann</author>
      <pubDate>Wed, 28 Jul 2021 16:57:15 +0000</pubDate>
      <link>https://dev.to/baumannzone/pure-css-olympic-rings-plg</link>
      <guid>https://dev.to/baumannzone/pure-css-olympic-rings-plg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-little-tribute-to-the-olympics"&gt;
  &lt;/a&gt;
  My little tribute to the Olympics.
&lt;/h2&gt;

&lt;p&gt;In my last &lt;a href="//twitch.tv/baumannzone"&gt;streaming&lt;/a&gt; I created the &lt;strong&gt;Olympics logo&lt;/strong&gt; in pure HTML and CSS.&lt;/p&gt;

&lt;p&gt;It seems to be easy, after all they are only circles, but you will need to think twice and create your mental diagram to make each ring fit. As you can see, rings are intertwined.&lt;/p&gt;

&lt;p&gt;It was a funny stream. I liked it a lot. Specially when I wasn't able to center the rings &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and 4 (supposedly) senior devs were trying to help me.&lt;br&gt;
That's the main reason by which I love doing live-coding. We are a team, we learn together.&lt;/p&gt;

&lt;p&gt;Actually, it was me alone, doing some live coding alone through &lt;a href="https://codepen.io/baumannzone"&gt;codepen&lt;/a&gt;, but getting help from the community in the chat (as usual). &lt;em&gt;Love you, subs!&lt;/em&gt; üíú &lt;/p&gt;

&lt;p&gt;Finally, we managed to center it quickly. I believe it isn't the best solution, but it works. &lt;br&gt;
When you are doing live coding with people looking at you, it doesn't matter how you achieve it. Just do it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgyeq5g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m7po2ulrbfc2yfg6k44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgyeq5g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m7po2ulrbfc2yfg6k44.png" alt="olympic rings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üé® The next day, I had in mind to animate the rings. We accomplished this task by creating 3 CSS animations and chaining them together.&lt;/p&gt;

&lt;p&gt;The result was amazing. Don't you think?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEPLESrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76gju9n6e4mnqwv6p2vl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEPLESrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76gju9n6e4mnqwv6p2vl.gif" alt="animated rings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'd be interested to hear what you think. Let me a comment below. &lt;/p&gt;

&lt;p&gt;üëã That's all. Hope you like it as much as I do. Stay safe!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>dog</category>
    </item>
    <item>
      <title>Redux Toolkit - The Standard Way to Write Redux</title>
      <author>Nilanth</author>
      <pubDate>Wed, 28 Jul 2021 16:54:39 +0000</pubDate>
      <link>https://dev.to/nilanth/redux-toolkit-the-standard-way-to-write-redux-2g32</link>
      <guid>https://dev.to/nilanth/redux-toolkit-the-standard-way-to-write-redux-2g32</guid>
      <description>&lt;p&gt;&lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt; is a state manager for JavaScript Applications. Mostly used with React. Most of the large-scale react apps include redux for managing the global state. But does all the redux based application follows the standard approach?&lt;/p&gt;

&lt;p&gt;Redux needs to be implemented in a standard and optimal way to avoid issues in your React App. When we start to develop a redux-based app, We will lead to decision fatigue on searching which the best practice. To avoid that kind of confusion. I will share the standard way to implement redux in your React App and also how you structure your react-redux app. Let‚Äôs dispatch&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-toolkit"&gt;
  &lt;/a&gt;
  Redux Toolkit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/"&gt;Redux Toolkit&lt;/a&gt; is a redux official package to implement redux logic in a standard and minimalized way. Let‚Äôs quickly see, What does Redux Toolkit address&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configure the redux store with a single function!&lt;/li&gt;
&lt;li&gt;Not required to add additional packages to implement redux.&lt;/li&gt;
&lt;li&gt;No more Boilerplate codes.&lt;/li&gt;
&lt;li&gt;In build thunk async handler.&lt;/li&gt;
&lt;li&gt;Mutation helpers with inbuild &lt;a href="https://github.com/immerjs/immer"&gt;immerjs&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's move to the code part and see how this package standardizes reducers.&lt;/p&gt;

&lt;p&gt;Add Redux Toolkit to your project by using the below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @reduxjs/toolkit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#redux-store"&gt;
  &lt;/a&gt;
  Redux Store
&lt;/h3&gt;

&lt;p&gt;Creating a store using the redux toolkit is super simple! Check the below code&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;configureStore&lt;/code&gt; enables redux-thunk and redux dev tools by default. Not required to configure it manually by using middleware. But if you plan to use redux-saga or any other side effects manager, You can configure through the middleware as below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now your redux store is ready for action. Next, add it to the &lt;code&gt;&amp;lt;Provider/&amp;gt;&lt;/code&gt; as below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next reducer setup? No !!. It's time to Slice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-slice-api"&gt;
  &lt;/a&gt;
  Create Slice API
&lt;/h3&gt;

&lt;p&gt;Redux Toolkit provides an API called &lt;code&gt;createSlice&lt;/code&gt;. Which handles the initial state, automatically creates action types and creators. And no &lt;strong&gt;more switch cases&lt;/strong&gt;. We are also not required to write action types and creators manually. Check the below code for the new slice reducer&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let‚Äôs breakdown each createSlice options&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;initialState:&lt;/strong&gt; Initial state of the slice&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name:&lt;/strong&gt; Name of the slice. (Reducer Name)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reducers:&lt;/strong&gt; Handles the action type, Like the switch case which we have used in reducers.&lt;/p&gt;

&lt;p&gt;createSlice also have &lt;code&gt;extraReducer&lt;/code&gt;. This option is to handle actions types that are not generated by the current slice.&lt;/p&gt;

&lt;p&gt;Now you can interact with the redux store and slice from React Components as below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#feature-folders"&gt;
  &lt;/a&gt;
  Feature Folders
&lt;/h3&gt;

&lt;p&gt;Feature Folder is not related to the redux toolkit. But this is also a recommended way by redux to structure your React Redux App. The feature Folder approach is grouping your features in a single folder.&lt;/p&gt;

&lt;p&gt;The feature folder includes components and a single file for the redux toolkit &lt;code&gt;createSlice&lt;/code&gt; API for the particular feature. Redux related action creators, types need to add in a single file, not in multiple files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SWmQEhq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz2k4w7b4j0i85tbxu21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SWmQEhq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz2k4w7b4j0i85tbxu21.png" alt="file-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/app&lt;/code&gt;&lt;/strong&gt; Global app setup and Layout configuration used by the entire app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/common&lt;/code&gt;&lt;/strong&gt; Reusable helpers and components&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/features&lt;/code&gt;&lt;/strong&gt; Components related to the specific feature and its slice logic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/reduxjs/redux-toolkit"&gt;Redux Toolkit GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erikras/ducks-modular-redux"&gt;Duck Redux Pattern&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Redux toolkit provides a convenient and standard way of writing reducers. I hope you have found this useful. Thank you for reading.&lt;/p&gt;

&lt;p&gt;Get more updates on &lt;a href="https://twitter.com/Nilanth"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-blogs"&gt;
  &lt;/a&gt;
  More Blogs
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/5-packages-to-optimize-and-speed-up-your-react-app-during-development-4h5f"&gt;5 Packages to Optimize and Speed Up Your React App During Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-use-axios-in-an-optimized-and-scalable-way-with-react-518n"&gt;How To Use Axios in an Optimized and Scalable Way With React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd"&gt;15 Custom Hooks to Make your React Component Lightweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga"&gt;10 Ways to Host Your React App For Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko"&gt;How to Secure JWT in a Single-Page Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/react-18-alpha-a-quick-overview-349n"&gt;React 18 Alpha: A Quick Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/redux-auth-starter-a-zero-config-cra-template-9c0"&gt;Redux Auth Starter: A Zero Config CRA Template&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using VueQuill editor in Vue.Js3</title>
      <author>Anjolaoluwa Ogunmefun</author>
      <pubDate>Wed, 28 Jul 2021 16:38:30 +0000</pubDate>
      <link>https://dev.to/anjolaogunmefun/using-vuequill-editor-in-vue-js3-1cpd</link>
      <guid>https://dev.to/anjolaogunmefun/using-vuequill-editor-in-vue-js3-1cpd</guid>
      <description>&lt;p&gt;It is important to note that at the time this article is written, the Vue-quill editor is in the beta phase meaning it is still in its pre-release, testing phase hence is not entirely stable and some features can change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Quill editor is an API-driven text editor designed to enable users to write texts, incorporating a few modern ideas and beautiful formatting.&lt;br&gt;
Some reasons why one would consider Quill editor as a good choice are because;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It provides custom content and formatting-&lt;/strong&gt; Quill introduced its own document model, which is a powerful abstraction of the DOM and supports scalability and customization. There are no restrictions on the formats and content that Quill can support. Users have already used it to add embedded slideshows, interactive lists, and 3D. Role model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It provides cross-platform usage-&lt;/strong&gt; Quill is not only concerned that it works but also that it works the same way across all browsers. meaning the same action will produce the same effect across all browsers, both mobile and web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is super easy to use.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vuequill"&gt;
  &lt;/a&gt;
  VueQuill
&lt;/h3&gt;

&lt;p&gt;is a Vue component used to create a text editor powered by Vue 3 and Quill. This package is a thin Quill wrapper that can be easily used in Vue 3 applications&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Vuequill can be installed easily through npm or yarn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @vueup/vue-quill@beta --save

yarn add @vueup/vue-quill@beta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#importing-package"&gt;
  &lt;/a&gt;
  Importing package
&lt;/h3&gt;

&lt;p&gt;Vuequill can be registered locally(in a specific file)or globally(in your &lt;em&gt;main.js&lt;/em&gt; file).&lt;/p&gt;

&lt;p&gt;Locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QuillEditor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vueup/vue-quill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vueup/vue-quill/dist/vue-quill.snow.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="nx"&gt;QuillEditor&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QuillEditor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vueup/vue-quill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vueup/vue-quill/dist/vue-quill.snow.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;QuillEditor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QuillEditor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is important to note that the component itself does not include any CSS theme. The package comes with two themes; &lt;strong&gt;Snow&lt;/strong&gt; and &lt;strong&gt;Bubble&lt;/strong&gt;.&lt;br&gt;
You‚Äôll need to include it separately as seen in the snippet above i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import '@vueup/vue-quill/dist/vue-quill.snow.css'
 or
import '@vueup/vue-quill/dist/vue-quill.bubble.css'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;Inside the file where the text editor is needed, add the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QuillEditor&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;snow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run your project, you should see something like this;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhB0kBog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzg9afc0wn12i90i8lqp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhB0kBog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzg9afc0wn12i90i8lqp.png" alt="Vuequill editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The height and width of the editor can be adjusted by using CSS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binding-the-vuequill-editor-content"&gt;
  &lt;/a&gt;
  Binding the VueQuill editor content
&lt;/h3&gt;

&lt;p&gt;It is common to want to have the content of the Vuequill text editor bound to a data property in your app to carry out further actions with it. Unlike the regular method used to bind data properties in Vue, Vuequill requires an extra step, the &lt;strong&gt;:content&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dataProperty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vuequill-editor-listening-for-events"&gt;
  &lt;/a&gt;
  VueQuill editor listening for events
&lt;/h3&gt;

&lt;p&gt;Actions can be carried out with the Vuequill editor and listening for events can trigger these actions. Events like @blur, @focus, @change, and @ready. You can then write a method to carry out your desired action parsing the event as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QuillEditor&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;snow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onEditorBlur($event)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;focus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onEditorFocus($event)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;change&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onEditorChange($event)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ready&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onEditorReady($event)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, I want to assign a default value to the Vuequill editor. I will use the @ready event&lt;br&gt;
The method call will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;onEditorReady&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ql-blank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This article covers the basic usage of Vuequill editor. I hope you found it useful!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>quill</category>
      <category>editor</category>
    </item>
  </channel>
</rss>
