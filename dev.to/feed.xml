<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>MeiliSearch: Next generation search API</title>
      <author>Emma Donery</author>
      <pubDate>Thu, 20 Jan 2022 14:49:51 +0000</pubDate>
      <link>https://dev.to/emma_donery/meilisearch-next-generation-search-api-5g56</link>
      <guid>https://dev.to/emma_donery/meilisearch-next-generation-search-api-5g56</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mekYcjRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9lo10cdv23exdhodgv9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mekYcjRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9lo10cdv23exdhodgv9.png" alt="Image description" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a long time, medium-sized datasets and smaller applications have gone through the nightmare of using insufficient search engines, which result in hidden costs in terms of user experience and retention due to poor search fulfillment.There are numerous search engines available on the internet, both open-source and commercial. Choosing the ideal search solution for your project is crucial, but it's also complicated. In this article, i am going to discuss why Meilisearch is the suitable choice among other search engines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-meilisearch"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is MeiliSearch?&lt;/strong&gt;🤔
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;MeiliSearch&lt;/strong&gt; is a powerful, fast, open-source, easy to use and deploy search engine. It is a REST-based search API. It intends to be a ready-to-use solution for everyone who wishes to give a speedy and relevant search experience to their end-users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Created by Meili SAS company based in paris in 2018&lt;/li&gt;
&lt;li&gt;It is an open source search engine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It promises:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blazingly fast and relevant search experience for the end user&lt;/li&gt;
&lt;li&gt;Is scalable, mantainable, customizable and that is easy to get it setup for developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lgqp11Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohn7tqylqwvkxa8rwflr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lgqp11Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohn7tqylqwvkxa8rwflr.png" alt="Image description" width="318" height="159"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-meilisearch-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why MeiliSearch ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is a free, open-source solution that can be used by anybody and is tailored to meet a variety of needs. It requires very little setting upon installation, but it is highly customizable. With features like typo correction, filters, custom ranks, and more, it gives an immediate search experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-meilisearch"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features of MeiliSearch&lt;/strong&gt;💡
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Search as you type&lt;/em&gt;&lt;/strong&gt; - Also known as "quick search." While you're still typing in your query, you'll get results. When you type more text into the search box, the displayed results alter in real time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ultra relevant&lt;/em&gt;&lt;/strong&gt; - MeiliSearch's default relevancy rules are designed to give a simple search experience with minimal setup. They can be tinkered with to get the best results for your dataset.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Typo tolerant&lt;/em&gt;&lt;/strong&gt; - MeiliSearch will always find the results you're looking for, rather than letting typos ruin your search.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Synonyms&lt;/em&gt;&lt;/strong&gt; - Synonyms allow you to make your search experience more personalized and intuitive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Highlighting&lt;/em&gt;&lt;/strong&gt; - Highlight query phrases to make matches stand out. It is not necessary for users to read the complete paragraph in order to find a match.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Filters&lt;/em&gt;&lt;/strong&gt; - MeiliSearch allows you to apply filters to your search results to reduce them down based on user-defined criteria.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Faceting&lt;/em&gt;&lt;/strong&gt; - It aids in the classification of search results and the creation of user-friendly navigation interfaces.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Sorting&lt;/em&gt;&lt;/strong&gt; - By sorting search results at query time, users can pick which sorts of results they want to see first.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Placeholder search&lt;/em&gt;&lt;/strong&gt; - If you search without any query words, MeiliSearch will return all of the documents in that index, organized by its custom ranking rules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Phrase search&lt;/em&gt;&lt;/strong&gt; - MeiliSearch will only return documents that contain your search phrases in the order you specify if you use double quotes (") around them. As a result, users will be able to conduct more precise searches.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;API key management&lt;/em&gt;&lt;/strong&gt; - The usage of API keys in MeiliSearch allows you to secure your instances. You may control which users have access to specific indexes, routes, and endpoints using API keys.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Comprehensive language support&lt;/em&gt;&lt;/strong&gt; - MeiliSearch is a multilingual search engine! Every language spoken in the global community will be supported.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#modules-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Module's Architecture&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Divided into two main parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Service&lt;/strong&gt;, which servers as a wrapper for MeiliSearch PHP library. It's purpose is making API calls to the MeiliSearch server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Search API backend plugin&lt;/strong&gt; extends the functionality of the search API module and provides a backend on which you can attach indexes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo-of-searchapi-meilisearch"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Demo of SearchAPI MeiliSearch&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installation&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are many ways to &lt;a href="https://docs.meilisearch.com/learn/getting_started/installation.html#download-and-launch"&gt;install and run meilisearch&lt;/a&gt;. Be sure to check them out. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NB:&lt;/em&gt;&lt;/strong&gt; you can also download MeiliSearch from Homebrew or APT or cURL or others. The link on how to install using all these ways is attached.&lt;/p&gt;

&lt;p&gt;In this article, i will install using the pip3 commandline:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install &lt;/span&gt;meilisearch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-started-meilisearch-python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Getting Started : MeiliSearch Python&lt;/strong&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#add-documents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Add Documents&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;meilisearch&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meilisearch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://127.0.0.1:7700'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'masterKey'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# An index is where the documents are stored.
&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'books'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'book_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Pride and Prejudice'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'book_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Le Petit Prince'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'book_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Alice In Wonderland'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'book_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1344&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'The Hobbit'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'book_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Harry Potter and the Half-Blood Prince'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'book_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'The Hitchhiker&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s"&gt;s Guide to the Galaxy'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# If the index 'books' does not exist, MeiliSearch creates it when you first add the documents.
&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_documents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;documents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; { "updateId": 0 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#basic-search"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Basic Search&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# MeiliSearch is typo-tolerant:
&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'harry pottre'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"hits"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[{&lt;/span&gt;
    &lt;span class="s2"&gt;"book_id"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 4,
    &lt;span class="s2"&gt;"title"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Harry Potter and the Half-Blood Prince"&lt;/span&gt;
  &lt;span class="o"&gt;}]&lt;/span&gt;,
  &lt;span class="s2"&gt;"offset"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 0,
  &lt;span class="s2"&gt;"limit"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 20,
  &lt;span class="s2"&gt;"processingTimeMs"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 1,
  &lt;span class="s2"&gt;"query"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"harry pottre"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#custom-search"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Custom Search&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;'prince'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'attributesToHighlight'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'book_id &amp;gt; 10'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"hits"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"book_id"&lt;/span&gt;: 456,
            &lt;span class="s2"&gt;"title"&lt;/span&gt;: &lt;span class="s2"&gt;"Le Petit Prince"&lt;/span&gt;,
            &lt;span class="s2"&gt;"_formatted"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"book_id"&lt;/span&gt;: 456,
                &lt;span class="s2"&gt;"title"&lt;/span&gt;: &lt;span class="s2"&gt;"Le Petit &amp;lt;em&amp;gt;Prince&amp;lt;/em&amp;gt;"&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;]&lt;/span&gt;,
    &lt;span class="s2"&gt;"offset"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"limit"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"processingTimeMs"&lt;/span&gt;: 10,
    &lt;span class="s2"&gt;"query"&lt;/span&gt;: &lt;span class="s2"&gt;"prince"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#module-compatibility"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Module compatibility&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;meilisearch - v0.18.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#take-away"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Take away&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;MeiliSearch comes with a lot of customizing options. These customizing choices, unlike those offered by other search engines, are only that: optional. Try out MeiliSearch now. Thank me later.&lt;/p&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://twitter.com/Emma_Donery"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/emma-donery-0831a7188/"&gt;LinkedIn&lt;/a&gt;. Please feel free to leave a feedback on the comment session.&lt;/p&gt;

</description>
      <category>python</category>
      <category>showdev</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>7 Out of Office Places to Spark Your Creativity</title>
      <author>Rachel Eleza</author>
      <pubDate>Thu, 20 Jan 2022 14:33:46 +0000</pubDate>
      <link>https://dev.to/elezarachel/7-out-of-office-places-to-spark-your-creativity-2d02</link>
      <guid>https://dev.to/elezarachel/7-out-of-office-places-to-spark-your-creativity-2d02</guid>
      <description>&lt;p&gt;Creative ideas aren’t always easy to come up with, but some days are harder than others. When those days come, sitting in your office and staring at the walls rarely helps. In fact, working from a static environment might just be the reason you hit a creative wall. Sometimes all you need is a change of scenery to get your creative gears rolling. A new location allows you to interact with new people and see different things that can easily bring fresh ideas and new perspectives. If all your creative juices have drained, here are 7 suggestions of places that you can visit to jumpstart your creative part of the brain.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bookstore/library
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Libraries are a hub for information of different kinds that are bound to give you tons of fresh ideas. You can read a book on a topic that you are currently working on. Even without reading, the features of a book such as the cover, texture, and the weight of different books can take you into the author’s mind. You are likely to find inspiration as you identify different clues of what to find inside the book. Besides this, most libraries have quiet spaces where you can just plug in your computer and enjoy the silence. This could be a plus for you if you are one of those individuals who find inspiration when it is quiet.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;     Coworking space
Coworking spaces provide a dedicated space for work away from the chaos usually found in offices. In addition, coworking spaces have all the amenities that you need for ideas to start flowing. The good thing about these modern workspaces is that they are almost everywhere you go, including in New York. If you travel to NY for business, you can be sure to find one among the &lt;a href="https://www.upsuite.com/blog/best-coworking-space-new-york-city/"&gt;reliable coworking spaces in New York&lt;/a&gt; that suit your needs.&lt;/li&gt;
&lt;li&gt;     A friend’s house
The missing piece to your big idea could just be lying in your friend’s mind. Your friends see things differently from you. A simple conversation could unlock ideas that you hadn’t thought of. The next time you hit a creativity fog, drive down to your friend’s house. Share what you have been working on and ask for his or her opinion. You might just find some inspiration in something he or she says.&lt;/li&gt;
&lt;li&gt;     The road
Taking a long drive once in a while can be refreshing to the mind. There is a lot that you can think of when it is only you, the steering wheel, some music, and the open road ahead. Driving without a defined destination can be exciting and liberating. You get the chance to think freely, which &lt;a href="https://thecommondesk.com/wfh/outdoor-activities-to-focus-your-work/"&gt;activates that creative part of the brain&lt;/a&gt;. To make the most of your time on the road, make stopovers at interesting sceneries and interact with strangers whenever you get the chance. You are likely to gain a new perspective on your creative project and birth the best ideas from the experience.&lt;/li&gt;
&lt;li&gt;     Old favorite place
We all have that place that we used to frequent quite a lot but haven’t done so in a while due to increasing life commitments. It could be a park in your old neighborhood, the beach or a cottage in the woods. Revisiting such a place can bring back the excitement that it used to back in the day. What’s more, allowing yourself to relive the memories can as well inspire some creativity in your brain.&lt;/li&gt;
&lt;li&gt;     Hiking trail
Being around nature is &lt;a href="https://www.takingcharge.csh.umn.edu/how-does-nature-impact-our-wellbeing"&gt;beneficial to the brain&lt;/a&gt; owing to its calming effect. Moreover, when the brain is calm, the creative part of it becomes active. In addition, nature has a way of making us appreciate the surroundings. It is just fascinating to gain the perspective of a bigger world than you can merely comprehend. In this state of fascination, fresh ideas and new perspectives hit the mind.
&lt;/li&gt;
&lt;li&gt;     Art museum
Art museums are home to creative pieces made by great minds in the creative industry drawn from different origins and eras. By far, they are the best place for learning. There is a lot that you can learn from a single piece of art. The style, color, and more can speak volumes on what was on the artist’s mind, which broadens your thinking.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion&lt;br&gt;
Inspiration can hit anywhere and at any time. On the days that it is hard to come, getting out of the office can do the trick. The next time you feel like your creative well is dry, look for a place that can inspire you and get ideas flowing. If you have no idea where to go, one of the above seven spots can be a great start.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>news</category>
      <category>motivation</category>
      <category>performance</category>
    </item>
    <item>
      <title>[PR-BR] Testes de unidade com MockK e AssertJ</title>
      <author>João Victor Martins</author>
      <pubDate>Thu, 20 Jan 2022 14:15:58 +0000</pubDate>
      <link>https://dev.to/j_a_o_v_c_t_r/pr-br-testes-de-unidade-com-mockk-e-assertj-cko</link>
      <guid>https://dev.to/j_a_o_v_c_t_r/pr-br-testes-de-unidade-com-mockk-e-assertj-cko</guid>
      <description>&lt;p&gt;Sempre que estamos falando sobre boas práticas de desenvolvimento de software, um nome sempre aparece: testes de unidade. De acordo com Marco Tulio Valente (2020), testes de unidade são testes automatizados de pequenas unidades de código, normalmente classes, as quais são testadas de forma isolada do restante do sistema. Um teste de unidade é um programa que chama métodos de uma classe e verifica se eles retornam os resultados esperados. Esses testes podem ser feitos na maioria das linguagens de programação e cada uma delas possui bibliotecas e recursos para facilitar o desenvolvimento dos mesmos. A ideia do post é mostrar como fazer testes de unidade em kotlin usando mockK e AssertJ. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mockk"&gt;
  &lt;/a&gt;
  MockK
&lt;/h1&gt;

&lt;p&gt;Mockk é uma biblioteca de mocking para kotlin que traz uma série de recursos como &lt;em&gt;Spy, Relaxed mock, Partial mocking, Object mocks, Class mock&lt;/em&gt; entre outros. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#assertj"&gt;
  &lt;/a&gt;
  AssertJ
&lt;/h1&gt;

&lt;p&gt;O AssertJ fornece um rico conjunto de asserções, mensagens de erro realmente úteis, melhora a legibilidade do código de teste e foi projetado para ser super fácil de usar em sua IDE favorita.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#depend%C3%AAncias"&gt;
  &lt;/a&gt;
  Dependências
&lt;/h1&gt;

&lt;p&gt;Para criar testes de unidade com as bibliotecas informadas, é necessário adicionar as dependências no projeto. No caso do maven basta colocar o trecho a seguir no &lt;code&gt;pom.xml&lt;/code&gt; &lt;strong&gt;(verificar versões)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.mockk&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mockk&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.12.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.assertj&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;assertj-core&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.21.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#m%C3%A3os-na-massa"&gt;
  &lt;/a&gt;
  Mãos na massa
&lt;/h1&gt;

&lt;p&gt;Suponha que é necessário testar o comportamento de um método que lista produtos. O método possui dois fluxos. Quando é informado o nome do produto a ser listado, deve-se retornar apenas o produto especificado. Quando o nome do produto não é informado, deve-se retornar todos os produtos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Resto do código omitido&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;listar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nomeProduto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?):&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Produto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nomeProduto&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findByProdutoNome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nomeProduto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O primeiro teste será para validar o comportamento do método quando é informado o nome do produto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.mockk.every&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.mockk.mockk&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.mockk.verify&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.assertj.core.api.Assertions.*&lt;/span&gt;
&lt;span class="c1"&gt;// Outros imports foram omitidos&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProdutoServiceTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ProdutoRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mockk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;produtoService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ProdutoService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nd"&gt;@Test&lt;/span&gt;
        &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;`deve&lt;/span&gt; &lt;span class="n"&gt;listar&lt;/span&gt; &lt;span class="n"&gt;produto&lt;/span&gt; &lt;span class="n"&gt;por&lt;/span&gt; &lt;span class="nf"&gt;nome`&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;every&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findByProdutoNome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Produto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Geladeira"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

                &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produtoService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;listar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

                &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;produtoRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;produtoRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findByProdutoNome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="nf"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultado&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;isNotNull&lt;/span&gt;
                &lt;span class="nf"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultado&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hasSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos entender alguns recursos apresentados. Como a ideia do teste de unidade é testar apenas o comportamento do método que contém a regra de negócio, toda a parte de repositório deverá ser mockada. Para mockar objetos com o mockK pode-se utilizar a inline function &lt;code&gt;mockk()&lt;/code&gt;. Há duas formas de utilizá-la, da forma que foi declarada acima ou com &lt;code&gt;mockk&amp;lt;ProdutoRepository&amp;gt;()&lt;/code&gt;. Com o repositório mockado, é necessário definir o seu comportamento. Para isto é criado o bloco &lt;code&gt;every&lt;/code&gt; que descreve qual resposta deve ser dada quando um método do repositório for chamado. No caso acima, sempre que o método &lt;code&gt;findByProdutoNome&lt;/code&gt; for chamado, será retornado uma lista de produtos que possui apenas um produto. O &lt;code&gt;verify&lt;/code&gt; será o bloco responsável por verificar se o mock foi invocado como esperado. Como o método possui dois fluxos, temos que garantir que quando for informado o nome do produto, o método do repositório &lt;code&gt;findAll()&lt;/code&gt; não seja chamado e sim o &lt;code&gt;findByProdutoNome()&lt;/code&gt;. Qualquer comportamento diferente deste deverá fazer o teste falhar. Tudo que foi falado até aqui são recursos do mockk e já seria suficiente para fazer o teste ser executado com sucesso. Porém para garantir que o resultado retornado está correto, podemos fazer asserções e é neste momento que o AssertJ vira protagonista. Para escrever uma asserção, você sempre precisa começar passando seu objeto para o método &lt;code&gt;assertThat()&lt;/code&gt; e então seguir com as asserções reais. No caso acima, estamos afirmando que o resultado não é nulo e a lista possui um elemento. Qualquer retorno diferente disso, significaria que o método &lt;code&gt;listar&lt;/code&gt; de &lt;code&gt;ProdutoService&lt;/code&gt; não está de acordo com o comportamento esperado, e mais uma vez o teste deverá falhar. Agora que entendemos todos os recursos utilizados no teste, podemos testar o outro fluxo, quando não é informado o nome do produto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.mockk.every&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.mockk.mockk&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.mockk.verify&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.assertj.core.api.Assertions.*&lt;/span&gt;
&lt;span class="c1"&gt;// Outros imports foram omitidos&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProdutoServiceTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ProdutoRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mockk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;produtoService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ProdutoService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nd"&gt;@Test&lt;/span&gt;
        &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;`deve&lt;/span&gt; &lt;span class="n"&gt;listar&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="nf"&gt;produtos`&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;every&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Produto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Geladeira"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;Produto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Televisao"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

                &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produtoService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;listar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

                &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;produtoRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;produtoRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findByProdutoNome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="nf"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultado&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;isNotNull&lt;/span&gt;
                &lt;span class="nf"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultado&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;hasSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h1&gt;

&lt;p&gt;Podemos ver que ambas as bibliotecas nos fornecem recursos poderosos para criar testes de unidades simples, elegantes e eficientes. Existem muitos outros recursos a serem explorados, o que não caberia em apenas um post. Para quem tiver interesse em continuar os estudos, abaixo, em referências, deixei alguns links que vão auxiliar. Espero que tenham gostado da leitura e qualquer dúvida, crítica ou sugestão, não deixem de comentar. Até a próxima!! &lt;/p&gt;

&lt;p&gt;Referências&lt;br&gt;
&lt;a href="https://mockk.io/"&gt;https://mockk.io/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://joel-costigliola.github.io/assertj/"&gt;https://joel-costigliola.github.io/assertj/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.baeldung.com/kotlin/mockk"&gt;https://www.baeldung.com/kotlin/mockk&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.baeldung.com/introduction-to-assertj"&gt;https://www.baeldung.com/introduction-to-assertj&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bibliografia&lt;br&gt;
Marco Tulio Valente. Engenharia de Software Moderna: Princípios e Práticas para Desenvolvimento de Software com Produtividade, 2020.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>test</category>
      <category>ptbr</category>
    </item>
    <item>
      <title>Best Way to Get Last Item in an Array</title>
      <author>SnowBit</author>
      <pubDate>Thu, 20 Jan 2022 13:42:13 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/best-way-to-get-last-item-in-an-array-5a30</link>
      <guid>https://dev.to/codewithsnowbit/best-way-to-get-last-item-in-an-array-5a30</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks 👋
&lt;/h3&gt;

&lt;p&gt;What's up, this is &lt;strong&gt;SnowBit&lt;/strong&gt; here. I am a young passionate and self-taught developer and have an intention to become a successful developer.&lt;/p&gt;

&lt;p&gt;Today, I am here with a basic topic mostly for beginners and revisers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-this"&gt;
  &lt;/a&gt;
  Avoid this
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CSS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't do this for getting the last item of an array. Let me explain, this is a small array and contains only 3 items that are easily countable but, what if there are hundred's of items in an array then this method will make you mad 🤯&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-this"&gt;
  &lt;/a&gt;
  Do this
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CSS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;arr.length&lt;/code&gt; becomes dynamic, it increases as you increase items in &lt;code&gt;arr&lt;/code&gt; no matter how many you add and that will not make you mad 😜&lt;/p&gt;




&lt;p&gt;Thank you for reading, have a nice day!&lt;br&gt;
&lt;strong&gt;Your appreciation is my motivation 😊&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Explanation Of Javascript Fallback (ง'̀-'́)ง</title>
      <author>Sanskar Sahu</author>
      <pubDate>Thu, 20 Jan 2022 13:07:52 +0000</pubDate>
      <link>https://dev.to/dsmark/explanation-of-javascript-fallback-ng-ng-37f5</link>
      <guid>https://dev.to/dsmark/explanation-of-javascript-fallback-ng-ng-37f5</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
The worst accessibility sin you &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;can make is to make your navigation dependent on Javascript.&lt;/p&gt;

&lt;p&gt;The problem is, that a lot of elements considered to be good usability actually need javascript to function properly.&lt;/p&gt;

&lt;p&gt;Most of the time, this is due to the fact that HTML elements are being used for something which is not their purpose, like a button acting as a link.&lt;/p&gt;

&lt;p&gt;Now, to make these things work although there is no Javascript available we have two options&lt;/p&gt;

&lt;p&gt;Use a backend script to deal with it&lt;br&gt;
Use Javascript sorcery and fallback options to make the navigation element work in any case.&lt;br&gt;
If possible, use the first option, it is much safer and does not clutter the code unneccessarily.&lt;/p&gt;

&lt;p&gt;However if th&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
ere is no chance to change the backend code, use noscript to replace the elements with their accessible equivalents, and write the elements that cause trouble via javascript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example: Navigation button&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="button" 
onclick="self.location='http://www.netdecisions.com'" 
value="Homepage" /&amp;gt;
Backend solution(PHP):
&amp;lt;input type="submit" name="home" 
onclick="self.location='http://www.netdecisions.com;return false'" 
value="Homepage" /&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the PHP would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?PHP if($_GET['home']=='homepage'){
echo header('http://www.netdecisions.com')}?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return false prevents javascript browsers to send the data back to the server, non-javascript browsers go back to the server, call the PHP script (of course it needs to be the form action) and set the header to load the other page.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Beware of excess of "best practices"</title>
      <author>Renan Moura</author>
      <pubDate>Thu, 20 Jan 2022 12:58:14 +0000</pubDate>
      <link>https://dev.to/renanmouraf/beware-of-excess-of-best-practices-5bed</link>
      <guid>https://dev.to/renanmouraf/beware-of-excess-of-best-practices-5bed</guid>
      <description>&lt;p&gt;Unlike other disciplines that are more rigid and regulated like Civil Engineering, Software Engineering doesn't have a set of rules to follow by law enforcement.&lt;/p&gt;

&lt;p&gt;You won't go to jail if you don't do TDD (Test-Driven Design), or even write tests for your code.&lt;/p&gt;

&lt;p&gt;Your system can work just fine if you don't follow any agile method.&lt;/p&gt;

&lt;p&gt;You could deploy your next app in a bare-metal Linux machine instead of setting up Kubernetes on a cloud provider to auto-scale your pods, and no one will complain about performance and such.&lt;/p&gt;

&lt;p&gt;We have all read Clean Code, Clean Architecture, and some other "bibles" of the software development world which tell us what are the "best practices".&lt;/p&gt;

&lt;p&gt;We have all spent hours learning about Scrum or some similar methodology to manage a software project as opposed to old-fashioned cascade-like project management because that's what works "best".&lt;/p&gt;

&lt;p&gt;We do tons of meetings, in Scrum alone we have: sprint planning, daily scrum, sprint review, and sprint retrospective.&lt;/p&gt;

&lt;p&gt;There are days when I wonder if I attend meetings for a living instead of developing software.&lt;/p&gt;

&lt;p&gt;So, what is all this rant about?&lt;/p&gt;

&lt;p&gt;It is about not following blindly the so-called "best practices".&lt;/p&gt;

&lt;p&gt;I do X because Google does, I use Y because Facebook uses it.&lt;/p&gt;

&lt;p&gt;This is a silly reason to do or use anything.&lt;/p&gt;

&lt;p&gt;If you are not working with lots of people, in a huge project, with thousands of simultaneous users, following all the "best practices" can be a drawback instead of an advantage.&lt;/p&gt;

&lt;p&gt;If you are working alone, in a small app with a handful of users, it is ok to commit directly into the main branch in your GitHub repo.&lt;/p&gt;

&lt;p&gt;If your project is not database intensive, or only has to deal with very little data, you can use an embedded H2 database stored directly in your file system and it will work more than fine.&lt;/p&gt;

&lt;p&gt;There are projects and teams where it makes sense to follow every single piece of advanced architecture and people management processes there are, but that's totally not the case for your startup of three people.&lt;/p&gt;

&lt;p&gt;It is easy to be misled by reading about the latest tech and thinking "everybody is using this", when in fact they are not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renanmf.com/fomo-fear-of-missing-out-as-a-developer/"&gt;FOMO (Fear Of Missing Out) as a Developer&lt;/a&gt; is real and you should be aware of this.&lt;/p&gt;

&lt;p&gt;Choose the right tech for the right context in a rational way.&lt;/p&gt;

&lt;p&gt;Choose the right project methodology for the right context in a rational way.&lt;/p&gt;

&lt;p&gt;You don't have to ditch Scrum in its entirety, you can adapt it and do only 2 of the meetings described instead of all of them.&lt;/p&gt;

&lt;p&gt;You can spawn a cheap Linux VM and deploy your app by hand instead of spending hours setting up CI/CD for something you can do manually in 2 minutes.&lt;/p&gt;

&lt;p&gt;If your app screen is a simple feature with one text field and a button (like Google's home page), React/Angular/Vue is an overkill.&lt;/p&gt;

&lt;p&gt;Learn all of those things, read the books, but use your best judgment to adapt the "best practices" to take advantage of what makes sense to your project and team, and not just because someone else said you should use it.&lt;/p&gt;

&lt;p&gt;You also can &lt;a href="https://renanmf.com/newsletter/"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Store Secrets in Vault with Symfony</title>
      <author>Jérôme TAMARELLE</author>
      <pubDate>Thu, 20 Jan 2022 12:56:43 +0000</pubDate>
      <link>https://dev.to/gromnan/store-secrets-in-vault-with-symfony-51ai</link>
      <guid>https://dev.to/gromnan/store-secrets-in-vault-with-symfony-51ai</guid>
      <description>&lt;p&gt;TL;DR: Integrating Vault and Symfony does not require any PHP code. Using &lt;code&gt;vault-agent&lt;/code&gt; secrets variables can be dumped into &lt;code&gt;.env&lt;/code&gt; file. Dynamic secrets can even be used as feature flags.&lt;/p&gt;




&lt;p&gt;Prisma Media's websites and applications are mostly developed using Symfony framework. Many of them require secrets values: API keys, database credentials, private certificats… they needs to be treated carefully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-choose-vault-to-store-secrets"&gt;
  &lt;/a&gt;
  Why we choose Vault to store secrets
&lt;/h2&gt;

&lt;p&gt;If you are there, you may know that storing secrets in your Git repository is a terrible practice that could lead to severe security issues.&lt;/p&gt;

&lt;p&gt;Symfony introduced a &lt;a href="https://symfony.com/doc/current/configuration/secrets.html"&gt;"Vault" mecanism&lt;/a&gt; to allow storing encrypted secrets in repositories and artifacts. This is a simple solution for basic needs. That has the advantage of being independent from any external system (simplicity, scalability).&lt;/p&gt;

&lt;p&gt;We preferred HashiCorp Vault, a server solution that we deployed on our infrastructure. It is centralized, auditable and can handle dynamic secrets. This open-source product is not tied to a cloud provider. Easy to &lt;a href="https://learn.hashicorp.com/tutorials/vault/getting-started-dev-server"&gt;run locally for dev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vault works as a key-value store were secrets variables are pushed and read using a REST API.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lK-NI1Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0akevfsc2dq2qstbrx6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lK-NI1Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0akevfsc2dq2qstbrx6v.png" alt="Vault UI screenshot, editing secrets" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-need-for-frequent-reload-of-secrets"&gt;
  &lt;/a&gt;
  The need for frequent reload of secrets
&lt;/h2&gt;

&lt;p&gt;Even if we generate the most secure password for your database, it will leak somewhere: logs, APM, error pages... To be safe, credentials needs to change, change all the time.&lt;/p&gt;

&lt;p&gt;To get short-living secrets, Vault has a concept of &lt;a href="https://learn.hashicorp.com/tutorials/vault/getting-started-dynamic-secrets"&gt;Dynamic Secrets&lt;/a&gt;. Unlike key/value secrets where you had to put data into the store yourself, dynamic secrets are generated when they are accessed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPwXRefr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xj23rgejo67sj279p39o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPwXRefr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xj23rgejo67sj279p39o.png" alt="Dynamic Secrets in Vault" width="726" height="289"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not only we have to load the secrets from Vault, but also they have to be reloaded every time they change.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-config-of-symfony-with-raw-env-endraw-"&gt;
  &lt;/a&gt;
  Dynamic config of Symfony with &lt;code&gt;.env&lt;/code&gt;
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--juFWJSDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1126770148092698625/nI58pL5O_normal.png" alt="Fabien Potencier profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Fabien Potencier
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @fabpot
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My yearly reminder that you should NOT use env vars to configure your &lt;a href="https://twitter.com/hashtag/Symfony"&gt;#Symfony&lt;/a&gt; application. Use env vars ONLY if you want to be able to change values WITHOUT redeploying your application (aka flushing the cache). Parameters ARE the way to configure applications.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:54 AM - 29 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1343842728547901441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1343842728547901441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1343842728547901441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Thank you Fabien, this is exactly what I need: changing the values without redeploying the application.&lt;/p&gt;

&lt;p&gt;Unlike the YAML/PHP files in &lt;code&gt;config/&lt;/code&gt; directory, that are read only when the container cache is built, the &lt;code&gt;.env&lt;/code&gt; file are read on every HTTP request. Updating this file while the application is running is a good way to update its configuration without impacting performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vault-agent-can-write-secrets-into-a-file"&gt;
  &lt;/a&gt;
  Vault Agent can write secrets into a file
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.vaultproject.io/docs/agent"&gt;vault-agent&lt;/a&gt; is a small utility that can be used as a cache proxy for the Vault server; or as a schedule to write secrets into a file using a template (&lt;a href="https://www.vaultproject.io/docs/agent/template#non-renewable-leased-secrets"&gt;every 5 minutes, configurable&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Example of vault-agent configuration for an app running on AWS EC2 instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vault.conf

vault {
  address = "https://vault.example.com"
  retry {
    num_retries = 5
  }
}

auto_auth {
  method "aws" {
    config = {
      type = "iam"
      role = "&amp;lt;iam role&amp;gt;"
      region = "eu-west-1"
      header_value = "vault.example.com"
    }
  }
}

template {
  source = "./.env.local.ctmpl"
  destination = "./.env.local"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The template maps Vault secrets to environment variables. The &lt;a href="https://www.vaultproject.io/docs/agent/template"&gt;templating syntax&lt;/a&gt; allows some flexibility, but it looks very primitive for a developer with Twig practice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .env.local.ctmpl
# This will generate a regular .env file
APP_ENV=prod

{{ with secret "secret/example/app" }}
APP_SECRET={{ .Data.data.APP_SECRET }}
{{ end }}

# Real environment variables can be read
{{ $env := (env "ENVIRONMENT") }}
{{ with secret (printf "secret/example/%s/database" $env) }}
DB_HOST={{ .Data.data.DB_HOST }}
DB_NAME={{ .Data.data.DB_NAME }}
DB_USER={{ .Data.data.DB_USER }}
DB_PASSWORD={{ .Data.data.DB_PASSWORD }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, &lt;code&gt;vault agent&lt;/code&gt; can be launched with any process manager (supervisord or systemd).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Daemon &lt;span class="k"&gt;for &lt;/span&gt;prod server
&lt;span class="go"&gt;vault agent -config=vault.conf

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Single run &lt;span class="k"&gt;for &lt;/span&gt;testing
&lt;span class="go"&gt;vault agent -config=vault.conf -exit-after-aut
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last security recommendation is to not write secrets on disks. We can create a &lt;code&gt;tmpfs&lt;/code&gt; volume and symlink from the project root to that volume.&lt;/p&gt;

&lt;p&gt;For kubernetes, vault-agent runs in a &lt;a href="https://www.vaultproject.io/docs/platform/k8s/injector"&gt;sidecar container&lt;/a&gt; that renders Vault secrets to a shared memory volume.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-dynamic-configuration-feature-flag"&gt;
  &lt;/a&gt;
  Use dynamic configuration feature flag
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Feature_toggle"&gt;Feature flags&lt;/a&gt; are a benefit of using Vault and supporting dynamic configuration. Even if they are not secrets, flags can be stored in Vault. With fine tuned policies, product managers could manage feature flags and being rejected from other secrets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-feature-flag-to-render-a-block-in-twig"&gt;
  &lt;/a&gt;
  Example of feature flag to render a block in Twig
&lt;/h3&gt;

&lt;p&gt;In this example, we create a feature flag in Vault, with is a boolean to show or hide a "sales" block on a page.&lt;/p&gt;

&lt;p&gt;Create a variable in Vault KV:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;secret/example/app/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"FEATURE_FLAG_SALES"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read this secret in the vault agent template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .env.local.ctmpl

{{ with secret "secret/example/app" }}
FEATURE_FLAG_SALES={{ .Data.data.FEATURE_FLAG_SALES }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Share the value of the variable with Twig context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/config/packages/twig.yaml&lt;/span&gt;
&lt;span class="na"&gt;twig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;feature_flag_sales&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;%env(bool:FEATURE_FLAG_SALES)%"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the variable to render the block conditionally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight twig"&gt;&lt;code&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;feature_flag_sales&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;My conditional sales block&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the &lt;code&gt;vault-agent&lt;/code&gt;.&lt;br&gt;
When the variable updated, the block is shown or hidden after few minutes.&lt;/p&gt;

</description>
      <category>symfony</category>
      <category>vault</category>
      <category>secrets</category>
      <category>prismamedia</category>
    </item>
    <item>
      <title>Accelerated Guide to Fullstack Web3 with ASS (Anchor, Solana, and Svelte) 🍑</title>
      <author>0xMuse</author>
      <pubDate>Thu, 20 Jan 2022 12:48:19 +0000</pubDate>
      <link>https://dev.to/0xmuse/accelerated-guide-to-fullstack-web3-with-ass-anchor-solana-and-svelte-1mg</link>
      <guid>https://dev.to/0xmuse/accelerated-guide-to-fullstack-web3-with-ass-anchor-solana-and-svelte-1mg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#accelerated-guide-to-fullstack-web3-with-ass-anchor-solana-and-svelte"&gt;
  &lt;/a&gt;
  Accelerated Guide to Fullstack Web3 with ASS (Anchor, Solana, and Svelte)
&lt;/h1&gt;

&lt;p&gt;In this tutorial, you'll learn how to build from scratch a fullstack Web3 dApp with the ASS stack - the hottest &lt;strong&gt;Solana&lt;/strong&gt; tech stack!&lt;/p&gt;

&lt;p&gt;You do not need any Rust experience to follow this guide, but it would be helpful to have a general understanding of how dApps work at least from a user’s perspective (all that &lt;em&gt;connect wallet&lt;/em&gt;, &lt;em&gt;approve transaction&lt;/em&gt; kind of stuff).&lt;/p&gt;

&lt;p&gt;You can find the finished project in &lt;a href="https://github.com/0xMuse/gm-solana"&gt;this repo&lt;/a&gt;. If you have any questions, ping me on Twitter &lt;a href="https://twitter.com/0xMuse"&gt;@0xMuse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll skip the further mumbling on why ASS stack is thicc because it is self-evident. Let’s dive straight in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preview-of-our-app"&gt;
  &lt;/a&gt;
  Preview of our app
&lt;/h2&gt;

&lt;p&gt;We are building an app called “gm Solana” - a guest book app where users can log in with their Solana wallets and drop a “&lt;a href="https://knowyourmeme.com/memes/gm-good-morning"&gt;gm&lt;/a&gt;” to their &lt;a href="https://knowyourmeme.com/memes/fren"&gt;frens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNoiFbzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgj2itvco51yxsxrgvwp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNoiFbzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgj2itvco51yxsxrgvwp.gif" alt="Preview of our app" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although the app is simple, you will be able to understand intuitively how Solana apps work, and get a hands-on experience with the most important skills and concepts developing a fullstack Solana dApp - the typical workflow, read and write blockchain data, connect the blockchain with your frontend app, authentication, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-tech-stack"&gt;
  &lt;/a&gt;
  Our tech stack
&lt;/h2&gt;

&lt;p&gt;First, let's have a look at what the ASS stack covers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://project-serum.github.io/anchor/getting-started/introduction.html"&gt;&lt;strong&gt;Anchor&lt;/strong&gt;&lt;/a&gt; - The de facto high-level framework for Solana&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;&lt;strong&gt;Solana&lt;/strong&gt;&lt;/a&gt; - The reason why are you reading this&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://svelte.dev/"&gt;&lt;strong&gt;Svelte&lt;/strong&gt;&lt;/a&gt; - A blazing fast frontend framework (actually it’s a compiler), an alternative to React&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://emojipedia.org/peach/"&gt;🍑&lt;/a&gt; - The peach emoji, which is often associated with the word “ass”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, we’ll also integrate our app with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://phantom.app/"&gt;&lt;strong&gt;Phantom&lt;/strong&gt;&lt;/a&gt; - An awesome Solana browser wallet&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://solana-labs.github.io/solana-web3.js/"&gt;@solana/web3.js&lt;/a&gt;&lt;/strong&gt; - The Javascript library bridging client-side and the Solana network&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.typescriptlang.org/"&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/a&gt; - Frankly, I just can’t work with Javascript... Besides, most Solana tutorials available right now are written in JS, and to get everything working with TS sometimes needs some extra effort, so I hope this tutorial proves helpful&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll also be using &lt;strong&gt;&lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;&lt;/strong&gt;. If you haven’t done it yet, you need to install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode"&gt;Svelte&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust"&gt;Rust&lt;/a&gt; extensions to follow along this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-0-install-and-set-up-solana"&gt;
  &lt;/a&gt;
  Step 0. Install and set up Solana
&lt;/h2&gt;

&lt;p&gt;Before we start, you need to install the necessary tools. M1 Macs used to have some issues setting things up for the Solana Tool Suite, but now there is an official binary build for the M1 architecture, so the process has become pretty straightforward.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-rust"&gt;
  &lt;/a&gt;
  Install Rust
&lt;/h3&gt;

&lt;p&gt;First, you will need to install the Rust toolchain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://sh.rustup.rs &lt;span class="nt"&gt;-sSf&lt;/span&gt; | sh
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.cargo/env
rustup component add rustfmt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzEOZSg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/M1bIux8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzEOZSg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/M1bIux8.png" alt="Install Rust" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-solana-tool-suite"&gt;
  &lt;/a&gt;
  Install Solana Tool Suite
&lt;/h3&gt;

&lt;p&gt;To install Solana, you can simply run the installation script. I’m specifying to install &lt;a href="https://github.com/solana-labs/solana/releases/tag/v1.9.4"&gt;v1.9.4&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-sSfL&lt;/span&gt; https://release.solana.com/v1.9.4/install&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-2PUNnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1Dj2iWB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-2PUNnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1Dj2iWB.png" alt="Install Solana Tool Suite" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that if you are using zsh, you need to update your PATH.&lt;/p&gt;

&lt;p&gt;After it is finished, you can verify if the installation is successful with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;solana &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can run the test validator (a local testnet) to see if everything works correctly with command &lt;code&gt;solana-test-validator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKSU5TLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2nIBADv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKSU5TLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2nIBADv.png" alt="Solana version check" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s stop the test validator for now and move on!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-anchor"&gt;
  &lt;/a&gt;
  Install Anchor
&lt;/h3&gt;

&lt;p&gt;Anchor is the recommended framework for Solana programs.&lt;/p&gt;

&lt;p&gt;Note that Anchor uses &lt;a href="https://classic.yarnpkg.com/en/docs/install#mac-stable"&gt;Yarn v1&lt;/a&gt; to manage Javascript dependencies in your project, so make sure you already have it installed on your computer.&lt;/p&gt;

&lt;p&gt;Let’s build the Rust code from source, it’s pretty straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--git&lt;/span&gt; https://github.com/project-serum/anchor &lt;span class="nt"&gt;--tag&lt;/span&gt; v0.20.1 anchor-cli &lt;span class="nt"&gt;--locked&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can verify if the installation is successful with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;anchor &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOzQ3Q1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F4ffirh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOzQ3Q1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F4ffirh.png" alt="Install Anchor" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-phantom-wallet"&gt;
  &lt;/a&gt;
  Install Phantom Wallet
&lt;/h3&gt;

&lt;p&gt;The Phantom Wallet is a browser extension that takes care of connecting your Solana wallet and the dApp you are visiting, as well as the Solana blockchain. You can get it from &lt;a href="https://phantom.app/download"&gt;their official website&lt;/a&gt; and follow their instruction to set it up.&lt;/p&gt;

&lt;p&gt;If you have used MetaMask with EVM compatible networks before, you are then already familiar with how it works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmEdFq5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1EQTPGF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmEdFq5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1EQTPGF.png" alt="Install Phantom Wallet" width="856" height="1228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it. Let’s have some real fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-an-anchor-project-gm-solana"&gt;
  &lt;/a&gt;
  Step 1. Create an Anchor project - gm Solana!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#gmsolana"&gt;
  &lt;/a&gt;
  gm-solana
&lt;/h3&gt;

&lt;p&gt;To kick off, use Anchor to initialize a project and open it in VS Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;anchor init gm-solana
&lt;span class="nb"&gt;cd &lt;/span&gt;gm-solana
code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uPFXvcHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KdojPjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uPFXvcHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KdojPjm.png" alt="Initialize gm-solana" width="880" height="682"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we’ve got here are some config files and a few subdirectories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;app - where our client-side Svelte app will be&lt;/li&gt;
&lt;li&gt;migrations - deployment scripts&lt;/li&gt;
&lt;li&gt;programs - smart contracts&lt;/li&gt;
&lt;li&gt;tests - the name says it all ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#set-up-keys"&gt;
  &lt;/a&gt;
  Set up keys
&lt;/h3&gt;

&lt;p&gt;If you haven’t played with Solana on this machine yet, you will need to run &lt;code&gt;solana-keygen new&lt;/code&gt; to generate a new key. The passphrase can be empty.&lt;/p&gt;

&lt;p&gt;The new key is saved at &lt;code&gt;~/.config/solana/id.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bNLeRka0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7IC8677.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNLeRka0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7IC8677.png" alt="solana-keygen new" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use the key generated from your Phantom wallet, but I’m just going to use separate ones in this tutorial for clarity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-solana-to-use-localhost"&gt;
  &lt;/a&gt;
  Configure Solana to use localhost
&lt;/h3&gt;

&lt;p&gt;Next, run the following commands to set the network to localhost, and check the current settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;solana config set --url localhost
solana config get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5l2yWLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9cYsh2E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5l2yWLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9cYsh2E.png" alt="Configure Solana to use localhost" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later we will see how to push your app to devnet or mainnet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-and-verify-project-setup"&gt;
  &lt;/a&gt;
  Test and verify project setup
&lt;/h3&gt;

&lt;p&gt;Now, you can run &lt;code&gt;anchor build&lt;/code&gt; to test build the default example project Anchor created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vHDfjaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5z910NB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vHDfjaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5z910NB.png" alt="anchor build" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building works! Now, run &lt;code&gt;anchor test&lt;/code&gt; to see if tests pass too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VhEQUN_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ULuZjvN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VhEQUN_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ULuZjvN.png" alt="anchor test" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;anchor test&lt;/code&gt; command does a bunch in one go - it spins up the test validator, deploys the build, and runs the test cases against the deployments. Pretty handy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-anatomy-of-an-anchor-program"&gt;
  &lt;/a&gt;
  Step 2. Anatomy of an Anchor program
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#programs-and-accounts"&gt;
  &lt;/a&gt;
  Programs and Accounts
&lt;/h3&gt;

&lt;p&gt;In Solana, there’s a clear separation of logic (programs) and state (accounts). This is very different from Ethereum where contracts hold state themselves.&lt;/p&gt;

&lt;p&gt;Users store data in accounts, Solana programs store data in accounts, the code instructions themselves are also stored in accounts. If your program wants some state stored, it will have to reach out to some accounts outside, everything is passed by reference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-the-hello-world-example"&gt;
  &lt;/a&gt;
  Overview of the “hello world” example
&lt;/h3&gt;

&lt;p&gt;Anchor is like the backend web framework for Solana, like Ruby on Rails, Express, or Flask. It really abstracts away a lot of the low level stuff so that you can focus on just designing logic and data structure.&lt;/p&gt;

&lt;p&gt;Before we delete the “hello world” app that Anchor generated for us, let’s have a look at it first.&lt;/p&gt;

&lt;p&gt;The magic all happens in the &lt;code&gt;programs/gm-solana/src/lib.rs&lt;/code&gt; file, that’s the entrance of our program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;anchor_lang&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;declare_id!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nd"&gt;#[program]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;gm_solana&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Initialize&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s break it down:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preamble"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Preamble&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;anchor_lang&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;declare_id!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two lines basically imports the Rust libraries needed here and hardcodes the address where your program will be deployed to (it needs to be predefined for security reasons).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#program-and-instruction-handlers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Program and instruction handlers&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[program]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;gm_solana&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This section is where our logic is defined.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#[program]&lt;/code&gt; is a &lt;a href="https://doc.rust-lang.org/book/ch19-06-macros.html#macros"&gt;Rust macro&lt;/a&gt; that abstracts away the boilerplate and extra code needed to make your Rust program an Anchor program.&lt;/p&gt;

&lt;p&gt;The functions here are very similar to request handlers in server-side web frameworks. And, this is exactly what all these Web3 things are about - they replace the web servers from the traditional, centralized web!&lt;/p&gt;

&lt;p&gt;We can see that the &lt;code&gt;initialize&lt;/code&gt; instruction handler takes in a context &lt;code&gt;ctx&lt;/code&gt;, which has the type of &lt;code&gt;Context&lt;/code&gt; of struct &lt;code&gt;Initialize&lt;/code&gt;. What a mouthful!&lt;/p&gt;

&lt;p&gt;Remember that we said everything is passed by reference into the program, if the program wants to access and manipulate state? Well, that’s because of the parallel nature of Solana’s executions and how all programs are stateless.&lt;/p&gt;

&lt;p&gt;When we want to call a function on a program, we need to provide all the accounts in advance (aka. all the data that might be needed for a function to perform some tasks).&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;ctx&lt;/code&gt; thing basically contains all those references, and it uses some Rust magic to constrain the types of accounts that can be passed in, below in the account constraints part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#account-constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Account constraints&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Initialize&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don’t have much going on here in this “hello world” program, but we’ll see more in our “gm Solana” app below. What this section does is to enforce that the context passed into the instruction handler has the correct accounts.&lt;/p&gt;

&lt;p&gt;Our “gm Solana” program is more complex, let’s dive into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-implement-gm-solana"&gt;
  &lt;/a&gt;
  Step 3. Implement “gm Solana”
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#understand-what-we-need-to-do"&gt;
  &lt;/a&gt;
  Understand what we need to do
&lt;/h3&gt;

&lt;p&gt;Now we know what accounts and programs in Solana are, and how an Anchor app looks like. Let’s see what we need exactly for our “gm Solana” guest book app to work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;some state to store all those gm’s (specifically - message content, sender, and timestamp)&lt;/li&gt;
&lt;li&gt;a program to access that state and add new gm’s when needed&lt;/li&gt;
&lt;li&gt;a bunch of functions aka. instruction handlers on that program to do the actual work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds good, let’s go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-data-structure"&gt;
  &lt;/a&gt;
  Define data structure
&lt;/h3&gt;

&lt;p&gt;Let’s start with data structures first, then move on to the logic parts.&lt;/p&gt;

&lt;p&gt;First, we need to store the program state somewhere. Let’s define a &lt;code&gt;BaseAccount&lt;/code&gt; with exactly what we want to store - &lt;code&gt;gm_count&lt;/code&gt; is an unsigned 64bit integer, and &lt;code&gt;gm_list&lt;/code&gt; is a &lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;vector&lt;/a&gt; (a growable array) of &lt;code&gt;GmMessage&lt;/code&gt; objects, which contain the message and some metadata.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[account]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;gm_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;gm_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GmMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// define a struct called GmMessage that contains a message, sender, and timestamp&lt;/span&gt;
&lt;span class="nd"&gt;#[derive(Clone,&lt;/span&gt; &lt;span class="nd"&gt;Debug,&lt;/span&gt; &lt;span class="nd"&gt;AnchorSerialize,&lt;/span&gt; &lt;span class="nd"&gt;AnchorDeserialize)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;GmMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pubkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;BaseAccount&lt;/code&gt; is marked under the &lt;code&gt;#[account]&lt;/code&gt; macro, and because Solana works with specific kinds of data structures, we have to use the macro &lt;code&gt;#[derive(Clone, Debug, AnchorSerialize, AnchorDeserialize)]&lt;/code&gt; here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#program-and-instruction-handlers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Program and instruction handlers&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now, let’s write the program logic. We need two functions - first one is to initialize a &lt;code&gt;base_account&lt;/code&gt;, set the initial values to 0, then another one is to handle the client’s request to &lt;code&gt;say_gm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’ll declare the context structs / account constraints right after.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[program]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;gm_solana&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// &amp;amp;mut means we are letting the compiler know that we are mutating this value&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.base_account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// receive a message and store it into gm_list with some metadata&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;say_gm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SayGm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.base_account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// grab a copy of the input data&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// get the current Solana network time&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Clock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.unix_timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// grab the public key of the transaction sender&lt;/span&gt;
        &lt;span class="c1"&gt;// * dereferences the pointer&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.user&lt;/span&gt;&lt;span class="nf"&gt;.to_account_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;gm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GmMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_list&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#account-constraints"&gt;
  &lt;/a&gt;
  Account constraints
&lt;/h3&gt;

&lt;p&gt;As we mentioned earlier, the program code itself has no way to access any data, unless the accounts that store that data are passed into the handlers in the context, by the client.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Initialize&lt;/code&gt; context struct will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(init,&lt;/span&gt; &lt;span class="nd"&gt;payer&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;user,&lt;/span&gt; &lt;span class="nd"&gt;space&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(mut)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Signer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;system_program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The macro &lt;code&gt;#[account(init, payer = user, space = 64 + 64)]&lt;/code&gt; basically means that we want to &lt;strong&gt;&lt;code&gt;init&lt;/code&gt;&lt;/strong&gt;ialize the following account (&lt;code&gt;base_account&lt;/code&gt;), the fee will be paid by &lt;code&gt;user&lt;/code&gt; below, and we’ll allocate 64KB + 64KB space for it. We need a bigger space because of the vector.&lt;/p&gt;

&lt;p&gt;The macro &lt;code&gt;#[account(mut)]&lt;/code&gt; means that the &lt;code&gt;user&lt;/code&gt; here will be mutated, because it will be paying fees. This &lt;code&gt;user&lt;/code&gt; field represents the signer of the transaction, aka. the wallet that called this function.&lt;/p&gt;

&lt;p&gt;The last line refers to the root System Program, the special program on Solana that handles account creations. If you leave it out, you won’t be able to initialize the &lt;code&gt;base_account&lt;/code&gt; above.&lt;/p&gt;

&lt;p&gt;OK, let’s move on to the &lt;code&gt;SayGm&lt;/code&gt; struct:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SayGm&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(mut)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Signer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we will be mutating the data held in &lt;code&gt;base_account&lt;/code&gt;, we’ll once again use the &lt;code&gt;#[account(mut)]&lt;/code&gt; macro.&lt;/p&gt;

&lt;p&gt;The most important thing here though is &lt;code&gt;pub user: Signer&amp;lt;'info&amp;gt;&lt;/code&gt;. This is essentially how we will be able to authenticate, to verify that this address &lt;em&gt;is&lt;/em&gt; indeed the one that signed the transaction.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AccountInfo&amp;lt;'info&amp;gt;&lt;/code&gt; can also represent a user, but there’s no validation in place that anyone can be an imposter by simply passing in a random account.&lt;/p&gt;

&lt;p&gt;What we just did was to do some simple authentication routines completely via writing some Rust types - this is pretty cool and won’t be possible without Anchor’s abstraction! This way we can simply use the accounts in our program logic with the guarantee that they have already been checked.&lt;/p&gt;

&lt;p&gt;To put everything together, your app should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;anchor_lang&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;declare_id!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nd"&gt;#[program]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;gm_solana&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// &amp;amp;mut means we are letting the compiler know that we are mutating this value&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.base_account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;say_gm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SayGm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProgramResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.base_account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// grab a copy of the input data&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// get the current Solana network time&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Clock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.unix_timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// grab the public key of the user account. We need to use * to dereference the pointer&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.accounts.user&lt;/span&gt;&lt;span class="nf"&gt;.to_account_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;gm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GmMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_list&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="py"&gt;.gm_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(init,&lt;/span&gt; &lt;span class="nd"&gt;payer&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;user,&lt;/span&gt; &lt;span class="nd"&gt;space&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(mut)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Signer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;system_program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Accounts)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SayGm&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[account(mut)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;base_account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Signer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'info&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[account]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;BaseAccount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;gm_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;gm_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GmMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// define a struct called GmMessage that contains a message, sender, and timestamp&lt;/span&gt;
&lt;span class="nd"&gt;#[derive(Clone,&lt;/span&gt; &lt;span class="nd"&gt;Debug,&lt;/span&gt; &lt;span class="nd"&gt;AnchorSerialize,&lt;/span&gt; &lt;span class="nd"&gt;AnchorDeserialize)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;GmMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pubkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-forget-to-compile"&gt;
  &lt;/a&gt;
  Don’t forget to compile!
&lt;/h3&gt;

&lt;p&gt;The “gm Solana” program is complete and we need to rebuild the binary. At the same time, in order for our client-side code (be it tests or frontend app) to interact with it, we need to ask Anchor to generate &lt;a href="https://en.wikipedia.org/wiki/Interface_description_language"&gt;IDL&lt;/a&gt; (similar to ABI in EVM), TypeScript types for us.&lt;/p&gt;

&lt;p&gt;We can do all this by running &lt;code&gt;anchor build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgIJjRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zGflmSE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgIJjRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zGflmSE.png" alt="anchor build" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-write-tests-for-gm-solana"&gt;
  &lt;/a&gt;
  Step 4. Write tests for “gm Solana”
&lt;/h2&gt;

&lt;p&gt;We have already ran the tests for the default “hello world” program, now let’s update the tests for our “gm Solana”.&lt;/p&gt;

&lt;p&gt;Go into &lt;code&gt;tests/gm-solana.ts&lt;/code&gt; and put in the following, I’ll comment explanation in the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"@project-serum/anchor"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"@project-serum/anchor"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;GmSolana&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"../target/types/gm_solana"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"assert"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// we need to access SystemProgram so that we can create the base_account&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;SystemProgram&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.web3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gm-solana"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// configure the client to use the local cluster.&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.Provider&lt;/span&gt;&lt;span class="nf"&gt;.env&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="nf"&gt;.setProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.workspace.GmSolana&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GmSolana&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;_baseAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.web3.Keypair&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"creates a base account for gm's"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;baseAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="py"&gt;.web3.Keypair&lt;/span&gt;&lt;span class="nf"&gt;.generate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// call the initialize function via RPC&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.rpc&lt;/span&gt;&lt;span class="nf"&gt;.initialize&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="py"&gt;.wallet.publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;systemProgram&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SystemProgram&lt;/span&gt;&lt;span class="py"&gt;.programId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="n"&gt;signers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// fetch the base account&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.account.baseAccount&lt;/span&gt;&lt;span class="nf"&gt;.fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// gmCount is a "big number" type, so we need to convert it to a string&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="py"&gt;.gmCount&lt;/span&gt;&lt;span class="nf"&gt;.toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_baseAccount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nf"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"receives and saves a gm message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"gm wagmi"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="py"&gt;.wallet.publicKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// fetch the base account and cache how many messages are there&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;accountBefore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.account.baseAccount&lt;/span&gt;&lt;span class="nf"&gt;.fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;_baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gmCountBefore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accountBefore&lt;/span&gt;&lt;span class="py"&gt;.gmCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// call the sayGm function with message&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.rpc&lt;/span&gt;&lt;span class="nf"&gt;.sayGm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;baseAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// fetch the base account again and check that the gmCount has increased&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;accountAfter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="py"&gt;.account.baseAccount&lt;/span&gt;&lt;span class="nf"&gt;.fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;_baseAccount&lt;/span&gt;&lt;span class="py"&gt;.publicKey&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gmCountAfter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accountAfter&lt;/span&gt;&lt;span class="py"&gt;.gmCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmCountAfter&lt;/span&gt;&lt;span class="nf"&gt;.sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmCountBefore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// fetch the gmList and check the value of the first message&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gmList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accountAfter&lt;/span&gt;&lt;span class="py"&gt;.gmList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="py"&gt;.message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="py"&gt;.user&lt;/span&gt;&lt;span class="nf"&gt;.equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// user is an object, we can't just compare objects in JS&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="nf"&gt;.equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gmList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="py"&gt;.timestamp&lt;/span&gt;&lt;span class="nf"&gt;.gt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;anchor&lt;/span&gt;&lt;span class="nf"&gt;.BN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// just a loose check to see if the timestamp is greater than 0&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When finished, the run &lt;code&gt;anchor test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84W_mlTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kHHjlqC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84W_mlTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kHHjlqC.png" alt="anchor test" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both tests have passed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-deploy-app-to-local-network"&gt;
  &lt;/a&gt;
  Step 5. Deploy app to local network
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#set-new-program-id"&gt;
  &lt;/a&gt;
  Set new Program ID
&lt;/h3&gt;

&lt;p&gt;Remember that in the beginning of our code, there’s that line &lt;code&gt;declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now as we are getting closer to production, we need to replace it with the unique Program ID generated by &lt;code&gt;anchor build&lt;/code&gt;. We can get it with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="n"&gt;solana&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gm_solana&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keypair&lt;/span&gt;&lt;span class="py"&gt;.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3f-Sh6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5YWfL0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3f-Sh6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5YWfL0.png" alt="get gm_solana address" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, copy this key over back to the &lt;code&gt;lib.rs&lt;/code&gt; file (use your own pub key pls!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;declare_id!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"9V3sjRVvZ61X4qHkz2gVaxB1kKhMenzjwWhjmhpqgRHK"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll also need to update it accordingly in &lt;code&gt;Anchor.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="cs"&gt;# Anchor.toml&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;programs&lt;/span&gt;&lt;span class="py"&gt;.localnet&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;solana&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"9V3sjRVvZ61X4qHkz2gVaxB1kKhMenzjwWhjmhpqgRHK"&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"localnet"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;anchor test&lt;/code&gt; again, and it still all works. ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_XyhNwUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nIRZje0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_XyhNwUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nIRZje0.png" alt="anchor test" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-a-local-network-and-deploy"&gt;
  &lt;/a&gt;
  Start a local network and deploy
&lt;/h3&gt;

&lt;p&gt;To deploy, we need to start up the &lt;code&gt;solana-test-validator&lt;/code&gt; in one terminal, and then simply run &lt;code&gt;anchor deploy&lt;/code&gt; in a new terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dC-u46Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dMc3jDi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dC-u46Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dMc3jDi.png" alt="solana-test-validator" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYklbGnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pypufxN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYklbGnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pypufxN.png" alt="anchor deploy" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have a live deployment, let’s move on to the last &lt;code&gt;S&lt;/code&gt; in ASS - Svelte!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-set-up-frontend"&gt;
  &lt;/a&gt;
  Step 6. Set up frontend
&lt;/h2&gt;

&lt;p&gt;Svelte is an incredibly simple framework/compiler to learn - it’s just HTML + JavaScript + built-in reactive state management!&lt;/p&gt;

&lt;p&gt;If you know nothing about Svelte, I highly recommend you to check out the official &lt;a href="https://svelte.dev/tutorial/basics"&gt;interactive tutorials&lt;/a&gt;, it will only take you 15 minutes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-svelte"&gt;
  &lt;/a&gt;
  Set up Svelte
&lt;/h3&gt;

&lt;p&gt;The workspace Anchor generated for us is a monorepo, so we are going to initialize the frontend right inside the &lt;code&gt;app&lt;/code&gt; directory. Everything from now on is done inside this directory unless notified otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;app
npx degit sveltejs/template &lt;span class="nb"&gt;.&lt;/span&gt;
node scripts/setupTypeScript.js

yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPXqLOHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FY3Gfyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPXqLOHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FY3Gfyv.png" alt="Set up Svelte" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As mentioned in the very beginning, we will need to install a bunch of client-side JavaScript libraries to interact with the blockchain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @project-serum/anchor @solana/web3.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-rollup"&gt;
  &lt;/a&gt;
  Configure Rollup
&lt;/h3&gt;

&lt;p&gt;We need some extra steps to get the Rollup bundler do its job correctly.&lt;/p&gt;

&lt;p&gt;Just like how our tests worked, we need the IDL files for our Svelte app so that it knows which instruction handlers exist on our Solana program, as well as the data type of everything.&lt;/p&gt;

&lt;p&gt;The IDL files and types are located under the &lt;code&gt;target&lt;/code&gt; directory under the Anchor project root. Just copy the entire &lt;code&gt;target/idl&lt;/code&gt; and &lt;code&gt;target/types&lt;/code&gt; directory over into &lt;code&gt;app/src/idl&lt;/code&gt; and &lt;code&gt;app/src/types&lt;/code&gt;. In our case, we only have one &lt;code&gt;gm_solana.json&lt;/code&gt; and one &lt;code&gt;gm_solana.ts&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;We will also need to enable JSON module resolving in &lt;code&gt;app/tsconfig.json&lt;/code&gt;. It will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@tsconfig/svelte/tsconfig.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"resolveJsonModule"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src/**/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node_modules/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"__sapper__/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"public/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we need to install a few plugins. These take care of JSON imports and polyfilling built-in Node.js modules not available in the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @rollup/plugin-json rollup-plugin-node-builtins rollup-plugin-node-globals
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then enable them in &lt;code&gt;rollup.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ... other imports
import json from "@rollup/plugin-json";
import builtins from "rollup-plugin-node-builtins";
import globals from "rollup-plugin-node-globals";

export default {
  // ... other configs
  plugins: [
    // ... other rollup plugins
    resolve({
      browser: true,
      dedupe: ["svelte"],
      preferBuiltins: false, // set this to false
    }),
    // ... more rollup plugins
    json(),
    globals(),
    builtins(),
  ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start the dev server with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuwqyfcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/T0N8323.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuwqyfcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/T0N8323.png" alt="yarn dev" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wkTK8Uv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/EFUhZOa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wkTK8Uv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/EFUhZOa.png" alt="Svelte Hello World" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-connect-wallet-button"&gt;
  &lt;/a&gt;
  Create a “Connect Wallet” button
&lt;/h3&gt;

&lt;p&gt;When a user visits our dApp, the first thing they need to do should be to connect their Phantom Wallet with our app. What exactly this does is that the browser extension injects into our page a “provider”, which our app can use to interact with the blockchain on behalf of the user (of course the user needs to approve and sign any transactions). We will make a “connect wallet” button for them.&lt;/p&gt;

&lt;p&gt;This is essentially the same as when you are already logged into Google or Github, and now want to connect to a third party service using the “Sign in with Google” button.&lt;/p&gt;

&lt;p&gt;Let’s clean up the default page Svelte generated for us and implement this thing, I added comments to highlight important lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// ======== APPLICATION STATE ========&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// reactively log the wallet connection when account state changes,&lt;/span&gt;
  &lt;span class="c1"&gt;// if you don't know what this is, check out https://svelte.dev/tutorial/reactive-declarations&lt;/span&gt;
  &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Connected to wallet: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ======== PAGE LOAD CHECKS ========&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onLoad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;solana&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// set up handlers for wallet events&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// eagerly connect wallet if the user already has connected before, otherwise do nothing&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;onlyIfTrusted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// life cycle hook for when the component is mounted&lt;/span&gt;
  &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// run the onLoad function when the page completes loading&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onLoad&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// return a cleanup function to remove the event listener to avoid memory leaks when the page unloads&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onLoad&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// ======== CONNECT WALLET ========&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleConnectWallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;gm, Solana!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Conditionally render the user account, connect button, or just a warning --&amp;gt;&lt;/span&gt;
  {#if account}
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Your wallet:&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{account}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  {:else if wallet} {#if wallet.isPhantom}
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Phantom Wallet found!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;"{handleConnectWallet}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Connect wallet&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  {:else}
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Solana wallet found but not supported.&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  {/if} {:else}
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Solana wallet not found.&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  {/if}
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;240px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff3e00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;640px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s open up the app again in the browser, and voilà!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y34_zmUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5ukV8M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y34_zmUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5ukV8M.png" alt="Connecting wallet" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch-to-local-network"&gt;
  &lt;/a&gt;
  Switch to local network
&lt;/h3&gt;

&lt;p&gt;By default, the Phantom Wallet connects to the mainnet of Solana. Since we are doing all the testing on local network, you need to go to Settings then Change Network to &lt;em&gt;localhost&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdKGj5ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OwO2KdS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdKGj5ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OwO2KdS.png" alt="Switch to local network" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-implement-guest-book-frontend"&gt;
  &lt;/a&gt;
  Step 7. Implement guest book frontend
&lt;/h2&gt;

&lt;p&gt;Now let’s write the core features of the app. The app should display a list of “gm” messages, tagged with their timestamps and the wallet address of their senders.&lt;/p&gt;

&lt;p&gt;We’ve already interacted with the Solana network before - in the tests! Now we just need to do something similar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connection-helpers-to-the-solana-network"&gt;
  &lt;/a&gt;
  Connection helpers to the Solana network
&lt;/h3&gt;

&lt;p&gt;To get started, we need to have a bunch of parameters at our disposal, namely the &lt;code&gt;programID&lt;/code&gt;, which &lt;code&gt;network&lt;/code&gt; we are interacting with, and some &lt;code&gt;connection&lt;/code&gt; settings with some handy context providers.&lt;/p&gt;

&lt;p&gt;Add this to the existing code in &lt;code&gt;App.svelte&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script lang="ts"&amp;gt;
  // ...
  import * as idl from "./idl/gm_solana.json";
  import type { GmSolana } from "./types/gm_solana";
  import { Connection, PublicKey, clusterApiUrl } from "@solana/web3.js";
  import { Idl, Program, Provider, web3 } from "@project-serum/anchor";
  const { SystemProgram, Keypair } = web3;

  //...

  // ======== CONNECT TO NETWORK ========

  // get program id from IDL, the metadata is only available after a deployment
  const programID = new PublicKey(idl.metadata.address);

  // we are using local network endpoint for now
  const network = "http://127.0.0.1:8899";

  // set up connection with "preflight commitment" set to "confirmed" level, which basically means that our app
  // will treat the transaction as done only when the block is voted on by supermajority.
  // this is similar to waiting for how many confirmations like in Ethereum.
  // you can also set it to "finalized" (even more secure) or "processed" (changes might be rolled back)
  const connection = new Connection(network, "confirmed");

  // create a network and wallet context provider
  const getProvider = () =&amp;gt; {
    const provider = new Provider(connection, wallet, {
      preflightCommitment: "confirmed",
    });
    return provider;
  };

  // helper function to get the program
  const getProgram = () =&amp;gt; {
    const program = new Program(
      idl as Idl,
      programID,
      getProvider()
    ) as Program&amp;lt;GmSolana&amp;gt;;
    return program;
  };
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize-base-account"&gt;
  &lt;/a&gt;
  Initialize Base Account
&lt;/h3&gt;

&lt;p&gt;Now comes the interesting part. Remember that our app needs a base account to store all the gm messages?&lt;/p&gt;

&lt;p&gt;Well, everyone can create their base account and they are all perfectly valid - it’s like that everyone can set up a private Minecraft server. If you insist having a singleton design for your base account, you will need to hardcode the user accounts that are allowed to create them in your program.&lt;/p&gt;

&lt;p&gt;So, in our “gm Solana” app, the visitors will be given two choices - to initialize a new base account or use a pre-existing one. If you want to host your “ultimate, canonical, official gm Solana” app, you can just bake your base account into the Svelte code.&lt;/p&gt;

&lt;p&gt;This is pretty cool isn’t it? ;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script lang="ts"&amp;gt;
  // ...
  // ======== INITIATE BASE ACCOUNT ========

  // the base account that will hold the gm messages,
  // if we want to share the same "gm Solana" instance then we need to provide the same base account
  let baseAccountPublicKey: PublicKey;
  let baseAccountPublicKeyInput = ""; // UI state used for the input field

  // because state in Solana is not tied with programs, users can create their own "baseAccount" for the gm app,
  // the way to share and establish our baseAccount as the "official" one is to provide users with ours up front
  // in the app client. otherwise we can also hardcode a "deployer account" in the program so only it can do it.
  // the initializeAccount() here is a naive implementation that creates a new baseAccount on demand.
  const initializeAccount = async () =&amp;gt; {
    const provider = getProvider();
    const program = getProgram();
    const _baseAccount = Keypair.generate();
    Keypair;

    await program.rpc.initialize({
      accounts: {
        baseAccount: _baseAccount.publicKey,
        user: provider.wallet.publicKey,
        systemProgram: SystemProgram.programId,
      },
      signers: [_baseAccount],
    });
    baseAccountPublicKey = _baseAccount.publicKey;
    console.log("New BaseAccount:", baseAccountPublicKey.toString());
    await getGmList(); // first fetch
  };

  // alternative to initializeAccount(), loadAccount() allows you to pick up a previously created baseAccount
  // so we can share the same "gm Solana" instance!
  const loadAccount = async () =&amp;gt; {
    baseAccountPublicKey = new PublicKey(baseAccountPublicKeyInput);
    console.log("Loaded BaseAccount:", baseAccountPublicKey.toString());
    await getGmList(); // first fetch
  };
&amp;lt;/script&amp;gt;
&amp;lt;main&amp;gt;
  &amp;lt;!-- other stuff... --&amp;gt;
  {#if account}
    {#if !baseAccountPublicKey}
      &amp;lt;button on:click={initializeAccount}&amp;gt;Initialize account&amp;lt;/button&amp;gt;
      or
      &amp;lt;input
        type="text"
        placeholder="use existing account..."
        bind:value={baseAccountPublicKeyInput}
      /&amp;gt;
      &amp;lt;button on:click={loadAccount}&amp;gt;Load&amp;lt;/button&amp;gt;
    {:else}
      Using gm solana base account: {baseAccountPublicKey.toString()}
    {/if}
  {/if}
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#interact-with-the-program"&gt;
  &lt;/a&gt;
  Interact with the program
&lt;/h3&gt;

&lt;p&gt;Now we are all set to interact with the blockchain and wire up local state! We’ll set up a couple of extra UI state variables and render all the gm’s neatly in a list. Of course there’s also a submit button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script lang="ts"&amp;gt;
  // ...
  // ======== APPLICATION STATE ========
  // ... other state
  let gmList = [];
  let gmMessage = "";

  // ======== PROGRAM INTERACTION ========

  // interacts with our program and updates local the gm list
  const getGmList = async () =&amp;gt; {
    const program = getProgram();
    const account = await program.account.baseAccount.fetch(
      baseAccountPublicKey
    );

    console.log("Got the account", account);
    gmList = account.gmList as any[];
  };

  // interacts with our program and submits a new gm message
  const sayGm = async () =&amp;gt; {
    const provider = getProvider();
    const program = getProgram();

    await program.rpc.sayGm(gmMessage, {
      accounts: {
        baseAccount: baseAccountPublicKey,
        user: provider.wallet.publicKey,
      },
      // if we don't supply a signer, it will try to use the connected wallet by default
    });
    console.log("gm successfully sent", gmMessage);
    gmMessage = ""; // clears the input field

    await getGmList(); // updates the local gm list
  };

  $: console.log("gmList:", gmList); // just some extra logging when the gm list changes
&amp;lt;/script&amp;gt;
&amp;lt;main&amp;gt;
  &amp;lt;!-- other stuff... --&amp;gt;
  {#if baseAccountPublicKey}
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;gm List:&amp;lt;/h3&amp;gt;
      &amp;lt;ul&amp;gt;
        {#each gmList as gm}
          &amp;lt;li&amp;gt;
            &amp;lt;b&amp;gt;{gm.message}&amp;lt;/b&amp;gt;, said {gm.user.toString().slice(0, 6)}... at {new Date(
              gm.timestamp.toNumber() * 1000
            ).toLocaleTimeString()}
          &amp;lt;/li&amp;gt;
        {/each}
      &amp;lt;/ul&amp;gt;
      &amp;lt;button on:click={getGmList}&amp;gt;Refresh gms!&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;Say gm:&amp;lt;/h3&amp;gt;
      &amp;lt;input
        type="text"
        placeholder="write something..."
        bind:value={gmMessage}
      /&amp;gt;
      &amp;lt;button on:click={sayGm} disabled={!gmMessage}&amp;gt;Say gm!&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  {/if}
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your browser wallet doesn’t have local network SOL tokens, you can always airdrop yourself a bunch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;solana airdrop 1000 mmmmyyyyywwwwwaaaalllleeeetttt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rCkajrJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PdCEQaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rCkajrJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PdCEQaf.png" alt="Airdrop" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it, we have finished the “gm Solana” dApp! Have fun playing with it in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--giqjvFth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/oWh5iOf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--giqjvFth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/oWh5iOf.png" alt="Final demo" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-deploy-on-public-devnet-or-mainnet"&gt;
  &lt;/a&gt;
  Step 8. Deploy on public devnet (or mainnet)
&lt;/h2&gt;

&lt;p&gt;So far we’ve only been deploying to localhost running the test validator. To deploy it to devnet (or mainnet-beta), you need a few extra steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-tooling-configs"&gt;
  &lt;/a&gt;
  Update tooling configs
&lt;/h3&gt;

&lt;p&gt;First, you need to switch the Solana CLI to devnet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;solana config &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;--url&lt;/span&gt; devnet
solana config get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, open the &lt;code&gt;Anchor.toml&lt;/code&gt; file in project root to update the &lt;code&gt;cluster&lt;/code&gt; and &lt;code&gt;[programs.localnet]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Anchor.toml&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;programs.devnet]
gm-solana &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"foooooooobaaaaaaar"&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;provider]
cluster &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"devnet"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don’t have devnet SOL, you can airdrop yourself 5 at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;solana airdrop 5 mmmmyyyyywwwwwaaaalllleeeetttt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can run build and deploy again!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;anchor build
anchor deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-parameters-in-app"&gt;
  &lt;/a&gt;
  Update parameters in app
&lt;/h3&gt;

&lt;p&gt;Since we are deploying to the public devnet, you will need to switch the network in Phantom Wallet to devnet of course.&lt;/p&gt;

&lt;p&gt;Then, you only need to change one thing in the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script lang=ts&amp;gt;
  // ...
  // // we are using local network endpoint for now
  // const network = "http://127.0.0.1:8899";

  // we are using devnet endpoint
  const network = clusterApiUrl('devnet');
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;yarn dev&lt;/code&gt; or &lt;code&gt;yarn build&lt;/code&gt; in the &lt;code&gt;app&lt;/code&gt; directory again, and you are all set!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-badass"&gt;
  &lt;/a&gt;
  That’s bad-ASS!
&lt;/h2&gt;

&lt;p&gt;Now you have mastered the art of ASS appreciation, you are an ASS stack connoisseur!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Also building in Web3? Let's connect via Twitter&lt;/em&gt; 👋 &lt;strong&gt;&lt;a href="https://twitter.com/0xmuse"&gt;@0xMuse&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>web3</category>
      <category>solana</category>
      <category>svelte</category>
    </item>
    <item>
      <title>Awesome presentations deserve beautiful code</title>
      <author>Dr. Gernot Starke</author>
      <pubDate>Thu, 20 Jan 2022 11:43:30 +0000</pubDate>
      <link>https://dev.to/arc42/awesome-presentations-deserve-beautiful-code-3jn9</link>
      <guid>https://dev.to/arc42/awesome-presentations-deserve-beautiful-code-3jn9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#ever-seen-ugly-source-code-on-a-slide"&gt;
  &lt;/a&gt;
  Ever seen ugly source code on a slide?
&lt;/h3&gt;

&lt;p&gt;Welcome to reality. Every now and then we all need to put code samples onto PowerPoint or Keynote presentations.&lt;/p&gt;

&lt;p&gt;But wait - presentation programs are made for &lt;strong&gt;text&lt;/strong&gt;, not for &lt;strong&gt;code&lt;/strong&gt;: &lt;br&gt;
They loose all syntax highlighting when you paste your valuable code into their limited textboxes...&lt;br&gt;
Look at this horrible example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YSXNxO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uewhzmq3z130owhmn5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YSXNxO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uewhzmq3z130owhmn5u.png" alt="Slide with ugly source code" width="880" height="609"&gt;&lt;/a&gt;&lt;br&gt;Fig.1 - Slide with ugly code.
  &lt;/p&gt;

&lt;p&gt;I like to introduce &lt;a href="https://carbon.now.sh"&gt;carbon&lt;/a&gt; - a free website that elegantly solves this problem. On their website the creators describe their goal short and concise: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Carbon lets you create and share beautiful images of your source code". &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You see a possible result below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYc2UkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb78wmihb4gy8wxq5ve0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYc2UkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb78wmihb4gy8wxq5ve0.png" alt="Slide with beautiful source code (by carbon.now)" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;
Fig.2 - Slide with beautiful code.

 

&lt;p&gt;What a difference!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nicen-easy"&gt;
  &lt;/a&gt;
  Nice'n Easy
&lt;/h3&gt;

&lt;p&gt;Carbon is incredbly easy to use: Simply paste your code in the textbox or drag a source file.&lt;/p&gt;

&lt;p&gt;Carbon has a number of interesting configuration options available: Themes, borders, (fake) window controls and more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#predefines-themes"&gt;
  &lt;/a&gt;
  Predefines themes
&lt;/h4&gt;

&lt;p&gt;Several themes are available, all except the Darcula-Pro themes are free:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8zUxXil5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm1smn1yrm2r78ee304e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8zUxXil5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm1smn1yrm2r78ee304e.png" alt="carbon themes (1) - Monokai" width="880" height="672"&gt;&lt;/a&gt; &lt;/p&gt;
Fig.3 - carbon theme (Monokai).

 

&lt;p&gt;If you prefer a lighter theme, you are covered too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXbXfFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcr3xkgpwmjslcgveha7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXbXfFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcr3xkgpwmjslcgveha7.png" alt="carbon themes (2) - OneLight" width="880" height="690"&gt;&lt;/a&gt;&lt;/p&gt;
Fig.4 - carbon theme (OneLight)

 

&lt;p&gt;In case you need to, you may even configure your own custom theme. It's a lot of work, and for me the standard themes are way good enough.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#additional-layout-options"&gt;
  &lt;/a&gt;
  Additional Layout Options
&lt;/h4&gt;

&lt;p&gt;You can set padding, border color, shadow, width, (artificial) window controls and a few more options:&lt;/p&gt;

&lt;p&gt;&lt;a href="" class="article-body-image-wrapper"&gt;&lt;img alt="Some config options"&gt;&lt;/a&gt;&lt;/p&gt;
Fig.5 - some config options.

 

&lt;h4&gt;
  &lt;a href="#export-to-png-and-svg"&gt;
  &lt;/a&gt;
  Export to png and svg
&lt;/h4&gt;

&lt;p&gt;As expected, carbon can export the image of your source as png or svg:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xo5ZZaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzs8qgr34x81atllyibl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xo5ZZaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzs8qgr34x81atllyibl.png" alt="carbon export options" width="532" height="404"&gt;&lt;/a&gt;&lt;/p&gt;
Fig.6 - export options.

 

&lt;h4&gt;
  &lt;a href="#alternatives"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h4&gt;

&lt;p&gt;All right, you may also copy/paste source code as RTF (and hope that your presentation tool really preserves formatting).&lt;br&gt;
You could either paste your code to Microsoft-Word (crossing fingers again for preserved formatting), and export it to PowerPoint from Word. Might work, but is less fun. And in contrast to carbon.sh, it does no good to our atmosphere :-).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-accessibility-issues"&gt;
  &lt;/a&gt;
  But: Accessibility Issues
&lt;/h3&gt;

&lt;p&gt;When you convert source code to images, you have to (manually) take care of &lt;a href="https://www.innoq.com/en/topics/accessibility/"&gt;accessibility&lt;/a&gt;.&lt;br&gt;
Images like the ones generated by carbon.sh are not suitable for screen readers.&lt;br&gt;
If you want to adhere to accessibility good practices, you should therefore include the source code shown in the alt-tag of the generated images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enjoy"&gt;
  &lt;/a&gt;
  Enjoy!
&lt;/h3&gt;

&lt;p&gt;You never again need to include source code as plain and ugly text in any of your presentations!&lt;/p&gt;

&lt;p&gt;One final remark: The name "carbon" was chosen by the authors because they want to reduce CO2 in the atmosphere, read the small print (&lt;a href="https://www.wren.co/join/carbon"&gt;...offsets&lt;/a&gt;) on their website. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://carbon.now.sh"&gt;carbon.now.sh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The creators, &lt;a href="https://twitter.com/carbon_app"&gt;carbon_app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Their &lt;a href="https://github.com/carbon-app/carbon"&gt;Github repository (carbon-app)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thanx"&gt;
  &lt;/a&gt;
  Thanx
&lt;/h3&gt;

&lt;p&gt;Kudos to Joachim Praetorius for improving my English and Lars Hupel for pointing out the accessibility issues!&lt;/p&gt;

&lt;p&gt;Thanx to &lt;a href="https://unsplash.com/photos/E0bIdzi8zoQ"&gt;Miguel Henriques&lt;br&gt;
&lt;/a&gt; for the header image.&lt;/p&gt;

</description>
      <category>presentation</category>
      <category>code</category>
    </item>
    <item>
      <title>Day 83 of 100 Days of Code &amp; Scrum: Deploying Services Pages to Production</title>
      <author>Rammina</author>
      <pubDate>Thu, 20 Jan 2022 11:43:15 +0000</pubDate>
      <link>https://dev.to/rammina/day-83-of-100-days-of-code-scrum-deploying-services-pages-to-production-1jo1</link>
      <guid>https://dev.to/rammina/day-83-of-100-days-of-code-scrum-deploying-services-pages-to-production-1jo1</guid>
      <description>&lt;p&gt;Greetings, everyone!&lt;/p&gt;

&lt;p&gt;Not much free time today, but at least I finished coding all of the services pages for my &lt;a href="https://www.rammina.com"&gt;business site&lt;/a&gt;. I've also tested and deployed all of them, so here are the three of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rammina.com/services/web-dev"&gt;Web Development page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rammina.com/services/digital-marketing"&gt;Digital Marketing page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rammina.com/services/writing"&gt;Writing page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As for learning, I did a little bit of practice with Next.js, especially with writing API function handlers on the &lt;code&gt;/pages/api&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I did various things, such as working on my &lt;a href="https://www.rammina.com"&gt;company website&lt;/a&gt;, learning Next.js, and picking up MySQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finished coding the services-related pages.&lt;/li&gt;
&lt;li&gt;did some testing and checking before deploying the updates to production.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;practiced writing APIs for Next.js.&lt;/li&gt;
&lt;li&gt;continued going through &lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzmüller&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I didn't have the time to read an article about Scrum for today.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! Have a good day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzmüller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swr.vercel.app/"&gt;SWR official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/7S_tz1z_5bA"&gt;MySQL Tutorial for Beginners by Mosh Hamedani&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sqlzoo.net/wiki/SQL_Tutorial"&gt;SQLZoo's SQL Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Open Up The Cloud Newsletter #28 (October Recap 2021)</title>
      <author>Lou (🚀 Open Up The Cloud ☁️)</author>
      <pubDate>Thu, 20 Jan 2022 11:20:58 +0000</pubDate>
      <link>https://dev.to/aws-builders/open-up-the-cloud-newsletter-28-october-recap-2021-15e7</link>
      <guid>https://dev.to/aws-builders/open-up-the-cloud-newsletter-28-october-recap-2021-15e7</guid>
      <description>&lt;p&gt;Reading this somewhere that’s not your email inbox? &lt;a href="https://newsletter.thedevcoach.co.uk/"&gt;sign-up here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;What is going on cloud friend! It’s been another month in the cloud world, so it’s time to catch up on everything that’s been going on!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghkQyZ1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/05/openupthecloudnewsletter-760x422.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghkQyZ1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/05/openupthecloudnewsletter-760x422.png" alt="" width="760" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s get into it…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-months-top-cloud-picks"&gt;
  &lt;/a&gt;
  This Month’s Top Cloud Pick(s) ⏫
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you only read one or two things this month, let it be this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reinvent.awsevents.com/"&gt;AWS ReInvent&lt;/a&gt; (AWS) – By the time I send you the newsletter next month, we’ll be talking about AWS ReInvent. It’s always a crazy and busy time of the year, trying to keep up with all the updates, and the opinion pieces that go out around that time. For Re:Invent this year, it seems that some of the content is going to be available online (but not all of it, sadly). However, the content will include the keynotes 🎉 (which I strongly recommend). So be sure to start checking out the schedule ahead of time to make a plan 🧐 of what you want to watch and/or attend 😀 I’m sure I’ll also be spending a lot of time on Twitter (&lt;a href="https://twitter.com/loujaybee"&gt;@loujaybee&lt;/a&gt;) sharing updates, so let’s chat as they roll in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feature-releases-amp-announcements"&gt;
  &lt;/a&gt;
  Feature Releases &amp;amp; Announcements  📚
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;New stuff in the cloud, that you probably should know about.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewbrown"&gt;100DaysOfCloud Twitter Spaces&lt;/a&gt; (Andrew Brown) – Andrew has been on fire 🔥 recently doing some cloud-focused Twitter spaces. The last time I checked, Andrew was shooting for 100 spaces in 100 days—which is totally nuts 🥜 but doesn’t surprise me because Andrew is a total workhorse. Either way, if you’re not already following Andrew on Twitter, this is your nudge!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://learntocloud.guide/"&gt;Learn To Cloud Guide&lt;/a&gt; – From what I’ve seen, the good folks behind the &lt;a href="https://github.com/learntocloud/learn-to-cloud"&gt;learn to cloud guide&lt;/a&gt; (&lt;a href="https://twitter.com/madebygps"&gt;Gwyneth&lt;/a&gt;, &lt;a href="https://twitter.com/rishabk7"&gt;Rishab&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/antonio_lofiego"&gt;Antonio&lt;/a&gt;) are putting in some big efforts to really ✨ jazz up ✨ the project, it’s now hosted on it’s own website at &lt;a href="https://learntocloud.guide/"&gt;learntocloud.guide&lt;/a&gt; and I hear they have some pretty serious plans to build the project up. Watch this space and give these guys a follow to keep up with what they have planned!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/compute/accelerating-serverless-development-with-aws-sam-accelerate/"&gt;AWS Sam Accelerate&lt;/a&gt; (Eric Johnson, AWS Blog) – It seems that &lt;a href="https://www.youtube.com/watch?v=JurvPFBgEHs"&gt;everyone and their mums&lt;/a&gt; are now wading in to try to solve &lt;a href="https://twitter.com/aeduhm/status/1454206046403235852?s=20"&gt;the local development vs cloud debate&lt;/a&gt;. In this article, read about some updates from AWS SAM to improve the speed of their local development. In their words: “AWS SAM Accelerate brings the developer to the cloud, and not the cloud to the developer”. AWS SAM has introduced some new ways to sync your code and watch for changes, to make the whole deployment and testing cycle faster. It seems like companies are becoming more and more bullish of this idea of &lt;a href="https://www.serverless.com/cloud/docs/workflows/personal-instances"&gt;personal, and/or ephemeral environments&lt;/a&gt; for development (&lt;a href="https://www.serverless.com/cloud/docs"&gt;serverless cloud&lt;/a&gt; have also &lt;a href="https://twitter.com/jeremy_daly/status/1396809207983312898?s=20"&gt;been taking a swing&lt;/a&gt; at the topic). And now I feel like more than ever we’re dying for someone to &lt;a href="https://twitter.com/loujaybee/status/1454368806403465217?s=20"&gt;write a book on this topic&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#howtos-amp-educational-pieces"&gt;
  &lt;/a&gt;
  How-To’s &amp;amp; Educational Pieces 🤓
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Articles on how to do various cool things with the cloud.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://openupthecloud.com/cloud-roles-explained/"&gt;What Are The Different Roles In The Cloud?&lt;/a&gt; (Open Up The Cloud) – Ever wondered what the actual difference is between roles like SRE, Cloud Engineer, DevOps, etc? In this article, I dive into the roles, what they do that we have in the cloud, look at how much 💰 earning potential 💰 each role has, how much coding is involved 💻 and whether or not the role is suitable for a beginner 👶. The article was inspired originally by &lt;a href="https://www.instagram.com/p/CUFzvPCAgtE/"&gt;this Instagram post&lt;/a&gt; where I talked about the different cloud roles, which people seemed to think was useful! 🙏 Andrew Brown also has some nice career blogs on his site &lt;a href="https://iamcloud.dev/"&gt;iamcloud.dev&lt;/a&gt;, where he talks about similar topics like &lt;a href="https://iamcloud.dev/is-it-recommended-to-first-be-a-system-admin-in-a-user-support-role-before-becoming-cloud-engineer-in-azureaws-gcp"&gt;do you need to be a sys admin/support role before working in cloud&lt;/a&gt;, which I think are also worth checking out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dataon.cloud/moving-to-cloud"&gt;Moving To Cloud&lt;/a&gt; (Anurag Kale) – In this article, &lt;a href="https://twitter.com/iAnuragKale"&gt;Anurag&lt;/a&gt; shares his journey of how he moved from a SQL dev to the cloud industry (which started life as &lt;a href="https://twitter.com/openupthecloud/status/1457962559907172352?s=20"&gt;a Tweet thread&lt;/a&gt;). Anurag covers how you should start by complimenting your existing skillset, become involved in communities 👨‍👧 (&lt;a href="https://twitter.com/loujaybee/status/1367807258910941184?s=20"&gt;I couldn’t agree more&lt;/a&gt;) and to teach 🧑‍🏫 (of course, I agree), and finally to look into getting certified 🥇 as a way to structure your learning. Anurag’s advice seems to reflect very much my own (e.g. &lt;a href="https://openupthecloud.com/where-to-start-cloud-computing/"&gt;Where To Start With Cloud Computing? 5 Quick Tips To Get Hands-On Today!&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/iamvlaaaaaaad/status/1457676356033171465?s=20"&gt;How Should You Run Production Containers On AWS?&lt;/a&gt; (Vlad, Twitter) – There are precisely ✨ 4 million ✨ ways to do anything in the cloud these days, and there’s no exception when it comes to choices for running containers. Where do you start when choosing somewhere to run your containers? You’ve got Kubernetes, Managed Kubernetes (EKS), ECS Fargate, ECS with EC2, and now &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/"&gt;even AWS Lambda runs containers&lt;/a&gt;. So what do you choose? Vlad has put together this really neat flowchart of the different options and his suggestions depending on your situation. It’s a nice decision tree if you’re thinking about which AWS service to use for deploying/running your containers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/p/CUdNjmRAv0I/"&gt;Should You Learn To Code When Learning Cloud?&lt;/a&gt; (Open Up The Cloud) – “&lt;a href="https://www.instagram.com/p/CUdNjmRAv0I/"&gt;I thought maybe cloud computing is a great career option for me because it requires little coding&lt;/a&gt;” was the &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thcWma10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s.w.org/images/core/emoji/13.1.0/72x72/2709.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thcWma10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s.w.org/images/core/emoji/13.1.0/72x72/2709.png" alt="✉" width="72" height="72"&gt;&lt;/a&gt; email question I received. But… is it even true? 🤔 Does cloud require coding? And if so—when? Under what circumstances? It’s a common question I get asked a lot, and I’ve also written a blog about &lt;a href="https://openupthecloud.com/cloud-engineers-code"&gt;whether cloud engineers code&lt;/a&gt; where I talk also about what type of code cloud engineers write, such as infrastructure as code, build scripts, and monitoring and tooling. My short answer is: You can get into/work into the cloud without writing any code, but I think by approaching it with that mentality you’re potentially short-changing your learning, and limiting your career growth and potential. But you’ll have to check out the post for all the details!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/compute/operating-serverless-at-scale-implementing-governance-part-1/"&gt;Operating Serverless At Scale – Governance (Part 1)&lt;/a&gt; (Jerome Van Der Linden, AWS) — This is the first article in a three-part series covering the topic of “governance”—or in friendlier terms: 🏷 tagging and getting control of resource groupings. If you’ve ever had to do anything like managing costs 💰 in large cloud accounts &lt;a href="https://twitter.com/loujaybee/status/1458683950298238977?s=20"&gt;you know how important (and difficult!) tagging can be&lt;/a&gt;. Jeromes article covers how you can use things like tag policies, service control policies, AWS Config, etc to manage the situation. There’s some good, practical advice in here, and it’s not just serverless related.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/compute/operating-serverless-at-scale-improving-consistency-part-2/"&gt;Operating Serverless At Scale – Consistency (Part 2)&lt;/a&gt; (Jerome Van Der Linden, AWS) — This second article goes into topics of standardization, with the examples of SAM templates and base images. I know from &lt;a href="https://medium.com/dazn-tech/building-a-dx-team-lessons-learned-4a66446088bc"&gt;working on internal platform teams on developer experience&lt;/a&gt; just how big a topic standardization and templates can be. Rolling templates out to teams, and managing them, ensuring they’re used, maintained, and kept up-to-date, is a really difficult task. &lt;a href="https://backstage.io/docs/features/software-templates/software-templates-index"&gt;Tools like Backstage can help us here&lt;/a&gt;. The second part of the article covers using base images, which is a fairly standard industry practice. If you’re using containers with Lambda, or Fargate it does make sense to have standardized base images, not just for consistency but also for security. Tools like &lt;a href="https://www.packer.io/"&gt;Packer&lt;/a&gt; can also help here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/compute/operating-serverless-at-scale-keeping-control-of-resources-part-3/"&gt;Operating Serverless At Scale (Controlling Resources)&lt;/a&gt; (Jerome Van Der Linden) — This final article in the series covers topics such as implementing &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege"&gt;the principle of least privilege&lt;/a&gt; through IAM controls. I always found this principle is actually a tough one to apply in practice. It makes sense on paper, but can be hard to enforce without tying yourself in knots. Jerome also discusses the important topic of reactive and proactive guardrails, which I think is a great way to “frame” your thinking when it comes to implementing these configurations throughout your account. Are you trying to slow software engineers down, or help them and speed them up?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ankit01oss/7-github-projects-to-supercharge-your-docker-practices-2i80"&gt;7 GitHub Projects To SuperCharge Your Docker Practices&lt;/a&gt; (DEV.TO, Ankit Anand) — Some nice links in here to some projects with tutorials, best practices, and performance improvement utilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opinion-pieces-miscellaneous"&gt;
  &lt;/a&gt;
  Opinion Pieces / Miscellaneous 💭
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Cloud commentary, spicy takes, memes, and just-for-fun stuff!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/alexeversmeyer/state-of-my-cloud-journey-oct-26-2021-1c3j"&gt;State Of My Cloud Journey&lt;/a&gt; (Alex Eversmeyer) – I stumbled across Alex’s DEV.TO updates whilst on my travels around the cloud space, and liked the approach. Starting a journal like this can help in so many different ways: it keeps you accountable, it can potentially make you friends/connections that can lead to a job and helps you to &lt;a href="https://acloudguru.com/blog/engineering/the-best-way-to-find-a-cloud-job"&gt;avoid playing resume roulette&lt;/a&gt;. So if you’re curious to see what other cloud learners are doing, go check out Alex’s updates, and maybe you should consider starting a journal of your own… I’ve also seen Alex about in the &lt;a href="https://cloudresumechallenge.dev/"&gt;Cloud Resume Challenge&lt;/a&gt; Discord, and if you’re not in there already—you should come join us!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamelmore.medium.com/descent-into-cloud-madness-12-aws-certifications-in-6-weeks-965de12c626d"&gt;12 AWS Certifications in 6 weeks&lt;/a&gt; (Adam Elmore) – Okay, so this is a pretty crazy thought experiment 💡… and there’s just so much to unpack here (don’t worry, I’ve taken a note to &lt;a href="https://www.youtube.com/c/OpenUpTheCloud"&gt;make a YouTube video&lt;/a&gt; 🎥 on this topic!). For instance… if someone can pass all the AWS exams in 6 weeks—what does that say about their value? Also… is this something that we should recommend? Short answer: not really! We don’t have time to unpack this right here today, so I’ll let you make up your own mind… however, there are some really great links and resources mentioned in the article such as Jon Bonso’s practice exams, and Stephane Mareeks courses, both of which &lt;a href="https://openupthecloud.com/recommended-resources/aws-certification-beginner/"&gt;I strongly recommend&lt;/a&gt;. You should also go follow &lt;a href="https://twitter.com/aeduhm"&gt;Adam&lt;/a&gt; on Twitter, and also &lt;a href="https://twitter.com/_awsfm"&gt;sign-up for AWS FM&lt;/a&gt;, where Adam is interviewing a bunch of different people in the AWS/cloud space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.cloudflare.com/october-2021-facebook-outage/"&gt;Understanding How Facebook Disappeared From The Internet&lt;/a&gt; (CloudFlare Blog) – Sometimes it can be a scary prospect deploying some new code, or running a command that could impact production code. As software engineers, we often have nightmares that something we do ends up causing some severe outage down the line. In this case, for some poor engineers, that nightmare became true when they took down a fairly substantial portion of the internet. How is that even possible? What went wrong. Take a read to learn a bit more about how Facebook borked their BGP and in turn took down their entire stack, including WhatsApp and Instagram 😬&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/loujaybee/status/1458892118613794825?s=20"&gt;Werner Vogels Is A Celeb&lt;/a&gt; (Twitter, loujaybee) — This easter-egg that I found on &lt;a href="https://aws.amazon.com/rekognition/"&gt;the AWS Rekognition marketing pages&lt;/a&gt; cracked me up. You have to see it for yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-updates"&gt;
  &lt;/a&gt;
  Personal Updates 🙍🏼‍♂️
&lt;/h2&gt;

&lt;p&gt;On a YouTube front, I’ve been working on a series called “Cloud: You Don’t Know What You Don’t Know” (&lt;a href="https://www.youtube.com/watch?v=z5_f-lbkn7o&amp;amp;list=PLEk97Q5Nj5oezIxXf1B6WT481Q0vmAiAl"&gt;you can find the full series here&lt;/a&gt;). The idea behind the series is to dive into some more “advanced” cloud topics, with the intention to give you some insights and tips for ways that you can extend and improve your own cloud projects to help out in interviews, and generally just take your projects to that next level. I started off the series &lt;a href="https://www.youtube.com/watch?v=z5_f-lbkn7o"&gt;talking about database migrations&lt;/a&gt;, then &lt;a href="https://www.youtube.com/watch?v=z5_f-lbkn7o"&gt;secrets management&lt;/a&gt;, and then most recently talking about &lt;a href="https://www.youtube.com/watch?v=BS-GHxLvv_s"&gt;adding logs to your project&lt;/a&gt;. Hopefully, these videos help to give you some ideas and inspiration of ways that you can boost your own cloud projects, let me know what you think in the comments 🙏&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#see-you-next-month"&gt;
  &lt;/a&gt;
  See You Next Month 👋
&lt;/h2&gt;

&lt;p&gt;That’s all for this month’s newsletter, thanks again for joining!&lt;/p&gt;

&lt;p&gt;If you’ve got feedback on the newsletter, e.g. if there’s something you would like to see more or less of reply to the email and let me know. I’m always looking for ways to make the newsletter more relevant and useful for you 🙏.&lt;/p&gt;

&lt;p&gt;Speak soon, cloud friends!&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;Reading this somewhere that’s not your email inbox? &lt;a href="https://newsletter.thedevcoach.co.uk/"&gt;sign-up here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://openupthecloud.com/open-up-the-cloud-newsletter-28/"&gt;Open Up The Cloud Newsletter #28 (October Recap 2021)&lt;/a&gt; appeared first on &lt;a href="https://openupthecloud.com"&gt;Open Up The Cloud&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>serverless</category>
      <category>cloud</category>
      <category>news</category>
    </item>
    <item>
      <title>2021 Summary: A Rebrand To “Open Up The Cloud” &amp; The Start Of Video Content</title>
      <author>Lou (🚀 Open Up The Cloud ☁️)</author>
      <pubDate>Thu, 20 Jan 2022 11:20:00 +0000</pubDate>
      <link>https://dev.to/loujaybee/2021-summary-a-rebrand-to-open-up-the-cloud-the-start-of-video-content-17k3</link>
      <guid>https://dev.to/loujaybee/2021-summary-a-rebrand-to-open-up-the-cloud-the-start-of-video-content-17k3</guid>
      <description>&lt;p&gt;It’s now become a tradition for me to sit down and do an end of year review, if you want to see the previous years, here is &lt;a href="https://openupthecloud.com/one-thing-ill-focusing-2018/"&gt;2017&lt;/a&gt;, &lt;a href="https://openupthecloud.com/2018-a-year-in-review/"&gt;2018&lt;/a&gt;, &lt;a href="https://openupthecloud.com/2019-a-year-in-review/"&gt;2019&lt;/a&gt; and &lt;a href="https://openupthecloud.com/2020-a-year-in-review/"&gt;2020&lt;/a&gt;. But wow, what a crazy year 2021 has been! Sitting down to look at the numbers, I’m even a little blown away myself. It’s been a year of really pushing myself, personally to get out there, join the community more, engage in video content.&lt;/p&gt;

&lt;p&gt;Looking back, it’s hard to recognise where things were at the start of the year. I started the year with no real YouTube videos or subscribers, no real Instagram account, no real Twitter following, etc. In just a year, things already look incredibly different. But more on that later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQNB3OgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/05/logo-1-760x377.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQNB3OgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/05/logo-1-760x377.png" alt="" width="760" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with the numbers…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-year-in-numbers"&gt;
  &lt;/a&gt;
  A Year In Numbers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;🚢 33 YouTube Videos published.&lt;/li&gt;
&lt;li&gt;🚢 12 Blogs published.&lt;/li&gt;
&lt;li&gt;🚢 11 newsletters published.&lt;/li&gt;
&lt;li&gt;👀 148K unique users visited the blog (up from 80K in 2020)&lt;/li&gt;
&lt;li&gt;👀 20K blog visitors per month (up from 8K in 2020)&lt;/li&gt;
&lt;li&gt;👀 18K YouTube views (up from 1K in 2020)&lt;/li&gt;
&lt;li&gt;📧 681 newsletter subscribers, with a 40% open rate (up from 300)&lt;/li&gt;
&lt;li&gt;⏫ 2267 personal Twitter followers (up from 526 followers)&lt;/li&gt;
&lt;li&gt;⏫ 626 YouTube subscribers (up from 12!)&lt;/li&gt;
&lt;li&gt;⏫ 531 followers on Open Up The Cloud twitter (from 0!)&lt;/li&gt;
&lt;li&gt;⏫ 892 Instagram Followers (from 40)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-rebrand-to-open-up-the-cloud"&gt;
  &lt;/a&gt;
  A Rebrand To “Open Up The Cloud”
&lt;/h2&gt;

&lt;p&gt;A big milestone of 2021 was the rebrand to “Open Up The Cloud”. It’s actually wild for me to think that even just 6 months ago, Open Up The Cloud was still branded as “The Dev Coach”!&lt;/p&gt;

&lt;p&gt;A few years ago, “cloud” wasn’t even really a career path, it was more like a tool that some tech folks used. Now, cloud is a whole career path for architects, data engineers, serverless folks…&lt;/p&gt;

&lt;p&gt;It was back in 2019 that I decided to double-down on cloud content, and ever since that decision, I’ve continued to see huge industry growth, which gave me the confidence to make the rebrand.&lt;/p&gt;

&lt;p&gt;It’s hard to overstate how impactful the branding change has been. Not only was I able to shed the “dev coach” branding which made me cringe when I shared content, but “Open Up The Cloud” more embodies the vision I had. “Cloud” is big enough to be interesting and varied, but narrow enough that people know exactly what it is that I’m talking about.&lt;/p&gt;

&lt;p&gt;To read more about the name change, check out this &lt;a href="https://www.instagram.com/p/CNt0eQ4AtRP/"&gt;instagram post&lt;/a&gt; / this &lt;a href="https://www.youtube.com/watch?v=JnqUElnhXus"&gt;interview with Sai&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-commitment-to-being-open"&gt;
  &lt;/a&gt;
  A Commitment To Being Open
&lt;/h2&gt;

&lt;p&gt;Another big milestone for me this year was &lt;a href="https://openupthecloud.com/income-report-december-2021/"&gt;publishing the first income reports&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I won’t go into the background much here, as I think it’s covered well in the blog post, and in &lt;a href="https://twitter.com/loujaybee/status/1475902397948047367?s=20"&gt;this Twitter thread&lt;/a&gt;. But, the TL;DR is: all of the income and expenses are now public, and I’ll report on them every month. I’ll use the report to share about social media and other metrics growth, too.&lt;/p&gt;

&lt;p&gt;Opening up the finances is a new chapter for Open Up The Cloud.&lt;/p&gt;

&lt;p&gt;I did a lot of meditating and thinking on this topic. At this point, I’m not personally motivated by random financial goals. I’m motivated by the potential impact I can have. Open Up The Cloud was, and now simply continues to be put the audience and community first.&lt;/p&gt;

&lt;p&gt;Now, let’s look back at last years goal, whether I hit it, and what I learned over 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-years-goal-write-100-blog-articles"&gt;
  &lt;/a&gt;
  Last Years Goal: Write 100 Blog Articles!
&lt;/h2&gt;

&lt;p&gt;Last year’s goal was to write 100 blog articles, and get to 100,000 monthly recurring users. It was a big goal that’s for sure. Did I hit the goal? Nope, not even close! I only wrote 12 articles throughout 2021. However… Was it such a huge loss? Not at all.&lt;/p&gt;

&lt;p&gt;Throughout the year I achieved a much bigger goal, which was pushing through some blockers I had with publishing more “personal” content. In 2021, I posted: 33 YouTube videos, published 11 newsletters, and wrote 12 pretty big blog posts.&lt;/p&gt;

&lt;p&gt;If we add those all up, it equals 56 individual items of high-quality content, that I’m proud of. It’s not the 100 articles that I wanted, but it’s more than 1 piece of content per week, and as far as I’m concerned, that’s some really good output. I’m proud of that work. For YouTube, I had to learn photography, research and buy equipment, teach myself how to edit, learn thumbnails, improve my presentation on camera, and more. Behind those videos was a load of thinking, research and work.&lt;/p&gt;

&lt;p&gt;To build credibility in an online world, we must constantly remind people that we know what we’re talking about. And it’s our responsibility to constantly build that credibility. We can’t assume everyone knows us and trusts us—they don’t. When people discover our work for the first time, we have no credibility. So, we have to re-share old work, and “remind” people of our credibility.&lt;/p&gt;

&lt;p&gt;The challenge that I faced when doing the majority of my work written, through blogging was that despite having a growing website… no-one knew who I was. I’m sure lots of people read my work, but failed to notice the little author box at the end, and draw the link between the article they read. The reality is that blogging simply isn’t very good for building credibility in today’s world.&lt;/p&gt;

&lt;p&gt;I was not fully utilising my story, my history and credibility to grow the brand.&lt;/p&gt;

&lt;p&gt;I’ve been a software engineer for over 10 years now, I’ve worked in start-ups, enterprises, government, finance, I’ve done front-end, UX and UI design, I’ve built full-stack apps and backends, I’ve built infra, networks and serverless services, libraries and tools, I’ve refactored legacy codebases, I’ve ran training courses, lead workshops, coached and mentored folks, I’ve managed teams, built products which landed huge amounts of investment. But we simply can’t expect everyone to know every detail about our past.&lt;/p&gt;

&lt;p&gt;Visual platforms like YouTube, TikTok and Instagram, are great to “get your face out there”, and build credibility. When people hear you speak, and talk, and see the “context” of where you work and your space, trust just comes more naturally. We can’t simply expect people to go through our LinkedIn, dig up our resume or read all our old articles. We have to remind people, link things, reference them.&lt;/p&gt;

&lt;p&gt;Which is why I got more personal. I started posting on Twitter, I revived my Instagram, and forced myself to do more video’s. I started posting more on YouTube. I knew that being on camera would make me uncomfortable, but it seemed like more of a good reason to do it than not. And now, at the end of 2021, I can say those experiments were a massive success, I can see the quality of the networks and relationships that I’ve built have gone up exponentially, and I credit that to “putting my face” out there, sharing more of my past and my experience.&lt;/p&gt;

&lt;p&gt;So, did I hit my writing goal? Nope. But Is that a problem? I don’t think so, I think I achieved something far more powerful in the mean time. So, that covers last years goal, but what about this year? What do I have in store?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2022-goal-12-months-12-videos"&gt;
  &lt;/a&gt;
  2022 Goal: 12 Months, 12 Videos
&lt;/h2&gt;

&lt;p&gt;Last year’s goal was all about writing. This year’s is goal is all about video. Video is the future of content in my eyes, and my goal this year is to produce one really good video per month (at least).&lt;/p&gt;

&lt;p&gt;Producing one video doesn’t mean I’ll not write any blogs, or post on social media, it simply means I’ll commit to a theme each month and publish at least one video that I’m proud of.&lt;/p&gt;

&lt;p&gt;My plan is also to do a bunch of product/course reviews of the different learning platforms and use taking some certs as the excuse / exercise in which to review them. Here’s a draft plan of what those 12 video’s are currently looking like for 2022 (in no particular order):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Exampro (&lt;a href="http://Exampro.co"&gt;AWS Data Analytics Speciality&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analyse 100 cloud architect and data job descriptions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Antoni IT&lt;/strong&gt; (&lt;a href="https://training.antonit.com/"&gt;Google Cloud Professional Architect&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review Of Mastering Vim (&lt;a href="https://www.vim.so/"&gt;vim.so&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review of A Cloud Guru (&lt;a href="https://acloudguru.com/course/aws-certified-sysops-administrator-associate"&gt;AWS SysOps Associate Exam&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A day in the life&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review of Adrian Cantrill (&lt;a href="https://learn.cantrill.io/"&gt;Solutions Architect Professional&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tech World With Nana Review (&lt;a href="https://www.techworld-with-nana.com/kubernetes-administrator-cka"&gt;CKA Kubernetes Administrator&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review Of CodeAcademy&lt;/strong&gt; (&lt;a href="https://www.codecademy.com/learn/paths/data-science"&gt;Data Science&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Certified Developer Associate&lt;/strong&gt; (&lt;a href="https://www.udemy.com/course/aws-certified-developer-associate-dva-c01/"&gt;Stephane Mareek Udemy&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GoLang Course(s) Review (&lt;a href="https://tutorialedge.net/"&gt;TutorialEdge.net&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review of Cloud Academy (&lt;a href="https://cloudacademy.com/learning-paths/linux-certification-lpic-1-8/"&gt;Linux Server Professional LPIC-101&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The majority of these video’s are going to be about reviewing some existing courses, and certifications. I talk a lot about the cloud, but folks who I talk to are in the trenches, doing these courses, so I’d like to get in the trenches with them.&lt;/p&gt;

&lt;p&gt;Along the way, I want to also get certified in a bunch of different areas: complete and finish off some AWS certifications, as that’s been my previous area of speciality. But also step into traditional networking, and also Kubernetes, which I’ve actually long since ignored.&lt;/p&gt;

&lt;p&gt;So that’s it, that’s the plan for 2022. I enter 2022 with a much stronger vision of what Open Up The Cloud is, and can do. I’m excited for the year ahead! See you next year in 2023!&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://openupthecloud.com/2021-summary/"&gt;2021 Summary: A Rebrand To “Open Up The Cloud” &amp;amp; The Start Of Video Content&lt;/a&gt; appeared first on &lt;a href="https://openupthecloud.com"&gt;Open Up The Cloud&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>meta</category>
    </item>
  </channel>
</rss>
