<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Prematurely hand-optimizing C++ code for shits and giggles</title>
      <author>DrBearhands</author>
      <pubDate>Mon, 01 Nov 2021 06:50:18 +0000</pubDate>
      <link>https://dev.to/drbearhands/prematurely-hand-optimizing-c-code-for-shits-and-giggles-3i31</link>
      <guid>https://dev.to/drbearhands/prematurely-hand-optimizing-c-code-for-shits-and-giggles-3i31</guid>
      <description>&lt;p&gt;Left in the void that comes after abandoning a project, I decided to port a previous JavaScript / WebGL project to C++. Changing languages meant a complete overhaul of some core systems. I was looking at a &lt;a href="https://austinmorlan.com/posts/entity_component_system/"&gt;post by Austin Morlan about ECS achitectures&lt;/a&gt; for inspiration.&lt;/p&gt;

&lt;p&gt;Here I saw this procedure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;EntityManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Initialize the queue with all possible entity IDs&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MAX_ENTITIES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mAvailableEntities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this isn't bad code. Nonetheless, I did not like it. And not just because I have a distaste for CamelCase.&lt;/p&gt;

&lt;p&gt;Initializing the value &lt;code&gt;mAvailableEntities&lt;/code&gt; potentially takes a long time. In the example &lt;code&gt;MAX_ENTITIES&lt;/code&gt; was set to 5k, so it's not so bad, but I may require far more entities than that.&lt;/p&gt;

&lt;p&gt;Had this been a regular project with a clear goal, the correct approach would be to leave the code as is, since it's certainly readable. Then &lt;em&gt;if&lt;/em&gt; we run into performance issues in practice, find the procedures taking up the most times and optimize &lt;em&gt;those&lt;/em&gt;, and &lt;a href="https://youtu.be/r-TLSBdHe1A"&gt;&lt;em&gt;use statistical analysis&lt;/em&gt; to determine if our changes actually mattered&lt;/a&gt;. That is the correct way to optimize performance. That's not what I'm going to do here.&lt;/p&gt;

&lt;p&gt;In this particular architecture, &lt;code&gt;mAvailableEntities&lt;/code&gt; is a pool of &lt;em&gt;all available entities&lt;/em&gt;. That is why it must be filled. We cannot use a simple incrementing counter because entities can be destroyed as well, in which case we'd want to recycle them.&lt;/p&gt;

&lt;p&gt;Instead, we can combine the incrementing counter and the recycling pool. If the pool is not empty, grab an element from there, otherwise, use the counter. Unfortunately, that sentence contains the word "if".&lt;/p&gt;

&lt;p&gt;Naive implementation of the above is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;queue&amp;gt;
#include &amp;lt;cstdint&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;recycling_pool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="nf"&gt;create_entity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recycling_pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recycling_pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;recycling_pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(I've left out the check to prevent going over &lt;code&gt;MAX_ENTITIES&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;and as we see on &lt;a href="https://godbolt.org/"&gt;compile explorer&lt;/a&gt;, this compiles to conditional jumps (jne):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight llvm"&gt;&lt;code&gt;&lt;span class="err"&gt;create_entity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;movq&lt;/span&gt;    &lt;span class="err"&gt;recyclingPool+&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%rip&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;%rax&lt;/span&gt;
        &lt;span class="err"&gt;cmpq&lt;/span&gt;    &lt;span class="err"&gt;recyclingPool+&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%rip&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;%rax&lt;/span&gt;
        &lt;span class="err"&gt;pushq&lt;/span&gt;   &lt;span class="nv"&gt;%r12&lt;/span&gt;
        &lt;span class="err"&gt;jne&lt;/span&gt;     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;L9&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;conditional jumps can be a performance problem. &lt;/p&gt;

&lt;p&gt;Modern CPUs have deep pipelines. Rather than fully executing one instruction and then moving on to the next one, they execute every instruction in multiple steps like an assembly line. While instruction &lt;code&gt;n&lt;/code&gt; is going through step &lt;code&gt;x&lt;/code&gt;, instruction &lt;code&gt;n-1&lt;/code&gt; (the instruction that came before &lt;code&gt;n&lt;/code&gt;) is going through step &lt;code&gt;x+1&lt;/code&gt; and &lt;code&gt;n+1&lt;/code&gt; is going through step &lt;code&gt;n-1&lt;/code&gt;. A pipeline of 20 steps is essentially doing 20 things at the same time and therefore ~20x as fast as it would be executing instructions one-by-one.&lt;/p&gt;

&lt;p&gt;These pipelines require knowing ahead of time which instructions are coming up, which is uncertain with conditional jumps. Branch prediction works in some cases, such as loops, but not always.&lt;/p&gt;

&lt;p&gt;So how do we get rid of branching?&lt;/p&gt;

&lt;p&gt;The concept is conditional write-back. Rather than pick one branch or another, we do all branches, but don't write back the result in some cases. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.chessprogramming.org/Avoiding_Branches"&gt;C++ does not support conditional writeback directly, so we improvise a bit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, replace &lt;code&gt;std::queue&lt;/code&gt; with a stack, and just use a primitive array &lt;code&gt;entity recycling_pool[MAX_ENTITIES]&lt;/code&gt;. This will be a bit easier to hack.&lt;/p&gt;

&lt;p&gt;Then, we specify entity 0 to be invalid. We initialize &lt;code&gt;recycling_pool&lt;/code&gt; with a &lt;code&gt;0&lt;/code&gt; in the first element. Now we can take the head of &lt;code&gt;recycling_pool&lt;/code&gt; and it will function both as condition and value. This is rather like &lt;code&gt;Maybe Entity&lt;/code&gt; in e.g. Haskell, but more efficient and far less safe.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="nf"&gt;create_entity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="n"&gt;new_entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recycling_pool&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unused_idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;b_stack_empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;new_entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have divergence: if not &lt;code&gt;b_stack_empty&lt;/code&gt;, we want to &lt;code&gt;pop&lt;/code&gt; the stack, otherwise, we want to increment the counter.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;b_stack_empty&lt;/code&gt; is a boolean with the value 0 or 1, since it was generated from the &lt;code&gt;!&lt;/code&gt; operation (anything that isn't 0 counts as true in C++, but true as output is 1). we can abuse this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  unused_idx -= !b_stack_empty;
  gen_counter += b_stack_empty;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(NOTE: &lt;code&gt;gen_counter&lt;/code&gt; starts at 0, but valid values start at 1, so it's increment-then-use)&lt;/p&gt;

&lt;p&gt;this is a specialized form of conditional write-back.&lt;/p&gt;

&lt;p&gt;Then, if &lt;code&gt;b_stack_empty&lt;/code&gt;, we want to replace &lt;code&gt;new_entity&lt;/code&gt;, which will be an all-0 bits invalid value, with the current value of &lt;code&gt;gen_counter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;  &lt;span class="n"&gt;new_entity&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b_stack_empty&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;gen_counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;since &lt;code&gt;b_stack_empty&lt;/code&gt; can have values 0 or 1, a non empty stack will evaluate to &lt;code&gt;0 &amp;amp; gen_counter&lt;/code&gt;, which equals 0, whereas an empty stack will give &lt;code&gt;-1 &amp;amp; gen_counter&lt;/code&gt; and since we're dealing with &lt;em&gt;unsigned&lt;/em&gt; integers, -1 is all 1's in binary, so &lt;code&gt;-1 &amp;amp; gen_counter&lt;/code&gt; equals &lt;code&gt;gen_counter&lt;/code&gt;. In the latter case we also know &lt;code&gt;new_entity = 0&lt;/code&gt;, and &lt;code&gt;0 + gen_counter = gen_counter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And so the full code (minus checking MAX_ENTITIES violation) is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;cstdint&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="n"&gt;unused_idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="n"&gt;gen_counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="n"&gt;MAX_ENTITIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="n"&gt;recycling_pool&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_ENTITIES&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="nf"&gt;create_entity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="n"&gt;new_entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recycling_pool&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unused_idx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;b_stack_empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;new_entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;unused_idx&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;b_stack_empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;gen_counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;b_stack_empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;new_entity&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b_stack_empty&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;gen_counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Compiler explorer confirms there are no conditional jumps.&lt;/p&gt;

&lt;p&gt;The resulting assembly is also a lot smaller (24 lines vs 103), but I expect that is mostly due to the omission of &lt;code&gt;std::queue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I want to reiterate that this is &lt;em&gt;dumb&lt;/em&gt;. The code is likely to have gotten slower in practice, even though it is more consistent, because branch prediction is probably right more often than not, and now we're executing &lt;em&gt;all&lt;/em&gt; the branches. Code maintainability has also suffered.&lt;/p&gt;

&lt;p&gt;This is merely an interesting learning experience.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>performance</category>
    </item>
    <item>
      <title>Add Data Bars in Excel using Java</title>
      <author>Jane</author>
      <pubDate>Mon, 01 Nov 2021 06:22:18 +0000</pubDate>
      <link>https://dev.to/jazzzzz/add-data-bars-in-excel-using-java-5b5l</link>
      <guid>https://dev.to/jazzzzz/add-data-bars-in-excel-using-java-5b5l</guid>
      <description>&lt;p&gt;Data bars are a type of conditional formatting Microsoft Excel offers for visualizing the values in Excel cells. They can help you compare the values quickly because a cell with a longer bar represents a larger value, while a cell with a shorter bar represents a smaller value. This article will introduce how to add data bars in a range of cells using Free Spire.XLS for Java.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-jar-dependency-2-method"&gt;
  &lt;/a&gt;
  Import JAR Dependency (2 Method)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1#&lt;/strong&gt; Download the &lt;a href="https://www.e-iceblue.com/Download/xls-for-java-free.html"&gt;free API&lt;/a&gt; and unzip it, then add the Spire.Xls.jar file to your project as dependency.&lt;br&gt;
&lt;strong&gt;2#&lt;/strong&gt; You can also add the jar dependency to maven project by adding the following configurations to the pom.xml.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;com.e-iceblue&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;e-iceblue&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repo.e iceblue.com/nexus/content/groups/public/&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;e-iceblue&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spire.xls.free&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.9.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h3&gt;

&lt;p&gt;Free Spire.XLS for Java offers &lt;strong&gt;Worksheet.getCellRange()&lt;/strong&gt; method to get a specific cell range, and you can add a new conditional formatting to the cell range using &lt;strong&gt;ConditionalFormats. addCondition()&lt;/strong&gt; method. To add data bars in the selected cell range, you just need to set the type of the new conditional formatting to DataBar using &lt;strong&gt;ConditionalFormatWrapper.setFormatType()&lt;/strong&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.xls.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.xls.core.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.awt.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;applyDataBars&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//Create a Workbook instance&lt;/span&gt;
        &lt;span class="nc"&gt;Workbook&lt;/span&gt; &lt;span class="n"&gt;workbook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Workbook&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;//Load an Excel file&lt;/span&gt;
        &lt;span class="n"&gt;workbook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFromFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C:\\Users\\Administrator\\Desktop\\test.xlsx"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Get the first worksheet.&lt;/span&gt;
        &lt;span class="nc"&gt;Worksheet&lt;/span&gt; &lt;span class="n"&gt;sheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;workbook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWorksheets&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Get the specific cell range&lt;/span&gt;
        &lt;span class="nc"&gt;CellRange&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sheet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCellRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B2:B13"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Add the condotional format of data bar to the cell range&lt;/span&gt;
        &lt;span class="nc"&gt;IConditionalFormat&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getConditionalFormats&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;addCondition&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setFormatType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nc"&gt;ConditionalFormatType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DataBar&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Set color for the data bar&lt;/span&gt;
        &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataBar&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setBarColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GREEN&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Save to file&lt;/span&gt;
        &lt;span class="n"&gt;workbook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saveToFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ApplyDataBars.xlsx"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ExcelVersion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Version2013&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YycsPQ9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoflml2spo6cit1b01t9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YycsPQ9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoflml2spo6cit1b01t9.jpg" alt="DataBar" width="719" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Are online editors the future?</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 01 Nov 2021 05:54:51 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/are-online-editors-the-future-51pi</link>
      <guid>https://dev.to/dailydevtips1/are-online-editors-the-future-51pi</guid>
      <description>&lt;p&gt;Recently Visual Studio Code also launched an online version of their editor. It is a lightweight version of the desktop application.&lt;/p&gt;

&lt;p&gt;This is nothing new as GitHub has it built-in for their repos as well.&lt;/p&gt;

&lt;p&gt;Let's have a look at these two options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-vs-code-editor-in-the-browser"&gt;
  &lt;/a&gt;
  GitHub VS Code editor in the browser
&lt;/h2&gt;

&lt;p&gt;You can open any repository on GitHub and change the &lt;code&gt;.com&lt;/code&gt; part of the domain to &lt;code&gt;.dev&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Alternatively, you can simply press the &lt;code&gt;.&lt;/code&gt; on any GitHub repo to open the online editor mode.&lt;/p&gt;

&lt;p&gt;For instance, let's open the &lt;code&gt;daily.dev&lt;/code&gt; repo in an online browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/dailydotdev/apps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⬇️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.dev/dailydotdev/apps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are welcomed by the full repo as we would get in VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ENYMjg4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634792115043/-Mf0ZsyFa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ENYMjg4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634792115043/-Mf0ZsyFa.png" alt="Visual Studio code in GitHub repo" width="880" height="766"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool, right?&lt;br&gt;
So what can we do with this?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review pull requests online with ease. You can simply press the &lt;code&gt;.&lt;/code&gt; in a PR to open it in the editor for a more detailed overview.&lt;/li&gt;
&lt;li&gt;Super easy to search throughout the codebase. Yes, click-through works!&lt;/li&gt;
&lt;li&gt;It's super fast.&lt;/li&gt;
&lt;li&gt;Make changes and PRs directly online&lt;/li&gt;
&lt;li&gt;Extensions are available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All and all, it's a super powerful way to edit code.&lt;br&gt;
The main downside is, of course, not being able to run it.&lt;/p&gt;

&lt;p&gt;But for PR reviews, this is a good win!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#github-codespaces"&gt;
  &lt;/a&gt;
  GitHub Codespaces
&lt;/h3&gt;

&lt;p&gt;GitHub recently also launched GitHub Codespaces, which is a blazing fast cloud environment.&lt;br&gt;
The look and feel are the same, but you are running on a VM.&lt;/p&gt;

&lt;p&gt;The cool part about Codespaces is that you can run your code there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLeBNZK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634792515642/tPjH5b2_s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLeBNZK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634792515642/tPjH5b2_s.png" alt="GitHub Codespaces" width="880" height="817"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This feature is only available to teams and organizations.&lt;br&gt;
For more information, visit the &lt;a href="https://github.com/features/codespaces"&gt;GitHub Codespace website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#visual-studio-code-in-the-browser"&gt;
  &lt;/a&gt;
  Visual Studio Code in the Browser
&lt;/h2&gt;

&lt;p&gt;More recently, we got a new addition to the online editor family, being VS code themselves.&lt;/p&gt;

&lt;p&gt;To open a new editor, you can type &lt;code&gt;vscode.dev&lt;/code&gt; in your browser, and a new editor will spool up.&lt;/p&gt;

&lt;p&gt;The cool part is that this has wider use, as it can even load local files!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LTNsdrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634793147793/KGrV3MZu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LTNsdrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634793147793/KGrV3MZu6.png" alt="Visual Studio Code in the browser" width="880" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can also open GitHub links and even azure links!&lt;/p&gt;

&lt;p&gt;You can simply take any link to those repos and prefix them with &lt;code&gt;vscode.dev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/dailydotdev/apps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⬇️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://vscode.dev/github.com/dailydotdev/apps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or for azure dev:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dev.azure.com/daily-dev-tips/test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⬇️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://vscode.dev/dev.azure.com/daily-dev-tips/test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Powerful if you ask me!&lt;/p&gt;

&lt;p&gt;Some pro's of using the vs code one would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local file opening&lt;/li&gt;
&lt;li&gt;New projects from scratch, quickly share some project structure&lt;/li&gt;
&lt;li&gt;Azure dev-ops environment&lt;/li&gt;
&lt;li&gt;Again, many amazing extensions are available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The downsides are, for now, no way to run and debug.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-the-future"&gt;
  &lt;/a&gt;
  What about the future?
&lt;/h2&gt;

&lt;p&gt;We started this article by asking if these editors are the future?&lt;br&gt;
And to be honest with you, I do think it's very viable.&lt;/p&gt;

&lt;p&gt;Our hardware becomes less and less critical (meaning whatever we have on it locally).&lt;/p&gt;

&lt;p&gt;We can sign in to some online tools and take off from where we left.&lt;/p&gt;

&lt;p&gt;This makes total sense in the current day and age.&lt;/p&gt;

&lt;p&gt;There are some kinks to iron out for it to be entirely a solution on its own.&lt;br&gt;
For me, those are:&lt;/p&gt;

&lt;p&gt;Option to run docker images on the cloud (Codespaces/Vercel/etc)&lt;br&gt;
Peer programming online 👀&lt;br&gt;
Debug systems integrated&lt;/p&gt;

&lt;p&gt;I'm sure these are even possible with some extensions and very keen to see what this will bring over time!&lt;/p&gt;

&lt;p&gt;How do you feel about these online editors?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>vscode</category>
      <category>github</category>
    </item>
    <item>
      <title>How To Write SEO Title &amp; Description in Website.</title>
      <author>Bhavyashah</author>
      <pubDate>Mon, 01 Nov 2021 05:26:05 +0000</pubDate>
      <link>https://dev.to/bhavyashah/how-to-write-seo-title-description-in-website-2ko0</link>
      <guid>https://dev.to/bhavyashah/how-to-write-seo-title-description-in-website-2ko0</guid>
      <description>&lt;p&gt;This is a complete guide on &lt;a href="https://www.blogtriggers.com/2021/05/smart-and-informative-seo-titles-and-descriptions.html"&gt;how to write SEO title and description&lt;/a&gt; in website and blog. We all know that search engine is an important place for business and we should use our keywords strategically. So that we can get high rank in google and most of the users can reach our site. Here we will discuss how we can optimize our title and description in such a way it increases conversion rate.&lt;/p&gt;

&lt;p&gt;So we are going to tell you in 2 part &lt;br&gt;
1) How to Write SEO Title?&lt;br&gt;
2) How to Write SEO Description?&lt;/p&gt;

&lt;h1&gt;How to Write SEO Title?&lt;/h1&gt;

&lt;p&gt;See In SEO Title there are various point that you have to note down when you write Title of your website page or posts.&lt;/p&gt;

&lt;p&gt;1) Your title should be not more than 60 to 70 characters long. That's the best advice if you want to write a good title.&lt;/p&gt;

&lt;p&gt;2) Your title should be direct and powerful. It should include keywords that will help your content rank higher on search engines.&lt;/p&gt;

&lt;p&gt;3) It is important to keep your SEO Title short. &lt;/p&gt;

&lt;p&gt;4) In Title you have to write Question based titles like How, Which, What, Whom, Why, When, Where etc... That will increase users curiosity and it will also increase your Title CTR.&lt;/p&gt;

&lt;p&gt;5) When you use numbers in your SEO title, like in "5 Reasons," you make it easier for search engines to find what they're looking for.&lt;/p&gt;

&lt;h2&gt;How to Write SEO Description?&lt;/h2&gt;

&lt;p&gt;When you are writing the SEO Description, you have to follow some points to increase your CTR.&lt;/p&gt;

&lt;p&gt;1) First of all your Description length was in-between 150 to 160 characters.&lt;/p&gt;

&lt;p&gt;2) When you write Description of your posts then you have to add main keywords in starting that will tell that your main posts is focusing on these points.&lt;/p&gt;

&lt;p&gt;3) If you are writing description then you have to write for users not for search engine because If users understand then it chances to click on it.&lt;/p&gt;

&lt;p&gt;4) When writing descriptions, it's important to include your brand name when relevant.&lt;/p&gt;

&lt;p&gt;5) Make sure your description will match with your content because if the description will not match with content then it chances to increase bounce rate.&lt;/p&gt;

&lt;p&gt;In short, these are the points you should remember if you want to increase your CTR and also rank fastly.&lt;/p&gt;

</description>
      <category>seo</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to use PostgreSQL with NodeJS by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Mon, 01 Nov 2021 04:05:14 +0000</pubDate>
      <link>https://dev.to/silvenleaf/how-to-use-postgresql-with-nodejs-by-silvenleaf-1aef</link>
      <guid>https://dev.to/silvenleaf/how-to-use-postgresql-with-nodejs-by-silvenleaf-1aef</guid>
      <description>&lt;p&gt;Ahoy there mates! Who's excited to embark onto the SQL world? Let's go meet PostgreSQL!! Stay tuned. Because on the very NEXT blog, we'll learn how to automate all DB setups and Schema generations!&lt;/p&gt;

&lt;p&gt;On this blog, we'll learn how to setup PostgreSQL with NodeJS!! To double the fun, let's throw some TypeScript as well. Don't worry, even if you don't know it, we'll be going from level 0, so as long as you know the basics of JavaScript, hop on. Let the adventure begin!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-project-setup"&gt;
  &lt;/a&gt;
  Step 0: Project Setup
&lt;/h3&gt;

&lt;p&gt;Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a package.json file to track all the packages that you'd download and so on)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-step-adding-typescript"&gt;
  &lt;/a&gt;
  Bonus Step: Adding TypeScript
&lt;/h3&gt;

&lt;p&gt;For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out &lt;strong&gt;&lt;a href="https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen"&gt;TypeScript SETUP by SilvenLEAF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well anyway, in short (for details, checkout the above link)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install typescript
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i typescript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;init our tsconfig
(make sure you already have typescript globally installed, if not type &lt;strong&gt;npm i -g typescript&lt;/strong&gt;. And don't get it confused with the previous normal &lt;strong&gt;npm i typescript&lt;/strong&gt; command)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a &lt;strong&gt;.tsconfig&lt;/strong&gt; file)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install &lt;strong&gt;ts-node&lt;/strong&gt; and &lt;strong&gt;ts-node-dev&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i ts-node ts-node-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now finally, let's setup our PostgreSQL Database&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-db-packages"&gt;
  &lt;/a&gt;
  Step 1: Install DB Packages
&lt;/h3&gt;

&lt;p&gt;Type the following command to install the required db packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i sequelize @types/sequelize sequelize-cli pg pg-hstore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-2-create-sequelizerc-file"&gt;
  &lt;/a&gt;
  Step 2: Create .sequelizerc file
&lt;/h3&gt;

&lt;p&gt;Type &lt;strong&gt;touch .sequelizerc&lt;/strong&gt; to create &lt;strong&gt;.sequelizerc&lt;/strong&gt; file. Now paste the following content into this &lt;strong&gt;.sequelizerc&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./database/config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;config.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;models-path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./database/models&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;seeders-path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./database/seeders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;migrations-path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./database/migrations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sequelize uses this &lt;strong&gt;.sequelizerc&lt;/strong&gt; file to generate the config and the model using the specified path.&lt;/p&gt;

&lt;p&gt;Next up, we generate the config by running the command mentioned in next step.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-3-generate-database-config"&gt;
  &lt;/a&gt;
  Step 3: Generate Database config
&lt;/h3&gt;

&lt;p&gt;Make sure you have &lt;strong&gt;sequelize-cli&lt;/strong&gt; globally installed. If not, install it globally by using this command &lt;strong&gt;npm i -g sequelize-cli&lt;/strong&gt;. Otherwise the following command won't work.&lt;/p&gt;

&lt;p&gt;Type the following command to create the Database config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sequelize init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will create a folder called &lt;strong&gt;database&lt;/strong&gt; on the root level and with the following structure/stuff inside it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;it is the config js file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;models&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// here, I mean, in this "models" folder, we'll put our db models&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-4-edit-databaseconfigconfigjs"&gt;
  &lt;/a&gt;
  Step 4: Edit database/config/config.js
&lt;/h3&gt;

&lt;p&gt;Next up, let's edit the &lt;strong&gt;database/config/config.js&lt;/strong&gt;.&lt;br&gt;
Replace the content of the &lt;strong&gt;database/config/config.js&lt;/strong&gt; with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabaseUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabasePassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabaseName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DB_STRING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`postgres://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@127.0.0.1:5432/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DB_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DB_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DB_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Congratulations you are all set up!! Now, create your schemas in that &lt;strong&gt;modals&lt;/strong&gt; folder and export it. Then import in the file where you want to use it and use it to your heart's content!&lt;/p&gt;

&lt;p&gt;But you know what? We are not gonna do that here now. Because We'll automate them right in the next blog. So stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog coming soon in 24 hrs!!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-automate-creating-db-schemas"&gt;
  &lt;/a&gt;
  1. Automate creating DB Schemas
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  2. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-how-to-automate-anything"&gt;
  &lt;/a&gt;
  4. How to automate anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-sequelize-hooks"&gt;
  &lt;/a&gt;
  5. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  6. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Hacktoberfest 2021! My third contribution</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Mon, 01 Nov 2021 02:47:30 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/hacktoberfest-2021-my-third-contribution-5h51</link>
      <guid>https://dev.to/okimotomizuho/hacktoberfest-2021-my-third-contribution-5h51</guid>
      <description>&lt;p&gt;It's the final week of October, and I finally found an issue that I could work on. I would like to introduce this project and what I have learned from it, as it's a little larger than my two previous organizations that I have contributed to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h2&gt;

&lt;p&gt;This project is called &lt;a href="https://github.com/cisco-sbg-ui/atomic-react"&gt;Atomic-React&lt;/a&gt; which is a React library that implements UI components according to Atomic design specifications. Developers are able to have features such as Flexible, tree-shakable components, Full documentation, Auto-import, and many others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;The issue (&lt;a href="https://github.com/cisco-sbg-ui/atomic-react/issues/987"&gt;#987&lt;/a&gt;) pointed out was about displaying scroll tabs, where when you clicked on a tab, the line at the top disappeared.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8xDhnPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45c1yimkk1er2fy0p2a4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8xDhnPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45c1yimkk1er2fy0p2a4.png" alt="Issue" width="524" height="89"&gt;&lt;/a&gt; One of the repository's owners specified how to make the change, so it wasn't difficult to fix except finding the particular file.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;I added padding top 1px to the SCSS below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--scrolling&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;.a-tab-group__tab-wrapper&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The padding fixed the issue:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FvJWtJcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf6alw8t0wnx0xyfneyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvJWtJcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf6alw8t0wnx0xyfneyi.png" alt="after adding the code" width="817" height="372"&gt;&lt;/a&gt;&lt;br&gt;
I've never used SCSS, so I was a little confused about how to use &amp;amp;(ampersand).　My understanding is SCSS(Sassy Cascading Style Sheets) is a special type of file for SASS, a program written in Ruby that assembles CSS style sheets for a browser. SCSS is like CSS with better formatting. SASS's &amp;amp; (ampersand) is basically a function that allows you to "reference the parent selector". Parent selector reference is a function that describes in CSS after compilation so that when written using the "nested function", the "selector one level above" is copied as it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-pull-request"&gt;
  &lt;/a&gt;
  Make a Pull Request
&lt;/h2&gt;

&lt;p&gt;This time, I was careful about branch/commit/push. Their link to the contribution was broken, but I was able to find how people made commit messages.&lt;br&gt;
However, I had a question about the contents of the issue. &lt;br&gt;
It said "&lt;em&gt;Additional context: After the change is made, the GitHub action workflow Update Snapshots needs run on the published branch, and that should update the visual regression test assets.&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;I couldn't understand the meaning so I asked the person who filed the issue. The person kindly explained to me how to check:&lt;/p&gt;

&lt;p&gt;"&lt;em&gt;So when you add the PR the tests will run and should fail because the snapshot images will be different. Those snapshot images are updated via GitHub action. I took a screenshot from over in the Actions tab. On the left side, click "Update Snapshots" and then on the right side choose your branch. When the workflow runs, it'll update the snapshots and commit the change to the branch you selected.&lt;/em&gt;"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nGGgIg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grpp1cusgq4pnvvqm1h0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nGGgIg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grpp1cusgq4pnvvqm1h0.jpg" alt="Explain for the workflow" width="753" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still wasn't sure, but as the person said I made a PR, and checked Action, and updated the snapshot.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cujYJNzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvsus258h4wta8eh685b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cujYJNzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvsus258h4wta8eh685b.png" alt="snapshot" width="880" height="268"&gt;&lt;/a&gt;&lt;br&gt;
I searched about workflow, but do not fully understand it yet, so please share your knowledge about it with me. After I ask my professor, I will update here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This time, both the filing issue and making a PR had some rules to maintain for the project. It was interesting, but I also thought I needed to expand my knowledge. I was surprised that people in this open-source community were nice. Even though Hactoberfest is almost over, but contribution never ends. I'm still looking for one more issue to complete my goal(4PRs) this month. If you have any recommendations to find repos or know something helpful about it (especially JavaScript), please feel free to comment below💌&lt;/p&gt;

&lt;p&gt;(Photo by Tony Hand on Unsplash)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>hacktoberfest</category>
      <category>github</category>
    </item>
    <item>
      <title>Making the Filter</title>
      <author>Bruno Noriller</author>
      <pubDate>Mon, 01 Nov 2021 02:15:00 +0000</pubDate>
      <link>https://dev.to/noriller/making-the-filter-4l5l</link>
      <guid>https://dev.to/noriller/making-the-filter-4l5l</guid>
      <description>&lt;p&gt;Picking up from where we were in the &lt;a href="https://dev.to/noriller/making-the-parser-32lp"&gt;Parser&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`some random string something "quoted here" not here 'here again' tag:value something alone: and other:tag :value`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// it returns:&lt;/span&gt;
&lt;span class="cm"&gt;/* 
    {
      singleValues:  [ 'some','random','string','something','not','here','something','alone:','and',':value' ],
      quotedValues: [ 'quoted here', 'here again' ],
      tagValues: [['tag', 'value'], ['other', 'tag']]
    }
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-how-do-we-use-it"&gt;
  &lt;/a&gt;
  Now... how do we use it?
&lt;/h2&gt;

&lt;p&gt;Here's a draft of what we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyBasicFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayToBeFiltered&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayToBeFiltered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;}){&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;???&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To use this:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="cm"&gt;/* ... values ... */&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;basicFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MyBasicFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsedSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* that big string */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;basicFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedSearch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we will use a closure, just so we can prepare the function and then just call it afterwards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filter-magic"&gt;
  &lt;/a&gt;
  Filter Magic
&lt;/h3&gt;

&lt;p&gt;For that we will be needing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// check the single values&lt;/span&gt;
  &lt;span class="c1"&gt;// check the quoted values&lt;/span&gt;
  &lt;span class="c1"&gt;// check the tag values&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While writing this, I've made it in a way I didn't even though about using in &lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;EasyFilter&lt;/a&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this concatenates all strings in the item&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// using an object we avoid having to use a switch statement&lt;/span&gt;
  &lt;span class="c1"&gt;// the code is more clear and easier to read&lt;/span&gt;
  &lt;span class="c1"&gt;// and should we need to add more filters we can add them here in a simple way&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this is basically the "base case", it will check if the baseString have the values we are looking for with Regex using the case insensitive flag&lt;/span&gt;
    &lt;span class="c1"&gt;// we pass the stringValue of the item as default, but doing this allows other functions to override it&lt;/span&gt;
    &lt;span class="na"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;baseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
    &lt;span class="c1"&gt;// for the quoted values, we split them at the space and then call the sibling function "singleValues" for each value&lt;/span&gt;
    &lt;span class="c1"&gt;// and by using the "every" function we check if all the substrings are found&lt;/span&gt;
    &lt;span class="c1"&gt;// we could also had just called the "singleValues" function without splitting the string&lt;/span&gt;
    &lt;span class="c1"&gt;// but that would mean the it would check if it matched the exact string in order&lt;/span&gt;
    &lt;span class="c1"&gt;// it would look like this:&lt;/span&gt;
    &lt;span class="c1"&gt;// quotedValues: (string) =&amp;gt; myMagicFunctions.singleValues(string),&lt;/span&gt;
    &lt;span class="na"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subString&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;// finally, the tags we spread the tag/value and override the default baseString of "singleValues" with the value of the tag&lt;/span&gt;
    &lt;span class="na"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// we break down the parsedObject and with "some" check if any of the single, quoted or tag values have any match&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;parsedType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// since each can hold an array, we loop through them using "some"&lt;/span&gt;
      &lt;span class="c1"&gt;// also, by using "some", it already stops in the first match!&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// and if this isn't magic, I don't know what is!&lt;/span&gt;
        &lt;span class="c1"&gt;// we use the types coming from the parsedObject,&lt;/span&gt;
        &lt;span class="c1"&gt;// if there's a match, we call the function that matches the type&lt;/span&gt;
        &lt;span class="c1"&gt;// and pass the payload (that can be either a string or a tuple)&lt;/span&gt;
        &lt;span class="c1"&gt;// if there's no match, it will return false by default&lt;/span&gt;
        &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parsedType&lt;/span&gt;&lt;span class="p"&gt;]?.(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// If you want to play around with the FilterMagic&lt;/span&gt;
&lt;span class="c1"&gt;// here's a mockItem for you to test&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;ghosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Are spooky?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;More spooky?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;happy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Halloween&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// and here's a mockParsedObject&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockParsedObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spooky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spoolk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spooky more&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morr spook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;happy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;halloween&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// invalidate some of the values to see what's called and what's not&lt;/span&gt;
&lt;span class="c1"&gt;// as is, it will stop at the very first one because "spooky" is in the item!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-final-result"&gt;
  &lt;/a&gt;
  The Final Result
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyBasicFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayToBeFiltered&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayToBeFiltered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;baseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
      &lt;span class="na"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subString&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="na"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;parsedType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parsedType&lt;/span&gt;&lt;span class="p"&gt;]?.(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately, the filter is the easiest part... &lt;br&gt;
Unfortunately... it's more straight forward code.&lt;/p&gt;

&lt;p&gt;I'm happy that I've managed to do something totally different than what I've used in &lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;EasyFilter&lt;/a&gt;, but this is a way simpler version of that one... &lt;br&gt;
Although I actually might think about using what we did here in there!&lt;/p&gt;

&lt;p&gt;Hey... how about it? &lt;br&gt;
Check if YOU can can do it... fork the project and then send a PR!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSdtYYSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkyd8yo1zv3rtysodwxp.png" alt="buy me a spook coffee" width="170" height="37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@wadeaustinellis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Wade Austin Ellis&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Basic Setup for Create React App</title>
      <author>Kristen Kinnear-Ohlmann</author>
      <pubDate>Mon, 01 Nov 2021 01:59:23 +0000</pubDate>
      <link>https://dev.to/kristenkinnearohlmann/basic-setup-for-create-react-app-1e3m</link>
      <guid>https://dev.to/kristenkinnearohlmann/basic-setup-for-create-react-app-1e3m</guid>
      <description>&lt;p&gt;One of the things I find most valuable is a good quick-start guide. This is the guide I put together to get a React app started and pushed to GitHub, using the Bash terminal in VS Code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the terminal, navigate to the folder on your machine where you want to keep the local copy of your repo.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;create-react-app&lt;/code&gt; to create the new application, replacing &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; for your application's name. Additional documentation is available at &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;reactjs.org&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app &amp;lt;app-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Once the application has been created, create a &lt;code&gt;main&lt;/code&gt; branch (current GitHub default and preferred name) and delete the &lt;code&gt;master&lt;/code&gt; branch (still the current default for &lt;code&gt;create-react-app&lt;/code&gt;).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; main
git branch &lt;span class="nt"&gt;-d&lt;/span&gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To use &lt;code&gt;npm&lt;/code&gt; instead of &lt;code&gt;yarn&lt;/code&gt;, take the following steps:

&lt;ul&gt;
&lt;li&gt;Delete &lt;code&gt;yarn.lock&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Delete &lt;code&gt;node_modules&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Reinstall &lt;code&gt;node_modules&lt;/code&gt; using &lt;code&gt;npm&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Clean up the generated &lt;code&gt;README&lt;/code&gt;, removing application boilerplate and adding any content desired for the first commit.&lt;/li&gt;
&lt;li&gt;Test the basic React setup and enjoy the spinning React logo!
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyqY30XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/b92d2065e814e2ce7844d9ccd4dbf39e/60097/basic-react-app-tab.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyqY30XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/b92d2065e814e2ce7844d9ccd4dbf39e/60097/basic-react-app-tab.jpg" alt="React tab" width="365" height="92"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iNhuTVr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/d079ff8df3e69e9b59bd07c7474b954b/acb04/basic-react-app-logo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNhuTVr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/d079ff8df3e69e9b59bd07c7474b954b/acb04/basic-react-app-logo.jpg" alt="React logo" width="750" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commit code locally.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Initial commit"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Go to your account on &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and create the remote repo:

&lt;ul&gt;
&lt;li&gt;Use the same name used for the app creation&lt;/li&gt;
&lt;li&gt;Don't choose to add any of the options for initializing the repo to avoid conflicts pushing the local repo; local already has &lt;code&gt;README&lt;/code&gt; and &lt;code&gt;.gitignore&lt;/code&gt; from the app creation and the license can be added later&lt;/li&gt;
&lt;li&gt;Use the instructions from &lt;strong&gt;…or push an existing repository from the command line&lt;/strong&gt; to link the local repo to the remote location; example code below, the code generated by GitHub will contain the correct values
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   git remote add origin https://github.com/&amp;lt;GitHub user name&amp;gt;/&amp;lt;repo name&amp;gt;.git
   git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main
   git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The basic React app is now ready for further development!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deployment Approvals in GitHub Actions for Private Repositories</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 01 Nov 2021 01:17:22 +0000</pubDate>
      <link>https://dev.to/n3wt0n/deployment-approvals-in-github-actions-for-private-repositories-4hhd</link>
      <guid>https://dev.to/n3wt0n/deployment-approvals-in-github-actions-for-private-repositories-4hhd</guid>
      <description>&lt;p&gt;Do you want to have &lt;strong&gt;deployments approval&lt;/strong&gt; in GitHub Actions, but you are on a Private Repository?&lt;/p&gt;

&lt;p&gt;If you are familiar with GitHub Actions Environments, you know that &lt;strong&gt;they are available only on Public Repositories&lt;/strong&gt;, or in GitHub Enterprise Cloud. &lt;/p&gt;

&lt;p&gt;In this In this live streaming you will learn how to &lt;strong&gt;get GitHub Actions Approvals with Private Repos&lt;/strong&gt; using a &lt;strong&gt;&lt;em&gt;different approach&lt;/em&gt;&lt;/strong&gt;. I'm going to show you how you can have s rot of deployment approvals in GitHub Actions even on Private Repositories &lt;strong&gt;&lt;em&gt;without&lt;/em&gt;&lt;/strong&gt; GitHub Enterprise Cloud.&lt;/p&gt;

&lt;p&gt;I will also answer all your &lt;strong&gt;questions about Deployments in GitHub Actions&lt;/strong&gt;. So prepare your questions! And if you can't make it, &lt;strong&gt;post your questions or comments down below&lt;/strong&gt; so I can address them during the live!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MDOn9HAS7bQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/MDOn9HAS7bQ"&gt;Link to the video: https://youtu.be/MDOn9HAS7bQ&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-for-the-live"&gt;
  &lt;/a&gt;
  ⏲️ TIME FOR THE LIVE:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, October 2nd, 9.00 pm HKT&lt;/li&gt;
&lt;li&gt;Tuesday, October 2nd, 6.30 pm IST&lt;/li&gt;
&lt;li&gt;Tuesday, October 2nd, 1.00 pm UTC&lt;/li&gt;
&lt;li&gt;Tuesday, October 2nd, 9.00 am ET&lt;/li&gt;
&lt;li&gt;Tuesday, October 2nd, 6.00 am PT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MDOn9HAS7bQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>actions</category>
      <category>codenewbie</category>
      <category>devops</category>
    </item>
    <item>
      <title>My Hacktoberfest2021 Journey</title>
      <author>Kendra Wing</author>
      <pubDate>Mon, 01 Nov 2021 00:49:24 +0000</pubDate>
      <link>https://dev.to/kwing25/my-hacktoberfest2021-journey-4cc5</link>
      <guid>https://dev.to/kwing25/my-hacktoberfest2021-journey-4cc5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hacktoberfest-2021-women-in-tech-appapi-creation-a-web-devs-reflection"&gt;
  &lt;/a&gt;
  Hacktoberfest 2021 ~ Women In Tech App/API creation ~ A Web Dev's Reflection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest2021&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kwing25"&gt;
        kwing25
      &lt;/a&gt; / &lt;a href="https://github.com/kwing25/Women-Who-ve-Changed-Tech"&gt;
        Women-Who-ve-Changed-Tech
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Women Tech Pioneers API &amp;amp; React App 👩🏻‍💻. List of amazing Female Tech &amp;amp; STEM Pioneers. Contributions to the list are welcome! 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;‣&lt;a href="#the-project"&gt;The Project&lt;/a&gt; ‣&lt;a href="#the-beginning"&gt;The Beginning&lt;/a&gt; ‣&lt;a href="#the-future"&gt;The Future&lt;/a&gt; ‣&lt;a href="#being-a-maintainer"&gt;Being a Maintainer&lt;/a&gt; ‣&lt;a href="#women-in-tech"&gt;Women In Tech&lt;/a&gt; ‣&lt;a href="#thanks"&gt;Thanks&lt;/a&gt; ‣&lt;a href="#see-more"&gt;See more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was my 1st time being a Contrbutor &amp;amp; Maintainer in Hactoberfest. I'm a new Bootcamp Grad &amp;amp; Developer and this event was a great opportunity to contribute to Open Source Projects.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The Project
&lt;/h3&gt;

&lt;p&gt;Looking at the many open source projects I decided I wanted to do more than just contribute. For a while, I've wanted to do a Female Tech Pioneers Web API/React App after noticing that there aren't many sources online of just Females in Tech. I decided to start a project that would build the foundation of an all-Women Tech &amp;amp; STEM Pioneer API and Website. I wanted to have multiple contributors building a list of Female Tech Individuals. It's been surprising to see the number of people Contributing to the list. I didn't think that there would be many people who would see the Repo and it's been incredible working with people all over the world 🌎. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-beginning"&gt;
  &lt;/a&gt;
  The Beginning
&lt;/h4&gt;

&lt;p&gt;I started with the goal of developing a simple Front End &lt;a href="https://reactjs.org/"&gt;React JS&lt;/a&gt;  and a JSON &amp;amp; Yaml File for the API List. Creating the basic structure of the site I used &lt;a href="https://sass-lang.com/"&gt;Sass/SCSS&lt;/a&gt; for Styling, &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; for Structure, and &lt;a href="https://www.npmjs.com/"&gt;npm packages&lt;/a&gt; (Font Awesome, React-Scroll-Motion). For the API Development I used &lt;a href="//postman.com"&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The Future
&lt;/h4&gt;

&lt;p&gt;This project is just in its infancy and I plan on developing this into a full Web API using REST &amp;amp; React.js as the main technologies. Having multiple Collaborators &amp;amp; Contributors will help to the project's development. &lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/kwing25/Women-Who-ve-Changed-Tech"&gt;Contribute☞&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#being-a-maintainer"&gt;
  &lt;/a&gt;
  Being a Maintainer
&lt;/h4&gt;

&lt;p&gt;Being a maintainer on a repo can be very rewarding but also involves a lot of work. &lt;a href="https://docs.github.com/"&gt;GitHub&lt;/a&gt; &amp;amp; GitLab make Devops/Repo Management accessible for users and is vital for open source collaboration. &lt;em&gt;Issues, Docs, PR's, Tracking, Actions, Projects, Etc.&lt;/em&gt;. One of the most important things I've learned is that having strong connections &amp;amp; communication with other collaborators can make a huge difference in a project. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#women-in-tech"&gt;
  &lt;/a&gt;
  Women in Tech
&lt;/h3&gt;

&lt;p&gt;My experience as a Woman in the Tech Industry has come with challenges. I started out taking Computer Networking courses and wanted to get certifications in IT and Security. There were very few women in these classes and sometimes I was the only one. I never let this stop me from going into this field and I don't want this to stop any other woman from pursuing a career in tech. But I had to learn and grow more confident in myself. Amy Hood the CFO of Microsoft put this feeling into good words-&lt;br&gt;&lt;br&gt;
"Every job I took, I was deeply uncomfortable in terms of feeling unqualified. Every step, every risk I took, built confidence."&lt;br&gt;&lt;br&gt;
When you love a certain field and are passionate about it you can achieve about anything (usually easier said than done). There are so many talented women in the Tech Industry and so many that have made a lasting impact. My ultimate goal for this project is to document women in Tech and make sure there remembered in Tech history. &lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks
&lt;/h4&gt;

&lt;p&gt;👏 Many great Contributors on this project. See the list ☞ github.com/kwing25/Women-Who-ve-Changed-Tech/graphs/contributors&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#see-more"&gt;
  &lt;/a&gt;
  See more
&lt;/h4&gt;

&lt;p&gt;Contact-&lt;br&gt;
&lt;a href="https://github.com/kwing25"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBnqIuQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-%40kwing25-85e2cd%3Fstyle%3Dflat%26logo%3DGitHub%26link%3Dhttps://github.com/kwing25" alt="GitHub " width="131" height="20"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/kendrawing/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnKsgTME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/LinkedIn-gray%3Fstyle%3Dflat%26logo%3DLinkedin%26link%3Dhttps://www.linkedin.com/in/kendrawing/" alt="LinkedIn" width="75" height="20"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://www.britannica.com/biography/Ada-Lovelace"&gt;Ada Lovelace&lt;/a&gt; was my first entry to the list. ✦ Known as the 1st Computer Programmer. Ada was brilliant in Mathematics &amp;amp; Computing. She lived in the 1800s and is still remembered today for her contributions in this field. &lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAjpTS_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.britannica.com/22/23622-050-E60DC899/Ada-King-countess-Lovelace-Alfred-Edward-Chalon-circa-1838.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAjpTS_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.britannica.com/22/23622-050-E60DC899/Ada-King-countess-Lovelace-Alfred-Edward-Chalon-circa-1838.jpg" alt="profile" width="880" height="1095"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ada Lovelace"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"known_for"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"First Computer Programmer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Bio"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Summary"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The daughter of famed poet Lord Byron, Augusta Ada Byron, Countess of Lovelace — better known as &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Ada Lovelace&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; — showed her gift for mathematics at an early age. She translated an article on an invention by Charles Babbage, and added her own comments. Because she introduced many computer concepts, Lovelace is considered the first computer programmer"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Fields"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Computing"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"Programming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"Algorithms"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Legacy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Lovelace's contributions to the field of computer science were not discovered until the 1950s. Her notes were reintroduced to the world by B.V. Bowden, who republished them in 'Faster Than Thought - A Symposium on Digital Computing Machines'. Since then, Ada has received many posthumous honors for her work."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






</description>
      <category>hacktoberfest</category>
      <category>womenintech</category>
      <category>devops</category>
    </item>
    <item>
      <title>Yeoman‎ - Acelerando a criação de novos projetos</title>
      <author>Jhony Walker</author>
      <pubDate>Sun, 31 Oct 2021 23:54:26 +0000</pubDate>
      <link>https://dev.to/jhonywalkeer/yeoman-acelerando-a-criacao-de-novos-projetos-39cm</link>
      <guid>https://dev.to/jhonywalkeer/yeoman-acelerando-a-criacao-de-novos-projetos-39cm</guid>
      <description>&lt;p&gt;A criação de um novo projeto pode ser bem exaustiva... Não digo isso pela questão do projeto ser do zero, isso na verdade é bastante estimulante, o que é torna exaustivo é fazer toda a configuração do zero de um projeto assim.&lt;/p&gt;

&lt;p&gt;Para exterminar este problema (pelo menos para o desenvolvimento inicial do projeto)o &lt;a href="https://yeoman.io/"&gt;Yeoman&lt;/a&gt; está aqui para ajudar..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iqKiahtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3q122kffquftssaxcik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iqKiahtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3q122kffquftssaxcik.png" alt="Yeoman da dando uma mãozinha" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#os-mil-e-um-geradores-do-yeoman"&gt;
  &lt;/a&gt;
  Os mil e um geradores do Yeoman
&lt;/h3&gt;

&lt;p&gt;De acordo com a descrição do próprio site oficial, o Yeoman é uma ferramenta que nos ajuda a dar o pontapé inicial em novos projetos, prescrevendo práticas recomendadas e ferramentas para nos ajudar a ser mais produtivos. Ele faz tudo isso através de um ecossistema de geradores.&lt;/p&gt;

&lt;p&gt;Em resumo, cada gerador é uma ferramenta customizada construída em cima da arquitetura do Yeoman para gerar um resultado desejado. Isso significa que os geradores não estão associados a uma única tecnologia, muito pelo contrário, há mais de 7000 geradores dos mais diversos tipos, que vão do JavaScript até o PHP. Estes são alguns deles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kriasoft/react-starter-kit#readme"&gt;React FullStack&lt;/a&gt; (14000 estrelas) — React.js com ES6+, Babel, Express, Webpack, BrowserSync configurados.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.jhipster.tech/"&gt;jhipster&lt;/a&gt; (10000 estrelas) — Spring Boot + Angular&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://infinite.red/ignite"&gt;React Native Ignite&lt;/a&gt; (7500 estrelas) — Projetos React Native&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angular-fullstack.github.io/"&gt;Angular FullStack&lt;/a&gt; (6000 estrelas) — MEAN Stack (MongoDB, Express, AngularJS, e Node)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A verdade é que para qualquer tipo de projeto, seja em Java, PHP ou C, com certeza alguém já criou um gerador adequado para ajudar. Para entender melhor como isso tudo funciona, vamos criar juntos um pequeno projeto web utilizando a ferramenta.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#criando-um-site-com-o-gerador"&gt;
  &lt;/a&gt;
  Criando um site com o gerador
&lt;/h3&gt;

&lt;p&gt;Para este artigo, criaremos uma pequena aplicação web utilizando o &lt;a href="https://github.com/yeoman/generator-webapp"&gt;yeoman/generator-webapp&lt;/a&gt;. Este gerador tem mais de 3400 estrelas no GitHub e é um dos geradores mais bem avaliados na plataforma. Ela nos dá uma série de funcionalidades interessantes, tais como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ES6+ através do &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CSS Autoprefixing&lt;/li&gt;
&lt;li&gt;Built-in preview server através do &lt;a href="https://browsersync.io/"&gt;Browsersync&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Compilação de SASS com o &lt;a href="http://libsass.org/"&gt;libsass&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Lint “automágico” dos scripts&lt;/li&gt;
&lt;li&gt;Source Maps&lt;/li&gt;
&lt;li&gt;Otimização de imagens&lt;/li&gt;
&lt;li&gt;Gerenciamento de dependências com o &lt;a href="https://bower.io/"&gt;Bower&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Testes utilizando o &lt;a href="https://github.com/mochajs/mocha"&gt;Mocha&lt;/a&gt; (ou &lt;a href="https://jasmine.github.io/"&gt;Jasmine&lt;/a&gt;)
E muito mais&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parece bem top né? Mas antes de conseguir utilizar tudo isso, precisamos ter o Yeoman instalado na nossa máquina. Para isso, execute o seguinte comando no terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install — global yo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se tudo der certo, você verá uma tela semelhante a esta:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JncaB80P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rise1ew0vd3uhv5kjhac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JncaB80P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rise1ew0vd3uhv5kjhac.png" alt="Image description" width="436" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com a ferramenta instalada, precisamos agora baixar as dependências do gerador (cada gerador conterá instalações/dependências diferentes). O gerador que escolhemos utiliza o Gulp e o Bower então será necessário instalar ambos basta executar os seguintes comandos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install — global gulp-cli bower generator-webapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com tudo instalado, vamos criar o nosso projeto. Para isso, execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yo webapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Este comando fará com que o Yeoman procure pelo gerador webapp e o inicie. Logo de cara, ele te fará algumas perguntas, como qual versão do Bootstrap (esse pacote possui Boostrap) você quer usar e quais outras funcionalidades você quer incluir no projeto (SASS, Modernizr, etc). Se tudo ocorrer como esperado, após alguns minutos você terá um projeto com a seguinte estrutura:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-o75LEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnbpyksv9kf5llgyxv2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-o75LEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnbpyksv9kf5llgyxv2z.png" alt="Image description" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora podemos executar &lt;code&gt;gulp serve&lt;/code&gt; para iniciar o projeto localmente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tqwQ4rUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3e81cup8sbub4xafbfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tqwQ4rUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3e81cup8sbub4xafbfz.png" alt="Image description" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E pronto, o projeto está preparado para desenvolvimento! (confira a documentação do gerador para ver mais comandos).&lt;br&gt;
O Yeoman foi criado para ser um facilitador na criação e configuração de novos projetos de software e faz este papel muito bem. Sua grande sacada está no seu amplo ecossistema de geradores, possível graças a sua arquitetura, que permite a qualquer desenvolvedor(a) criar um gerador para um projeto, independente da ferramenta e/ou linguagem.&lt;/p&gt;

&lt;p&gt;Fontes onde pesquisei esse conteúdo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yeoman.io/"&gt;https://yeoman.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yeoman.io/authoring/"&gt;https://yeoman.io/authoring/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yeoman.io/learning/index.html"&gt;https://yeoman.io/learning/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yeoman.io/codelab/index.html"&gt;https://yeoman.io/codelab/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yeoman/generator-webapp"&gt;https://github.com/yeoman/generator-webapp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>RUBY, C++</title>
      <author>Sam Sonter</author>
      <pubDate>Sun, 31 Oct 2021 23:26:58 +0000</pubDate>
      <link>https://dev.to/asapsonter/ruby-c-12ap</link>
      <guid>https://dev.to/asapsonter/ruby-c-12ap</guid>
      <description>&lt;p&gt;Why do most people hate Ruby on rails and C++?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>ruby</category>
      <category>cpp</category>
    </item>
  </channel>
</rss>
