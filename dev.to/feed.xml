<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Exploratory Data Analysis Using Python</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Sat, 17 Jul 2021 06:37:22 +0000</pubDate>
      <link>https://dev.to/grayhat/exploratory-data-analysis-using-python-28h</link>
      <guid>https://dev.to/grayhat/exploratory-data-analysis-using-python-28h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6y54GtAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe53gtzrobrt8flibzs6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6y54GtAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe53gtzrobrt8flibzs6.png" alt="Exploratory Data Analysis Using Python"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Exploratory data analysis is one of the most important step for any data science project. In today's session we will be performing data analysis of titanic dataset. To do so, we will be using the Pandas, Seaborn and Matplotlib library. You can download the dataset from &lt;a href="https://www.kaggle.com/c/titanic/data"&gt;Kaggle here&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#let-first-understand-what-is-exploratory-data-analysis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let First Understand What Is Exploratory Data Analysis.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;According to wikipedia:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Exploratory data analysis, EDA is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. A statistical model can be used or not, but primarily exploratory data analysis is for seeing what the data can tell us beyond the formal modelling or hypothesis testing task."  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exploratory data analysis in Python uses data visualisation to draw meaningful patterns and insights. It also involves the preparation of data sets for analysis by removing irregularities in the data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note That:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If EDA is not done properly then it can hamper the further steps in the machine learning model building process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If done well, it may improve the efficiency of everything we do next.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-sourcing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Data Sourcing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is the very first step of Exploratory Data Analysis. Data Sourcing is the process of finding and loading the data into our system.&lt;/p&gt;

&lt;p&gt;1). Private Data&lt;/p&gt;

&lt;p&gt;2). Public Data&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Private Data.&lt;/strong&gt;&lt;br&gt;
As the name suggests, private data is given by private organisations. There are some security and privacy concerns attached to it. This type of data is used for mainly organisations internal analysis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Public Data.&lt;/strong&gt;&lt;br&gt;
This type of Data is available to everyone. We can find this in government websites and public organizations etc. Anyone can access this data, we do not need any special permissions or approval.&lt;/p&gt;

&lt;p&gt;Famous Sources of Public Data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kaggle.com/"&gt;https://www.kaggle.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://archive.ics.uci.edu/ml/index.php"&gt;https://archive.ics.uci.edu/ml/index.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/awesomedata/awesome-public-datasets"&gt;https://github.com/awesomedata/awesome-public-datasets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As i mentioned  earlier i will using public  data set from kaggle which can be obtained  from &lt;a href="https://www.kaggle.com/c/titanic/data"&gt;this&lt;/a&gt; link.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#storytelling"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Storytelling&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Let try to understand the dataset first. It has 12 columns and we will be using 11 features to predict the target variable which is ‘Survived’.&lt;/p&gt;

&lt;p&gt;The target variable is the one which we are trying to predict. Our first step would be to polish the features so that it can be used to input to a machine learning model which we can use to do our required task. &lt;/p&gt;

&lt;p&gt;To load the data into a dataframe we can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;titanic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get idea about the dataset we can use the head function of the dataframe. It will return the first 5 rows. So executing the train.head() will give us the first 5 rows as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brkv6yGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3lnqow93o1j0hqcoi54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brkv6yGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3lnqow93o1j0hqcoi54.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly we can use the info and describe method to get detailed statistics about the data. &lt;/p&gt;

&lt;p&gt;One of the important objective data preprocessing and eda is to get rid of the null data. To do so we need to know where we have got null values. We shall use heatmap inorder to have an idea on this. To implement it seaborn library will be used. The following code snippet will create a heatmap for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heatmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;yticklabels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cbar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code would be as shown below: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4MoDLKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu2atzx65ldnzhmoendz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4MoDLKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu2atzx65ldnzhmoendz.png" alt="heatmap plot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the diagram above the column &lt;strong&gt;‘Age’&lt;/strong&gt; and &lt;strong&gt;‘Cabin’&lt;/strong&gt; have got null values. While &lt;strong&gt;‘Cabin’&lt;/strong&gt; has huge amount null values, &lt;strong&gt;‘Age’&lt;/strong&gt; has moderate amount of null values.&lt;/p&gt;

&lt;p&gt;Here we would drop the ‘Cabin’ column as it has got mostly NULL values.&lt;/p&gt;

&lt;p&gt;To do so we will use the following code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;Cabin&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now comes the interesting part. We need to form a logic to impute the missing values of the &lt;strong&gt;‘Age’&lt;/strong&gt; column. We shall come back to it later after understanding the relation between &lt;strong&gt;‘Age’&lt;/strong&gt; and various other variables.&lt;/p&gt;

&lt;p&gt;Let us try to know if the dependent variable &lt;strong&gt;‘Survived’&lt;/strong&gt; has any relation with the variable &lt;strong&gt;‘Sex’&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To do so we would use factorplot. The following code snippet would return us the required figure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;Survived&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;Sex&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code is the following figure:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8-gMiwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z7raerw15cfrl8ey9jh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8-gMiwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z7raerw15cfrl8ey9jh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inference:&lt;/strong&gt; As we all know from the movie as well as the story of titanic females were given priority while saving passengers. The above graph also tells us the same story. More number of male passengers have died than female ones.&lt;/p&gt;

&lt;p&gt;Similarly let us try to see how the variable &lt;strong&gt;‘Pclass’&lt;/strong&gt; is related to the variable &lt;strong&gt;‘Survived’.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To do so we would draw a &lt;strong&gt;countplot&lt;/strong&gt; using the following code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;countplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;Survived&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;Pclass&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code is the following figure: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--la0t0mvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sg6w73vs62unvjpi32k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--la0t0mvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sg6w73vs62unvjpi32k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inference:&lt;/strong&gt; The graph tells us that &lt;strong&gt;Pclass&lt;/strong&gt; 3 were more likely to be survived. It was meant for the richer people while Pclass 1 were the most likely victims which was relatively cheaper than class 3.&lt;/p&gt;

&lt;p&gt;Let us try to understand the column ‘Sibsip’ in detail. To do so we would again use the countplot from seaborn. The following code snippet would achieve the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;countplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;SibSp&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FajJt-Gv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q99hxb6w53dogxjb15xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FajJt-Gv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q99hxb6w53dogxjb15xd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inference:&lt;/strong&gt; Here ‘SibSp’ variable refers to the number of sibling or spouse the person was accompanied with. We can see most of the people came alone.&lt;/p&gt;

&lt;p&gt;Lastly we have to figure out a way to fill the missing value of the variable &lt;strong&gt;‘Age’&lt;/strong&gt;. Here we segregated the &lt;strong&gt;‘Age’&lt;/strong&gt; variable according to the &lt;strong&gt;Pclass&lt;/strong&gt; variable as it was found out that &lt;strong&gt;‘Age’&lt;/strong&gt; and &lt;strong&gt;‘Pclass’&lt;/strong&gt; column were related.&lt;/p&gt;

&lt;p&gt;We would draw a boxplot that would tell us the mean value each of the &lt;strong&gt;Pclass&lt;/strong&gt;. To do so we can write the following code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boxplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Pclass'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;palette&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'winter'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would produce this graph: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYgnewY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjnjrmhrnuual3yt7rte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYgnewY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjnjrmhrnuual3yt7rte.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this graph we can find out the mean age for each of the &lt;strong&gt;Pclass&lt;/strong&gt;. &lt;br&gt;
We would impute the same for missing &lt;strong&gt;‘Age’&lt;/strong&gt; values. We can write a simple python function to get the same. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dealing With The Categorical Value:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have to convert the categorical values into numbers so that it can be used as an input to the model. To do so we would use the following code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;embark&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dummies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;Embarked&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;drop_first&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dummies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;Sex&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;drop_first&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly we have to drop all the columns that do not provide any meaningful information like &lt;strong&gt;‘Name’&lt;/strong&gt; and &lt;strong&gt;‘Ticket’&lt;/strong&gt; along with the previous &lt;strong&gt;‘Embarked’&lt;/strong&gt; and &lt;strong&gt;‘Sex’&lt;/strong&gt; as they have been replaced. Also we need add the newly created embark and sex column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'Sex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Embarked'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Ticket'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;embark&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations , now our dataset is ready to be used as input to a machine learning model. This was a detailed analysis of the titanic dataset.&lt;/p&gt;

&lt;p&gt;You Can get the code full code here:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Colabs:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1UWyeKU8Hop9_yo5109Xuz78kuezlyt7u?usp=sharing"&gt;https://colab.research.google.com/drive/1UWyeKU8Hop9_yo5109Xuz78kuezlyt7u?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git Hub:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Data-Science-East-AFrica/Exploratory-Data-Analysis-Using-Python/blob/main/Exploratory_Data_Analysis_Using_Python.ipynb"&gt;https://github.com/Data-Science-East-AFrica/Exploratory-Data-Analysis-Using-Python/blob/main/Exploratory_Data_Analysis_Using_Python.ipynb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;**More Resources on Data Analysis Using  Python:&lt;br&gt;
&lt;a href="https://github.com/LuxTechAcademy/Data-Cleaning-with-Python-and-Pandas"&gt;https://github.com/LuxTechAcademy/Data-Cleaning-with-Python-and-Pandas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get connected with me in twitter go to this link: &lt;a href="https://twitter.com/HarunMbaabu"&gt;https://twitter.com/HarunMbaabu&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>Laravel Image Text Watermarking Tutorial</title>
      <author>avani-trivedi</author>
      <pubDate>Sat, 17 Jul 2021 06:37:05 +0000</pubDate>
      <link>https://dev.to/avanitrivedi/laravel-image-text-watermarking-tutorial-b9l</link>
      <guid>https://dev.to/avanitrivedi/laravel-image-text-watermarking-tutorial-b9l</guid>
      <description>&lt;p&gt;Hello Friends,&lt;/p&gt;

&lt;p&gt;Now let's see example of how to image text watermarking in laravel. This is a short guide on laravel if image text watermarking. We will use how to use image text watermarking in laravel. Here you will learn how to use image text watermarking in laravel. Let's get started with how to image text watermarking in laravel.&lt;/p&gt;

&lt;p&gt;More...&lt;br&gt;
&lt;a href="https://www.mywebtuts.com/blog/laravel-image-text-watermarking-tutorial"&gt;https://www.mywebtuts.com/blog/laravel-image-text-watermarking-tutorial&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
    </item>
    <item>
      <title>J.A.R.V.I.S</title>
      <author>Bolisetty Sujith</author>
      <pubDate>Sat, 17 Jul 2021 05:41:17 +0000</pubDate>
      <link>https://dev.to/bolisettysujith/j-a-r-v-i-s-l3a</link>
      <guid>https://dev.to/bolisettysujith/j-a-r-v-i-s-l3a</guid>
      <description>&lt;p&gt;A voice assistant which can be used to interact with your computer and also you have been seeing it in Iron man movies, but this JARVIS is not that much advanced as shown in movies. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-with-python"&gt;
  &lt;/a&gt;
  Built with: Python
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Demo video for &lt;strong&gt;&lt;em&gt;JARVIS&lt;/em&gt;&lt;/strong&gt; is available &lt;a href="https://docs.google.com/presentation/d/14w4dQUpqVOmGvAXEn8vYkHQUmMYU72wIb-AK0SWCWYk/edit?usp=sharing"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cool-functionalities-of-jarvis-"&gt;
  &lt;/a&gt;
  Cool functionalities of JARVIS 😎 :)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5kaccIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/FreshAnyHanumanmonkey-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5kaccIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/FreshAnyHanumanmonkey-size_restricted.gif" alt="JARVIS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have wrote code which you can use JARVIS in the following ways :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It can tell &lt;strong&gt;count of Covid-19 cases for each state in India&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can do &lt;strong&gt;Screen Recording with voice recording&lt;/strong&gt; stuff&lt;/li&gt;
&lt;li&gt;It can also do &lt;strong&gt;voice recording&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can access your &lt;strong&gt;mobile camera&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can access your &lt;strong&gt;web camera&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can read &lt;strong&gt;pdf's&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can check/find your &lt;strong&gt;Internet speed&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can tell your &lt;strong&gt;IP address&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can tell the &lt;strong&gt;latest news&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can check the &lt;strong&gt;system condition&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can send &lt;strong&gt;gmails&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can send &lt;strong&gt;whatsapp messages to Individual &amp;amp; group chats&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can play &lt;strong&gt;youtube songs&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;download youtube songs&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;download instagram profiles&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can find/tell your &lt;strong&gt;current location&lt;/strong&gt; where ever you are&lt;/li&gt;
&lt;li&gt;It can take &lt;strong&gt;screenshots&lt;/strong&gt; with a custom filename &lt;/li&gt;
&lt;li&gt;It can tell &lt;strong&gt;current time&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can tell &lt;strong&gt;current day&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can tell random &lt;strong&gt;progrmamming jokes&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can also tell your &lt;strong&gt;schedule&lt;/strong&gt; for each day&lt;/li&gt;
&lt;li&gt;It can be &lt;strong&gt;silent&lt;/strong&gt; for a certain number of time if we mention how much time we want it to be silent&lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;search in wikipedia&lt;/strong&gt; and tell about it in 5 lines&lt;/li&gt;
&lt;li&gt;It can tell &lt;strong&gt;procedure/instructions&lt;/strong&gt; how to make something(Eg:How to make a cake)&lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;search for information&lt;/strong&gt; in browser which we want&lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;control system volumes&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;control system power activities&lt;/strong&gt;(Eg: shutdown, restart, sleep)&lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;play music file&lt;/strong&gt; in a particular directory where the songs are present&lt;/li&gt;
&lt;li&gt;It can open your &lt;strong&gt;social media and open-source accounts&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can open your &lt;strong&gt;college meeting accounts&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can open your &lt;strong&gt;OTT platforms accounts&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can open your &lt;strong&gt;all google apps&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can open presentation tools like &lt;strong&gt;canva, google slide&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can open &lt;strong&gt;shopping websites&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can open &lt;strong&gt;all the URL links&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;It can open/close &lt;strong&gt;all the pc applications&lt;/strong&gt;(&lt;em&gt;NOTE&lt;/em&gt;: give correct path based on your OS)&lt;/li&gt;
&lt;li&gt;It can &lt;strong&gt;sleep until you say wake up&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Finally It &lt;strong&gt;can interact with you&lt;/strong&gt; and you can also add more commands if you want😎&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; python version &amp;gt;=3.6 and supported OS : Windows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#these-are-the-following-modules-used-in-jarvis-"&gt;
  &lt;/a&gt;
  These are the following modules used in JARVIS😉 :
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pypi.org/project/SpeechRecognition/"&gt;SpeechRecognisation&lt;/a&gt; | &lt;a href="https://pypi.org/project/PyAudio/"&gt;PyAudio&lt;/a&gt; | &lt;a href="https://pypi.org/project/pyttsx3/"&gt;pyttsx3&lt;/a&gt; | &lt;a href="https://pypi.org/project/pywhatkit/"&gt;pywhatkit&lt;/a&gt; | &lt;a href="https://pypi.org/project/DateTime/"&gt;datetime&lt;/a&gt; | &lt;a href="https://pypi.org/project/wikipedia/"&gt;wikipedia&lt;/a&gt; | &lt;a href="https://pypi.org/project/pyjokes/"&gt;pyjokes&lt;/a&gt; | &lt;a href="https://pypi.org/project/opencv-python/"&gt;cv2&lt;/a&gt; | &lt;a href="https://pypi.org/project/cv2-tools/"&gt;cv2 tools&lt;/a&gt; | &lt;a href="https://pypi.org/project/requests/"&gt;requests&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pypi.org/project/psutil/"&gt;psutil&lt;/a&gt; | &lt;a href="https://pypi.org/project/random2/"&gt;random&lt;/a&gt; | &lt;a href="https://pypi.org/project/instaloader/"&gt;instaloader&lt;/a&gt; | &lt;a href="https://pypi.org/project/PyAutoGUI/"&gt;PyAutoGUI&lt;/a&gt; | &lt;a href="https://pypi.org/project/PyPDF2/"&gt;PyPDF2&lt;/a&gt; | &lt;a href="https://pypi.org/project/bs4/"&gt;bs4&lt;/a&gt; | &lt;a href="https://pypi.org/project/PyQt5-Qt5/"&gt;PyQt5&lt;/a&gt; | &lt;a href="https://pypi.org/project/pywikihow/"&gt;pywikihow&lt;/a&gt; | &lt;a href="https://pypi.org/project/speedtest-cli/"&gt;speed test&lt;/a&gt; | &lt;a href="https://pypi.org/project/pytube/"&gt;pytube&lt;/a&gt; | &lt;a href="https://pypi.org/project/numpy/"&gt;numpy&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;| &lt;a href="https://pypi.org/project/phonenumbers/"&gt;phonenumbers&lt;/a&gt; | &lt;a href="https://pypi.org/project/folium/"&gt;folium&lt;/a&gt; | &lt;a href="https://pypi.org/project/opencage/"&gt;opencage&lt;/a&gt; | &lt;a href="https://pypi.org/project/Pillow/"&gt;pillow&lt;/a&gt; | &lt;a href="https://pypi.org/project/PyWave/"&gt;Pywave&lt;/a&gt; | &lt;a href="https://pypi.org/project/pywin32/"&gt;win32api&lt;/a&gt; | &lt;a href="https://docs.python.org/dev/library/msvcrt.html#msvcrt.kbhit"&gt;mscvrt&lt;/a&gt;| &lt;a href="https://pypi.org/project/covid-india/"&gt;covid&lt;/a&gt; | &lt;a href="https://pypi.org/project/urllib3/"&gt;urllib&lt;/a&gt; | &lt;a href="https://pypi.org/project/secure-smtplib/"&gt;smtplib&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-keys-used"&gt;
  &lt;/a&gt;
  API keys used
&lt;/h3&gt;

&lt;p&gt;To run this project you should need a API key for reading news. Register for your API key by clicking the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://newsapi.org/"&gt;NewsAPI&lt;/a&gt; : used for fetching news&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://opencagedata.com/"&gt;Open cage&lt;/a&gt; : to locate a place in maps&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#final-gui-of-jarvis"&gt;
  &lt;/a&gt;
  FINAL GUI of JARVIS😎
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUqVSAKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3knkpr3dhsywyf4umgmi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUqVSAKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3knkpr3dhsywyf4umgmi.gif" alt="FinalGUI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#motivation-for-this-project"&gt;
  &lt;/a&gt;
  Motivation for this project🙃
&lt;/h3&gt;

&lt;p&gt;Due to covid19 in my house I'm in a separate room, without talking with anyone, so thought to talk with my laptop which I will use everyday, and came up with this project.&lt;/p&gt;

&lt;p&gt;To know more about this post or contribute to this project or use this J.A.R.V.I.S feel free to visit the &lt;a href="https://github.com/BolisettySujith/J.A.R.V.I.S"&gt;J.A.R.V.I.S&lt;/a&gt; GitHub repo😉.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you🙃
&lt;/h3&gt;

</description>
      <category>python</category>
      <category>ai</category>
      <category>voiceassistant</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 184</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 17 Jul 2021 04:12:09 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-184-4ic6</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-184-4ic6</guid>
      <description>&lt;p&gt;👋 Emberistas! 🐹&lt;/p&gt;

&lt;p&gt;The Road to Ember 4.0 Polaris, introducing a11y-disabled-modifier, Emberliners talks, and get your update for ember-engines 0.8.18.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-road-to-ember-40-polaris-%F0%9F%9B%A3"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.emberjs.com/the-road-to-ember-4-0/"&gt;The Road to Ember 4.0 Polaris 🛣&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mixonic"&gt;Matthew Beale (@mixonic)&lt;/a&gt; from the Ember Core Framework and Steering Committee &lt;a href="https://emberjs.com/teams/"&gt;teams&lt;/a&gt;, writes about &lt;a href="https://blog.emberjs.com/the-road-to-ember-4-0/"&gt;The Road to Ember 4.0&lt;/a&gt; on the official Ember blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Announcing Ember 4.0&lt;/strong&gt;: Ember 4.0 will be released around September 20th. Ember 4.4 will be the first LTS candidate of the 4.x series.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Whats in a 4.0?&lt;/strong&gt;: As a major version of Ember, there are no new features. This sections discusses the removal of deprecated APIs. For example, &lt;code&gt;Ember.Logger&lt;/code&gt; is removed in favor of native console APIs. Also, &lt;code&gt;sendAction&lt;/code&gt; is removed in favor of calling closure actions like any other callback.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Planning your upgrade to 4.0&lt;/strong&gt;: Consider using the &lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt; addon as part of your upgrade process.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Contributing to Ember 4.0&lt;/strong&gt;: Join us on &lt;a href="https://discord.com/invite/emberjs"&gt;Discord&lt;/a&gt; in the #dev-ember-js, #dev-ember-data, #dev-ember-cli, or #dev-ember-learning channels to find out how you can contribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please check out the &lt;a href="https://blog.emberjs.com/the-road-to-ember-4-0/"&gt;detailed post&lt;/a&gt; in full for more details on how you can prepare for your upgrade!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We're looking forward to working with the community on Ember 4.0 and on the opportunities beyond it. As always we appreciate your support, your trust, and our common partnership.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#introducing-the-a11ydisabledmodifier-modifier"&gt;
  &lt;/a&gt;
  &lt;a href="https://discord.com/channels/480462759797063690/480499624663056390/842592654696382474"&gt;Introducing the a11y-disabled-modifier Modifier 💚&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Inspired by the &lt;a href="https://css-tricks.com/"&gt;CSSTricks&lt;/a&gt; blog post on &lt;a href="https://css-tricks.com/making-disabled-buttons-more-inclusive/"&gt;Making Disabled Buttons More Inclusive&lt;/a&gt;, &lt;a href="https://github.com/chriskrycho/"&gt;Chris Krycho (@chriskrycho)&lt;/a&gt; created the &lt;a href="https://github.com/chriskrycho/a11y-disabled-modifier"&gt;a11y-disabled-modifier&lt;/a&gt; addon.&lt;/p&gt;

&lt;p&gt;The blog post argues against the &lt;code&gt;disabled&lt;/code&gt; attribute in &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; in favor of the &lt;code&gt;aria-disabled&lt;/code&gt; attribute since it does not prevent clicking and focusing on the button which is useful when you are navigating the site using the Tab key.&lt;/p&gt;

&lt;p&gt;This modifier implements accessible and usable button-disabling by adding &lt;code&gt;aria-disabled="true"&lt;/code&gt; to the target element when the &lt;code&gt;when&lt;/code&gt; named argument is truthy. It will also stop any clicks on the button from propagating and ensures form submission does not trigger.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;on&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;submit&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="na"&gt;this.submit&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;some text: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'submit'&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;when=&lt;/span&gt;&lt;span class="s"&gt;this.isInvalid}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out today by running &lt;code&gt;ember install a11y-disabled-modifier&lt;/code&gt; on your Ember app!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-berlin-meetup-with-4-talks-%F0%9F%93%BD"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=c-sWTZJ6nlM&amp;amp;ab_channel=Pusherl"&gt;Ember Berlin Meetup with 4 talks 📽&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Four amazing talks from our friends at &lt;a href="https://www.meetup.com/Ember-js-Berlin/"&gt;Emberliners meetups&lt;/a&gt; are now available for binge watching!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First up, is &lt;a href="https://www.youtube.com/watch?v=c-sWTZJ6nlM&amp;amp;t=540s"&gt;Embroider: from zero to route splitting in 3.5 weeks&lt;/a&gt; by &lt;a href="https://github.com/bendemboski"&gt;Ben Demboski (@bendemboski)&lt;/a&gt; which explores what it takes to update a large desktop Ember app to use Embroider.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/Agathebadia"&gt;Agathe Badia (@Agathebadia)&lt;/a&gt; shows her fascinating work on creating a &lt;a href="https://www.youtube.com/watch?v=c-sWTZJ6nlM&amp;amp;t=2156s"&gt;Colorblindness emulator with Ember, an A11y project&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/mydea"&gt;Francesco Novy (@mydea)&lt;/a&gt; presents &lt;a href="https://www.youtube.com/watch?v=c-sWTZJ6nlM&amp;amp;t=3480s"&gt;You could get used to this: Managing GraphQL data&lt;/a&gt; - a great primer on GraphQL in Ember.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, &lt;a href="https://github.com/levelbossmike"&gt;Michael Klein (@levelbossmike)&lt;/a&gt; and &lt;a href="https://github.com/pangratz"&gt;Clemens Mueller (@pangratz)&lt;/a&gt; discuss &lt;a href="https://www.youtube.com/watch?v=c-sWTZJ6nlM&amp;amp;t=5118s"&gt;On the development of reactive systems with Ember.js&lt;/a&gt;, providing an insightful view on approaching Ember development as a reactive system using &lt;a href="https://ember-statecharts.com/"&gt;ember-statecharts&lt;/a&gt; addon.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These talks give a great snapshot lots of exciting developments happening around the Ember community 💗.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#emberengines-v0818-is-out"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/MVillander/status/1406367740668092420"&gt;ember-engines v0.8.18 is out! 🎉&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you're already using &lt;a href="https://ember-engines.com/"&gt;ember-engines&lt;/a&gt; or plan on using it, be sure to &lt;a href="https://twitter.com/MVillander/status/1406367740668092420"&gt;upgrade your dependency&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;latest patch release&lt;/strong&gt; of ember-engines not only includes bug fixes for older Ember apps, but also several build fixes and new deprecation warnings to help up you keep your application up-to-date.&lt;/p&gt;

&lt;p&gt;A huge thank you goes to &lt;a href="https://github.com/thoov"&gt;Travis Hoover (@thoov)&lt;/a&gt;, &lt;a href="https://github.com/bertdeblock"&gt;Bert De Block (@bertdeblock)&lt;/a&gt;, &lt;a href="https://github.com/villander"&gt;Michael Villander (@villander)&lt;/a&gt; and &lt;a href="https://github.com/rwjblue"&gt;Robert Jackson (@rwjblue)&lt;/a&gt; for their work on the project!&lt;/p&gt;

&lt;p&gt;Check out the full list of recent updates in the following &lt;strong&gt;changelogs&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ember-engines/ember-engines/releases/tag/v0.8.16"&gt;v0.8.16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ember-engines/ember-engines/releases/tag/v0.8.17"&gt;v0.8.17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ember-engines/ember-engines/releases/tag/v0.8.18"&gt;v0.8.18&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;Contributors' corner 👏&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/nlfurniss" rel="noopener noreferrer"&gt;Nathaniel Furniss (@nlfurniss)&lt;/a&gt;, &lt;a href="https://github.com/locks" rel="noopener noreferrer"&gt;Ricardo Mendes (@locks)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/scalvert" rel="noopener noreferrer"&gt;Steve Calvert (@scalvert)&lt;/a&gt;, &lt;a href="https://github.com/mixonic" rel="noopener noreferrer"&gt;Matthew Beale (@mixonic)&lt;/a&gt;, &lt;a href="https://github.com/fozy81" rel="noopener noreferrer"&gt;Tim (@fozy81)&lt;/a&gt;, &lt;a href="https://github.com/SergeAstapov" rel="noopener noreferrer"&gt;Sergey Astapov (@SergeAstapov)&lt;/a&gt;, &lt;a href="https://github.com/mansona" rel="noopener noreferrer"&gt;Chris Manson (@mansona)&lt;/a&gt;, &lt;a href="https://github.com/tcouloumy" rel="noopener noreferrer"&gt;@tcouloumy&lt;/a&gt;, &lt;a href="https://github.com/kennethlarsen" rel="noopener noreferrer"&gt;Kenneth Larsen (@kennethlarsen)&lt;/a&gt;, &lt;a href="https://github.com/jayjayjpg" rel="noopener noreferrer"&gt;Jesse Jordan (@jayjayjpg)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, and &lt;a href="https://github.com/wondersloth" rel="noopener noreferrer"&gt;Matthew Edwards (@wondersloth)&lt;/a&gt; for their contributions to Ember and related repositories! 💖&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;Connect with us 🤓&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCwKNRAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nama5ksixqhan750nhek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCwKNRAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nama5ksixqhan750nhek.png" alt="Office Hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers’ Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don’t worry, there are no silly questions, we appreciate them all - promise! 🤞&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;




&lt;p&gt;That's another wrap! ✨&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Chris Ng, Jesse Jordan, Tim Foster, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Challenge #3: Using Offline Tools to speed up dev in Serverless</title>
      <author>Raphael Jambalos</author>
      <pubDate>Sat, 17 Jul 2021 04:07:28 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/challenge-3-using-offline-tools-to-speed-up-dev-in-serverless-2hp8</link>
      <guid>https://dev.to/awscommunity-asean/challenge-3-using-offline-tools-to-speed-up-dev-in-serverless-2hp8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#quick-recap"&gt;
  &lt;/a&gt;
  Quick Recap
&lt;/h2&gt;

&lt;p&gt;In the first two challenges, we created a &lt;a href="https://dev.to/raphael_jambalos/challenge-1-create-a-simple-app-in-lambda-dynamodb-serverless-framework-of6"&gt;basic API-based loyalty application&lt;/a&gt; and we &lt;a href="https://dev.to/raphael_jambalos/challenge-2-add-sqs-s3-event-triggers-for-lambda-apps-3ian"&gt;upgraded our app to handle batch creating loyalty cards by uploading files to S3&lt;/a&gt;. Each restaurant under our company can now upload a CSV of old loyalty cards and have it batch-created in the system instead of filling up the form one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-next-challenge"&gt;
  &lt;/a&gt;
  Your Next Challenge
&lt;/h2&gt;

&lt;p&gt;We have shifted 90% of our old paper-based loyalty cardholders to our new upgraded system with your CSV upload module. Your manager is happy, and so are your customers. But deep down, you know something is wrong. You are not satisfied with your work.&lt;/p&gt;

&lt;p&gt;You write code, but there's no way to test locally. You have to use &lt;code&gt;serverless deploy&lt;/code&gt; every time. Need to correct that syntax error? Deploy first and invoke manually. It takes you 3-5 minutes to get feedback for such a small change. It's driving you nuts!&lt;/p&gt;

&lt;p&gt;In this challenge, we will introduce three ways to test locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#specification"&gt;
  &lt;/a&gt;
  Specification
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-use-serverless-offline"&gt;
  &lt;/a&gt;
  (1) Use Serverless Offline
&lt;/h3&gt;

&lt;p&gt;In the past two challenges, we created an API webserver, but we haven't been able to test our APIs locally. We deployed straight away. In frameworks like Flask and Ruby on Rails, we usually get to work with a local web server before deploying. &lt;/p&gt;

&lt;p&gt;Using serverless offline, upgrade your serverless.yml so that you can run a local version of your API and test your API via &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can learn more about serverless offline &lt;a href="https://www.serverless.com/plugins/serverless-offline-python"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-serverless-invoke-local"&gt;
  &lt;/a&gt;
  (2) serverless invoke local
&lt;/h3&gt;

&lt;p&gt;This command lets you invoke your Lambda function locally through an emulator that comes prepackaged with Serverless Framework. You simply run the command below every time you want to trigger your function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;serverless invoke &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nt"&gt;--function&lt;/span&gt; functionName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is pretty straightforward to use when testing out lambda functions that don't need you to send any input (i.e the Get All cards endpoints). But what if you need to send the card information to create a card?&lt;/p&gt;

&lt;p&gt;First, we create a file inside a mock file inside the mocks folder (let's name it mocks/create_card.json):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CardName&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Raphael Jambalos&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;CardNumber&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;4386290100000200&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's refer to it by adding the &lt;code&gt;--path&lt;/code&gt; parameter to our earlier command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;serverless invoke &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nt"&gt;--function&lt;/span&gt; create_card &lt;span class="nt"&gt;--path&lt;/span&gt; mocks/create_card.json  &lt;span class="nt"&gt;--region&lt;/span&gt; ap-southeast-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to test your functions.&lt;/p&gt;

&lt;p&gt;I think one question is that when do you use serverless invoke over serverless offline. I usually use the &lt;code&gt;invoke&lt;/code&gt; command when the application I'm developing is not API-based - when lambda functions are triggered by other event sources like scheduled triggers or S3 file uploads.&lt;/p&gt;

&lt;p&gt;You can learn more about it here: &lt;a href="https://www.serverless.com/framework/docs/providers/aws/cli-reference/invoke-local/"&gt;https://www.serverless.com/framework/docs/providers/aws/cli-reference/invoke-local/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-dynamodb-offline"&gt;
  &lt;/a&gt;
  (3) Using DynamoDB Offline
&lt;/h3&gt;

&lt;p&gt;Even if we use serverless offline and serverless invoke local to run our functions locally, we are still referring to AWS resources in the cloud (such as the DynamoDB table that stores the loyalty cards we created). While it might not be a huge inconvenience to continue using DynamoDB in the cloud, it comes with a few caveats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we have to deploy every time our schema changes in DynamoDB&lt;/li&gt;
&lt;li&gt;we incur charges in our AWS account (for most cases, this should be below 5USD. Except if you're doing stress testing - loading and reading thousands of rows of data often)&lt;/li&gt;
&lt;li&gt;if there's no internet, we cannot connect to the DynamoDB table (and hence, development stops)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this subchallenge, upgrade your serverless.yml file to use DynamoDb offline when you are developing. Install and run the DynamoDB client in your local machine. It should give you a local endpoint (i.e localhost:5000) and you should connect you serverless application there (by manipulating your serverless.yml)&lt;/p&gt;

&lt;p&gt;You can learn more about it here: &lt;a href="https://www.serverless.com/plugins/serverless-dynamodb-local"&gt;https://www.serverless.com/plugins/serverless-dynamodb-local&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-have-done"&gt;
  &lt;/a&gt;
  What we have done
&lt;/h2&gt;

&lt;p&gt;We used tools that allowed us to develop our serverless application with local tools. This speeds up development because we no longer have to communicate with AWS services in the cloud as we develop. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-off-your-work"&gt;
  &lt;/a&gt;
  Show off your work!
&lt;/h2&gt;

&lt;p&gt;Comment a screencap of your work below. Or better yet, create a blog post here in dev.to explaining how you did it. &lt;/p&gt;

&lt;p&gt;If you have any questions or are stuck somewhere, comment below or send me a pm, and I'd be happy to help you.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@glenncarstenspeters?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Glenn Carstens-Peters&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/computer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>aws</category>
      <category>python</category>
    </item>
    <item>
      <title>A thing that works when it shouldn't is just as bad as a thing that doesn’t work when it should (100 Bytes Of Wisdom: Day 64)</title>
      <author>Sam Jarman 👨🏼‍💻</author>
      <pubDate>Sat, 17 Jul 2021 03:50:03 +0000</pubDate>
      <link>https://dev.to/samjarman/a-thing-that-works-when-it-shouldn-t-is-just-as-bad-as-a-thing-that-doesn-t-work-when-it-should-100-bytes-of-wisdom-day-64-2a44</link>
      <guid>https://dev.to/samjarman/a-thing-that-works-when-it-shouldn-t-is-just-as-bad-as-a-thing-that-doesn-t-work-when-it-should-100-bytes-of-wisdom-day-64-2a44</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YtL1SCAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1nefcd0lhnzs71tt98q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YtL1SCAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1nefcd0lhnzs71tt98q.png" alt="A thing that works when it shouldn't is just as bad as a thing that doesn’t work when it should"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not understanding what is going on with some code or a system you're working on is fundamentally bad. Often, this means bugs, but sometimes it means things work but you don't know how. It's incredibly tempting to call it a day there and finish on that, but a truly disciplined engineer looks further and figures out what is actually going on. You learn more that way and next time you come to that code or system, you're better equipped to change it.&lt;/p&gt;

&lt;p&gt;Heads up: As with any terse bit of advice, there will be exceptions of course, and subtleties and nuance that can't possibly be captured in a Byte of Wisdom. This has been what I've experienced, I'd love to hear yours in the comments too!&lt;/p&gt;

&lt;p&gt;You can catch up with all the other bytes at &lt;a href="http://bytesofwisdom.com/"&gt;http://bytesofwisdom.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>journey</category>
      <category>advice</category>
    </item>
    <item>
      <title>Spring Boot Boilerplate for Your Next Projects</title>
      <author>Hiep Le</author>
      <pubDate>Sat, 17 Jul 2021 03:04:34 +0000</pubDate>
      <link>https://dev.to/hieptl/spring-boot-boilerplate-for-your-next-projects-3ccj</link>
      <guid>https://dev.to/hieptl/spring-boot-boilerplate-for-your-next-projects-3ccj</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The source code and the content of this article will be updated frequently. For this reason, please follow my article and my Github in order to get update-to-date information.&lt;/p&gt;

&lt;p&gt;The last updated date: 17/07/2021.&lt;/p&gt;

&lt;p&gt;Please give me Github ⭐ if you like the project. Pull requests are highly appreciated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Github link: &lt;a href="https://github.com/hieptl/spring-boot-boilerplate"&gt;https://github.com/hieptl/spring-boot-boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A boilerplate/starter project for quickly building RESTful APIs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Boot&lt;/li&gt;
&lt;li&gt;Spring Data JPA.&lt;/li&gt;
&lt;li&gt;Spring Security / JWT.&lt;/li&gt;
&lt;li&gt;Swagger.&lt;/li&gt;
&lt;li&gt;Mapstruct (converting entities to dtos and vice versa).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In this project, I am using MySQL. However, the boilerplate will work well with different databases including SQL databases and NoSQL databases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;In the most cases you need to have Maven and JDK8+. The best way to run the sample applications is with IDEs like IntelliJ IDEA or Eclipse. &lt;/p&gt;

&lt;p&gt;In order to run the project, you need to follow the below steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Clone the project.&lt;/li&gt;
&lt;li&gt;Step 2: Access to your MySQL database and run the &lt;strong&gt;minimalist_db_boilerplate.sql&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;Step 3: cd to &lt;strong&gt;spring-boot-boilerplate&lt;/strong&gt; folder and run &lt;strong&gt;mvn clean package -DskipTests&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Step 4: Run the jar file in the &lt;strong&gt;target&lt;/strong&gt; folder with &lt;strong&gt;jar -jar target/spring-boot-boilerplate-0.0.1-SNAPSHOT.jar&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;config&lt;/strong&gt;: stores configuration of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;controller&lt;/strong&gt;: stores controllers of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;dto&lt;/strong&gt;: stores data transfer objects of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;exception&lt;/strong&gt;: stores custom exception of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;mapper&lt;/strong&gt;: stores mappers of the project. Mappers will be used to convert to entities and vice versa.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;model&lt;/strong&gt;: stores models of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;repository&lt;/strong&gt;: stores repositories of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;response&lt;/strong&gt;: stores response of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;security&lt;/strong&gt;: stores configuration about security of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;service&lt;/strong&gt;: stores services of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;utils&lt;/strong&gt;: stores common functions that could be used in different placces in the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks and Best Regards,&lt;br&gt;
Hiep&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>java</category>
      <category>showdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript question #Day 7</title>
      <author>Sooraj S</author>
      <pubDate>Sat, 17 Jul 2021 02:53:43 +0000</pubDate>
      <link>https://dev.to/soorajs98/javascript-question-day-7-50ai</link>
      <guid>https://dev.to/soorajs98/javascript-question-day-7-50ai</guid>
      <description>&lt;p&gt;&lt;strong&gt;What's the output ?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lydia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hallie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A: &lt;code&gt;TypeError&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;B: &lt;code&gt;SyntaxError&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;C: &lt;code&gt;Lydia Hallie&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;D: &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answer: A&lt;/p&gt;

&lt;p&gt;In JavaScript, functions are objects, and therefore, the method &lt;code&gt;getFullName&lt;/code&gt; gets added to the constructor function object itself. For that reason, we can call &lt;code&gt;Person.getFullName()&lt;/code&gt;, but &lt;code&gt;member.getFullName&lt;/code&gt; throws a &lt;code&gt;TypeError&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you want a method to be available to all object instances, you have to add it to the prototype property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>Getting Started with JavaScript - Ultimate Free Resources</title>
      <author>Kritika</author>
      <pubDate>Sat, 17 Jul 2021 01:35:24 +0000</pubDate>
      <link>https://dev.to/kritikapattalam/getting-started-with-javascript-ultimate-free-resources-59p6</link>
      <guid>https://dev.to/kritikapattalam/getting-started-with-javascript-ultimate-free-resources-59p6</guid>
      <description>&lt;p&gt;In recent times few friends reached out to me, asking for links to resources that can help them kickstart into learning JavaScript/ES6. I have curated a list of links which are completely free that will help anyone in their journey towards learning JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;MDN (Mozilla) JavaScript Reference is the main documentation with examples and other information. It’s great to get in-depth information about individual language functions, methods etc.&lt;/p&gt;

&lt;p&gt;One can find it at  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript."&gt;MDN JavaScript Docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatibility-tables"&gt;
  &lt;/a&gt;
  Compatibility tables
&lt;/h3&gt;

&lt;p&gt;Since JavaScript is a developing language, new features get added regularly and some of them might not be supported by all browsers or engines. The below sites help you in identifying which features are supported by what browser/engine or version of a browser etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://caniuse.com"&gt;http://caniuse.com&lt;/a&gt; – per-feature tables of support, e.g. to see which engines support modern cryptography functions: &lt;a href="http://caniuse.com/#feat=cryptography"&gt;http://caniuse.com/#feat=cryptography&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kangax.github.io/compat-table"&gt;https://kangax.github.io/compat-table&lt;/a&gt; – a table with language features and engines that support those or don’t support.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ides"&gt;
  &lt;/a&gt;
  IDE's
&lt;/h3&gt;

&lt;p&gt;Some of my favorite IDE's I use for development I have listed below&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://notepad-plus-plus.org/"&gt;Notepad ++&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#tutorials-courses"&gt;
  &lt;/a&gt;
  Tutorials / Courses
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript."&gt;MDN JavaScript Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://javascript.info/"&gt;The Modern Javascript Tutorial&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://scotch.io/courses/getting-started-with-javascript-for-web-development"&gt;Getting Started with JavaScript for Web Development Courses&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://es6-features.org/"&gt;ES6-features.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javascripttutorial.net/"&gt;JavaScript Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javascripttutorial.net/es6/"&gt;ES6 Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/introtoes6"&gt;Intro to ES6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/es6/index.htm"&gt;Tutorials Point - ES6 for beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.java5cript.com/"&gt;JavaScript Free Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#videos-courses"&gt;
  &lt;/a&gt;
  Videos/ Courses
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;list=PLWKjhJtqVAbleDe3_ZA8h3AO2rXar-q2V&amp;amp;ab_channel=freeCodeCamp.orgfreeCodeCamp.orgVerified"&gt;Learn JavaScript - Full Course for Beginners - Video By freecodecamp.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/es6-javascript-improved--ud356"&gt;ES6 - JavaScript Improved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/javascript-essentials/"&gt;Javascript Essentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/ecmascript2015/"&gt;Learning ECMAScript The Next Generation of Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/"&gt;Eloquent JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superherojs.com/"&gt;Understanding ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andersonguelphjs.github.io/OReilly_JavaScript_The_Good_Parts_May_2008.pdf"&gt;JavaScript the Good Parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://speakingjs.com/es5/index.html"&gt;Speaking JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#learn-javascript-by-building-small-projects"&gt;
  &lt;/a&gt;
  Learn JavaScript by building small projects
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://javascript30.com/"&gt;30 Day Vanilla JS Coding Challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/learn-javascript-by-building-7-games-video-course/"&gt;Learn Javascript by building 7 games&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/adventcalendar/welcome-to-24-days-of-javascriptmas-cg2QbehG"&gt;24days of christmas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/learnjavascript"&gt;Learn JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JavaScript Algorithms and Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/"&gt;Freecodecamp.org&lt;/a&gt; - You can search for javaScript courses and pick the ones which are more suitable for you&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/build-a-quiz-app-with-html-css-and-javascript/"&gt;Build a Quiz App with HTML, CSS, and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.asmarterwaytolearn.com/js/index-of-exercises.html"&gt;Smarter Way to learn JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Asabeneh/30-Days-Of-JavaScript"&gt;30 Days of JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learnjavascript.online/"&gt;Learn JavaScript Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learn-js.org/en/"&gt;learn-js.org interactive JavaScript tutorial.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#github-repositories"&gt;
  &lt;/a&gt;
  Github Repositories
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;Javascript Algorithm and Data Structures&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/leonardomso/33-js-concepts"&gt;33 JS Concepts&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/bradtraversy/vanillawebprojects"&gt;20+ Web Projects With Vanilla JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/bradtraversy/50projects50days"&gt;50 Projects in 50 Days - HTML/CSS and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="%5Bhttps://github.com/airbnb/javascript"&gt;JavaScript Style Guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wesbos/JavaScript30"&gt;30 Day Vanilla JS Coding Challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lydiahallie/javascript-questions"&gt;Javascript Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TheAlgorithms/Javascript"&gt;The Algorithms - JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#coding-challenges"&gt;
  &lt;/a&gt;
  Coding Challenges
&lt;/h3&gt;

&lt;p&gt;One of the ways to learn any kinda programming language in a fun way is to take coding challenges. I love those challenges, I have listed the sites below, some are specific to javascript, while others such as hackerrank, leet code etc let you solve the challenges in the programming language of your choice such as JavaScript or Python or C or C++.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.hackerrank.com/"&gt;Hackerrank&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codingame.com/"&gt;Coding Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/"&gt;Leet Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coderbyte.com/"&gt;Coder Byte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exercism.io/my/tracks/javascript"&gt;Exercism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://play.elevatorsaga.com/"&gt;Elevator Saga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codewars.com/"&gt;Code Wars&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#coding-ground"&gt;
  &lt;/a&gt;
  Coding Ground
&lt;/h3&gt;

&lt;p&gt;Coding grounds are online coding environment, which are readily available for developers to practice any new programming language they want to learn without having to worry about the environment set up in their local machines.&lt;br&gt;
Below are the couple of my favorite coding grounds which i use on a day-to-day basis when creating small code snippets for a functionality. They have been really useful when testing small sections/snippets, some of them also let you save these snippets so that you can refer them in the future as well.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://codepen.io/your-work"&gt;Codepen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jsfiddle.net/"&gt;Js fiddle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.tutorialspoint.com/codingground.htm"&gt;Tutorials Point Coding Ground&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#blogs"&gt;
  &lt;/a&gt;
  Blogs
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dmitripavlutin.com/all-posts/"&gt;Dmitri Pavlutin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://davidwalsh.name/tutorials/javascript"&gt;David Walsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superherojs.com/"&gt;SuperHero.JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this is useful for anyone who is getting started with Javascript.&lt;br&gt;
Let me know whats your favorite resource among the list in the comments below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These are some of the resources I used  when I initially started with JavaScript and would recommend to anyone who is starting to learn JavaScript, some of the coding challenges are something which I always have fun doing. I will update this post as and when I find new resources. Let me know in the comments below if you think there are other resources which should be added to this list as well.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript."&gt;MDN JavaScript Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://javascript.info/"&gt;The Modern Javascript Tutorial&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets connect on  &lt;a href="https://twitter.com/KritikaPattalam"&gt;Twitter&lt;/a&gt;  | &lt;a href="https://www.linkedin.com/in/kritika-p-296739155/"&gt;LinkedIn&lt;/a&gt; for more web development related chats.&lt;/p&gt;

&lt;p&gt;Check out my other blog post: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kritikapattalam/create-a-github-profile-readme-md-with-widgets-47j7"&gt;Create a GitHub Profile README.md with widgets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Python Code Style Fix Notes</title>
      <author>Liu YongLiang</author>
      <pubDate>Sat, 17 Jul 2021 01:22:44 +0000</pubDate>
      <link>https://dev.to/tlylt/python-code-style-fix-notes-1k2l</link>
      <guid>https://dev.to/tlylt/python-code-style-fix-notes-1k2l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I am working on fixing some of the issues raised by flake8 (a Python Linter) in a Python-based backend repository and thought it would be nice to discuss some of the common issues and the solutions that I gathered from the web (well, mostly StackOverflow). The use of an auto formatter such as &lt;a href="https://black.readthedocs.io/en/stable/"&gt;black&lt;/a&gt; will help resolve some of these common issues automatically. &lt;a href="https://www.flake8rules.com/"&gt;flake8rules&lt;/a&gt; is an excellent resource of a complete list of issues as well.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#line-too-long-92-gt-79-charactersflake8e501"&gt;
  &lt;/a&gt;
  line too long (92 &amp;gt; 79 characters)flake8(E501)
&lt;/h3&gt;

&lt;p&gt;Line too long issues mainly happen for the following cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;if-statement&lt;/li&gt;
&lt;li&gt;method chaining&lt;/li&gt;
&lt;li&gt;parameter list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;br&gt;
I was going to explain with examples how to use &lt;a href="https://stackoverflow.com/questions/53162/how-can-i-do-a-line-break-line-continuation"&gt;Python's implied line continuation inside parentheses, brackets and braces&lt;/a&gt; but decided not to. Nowadays I chose to leave it to my auto formatter to do the job.&lt;/p&gt;

&lt;p&gt;For those who insist to write code without any helpful plugins or IDE support, I would like to share that practice does make perfect. I used Vim for a period of writing Java code without autocomplete or format-on-save. I ran style checks and manually fixed issues raised such as having a space between operators. After a month or two, these things became second nature and I was pretty happy with the ability to write well-formatted code without any help. I suppose that was an interesting experience so go ahead and try it yourself.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#do-not-use-bare-exceptflake8e722"&gt;
  &lt;/a&gt;
  do not use bare 'except'flake8(E722)
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"creating"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"creating"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bare except will catch exceptions you almost certainly don't want to catch, including KeyboardInterrupt (the user hitting Ctrl+C) and Python-raised errors like SystemExit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A better fix:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Think about what exact exception to catch and specify that instead of just catching any exception.&lt;/li&gt;
&lt;li&gt;Think about whether this exception handling is necessary and are you unintentionally using it for control flow?&lt;/li&gt;
&lt;li&gt;When catching an exception, use either logging or other proper resolutions to handle the anticipated error.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#from-somepackagenamehere-import-used-unable-to-detect-undefined-names-flake8f403"&gt;
  &lt;/a&gt;
  'from some_package_name_here import *' used; unable to detect undefined names flake8(F403)
&lt;/h3&gt;

&lt;p&gt;I thought this is an interesting topic for discussion. Earlier in my coding journey, I was amused by the many lines of import statements found in some scripts. Sometimes the number of import statements outweigh the number of practical code within the same file. &lt;/p&gt;

&lt;p&gt;Nowadays I know better than to fear abstractions (I still fear BAD abstractions and rightfully so). However, with the help of powerful IDEs, importing and tracing the variable/function to their imported package is easier than before. The problem with 'from xxx import *' is that it is unclear what has been imported. Following this, IDEs could not decide whether some of the undefined variables come from the package that you imported or they are errors.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package_a&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package_b&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="c1"&gt;# suppose both packages included a function named pretty_print
# it is unclear which method is invoked below
&lt;/span&gt;&lt;span class="n"&gt;pretty_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"abc"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fix&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package_a&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pretty_print&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package_b&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;other_function_required&lt;/span&gt;
&lt;span class="n"&gt;pretty_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"abc"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When browsing an unfamiliar code repository, we tend to have less sentimental feelings and that fresh perspective allows us to see the good, the bad, and the evil. Besides learning from the good practices, the hacky and the code standard violations (and things like commented out code) are excellent places to start reviewing concepts of coding styles and coding standards, to find out why code misbehaved.&lt;/p&gt;

&lt;p&gt;That's all for now.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#external-resources"&gt;
  &lt;/a&gt;
  External resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marcobelo.medium.com/setting-up-python-black-on-visual-studio-code-5318eba4cd00"&gt;Guide to setup black on VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sbarnea.com/lint/black/"&gt;Using black with flake8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Explain the implementation principle of the Jest framework in a simple way</title>
      <author>Eno</author>
      <pubDate>Sat, 17 Jul 2021 00:30:38 +0000</pubDate>
      <link>https://dev.to/wscats/explain-the-implementation-principle-of-the-jest-framework-in-a-simple-way-4dio</link>
      <guid>https://dev.to/wscats/explain-the-implementation-principle-of-the-jest-framework-in-a-simple-way-4dio</guid>
      <description>&lt;h1&gt;
  &lt;a href="#jest-architecture"&gt;
  &lt;/a&gt;
  Jest Architecture
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/Wscats/jest-tutorial/blob/vm/README.EN.md"&gt;https://github.com/wscats/jest-architecture&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-jest"&gt;
  &lt;/a&gt;
  What is Jest
&lt;/h1&gt;

&lt;p&gt;Jest is a Javascript testing framework developed by Facebook. It is a JavaScript library for creating, running and writing tests.&lt;/p&gt;

&lt;p&gt;Jest is released as an NPM package and can be installed and run in any JavaScript project. Jest is currently one of the most popular test libraries for the front-end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-testing-mean"&gt;
  &lt;/a&gt;
  What does testing mean
&lt;/h1&gt;

&lt;p&gt;In technical terms, testing means checking whether our code meets certain expectations. For example: a function called sum (&lt;code&gt;sum&lt;/code&gt;) should return the expected output given some operation result.&lt;/p&gt;

&lt;p&gt;There are many types of tests, and you will soon be overwhelmed by the terminology, but the long story short tests fall into three categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit test&lt;/li&gt;
&lt;li&gt;Integration Testing&lt;/li&gt;
&lt;li&gt;E2E test&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-do-i-know-what-to-test"&gt;
  &lt;/a&gt;
  How do I know what to test
&lt;/h1&gt;

&lt;p&gt;In terms of testing, even the simplest code block may confuse beginners. The most common question is "how do I know what to test?".&lt;/p&gt;

&lt;p&gt;If you are writing a web page, a good starting point is to test every page of the application and every user interaction. However, the web page also needs to be composed of code units such as functions and modules to be tested.&lt;/p&gt;

&lt;p&gt;There are two situations most of the time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You inherit the legacy code, which has no built-in tests&lt;/li&gt;
&lt;li&gt;You must implement a new feature out of thin air&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so what should I do now? In both cases, you can think of the test as: checking whether the function produces the expected result. The most typical test process is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the function to be tested&lt;/li&gt;
&lt;li&gt;Give the function an input&lt;/li&gt;
&lt;li&gt;Define the desired output&lt;/li&gt;
&lt;li&gt;Check if the function produces the expected output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally, it's that simple. Master the following core ideas, writing tests will no longer be scary:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Input -&amp;gt; Expected output -&amp;gt; Assertion result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#test-blocks-assertions-and-matchers"&gt;
  &lt;/a&gt;
  Test blocks, assertions and matchers
&lt;/h1&gt;

&lt;p&gt;We will create a simple Javascript function code for the addition of 2 numbers and write a corresponding Jest-based test for it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, for testing, create a test file in the same folder and name it &lt;code&gt;test.spec.js&lt;/code&gt;. This special suffix is ​​a Jest convention and is used to find all test files. We will also import the function under test in order to execute the code under test. Jest tests follow the BDD style of tests. Each test should have a main &lt;code&gt;test&lt;/code&gt; test block, and there can be multiple test blocks. Now you can write test blocks for the &lt;code&gt;sum&lt;/code&gt; method. Here we write a test to add 2 Number and verify the expected result. We will provide the numbers 1 and 2, and expect 3 to be output.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test&lt;/code&gt; It requires two parameters: a string to describe the test block, and a callback function to wrap the actual test. &lt;code&gt;expect&lt;/code&gt; wraps the objective function and combines it with the matcher &lt;code&gt;toBe&lt;/code&gt; to check whether the calculation result of the function meets expectations.&lt;/p&gt;

&lt;p&gt;This is the complete test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sum test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We observe the above code and find two points:&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;test&lt;/code&gt; block is a separate test block, which has the function of describing and dividing the scope, that is, it represents a general container for the test we want to write for the calculation function &lt;code&gt;sum&lt;/code&gt;. -&lt;code&gt;expect&lt;/code&gt; is an assertion. This statement uses inputs 1 and 2 to call the &lt;code&gt;sum&lt;/code&gt; method in the function under test, and expects an output of 3. -&lt;code&gt;toBe&lt;/code&gt; is a matcher, used to check the expected value, if the expected result is not met, an exception should be thrown.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-a-test-block"&gt;
  &lt;/a&gt;
  How to implement a test block
&lt;/h2&gt;

&lt;p&gt;The test block is actually not complicated. The simplest implementation is as follows. We need to store the callback function of the actual test of the test package, so we encapsulate a &lt;code&gt;dispatch&lt;/code&gt; method to receive the command type and the callback function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_TEST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to create a callback function called &lt;code&gt;state&lt;/code&gt; globally to save the test. The callback function of the test is stored in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;STATE_SYMBOL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;testBlock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;dispatch&lt;/code&gt; method only needs to identify the corresponding commands at this time, and store the test callback function in the global &lt;code&gt;state&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_TEST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;testBlock&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;STATE_SYMBOL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;testBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-implement-assertions-and-matchers"&gt;
  &lt;/a&gt;
  How to implement assertions and matchers
&lt;/h2&gt;

&lt;p&gt;The assertion library is also very simple to implement. You only need to encapsulate a function to expose the matcher method to satisfy the following formula:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;expect(A).toBe(B)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we implement the commonly used method &lt;code&gt;toBe&lt;/code&gt;, when the result is not equal to the expectation, just throw an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not equal to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actually, try/catch is used in the test block to catch errors and print stack information to locate the problem.&lt;/p&gt;

&lt;p&gt;In simple cases, we can also use the &lt;code&gt;assert&lt;/code&gt; module that comes with Node to make assertions. Of course, there are many more complex assertion methods, and the principles are similar in essence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cli-and-configuration"&gt;
  &lt;/a&gt;
  CLI and configuration
&lt;/h2&gt;

&lt;p&gt;After writing the test, we need to enter the command in the command line to run the single test. Normally, the command is similar to the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;node jest xxx.spec.js&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The essence here is to parse the parameters of the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;testPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;testPath&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In complex situations, you may also need to read the parameters of the local Jest configuration file to change the execution environment, etc. Here, Jest uses third-party libraries &lt;code&gt;yargs&lt;/code&gt;, &lt;code&gt;execa&lt;/code&gt; and &lt;code&gt;chalk&lt;/code&gt;, etc. to parse, execute and print commands.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simulation"&gt;
  &lt;/a&gt;
  Simulation
&lt;/h1&gt;

&lt;p&gt;In complex test scenarios, we must not avoid a Jest term: mock (&lt;code&gt;mock&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;In the Jest documentation, we can find that Jest has the following description of simulation: "The simulation function erases the actual implementation of the function, captures the call to the function, and the parameters passed in these calls, so that the link between the test codes becomes easy"&lt;/p&gt;

&lt;p&gt;In short, a simulation can be created by assigning the following code snippets to functions or dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wscats&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple simulation example that simulates the return value of the readFile function of the fs module in testing specific business logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-simulate-a-function"&gt;
  &lt;/a&gt;
  How to simulate a function
&lt;/h2&gt;

&lt;p&gt;Next, we will study how to implement it. The first is &lt;code&gt;jest.mock&lt;/code&gt;. Its first parameter accepts the module name or module path, and the second parameter is the specific implementation of the module’s external exposure method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mockExports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mockExports&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our solution is actually the same as the implementation of the above &lt;code&gt;test&lt;/code&gt; test block. You only need to find a place to save the specific implementation method, and replace it when the module is actually used later, so we save it in &lt;code&gt;require In .cache&lt;/code&gt;, of course we can also store it in the global &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The implementation of &lt;code&gt;jest.fn&lt;/code&gt; is not difficult. Here we use a closure &lt;code&gt;mockFn&lt;/code&gt; to store the replaced functions and parameters, which is convenient for subsequent test inspections and statistics of call data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;impl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mockFn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;impl&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;mockFn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originImpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;impl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;mockFn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mockFn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#execution-environment"&gt;
  &lt;/a&gt;
  Execution environment
&lt;/h1&gt;

&lt;p&gt;Some students may have noticed that in the testing framework, we don’t need to manually introduce the functions of &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;expect&lt;/code&gt; and &lt;code&gt;jest&lt;/code&gt;. Each test file can be used directly, so we need to create a run that injects these methods here. surroundings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#v8-virtual-machine-and-scope"&gt;
  &lt;/a&gt;
  V8 virtual machine and scope
&lt;/h2&gt;

&lt;p&gt;Since everything is ready, we only need to inject the methods required for testing into the V8 virtual machine, that is, inject the testing scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;console&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stderr&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_TEST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After injecting the scope, we can make the code of the test file run in the V8 virtual machine. The code I passed here is the code that has been processed into a string. Jest will do some code processing, security processing and SourceMap here. For sewing and other operations, our example does not need to be so complicated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runInContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before and after the code is executed, the time difference can be used to calculate the running time of a single test. Jest will also pre-evaluate the size and number of single test files here, and decide whether to enable Worker to optimize the execution speed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;x1b[32m%s&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;x1b[0m&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Time: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-single-test-callback"&gt;
  &lt;/a&gt;
  Run single test callback
&lt;/h2&gt;

&lt;p&gt;After the execution of the V8 virtual machine is completed, the global &lt;code&gt;state&lt;/code&gt; will collect all the packaged test callback functions in the test block. Finally, we only need to traverse all these callback functions and execute them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;testBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;x1b[32m%s&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;x1b[0m&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`√ &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; passed`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;x1b[32m%s&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;x1b[0m&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`× &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; error`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hook-function"&gt;
  &lt;/a&gt;
  Hook function
&lt;/h2&gt;

&lt;p&gt;We can also add life cycles to the single test execution process, such as hook functions such as &lt;code&gt;beforeEach&lt;/code&gt;, &lt;code&gt;afterEach&lt;/code&gt;, &lt;code&gt;afterAll&lt;/code&gt; and &lt;code&gt;beforeAll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding the hook function to the above infrastructure is actually injecting the corresponding callback function in each process of executing the test. For example, &lt;code&gt;beforeEach&lt;/code&gt; is placed before the traversal execution test function of &lt;code&gt;testBlock&lt;/code&gt;, and &lt;code&gt;afterEach&lt;/code&gt; is placed on &lt;code&gt;testBlock&lt;/code&gt; After traversing the execution of the test function, it is very simple. You only need to put the right position to expose the hook function of any period.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;testBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;beforeEachBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;afterEachBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;afterEach&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;afterEach&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;beforeAll&lt;/code&gt; and &lt;code&gt;afterAll&lt;/code&gt; can be placed before and after all tests of &lt;code&gt;testBlock&lt;/code&gt; are completed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;beforeAllBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;testBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  &lt;span class="nx"&gt;afterAllBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;afterAll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;afterAll&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we have implemented a simple test framework. Based on this, we can enrich the assertion method, matcher and support parameter configuration, and read the personal notes of the source code below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#jestcli"&gt;
  &lt;/a&gt;
  jest-cli
&lt;/h1&gt;

&lt;p&gt;Download Jest source code and execute it in the root directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It essentially runs two files build.js and buildTs.js in the script folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yarn build:js &amp;amp;&amp;amp; yarn build:ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build:js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node ./scripts/build.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build:ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node ./scripts/buildTs.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;build.js essentially uses the babel library, create a new build folder in the package/xxx package, and then use transformFileSync to generate the file into the build folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transformFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And buildTs.js essentially uses the tsc command to compile the ts file into the build folder, and use the execa library to execute the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tsc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;packagesWithTs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;execa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inherit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBqafD5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/115947329-84fe4380-a4f9-11eb-9df2-02cf8fdadd08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBqafD5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/115947329-84fe4380-a4f9-11eb-9df2-02cf8fdadd08.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Successful execution will display as follows, it will help you compile all files js files and ts files in the packages folder to the build folder of the directory where you are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPdJ_AO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/116343731-97d58880-a817-11eb-9507-96bae701e804.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPdJ_AO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/116343731-97d58880-a817-11eb-9507-96bae701e804.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we can start the jest command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run jest
&lt;span class="c"&gt;# Equivalent to&lt;/span&gt;
&lt;span class="c"&gt;# node ./packages/jest-cli/bin/jest.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can do analysis processing according to the different parameters passed in, such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run jest &lt;span class="nt"&gt;-h&lt;/span&gt;
node ./packages/jest-cli/bin/jest.js /path/test.spec.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will execute the &lt;code&gt;jest.js&lt;/code&gt; file, and then enter the run method in the &lt;code&gt;build/cli&lt;/code&gt; file. The run method will parse various parameters in the command. The specific principle is that the yargs library cooperates with process.argv to achieve&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importLocal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;import-local&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;importLocal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../build/cli&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#jestconfig"&gt;
  &lt;/a&gt;
  jest-config
&lt;/h1&gt;

&lt;p&gt;When various command parameters are obtained, the core method of &lt;code&gt;runCLI&lt;/code&gt; will be executed, which is the core method of the &lt;code&gt;@jest/core -&amp;gt; packages/jest-core/src/cli/index.ts&lt;/code&gt; library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;runCLI&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@jest/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useStderr&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stderr&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;globalConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;runCLI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;runCLI&lt;/code&gt; method will use the input parameter argv parsed in the command just now to read the configuration file information with the &lt;code&gt;readConfigs&lt;/code&gt; method. &lt;code&gt;readConfigs&lt;/code&gt; comes from &lt;code&gt;packages/jest-config/src/index.ts&lt;/code&gt;, here There will be normalize to fill in and initialize some default configured parameters. Its default parameters are recorded in the &lt;code&gt;packages/jest-config/src/Defaults.ts&lt;/code&gt; file. For example, if you only run js single test, the default setting of &lt;code&gt;require. resolve('jest-runner')&lt;/code&gt; is a runner that runs a single test, and it also cooperates with the chalk library to generate an outputStream to output the content to the console.&lt;/p&gt;

&lt;p&gt;By the way, let me mention the principle of introducing jest into the module. First, &lt;code&gt;require.resolve(moduleName)&lt;/code&gt; will find the path of the module, and save the path in the configuration, and then use the tool library &lt;code&gt;packages/jest-util/src/requireOrImportModule The&lt;/code&gt;requireOrImportModule&lt;code&gt;method of .ts&lt;/code&gt; calls the encapsulated native &lt;code&gt;import/reqiure&lt;/code&gt; method to match the path in the configuration file to take out the module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;globalConfig configuration from argv&lt;/li&gt;
&lt;li&gt;configs are from the configuration of jest.config.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;configs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hasDeprecationWarnings&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;readConfigs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;projects&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/*code*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/*code*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearCache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/*code*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectProjects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/*code*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#jesthastemap"&gt;
  &lt;/a&gt;
  jest-haste-map
&lt;/h1&gt;

&lt;p&gt;jest-haste-map is used to get all the files in the project and the dependencies between them. It achieves this by looking at the &lt;code&gt;import/require&lt;/code&gt; calls, extracting them from each file and constructing a map containing each A file and its dependencies. Here Haste is the module system used by Facebook. It also has something called HasteContext, because it has HasteFS (Haste File System). HasteFS is just a list of files in the system and all dependencies associated with it. Item, it is a map data structure, where the key is the path and the value is the metadata. The &lt;code&gt;contexts&lt;/code&gt; generated here will be used until the &lt;code&gt;onRunComplete&lt;/code&gt; stage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;contexts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hasteMapInstances&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;buildContextsAndHasteMaps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;configs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;outputStream&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#jestrunner"&gt;
  &lt;/a&gt;
  jest-runner
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;_run10000&lt;/code&gt; method will obtain &lt;code&gt;contexts&lt;/code&gt; according to the configuration information &lt;code&gt;globalConfig&lt;/code&gt; and &lt;code&gt;configs&lt;/code&gt;. &lt;code&gt;contexts&lt;/code&gt; will store the configuration information and path of each local file, etc., and then will bring the callback function &lt;code&gt;onComplete&lt;/code&gt;, the global configuration &lt;code&gt;globalConfig&lt;/code&gt; and scope &lt;code&gt;contexts&lt;/code&gt; enter the &lt;code&gt;runWithoutWatch&lt;/code&gt; method.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---nhWohbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/117241252-51aaa580-ae65-11eb-9883-f60b70fa9fcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---nhWohbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/117241252-51aaa580-ae65-11eb-9883-f60b70fa9fcc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you will enter the &lt;code&gt;runJest&lt;/code&gt; method of the &lt;code&gt;packages/jest-core/src/runJest.ts&lt;/code&gt; file, where the passed &lt;code&gt;contexts&lt;/code&gt; will be used to traverse all unit tests and save them in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;allTests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nx"&gt;contexts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchSources&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getTestPaths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;searchSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;outputStream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;changedFilesPromise&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;changedFilesPromise&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;jestHooks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;filter&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;allTests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allTests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use the &lt;code&gt;Sequencer&lt;/code&gt; method to sort the single tests&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Sequencer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;TestSequencer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;requireOrImportModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testSequencer&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sequencer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Sequencer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;allTests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sequencer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allTests&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;runJest&lt;/code&gt; method calls a key method &lt;code&gt;packages/jest-core/src/TestScheduler.ts&lt;/code&gt;'s &lt;code&gt;scheduleTests&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TestScheduler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;startRun&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;testSchedulerContext&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scheduleTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allTests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;testWatcher&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;scheduleTests&lt;/code&gt; method will do a lot of things, it will collect the &lt;code&gt;contexts&lt;/code&gt; in the &lt;code&gt;allTests&lt;/code&gt; into the &lt;code&gt;contexts&lt;/code&gt;, collect the &lt;code&gt;duration&lt;/code&gt; into the &lt;code&gt;timings&lt;/code&gt; array, and subscribe to four life cycles before executing all single tests :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test-file-start&lt;/li&gt;
&lt;li&gt;test-file-success&lt;/li&gt;
&lt;li&gt;test-file-failure&lt;/li&gt;
&lt;li&gt;test-case-result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then traverse the &lt;code&gt;contexts&lt;/code&gt; and use a new empty object &lt;code&gt;testRunners&lt;/code&gt; to do some processing and save it, which will call the &lt;code&gt;createScriptTransformer&lt;/code&gt; method provided by &lt;code&gt;@jest/transform&lt;/code&gt; to process the imported modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createScriptTransformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@jest/transform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createScriptTransformer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Runner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;TestRunner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interopRequireDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requireAndTranspileModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_globalConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;changedFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;changedFiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sourcesRelatedToTestsInChangedFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;sourcesRelatedToTestsInChangedFiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;testRunners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;scheduleTests&lt;/code&gt; method will call the &lt;code&gt;runTests&lt;/code&gt; method of &lt;code&gt;packages/jest-runner/src/index.ts&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;runTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;watcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serial&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_createInBandTestRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;watcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_createParallelTestRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;watcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;onStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;onFailure&lt;/span&gt;
      &lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the final &lt;code&gt;_createParallelTestRun&lt;/code&gt; or &lt;code&gt;_createInBandTestRun&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;There will be a &lt;code&gt;runTestInWorker&lt;/code&gt; method, which, as the name suggests, is to perform a single test in the worker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fhD0tBQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/117279102-f3e18200-ae93-11eb-9a1b-100197240ebe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhD0tBQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/117279102-f3e18200-ae93-11eb-9a1b-100197240ebe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_createInBandTestRun&lt;/code&gt; will execute a core method &lt;code&gt;runTest&lt;/code&gt; in &lt;code&gt;packages/jest-runner/src/runTest.ts&lt;/code&gt;, and execute a method &lt;code&gt;runTestInternal&lt;/code&gt; in &lt;code&gt;runJest&lt;/code&gt;, which will prepare a lot of preparations before executing a single test The thing involves global method rewriting and hijacking of import and export methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test-file-start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;runTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_globalConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;sendMessageToJest&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;runTestInternal&lt;/code&gt; method, the &lt;code&gt;fs&lt;/code&gt; module will be used to read the content of the file and put it into &lt;code&gt;cacheFS&lt;/code&gt;, which can be cached for quick reading later. For example, if the content of the file is json later, it can be read directly in &lt;code&gt;cacheFS&lt;/code&gt;. Also use &lt;code&gt;Date.now&lt;/code&gt; time difference to calculate time-consuming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;testSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cacheFS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;testSource&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;runTestInternal&lt;/code&gt; method, &lt;code&gt;packages/jest-runtime/src/index.ts&lt;/code&gt; will be introduced, which will help you cache and read modules and trigger execution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;cacheFS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;changedFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;changedFiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;collectCoverage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collectCoverage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;collectCoverageFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collectCoverageFrom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;collectCoverageOnlyFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collectCoverageOnlyFrom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;coverageProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;globalConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coverageProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sourcesRelatedToTestsInChangedFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;sourcesRelatedToTestsInChangedFiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;@jest/console&lt;/code&gt; package is used to rewrite the global console. In order for the console of the single-tested file code block to print the results on the node terminal smoothly, in conjunction with the &lt;code&gt;jest-environment-node&lt;/code&gt; package, set the global &lt;code&gt;environment.global&lt;/code&gt; all Rewritten to facilitate subsequent methods to get these scopes in vm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Essentially it is rewritten using node's console to facilitate subsequent overwriting of the console method in the vm scope&lt;/span&gt;
&lt;span class="nx"&gt;testConsole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BufferedConsole&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TestEnvironment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;console&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;testConsole&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Suspected useless code&lt;/span&gt;
  &lt;span class="nx"&gt;docblockPragmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;testPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// Really rewrite the console method&lt;/span&gt;
&lt;span class="nx"&gt;setGlobal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;console&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;testConsole&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;runtime&lt;/code&gt; mainly uses these two methods to load the module, first judge whether it is an ESM module, if it is, use &lt;code&gt;runtime.unstable_importModule&lt;/code&gt; to load the module and run the module, if not, use &lt;code&gt;runtime.requireModule&lt;/code&gt; to load the module and run the module .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;esm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unstable_shouldLoadAsEsm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;esm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unstable_importModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requireModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#jestcircus"&gt;
  &lt;/a&gt;
  jest-circus
&lt;/h1&gt;

&lt;p&gt;Immediately after the &lt;code&gt;testFramework&lt;/code&gt; in &lt;code&gt;runTestInternal&lt;/code&gt; will accept the incoming runtime to call the single test file to run, the &lt;code&gt;testFramework&lt;/code&gt; method comes from a library with an interesting name &lt;code&gt;packages/jest-circus/src/legacy-code-todo-rewrite /jestAdapter.ts&lt;/code&gt;, where &lt;code&gt;legacy-code-todo-rewrite&lt;/code&gt; means &lt;strong&gt;legacy code todo rewrite&lt;/strong&gt;, &lt;code&gt;jest-circus&lt;/code&gt; mainly rewrites some methods of global &lt;code&gt;global&lt;/code&gt;, involving These few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;afterAll&lt;/li&gt;
&lt;li&gt;afterEach&lt;/li&gt;
&lt;li&gt;beforeAll&lt;/li&gt;
&lt;li&gt;beforeEach&lt;/li&gt;
&lt;li&gt;describe&lt;/li&gt;
&lt;li&gt;it&lt;/li&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4FNz0nke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/118916923-6bb6ae80-b962-11eb-8725-6c724e8b1952.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4FNz0nke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/118916923-6bb6ae80-b962-11eb-8725-6c724e8b1952.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before calling the single test here, the &lt;code&gt;jestAdapter&lt;/code&gt; function, which is the above-mentioned &lt;code&gt;runtime.requireModule&lt;/code&gt;, will load the &lt;code&gt;xxx.spec.js&lt;/code&gt; file. The execution environment &lt;code&gt;globals&lt;/code&gt; has been preset using &lt;code&gt;initialize&lt;/code&gt; before execution. &lt;code&gt;And&lt;/code&gt;snapshotState&lt;code&gt;, and rewrite&lt;/code&gt;beforeEach&lt;code&gt;. If&lt;/code&gt;resetModules&lt;code&gt;,&lt;/code&gt;clearMocks&lt;code&gt;,&lt;/code&gt;resetMocks&lt;code&gt;,&lt;/code&gt;restoreMocks&lt;code&gt;and&lt;/code&gt;setupFilesAfterEnv` are configured, the following methods will be executed respectively:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;runtime.resetModules&lt;/li&gt;
&lt;li&gt;runtime.clearAllMocks&lt;/li&gt;
&lt;li&gt;runtime.resetAllMocks&lt;/li&gt;
&lt;li&gt;runtime.restoreAllMocks&lt;/li&gt;
&lt;li&gt;runtime.requireModule or runtime.unstable_importModule&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After running the initialization of the &lt;code&gt;initialize&lt;/code&gt; method, because &lt;code&gt;initialize&lt;/code&gt; has rewritten the global &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; methods, these methods are all rewritten here in &lt;code&gt;/packages/jest-circus/src/index.ts&lt;/code&gt;, here Note that there is a &lt;code&gt;dispatchSync&lt;/code&gt; method in the &lt;code&gt;test&lt;/code&gt; method. This is a key method. Here, a copy of &lt;code&gt;state&lt;/code&gt; will be maintained globally. &lt;code&gt;dispatchSync&lt;/code&gt; means to store the functions and other information in the &lt;code&gt;test&lt;/code&gt; code block in the &lt;code&gt;state. In &lt;/code&gt;dispatchSync&lt;code&gt; uses &lt;/code&gt;name&lt;code&gt; in conjunction with the &lt;/code&gt;eventHandler&lt;code&gt; method to modify the &lt;/code&gt;state`. This idea is very similar to the data flow in redux.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;It&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;testFn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dispatchSync&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;asyncError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add_test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;testName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The single test &lt;code&gt;xxx.spec.js&lt;/code&gt;, that is, the testPath file will be imported and executed after the &lt;code&gt;initialize&lt;/code&gt;. Note that this single test will be executed when imported here, because the single test &lt;code&gt;xxx.spec.js&lt;/code&gt; file is written according to the specifications , There will be code blocks such as &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;describe&lt;/code&gt;, so at this time all callback functions accepted by &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;describe&lt;/code&gt; will be stored in the global &lt;code&gt;state&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;esm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unstable_shouldLoadAsEsm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;esm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unstable_importModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requireModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#jestruntime"&gt;
  &lt;/a&gt;
  jest-runtime
&lt;/h1&gt;

&lt;p&gt;Here, it will first determine whether it is an esm module, if it is, use the method of &lt;code&gt;unstable_importModule&lt;/code&gt; to import it, otherwise use the method of &lt;code&gt;requireModule&lt;/code&gt; to import it, specifically will it enter the following function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_loadModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moduleName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;modulePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moduleRegistry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic of _loadModule has only three main parts&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Judge whether it is a json suffix file, execute readFile to read the text, and use transformJson and JSON.parse to transform the output content.&lt;/li&gt;
&lt;li&gt;Determine whether the node suffix file is, and execute the require native method to import the module.&lt;/li&gt;
&lt;li&gt;For files that do not meet the above two conditions, execute the _execModule execution module.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;_execModule will use babel to transform the source code read by fs. This &lt;code&gt;transformFile&lt;/code&gt; is the &lt;code&gt;transform&lt;/code&gt; method of &lt;code&gt;packages/jest-runtime/src/index.ts&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformedCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transformFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UtIWInsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/119518220-ea6c7b00-bdaa-11eb-8723-d8bb89673acf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtIWInsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/119518220-ea6c7b00-bdaa-11eb-8723-d8bb89673acf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_execModule will use the &lt;code&gt;createScriptFromCode&lt;/code&gt; method to call node's native vm module to actually execute js. The vm module accepts safe source code, and uses the V8 virtual machine with the incoming context to execute the code immediately or delay the execution of the code, here you can Accept different scopes to execute the same code to calculate different results, which is very suitable for the use of test frameworks. The injected vmContext here is the above global rewrite scope including afterAll, afterEach, beforeAll, beforeEach, describe, it, test, So our single test code will get these methods with injection scope when it runs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scriptSourceCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vmContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVmContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runInContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vmContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrB_38Xh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/125756054-4c144a7a-447a-4b5b-973e-e3075b06daa0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrB_38Xh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/17243165/125756054-4c144a7a-447a-4b5b-973e-e3075b06daa0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the global method is overwritten and the &lt;code&gt;state&lt;/code&gt; is saved above, it will enter the logic of the callback function that actually executes the &lt;code&gt;describe&lt;/code&gt;, in the &lt;code&gt;run&lt;/code&gt; method of &lt;code&gt;packages/jest-circus/src/run.ts&lt;/code&gt;, here Use the &lt;code&gt;getState&lt;/code&gt; method to take out the &lt;code&gt;describe&lt;/code&gt; code block, then use the &lt;code&gt;_runTestsForDescribeBlock&lt;/code&gt; to execute this function, then enter the &lt;code&gt;_runTest&lt;/code&gt; method, and then use the hook function before and after the execution of &lt;code&gt;_callCircusHook&lt;/code&gt;, and use the &lt;code&gt;_callCircusTest&lt;/code&gt; to execute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Circus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RunResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rootDescribeBlock&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;run_start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;_runTestsForDescribeBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootDescribeBlock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;run_finish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;makeRunResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;rootDescribeBlock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;unhandledErrors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_runTest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parentSkipped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// beforeEach&lt;/span&gt;
  &lt;span class="c1"&gt;// test function block, testContext scope&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;_callCircusTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;testContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// afterEach&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the core position of the hook function implementation and also the core element of the Jest function.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#at-last"&gt;
  &lt;/a&gt;
  At last
&lt;/h1&gt;

&lt;p&gt;I hope this article can help you understand the core implementation and principles of the Jest testing framework. Thank you for reading patiently. If the articles and notes can bring you a hint of help or inspiration, please don’t be stingy with your Star and Fork. The articles are continuously updated synchronously, your affirmation Is my biggest motivation to move forward😁&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
    <item>
      <title>Datadog on Kubernetes: Avoiding Common Pitfalls</title>
      <author>Trevor Shim</author>
      <pubDate>Sat, 17 Jul 2021 00:08:21 +0000</pubDate>
      <link>https://dev.to/porter/datadog-on-kubernetes-avoiding-common-pitfalls-1lgh</link>
      <guid>https://dev.to/porter/datadog-on-kubernetes-avoiding-common-pitfalls-1lgh</guid>
      <description>&lt;p&gt;&lt;a href="https://datadoghq.com"&gt;Datadog&lt;/a&gt; is a powerful monitoring and security platform that gives you visibility into end-to-end traces, application metrics, logs, and infrastructure. While Datadog has &lt;a href="https://docs.datadoghq.com/agent/kubernetes/?tab=helm"&gt;great documentation on their Kubernetes integration&lt;/a&gt;, we've observed that there's some missed nuance that leads to common pitfalls. &lt;/p&gt;

&lt;p&gt;This blog post will guide you through how to install the Datadog agent on Kubernetes and enable additional features such as DogStatsD and APM via Helm and Porter while avoiding these common pitfalls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not running the Datadog Daemonset on all nodes&lt;/li&gt;
&lt;li&gt;Not adding admission label to your application pods you'd like to use DogStatsD and APM with.&lt;/li&gt;
&lt;li&gt;Overriding environment variables that have been injected by the agent &lt;/li&gt;
&lt;li&gt;Not setting resource limits on the agent to avoid crashing the node/kubelet&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#basic-installation"&gt;
  &lt;/a&gt;
  Basic Installation
&lt;/h1&gt;

&lt;p&gt;We will use &lt;a href="https://helm.sh"&gt;Helm&lt;/a&gt; to install the Datadog agent with the default set of values. The default values in Datadog's helm chart, along with Datadog's &lt;a href="https://docs.datadoghq.com/agent/kubernetes/integrations/?tab=kubernetes"&gt;Autodiscovery&lt;/a&gt; feature, is sufficient to give visibility into all cluster level metrics.&lt;/p&gt;

&lt;p&gt;These are the commands to install the Datadog agent in your cluster using Helm v3 with the &lt;a href="https://github.com/DataDog/helm-charts/blob/master/charts/datadog/values.yaml"&gt;default values&lt;/a&gt;. Make sure to copy your API key from Datadog dashboard in the install command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add datadog https://helm.datadoghq.com
helm repo update
helm install &amp;lt;RELEASE_NAME&amp;gt; --set datadog.apiKey=&amp;lt;DATADOG_API_KEY&amp;gt; datadog/datadog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#common-pitfall-1-daemonset-not-running-on-all-nodes"&gt;
  &lt;/a&gt;
  Common Pitfall #1: Daemonset not running on all nodes
&lt;/h3&gt;

&lt;p&gt;The Datadog agent is installed as a &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"&gt;Daemonset&lt;/a&gt;. This means that the agent is designed to run on every node of your Kubernetes cluster. By default, the Datadog agent will assume that none of your nodes has a taint. If you've added taints to some of your nodes, the agent will run and ingest data only on the nodes that do not have taints.&lt;/p&gt;

&lt;p&gt;To ensure that the agent runs on every node, you must modify the value agents.tolerations to accommodate all your nodes. You can check the taints on your nodes by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl describe node &amp;lt;NODE_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, Kubernetes does not run daemonsets on the master node by default. If there is a master node in your cluster and application pods can be scheduled on it, you need to add the following toleration in the agents.tolerations value of the Datadog Helm chart to retrieve metrics from those pods. Make sure to add the appropriate tolerations based on your node taints.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;agents:
    tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#enabling-dogstatsd-and-apm"&gt;
  &lt;/a&gt;
  Enabling DogStatsD and APM
&lt;/h2&gt;

&lt;p&gt;The default installation above exports all cluster level metrics, but you might want to use &lt;a href="https://docs.datadoghq.com/developers/dogstatsd/?tab=hostagent"&gt;DogStatsD&lt;/a&gt; to track custom application metrics and &lt;a href="https://docs.datadoghq.com/tracing/#pagetitle"&gt;APM&lt;/a&gt; to collect application traces. If you've used DogStatsD or APM before without Kubernetes, you are probably used to manually injecting environment variables like &lt;code&gt;DD_AGENT_HOST&lt;/code&gt; for your application code to consume.&lt;/p&gt;

&lt;p&gt;On Kubernetes, the Datadog agent automatically injects &lt;code&gt;DD_AGENT_HOST&lt;/code&gt; as an environment variable into all your containers so you don't have to make additional configuration to export custom metrics. Ensuring that the agent is running on every single node of your cluster is essential to make this work, because the IP address of the pod's host node will be injected.&lt;/p&gt;

&lt;p&gt;To automatically inject these environment variables into your pods, you need to enable the &lt;a href="https://docs.datadoghq.com/agent/cluster_agent/admission_controller/"&gt;Datadog admission controller&lt;/a&gt;. You can do this by modifying these values on the Datadog Helm chart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clusterAgent:
   admissionController:
      enabled: true
      mutateUnlabelled: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#common-pitfall-2-not-adding-the-admission-label-to-your-pods"&gt;
  &lt;/a&gt;
  Common Pitfall #2: Not adding the admission label to your pods
&lt;/h3&gt;

&lt;p&gt;For the admission controller to inject environment variables into your pod, you must add the following label to the pods you'd like to use DogStatsD in:  &lt;code&gt;admission.datadoghq.com/enabled: "true"&lt;/code&gt;. If you'd rather inject the environment variables to all pods running on your cluster, you can also just set the &lt;code&gt;admissionController.mutateUnlabelled&lt;/code&gt; value to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;You can verify that the environment variable has been injected to the pod by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl exec -it &amp;lt;POD_NAME&amp;gt; -- printenv | grep "DD_AGENT_HOST"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the admission controller is working as expected, you'll see the IP address of the node that the pod is running on. You can confirm this by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl describe pod &amp;lt;POD_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Node&lt;/code&gt; field should match the IP address printed above.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#common-pitfall-3-overriding-the-injected-environment-variable"&gt;
  &lt;/a&gt;
  Common Pitfall #3: Overriding the injected environment variable
&lt;/h3&gt;

&lt;p&gt;The environment variables injected by the admission controller do not take precedence over the environment variables set on the pod. If you already have &lt;code&gt;DD_AGENT_HOST&lt;/code&gt; defined on the pod, that value will override what's automatically set by the Datadog agent. Make sure to remove both &lt;code&gt;DD_AGENT_HOST&lt;/code&gt; and &lt;code&gt;DD_ENTITY_ID&lt;/code&gt; from your pod configuration for the agent to work as expected.&lt;/p&gt;




&lt;p&gt;Now that you have the admission controller working, modify the following values on the Helm chart to enable DogStatsD and APM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogstatsd:
   port: 8125
   useHostPort: true
   nonLocalTraffic: true
datadog:
   apm:
     enabled: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#common-pitfall-4-not-setting-resource-limits-on-the-agent"&gt;
  &lt;/a&gt;
  Common Pitfall #4: Not setting resource limits on the agent
&lt;/h3&gt;

&lt;p&gt;The default set of values on Datadog do not have any limits set on the resources it can consume. This may result in a node or kubelet crash if the agent consumes more resources than what its host node can accommodate. The resource limit you should set depends on the size of your nodes and the operations you are performing on the agent. There are many places that these resource limits can be set, but we've found that in most cases the agent pod itself is the primary consumer of resources. You can set the limits on the agents with the following values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;agents:
   containers:
      agent:
         resources:
            limits:
               cpu: 200m
               memory: 256Mi
            requests:
               cpu: 200m
               memory: 256Mi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the install command again with the values above. You can check from your Datadog dashboard whether custom metrics and application traces are being received properly.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;We went over how to install the Datadog agent via Helm and configure additional features like DogStatsD and APM while avoiding common pitfalls. This is the annotated &lt;code&gt;values.yaml&lt;/code&gt; file that you can use as reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;agents:
   containers:
      agent:
         resources:     
            limits:  # &amp;lt;-- set limits on the agent as necessary
            requests:
    tolerations:
    - key: node-role.kubernetes.io/master # &amp;lt;-- Add if nodes have taints
      operator: Exists
      effect: NoSchedule
clusterAgent:
   admissionController:
      enabled: true
      mutateUnlabelled: false # &amp;lt;-- `true` if you want to inject env vars to all pods
datadog:
   apiKey: &amp;lt;API_KEY&amp;gt; # &amp;lt;-- Your api key, can be found in Datadog Dashboard
   apm:
      enabled: true
   logs:
      enabled: true
      containerCollectAll: false # &amp;lt;-- `true` if you want to collect logs from all containers
dogstatsd:
   port: 8125
   useHostPort: true
   nonLocalTraffic: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#installing-via-porter"&gt;
  &lt;/a&gt;
  Installing via Porter
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://porter.run"&gt;Porter&lt;/a&gt; is a platform as a service (PaaS) that runs in your own cloud, specifically in your own Kubernetes cluster. On Porter, you can install the Datadog agent as a one click add-on and enable DogStatsD, APM, and logging by a simple toggle.&lt;/p&gt;

&lt;p&gt;1.Navigate to the launch tab and select the Datadog add-on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcxcUHEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q94hvk9fria3i1ul9zz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcxcUHEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q94hvk9fria3i1ul9zz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Put in your ingestion key, toggle the features you'd like to use, then hit deploy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Nz9NMX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k016xgrzpt6v57mtov28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Nz9NMX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k016xgrzpt6v57mtov28.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>monitoring</category>
      <category>datadog</category>
    </item>
  </channel>
</rss>
