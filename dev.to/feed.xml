<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why you should use OAuth for your App.</title>
      <author>Elijah Trillionz</author>
      <pubDate>Sat, 22 May 2021 21:29:38 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/why-you-should-use-oauth-for-your-app-2f23</link>
      <guid>https://dev.to/elijahtrillionz/why-you-should-use-oauth-for-your-app-2f23</guid>
      <description>&lt;p&gt;Imagine how cool it would be not to have to create a username, verify your email for every website you create an account in.&lt;/p&gt;

&lt;p&gt;Image how cool it would be not to have to create passwords regularly and try to recall which is which for every website you visit and create an account in.&lt;/p&gt;

&lt;p&gt;The internet is a massive world that keeps growing day after day with different tools rising up daily.&lt;/p&gt;

&lt;p&gt;As an Internet user who wants all the assistance you can get in your career, you are going to be using (or trying out) different tools every now and then. &lt;/p&gt;

&lt;p&gt;This means you are going to be creating an account for these different tools, having to create a unique username with a password and then verify your email.&lt;/p&gt;

&lt;p&gt;Well, thanks to Google and other tools which help you save your passwords so you don't worry about recalling them. And if Google or the other tools didn't save this password, you will have to go through the stress of resetting your password.&lt;/p&gt;

&lt;p&gt;Now, this is for you who is a user of an app, what about you who creates the app, how is this stressful for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-developers"&gt;
  &lt;/a&gt;
  For Developers
&lt;/h3&gt;

&lt;p&gt;Imagine how cool it would be not to have routes for verifying email, resetting passwords. Or not worry about encrypting users' passwords when they sign up and comparing when they log in.&lt;/p&gt;

&lt;p&gt;Imagine how cool it would be not to worry about creating tokens for every user with JSONWebToken or any other. Or not worry about sending emails for email verification, and then for password reset (that should cost a lot though).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-achieve-all-these-cool-things"&gt;
  &lt;/a&gt;
  How can we achieve all these cool things
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5s9vjqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11aeyjvd2quxnv6vv2b3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5s9vjqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11aeyjvd2quxnv6vv2b3.jpg" alt="OAuth overview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am sure you are familiar with the &lt;em&gt;Sign in with Google&lt;/em&gt; button on different web apps like this one (dev). Or you've probably seen that of Facebook, Twitter, LinkedIn, GitHub, Apple, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVA-Sclm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m41iwx362o9b8i6zaka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVA-Sclm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m41iwx362o9b8i6zaka.png" alt="OAuth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you have it, that's the dude that makes all those cool stuff. It simply makes life easy for users as well as developers.&lt;/p&gt;

&lt;p&gt;With it, users won't worry about creating an account with an email, username, and password, and then upload a profile picture on your app and every other website they visit. And you the developer won't worry about handling those requests.&lt;/p&gt;

&lt;p&gt;The user creates an account with a website and uses his/her public info on that website for every other website he/she uses or would use.&lt;/p&gt;

&lt;p&gt;Cool right, for me I'd rather click one or two buttons to get signed up than writing (and verifying) my email, &lt;strong&gt;constructing&lt;/strong&gt; a unique username and a strong password.&lt;/p&gt;

&lt;p&gt;Now let's look out how these cool things work and what powers them.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#offer-just-for-you"&gt;
  &lt;/a&gt;
  Offer just for you:
&lt;/h3&gt;

&lt;p&gt;Have you wondered what I use for my blog banners/photo designs? Well glad to tell you it's &lt;a href="https://www.canva.com/join/innovation-monster-tomato"&gt;Canva&lt;/a&gt;. Whether you are a graphics designer or a novice Canva is for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDhynK3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8csascx4fbeu5zc0sexr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDhynK3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8csascx4fbeu5zc0sexr.png" alt="canva review"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Canva you get to select from thousands of organized templates that will meet your specific needs. Be it a logo, presentations, Social Media Covers, Social Media Posts, Blog banners, resumes, posters, flyers, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.canva.com/join/innovation-monster-tomato"&gt;Get started for free&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;Well all that is powered by &lt;a href="http://oauth.net/2/"&gt;&lt;strong&gt;OAuth&lt;/strong&gt;&lt;/a&gt;, it is an open standard protocol for authorization. It is the way your users grant you permission to access their information from another website they already are a member of.&lt;/p&gt;

&lt;p&gt;With OAuth, a user can create one account on a website and link his/her information to every other website. Trust me when I say, that is the best thing a user will ever want to encounter.&lt;/p&gt;

&lt;p&gt;That last paragraph made me sound like the user is going to have a lot of work to do, but no; that's not the case. Here is how OAuth works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-oauth-works"&gt;
  &lt;/a&gt;
  How OAuth works
&lt;/h3&gt;

&lt;p&gt;There are different companies (websites you may say) that offer OAuth, but some of the most popular are Google, Facebook, Twitter, Apple, GitHub, LinkedIn, Discord (wait is discord popular? hmm), etc.&lt;/p&gt;

&lt;p&gt;Though they are different companies with different ways of handling their authorization, the principle is the same&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#as-a-developer"&gt;
  &lt;/a&gt;
  As a Developer
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create an &lt;em&gt;OAuth app&lt;/em&gt; with the company (Facebook or Google, etc).&lt;/li&gt;
&lt;li&gt;Use your app's id and app's secret to get a &lt;em&gt;token&lt;/em&gt; for a user.&lt;/li&gt;
&lt;li&gt;Use that token to access the &lt;em&gt;company's API&lt;/em&gt; which contains the user's information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice the italics, OAuth app ==&amp;gt; token ==&amp;gt; API. That's the summary for all OAuth, it is what you should be looking for in any of those companies.&lt;/p&gt;

&lt;p&gt;I have a complete post on my blog where I explained &lt;a href="https://webdeverguide.com/how-to-use-github-oauth-in-your-app-like-a-pro"&gt;how OAuth works&lt;/a&gt;, showed some use cases (using GitHub) with source code linked on my blog. Go check it out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#as-a-user"&gt;
  &lt;/a&gt;
  As a User
&lt;/h4&gt;

&lt;p&gt;I am assuming you (as a user) are already on the website you intend to create an account with.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the &lt;em&gt;Sign in with Google&lt;/em&gt; button on the website.&lt;/li&gt;
&lt;li&gt;Redirected to Google accounts where you authorize the app by clicking a button.&lt;/li&gt;
&lt;li&gt;Redirected back to the initial website and boom account created successfully.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a user, you basically just clicked two buttons and you are all set up. When logging in, you simply click one button (i.e &lt;em&gt;Continue with Google&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-and-cons-of-using-oauth-in-your-app"&gt;
  &lt;/a&gt;
  Pros and Cons of using OAuth in your app
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is secure. Companies like Google don't play with their users' privacy. It now boils down to you the developer to make your authentication secure. &lt;a href="https://webdeverguide.com/how-to-use-github-oauth-in-your-app-like-a-pro"&gt;Here is how&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is easier and faster. Users don't have to go through the stress of creating a password, uploading a profile picture, verifying their email, or resetting their passwords when forgotten. Worst case scenario is when a user forgets his/her username and isn't sure which email he/she used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can act on behalf of a user. Apart from getting a user's public info, through some of these companies (with OAuth) APIs, you can do things on behalf of the user. For example, with your app, you can create a GitHub repository on behalf of your user. It is done with scopes. &lt;a href="https://webdeverguide.com/how-to-use-github-oauth-in-your-app-like-a-pro"&gt;See details here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;There may be limits. Companies like Facebook, Twitter, and Discord set limits to how many requests you can make to their API per hour. For example, Facebook insists on a 200 * number of users request per hour.  So get acquainted with each documentation to understand how it works.&lt;br&gt;
&lt;strong&gt;Solution&lt;/strong&gt;: You should minimize the number of requests you make to the API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tokens don't last forever. Recall that tokens are what we use to access users' information. Well, they don't last forever. They can expire, a long-lived token of Facebook expires after 60 days. That of Discord is not that long, meanwhile, that of GitHub doesn't seem to expire.&lt;br&gt;
&lt;strong&gt;Solution&lt;/strong&gt;: These companies like Facebook, Google, Discord give you a &lt;em&gt;refresh token&lt;/em&gt; which you can use to refresh the token of a user when it expires. Cool right.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Expiring a token should not new for a developer who has been working with JSONWebToken. The token expires for security reasons, as a developer you should know how to tackle it and most importantly when to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;OAuth is the next big thing in this industry, companies like Google have so advanced their OAuth such that when a user revisits a website they already signed up with Google with, it automatically logs them in.&lt;/p&gt;

&lt;p&gt;The rate at which developers have been working with OAuth has massively increased, you can tell if you visit a lot of sites.&lt;/p&gt;

&lt;p&gt;Alright, that is it for now, I hope to hear back from you about how it increased your app's users or probably how OAuth has been a great help to you (if you have been using it).&lt;/p&gt;

&lt;p&gt;Also, don't forget to give a heart or/and unicorn to this post, and sharing it is just a click away to help someone else. If you'd love to see more of this, support me by &lt;a href="//www.patreon.com/elijahtrillionz"&gt;becoming a Patron&lt;/a&gt;. Or simply &lt;a href="//www.buymeacoffee.com/elijahtrillionz"&gt;buying me a coffee&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>discuss</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hidden Door I'd Use To Get A Software eEngineer Job At Apple</title>
      <author>Nick Bull</author>
      <pubDate>Sat, 22 May 2021 21:26:11 +0000</pubDate>
      <link>https://dev.to/nickbulljs/hidden-door-i-d-use-to-get-a-software-eengineer-job-at-apple-3k0c</link>
      <guid>https://dev.to/nickbulljs/hidden-door-i-d-use-to-get-a-software-eengineer-job-at-apple-3k0c</guid>
      <description>&lt;p&gt;Most engineers don't realize that there is always a &lt;em&gt;hidden&lt;/em&gt; door to enter any company if traditional ways, such as sending a resume, don't work for you.&lt;/p&gt;

&lt;p&gt;No one talks about these doors because it's hard to find them and they look unique to everyone. But I'll disclose today, how one type of hidden doors might look like.&lt;/p&gt;

&lt;p&gt;To get an interview at Apple I'd use such door.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;I'd go to eBay and buy Macintosh System Boot Disk 6.X.X for $11.99.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8C9Mseu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621695459352/Sz4G2dMH8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8C9Mseu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621695459352/Sz4G2dMH8.jpeg" alt="1.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;I'd buy a high-quality paper and pen and write this letter to Tim Cook:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Hi, Tim.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've been following Apple for quite some time and have watched all of your new product launches, with the rest of the world, since 2009.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My name is Nick, I’m a software engineer with 6+ years of experience in the tech field. For 4 of these 6 years, your products have been helping me grow as a person and as a developer. Now, I want this "growth" to help you grow as well.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With this letter, you can find a Macintosh System Boot Disk 6.0.8 which I bought on eBay for $11.99.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No, it's not a mistake. I actually bought this disk with "System Tools Version 6.0.8" on it on purpose.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before writing this letter, I researched early Apple operating systems, and System 6, which was introduced in April 1988, has one flaw that your next system "System 7" does not.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;System 6 has a limit on volume size. It supports up to 2 GB. But System 7 increases the limit to 4 GB. In other words, System 7 got louder.&lt;br&gt;
*&lt;br&gt;
*That's how I want to help Apple. I want to make it "louder." Increase its "volume" in every possible sense: sales volume, brand volume, quality volume, and other volumes to make it that System 7 (using my experience and knowledge as a software engineer)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*It's hard to say whether I'll be able to achieve a 2x increase in "volume" as you did in System 7, but at least I'll do my best to move us from System 6 to 7.&lt;br&gt;
*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's talk and increase Apple's volume: &lt;a href="mailto:my@email.com"&gt;my@email.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the best, Nick.”&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;I'd buy an envelope, put in it my letter and Macintosh System Boot Disk and send it to Tim Cook at "One Apple Park Way Cupertino, CA 95014"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnXYpsME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621695571310/OXHRb29Wc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnXYpsME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621695571310/OXHRb29Wc.jpeg" alt="2.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step will be taken by Apple.&lt;/p&gt;




&lt;p&gt;For someone, it'll be hard to believe that it could work, but this is how my friend land a job at one FAANG tier company.&lt;/p&gt;

&lt;p&gt;To make it easier to realize that hidden door exists, put yourself in Tim Cook's shoes &lt;em&gt;(or his assistant, who is likely to check this letter)&lt;/em&gt; would you be interested to give a chance to a developer with such a creative approach, relevant experience, and passion that he or she shows from the start? Probably yes, if you know how hard it is to find such talent.&lt;/p&gt;

&lt;p&gt;Opportunities are endless if you know that &lt;em&gt;hidden&lt;/em&gt; doors exist. Try to find them, use your creativity.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;– &lt;a href="https://twitter.com/nickbulljs"&gt;Nick&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this article you need to know that every Monday, I send a letter to 4,000+ Web Developers with 3 hand-picked articles from the tech world, 2 web development guides, and 1 best Tweet of the week&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Your newsletter is f&lt;/em&gt;&lt;em&gt;king awesome, really Nick. It gives me a great start to the week with a lot of great knowledge.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Join smart developers who get short and full of knowledge letters for free &lt;a href="https://nickbulljs.com/newsletter/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>The Art Of Solving An Algorithm</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Sat, 22 May 2021 21:21:48 +0000</pubDate>
      <link>https://dev.to/chetanx/the-art-of-solving-an-algorithm-jie</link>
      <guid>https://dev.to/chetanx/the-art-of-solving-an-algorithm-jie</guid>
      <description>&lt;p&gt;What Is An Algorithm? If you find this question on google, you will get “It is a process or set of rules to be followed in calculations or other problem-solving operations, especially by a computer.” But when I had seen this definition initially, I wasn’t able to understand anything, It emerged as a piece of literature for me. I was drastically surprised by how complexly a simple definition can be presented. Since I know this by now, so let me help you to understand it.&lt;br&gt;
An algorithm is a process of doing some work, Let’s suppose you are given chicken &amp;amp; rice, now it depends on your algorithm(the process of doing something) that whether the output will be chicken masala or will be kabab.&lt;br&gt;
In programming different algorithm is used to obtain different outputs and even for single output different algorithms can be used, its kind of a pathway to reach the destination, you can choose any path. But the less time your path takes the better that algorithm will be called.&lt;br&gt;
How To Solve An Algorithm-&lt;br&gt;
In How to Solve It, George Polya outlines four steps of problem-solving:&lt;br&gt;
Understand the problem.&lt;br&gt;
Make a plan.&lt;br&gt;
Execute the plan.&lt;br&gt;
Evaluate the result.&lt;br&gt;
Understand the Problem&lt;br&gt;
If you’re a good developer, you’ll realize that the best solutions emerge from listening to your customer tell their story. Many algorithms are disguised as story problems, such as the farmer who needs to get duck, corn, and a fox across the river. But! He can only carry one of these at a time. If left alone, the duck will eat the corn and the fox will eat the duck. How does he get everything across?&lt;br&gt;
What you should do is :&lt;br&gt;
AS A &amp;lt; USER OF SOME SORT &amp;gt;&lt;br&gt;
I WANT &amp;lt; TO DO THIS &amp;gt;&lt;br&gt;
SO THAT &amp;lt; MY EXISTENCE IS VALIDATED &amp;gt;&lt;br&gt;
In our farmer example above:&lt;br&gt;
AS A farmer&lt;br&gt;
I WANT to ferry my duck, fox, and corn across the river&lt;br&gt;
SO THAT we all live happily ever after&lt;br&gt;
The format for acceptance criteria is:&lt;br&gt;
GIVEN &amp;lt; APPLICATION &amp;gt;&lt;br&gt;
WHEN &amp;lt; I DO THIS &amp;gt;&lt;br&gt;
THEN &amp;lt; I EXPECT THE APP TO DO THAT &amp;gt;&lt;br&gt;
In our farmer example above:&lt;br&gt;
GIVE three items that will eat each other&lt;br&gt;
WHEN I ferry one item across the river&lt;br&gt;
THEN the other two are safe&lt;br&gt;
Make a Plan&lt;br&gt;
The next step in Polya’s heuristic is to make a plan.&lt;br&gt;
AKA pseudocode.&lt;br&gt;
You write pseudocode, don’t you?&lt;br&gt;
Writing pseudocode is like making a sketch for a design.&lt;br&gt;
It’s your back-of-the-envelope proof-of-concept.&lt;br&gt;
It’s your discovery phase, your user research, your market validation.&lt;br&gt;
It’s your roadmap.&lt;br&gt;
It’s also the comments for your function. Just // each line and walla, there you go.&lt;br&gt;
Execute the Plan&lt;br&gt;
It’s showtime!&lt;br&gt;
After all this problem understanding and plan-making, it’s time to crack your fingers, dust off the keyboard, and write some code! This part will be easy because why? Because you wrote pseudocode! All you need to do now is translate that plain language into JavaScript, Python, or (shudder) Java. Then hit Enter…&lt;br&gt;
Evaluate the Plan&lt;br&gt;
Did your plan work?&lt;br&gt;
If no, back to step 1.&lt;br&gt;
If yes, can you do better?&lt;br&gt;
How to Solve It with Computational Thinking&lt;br&gt;
The steps above are table stakes for problem-solving and can be applied to any domain. If you want to turn pro, you need to assimilate with the Borg and learn how to think like a computer. There are four primary stages of computational thinking:&lt;br&gt;
Decomposition&lt;br&gt;
Generalization&lt;br&gt;
Abstraction&lt;br&gt;
Algorithms&lt;br&gt;
A detailed Information About THESE COULD BE FOUND HERE&lt;br&gt;
Evaluate the result.&lt;br&gt;
If your plan and your execution go well, then you are safe in running in a small run. But if you want You Run a Maraton rather than a race, you have to evaluate this to make your work even better.&lt;br&gt;
How to Solve Any Algorithm&lt;br&gt;
You can solve any algorithm using Polya’s heuristic and computational thinking. Just believe in yourself and execute it, nothing is hard for anyone.&lt;br&gt;
Everything We Use Now Is Made&lt;br&gt;
With the power of the Human Brain.&lt;br&gt;
If Human can make it, then Human can solve it too.&lt;br&gt;
THANKS FOR TUNING IN!&lt;br&gt;
Just for fun, let's also solve the farmer's problem-&lt;br&gt;
The farmer brings duck to side b&lt;br&gt;
Farmer goes back to side a&lt;br&gt;
The farmer brings fox over to side b&lt;br&gt;
The farmer brings duck back to side a&lt;br&gt;
The farmer brings corn to side b&lt;br&gt;
Farmer goes back to side a&lt;br&gt;
The farmer brings duck to side b&lt;br&gt;
This way the Fox is never left alone with the duck and the duck is never left alone with the corn while getting all three to side b. No need for a cage!&lt;br&gt;
— Bye —&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing Quotes App</title>
      <author>Gourav Khunger</author>
      <pubDate>Sat, 22 May 2021 19:58:40 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/introducing-quotes-app-2ih0</link>
      <guid>https://dev.to/gouravkhunger/introducing-quotes-app-2ih0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally published at &lt;a href="https://genicsblog.com/introducing-quotes-app"&gt;my blog&lt;/a&gt;. Please try reading it there for a better experience :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hi everyone, how are y'all doing 😃&lt;/p&gt;

&lt;p&gt;It's been a long time since I published my last blog post and all that is because it was getting difficult to manage studies and blogging. But in the meantime, I have been working on a really awesome project and this article is all about explaining that ✨&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introducing-quotes-app"&gt;
  &lt;/a&gt;
  Introducing Quotes App 🚀
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;If you ever read even one of my android articles, you will definitely be knowing I used Java to make android apps.&lt;/p&gt;

&lt;p&gt;And, as we all know Google is going on to promote Kotlin at its level best and encouraging developers to use Kotlin to develop android apps, I too was thinking for a long time of migrating to Kotlin as soon as possible.&lt;/p&gt;

&lt;p&gt;Also, a lot of open-source projects and articles on the internet about android development, these days are based on Kotlin and require you to understand Kotlin! So it was high time for me too to adopt Kotlin and get my hands dirty over it.&lt;/p&gt;

&lt;p&gt;If you too ever thought of starting to learn a new language from scratch, you definitely know how difficult it seems at first, to pick a new topic and start learning it by researching over the internet. And the same happened to me!&lt;/p&gt;

&lt;p&gt;But my learning process of Kotlin is a talk of another article, I will surely write articles about it and update this one to include them.&lt;/p&gt;

&lt;p&gt;So, after learning Kotlin, the thing I had left out was, I had not implemented things I learned in a project and I would say that's a massive mistake that beginners make. It's important to try out stuff in the real world if we wish to get good in any field!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h3&gt;

&lt;p&gt;As soon I was done with learning modern tools and concepts about android development, like the MVVM pattern(I did not use it much before learning Kotlin), Room Database library, ViewModels, LiveData, and trying few things here and there, I had an idea of integrating all the things I learned into a single android app.&lt;/p&gt;

&lt;p&gt;I really wished to make something useful out of what I learned and not just implement any 3rd world demo app that does nothing.&lt;/p&gt;

&lt;p&gt;And hence it had to lead me to think about making a Quotes App 🎉. The concept of the app is really simple.&lt;/p&gt;

&lt;p&gt;I thought of having just two screens in the app, one for viewing the current quote and the other for viewing all the saved quotes of the user.&lt;/p&gt;

&lt;p&gt;On the quotes page, there would be a card that would show the currently loaded quote and the author of the quote. There would be a button on the bottom of the page to bookmark, or in other words, save the current quote. Look below in the design section to see the design I took inspiration from.&lt;/p&gt;

&lt;p&gt;The second page would be about showing the bookmarked quotes to the user. There we can long-press the quotes to copy them to the clipboard, and swipe them to delete them from our collection. Also, we can undo the action if the quote was deleted in error and it will get back into place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h3&gt;

&lt;p&gt;I thought over the designing aspect a lot, but since I am not that much interested in designing as I am fascinated with programming, I wished to focus on the coding part more than the design part.&lt;/p&gt;

&lt;p&gt;Hence, I looked over the internet for some design inspirations and ideas, I ended up with this image, and most of the design inspiration is taken from it, though not completely, but the major look and feel is derived from it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mjb6hMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnq9czxqmnnulky3kgf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mjb6hMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnq9czxqmnnulky3kgf.jpg" alt="app-design-idea.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This design looked great to me and I made up my mind to use it as a reference while designing the whole UI&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;p&gt;It took me just 2 days to get working with a working base model of the app. I had done implementing Retrofit, Room Database, Recycler View, Navigation, and pretty much everything the basic version of the app would need.&lt;/p&gt;

&lt;p&gt;I have used the &lt;a href="https://zenquotes.io/"&gt;ZenQuotes API&lt;/a&gt; to load quotes into the app. Huge thanks to them for making such a quality API for free usage!!&lt;/p&gt;

&lt;p&gt;As of now, here's a list of tools and frameworks this app uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Material Design&lt;/li&gt;
&lt;li&gt;Android LifeCycle Components&lt;/li&gt;
&lt;li&gt;Room Database Library&lt;/li&gt;
&lt;li&gt;Kotlin Extensions and Coroutines&lt;/li&gt;
&lt;li&gt;Retrofit Library&lt;/li&gt;
&lt;li&gt;Android Navigation Components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the code for this app is hosted on this Github repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/GouravKhunger"&gt;
        GouravKhunger
      &lt;/a&gt; / &lt;a href="https://github.com/GouravKhunger/QuotesApp"&gt;
        QuotesApp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A beautiful Quotes App where you can read and save quotes.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
QuotesApp&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/logo.png"&gt;&lt;img alt="QuotesApp Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVzZgULE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/logo.png" height="150px" width="150px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A beautiful Quotes App where you can read and save quotes.&lt;/p&gt;
&lt;p&gt;This repository contains source code of a Quotes app, which helps you stay motivated by providing best picked quotes
stated by famous personalities. This app uses &lt;a href="https://zenquotes.io" rel="nofollow"&gt;zen quotes&lt;/a&gt; api, for retrieving quotes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GouravKhunger/QuotesApp/releases/latest"&gt;Download&lt;/a&gt; the latest &lt;code&gt;apk&lt;/code&gt; file of this project and do provide feedback 😀&lt;/p&gt;
&lt;h1&gt;
Screenshots&lt;/h1&gt;
&lt;p&gt;Here are some screenshots from the app:&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/one.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FH4BTVnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/one.png" alt="first"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/two.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zhlbm3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/two.png" alt="second"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/three.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_MZkbV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/three.png" alt="third"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/four.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSLNVWvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/four.png" alt="fourth"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h1&gt;
Details&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://youtu.be/9Kl6WDmTK8g" rel="nofollow"&gt;Watch the demo video on Youtube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This App has useful features, such as bookmarks, to save the quotes that you find motivating, and keep them in a
separated section. Moreover, there are a number of cool transition and animation affects, which makes navigation much
cooler.&lt;/p&gt;
&lt;p&gt;Long pressing a quote in your Bookmarks copies that quote to the clipboard... More features along the way 🚀.&lt;/p&gt;
&lt;h1&gt;
Have awesome ideas?&lt;/h1&gt;
&lt;p&gt;Feel free to &lt;a href="https://github.com/GouravKhunger/QuotesApp/issues/new"&gt;Create an issue&lt;/a&gt;
if you think you have a great idea that could…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/GouravKhunger/QuotesApp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Feel free to clone the repository and add new amazing features that you have in your mind 🙂&lt;/p&gt;

&lt;p&gt;Also, Don't forget to smash the star button and show some love!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#end-result"&gt;
  &lt;/a&gt;
  End result
&lt;/h3&gt;

&lt;p&gt;Here's a demo video showing all the features of the app:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9Kl6WDmTK8g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;It was an overall fun experience implementing all the new things I learned while diving even deeper into Android development.&lt;/p&gt;

&lt;p&gt;I learned a lot of new concepts along the way, also coming up with errors here and there and failing while learning Kotlin, but the quotes themselves from my app kept me motivated to continue the learning process 😇&lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://github.com/GouravKhunger/QuotesApp/releases/latest"&gt;download the latest &lt;code&gt;apk&lt;/code&gt; file&lt;/a&gt;, install it on your device, and provide feedback about what you think  about the app 🔥&lt;/p&gt;

&lt;p&gt;I hope you would love the app as well as the article, thanks a lot for reading this far 😊&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>PostgreSQL: como permitir acesso de leitura a apenas algumas colunas de uma tabela?</title>
      <author>Mariana Ferreira</author>
      <pubDate>Sat, 22 May 2021 19:55:02 +0000</pubDate>
      <link>https://dev.to/mari_dff/postgresql-como-permitir-acesso-de-leitura-a-apenas-algumas-colunas-de-uma-tabela-2918</link>
      <guid>https://dev.to/mari_dff/postgresql-como-permitir-acesso-de-leitura-a-apenas-algumas-colunas-de-uma-tabela-2918</guid>
      <description>&lt;p&gt;Como fornecer acesso de leitura a algumas colunas de uma tabela e impedir o acesso as demais colunas para um certo usuário?&lt;/p&gt;

&lt;p&gt;Para exemplificar esse cenário, vou usar a base de dados &lt;a href="https://raw.githubusercontent.com/lerocha/chinook-database/master/ChinookDatabase/DataSources/Chinook_PostgreSql.sql"&gt;Chinook&lt;/a&gt; e a ferramenta &lt;a href="https://dbeaver.io/"&gt;DBeaver&lt;/a&gt; para administrar a base de dados.&lt;/p&gt;

&lt;p&gt;Primeiro, crie um usuário:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;mariana&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PASSWORD&lt;/span&gt; &lt;span class="s1"&gt;'sua_senha'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois, crie uma view com apenas as colunas da tabela que você deseja permitir o acesso. Nesse caso, estou criando com as colunas "EmployeeId", "LastName", "FirstName", "Title", "Email" da tabela "Employee":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;employee_base_info&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nv"&gt;"EmployeeId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"LastName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"FirstName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"Title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"Email"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;"Employee"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A view é como uma tabela virtual, não é uma tabela que está de fato no banco e quando é referenciada essa query é executada.&lt;/p&gt;

&lt;p&gt;Depois, dê permissão de leitura na view para o usuário:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;employee_base_info&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;mariana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Então, ao conectar no banco utilizando esse usuário, temos permissão de realizar uma consulta na view:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciKAhDT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgntsp6tqo0ng5c3vo2s.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciKAhDT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgntsp6tqo0ng5c3vo2s.PNG" alt="Print da tela do Dbeaver com a query:  raw `select * from employee_base_info` endraw  e abaixo as informações da tabela"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mas não temos permissão de consultar a tabela inteira:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUNkbP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yiulapkc4happ9mjr5n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUNkbP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yiulapkc4happ9mjr5n.PNG" alt="Print da tela do Dbeaver com a query:  raw `select * from &amp;quot;Employee&amp;quot; e abaixo o erro 'permission denied for table Employee` endraw "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tampouco permissão de update:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAWhpidS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t45f4lq0a3jovtl96ru3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAWhpidS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t45f4lq0a3jovtl96ru3.PNG" alt="Print da tela do Dbeaver com a query:  raw `update &amp;quot;Employee&amp;quot; set &amp;quot;LastName&amp;quot; = 'Silva' where &amp;quot;EmployeeId&amp;quot; = 1` endraw  e abaixo o erro 'permission denied for table Employee`"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso garantimos maior segurança para nosso banco de dados.&lt;/p&gt;

&lt;p&gt;Obrigada por ler! &lt;br&gt;
Se quiser saber mais, veja também a &lt;a href="https://www.postgresql.org/docs/9.2/sql-createview.html"&gt;documentação do PostgreSQL&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>sql</category>
    </item>
    <item>
      <title>Doom Captcha</title>
      <author>Miquel Camps</author>
      <pubDate>Sat, 22 May 2021 19:43:57 +0000</pubDate>
      <link>https://dev.to/vivirenremoto/doom-captcha-33hp</link>
      <guid>https://dev.to/vivirenremoto/doom-captcha-33hp</guid>
      <description>&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;My name is Miquel Camps, I'm a web developer based in Spain, you can find me on &lt;a href="https://twitter.com/vivirenremoto"&gt;twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/miquelcamps/"&gt;linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR: You can visit the demo here&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://vivirenremoto.github.io/doomcaptcha/"&gt;https://vivirenremoto.github.io/doomcaptcha/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bgdftv7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bj85ytin5ddahdr3w2e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgdftv7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bj85ytin5ddahdr3w2e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use this captcha?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simply add this code before de submit form button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://vivirenremoto.github.io/doomcaptcha/script.js?version=1"&lt;/span&gt; &lt;span class="na"&gt;sound=&lt;/span&gt;&lt;span class="s"&gt;"on"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Captcha"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sound: on / off&lt;/li&gt;
&lt;li&gt;label: Text before captcha, you can leave it empty&lt;/li&gt;
&lt;li&gt;version: Current version 1&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>forms</category>
      <category>ui</category>
      <category>validation</category>
    </item>
    <item>
      <title>How does CSS works behind the scenes?</title>
      <author>Halisson Alves</author>
      <pubDate>Sat, 22 May 2021 19:29:22 +0000</pubDate>
      <link>https://dev.to/halissonalves/how-does-css-works-behind-the-scenes-2f9g</link>
      <guid>https://dev.to/halissonalves/how-does-css-works-behind-the-scenes-2f9g</guid>
      <description>&lt;p&gt;With the arrival of so much technology and novelty in the development market, many programmers end up leaving aside concepts that are essential for the complete understanding of a web application. One of them is the working of the CSS behind the scenes.&lt;br&gt;
Understanding how a specific technology works is the key to getting everything it has to offer. That is exactly what we are going to discuss here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opening-a-web-page"&gt;
  &lt;/a&gt;
  Opening a web page
&lt;/h2&gt;

&lt;p&gt;Have you stopped to think about the number of processes that run in the background of a browser while you access a web page? Of course, we will not explore all the details of these processes here, but we will cover enough to understand the path that our beloved CSS travels until reaching its final destination.&lt;/p&gt;

&lt;p&gt;When you open a web page, your browser loads the HTML file and begins scrolling line by line, decoding each of them. Passing through all of them, the browser generates the Document Object Model (DOM), which is basically the entire structure of your website divided into kin (parents, children, etc …) as if it were a family tree.&lt;/p&gt;

&lt;p&gt;Basically, this process is divided into two strands. These are &lt;strong&gt;“Conflict Resolutions in CSS Declarations”&lt;/strong&gt; and &lt;strong&gt;“Final Processing of CSS Values”&lt;/strong&gt;. We will discuss these details later.&lt;/p&gt;

&lt;p&gt;As with HTML, now the browser will generate a structured document for CSS called CSS Object Model (CSSOM). Joining the DOM with CSSOM generates a final structure called the Render Tree.&lt;/p&gt;

&lt;p&gt;At this point, the browser is ready to render all the generated content. This is done using the &lt;strong&gt;“Visual Formatting Model”&lt;/strong&gt;, which is basically an algorithm that analyzes information such as box-model, floats and positioning of elements on the page.&lt;/p&gt;

&lt;p&gt;At this stage, the website is already rendered and ready to be used by the user. Below is an illustration of the processes we have seen so far to better understand the paths we have come to get here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--30yeVhzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j98bgrk5k7vw26qesec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30yeVhzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j98bgrk5k7vw26qesec.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-deeper"&gt;
  &lt;/a&gt;
  Getting deeper
&lt;/h2&gt;

&lt;p&gt;We discussed basically all the steps of handling a CSS file, but some terms were still somewhat vague. In this session, we will discuss a little more about them. Remember that I commented about the two sub-divisions during the decoding of a CSS file? Let’s understand how they operate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0a32lZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgmloqfh38kwpc3x424b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0a32lZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgmloqfh38kwpc3x424b.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conflict-resolutions-in-css-declarations"&gt;
  &lt;/a&gt;
  Conflict Resolutions in CSS Declarations
&lt;/h2&gt;

&lt;p&gt;For the resolution of these conflicts CSS uses a term called Cascade, which according to &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance"&gt;MDN web docs&lt;/a&gt; has the following definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS is an acronym of Cascading Style Sheets, which indicates that the notion of the cascade is important. At its most basic level it indicates that the order of CSS rules matter, but it’s more complex than that. What selectors win out in the cascade depends on three factors (these are listed in order of weight — earlier ones will overrule later ones):&lt;br&gt;
Importance&lt;br&gt;
Specificity&lt;br&gt;
Source order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we talk about these factors we need to keep in mind that CSS can come from several different sources, such as author, user and the browser itself. The most common of all is the one that the developers write. They are the sources of the Author. The CSS that comes from the user is about aesthetic modifications that the user makes in the settings of his browser. And last but not least we have the browser’s own presets that already bring with them some CSS rules.&lt;/p&gt;

&lt;p&gt;The Cascade resolves declarations conflicts based on the 3 items cited in MDN Web Docs, in the following order of priority:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Importance&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User &lt;strong&gt;!important&lt;/strong&gt; declarations&lt;/li&gt;
&lt;li&gt;Author &lt;strong&gt;!important&lt;/strong&gt; declarations&lt;/li&gt;
&lt;li&gt;Author declarations&lt;/li&gt;
&lt;li&gt;User declarations&lt;/li&gt;
&lt;li&gt;Default browser declarations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Specifity&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inline Styles&lt;/li&gt;
&lt;li&gt;IDs&lt;/li&gt;
&lt;li&gt;Classes, pseudo-classes, attributes&lt;/li&gt;
&lt;li&gt;Elements, pseudo-elements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the conflicts are still not solved, we proceed to the final verification:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Source Order&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The last declaration of the code will override all other declarations and the style will be applied.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#final-processing-of-css-values"&gt;
  &lt;/a&gt;
  Final Processing of CSS Values
&lt;/h2&gt;

&lt;p&gt;The final processing takes place in the following order of precedence:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZgxaEzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h4la8dqd80s39vatk7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZgxaEzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h4la8dqd80s39vatk7c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this stage, the process is somewhat different from what we discussed earlier. Here the values are processed and the units (rem, em,%, etc …) are converted into pixels for the correct rendering in the browser.&lt;/p&gt;

&lt;p&gt;The values declared by the developer are at the top of the chain. These values are evaluated and passed to the next step, which are the values specified by the Cascade.&lt;/p&gt;

&lt;p&gt;If the developer does not declare any specific value, such as font-size, the Cascade sets a default value that in most browsers is 16px.&lt;/p&gt;

&lt;p&gt;We then proceed to the next step which is the specific value if there is no Cascade value. All properties have a pre-set initial value, and if they reach this stage with no user-specified or Cascade value, this pre-set value comes into play. We can cite padding as an example, which if not specified by the user and not obtained in Cascade will have the default value of 0px.&lt;br&gt;
The next step is where the values are computed and converted to pixels, so they can be inherited.&lt;/p&gt;

&lt;p&gt;The process then goes through a more detailed check. Imagine that you declare a width value in percent, but when we convert to pixel the value is 130.8px. What to do with this decimal part? At the time of rendering this value will be converted to 131px by the CSS engine.&lt;/p&gt;

&lt;p&gt;Finally, in the last step, we have all the values processed and ready to be used in the layout.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Understanding the operation of the tools we use most in our daily lives as a developer is extremely useful. We can identify bugs more easily, structure our project better, and make the code legible to other developers.&lt;/p&gt;

&lt;p&gt;Now, let’s coffee + code!&lt;/p&gt;

&lt;p&gt;If this post was helpful to you, leave a comment. I’d love to hear your thoughts.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Art Of Writing Clean Code: My 5 Go-To Tricks.</title>
      <author>Mohmed Ishak</author>
      <pubDate>Sat, 22 May 2021 19:23:00 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/the-art-of-writing-clean-code-my-5-go-to-tricks-4mcl</link>
      <guid>https://dev.to/ishakmohmed/the-art-of-writing-clean-code-my-5-go-to-tricks-4mcl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZE4_MPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9mnnhljui7yow76k46d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZE4_MPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9mnnhljui7yow76k46d.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyone can code, but can you code cleanly? In this article, I'll show you my go-to clean coding techniques for better code understanding and folder structure. This applies to any tech stack you work with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-a-color-palette"&gt;
  &lt;/a&gt;
  [1] Use A Color Palette
&lt;/h3&gt;

&lt;p&gt;This is one of the best decisions you can make. Using a color palette, not only you'll write cleaner code, you'll also be able to change the entire theme of your app by only changing 6 characters of code (referring to hex code). Let's take a look at a color palette I've used in my React Native project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creating and exporting the color palette&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;darkBlue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#090446&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;darkGreen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#002E27&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#00B14F&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ede6e6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#6e6969&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fc5c65&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#4530B3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#FFFFFF&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using the palette (default import as colors)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;foodName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;foodPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I can change my green color to a different shade and it wouldn't affect any of my other files, but only the main palette. You can take this to the next level by declaring colors such as primary and secondary. Therefore, if your primary color is red, you can just change it to any other color by just changing your palette.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-sort-parameters-and-keys-alphabetically"&gt;
  &lt;/a&gt;
  [2] Sort Parameters and Keys Alphabetically
&lt;/h3&gt;

&lt;p&gt;It's just clean, you know it. Here are some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;anotherArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bIsAfterA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cIsAfterB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moreArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zIsTheLastAlphabet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;darkGreen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;space-around&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-dont-be-afraid-of-expressive-naming-even-if-its-long"&gt;
  &lt;/a&gt;
  [3] Don't Be Afraid Of Expressive Naming Even If It's Long
&lt;/h3&gt;

&lt;p&gt;Everyone talks about writing short and concise codes, and that's important but for naming variables and functions, it can be the exception sometimes. Let's take a look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePress2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePress3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The naming in code snippet above can be preferred if your application is small, but for large-scale projects especially in a company, the codebase is super huge and a whole lot of engineers work on that and the last thing you want to do during a stressful day is to read a poorly written codebase and trying to figure out what it does. Here's a better naming for the above functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePressAddButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePressCrossButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePressCircularView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-a-super-extensible-directory-structure-even-if-your-project-is-small"&gt;
  &lt;/a&gt;
  [4] Create A Super Extensible Directory Structure Even If Your Project Is Small
&lt;/h3&gt;

&lt;p&gt;This is probably the most important point in this article. In my opinion, creating an extensible project structure is easy. All you need to do it to Google it for the tech stack you use. It'll help you in every way possible during development including making you happy with your work. Here's a screenshot of one of my project structures (which I learned from a course).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwuENTqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jibhw1stu4z1r90f7m7k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwuENTqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jibhw1stu4z1r90f7m7k.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-create-small-reusable-extensible-components"&gt;
  &lt;/a&gt;
  [5] Create Small, Reusable, Extensible Components
&lt;/h3&gt;

&lt;p&gt;Here's an example of reusable component in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myCustomStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;otherProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the h1 tag is already complete on it's own with default styles. All you need to do is to use it in your app. However, due to the REST parameter as the last parameter, now the Text component may or may not have additional properties as per your wish. Not only that, the component's style is made to be in a way that is complete by itself, but also can be extended/overridden (style parameter). Using reusable components will always speed up your development time.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>reactnative</category>
      <category>react</category>
    </item>
    <item>
      <title>React Hooks Portfolio 😍</title>
      <author>Said Mounaim</author>
      <pubDate>Sat, 22 May 2021 18:50:42 +0000</pubDate>
      <link>https://dev.to/said_mounaim/react-hooks-portfolio-4if9</link>
      <guid>https://dev.to/said_mounaim/react-hooks-portfolio-4if9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#said-mounaim"&gt;
  &lt;/a&gt;
  Said MOUNAIM
&lt;/h1&gt;

&lt;p&gt;
  
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LQgHMuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/N9mXnwr/sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LQgHMuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/N9mXnwr/sm.png"&gt;&lt;/a&gt;
  
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-view-a-live-example-click-here"&gt;
  &lt;/a&gt;
  To view a live example, &lt;strong&gt;&lt;a href="https://saidmounaim.netlify.app/"&gt;click here&lt;/a&gt;&lt;/strong&gt;.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.&lt;/p&gt;

&lt;p&gt;You'll need &lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt; and &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; (which comes with &lt;a href="http://npmjs.com"&gt;npm&lt;/a&gt;) installed on your computer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node@v10.16.0 or higher
npm@6.9.0 or higher
git@2.17.1 or higher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h2&gt;

&lt;p&gt;From your command line, clone and run SMPortfolio:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Clone this repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/saidMounaim/SMPortfolio.git

&lt;span class="c"&gt;# Go into the repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;SMPortfolio

&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;#Start's development server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#technologies-used"&gt;
  &lt;/a&gt;
  Technologies Used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.react-reveal.com/"&gt;react-reveal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.npmjs.com/package/react-lottie"&gt;react-lottie&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>100daysofcode</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>What Is Simulated Annealing?</title>
      <author>Luke Garrigan</author>
      <pubDate>Sat, 22 May 2021 18:31:47 +0000</pubDate>
      <link>https://dev.to/lukegarrigan/what-is-simulated-annealing-kpn</link>
      <guid>https://dev.to/lukegarrigan/what-is-simulated-annealing-kpn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-simulated-annealing"&gt;
  &lt;/a&gt;
  What Is Simulated Annealing?
&lt;/h1&gt;

&lt;p&gt;Today I’ve been playing around with  &lt;strong&gt;simulated annealing&lt;/strong&gt;, which is just a  &lt;a href="https://www.wikiwand.com/en/Simulated_annealing#:~:text=Simulated%20annealing%20(SA)%20is%20a,space%20for%20an%20optimization%20problem."&gt;probabilistic technique for approximating the global optimum&lt;/a&gt;. Don’t let that put you off, it sounds far more complicated than it really is.&lt;/p&gt;

&lt;p&gt;The name of the algorithm is stolen from  &lt;a href="https://www.wikiwand.com/en/Annealing_(metallurgy)"&gt;metallurgy&lt;/a&gt;. Annealing is a heat treatment that alters the physical and sometimes chemical properties of a material, it involves heating a metal and then slowly cooling at a specific rate.&lt;/p&gt;

&lt;p&gt;I have put together a really simple example to help explain the purpose and application of such an algorithm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hill-climbing"&gt;
  &lt;/a&gt;
  Hill climbing
&lt;/h2&gt;

&lt;p&gt;Let’s say our protagonist is a skier. Skiers – I assume – always want to get to the highest point of the mountain so they can ski as fast as possible. Let’s write a very simple algorithm that determines how the skier climbs the mountain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;findHighestPoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heightOfHillToRight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems simple enough. If the position to our right is the same height or higher let’s move to the right, otherwise let’s move to the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQvsp04---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i0.wp.com/codeheir.com/wp-content/uploads/2021/05/1-1.gif%3Fresize%3D716%252C537%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQvsp04---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i0.wp.com/codeheir.com/wp-content/uploads/2021/05/1-1.gif%3Fresize%3D716%252C537%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve cracked it haven’t we? Our skier can find the top of every mountain?&lt;/p&gt;

&lt;p&gt;Not quite:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QpU_xSYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/codeheir.com/wp-content/uploads/2021/05/2-1.gif%3Fresize%3D716%252C537%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QpU_xSYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/codeheir.com/wp-content/uploads/2021/05/2-1.gif%3Fresize%3D716%252C537%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our skier has hit what we call the  &lt;a href="https://www.wikiwand.com/en/Maxima_and_minima"&gt;local maxima&lt;/a&gt;, where it thinks it’s at the highest point. In order for the skier to find the global maxima (Highest point) it’ll first need to go down before it goes up. This is where simulated annealing comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-algorithm"&gt;
  &lt;/a&gt;
  The algorithm
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Choose a neighbour&lt;/li&gt;
&lt;li&gt; Calculate the cost of the neighbour &lt;/li&gt;
&lt;li&gt; Compare the new cost with the old cost

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;if (newCost &amp;lt; oldCost)&lt;/code&gt;: move to neighbour&lt;/li&gt;
&lt;li&gt; &lt;code&gt;if (newCost &amp;gt; oldCost&lt;/code&gt;):  &lt;em&gt;potentially&lt;/em&gt;  move to neighbour&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; Repeat until a solution is found or we reach the maximum iterations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s put this into plain English for our simple hill climbing example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose a neighbour&lt;/strong&gt;: This will simply be a position on the hill the skier can move to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calculate the cost of the neighbour&lt;/strong&gt;: This is the height of the hill at that position, so for us the higher the better - meaning the cost goes up as the hill goes down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compare the new cost with the old cost&lt;/strong&gt;: So if the new position is at a higher point on the mountain then we will move to that position. If the new position is not at a higher point on the mountain we will potentially move to that position (This is the important bit).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-temperature"&gt;
  &lt;/a&gt;
  The temperature
&lt;/h2&gt;

&lt;p&gt;The temperature is very important to the algorithm, it controls the probability of us choosing to go down the hill in the hope to go up at a later point.&lt;/p&gt;

&lt;p&gt;The temperature will start at 1.0 and will be decreased each iteration by some constant, in my example I use 0.99.&lt;/p&gt;

&lt;p&gt;The equation that we’re going to use to determine the acceptance probability, i.e the probability of us going down the hill is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;newScore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a given neighbour, the probability will get smaller as the iterations tick by (Because the temperature decreases each iteration). Meaning the likelihood of us choosing to go down decreases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;simulatedAnnealing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minTemp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;neighbour&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNeighbours&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-put-it-to-the-test"&gt;
  &lt;/a&gt;
  Let’s put it to the test
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qOu5x4wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/codeheir.com/wp-content/uploads/2021/05/3-1.gif%3Fresize%3D716%252C537%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qOu5x4wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/codeheir.com/wp-content/uploads/2021/05/3-1.gif%3Fresize%3D716%252C537%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome, in this example you can see how the temperature decreased as it tried to go back down the hill towards the end but eventually decided against it!&lt;/p&gt;

&lt;p&gt;Let’s try a more complicated example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W1ZCASH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/codeheir.com/wp-content/uploads/2021/05/4-1.gif%3Fresize%3D716%252C537%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W1ZCASH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/codeheir.com/wp-content/uploads/2021/05/4-1.gif%3Fresize%3D716%252C537%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Well, I had a lot of fun implementing that, if you want to have a trawl through the code I wrote or mess with the algorithm yourself –  &lt;a href="https://editor.p5js.org/codeheir/sketches/bGSBBXpdN"&gt;go here&lt;/a&gt;  and have a play!&lt;/p&gt;

&lt;p&gt;I took a lot of inspiration for this blog from this  &lt;a href="http://katrinaeg.com/simulated-annealing.html"&gt;post by Katrina Ellison&lt;/a&gt; &lt;br&gt;
 and got the hill climbing idea from this  &lt;a href="https://www.youtube.com/watch?v=S9vs05eAGN0"&gt;video by Erir Schirtzinger&lt;/a&gt;  so credit to them!&lt;/p&gt;

&lt;p&gt;I hope you've enjoyed this blog, if you do by some miracle enjoy my blabbering then head over to my blogging site at codeheir.com where I write weekly blogs about whatever in the world of programming has my attention!&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Weatherify: A Weather App built with React.💙</title>
      <author>Mohammed Farmaan.</author>
      <pubDate>Sat, 22 May 2021 18:02:53 +0000</pubDate>
      <link>https://dev.to/mohammedfarmaan/weatherify-weather-app-built-with-react-3038</link>
      <guid>https://dev.to/mohammedfarmaan/weatherify-weather-app-built-with-react-3038</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hey-there-everyone-hope-youre-all-doing-good"&gt;
  &lt;/a&gt;
  Hey there everyone! Hope you're all doing good.
&lt;/h1&gt;

&lt;p&gt;So it's been a month since I started learning React, and I can say that I'm loving it so far. And to understand it even better, I decided to follow the project-based approach.&lt;/p&gt;

&lt;p&gt;After thinking a lot I decided to make a weather app that can have dynamic backgrounds. So finally after a lot of ups and downs, here it is:&lt;br&gt;
It's called Weatherify. This app gives the current weather details of most of the cities in the world. I've used Open Weather Map API to fetch weather data and Pexels API to get images and dynamically set them as background.&lt;/p&gt;

&lt;p&gt;Here are its screenshots:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_gq9ljj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxlijpmry9jck211lu00.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_gq9ljj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxlijpmry9jck211lu00.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It gets a new background image after each search:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YxKKrrsC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04bjw0vzlcwbvlnbzpob.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YxKKrrsC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04bjw0vzlcwbvlnbzpob.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here it is guys. I've hosted it on Firebase and made it Open-Source so that it'll help someone as a beginner-friendly project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's the link to the live demo:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://weatherify-react.web.app/"&gt;https://weatherify-react.web.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's the link to GitHub repo:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/zxcodes/Weatherify-Web"&gt;https://github.com/zxcodes/Weatherify-Web&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#open-to-suggestions-and-feedback"&gt;
  &lt;/a&gt;
  Open to suggestions and feedback.😄
&lt;/h1&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Storing Dotfiles in a Git Repo</title>
      <author>Mat Jones</author>
      <pubDate>Sat, 22 May 2021 17:54:21 +0000</pubDate>
      <link>https://dev.to/matjones/storing-dotfiles-in-a-git-repo-342i</link>
      <guid>https://dev.to/matjones/storing-dotfiles-in-a-git-repo-342i</guid>
      <description>&lt;p&gt;Everyone has seen those &lt;code&gt;dotfiles&lt;/code&gt; repositories on GitHub. There's lots of different ways to manage them, but the method I use now requires no extra tooling (other than &lt;code&gt;git&lt;/code&gt; and a command line shell of your choice), no symbolic links to get files into the right locations, can be triggered from any directory on disk, and is easy to replicate on a new system.&lt;/p&gt;

&lt;p&gt;Basically what we're going to do is set up a git repository at &lt;code&gt;~/.cfg&lt;/code&gt; or &lt;code&gt;~/.dotfiles&lt;/code&gt; or any directory within your home directory of your choosing (although you probably &lt;em&gt;don't&lt;/em&gt; want to use &lt;code&gt;~/.config&lt;/code&gt; since that is the default value of &lt;a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;$XDG_CONFIG_HOME&lt;/a&gt;), and a shell alias to help manage and control it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-repo"&gt;
  &lt;/a&gt;
  Creating the Repo
&lt;/h2&gt;

&lt;p&gt;If you're setting this up the first time, there's a few steps you'll need to take to set up. First, create the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init &lt;span class="nt"&gt;--bare&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.dotfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This creates a "bare" git repository at &lt;code&gt;~/.dotfiles&lt;/code&gt;. Now we'll set up an alias to interact with it from any directory on disk. Add the following alias to your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file, then &lt;code&gt;source&lt;/code&gt; the file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# make sure the --git-dir is the same as the&lt;/span&gt;
&lt;span class="c"&gt;# directory where you created the repo above.&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git --git-dir=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.dotfiles --work-tree=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;--work-tree=$HOME&lt;/code&gt; option sets the directory that the repository tracks to your home directory. Now, since there's probably more files in your home directory that you &lt;em&gt;don't&lt;/em&gt; want in the repo than files you &lt;em&gt;do&lt;/em&gt; want in the repo, you should configure the repo to not show untracked files by default. We can do that by setting a repository-local configuration option.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;config config &lt;span class="nt"&gt;--local&lt;/span&gt; status.showUntrackedFiles no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tracking-files"&gt;
  &lt;/a&gt;
  Tracking Files
&lt;/h2&gt;

&lt;p&gt;To track files in our new &lt;code&gt;~/.dotfiles&lt;/code&gt; repo, we just need to add them. From any directory on disk, you can run the following command to add your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file to your new dotfiles repo:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;config add ~/.bashrc
config add ~/.zshrc
config add ~/.config/fish/config.fish

config commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add .bashrc/.zshrc/config.fish file"&lt;/span&gt;
config push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#installing-on-a-new-system"&gt;
  &lt;/a&gt;
  Installing on a New System
&lt;/h2&gt;

&lt;p&gt;Of course, the main point of doing this is to easily sync your config across new machines. We can easily do this with a small bash script to initialize the system's dotfiles from your git repository.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

git clone &lt;span class="nt"&gt;--bare&lt;/span&gt; git@github.com:mrjones2014/dotfiles.git &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.dotfiles

&lt;span class="c"&gt;# define config alias locally since the dotfiles&lt;/span&gt;
&lt;span class="c"&gt;# aren't installed on the system yet&lt;/span&gt;
&lt;span class="k"&gt;function &lt;/span&gt;config &lt;span class="o"&gt;{&lt;/span&gt;
   git &lt;span class="nt"&gt;--git-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.dotfiles/ &lt;span class="nt"&gt;--work-tree&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# create a directory to backup existing dotfiles to&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; .dotfiles-backup
config checkout
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Checked out dotfiles from git@github.com:mrjones2014/dotfiles.git"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Moving existing dotfiles to ~/.dotfiles-backup"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    config checkout 2&amp;gt;&amp;amp;1 | egrep &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'print $1'&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; | xargs &lt;span class="nt"&gt;-I&lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="nb"&gt;mv&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; .dotfiles-backup/&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# checkout dotfiles from repo&lt;/span&gt;
config checkout
config config status.showUntrackedFiles no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, installing your dotfiles on a new system is as simple as running:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://raw.githubusercontent.com/mrjones2014/dotfiles/master/scripts/config-init | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#thats-really-it"&gt;
  &lt;/a&gt;
  That's Really It
&lt;/h2&gt;

&lt;p&gt;That's really all there is to it. Now you can easily add and track changes to dotfiles via your new &lt;code&gt;config&lt;/code&gt; shell alias.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;config add ~/.config/something/somefile
config commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add somefile"&lt;/span&gt;
config push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Comment below with your dotfiles repo links! Feel free to browse mine for inspiration.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mrjones2014"&gt;
        mrjones2014
      &lt;/a&gt; / &lt;a href="https://github.com/mrjones2014/dotfiles"&gt;
        dotfiles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      My UNIX dotfiles; configuration for fish shell, vim/neovim, etc.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Installing on a New System&lt;/h1&gt;
&lt;p&gt;You can run the following to get these dotfiles installed on your system. It will make a backup of your existing dotfiles.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;curl https://raw.githubusercontent.com/mrjones2014/dotfiles/master/scripts/config-init &lt;span class="pl-k"&gt;|&lt;/span&gt; bash&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Manual Config&lt;/h2&gt;
&lt;h3&gt;
Package Manamement&lt;/h3&gt;
&lt;p&gt;You'll need/want to install &lt;a href="https://brew.sh" rel="nofollow"&gt;Homebrew&lt;/a&gt;. For Apple Silicon Macs you'll need to run the &lt;code&gt;brew&lt;/code&gt; install script
as well as &lt;code&gt;brew&lt;/code&gt; itself through Rosetta until Homebrew is updated to support Apple Silicon natively
See &lt;a href="https://stackoverflow.com/questions/64882584/how-to-run-the-homebrew-installer-under-rosetta-2-on-m1-macbook/64883440" rel="nofollow"&gt;here&lt;/a&gt; for how to do so.&lt;/p&gt;
&lt;h3&gt;
Packages&lt;/h3&gt;
&lt;p&gt;There are some global installations that are required for some of the shell and nvim CoC configuration. The &lt;code&gt;check-globals.fish&lt;/code&gt; script should output help text
for installing them if they're missing.&lt;/p&gt;
&lt;h3&gt;
Shell&lt;/h3&gt;
&lt;p&gt;You'll need to install &lt;a href="https://github.com/fish-shell/fish-shell"&gt;Fish Shell&lt;/a&gt; before the shell config will work, since its a Fish config.&lt;/p&gt;
&lt;h2&gt;
Neovim Config&lt;/h2&gt;
&lt;p&gt;The Neovim configuration is using some Lua-based plugins, like TreeSitter for syntax highlighting, Telescope for file finding and live grep
which means you…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mrjones2014/dotfiles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>bash</category>
      <category>vim</category>
      <category>dotfiles</category>
      <category>git</category>
    </item>
  </channel>
</rss>
