<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Stop mutating in map, reduce and forEach</title>
      <author>Stephan Meijer</author>
      <pubDate>Mon, 14 Dec 2020 11:49:41 +0000</pubDate>
      <link>https://dev.to/smeijer/stop-mutating-in-map-reduce-and-foreach-58bf</link>
      <guid>https://dev.to/smeijer/stop-mutating-in-map-reduce-and-foreach-58bf</guid>
      <description>&lt;p&gt;There are plenty of articles that will try to convince you that you should use the &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; methods. Less of them mention &lt;code&gt;forEach&lt;/code&gt;, and not many of them mention the more traditional for loops as serious alternative. Or when to use &lt;code&gt;map&lt;/code&gt; over &lt;code&gt;reduce&lt;/code&gt; or especially &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Programming is mostly about opinions and (maybe a bit too much) about something that we like to call "common sense". In this article, I'm sharing my opinion, and write about the functions and the problem of side effects (mutating). Triggered by &lt;a href="https://twitter.com/erikras/status/1338415676709605376?s=20"&gt;this tweet of Erik Rasmussen&lt;/a&gt; today, and experience from the past. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykWfu637--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EpMA69KXcAAWXqT.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--owyvu4UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1239587498344566784/1BxVOYSi_normal.jpg" alt="Erik Rasmussen 👨🏻‍💻🇺🇸🇪🇸 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Erik Rasmussen 👨🏻‍💻🇺🇸🇪🇸
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/erikras"&gt;@erikras&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      'sup Opinionated Dev Twitter!&lt;br&gt;&lt;br&gt;I'm doing a code review and came across this structure. Mutating the items in a map() call feels very wrong. It feels like it should be a reduce(), but then you're creating another array. forEach() would require additional lines.&lt;br&gt;&lt;br&gt;What say you? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:28 AM - 14 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      3
      &lt;a href="https://twitter.com/intent/like?tweet_id=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      10
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I still remember this change I requested during a code review. It grew among the team, and was even discussed during the next retrospective. PR #1069, July 18, 2019, author &lt;em&gt;unimportant&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// eslint-disable-line no-unused-expressions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My request was to change it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A little background, &lt;code&gt;path&lt;/code&gt; is a &lt;code&gt;string[]&lt;/code&gt;, and &lt;code&gt;checkID&lt;/code&gt; does some validations on that string to see if it's a id-like value. If not, it will throw an error.&lt;/p&gt;

&lt;p&gt;Why my change request, and why mention it in the retro? There is no law against calling methods in the map function, or throwing from within it. It was just that it doesn't match with my expectations. And I still believe I'm in my rights there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#map" class="anchor"&gt;
  &lt;/a&gt;
  Map
&lt;/h1&gt;

&lt;p&gt;My expectations for &lt;code&gt;map&lt;/code&gt; is that it "maps" one value to another. Like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is an input value (&lt;code&gt;[1, 2, 3]&lt;/code&gt;), map does something with it, and returns an entirely new value. &lt;code&gt;input !== output&lt;/code&gt; and my expectation is that whenever an array value changed, it doesn't match the previous value either. In other words I expect that at least for one element &lt;code&gt;input[n] !== output[n]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We're also able to extract the callback function so that we end up with a pure, testable function. My expectation from a &lt;code&gt;map&lt;/code&gt; call, is always that it is side effect free. No exceptions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#expectations" class="anchor"&gt;
  &lt;/a&gt;
  Expectations
&lt;/h2&gt;

&lt;p&gt;Now let's take that example from Erik&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And build some code around this, so it get's a bit easier to work with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;How do you now feel about mutating the item objects inside that &lt;code&gt;map&lt;/code&gt;? When you look at the small snippet from Erik, you might be ok with it. But after extracting that callback function, I hope it starts to feel wrong. If you don't see the problem I'm trying to highlight, try answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what does &lt;code&gt;items[0]&lt;/code&gt; look like?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;newItems[0]&lt;/code&gt; look like?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;items === newItems&lt;/code&gt; return?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;items[0] === newItems[0]&lt;/code&gt; return?&lt;/li&gt;
&lt;li&gt;do these answers match your expectations?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#foreach" class="anchor"&gt;
  &lt;/a&gt;
  forEach
&lt;/h1&gt;

&lt;p&gt;Not let's simply change that map call to a &lt;code&gt;forEach&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What does this do with your expectations? Did it change anything?&lt;/p&gt;

&lt;p&gt;Whenever I see a &lt;code&gt;forEach&lt;/code&gt;, I expect side effects. Something is being done for (or to) each value in the array. The fact that forEach doesn't have a return value, strengthens this feeling.&lt;/p&gt;

&lt;p&gt;And this is entirely personal, but I stopped using the functional forEach calls to mutate the objects as well. I'm still okay with a &lt;code&gt;forEach(sideEffect)&lt;/code&gt; but I won't use it to mutate values. I'm using the &lt;code&gt;for of&lt;/code&gt; loops for that, as I find it easier to recognize them as causing mutations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please compare that to the original, and feel free to share your thoughts in the comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#reduce" class="anchor"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h1&gt;

&lt;p&gt;Some would say that &lt;code&gt;reduce&lt;/code&gt; is meant for mutating values. In my opinion, they're wrong. Reduce is meant for when the shape of the container changes. Think conversions between objects and arrays, or even collections to strings and numbers. Or a change of length of the array. Reduce is more about changing the shape of the entire collection, then it's about changing the shape of individual entries. For that, we have &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One clear purpose I see for reduce, is when you feel the need to use both &lt;code&gt;filter&lt;/code&gt; as well as &lt;code&gt;map&lt;/code&gt;. Reduce is able to combine those two, and spare you that extra iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The difference here is that &lt;code&gt;reduce&lt;/code&gt; only walks the array a single time, whereas the &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; combo walks the array two times. For 5 entries, this isn't a big deal. For larger lists, &lt;del&gt;it might&lt;/del&gt; it's no big deal either. &lt;em&gt;(I thought it was, but &lt;a href="https://dev.to/aprillion/comment/196j9"&gt;I was wrong&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That being said, for this specific example, I do feel that the &lt;code&gt;filter().map()&lt;/code&gt; is easier to read. And with that, we are back to the "common sense" issue. Programming isn't all black and white. We can't document, spec, or lint every single rule or choice that we have to make. Use what feels best and take your time to consider the alternatives.&lt;/p&gt;

</description>
      <category>es6</category>
      <category>javascript</category>
      <category>development</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Ten Tips for How YOU Can Make Your Workplace Friendlier for Women</title>
      <author>Anna "Apero" McDougall 🏳️‍🌈</author>
      <pubDate>Mon, 14 Dec 2020 11:09:44 +0000</pubDate>
      <link>https://dev.to/annajmcdougall/ten-tips-for-how-you-can-make-your-workplace-friendlier-for-women-4pko</link>
      <guid>https://dev.to/annajmcdougall/ten-tips-for-how-you-can-make-your-workplace-friendlier-for-women-4pko</guid>
      <description>&lt;p&gt;Friends, let's talk. &lt;/p&gt;

&lt;p&gt;It has been a hard year for everyone, and something that happens in hard years is that we have less patience for little annoyances because all our energy is spent keeping... &lt;em&gt;/gestures at everything/&lt;/em&gt; at bay. &lt;/p&gt;

&lt;p&gt;So I've been seeing more and more women in tech, who normally put up with all kinds of little pieces of everyday sexism, start to crack. They're starting to wonder if tech is right for them, if everything companies say are just designed to keep them quiet, and to question how they can "be the change" while still keeping themselves sane in environments where they feel unwelcome and sometimes under active attack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This piece is not aimed at those women.&lt;/strong&gt; They've had enough of people telling them how they can adjust their attitudes, or (almost worse) pointless platitudes of how they've "got this". None of that solves the problem. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This piece is also not aimed at any men looking for some feminist boogeyman to rail against.&lt;/strong&gt; Sorry to disappoint you, but I'm just trying to make everyone nicer to each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This piece is for the male colleagues and managers out there who want to help but don't know what they can do to make the workplace more friendly for women.&lt;/strong&gt; Let me help you help this industry to become better. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ten-tips-for-making-your-workplace-friendlier-to-women" class="anchor"&gt;
  &lt;/a&gt;
  Ten Tips for Making Your Workplace Friendlier to Women
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(P.S. Yes I will turn this into a talk for your next conference, just ask.)&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Don't interrupt:&lt;/strong&gt; So you think you don't interrupt women? OK, the next time you talk to a woman, especially in the workplace, try to be really conscious of it and see if you catch yourself about to do it. If you don't: great! Congratulations! Now, listen to others and if you notice a colleague doing the interrupting, maybe drop a "Hey I don't think Sarah was done just yet... sorry Sarah what were you saying?".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lift up women's voices and take an active interest in them:&lt;/strong&gt; Along similar lines, try to notice when women's opinions are being dismissed too soon or not considered in a way which would happen for a male counterpart. In some really bad workplace cultures, you might notice women not speaking up much at all: most likely, they have learned it is pointless. Make an effort to talk to them &lt;strong&gt;after&lt;/strong&gt; the meeting and pick their brains: Do they agree with the conclusion which was reached? Do they think there was anything missed? Sometimes a 1-on-1 chat with a friendly colleague is less intimidating than a room full of people who don't look like you and treat you as either a token or an annoyance (...or both). Doing this in a meeting could seem confrontational rather than friendly and interested, so these conversations are best had individually.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Understand that you don't understand:&lt;/strong&gt; If are not a woman, then you don't understand what it's like to be a woman in the workplace. For one thing, most of us have developed an instinct for when someone is just a generally condescending person vs when they are being condescending because of our gender. It is hard to understand, especially if you're not a minority of any kind, because you haven't felt it. That's OK: you might not 'get it' and it might sound weird/paranoid to you, but that's because you haven't lived it. There is no shame in not understanding, but don't let that lack of understanding lead to a lack of believing. I don't know what it's like to be a man aiming your pee at a stain on the urinal, and it sounds ridiculous to me, but I believe y'all when you tell me it happens.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't constantly bring up gender:&lt;/strong&gt; Did you know that reminding someone of negative stereotypes against them worsens their performance? It's a known phenomenon called &lt;a href="http://diversity.arizona.edu/sites/default/files/stereotype_threat_overview.pdf"&gt;stereotype threat&lt;/a&gt;. I know how it seems to you: "I'm lifting her up! Pointing out that she's got it, despite being the only woman on our team!". It is not lifting her up, it is reminding her that she is alone and that there is an implicit expectation that she will do poorly. Calling her a pioneer or a trailblazer is probably historically inaccurate, slightly patronising (she's just doing her job, after all...), and also puts a lot of pressure on her. Ever read &lt;a href="https://xkcd.com/385/"&gt;this xkcd comic&lt;/a&gt;? You're doing the same thing in reverse. The woman you work with is not responsible for representing all women everywhere, and putting that on her makes her less likely to be ready to admit mistakes, learn, and grow. At the same time, she's more likely to make those mistakes because she wants to be perfect so she can "prove" that women aren't shit at tech. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Actively compliment women's skills:&lt;/strong&gt; Anyone who has followed me for a while &lt;a href="https://dev.to/annajmcdougall/how-to-give-good-compliments-4ggl"&gt;knows that I'm a big fan of giving genuine compliments to &lt;em&gt;everyone&lt;/em&gt;&lt;/a&gt;, but it is especially important for women to know that they are being recognised for their skills, results, and technical knowledge, and not just for how they look. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Call out sexism when you see or hear it:&lt;/strong&gt; It is hard to be the party pooper, to be the awkward one to ruin the mood. Sorry, but you have to call out sexist talk when you hear it. It sucks. It's hard. It feels super awkward. But it is worth doing because it stamps out a culture that can fester into something truly putrid for your women colleagues. There are also many, many cases of women being pushed out of jobs for "lack of culture fit" when they speak up about these issues: so take the task off their hands. If you're not sure how, try: "Come on, you know better than that" or "Don't be that guy". If neither of these gets the point across, then try "How do you think that kind of talk makes our women colleagues feel?".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Talk openly about your salary:&lt;/strong&gt; So you're confident everyone in your workplace is being paid appropriately based on their experience? Great! Then there should be no problem talking openly about salaries. Honestly, this is a good thing for all workers regardless of gender, but if you keep this habit as you move up through the ranks you might be surprised at how different those numbers can be. Even if you believe that these differences come down to salary negotiation skills, you being open about your income could give a female colleague the push she needs to ask for what she's worth.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Give credit where credit is due, even if it hurts you:&lt;/strong&gt; I really, really hope this situation never happens to you, but if you are about to get praise for an idea that sprung from the mind of a female colleague, please do the honourable thing and say that to your manager, director, colleague, whoever is paying you the compliment. Too often, women's ideas are coopted by others and she doesn't receive the credit she's due. If somehow you end up being the benefactor, then you can be a good ally by owning up to it: even if that means your wallet might take a hit. Sure, it's not your fault someone got it wrong: but it is your fault if you don't set it right.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Watch out for jokes that sting:&lt;/strong&gt; You know the kind of jokes I mean, and you can probably see the women around you tighten their lips, fidget awkwardly, or suddenly be distracted by their phones or something outside the window. Plenty of women won't say anything: that doesn't mean they're comfortable. You need to shut these jokes down. Not only is it the right thing to do, but it takes the pressure off the women in your workplace, because most likely they feel awkward about saying anything for fear of being branded a "bitch", a "nag", or "difficult". If you accidentally said a sexist joke or overstepped the lines of professionalism yourself, then the best thing you can do is to openly apologise (not just to the women, but to anyone present) and commit yourself to not doing the same again.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When you do these things, don't put it back on the women around you:&lt;/strong&gt; Listening to women's voices and opinions is not the same as forcing them to speak to others about issues of equality. Just because Miriam told you over coffee that she's sick of Jeff's jokes, that doesn't mean calling out Jeff's jokes and ending on "Right Miriam? I know you're sick of them!". Do your best not to put women into awkward positions professionally or socially. Your heart might be in the right place, but remember this is about making women feel &lt;em&gt;more&lt;/em&gt; comfortable in the workplace.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonus tip: Follow women in tech on Twitter, LinkedIn, Instagram, blogs, etc.:&lt;/strong&gt; This is an easy one to do and let's face facts: you're doing it right now! Amazing! Go out of your way to find women to follow, ensure you're hearing their voices, try &lt;a href="https://us.macmillan.com/books/9781250074317"&gt;reading&lt;/a&gt; &lt;a href="https://www.penguin.co.uk/books/111/1113605/invisible-women/9781784706289.html"&gt;books&lt;/a&gt; &lt;a href="https://mitpress.mit.edu/books/data-feminism"&gt;about&lt;/a&gt; &lt;a href="https://wwnorton.com/books/Technically-Wrong/"&gt;these&lt;/a&gt; &lt;a href="https://www.penguinrandomhouse.com/books/547571/brotopia-by-emily-chang/"&gt;issues&lt;/a&gt;, and how tech is not an objective industry run by objective people working with objective data. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Not sure where to find women in tech to follow on Twitter? Try starting with some of the women in this thread: &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMhZbbph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1331253167754010632/wK56ll0Y_normal.jpg" alt="Anna McDougall aka Apero profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Anna McDougall aka Apero
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/annajmcdougall"&gt;@annajmcdougall&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      OK followers, it's that time again: Post your favourite &lt;a href="https://twitter.com/hashtag/WomenInTech"&gt;#WomenInTech&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/WomenWhoCode"&gt;#WomenWhoCode&lt;/a&gt; tweeters! 🥳&lt;br&gt;&lt;br&gt;I'm writing a blog post about lifting women up, and am going to refer to this thread so fire out as many as you like.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:34 PM - 13 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1338235894176882692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1338235894176882692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      28
      &lt;a href="https://twitter.com/intent/like?tweet_id=1338235894176882692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      118
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#some-parting-words-you-have-power" class="anchor"&gt;
  &lt;/a&gt;
  Some parting words... You have power.
&lt;/h2&gt;

&lt;p&gt;If you are a man or a person of any gender in a position of power at a workplace, then your voice is going to be heard in a way that is different to a woman who is a junior developer, for example. You might say the exact same things, but where she's seen as a PITA, you're seen as 'woke' or a 'bleeding heart' or 'defending your colleagues' or similar, depending on who you ask. &lt;/p&gt;

&lt;p&gt;Please use this power for good. Back up your women colleagues, listen to them, ensure they are heard and valued for the right reasons. Don't put pressure on them to represent women everywhere. In the end, most women just want to do the work, have a good time with their colleagues, and not have to be bothered by reminders that they are still, in 2020, often stereotyped as less capable. &lt;/p&gt;

&lt;p&gt;The time has come for all of us, and particularly men, to stop saying it's all fair, and start &lt;em&gt;making sure&lt;/em&gt; it's all fair. &lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>career</category>
      <category>communication</category>
      <category>culture</category>
    </item>
    <item>
      <title>Understanding Docker: part 22 – Debugging/Troubleshooting Docker </title>
      <author>Aurélie Vache</author>
      <pubDate>Mon, 14 Dec 2020 08:33:38 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-part-22-debugging-troubleshooting-docker-5dbn</link>
      <guid>https://dev.to/aurelievache/understanding-docker-part-22-debugging-troubleshooting-docker-5dbn</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker. I think it could be a good way, more visual, to explain Docker (and other technologies like Kubernetes and Istio).&lt;/p&gt;

&lt;p&gt;We continue the series of Docker sketchnotes with a focus about how to debug and troubleshoot Docker issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-tszoXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j33ss36uszs3pr4b2u68.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-tszoXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j33ss36uszs3pr4b2u68.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjgoa8jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/567m4pt8xxzosy5wults.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjgoa8jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/567m4pt8xxzosy5wults.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss0vFZTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdtcv6qnz3jayas4c0ym.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss0vFZTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdtcv6qnz3jayas4c0ym.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gOUmGJ3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/blvof49jdx9ncsak9kfu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOUmGJ3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/blvof49jdx9ncsak9kfu.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39WuK9Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/da5vh8tan9ilo9ihy8kq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39WuK9Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/da5vh8tan9ilo9ihy8kq.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 120 pages: ["Understanding Kubernetes in a visual way"] and a sketchbook about Istio (&lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;https://gumroad.com/aurelievache#uCxcr&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Good and Bad Monolith</title>
      <author>Tomas Tulka</author>
      <pubDate>Mon, 14 Dec 2020 07:48:45 +0000</pubDate>
      <link>https://dev.to/ttulka/good-and-bad-monolith-13mh</link>
      <guid>https://dev.to/ttulka/good-and-bad-monolith-13mh</guid>
      <description>&lt;p&gt;After several years of the &lt;a href="https://blog.ttulka.com/you-are-not-gonna-need-microservices"&gt;microservice hype&lt;/a&gt;, &lt;a href="https://twitter.com/kelseyhightower/status/940259898331238402"&gt;now&lt;/a&gt; &lt;a href="https://blog.christianposta.com/microservices/istio-as-an-example-of-when-not-to-do-microservices/"&gt;it&lt;/a&gt; &lt;a href="https://www.infoq.com/news/2020/04/microservices-back-again/"&gt;seems&lt;/a&gt; monoliths are cool again! Does it mean, we have learned a lesson?&lt;/p&gt;

&lt;p&gt;I guess at least we accepted what Neal Ford stated in his book Building Evolutionary Architectures:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you can’t build a monolith, what makes you think microservices are the answer?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The disturbing question is: Why is monolith synonymous with a bad design for some and the right thing to do for others?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-kinds-of-monolith" class="anchor"&gt;
  &lt;/a&gt;
  Two Kinds of Monolith
&lt;/h2&gt;

&lt;p&gt;The reason is, &lt;strong&gt;there are two different kinds of a monolith&lt;/strong&gt;: physical and logical. While one is mostly a good thing, the other is pure evil.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#physical-monolith" class="anchor"&gt;
  &lt;/a&gt;
  Physical Monolith
&lt;/h3&gt;

&lt;p&gt;The first kind of monolith is what we usually picture under the word: a physical block of software, typically running as a single process.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;physically monolithic&lt;/em&gt; system is developed and built as a single artifact, deployed at once and falling down as a whole. Resources such as a database are often shared, communication is local, interprocess.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjmcgtlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bitnxyeewfxa4zb31ac1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjmcgtlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bitnxyeewfxa4zb31ac1.png" alt="Monolith"&gt;&lt;/a&gt;&lt;/p&gt;
Monolith



&lt;p&gt;The opposite is then a &lt;em&gt;distributed system&lt;/em&gt; composed of multiple physically independent components each running in its own process. Each component owns its resources and communication is done in a remote manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BoLbxwny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s6gzqi2cxnvwl6lpxk1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BoLbxwny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s6gzqi2cxnvwl6lpxk1c.png" alt="Distributed system"&gt;&lt;/a&gt;&lt;/p&gt;
Distributed system



&lt;p&gt;A &lt;strong&gt;physical monolith is no anti-pattern&lt;/strong&gt;, it’s a good thing to start with as it’s easy to build, deploy, operate, and reason about.&lt;/p&gt;

&lt;p&gt;Physically monolithic applications are pretty performant as there are no additional overheads in communication. Cross-cutting aspects are much simpler because no special platform (such as a service mesh) is needed.&lt;/p&gt;

&lt;p&gt;As the system gets bigger, further partitioning is possible. A popular option is to apply a “satellite” architecture where bottleneck services are separated from the monolithic base.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ri1W49hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mgttcv26ep8x0g3sy1s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ri1W49hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mgttcv26ep8x0g3sy1s5.png" alt="Monolith with satellites"&gt;&lt;/a&gt;&lt;/p&gt;
Monolith with satellites



&lt;h3&gt;
  &lt;a href="#logical-monolith" class="anchor"&gt;
  &lt;/a&gt;
  Logical Monolith
&lt;/h3&gt;

&lt;p&gt;The second kind is a &lt;em&gt;logically monolithic&lt;/em&gt; system. Other names are the Big ball of mud, Spaghetti code, etc. Logically monolithic codebases lack boundaries (technologies are not service boundaries!), everything is coupled to everything, no visible architecture is to be found.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D54qOLJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/olbyql5bzbf9zvbjgx20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D54qOLJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/olbyql5bzbf9zvbjgx20.png" alt="Logical monolith"&gt;&lt;/a&gt;&lt;/p&gt;
Logical monolith



&lt;p&gt;&lt;strong&gt;Logical monoliths are evil&lt;/strong&gt; and dangerous constructs that cause high complexity and tight coupling of building blocks making development expensive and error-prone.&lt;/p&gt;

&lt;p&gt;Logically monolithic software is unmaintainable on a scale and exponentially corrodes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modular-and-distributed-monoliths" class="anchor"&gt;
  &lt;/a&gt;
  Modular and Distributed Monoliths
&lt;/h2&gt;

&lt;p&gt;Doing things right or very wrong, you can end up with two types of systems: modular or distributed monolith, respectively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modular-monolith-modulith" class="anchor"&gt;
  &lt;/a&gt;
  Modular Monolith (Modulith)
&lt;/h3&gt;

&lt;p&gt;The opposite of a logical monolith is a &lt;em&gt;modular monolith&lt;/em&gt; (or, if you like, &lt;em&gt;modulith&lt;/em&gt;). In a modular codebase business capabilities are worked out by services with explicit logical (not necessarily physical) boundaries.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;modular monolith is probably the best architectural approach&lt;/strong&gt; for most applications. It's easy to extend, maintain, and reason about.&lt;/p&gt;

&lt;p&gt;That is, moduliths are really cool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--is5fryYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fe2oazeo9hi8ha5pd96c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--is5fryYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fe2oazeo9hi8ha5pd96c.png" alt="Modular monolith (modulith)"&gt;&lt;/a&gt;&lt;/p&gt;
Modular monolith (modulith)



&lt;p&gt;Although the logical and physical natures of monoliths are independent, they often come hand in hand. That’s why people easily confuse them with each other.&lt;/p&gt;

&lt;p&gt;As the boundaries in monolithic codebases are typically not physical it’s easy to cross them. A monolithic codebase, therefore, requires great discipline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distributed-monolith" class="anchor"&gt;
  &lt;/a&gt;
  Distributed Monolith
&lt;/h3&gt;

&lt;p&gt;A logically, but not physically, monolithic system is called a &lt;em&gt;distributed monolith&lt;/em&gt;. Distributed monoliths have all drawbacks of distributed systems with almost no benefits.&lt;/p&gt;

&lt;p&gt;While dealing with the Big ball of mud is pain, &lt;strong&gt;distributed monoliths are a real disaster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ela-BSuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5j0ndorua3fc6trt7lsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ela-BSuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5j0ndorua3fc6trt7lsk.png" alt="Distributed monolith"&gt;&lt;/a&gt;&lt;/p&gt;
Distributed monolith



&lt;p&gt;Systems often end up as distributed monoliths while adapting the microservices approach incorrectly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-microservices-to-monolith" class="anchor"&gt;
  &lt;/a&gt;
  From Microservices to Monolith
&lt;/h2&gt;

&lt;p&gt;The microservices movement in the last years promised us a lot. The catch is, &lt;strong&gt;microservices focus only on physical monoliths&lt;/strong&gt;, not the logical ones.&lt;/p&gt;

&lt;p&gt;To understand why we have to take a closer look at what microservices really attempt to solve.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;microservice&lt;/em&gt; is a service with some technical additions (independent development cycle). It is important to notice the word “technical” — as the logically monolithic design is obviously a logical, not technical, issue, there is nothing microservices could potentially do for us!&lt;/p&gt;

&lt;p&gt;Microservices propose a solution to tackle physical monoliths only. That’s the reason so many attempts to build microservices failed badly, simply because a wrong issue was addressed and the true problem got only bigger (and, even worse, distributed).&lt;/p&gt;

&lt;p&gt;With the logically monolithic design, microservices don’t come to the rescue, rather, to put down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#services-first" class="anchor"&gt;
  &lt;/a&gt;
  Services First
&lt;/h2&gt;

&lt;p&gt;We can think of microservices as a specific approach to Service-oriented architecture (SOA).&lt;/p&gt;

&lt;p&gt;There are several definitions of SOA, but we will focus mainly on the concept of a service, because it is the most significant. I use this modified service definition from &lt;a href="http://udidahan.com/2010/11/15/the-known-unknowns-of-soa/"&gt;Udi Dahan&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A service is the autonomous unit of logic for a specific business capability.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, it is obvious why microservices as such can’t really help us with the logically monolithic design: monolithically designed microservices are no services at all, they are mere physical components!&lt;/p&gt;

&lt;p&gt;The business only has the key to &lt;a href="https://blog.ttulka.com/colored-services"&gt;defining our services&lt;/a&gt; correctly. And &lt;strong&gt;only well-designed services can tackle logical monoliths&lt;/strong&gt; and profit from the microservices approach.&lt;/p&gt;

&lt;p&gt;It’s a hard task, but Domain-driven design can help us a lot!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you struggle with your monolithic system, the problem may likely lie in its logically monolithic design.&lt;/p&gt;

&lt;p&gt;The physical nature of the monolith is usually a secondary problem, easy to solve after the proper service-oriented design has been applied.&lt;/p&gt;

&lt;p&gt;Once the logical monolith is resolved, microservices architecture is just one step further...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9x4QjpI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9opzmn8nlg59p8y49jor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9x4QjpI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9opzmn8nlg59p8y49jor.png" alt="Types of systems by physical and logical architecture"&gt;&lt;/a&gt;&lt;/p&gt;
Types of systems by physical and logical architecture






&lt;p&gt;Originally published on &lt;a href="https://blog.ttulka.com/good-and-bad-monolith"&gt;my blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>computerscience</category>
      <category>microservices</category>
      <category>programming</category>
    </item>
    <item>
      <title>A Quick Guide To this Keyword In JavaScript: What this Is And When</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 14 Dec 2020 07:10:01 +0000</pubDate>
      <link>https://dev.to/alexdevero/a-quick-guide-to-this-keyword-in-javascript-what-this-is-and-when-7i5</link>
      <guid>https://dev.to/alexdevero/a-quick-guide-to-this-keyword-in-javascript-what-this-is-and-when-7i5</guid>
      <description>&lt;p&gt;Many JavaScript developers try to avoid using the &lt;code&gt;this&lt;/code&gt; keyword. One reason is that what &lt;code&gt;this&lt;/code&gt; refers to changes. This guide will help you with it. You will learn what &lt;code&gt;this&lt;/code&gt; keyword refers to in specific contexts. This will make it easier for you to work with it and help you predict what to expect when you use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-introduction" class="anchor"&gt;
  &lt;/a&gt;
  Quick introduction
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; is a special keyword in JavaScript. There is one problem JavaScript developers struggle with when they learn about &lt;code&gt;this&lt;/code&gt;. It can have different values. It can refer to different things. What determines what &lt;code&gt;this&lt;/code&gt; refers to is context, the context at which you use it. Let's take a look at these contexts and what to expect from &lt;code&gt;this&lt;/code&gt; keyword in each of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strict-and-sloppy-mode" class="anchor"&gt;
  &lt;/a&gt;
  Strict and sloppy mode
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are two modes or variants of JavaScript you can work with. The first one is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/strict_mode"&gt;strict mode&lt;/a&gt;. The second one is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode"&gt;sloppy mode&lt;/a&gt;. By default, you write your JavaScript code in a sloppy mode. This mode is more ... sloppy. It allows you to do things that would be &lt;a href="http://speakingjs.com/es5/ch07.html#strict_mode"&gt;forbidden&lt;/a&gt; in a strict mode. These things would not work.&lt;/p&gt;

&lt;p&gt;JavaScript offers you an option to switch from sloppy mode to strict mode. You can do this by using &lt;code&gt;'use strict'&lt;/code&gt; statement at the beginning of your code. Any code that follows after this statement will automatically follow the rules and restrictions of strict mode. This also includes the &lt;code&gt;this&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-scope" class="anchor"&gt;
  &lt;/a&gt;
  Global scope
&lt;/h2&gt;

&lt;p&gt;When you are in a global scope, the &lt;code&gt;this&lt;/code&gt; keyword will refer to the global object &lt;code&gt;window&lt;/code&gt;. This is the case at least if you are in the browser. If you are in a Node.js environment, the &lt;code&gt;this&lt;/code&gt; will refer to global object called &lt;code&gt;global&lt;/code&gt;. In a global scope, it doesn't matter if you are in a sloppy mode or a strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Global context example no.1: sloppy mode&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;

&lt;span class="c1"&gt;// In Node.js:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;ref *1&amp;gt; Object [global] {&lt;/span&gt;
&lt;span class="c1"&gt;//   global: [Circular *1],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearInterval: [Function: clearInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearTimeout: [Function: clearTimeout],&lt;/span&gt;
&lt;span class="c1"&gt;//   setInterval: [Function: setInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   setTimeout: [Function: setTimeout] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   },&lt;/span&gt;
&lt;span class="c1"&gt;//   queueMicrotask: [Function: queueMicrotask],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearImmediate: [Function: clearImmediate],&lt;/span&gt;
&lt;span class="c1"&gt;//   setImmediate: [Function: setImmediate] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Global context example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;

&lt;span class="c1"&gt;// In Node.js:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;ref *1&amp;gt; Object [global] {&lt;/span&gt;
&lt;span class="c1"&gt;//   global: [Circular *1],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearInterval: [Function: clearInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearTimeout: [Function: clearTimeout],&lt;/span&gt;
&lt;span class="c1"&gt;//   setInterval: [Function: setInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   setTimeout: [Function: setTimeout] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   },&lt;/span&gt;
&lt;span class="c1"&gt;//   queueMicrotask: [Function: queueMicrotask],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearImmediate: [Function: clearImmediate],&lt;/span&gt;
&lt;span class="c1"&gt;//   setImmediate: [Function: setImmediate] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions" class="anchor"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;When it comes to [functions], the mode at which you are makes a difference for the &lt;code&gt;this&lt;/code&gt; keyword. When you are in sloppy mode, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. Global object &lt;code&gt;global&lt;/code&gt; in Node.js. This is true even for functions declared inside another functions, in a local scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function example no.1: function in a global scope&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() function.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Function example no.2: function in a local scope&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strict-mode" class="anchor"&gt;
  &lt;/a&gt;
  Strict mode
&lt;/h3&gt;

&lt;p&gt;This will change if you switch your JavaScript code to strict mode. In a strict mode, the default value of &lt;code&gt;this&lt;/code&gt; in a function is set to &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Strict mode example no.1: function in a global scope&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() function.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Strict mode example no.2: function in a local scope&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#immediately-invoked-function-expression-iife" class="anchor"&gt;
  &lt;/a&gt;
  Immediately Invoked Function Expression (IIFE)
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword works in IIFEs like in regular functions. In a sloppy mode, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. If you switch to a strict the value of &lt;code&gt;this&lt;/code&gt; will become &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IIFE example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// IIFE example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Declare IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-constructors" class="anchor"&gt;
  &lt;/a&gt;
  Function constructors
&lt;/h3&gt;

&lt;p&gt;When you want to create new functions with similar behavior you can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function"&gt;function constructor&lt;/a&gt;. This allows you to create a blueprint you can then use for your functions. If you use function constructor remember one thing. The &lt;code&gt;this&lt;/code&gt; keyword inside a constructor will refer to the instance of that constructor, not the constructor itself. This applies to both, sloppy and strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function constructors example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Create function constructor Person.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create joe instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create natalie instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;natalie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Natalie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on joe instance.&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joe',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 31,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on natalie instance.&lt;/span&gt;
&lt;span class="nx"&gt;natalie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Natalie',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 28,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Function constructors example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function constructor Person.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create joe instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create natalie instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;natalie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Natalie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on joe instance.&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joe',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 31,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on natalie instance.&lt;/span&gt;
&lt;span class="nx"&gt;natalie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Natalie',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 28,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objects-and-methods" class="anchor"&gt;
  &lt;/a&gt;
  Objects and methods
&lt;/h2&gt;

&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; keyword in an object method, the result can vary. What matters is if the method is a regular function or an arrow function. You will learn about &lt;code&gt;this&lt;/code&gt; and arrow functions later. For now, let's focus on regular functions.&lt;/p&gt;

&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; in an object method, it will refer to the object itself. This is for both, sloppy as well as strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Object example no.1: sloppy mode&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the readObj() method on myObj.&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'Jack', age: 30, readObj: ƒ readObj() }&lt;/span&gt;


&lt;span class="c1"&gt;// Object example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the readObj() method on myObj.&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'Jack', age: 30, readObj: ƒ readObj() }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes" class="anchor"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.alexdevero.com/javascript-classes-pt1/"&gt;JavaScript classes&lt;/a&gt; are a newer addition to JavaScript. They are definitely one of those more discussed features. Some developers like to use them and some not. If you like using them, or want to start using them, you will like what follows. When it comes to classes, the &lt;code&gt;this&lt;/code&gt; keyword is very consistent and predictable.&lt;/p&gt;

&lt;p&gt;It doesn't matter if you are in a sloppy mode or a strict mode. If you use &lt;code&gt;this&lt;/code&gt; in a class it will refer to the class itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Classes example no.1: with instantiation in sloppy mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua"}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.2: with instantiation in sloppy mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua", sayHi: ƒ}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.3: with instantiation in strict mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua"}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.4: with instantiation in strict mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   sayHi: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joshua',&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.5: without instantiation in sloppy mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi() {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.6: without instantiation in sloppy mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi = () =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.7: without instantiation in strict mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi() {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.8: without instantiation in strict mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi = () =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#event-listeners" class="anchor"&gt;
  &lt;/a&gt;
  Event listeners
&lt;/h2&gt;

&lt;p&gt;When you use the &lt;code&gt;this&lt;/code&gt; keyword with event listeners, it will refer to the HTML element to which you attach the event listener. If you attach event listener to a button, &lt;code&gt;this&lt;/code&gt; will refer to that button element. That button will become value of &lt;code&gt;this&lt;/code&gt;. If you attach event listener to global &lt;code&gt;window&lt;/code&gt; object, &lt;code&gt;this&lt;/code&gt; will refer to the global &lt;code&gt;window&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Event listener example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.3: event listener on window&lt;/span&gt;
&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h2&gt;

&lt;p&gt;With &lt;a href="https://blog.alexdevero.com/javascript-arrow-functions/"&gt;arrow functions&lt;/a&gt;, &lt;code&gt;this&lt;/code&gt; keyword works differently than with regular functions. Arrow functions don't have their own &lt;code&gt;this&lt;/code&gt;. When you use &lt;code&gt;this&lt;/code&gt; in an arrow function it will inherit its value from its context. Context here is the context at which you defined that arrow function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-and-local-scope-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Global and local scope, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If your arrow function is in a global scope, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. This is true for sloppy and strict mode. It is also true if the arrow function is inside a regular function, in a sloppy mode. If you are in a strict mode, and arrow function is inside a regular function, the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.1: global function in a sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare an arrow function.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.2: global function in a strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.3: local function in a sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a regular function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Return an arrow function.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.4: local function in a strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a regular function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Return an arrow function.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-iifes" class="anchor"&gt;
  &lt;/a&gt;
  Arrow IIFEs
&lt;/h3&gt;

&lt;p&gt;When you use arrow function to create Immediately Invoked Function Expression (IIFE) &lt;code&gt;this&lt;/code&gt; will refer to global &lt;code&gt;window&lt;/code&gt; object. This applies to both, sloppy as well as strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow IIFE example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare arrow IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow IIFE example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Declare arrow IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#objects-classes-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Objects, classes, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If you declared your arrow function in an object, &lt;code&gt;this&lt;/code&gt; will refer to global object &lt;code&gt;window&lt;/code&gt;. In case of a class, it will refer to the class itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.5: object in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare an object.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.6: object in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.7: class in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Luke()&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.8: class in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Luke()&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#event-listeners-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Event listeners, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If you use arrow function as a callback for event listener, &lt;code&gt;this&lt;/code&gt; will refer to global object &lt;code&gt;window&lt;/code&gt;. This will happen in both, sloppy and also strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.9: event listener in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.10: event listener in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.11: event listener on window&lt;/span&gt;
&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-a-quick-guide-to-this-keyword-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: A quick guide to this keyword in JavaScript
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword can be sometimes confusing and unpredictable. It is no wonder some JavaScript developers don't like to use it, and even discourage it.  I hope that this tutorial helped you understand what &lt;code&gt;this&lt;/code&gt; keyword refers to in specific contexts.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a Stopwatch in JavaScript</title>
      <author>GSPTeck</author>
      <pubDate>Mon, 14 Dec 2020 07:02:36 +0000</pubDate>
      <link>https://dev.to/gspteck/create-a-stopwatch-in-javascript-2mak</link>
      <guid>https://dev.to/gspteck/create-a-stopwatch-in-javascript-2mak</guid>
      <description>&lt;p&gt;Creating a timer is a very simple task. We will only be using variables, functions and THAT'S IT!&lt;/p&gt;

&lt;p&gt;HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;JavaScript&amp;lt;/title&amp;gt;

        &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id="stopwatch"&amp;gt;
            00:00:00
        &amp;lt;/div&amp;gt;

        &amp;lt;ul id="buttons"&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;button onclick="startTimer()"&amp;gt;Start&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;button onclick="stopTimer()"&amp;gt;Stop&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;button onclick="resetTimer()"&amp;gt;Reset&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;

        &amp;lt;script src="main.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
    background: #202020;
    color: white;
}
button {
    width: 100px;
    height: 30px;
    border: 3px soldi white;
    border-radius: 50px;
    background: #202020;
    color: white;
    cursor: pointer;
    outline: none;
}

#stopwatch {
    font-size: 100px;
    position: absolute;
    top: 45%;
    left: 50%;
    transform: translate(-50%, -55%);
}
#buttons {
    position: absolute;
    top: 55%;
    left: 48.4%;
    transform: translate(-51.6%, -45%);
}
#buttons li {
    display: inline;
    padding-left: 10px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;JavaScript code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const timer = document.getElementById('stopwatch');

var hr = 0;
var min = 0;
var sec = 0;
var stoptime = true;

function startTimer() {
  if (stoptime == true) {
        stoptime = false;
        timerCycle();
    }
}
function stopTimer() {
  if (stoptime == false) {
    stoptime = true;
  }
}

function timerCycle() {
    if (stoptime == false) {
    sec = parseInt(sec);
    min = parseInt(min);
    hr = parseInt(hr);

    sec = sec + 1;

    if (sec == 60) {
      min = min + 1;
      sec = 0;
    }
    if (min == 60) {
      hr = hr + 1;
      min = 0;
      sec = 0;
    }

    if (sec &amp;lt; 10 || sec == 0) {
      sec = '0' + sec;
    }
    if (min &amp;lt; 10 || min == 0) {
      min = '0' + min;
    }
    if (hr &amp;lt; 10 || hr == 0) {
      hr = '0' + hr;
    }

    timer.innerHTML = hr + ':' + min + ':' + sec;

    setTimeout("timerCycle()", 1000);
  }
}

function resetTimer() {
    timer.innerHTML = '00:00:00';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Final Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8W9yVtc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ghxigfl5hoxttuvo4aw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8W9yVtc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ghxigfl5hoxttuvo4aw8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
(Naturally it works. Tested it myself 😉)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#disclaimer-in-the-code-you-may-notice-its-called-a-timer-and-not-stopwatch-thats-because-timer-is-shorter-than-stopwatch-and-i-dont-feel-like-having-to-type-that-all-the-time-" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer! In the code you may notice it's called a 'timer' and not 'stopwatch', that's because 'timer' is shorter than 'stopwatch' and I don't feel like having to type that all the time 😂.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;const timer = document.getElementById('stopwatch');&lt;/code&gt; imports the timer 'div' as a variable, using it's id, so we can modify it as we wish.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var hr = 0; var min = 0; var sec = 0;&lt;/code&gt; we are creating the hour, minute and second variables and we are declaring that their initial value is 0.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var stoptime = true;&lt;/code&gt; we create a variable so we can then verify if the stopwatch is running or not.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == true) { stoptime = false; timerCycle(); }&lt;/code&gt; if the stopwatch is not running, turn it on and go to the &lt;code&gt;timerCycle()&lt;/code&gt; function. (This only runs if we click the 'Start' button)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == false) { stoptime = true; }&lt;/code&gt; if  the stopwatch is running, turn it off. (This only runs if we click the 'Stop' button)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == false) {&lt;/code&gt; verify that the stopwatch is on.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sec = parseInt(sec); min = parseInt(min); hr = parseInt(hr);&lt;/code&gt; these are used to parse a string into an integer. (if we have 1045 as a string and we want to use it as an integer, we parse it)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sec = sec + 1;&lt;/code&gt; add 1 to seconds.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (sec == 60) {&lt;/code&gt; if seconds are equal to 60, minutes = 1 and seconds becomes 0 again.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (min == 60) {&lt;/code&gt; if minutes are equal to 60, hours = 1 and seconds + minutes becomes 0 again.&lt;/li&gt;
&lt;li&gt;Fun part:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (sec &amp;lt; 10 || sec == 0) {
   sec = '0' + sec;
}
if (min &amp;lt; 10 || min == 0) {
   min = '0' + min;
}
if (hr &amp;lt; 10 || hr == 0) {
   hr = '0' + hr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If seconds, minutes and/or hours are lower than 10, add a 0 in front. This is why we need to parse everything in the beginning: doing this operation they become strings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;timer.innerHTML = hr + ':' + min + ':' + sec;&lt;/code&gt; add these values to the 'timer' div.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setTimeout("timerCycle()", 1000);&lt;/code&gt; this will make sure there is a timeout of 1000 ms (1s) before repeating the 'timerCycle()'.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;timer.innerHTML = '00:00:00';&lt;/code&gt; used to reset the timer to 00:00:00&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#and-were-done" class="anchor"&gt;
  &lt;/a&gt;
  AND WE'RE DONE!
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Authentication and JWT in Node.js</title>
      <author>EidorianAvi</author>
      <pubDate>Mon, 14 Dec 2020 02:49:56 +0000</pubDate>
      <link>https://dev.to/eidorianavi/authentication-and-jwt-in-node-js-4i13</link>
      <guid>https://dev.to/eidorianavi/authentication-and-jwt-in-node-js-4i13</guid>
      <description>&lt;p&gt;Alright so this week I'm going to continue working with node. This one should be pretty short and sweet but I'd like to cover how to build out a login request and how to produce a token for verification in the front end. Let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-required" class="anchor"&gt;
  &lt;/a&gt;
  What's required
&lt;/h3&gt;

&lt;p&gt;So for our form of authentication I'm going to be using Bcrypt and a JWT. What are those you ask? I'm glad you asked.&lt;/p&gt;

&lt;p&gt;Bcrypt: A function that uses an algorithm to hash passwords. This is important for user security because if someone were to gain access to your database and the passwords are not hashed the users credentials are compromised.&lt;/p&gt;

&lt;p&gt;JWT: JWT stands for JSON Web Token. It is a standard for authentication in applications. Upon a successful login the server sends a JWT to the client as proof of verification. Think of this as the ticket for a user to gain access to gated content or personal content. &lt;/p&gt;

&lt;p&gt;Now that we know what the pieces of the puzzle we will be using are lets go ahead and install them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install bcrypt jsonwebtoken
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once they're installed go ahead and require them in whatever file you will be applying authentication to. I will be doing it in my users route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're good to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-it-out" class="anchor"&gt;
  &lt;/a&gt;
  Build it out
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-hashed-password" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Hashed Password
&lt;/h3&gt;

&lt;p&gt;So the first thing I'd like to handle is making sure when a user signs up we don't store their password in our database as is, that's just not cool. We have to hash it first. That's where bcrypt comes in. It will not only hash a password for us but it will also help verify hashed passwords.&lt;/p&gt;

&lt;p&gt;Here is what my creating a user function will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/add-user', async (req, res) =&amp;gt; {
    try {
        const hashedPassword = await bcrypt.hash(req.body.password, 10);

        const user = new User({
            username: req.body.username,
            password: hashedPassword,
        });
        const savedUser = await user.save();
        res.json(savedUser);
    } catch(e) {
        res.json({ message: "Error"});
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So let's break that down. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We created an async post request to our users route for adding a new user.&lt;/li&gt;
&lt;li&gt;Since it is an async function we handle it within a try/catch block.&lt;/li&gt;
&lt;li&gt;In the try block we create a hashedPassword constant and let bcrypt create a hashed password. It takes in the password from the request as well as the amount of saltRounds, we set that to 10 which I believe is the default. This is asynchronous so use an await.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sidenote: Salt is used in cryptography. It is random data to mix in with the core data to ensure improbability of replication&lt;/strong&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once we have used bcrypt to create a hashed password we continue like a general post request. Create a user instance with the username and the newly created hashed password instead of the request password.&lt;/li&gt;
&lt;li&gt;Save this new user instance with the hashed password.&lt;/li&gt;
&lt;li&gt;In the catch block I have it set so if there is an error it will send a response with the error in JSON format. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Awesome. Now if you make a post and create a new user and go check out the database you will see in the password parameter it is a random string. Try and decode a password from that. You can't.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging-a-user-in" class="anchor"&gt;
  &lt;/a&gt;
  Logging a User In
&lt;/h3&gt;

&lt;p&gt;Alright so now that we know how create users with hashed passwords in our database let's check out how to login a user.&lt;/p&gt;

&lt;p&gt;For this portion we need Bcrypt to handle the hashed password and JWT to provide proof of successful verification. Again I do this in my users route.&lt;/p&gt;

&lt;p&gt;First thing let's create a token secret in our .env file for later. This should be a random string that's totally unpredictable you can use the web to generate one. Store it in something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TOKEN_SECRET=b91028378997c0b3581821456edefd0ec7958f953f8c1a6dd856e2de27f0d7e0fb1a01cda20d1a6890267e629f0ff5dc7ee46bce382aba62d13989614417606a
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's check out the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/login', async (req, res) =&amp;gt; {
    const user = await User.findOne({ username: req.body.username });

    try{
        const match = await bcrypt.compare(req.body.password, user.password);
        const accessToken = jwt.sign(JSON.stringify(user), process.env.TOKEN_SECRET)
        if(match){
            res.json({ accessToken: accessToken });
        } else {
            res.json({ message: "Invalid Credentials" });
        }
    } catch(e) {
        console.log(e)
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is again an async post request to our users route.&lt;/li&gt;
&lt;li&gt;First thing we can do is find a user based on their username which ideally will be unique. This is done through using findOne on our User model via mongoose as we have in a previous blog post. &lt;/li&gt;
&lt;li&gt;We create our try/catch block since again this is an async function.&lt;/li&gt;
&lt;li&gt;First in our try black we will asynchronously compare the password we received in the request to the hashed one stored in the database using bcryt.compare and passing in first the request password and then the hashed password associated with the user we stored in a constant earlier. Bcrypt will compare and handle the hashing and provide a true or false value.&lt;/li&gt;
&lt;li&gt;We will also be creating a token using JWT. We use jwt.sign() and pass in first the user data and that token secret we hid in our .env file.&lt;/li&gt;
&lt;li&gt;Set up an if block and if the match is true it will return that token in a JSON formatted response.&lt;/li&gt;
&lt;li&gt;If it is not a match it will respond with a message saying that the credentials are invalid.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should at this point be able to test out a login POST request with a previously created user. If the password and username are correct the response should provide a JWT token as proof of verification. If not you should hit the error message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;On the back-end you should now have an idea how to safely store users credentials as well as how to verify them and providing proof of verification via a JWT. Now locking content behind authentication and providing authorization is a front-end matter and something we won't be getting into today. &lt;/p&gt;

&lt;p&gt;I hope you learned something today and if you have any questions/comments please feel free to reach out. &lt;br&gt;
As always happy coding!&lt;/p&gt;

</description>
      <category>auth</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Robust NodeJS Deployment Architecture</title>
      <author>Mark Smith</author>
      <pubDate>Mon, 14 Dec 2020 01:52:03 +0000</pubDate>
      <link>https://dev.to/mjgs/robust-nodejs-deployment-architecture-5go6</link>
      <guid>https://dev.to/mjgs/robust-nodejs-deployment-architecture-5go6</guid>
      <description>&lt;p&gt;The aim of this post is to succinctly describe an effective and robust architecture for self hosting your NodeJS web applications. I’m going to stay relatively high level, describing the technologies, and components, by the end of it you will have a good idea of what such a system looks like. There is a focus on standard well tested pieces rather than the latest shiny cloud / containerisation offerings. It is well suited for running small to medium size applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_DqjL65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.markjgsmith.com/assets/images/nodejs-web-development-technologies.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_DqjL65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.markjgsmith.com/assets/images/nodejs-web-development-technologies.png" alt="Node.js web development technologies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-the-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Features of the architecture
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Runs on standard VPS hosts &lt;/li&gt;
&lt;li&gt;Possibility to scale&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;Easy to maintain&lt;/li&gt;
&lt;li&gt;Fault tolerant&lt;/li&gt;
&lt;li&gt;Low cost&lt;/li&gt;
&lt;li&gt;Backed up and easy to restore&lt;/li&gt;
&lt;li&gt;Easy machine provisioning&lt;/li&gt;
&lt;li&gt;Easy to deploy code&lt;/li&gt;
&lt;li&gt;Support multiple databases&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-main-components" class="anchor"&gt;
  &lt;/a&gt;
  3 main components
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Load balancer&lt;/li&gt;
&lt;li&gt;Web and API application servers&lt;/li&gt;
&lt;li&gt;Datastore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During it’s life cycle, a client web request travels over the internet and eventually arrives at the load balancer where any SSL/TLS connections are terminated, then re-encrypted using self-signed certs and sent to an available application server. That application server performs the tasks it needs to do, persisting information on a shared datastore. Responses are sent directly from the application servers to the client.&lt;/p&gt;

&lt;p&gt;The SSL/TLS termination happens on the load balancer because it makes managing the certificates much easier, with only a single place to renew, create, update and backup certificates.&lt;/p&gt;

&lt;p&gt;Having a load balancer ensures that you can have several application servers running in parallel, which means you can scale by just adding more application servers, but it also means you can reboot servers without impacting site uptime.&lt;/p&gt;

&lt;p&gt;As for the application servers, you can separate out web servers from API servers, but for ease of maintenance you can also just run both on the same machine on different ports, with a reverse proxy on the machine directing the requests to the right application. In this way you have one discrete unit which makes it much easier to add capacity. In the vaste majority of cases this setup is good enough, though could be optimised later.&lt;/p&gt;

&lt;p&gt;Having a shared datastore is key to being able to run the application servers in parallel. This is a single machine that has a large storage volume mounted. It runs all the databases which write their data to the storage volume. The datastore can also run on a clustered set of machines for high availability, though this adds quite a lot of complexity, so initially it’s probably best to run one machine with good backups, so if anything goes wrong you can be restored and running with a minimum of downtime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technologies" class="anchor"&gt;
  &lt;/a&gt;
  Technologies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.nginx.com"&gt;Nginx&lt;/a&gt; - Load balancer and reverse proxy&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://redis.io"&gt;Redis&lt;/a&gt; - Key/value very fast database often used for storing sessions and caching&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mongodb.com"&gt;Mongodb&lt;/a&gt; - NoSQL database&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postgresql.org"&gt;Postgres&lt;/a&gt; - SQL database&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://letsencrypt.org/getting-started/"&gt;Letsencrypt&lt;/a&gt; certbot - for generating and maintaining certificates&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ubuntu.com"&gt;Linux Ubuntu&lt;/a&gt; - Operating system for all 3 components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pm2.keymetrics.io"&gt;Pm2&lt;/a&gt; - NodeJS process manager, runs the applications, handles logging and a variety of other runtime activities&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rabbitmq.com"&gt;RabbitMQ&lt;/a&gt; - Message queue software very important for fault tolerant backend systems&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chilts/mongodb-queue"&gt;Mongodb-queue&lt;/a&gt; - Message queue implemented via a NodeJS library backed by MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#provisioning-infrastructure" class="anchor"&gt;
  &lt;/a&gt;
  Provisioning infrastructure
&lt;/h2&gt;

&lt;p&gt;You can keep things quite simple in this regard, using a &lt;a href="https://en.m.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;Bash&lt;/a&gt; script for each of the 3 main components. The script would need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install latest OS updates&lt;/li&gt;
&lt;li&gt;Install necessary software&lt;/li&gt;
&lt;li&gt;Configure users and groups&lt;/li&gt;
&lt;li&gt;Write/update software configuration files&lt;/li&gt;
&lt;li&gt;Start and stop various services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some of the important Linux items you would need to know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.m.wikipedia.org/wiki/OpenSSH"&gt;sshd&lt;/a&gt; - server for ssh connections&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.stunnel.org"&gt;stunnel&lt;/a&gt; - creates secure connections, used on datastore for applications without built in SSL - e.g. Redis&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.m.wikipedia.org/wiki/Uncomplicated_Firewall"&gt;ufw&lt;/a&gt; / &lt;a href="https://en.m.wikipedia.org/wiki/Iptables"&gt;iptables&lt;/a&gt; - firewalls&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://smallstep.com/blog/everything-pki.html"&gt;PKI&lt;/a&gt; and creating self-signed certificates&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.tecmint.com/install-logrotate-to-manage-log-rotation-in-linux/"&gt;logrotate&lt;/a&gt; - manage rotating and backing up application log files&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.m.wikipedia.org/wiki/Cron"&gt;cron&lt;/a&gt; - schedule the running of maintenance scripts like backups&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://certbot.eff.org/docs/"&gt;certbot&lt;/a&gt; - generate and renew certs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.m.wikipedia.org/wiki/Rsync"&gt;rsync&lt;/a&gt; - securely synchronize files between machines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s likely that your &lt;a href="https://en.m.wikipedia.org/wiki/Virtual_private_server"&gt;VPS&lt;/a&gt; hosting provider has an API and / or command line tools, making it possible to create a provisioning script that creates a VPS server, rsyncs the bash install script to the machine and runs it. So with a minimum of fuss you can provision fresh servers by running a script, so it’s completely repeatable.&lt;/p&gt;

&lt;p&gt;It’s worth noting that there are modern tools that use containerisation like &lt;a href="https://en.m.wikipedia.org/wiki/Kubernetes"&gt;Kubernetes&lt;/a&gt;, which are very powerful but can get quite complex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-code" class="anchor"&gt;
  &lt;/a&gt;
  Deploying code
&lt;/h2&gt;

&lt;p&gt;This is another place where a simple bash script can be very effective. &lt;/p&gt;

&lt;p&gt;It would need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build your application to a deploy directory&lt;/li&gt;
&lt;li&gt;Backup currently running app&lt;/li&gt;
&lt;li&gt;Rsync the files to the application servers&lt;/li&gt;
&lt;li&gt;Restart the application server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a lot of variety in this area. Many modern workflows that use &lt;a href="https://en.m.wikipedia.org/wiki/CI/CD"&gt;CI/CD systems&lt;/a&gt; use git to clone your entire application &lt;br&gt;
repository to the server, rather than rsyncing just the built files. Requirements vary a lot from project to project.&lt;/p&gt;

&lt;p&gt;The bash script route is great for simplicity, but there are often more manual steps involved, especially if your application has complex configuration. In the early days of a project it’s often good enough.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backups" class="anchor"&gt;
  &lt;/a&gt;
  Backups
&lt;/h2&gt;

&lt;p&gt;Backups are super important. You need to have all the important files backed up and ideally scripts to restore the backups in the event that a component fails and needs to be restored.&lt;/p&gt;

&lt;p&gt;Consider backing up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each deployed application version, along with configuration&lt;/li&gt;
&lt;li&gt;Log files for databases, firewalls&lt;/li&gt;
&lt;li&gt;Certificates&lt;/li&gt;
&lt;li&gt;Contents of all databases&lt;/li&gt;
&lt;li&gt;Configurations for every 3rd party application you are using&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s a good idea to use storage from big cloud providers, they are low cost and have good scripting tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;It’s important to configure your machines securely, set firewalls (local and cloud) appropriately. Always use TLS/SSL for inter machine communication. Follow the security advice from the various pieces of software you install, for example creating different users for specific purposes e.g. application access vs access for backups. Only give the minimum of access rights necessary to perform a given task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#staging-and-production-environments" class="anchor"&gt;
  &lt;/a&gt;
  Staging and production environments
&lt;/h2&gt;

&lt;p&gt;Once the application is running in production, you will benefit a lot from having a staging environment. It’s a replica of the production environment where you can try out new code without being worried to break the live system. Never deploy directly to production, always test it out in staging first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;The infrastructure side of running applications can get quite complex, but there are a lot of advantages to knowing how to construct these setups yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep costs at a minimum&lt;/li&gt;
&lt;li&gt;Be in full control of the infrastructure&lt;/li&gt;
&lt;li&gt;Be able to deploy anywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s also worth experimenting with integrating &lt;a href="https://serverless.css-tricks.com/about"&gt;serverless&lt;/a&gt; technologies for aspects that are very high load, the low cost and high performance might be worth the portability trade-off, but be aware that a move might require rewriting parts of your application should you need to change providers.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/markjgsmith"&gt;@markjgsmith&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://blog.markjgsmith.com/about"&gt;I’m currently available for hire&lt;/a&gt;&lt;/em&gt; - Consider hiring me!&lt;/p&gt;

&lt;p&gt;If you liked this article you might like adding my &lt;a href="https://blog.markjgsmith.com/feed.xml"&gt;blog feed&lt;/a&gt; to your RSS reader, reading my &lt;a href="https://links.markjgsmith.com"&gt;daily linkblog&lt;/a&gt; or signing up for my &lt;a href="https://markjgsmith.substack.com"&gt;weekly newsletter&lt;/a&gt;. :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href="https://blog.markjgsmith.com/2020/11/13/robust-nodejs-deployment-architecture.html"&gt;blog.markjgsmith.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>node</category>
      <category>javascript</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to Use SVGs as Tags in React</title>
      <author>Sarah Shook 💎</author>
      <pubDate>Mon, 14 Dec 2020 00:56:45 +0000</pubDate>
      <link>https://dev.to/shookcodes/how-to-use-svgs-as-tags-in-react-4cbd</link>
      <guid>https://dev.to/shookcodes/how-to-use-svgs-as-tags-in-react-4cbd</guid>
      <description>&lt;p&gt;This article covers how to allow SVGs to be utilized as imported (tagged) components in your React app, which can be used and styled in congruence with imported icon packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-icons.github.io/react-icons/"&gt;React Icons&lt;/a&gt; is a robust icon library that includes hundreds (if not thousands) of pre-formatted icons to use in your React projects. Your most basic needs will be covered. However, more "obscure" icons might not be available, and some don't automatically scale to the same size as other icons. For example, the PHP icons in the React Icon library are much smaller than their counterparts; an SVG is beneficial in this case because you can style its file to have the default size you need to match your imported icons. Also, if you work with specialized platforms (in my case a platform called PowerSchool), they most likely won't be found in the library. &lt;/p&gt;

&lt;p&gt;There are many ways to import SVGs into your project; however, especially when mixing with libraries (like React Icon) where resources are imported as tagged components, it is much more consistent to also use your SVGs in the same way. This is not a hard task to accomplish, but it does require a couple of steps to get things working, so let's begin. &lt;/p&gt;

&lt;p&gt;For this tutorial, we will be using  &lt;a href="https://www.npmjs.com/package/@svgr/webpack"&gt;SVGR&lt;/a&gt;. First, you need to install the package in your project's root directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @svgr/webpack --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once done, you need to edit your webpack.config.js file. This file is found in node_modules/react-scripts/config/webpack.config.js (the node_modules folder is in the root of your project).&lt;/p&gt;

&lt;p&gt;When your webpack.config.js file is opened, you need to place the following line of code (you can omit the comment if you want, but I included it so I don't forget why I added it later if I need to reference it in the future:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  // Display SVGs inline
            {
              test: /\.svg$/,
              use: ['@svgr/webpack'],
            },
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But where do you place the code? That was the trickiest part to figure out. I scrolled through the config file until I found the module section that included 'url-loader'. Here is the 'url-loader' module, followed by the code I added:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; // "url" loader works like "file" loader except that it embeds assets
            // smaller than specified limit in bytes as data URLs to avoid requests.
            // A missing `test` is equivalent to a match.
            {
              test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
              loader: require.resolve('url-loader'),
              options: {
                limit: imageInlineSizeLimit,
                name: 'static/media/[name].[hash:8].[ext]',
              },
            },
            // Display SVGs inline
            {
              test: /\.svg$/,
              use: ['@svgr/webpack'],
            },
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For reference, in my webpack.config.js file, my comment went on line 399, and the intro bracket went on line 400 (followed by the rest of the code).&lt;/p&gt;

&lt;p&gt;Once done, you can now import your SVG to your React app from it's file location:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import PowerSchool from "../image/powerschool.svg";
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then use it as a tag on your page within a function (or class):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import PowerSchool from "../image/powerschool.svg";

export default function About() {
    return (
        &amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;Here is my SVG icon!&amp;lt;/h3&amp;gt;
            &amp;lt;PowerSchool name="PowerSchool" /&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...And voila! Where you may have previously received an error message (if you're like me), the SVG will now show up and you can use inline styles to style it as you need:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AchGeFKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607906589466/n9hjlZeOF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AchGeFKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607906589466/n9hjlZeOF.png" alt="ps.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(If this still doesn't work, try re-starting your development environment to ensure the changes take effect.)&lt;/p&gt;

&lt;p&gt;In conclusion, to get tagged SVG components, you need to install SVGR, add the 'test' and 'use' information to webpack.config.js, and then you can import your SVG images as tagged components, which can be used in parent components that also style library-imported icons. &lt;/p&gt;

&lt;p&gt;If you liked this article, please check out the others I have on &lt;a href="https://blog.shook.codes"&gt;my blog&lt;/a&gt;, and connect with me on &lt;a href="https://twitter.com/shookcodes"&gt;Twitter&lt;/a&gt;.  &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Kill the Caps Lock</title>
      <author>Toms Burgmanis</author>
      <pubDate>Mon, 14 Dec 2020 00:45:19 +0000</pubDate>
      <link>https://dev.to/tomburgs/kill-the-caps-lock-2ih9</link>
      <guid>https://dev.to/tomburgs/kill-the-caps-lock-2ih9</guid>
      <description>&lt;p&gt;On modern keyboards the Caps Lock key is undeniably the least useful key.&lt;/p&gt;

&lt;p&gt;It was fine on the IBM 84-key keyboard where you had CTRL in its place.&lt;br&gt;
Where did we go so wrong?&lt;/p&gt;

&lt;p&gt;It likely has given developers more anger attacks than anything else in existence.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohs81rDuEz9ioJzAA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohs81rDuEz9ioJzAA/giphy.gif" alt="Caps Lock sucks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yet, despite this, on traditional modern keyboards it is sandwiched right between Tab and Shift keys, some of the most used keys.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remap-the-caps-lock" class="anchor"&gt;
  &lt;/a&gt;
  Remap the Caps Lock
&lt;/h2&gt;

&lt;p&gt;You should remap the Caps Lock key.&lt;/p&gt;

&lt;p&gt;It's horrible.&lt;/p&gt;

&lt;p&gt;No one uses it.&lt;/p&gt;

&lt;p&gt;Even in situations you think you would use it, you forget about it and you just hold down shift while typing.&lt;/p&gt;

&lt;p&gt;The key I've remapped it to is CTRL, due to me being a Vim user, and it being the key most commonly used in shortcuts with Tab / Shift (and to honor the IBM 5170 🖖).&lt;/p&gt;

&lt;p&gt;With Caps Lock gone there's no more accidental screaming at your co-workers, and if remapped to CTRL, it is a lot easier to navigate applications with just your keyboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-oriented-keyboards" class="anchor"&gt;
  &lt;/a&gt;
  Programming oriented keyboards
&lt;/h2&gt;

&lt;p&gt;Most developers already use some super funky mechanical keyboards that feel nice to type on for prolonged periods of time and cost way more than they should, but there's certain keyboard designs that are more specifically designed for developer needs.&lt;/p&gt;

&lt;p&gt;One of such keyboards, and my personal favorite, is the &lt;a href="https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard"&gt;Happy Hacking Keyboard&lt;/a&gt; (HHKB for short).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NdX5o6tc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deskthority.net/wiki/images/f/fb/HHKB_Pro_2_-_keyboard_layout_editor_-_final.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NdX5o6tc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deskthority.net/wiki/images/f/fb/HHKB_Pro_2_-_keyboard_layout_editor_-_final.png" alt="HHKB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a lot smaller than normal keyboards.&lt;/p&gt;

&lt;p&gt;In-fact, it has completely removed the Caps Lock, moved CTRL in its place.&lt;br&gt;
Then those madlads proceeded to remove the entire function key row, along with arrow &amp;amp; a few other keys.&lt;/p&gt;

&lt;p&gt;To activate keys such as Caps Lock or function keys, they must be combined with the FN key.&lt;/p&gt;

&lt;p&gt;Along with all that, some other, less used keys, are moved around a bit as well.&lt;/p&gt;

&lt;p&gt;Sounds dreadful, right? Well, you'd be surprised.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Due to CTRL being moved in place of Caps Lock, you will notice that your pinky finger is a lot less strained.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Due to the tilde key being moved it leaves more space for the shift key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Due to you having to combine the FN key with &lt;code&gt;/&lt;/code&gt; / &lt;code&gt;:&lt;/code&gt; / &lt;code&gt;'&lt;/code&gt; / &lt;code&gt;[&lt;/code&gt; to use arrow keys, you will find that it's a lot quicker and less awkward to use them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Topre switches. There's not many mechanical keyboards who use them, and they feel amazing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, as mentioned before, none of the keys are actually gone, you just need to use FN key in combination with other keys to access them.&lt;/p&gt;

&lt;p&gt;There are many more ergonomics &amp;amp; efficiency related reasons why the HHKB keyboard is great for developers, but it's not the only such keyboard.&lt;/p&gt;

&lt;p&gt;In-fact, there's different manufacturers who are producing keyboards with the HHKB &amp;amp; similar layouts, such as ai03 keyboards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Please remap the Caps Lock key.&lt;br&gt;
Please please please.&lt;/p&gt;

&lt;p&gt;Are you also advocating for some keyboard? Please share in the comments!&lt;/p&gt;

&lt;p&gt;Happy keyboarding ⌨️!&lt;/p&gt;

</description>
      <category>vim</category>
      <category>programming</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Docker 101 - For Beginners</title>
      <author>Will Holmes</author>
      <pubDate>Sun, 13 Dec 2020 23:34:20 +0000</pubDate>
      <link>https://dev.to/willholmeswastaken/docker-101-for-beginners-18fi</link>
      <guid>https://dev.to/willholmeswastaken/docker-101-for-beginners-18fi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-it" class="anchor"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;Docker is a containerization platform that bundles your applications and all their dependencies into something called a 'Docker container' so that your application can run agnostic of what environment it is in. This also ensures that your application can run quickly and reliably from each environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f60ApE8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.docker.com/sites/default/files/d8/styles/large/public/2018-11/container-what-is-container.png%3Fitok%3Dvle7kjDj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f60ApE8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.docker.com/sites/default/files/d8/styles/large/public/2018-11/container-what-is-container.png%3Fitok%3Dvle7kjDj" alt="https://www.docker.com/sites/default/files/d8/styles/large/public/2018-11/container-what-is-container.png?itok=vle7kjDj"&gt;&lt;/a&gt;&lt;br&gt;
Credit: &lt;a href="https://www.docker.com/resources/what-container"&gt;https://www.docker.com/resources/what-container&lt;/a&gt; 👆&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-should-i-use-it" class="anchor"&gt;
  &lt;/a&gt;
  When should I use it?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When you want to ship your app across multiple environments and get the same expected behavior consistently on them.&lt;/li&gt;
&lt;li&gt;When you want to minimise the risk of '&lt;strong&gt;it works on my machine&lt;/strong&gt;' development.&lt;/li&gt;
&lt;li&gt;When you want to enable CI/CD within your development teams. Using docker containers means that your build pipelines can all use the same set of instructions to validate new code changes to your applications.&lt;/li&gt;
&lt;li&gt;When you want to enable application development for developers who might not all use the same operating system but experience the same application performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#when-should-i-not-use-it" class="anchor"&gt;
  &lt;/a&gt;
  When should I not use it?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If building a backend API could you split the API into a collection of serverless functions (AWS Lambda's, Azure functions, etc...). This would be much more cost-efficient and speedy than Docker. Due to it's set up but also because Docker will need to run on a dedicated piece of computing power all the time. Whereas serverless only uses compute power when it is needed.&lt;/li&gt;
&lt;li&gt;If you require persistent volumes for data storage, this can be challenging to maintain with Docker.&lt;/li&gt;
&lt;li&gt;An added layer of complexity to host your applications will mean that you need to put more pressure on your hosting machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#how-is-it-used" class="anchor"&gt;
  &lt;/a&gt;
  How is it used?
&lt;/h2&gt;

&lt;p&gt;Firstly for your application, you are going to need to write a 'Dockerfile' at the root of your project. This will contain a set of instructions to tell the Docker agent how to build your container. &lt;/p&gt;

&lt;p&gt;See the example below:&lt;/p&gt;

&lt;p&gt;We pull &lt;strong&gt;from&lt;/strong&gt; '&lt;strong&gt;alpine&lt;/strong&gt;' which is a lightweight linux image to base our container from.&lt;/p&gt;

&lt;p&gt;Then we run a bash command to echo the words 'Hello world!'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;FROM&lt;/span&gt; &lt;span class="nx"&gt;alpine&lt;/span&gt;
&lt;span class="nx"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;echo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save the above file as 'Dockerfile'&lt;/p&gt;

&lt;p&gt;Then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will build the Docker image firstly and give it a tag name of 'hello' and scope the Dockerfile to the root of the directory as we specified the &lt;strong&gt;'.'&lt;/strong&gt; character.&lt;/p&gt;

&lt;p&gt;Then it will run the container and kill it after.&lt;/p&gt;

&lt;p&gt;Which should output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;🎉 &lt;strong&gt;Congratulations!&lt;/strong&gt; 🎉 You've just built your first Docker container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To summarise, Docker is a great way of bundling your applications up for development across multiple environments and enabling multiple developers to work on active app development. It will enable a lot more sophistication in your CI/CD process going forward but, at the cost of a more heavyweight solution (compute required and time spent getting setup). It's important to think about serverless and if it can fit your needs as opposed to containerization. But hopefully this has given you a brief enough insight into Docker that you can start making informed decisions going forward.&lt;/p&gt;

&lt;p&gt;Download and Install Docker from here: &lt;a href="https://docs.docker.com/get-docker/"&gt;https://docs.docker.com/get-docker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documentation: &lt;a href="https://docs.docker.com/engine/reference/commandline/docker/"&gt;https://docs.docker.com/engine/reference/commandline/docker/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>serverless</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The ultimate migration guide to angular-eslint, ESLint and Nx 11</title>
      <author>Lars Gyrup Brink Nielsen</author>
      <pubDate>Sun, 13 Dec 2020 23:30:20 +0000</pubDate>
      <link>https://dev.to/this-is-angular/the-ultimate-migration-guide-to-angular-eslint-eslint-and-nx-11-1eh2</link>
      <guid>https://dev.to/this-is-angular/the-ultimate-migration-guide-to-angular-eslint-eslint-and-nx-11-1eh2</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/CTivHyiTbFw"&gt;Anastasia Taioglou&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Updated to Nx version 11.0.2.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nx version 11 has built-in support for Angular version 11 and ESLint using Nx and &lt;a href="https://github.com/angular-eslint/angular-eslint"&gt;angular-eslint&lt;/a&gt; plugins which add Angular-specific lint rules and component template processing.&lt;/p&gt;

&lt;p&gt;Let's explore different workspace configurations and discuss a few caveats. This guide includes options to use NPM or Yarn, Jest or Karma, as well as Cypress or Protractor. It includes guides both for setting up new Nx workspaces but also for migrating existing Nx workspaces that are either using ESLint or TSLint.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that as of Nx 11, generation schematics are known as &lt;em&gt;generators&lt;/em&gt;, builders are known as &lt;em&gt;executors&lt;/em&gt;, and architect targets are known as &lt;em&gt;targets&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#setting-up-a-new-nx-angular-workspace-with-angulareslint"&gt;Setting up a new Nx Angular workspace with angular-eslint&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#option-1-use-the-empty-workspace-preset"&gt;Option 1: Use the empty workspace preset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#option-2-use-the-angular-workspace-preset"&gt;Option 2: Use the angular workspace preset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-an-existing-nx-10-angular-workspace-using-eslint"&gt;Migrating an existing Nx 10 Angular workspace using ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrating-an-existing-nx-10-angular-workspace-using-tslint"&gt;Migrating an existing Nx 10 Angular workspace using TSLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;It's recommended to use Node.js 12 for Nx 11.&lt;/li&gt;
&lt;li&gt;This guide assumes that Nx CLI version 11.x is installed globally.&lt;/li&gt;
&lt;li&gt;Install Angular CLI version 11.x globally just in case.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-a-new-nx-angular-workspace-with-angulareslint" class="anchor"&gt;
  &lt;/a&gt;
  Setting up a new Nx Angular workspace with angular-eslint
&lt;/h1&gt;

&lt;p&gt;In this use case, we create a new Nx workspace. We can either use the &lt;code&gt;empty&lt;/code&gt; workspace preset or the &lt;code&gt;angular&lt;/code&gt; workspace preset.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#option-1-use-the-empty-workspace-preset" class="anchor"&gt;
  &lt;/a&gt;
  Option 1: Use the empty workspace preset
&lt;/h2&gt;

&lt;p&gt;Using the &lt;code&gt;empty&lt;/code&gt; workspace preset, we use &lt;code&gt;workspace.json&lt;/code&gt; version 2 which is compatible with Nx plugins targeting Nx 11 or later.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate an Nx workspace.&lt;br&gt;
First, let's create a minimal Nx workspace.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=empty --no-nx-cloud --package-manager=npm
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=empty --no-nx-cloud --package-manager=yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set base branch for &lt;code&gt;affected&lt;/code&gt; commands.&lt;br&gt;
If you've been keeping up in 2020, the default branch of your Git repository is &lt;code&gt;main&lt;/code&gt;. However, as of Nx version 11.0.2, the base branch for comparison is still set to &lt;code&gt;master&lt;/code&gt;, regardless of your default Git settings.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;main&lt;/code&gt; default branch:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f nx.json -e "this.affected.defaultBase = 'main';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure workspace package manager.&lt;br&gt;
When Nx installs packages, it can use different package managers, but we have to tell it to do so.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.cli.packageManager = 'npm';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.cli.packageManager = 'yarn';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete TSLint.&lt;br&gt;
Nx includes TSlint by default. Now that it's fully end-of-life, it's time to move on. Delete the &lt;code&gt;tslint&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall tslint
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove tslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;code&gt;@nrwl/angular&lt;/code&gt; package as a development dependency.&lt;br&gt;
To be able to generate Angular projects, configurations, and classes, we need to install the &lt;code&gt;@nrwl/angular&lt;/code&gt; package. For most packages, we should default to using &lt;code&gt;nx add &amp;lt;package-name&amp;gt;&lt;/code&gt;, but for &lt;code&gt;@nrwl/angular&lt;/code&gt; in an Nx workspace using the &lt;code&gt;empty&lt;/code&gt; preset, this doesn't work. Instead, we'll install it manually.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @nrwl/angular
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev @nrwl/angular
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create generators configuration.&lt;br&gt;
Assign empty objects to the sub-properties of the &lt;code&gt;generators&lt;/code&gt; property in &lt;code&gt;workspace.json&lt;/code&gt; matching generator names. This will hold default values for the generators which we will configure in the following steps.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators = { '@nrwl/angular': { application: {}, library: {} } };"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable Angular strict mode.&lt;br&gt;
We prefer strict configurations for TypeScript and Angular. We enable strict mode for Angular application and library projects.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.strict = true;"
npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].library.strict = true;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use ESLint as linter.&lt;br&gt;
We configure ESLint as the default linter for all Angular application and library projects. This includes the &lt;code&gt;angular-eslint&lt;/code&gt; plugins.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.linter = 'eslint';"
npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].library.linter = 'eslint';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure unit test runner.&lt;br&gt;
Nx has built-in support for the Jest and Karma testing frameworks for Angular application and library projects.&lt;/p&gt;

&lt;p&gt;Use Jest:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.unitTestRunner = 'jest';"
npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].library.unitTestRunner = 'jest';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Use Karma:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.unitTestRunner = 'karma';"
npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].library.unitTestRunner = 'karma';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure end-to-end test runner.&lt;br&gt;
Nx has built-in support for the Cypress and Protractor end-to-end testing frameworks for Angular application projects.&lt;/p&gt;

&lt;p&gt;Use Cypress:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.e2eTestRunner = 'cypress';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Use Protractor:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.generators['@nrwl/angular'].application.e2eTestRunner = 'protractor';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular application project.&lt;br&gt;
Because of our generators configuration, Angular application and library projects will be generated using ESLint and &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:application --name=booking-app --prefix=booking --tags="type:app,scope:booking" --no-interactive
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We should also add project tags to the generated end-to-end testing project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f nx.json -e "this.projects['booking-app-e2e'].tags = ['type:e2e','scope:booking'];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use strict Angular build budgets.&lt;br&gt;
As of Nx version 11.0.2, the Angular build budgets do not adjust according to Angular strict mode. Let's use the same limits as Angular CLI 11 strict mode.&lt;/p&gt;

&lt;p&gt;The main bundle is set to warn at 500 KB and fail at 1 MB. Component styles are set to warn at 2 KB and fail at 4 KB.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f workspace.json -e "this.projects['booking-app'].targets.build.configurations.production.budgets = [{ type: 'initial', maximumWarning: '500kb', maximumError: '1mb' }, { type: 'anyComponentStyle', maximumWarning: '2kb', maximumError: '4kb' }];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete Codelyzer.&lt;br&gt;
Angular CLI version 11 includes Codelyzer by default when generating a workspace or an Angular application project. Now that TSlint is fully end-of-life, it's time to move on. Delete the &lt;code&gt;codelyzer&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall codelyzer
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove codelyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular workspace library.&lt;br&gt;
To make sure that our configurations also work for Angular libraries, we create a workspace library.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:library --name=feature-flight-search --directory=booking --prefix=booking --tags="type:feature,scope:booking" --buildable --no-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that linting works.&lt;br&gt;
Run the &lt;code&gt;lint&lt;/code&gt; target on all projects to verify that ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx run-many --target=lint --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have now created an Nx workspace with an Angular application project and an Angular library workspace project. By using the &lt;code&gt;empty&lt;/code&gt; workspace preset, we use version 2 of the Nx workspace configuration which uses the terms &lt;em&gt;executors&lt;/em&gt;, &lt;em&gt;generators&lt;/em&gt;, and &lt;em&gt;targets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;workspace.json&lt;/code&gt; we can verify that the &lt;code&gt;lint&lt;/code&gt; targets use the &lt;code&gt;@nrwl/linter:eslint&lt;/code&gt; executor.&lt;/p&gt;

&lt;p&gt;The base &lt;code&gt;.eslintrc.json&lt;/code&gt; configuration should mention the &lt;code&gt;@nrwl/nx/typescript&lt;/code&gt; ESLint plugin. Open the &lt;code&gt;.eslintrc.json&lt;/code&gt; files in the Angular application and library projects to verify that the &lt;code&gt;@nrwl/nx/angular&lt;/code&gt;, &lt;code&gt;@nrwl/nx/angular-template&lt;/code&gt;, and &lt;code&gt;@angular-eslint/template/process-inline-templates&lt;/code&gt; ESLint plugins are enabled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#option-2-use-the-angular-workspace-preset" class="anchor"&gt;
  &lt;/a&gt;
  Option 2: Use the angular workspace preset
&lt;/h2&gt;

&lt;p&gt;As of Nx version 11.0.2, the &lt;code&gt;angular&lt;/code&gt; workspace preset generates the initial Angular application project without &lt;code&gt;angular-eslint&lt;/code&gt; and generates the initial application and end-to-end testing projects without taking these parameters into account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create-application&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e2e-test-runner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-interactive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unit-test-runner&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nx will prompt us for a linter, but it will be ignored and fall back on the default linter which is ESLint. Unfortunately without &lt;code&gt;angular-eslint&lt;/code&gt;. See &lt;a href="https://github.com/nrwl/nx/issues/4272"&gt;Nx issue #4272&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because of this, we have to delete the initial projects, configure schematics and regenerate the Angular application and end-to-end testing projects.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate an Nx Angular workspace.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --linter=eslint --no-nx-cloud --style=css --package-manager=npm
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --linter=eslint --no-nx-cloud --style=css --package-manager=yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set base branch for &lt;code&gt;affected&lt;/code&gt; commands.&lt;br&gt;
If you've been keeping up in 2020, the default branch of your Git repository is &lt;code&gt;main&lt;/code&gt;. However, as of Nx version 11.0.2, the base branch for comparison is still set to &lt;code&gt;master&lt;/code&gt;, regardless of your default Git settings.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;main&lt;/code&gt; default branch:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f nx.json -e "this.affected.defaultBase = 'main';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure workspace package manager.&lt;br&gt;
When Nx installs packages, it can use different package managers, but we have to tell it to do so.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.cli.packageManager = 'npm';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.cli.packageManager = 'yarn';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete Codelyzer and TSlint.&lt;br&gt;
Nx version 11 includes Codelyzer by default when using the &lt;code&gt;angular&lt;/code&gt; workspace preset. Now that TSlint is fully end-of-life, it's time to move on. Delete the &lt;code&gt;codelyzer&lt;/code&gt; and &lt;code&gt;tslint&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall codelyzer tslint
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove codelyzer tslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable Angular strict mode.&lt;br&gt;
We prefer strict configurations for TypeScript and Angular. We enable strict mode for Angular application and library projects.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular:application'].strict = true;"
npx json -I -f angular.json -e "this.schematics['@nrwl/angular:library'].strict = true;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure unit test runner.&lt;br&gt;
Nx has built-in support for the Jest and Karma testing frameworks for Angular application and library projects.&lt;/p&gt;

&lt;p&gt;Use Jest:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].application.unitTestRunner = 'jest';"
npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].library.unitTestRunner = 'jest';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Use Karma:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].application.unitTestRunner = 'karma';"
npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].library.unitTestRunner = 'karma';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure end-to-end test runner.&lt;br&gt;
Nx has built-in support for the Cypress and Protractor end-to-end testing frameworks for Angular application projects.&lt;/p&gt;

&lt;p&gt;Use Cypress:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].application.e2eTestRunner = 'cypress';"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Use Protractor:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.schematics['@nrwl/angular'].application.e2eTestRunner = 'protractor';"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete application and end-to-end testing projects.&lt;br&gt;
As mentioned in the introduction, the &lt;code&gt;angular&lt;/code&gt; workspace preset generates the initial projects without taking our preferences into acocunt, so we have to delete them&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate remove booking-app-e2e
nx generate remove booking-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular application project.&lt;br&gt;
Because of our generators configuration, Angular application and library projects will be generated using ESLint and &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:application --name=booking-app --prefix=booking --tags="type:app,scope:booking" --no-interactive
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We should also add project tags to the generated end-to-end testing project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f nx.json -e "this.projects['booking-app-e2e'].tags = ['type:e2e','scope:booking'];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use strict Angular build budgets.&lt;br&gt;
As of Nx version 11.0.2, the Angular build budgets do not adjust according to Angular strict mode. Let's use the same limits as Angular CLI 11 strict mode.&lt;/p&gt;

&lt;p&gt;The main bundle is set to warn at 500 KB and fail at 1 MB. Component styles are set to warn at 2 KB and fail at 4 KB.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx json -I -f angular.json -e "this.projects['booking-app'].architect.build.configurations.production.budgets = [{ type: 'initial', maximumWarning: '500kb', maximumError: '1mb' }, { type: 'anyComponentStyle', maximumWarning: '2kb', maximumError: '4kb' }];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular workspace library.&lt;br&gt;
To make sure that our configurations also work for Angular libraries, we create a workspace library.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:library --name=feature-flight-search --directory=booking --prefix=booking --tags="type:feature,scope:booking" --buildable --no-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete Codelyzer.&lt;br&gt;
Angular CLI version 11 includes Codelyzer by default when generating a workspace or an Angular application project, so we have to delete it again.&lt;br&gt;
Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall codelyzer
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove codelyzer
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that linting works.&lt;br&gt;
Run the &lt;code&gt;lint&lt;/code&gt; target on all projects to verify that ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx run-many --target=lint --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have now created an Nx workspace with an Angular application project and an Angular library workspace project. By using the &lt;code&gt;angular&lt;/code&gt; workspace preset, we use version 1 of the Nx workspace configuration which is exactly the same as what Angular CLI uses. It still uses the terms &lt;em&gt;builders&lt;/em&gt;, &lt;em&gt;schematics&lt;/em&gt;, and &lt;em&gt;architect targets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;angular.json&lt;/code&gt; we can verify that the &lt;code&gt;lint&lt;/code&gt; targets use the &lt;code&gt;@nrwl/linter:eslint&lt;/code&gt; executor.&lt;/p&gt;

&lt;p&gt;The base &lt;code&gt;.eslintrc.json&lt;/code&gt; configuration should mention the &lt;code&gt;@nrwl/nx/typescript&lt;/code&gt; ESLint plugin. Open the &lt;code&gt;.eslintrc.json&lt;/code&gt; files in the Angular application and library projects to verify that the &lt;code&gt;@nrwl/nx/angular&lt;/code&gt;, &lt;code&gt;@nrwl/nx/angular-template&lt;/code&gt;, and &lt;code&gt;@angular-eslint/template/process-inline-templates&lt;/code&gt; ESLint plugins are enabled.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#migrating-an-existing-nx-10-angular-workspace-using-eslint" class="anchor"&gt;
  &lt;/a&gt;
  Migrating an existing Nx 10 Angular workspace using ESLint
&lt;/h1&gt;

&lt;p&gt;If we have an existing Nx workspace, we are able to generate &lt;em&gt;new&lt;/em&gt; Angular application and library projects using ESLint with &lt;code&gt;angular-eslint&lt;/code&gt;. However, a migration from TSLint to ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; in an Nx workspace is not available yet.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create Nx 10 workspace with &lt;code&gt;angular&lt;/code&gt; preset.&lt;br&gt;
For demonstration purposes, we generate a new Nx Angular workspace with a single application.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init nx-workspace@10 nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --strict --no-nx-cloud --style=css --package-manager=npm --linter=eslint
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn global add create-nx-workspace@10
create-nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --strict --no-nx-cloud --style=css --package-manager=yarn --linter=eslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular workspace library.&lt;br&gt;
To have a slightly more realistic example, we also generate an Angular workspace library project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:library --name=feature-flight-search --directory=booking --prefix=booking --tags="type:feature,scope:booking" --buildable --no-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrate to Nx 11.&lt;br&gt;
When updating to Nx 11, workspaces using ESLint will be migrated to also use &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx migrate @nrwl/workspace
npm install
nx migrate --run-migrations=migrations.json
npm install
rm migrations.json
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx migrate @nrwl/workspace
yarn install
nx migrate --run-migrations=migrations.json
yarn install
rm migrations.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that linting works.&lt;br&gt;
Run the &lt;code&gt;lint&lt;/code&gt; target on all projects to verify that ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx run-many --target=lint --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#migrating-an-existing-nx-10-angular-workspace-using-tslint" class="anchor"&gt;
  &lt;/a&gt;
  Migrating an existing Nx 10 Angular workspace using TSLint
&lt;/h1&gt;

&lt;p&gt;As of Nx version 11.0.2, Nx hasn't got schematics for Nx Angular workspaces using TSLint to migrate to ESLint with angular-eslint.&lt;/p&gt;

&lt;p&gt;Instead, we will use &lt;code&gt;angular-eslint&lt;/code&gt;'s TSLint to ESLint migration schematics and perform some manual configurations to match that of a fully migrated Nx Angular workspace using ESLint with &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this example, we will use Nx' default test runners for the &lt;code&gt;angular&lt;/code&gt; workspace preset. Currently, this means Cypress and Jest. For Protractor and Karma, only the configuration for the end-to-end test project will differ. Consider generating a new Nx workspace with Karma, Protractor, and ESLint as described elsehwere in this article to compare ESLint configurations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the &lt;code&gt;angular&lt;/code&gt; preset used in this guide uses &lt;code&gt;angular.json&lt;/code&gt;. The angular-eslint migrations do not work for Nx workspaces using &lt;code&gt;workspace.json&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create Nx 10 workspace using the &lt;code&gt;angular&lt;/code&gt; preset.&lt;br&gt;
First we create a new Nx 10 workspace as an example. If you already have an existing workspace, adjust the following migration steps to your own workspace.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init nx-workspace@10 nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --strict --no-nx-cloud --style=css --package-manager=npm --linter=tslint
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn global add create-nx-workspace@10
create-nx-workspace nrwl-airlines --npm-scope=nrwl-airlines --preset=angular --app-name=booking-app --strict --no-nx-cloud --style=css --package-manager=yarn --linter=tslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate an Angular workspace library.&lt;br&gt;
This libary project is also for demonstration purposes. This step is not needed if you have an existing Nx workspace.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @nrwl/angular:library --name=feature-flight-search --directory=booking --prefix=booking --tags="type:feature,scope:booking" --buildable --no-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrate to Nx 11.&lt;br&gt;
This is actually an optional step. All of the following steps work exactly the same for Nx 10.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx migrate @nrwl/workspace
npm install
nx migrate --run-migrations=migrations.json
npm install
rm migrations.json
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx migrate @nrwl/workspace
yarn install
nx migrate --run-migrations=migrations.json
yarn install
rm migrations.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migrate to &lt;code&gt;angular-eslint&lt;/code&gt;.&lt;br&gt;
First, we temporarily rename &lt;code&gt;tsconfig.base.json&lt;/code&gt; to &lt;code&gt;tsconfig.json&lt;/code&gt; because the &lt;code&gt;angular-eslint&lt;/code&gt; migrations aren't configured for solution-style TypeScript configurations which Nx uses since version 10.0.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv tsconfig.base.json tsconfig.json
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we run &lt;code&gt;angular-eslint&lt;/code&gt; schematics to install necessary development dependencies such as &lt;code&gt;eslint-plugin-*&lt;/code&gt;, &lt;code&gt;@angular-eslint/*&lt;/code&gt;, and &lt;code&gt;@typescript-eslint/*&lt;/code&gt; packages.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx add @angular-eslint/schematics
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This might downgrade the version of &lt;code&gt;eslint&lt;/code&gt; already installed by Nx. If this happens, make sure to keep the version installed by Nx. For example the following&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev eslint@7.10.0
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add eslint@7.10.0
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Next, we run the &lt;code&gt;angular-eslint&lt;/code&gt; TSLint to ESLint migration for each Angular application and library project in our workspace.&lt;/p&gt;

&lt;p&gt;In this step, you might see warnings like the following, depending on your TSLint rules:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WARNING: Within "tslint.json", the following 1 rule(s) did not have known converters in https://github.com/typescript-eslint/tslint-to-eslint-config

  - nx-enforce-module-boundaries

You will need to decide on how to handle the above manually, but everything else has been handled for you automatically.
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the case of the &lt;code&gt;nx-enforce-module-boundaries&lt;/code&gt; rule which is the only rule giving us warnings when using the example workspace generated by these steps, don't worry about them as we will keep our root TSLint configuration file until the very last step. This is the lint rules used by the &lt;code&gt;nx workspace-lint&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;For ESLint, this rule is called &lt;code&gt;@nrwl/nx/enforce-module-boundaries&lt;/code&gt; and we will add it to our root ESLint configuration in one of the following steps.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx generate @angular-eslint/schematics:convert-tslint-to-eslint booking-app
nx generate @angular-eslint/schematics:convert-tslint-to-eslint booking-app-e2e
nx generate @angular-eslint/schematics:convert-tslint-to-eslint booking-feature-flight-search
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Finally, we revert the temporary renaming of &lt;code&gt;tsconfig.base.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv tsconfig.json tsconfig.base.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure angular-eslint to Nx workspace.&lt;/p&gt;

&lt;p&gt;First, we remove unnecessary development dependencies.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove @angular-eslint/builder @angular-eslint/schematics
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we add required development dependencies.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev @nrwl/eslint-plugin-nx eslint-config-prettier eslint-plugin-cypress
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Next, we configure the root ESLint configuration.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Ignore all files not matched in overrides
npx json -I -f .eslintrc.json -e "this.ignorePatterns = ['**/*'];"
# Support ESLint plugins from `@nrwl/eslint-plugin-nx`
npx json -I -f .eslintrc.json -e "this.plugins = ['@nrwl/nx'];"
# Include tsx files
# Can be left out from an Angular-only workspace
npx json -I -f .eslintrc.json -e "this.overrides[0].files = ['*.ts', '*.tsx'];"
# Match all TypeScript project configuration files
npx json -I -f .eslintrc.json -e "this.overrides[0].parserOptions.project = './tsconfig.*?.json';"
# This setting is not used by the Nrwl Linter
npx json -I -f .eslintrc.json -e "delete this.overrides[0].parserOptions.createDefaultProgram;"
# Replace `angular-eslint` plugins with the Nx TypeScript ESLint plugin as it uses them internally
npx json -I -f .eslintrc.json -e "this.overrides[0].extends = ['plugin:@nrwl/nx/typescript'];"
# Remove component template rule as this is defined in project-specific ESLint configurations
npx json -I -f .eslintrc.json -e "this.overrides = this.overrides.slice(0, 1);"
# Use Nx JavaScript ESLint plugin for js and jsx files
# Can be left out from an Angular-only workspace
npx json -I -f .eslintrc.json -e "this.overrides = [...this.overrides, { files: ['*.js', '*.jsx'], extends: ['plugin:@nrwl/nx/javascript'], rules: {} }];"
# Remove angular-eslint rules that are added to project-specific ESLint configurations
npx json -I -f .eslintrc.json -e "delete this.overrides[0].rules['@angular-eslint/component-selector'];"
npx json -I -f .eslintrc.json -e "delete this.overrides[0].rules['@angular-eslint/directive-selector'];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The final change for the root ESLint configuration is to apply our workspace lint rules (and any other rules angular-eslint warned you about).&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This is where we configure the workspace lint rules
# Refer to the root TSLint configuration
npx json -I -f .eslintrc.json -e "this.overrides = [{ files: ['*.ts', '*.tsx', '*.js', '*.jsx'], rules: { '@nrwl/nx/enforce-module-boundaries': ['error', { enforceBuildableLibDependency: true, allow: [], depConstraints: [{ sourceTag: '*', onlyDependOnLibsWithTags: ['*'] }] }] } }, ...this.overrides];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now it's time to configure the per-project ESLint configurations. Let's start with the &lt;code&gt;booking-app&lt;/code&gt; project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Add Nx Angular ESLint plugin and the ESLint inline component template processor
npx json -I -f apps/booking-app/.eslintrc.json -e "this.overrides[0].extends = ['plugin:@nrwl/nx/angular', 'plugin:@angular-eslint/template/process-inline-templates'];"
# Match all TypeScript project configuration files
npx json -I -f apps/booking-app/.eslintrc.json -e "this.overrides[0].parserOptions.project = [this.overrides[0].parserOptions.project[0].replace('/tsconfig.app.json', '/tsconfig.*?.json')];"
# This setting is not used by the Nrwl Linter
npx json -I -f apps/booking-app/.eslintrc.json -e "delete this.overrides[0].parserOptions.createDefaultProgram;"
# Use the ESLint component template processor and recommended component template rules from angular-eslint
npx json -I -f apps/booking-app/.eslintrc.json -e "this.overrides[1].extends = ['plugin:@nrwl/nx/angular-template', 'plugin:@angular-eslint/template/recommended'];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Next, we configure ESLint and &lt;code&gt;angular-eslint&lt;/code&gt; for the &lt;code&gt;booking-feature-flight-search&lt;/code&gt; project. We make the same changes as we did for the &lt;code&gt;booking-app&lt;/code&gt; project, except we start by correcting the path to the root ESLint configuration because the project-specific configuration is three folders deep in the workspace.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Correct path to root ESLint configuration
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "this.extends = '../' + this.extends;"
# Add Nx Angular ESLint plugin and the ESLint inline component template processor
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "this.overrides[0].extends = ['plugin:@nrwl/nx/angular', 'plugin:@angular-eslint/template/process-inline-templates'];"
# Match all TypeScript project configuration files
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "this.overrides[0].parserOptions.project = [this.overrides[0].parserOptions.project[0].replace('/tsconfig.lib.json', '/tsconfig.*?.json')];"
# This setting is not used by the Nrwl Linter
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "delete this.overrides[0].parserOptions.createDefaultProgram;"
# Use the ESLint component template processor and recommended component template rules from angular-eslint
npx json -I -f libs/booking/feature-flight-search/.eslintrc.json -e "this.overrides[1].extends = ['plugin:@nrwl/nx/angular-template', 'plugin:@angular-eslint/template/recommended'];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Finally, we configure ESLint for the &lt;code&gt;booking-app-e2e&lt;/code&gt; project.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Use rules recommended by Cypress
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "this.extends = ['plugin:cypress/recommended', this.extends];"
# Delete rule for component templates
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "this.overrides = this.overrides.slice(0, 1);"
# Add rules specifically for the Cypress plugin loader
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "this.overrides = [{ files: ['src/plugins/index.js'], rules: { '@typescript-eslint/no-var-requires': 'off', 'no-undef': 'off' } }, ...this.overrides];"
# Match all TypeScript project configuration files
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "this.overrides[1].parserOptions.project = [this.overrides[1].parserOptions.project[0].replace('/tsconfig.app.json', '/tsconfig.*?.json')];"
# This setting is not used by the Nrwl Linter
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "delete this.overrides[1].parserOptions.createDefaultProgram;"
# Remove Angular declarable rules
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "delete this.overrides[1].rules['@angular-eslint/component-selector'];"
npx json -I -f apps/booking-app-e2e/.eslintrc.json -e "delete this.overrides[1].rules['@angular-eslint/directive-selector'];"
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Open &lt;code&gt;apps/booking-app-e2e/src/support/commands.ts&lt;/code&gt; and put the following comment before the line which says &lt;code&gt;declare namespace Cypress {&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// eslint-disable-next-line @typescript-eslint/no-namespace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the same file, add this coment before the line which says &lt;code&gt;interface Chainabile&amp;lt;Subject&amp;gt; {&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// eslint-disable-next-line @typescript-eslint/no-unused-vars&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Nrwl Linter builder.&lt;br&gt;
The final step is to replace &lt;code&gt;@angular-eslint/builder:lint&lt;/code&gt; with &lt;code&gt;@nrwl/linter:eslint&lt;/code&gt; in our workspace configuration.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Use Nrwl Linter
npx json -I -f angular.json -e "this.projects['booking-app'].architect.lint.builder = '@nrwl/linter:eslint';"
npx json -I -f angular.json -e "this.projects['booking-feature-flight-search'].architect.lint.builder = '@nrwl/linter:eslint';"
npx json -I -f angular.json -e "this.projects['booking-app-e2e'].architect.lint.builder = '@nrwl/linter:eslint';"
# Only lint js and ts files in the end-to-end test project
npx json -I -f angular.json -e "this.projects['booking-app-e2e'].architect.lint.options.lintFilePatterns = [this.projects['booking-app-e2e'].architect.lint.options.lintFilePatterns[0].replace('*.ts', '*.{js,ts}')];"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove Codelyzer and TSLint.&lt;/p&gt;

&lt;p&gt;Using NPM CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall codelyzer tslint
rm tslint.json
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Using Yarn CLI:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn remove codelyzer tslint
rm tslint.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that linting works.&lt;br&gt;
Run the &lt;code&gt;lint&lt;/code&gt; target on all projects to verify that ESLint with &lt;code&gt;angular-eslint&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nx run-many --target=lint --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;empty&lt;/code&gt; preset for an Nx workspace is great, because it uses the new &lt;code&gt;workspace.json&lt;/code&gt; version 2 schema with executors, generators, and targets. We can configure it however we want and it supports &lt;code&gt;angular-eslint&lt;/code&gt; well.&lt;/p&gt;

&lt;p&gt;A new Nx workspace can be created using the &lt;code&gt;angular&lt;/code&gt; preset to keep using the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration. It supports &lt;code&gt;angular-eslint&lt;/code&gt;, but the initial projects are set up incorrectly as of Nx version 11.0.2.&lt;/p&gt;

&lt;p&gt;An existing Nx 10 workspace using ESLint can migrate to &lt;code&gt;angular-eslint&lt;/code&gt; without any issues. As part of migrating to Nx 11, &lt;code&gt;angular-eslint&lt;/code&gt; will be installed and configured for existing projects using ESLint.&lt;/p&gt;

&lt;p&gt;If we have an existing Nx 10 workspace using TSLint, we can migrate to Nx 11 without any issues, but there's not automatic migration from using TSLint to &lt;code&gt;angular-eslint&lt;/code&gt; yet as of Nx version 11.0.2.&lt;/p&gt;

&lt;p&gt;However, there are migrations for Angular CLI workspaces. We can use these as a starting point to install &lt;code&gt;angular-eslint&lt;/code&gt; and create necessary ESLint configuration files and plugins.&lt;/p&gt;

&lt;p&gt;To configure &lt;code&gt;angular-eslint&lt;/code&gt; manually for an Nx workspace, we carefully adjust our ESLint configurations in the same way as a new Nx workspace would. Additionally, we switch to the Nrwl Linter instead of the &lt;code&gt;angular-eslint&lt;/code&gt; builder.&lt;/p&gt;

&lt;p&gt;No matter which combination of technologies we're using, it's possible to get rid of Codelyzer and TSLint today and start using &lt;code&gt;angular-eslint&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Some Angular-specific TSLint rules from Codelyzer do not have corresponding &lt;code&gt;angular-eslint&lt;/code&gt; rules implemented yet. At the time of writing, the missing rules are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;angular-whitespace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contextual-decorator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import-destructuring-spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-unused-css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefer-inline-decorator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-accessibility-alt-text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-accessibility-label-for&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-accessibility-table-scope&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-click-events-have-key-events&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-conditional-complexity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template-no-any&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why should we migrate away from TSLint as fast as possible? On December 1st 2020, TSLint went fully end-of-life. No PRs or issues are accepted ever again. This means that any release of Angular, TypeScript, Node.js, or any of TSLint's dependencies can potentially break TSLint version 6.1.3, the last version to ever be published. TSLint was deprecated 2 years ago.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>nx</category>
      <category>eslint</category>
    </item>
  </channel>
</rss>
