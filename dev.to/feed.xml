<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tips To Become Great Programmer Of This Decade</title>
      <author>Coding</author>
      <pubDate>Tue, 14 Sep 2021 05:52:17 +0000</pubDate>
      <link>https://dev.to/coderzzz/tips-to-become-great-programmer-4gcg</link>
      <guid>https://dev.to/coderzzz/tips-to-become-great-programmer-4gcg</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learn about Node.js - Popular JavaScript Framework ⚡</title>
      <author>Rezaul karim</author>
      <pubDate>Tue, 14 Sep 2021 05:48:06 +0000</pubDate>
      <link>https://dev.to/mrezaulkarim/learn-about-node-js-popular-javascript-framework-43en</link>
      <guid>https://dev.to/mrezaulkarim/learn-about-node-js-popular-javascript-framework-43en</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-nodejs-"&gt;
  &lt;/a&gt;
  What is Node.js ?
&lt;/h2&gt;

&lt;p&gt;Node.js is a server-side JavaScript run-time environment that works cross-platform and is open source. Node.js uses event drive and non-blocking models that make this framework light weight and efficient. Node.js package ecosystem - "NPM" is the world's largest ecosystem of open source libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actually-nodejs-is-"&gt;
  &lt;/a&gt;
  Actually node.js is -
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A platform that allows us to run on a JavaScript computer or server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helps to read, delete and update files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helps to easily communicate with the database.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-is-nodejs-so-popular"&gt;
  &lt;/a&gt;
  Why is Node.js so popular?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It uses JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Very fast (using V7 engine and non-blocking code)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open source package has many large ecosystems such as - NPM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Very good for real time services such as - Chat service.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-know-about-some-features-of-node-js"&gt;
  &lt;/a&gt;
  Let's know about some features of Node JS:
&lt;/h2&gt;

&lt;p&gt;1) Swift: Node that S's library code execution is much faster.&lt;/p&gt;

&lt;p&gt;2) I / 0 Asynchronous and Even-Driven: All APIs are asynchronous which means the server does not wait for the API to back up the data.&lt;/p&gt;

&lt;p&gt;3) Single threaded: Node that uses single threaded model with S event loop.&lt;/p&gt;

&lt;p&gt;4) High Scalable: Node that S uses an event mechanism that allows the server to respond to non-blocking manners that make it scalable.&lt;/p&gt;

&lt;p&gt;5) No buffering: Node that s processing time significantly reduces when uploading audio and video files. So buffering is not.&lt;/p&gt;

&lt;p&gt;6) Open Source: Being open source, Node JS has come up with many amazing models that are used to add better capability to Node JS applications.&lt;/p&gt;

&lt;p&gt;7) License: It is licensed under MIT.&lt;/p&gt;

&lt;p&gt;*Recommended:  &lt;a href="https://mrezaulkarim.com/es6-cheat-sheet/"&gt;JavaScript - ES6 Cheat Sheet | Download PDF&lt;/a&gt; *&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks about programming and coding please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="https://instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find Me on Twitter:   &lt;a href="https://twitter.com/mrezaulkarim_"&gt;@mrezaulkarim_&lt;/a&gt; &lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Amazing Tools for Web Developers 🤩</title>
      <author>Arpit</author>
      <pubDate>Tue, 14 Sep 2021 05:24:30 +0000</pubDate>
      <link>https://dev.to/soniarpit/amazing-tools-for-web-developers-503h</link>
      <guid>https://dev.to/soniarpit/amazing-tools-for-web-developers-503h</guid>
      <description>&lt;p&gt;Web development tools always make our work easy and smooth. As a web developer, I know lots of work is there. That’s why I listed tools that I use all the time. &lt;/p&gt;

&lt;p&gt;Well, there are lots of tools available in the world, so we do not claim this list a complete one. You can share your favorite tools out from the list in the comments section below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-bootstrap-cheatsheet"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://bootstrap-cheatsheet.themeselection.com/"&gt;Bootstrap cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGjdpN-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-1024x538.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGjdpN-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-1024x538.png" alt="Bootstrap cheatsheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best cheat sheet for Bootstrap 5 classes, variable, and mixins. It also helps you to find the difference between Bootstrap 4 and Bootstrap 5 so you can easily migrate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-gitignoreio"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.gitignore.io/"&gt;Gitignore.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rl-wcvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-3-1024x466.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rl-wcvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-3-1024x466.png" alt="Gitignore.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gitignore.io is a web service designed to help you create .gitignore files for your Git repositories. The site has a graphical and command-line method of creating a .gitignore for your operating system, programming language, or IDE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-nibbler"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://nibbler.silktide.com/"&gt;Nibbler&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--al2r-Dp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-5-1024x498.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--al2r-Dp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-5-1024x498.png" alt="nibbler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nibbler is a free tool for testing websites. Enter the address of any website and Nibbler will give you a report scoring the website out of 10 for key areas, including accessibility, SEO, social media, and technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-cssreferenceio"&gt;
  &lt;/a&gt;
  4. &lt;a href="http://cssreference.io/"&gt;CSSreference.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H30W8HUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H30W8HUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-8.png" alt="cssreference.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;cssreference.io is a free visual guide to CSS. It features the most popular properties and explains them with illustrated and animated examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-regex101"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://regex101.com/"&gt;Regex101&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44zc_TED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-14-1024x499.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44zc_TED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/09/image-14-1024x499.png" alt="regex101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application offers both instruction for creating regular expressions and a ready environment for writing and testing expressions. Additionally, after creating an expression, we get a detailed explanation of it. So this is also the best tool from all tools for web developers.&lt;/p&gt;

&lt;p&gt;Check out the other 10 tools here: &lt;a href="https://www.codesnail.com/fantastic-tools-for-web-developers/"&gt;Fantastic Tools for Web Developers That You’re Not Using Yet 🤩&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you &amp;lt;3&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tools</category>
    </item>
    <item>
      <title>10 VS Code extensions every Frontend Developer should Must Use</title>
      <author>Coding</author>
      <pubDate>Tue, 14 Sep 2021 05:22:14 +0000</pubDate>
      <link>https://dev.to/coderzzz/10-vs-code-extensions-every-frontend-developer-should-must-use-fig</link>
      <guid>https://dev.to/coderzzz/10-vs-code-extensions-every-frontend-developer-should-must-use-fig</guid>
      <description>&lt;p&gt;Hello everyone, my name is Vansh and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in! &lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Array.forEach() Method  in JavaScript 🚀</title>
      <author>Shubham Jadhav</author>
      <pubDate>Tue, 14 Sep 2021 05:18:39 +0000</pubDate>
      <link>https://dev.to/dev_shubham/array-foreach-method-in-javascript-4k9d</link>
      <guid>https://dev.to/dev_shubham/array-foreach-method-in-javascript-4k9d</guid>
      <description>&lt;p&gt;How can we iterate array items through a loop in JavaScript ?? &lt;/p&gt;

&lt;p&gt;If you know the above question answer then give the answer in comment section. &lt;/p&gt;

&lt;p&gt;Today we are learning the most important method in JavaScript. &lt;/p&gt;

&lt;p&gt;Array.forEach();&lt;/p&gt;

&lt;p&gt;• What is Array.forEach() &lt;br&gt;
   method ?&lt;br&gt;
 =&amp;gt; In which method we can &lt;br&gt;
   iterate array items through &lt;br&gt;
   a loop it's called &lt;br&gt;
   Array.forEach() method. &lt;/p&gt;

&lt;p&gt;• Syntax of Array.forEach()&lt;br&gt;
 =&amp;gt; arr.forEach((item, index) &lt;br&gt;
    =&amp;gt; { // code here.. })&lt;/p&gt;

&lt;p&gt;This method return a callback function.&lt;/p&gt;

&lt;p&gt;• Example &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2eGWGUBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/408p0t55ft6dtm8rrp8z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2eGWGUBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/408p0t55ft6dtm8rrp8z.jpg" alt="example 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• Explanation &lt;br&gt;
  (1) Let's create an array and give any name as per you but I gave 'arr' as name. &lt;br&gt;
  (2) Now, I used here in next step arr.forEach() method. &lt;br&gt;
  (3) As we know this method return a callback function and this has two parameters 'item' and 'index'as shown above example. &lt;br&gt;
  (4) The forEach method iterate all items like a for loop one by one. &lt;/p&gt;

&lt;p&gt;• Advantages of forEach() method&lt;br&gt;
  (1) It has a clear syntax. &lt;br&gt;
  (2) the forEach method keeps the variables from the callback function bound to the local scope&lt;br&gt;
  (3) The forEach method is less error prone. &lt;/p&gt;

&lt;p&gt;🙏 Thank you for reading... &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A career in web development in 2021</title>
      <author>ShahiLalit</author>
      <pubDate>Tue, 14 Sep 2021 05:11:20 +0000</pubDate>
      <link>https://dev.to/shahilalit/a-career-in-web-development-in-2021-lan</link>
      <guid>https://dev.to/shahilalit/a-career-in-web-development-in-2021-lan</guid>
      <description>&lt;p&gt;&lt;strong&gt;Should I choose Web Development as my career in 2021?&lt;/strong&gt; I bet most of the college students must be asking this question to themselves and to their seniors who are working at some company.&lt;/p&gt;

&lt;p&gt;I won't waste your much time and tell it straight away -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Yes! you should choose web development as your career in 2021".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want a job that gives you a decent salary and a skill that you can use to create other income sources, then&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Yes! you should choose web development as your career in 2021".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You only need 3 things, to begin with, web development:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Laptop
2. Internet
3. Will to learn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all anyone needs to start learning web development. You have to give 1 month to it.&lt;/p&gt;

&lt;p&gt;And I guarantee you that, after one month, you would be able to understand how you create a website from scratch.&lt;/p&gt;

&lt;p&gt;Web development is divided into two parts-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Frontend Development
- Backend Development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#frontend-development"&gt;
  &lt;/a&gt;
  Frontend Development
&lt;/h3&gt;

&lt;p&gt;In front-end development, you would work on the visible part of any website or application. &lt;br&gt;
It means as a front-end developer, you would work on creating the User Interface (UI).&lt;br&gt;
And integrate the Application Programming Interfaces (a.k.a APIs) to complete the user interaction.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#backend-development"&gt;
  &lt;/a&gt;
  Backend Development
&lt;/h3&gt;

&lt;p&gt;In backend development, you would work on creating APIs, which help users to see the data or the content displayed on the frontend UI. &lt;br&gt;
In the backend development, your code adds utility to everything the front-end developer develops. &lt;br&gt;
You would also be responsible for managing the databases for saving the data needed for the website to run and display content.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-interests-you-more"&gt;
  &lt;/a&gt;
  What Interests you more?
&lt;/h3&gt;

&lt;p&gt;So, before starting your web development course you can think of your interest, what would interests you more -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Is it working on the design stuff and developing the UI components for the websites and applications?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Or is it working on the data part, creating the APIs, working with databases &amp;amp; servers?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, that you have decided to do learn web development, and decided to give your 1 month.&lt;/p&gt;

&lt;p&gt;and you want to go into the frontend development path, I would suggest you divide your 1 month into 1-1-2 weeks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- 1 week to learn HTML. 
- 1 week to learn CSS, &amp;amp; 
- 2 weeks to learn JavaScript.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all you need to start.&lt;/p&gt;

&lt;p&gt;Now, once you get comfortable with the above three, you should start looking into popular JavaScript frameworks and libraries.&lt;/p&gt;

&lt;p&gt;Here is a  &lt;a href="https://insights.stackoverflow.com/survey/2021/#section-most-popular-technologies-web-frameworks"&gt;survey by StackOverflow&lt;/a&gt;  for the popular web frameworks and libraries. According to it, React.js is the most popular one, so you could try learning it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ShPgiZVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631028087977/sQnoWbkvR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ShPgiZVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631028087977/sQnoWbkvR.png" alt="Screenshot 2021-09-07 at 8.40.34 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you prefer backend development, then you have a long list of languages that you could learn to start your backend development journey.&lt;/p&gt;

&lt;p&gt;Some of the popular languages out there for backend development are Python, Node.js, Java, .Net, PHP, Ruby, etc.&lt;/p&gt;

&lt;p&gt;If we look at  &lt;a href="https://insights.stackoverflow.com/survey/2021/#section-most-popular-technologies-programming-scripting-and-markup-languages"&gt;another survey by StackOverflow&lt;/a&gt;  for the popular languages used by developers, JavaScript is selected as the most popular language out of all.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jd4GHoOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631028065996/2olmzHNPN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jd4GHoOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631028065996/2olmzHNPN.png" alt="Screenshot 2021-09-07 at 4.11.50 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, the main reason for JavaScript being the most popular language is -&lt;br&gt;
Once you learn JavaScript fundamentals,  you would be able to work on the frontend as well as on the backend development.&lt;/p&gt;

&lt;p&gt;So, that being said, you are still free to use any programming language to learn backend development. And even once you learn JavaScript ( JS ) it is not set in stone that you have to use JS only for the backend development.&lt;br&gt;
When you learn a programming language and the basic fundamental concepts of programming, you would be able to pick up any language out there if you are interested.&lt;/p&gt;

&lt;p&gt;For starting a career as a backend developer you must learn:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data structure and algorithm basics.&lt;/li&gt;
&lt;li&gt;Any programming language of your choice, be it Python, Java, or JavaScript.&lt;/li&gt;
&lt;li&gt;A framework suitable to the programming language of your choice, to make your life easier in developing the APIs.&lt;/li&gt;
&lt;li&gt;Basics of databases.&lt;/li&gt;
&lt;li&gt;Hosting your application and handling servers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a final takeaway, I’d just like to say that in addition to inculcating the required skills, to be successful as a frontend or a backend developer, you need to be dedicated, patient, and hard-working.&lt;/p&gt;

&lt;p&gt;In the end, I would like to emphasize that &lt;strong&gt;"Web Development in 2021 is still a good choice to choose as a career"&lt;/strong&gt;, but to grow with the world, you will have to learn and evolve yourself with new technologies in trend and high demand.&lt;/p&gt;

&lt;p&gt;Later, we will discuss more deeply what to learn specifically in frontend and backend development and how to grow as a Full Stack Developer from a Frontend or a Backend Developer.&lt;/p&gt;

&lt;p&gt;Till then be safe &amp;amp; keep coding...&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;Lalit&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Create a responsive popup modal with CSS &amp; JavaScript</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 14 Sep 2021 05:10:05 +0000</pubDate>
      <link>https://dev.to/michaelburrows/create-a-responsive-popup-modal-with-css-javascript-2l88</link>
      <guid>https://dev.to/michaelburrows/create-a-responsive-popup-modal-with-css-javascript-2l88</guid>
      <description>&lt;p&gt;A popup modal is a UI element that appears in the foreground of a website. They’re usually triggered by the user allowing them to view more information or complete an action without having to navigate to another URL. In this tutorial we’ll be creating a responsive popup modal styled with CSS and JavaScript functionality.&lt;/p&gt;

&lt;p&gt;Let’s get start by creating the required HTML markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"demo-modal"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"dialog"&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"model-inner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal-close"&lt;/span&gt; &lt;span class="na"&gt;data-id=&lt;/span&gt;&lt;span class="s"&gt;"demo-modal"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
      Natus earum velit ab nobis eos. Sed et exercitationem voluptatum omnis
      dolor voluptates. Velit ut ipsam sunt ipsam nostrum. Maiores officia
      accusamus qui sapiente. Dolor qui vel placeat dolor nesciunt quo dolor
      dolores. Quo accusamus hic atque nisi minima.
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal-open"&lt;/span&gt; &lt;span class="na"&gt;data-id=&lt;/span&gt;&lt;span class="s"&gt;"demo-modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Display Modal&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of the content within the &lt;code&gt;demo-modal&lt;/code&gt; is optional and included for the purposes of this tutorial, you could replace with whatever content you like when using this on a real website. There is also a button to trigger the popup and display of the model.&lt;/p&gt;

&lt;p&gt;Note: We’re building this in a way that would allow us to include multiple modals in a single page. We do this by using matching &lt;code&gt;id&lt;/code&gt; / &lt;code&gt;data-id&lt;/code&gt; attributes on each modal and the corresponding open and close buttons.&lt;/p&gt;

&lt;p&gt;Next we’ll tackle the JavaScript functionality starting with an event listener for when users click on the open and close buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;modal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;openModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-close&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;closeModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code detects if the user clicked either the open or close button (based on the button class), then triggers the relevant function. We’ll start with the &lt;code&gt;openModal&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;escClose&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-overlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the &lt;code&gt;closeModal&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;escClose&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-overlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may have noticed an &lt;code&gt;escClose&lt;/code&gt; event listener in the previous two functions. This is so the the modal can be closed by pressing the escape key, here’s the code for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;escClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;closeModal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each key on a keyboard has it’s own unique &lt;code&gt;keyCode&lt;/code&gt; for the “escape” key it’s &lt;code&gt;27&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s all for the JavaScript we can now move onto the CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.modal&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;open&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.model-inner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.modal-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#modal-overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here’s what the finished popup modal looks like once complete:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_vi6HpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rrgab0u61pz2qhmxljp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_vi6HpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rrgab0u61pz2qhmxljp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all for this tutorial. By following along you’ll have learnt how to build a modal popup without having to rely on any external JavasScript plugins or libraries. A full working version of this modal can be found on &lt;a href="https://codepen.io/w3collective/pen/jOBvRgY"&gt;CodePen&lt;/a&gt; and the source code is also available on &lt;a href="https://github.com/w3collective/responsive-popup-modal"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Overcoming the Fear of LOCO(Lines of Coding)</title>
      <author>Riean Esteves</author>
      <pubDate>Tue, 14 Sep 2021 04:26:17 +0000</pubDate>
      <link>https://dev.to/rieesteves/overcoming-the-fear-of-loco-lines-of-coding-2hjh</link>
      <guid>https://dev.to/rieesteves/overcoming-the-fear-of-loco-lines-of-coding-2hjh</guid>
      <description>&lt;p&gt;A little more than 250 lines under font-size of 18pxl,the worse fear rather nightmare for beginners. And if there is a comma or a semi-colon missing, the slightest error of spelling and the whole program goes for a toss. Fear of LOCO (Lines of coding)/ Coding is not exactly a fear but a mindset which sets you feared.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znvNjyVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5begpmyto35j8ynisc7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znvNjyVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5begpmyto35j8ynisc7.jpg" alt="FEAR of a huge program"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Attributes, arguments ,class ,method, objects ,function, parameter's and more....&lt;/strong&gt;&lt;/em&gt; and end-list list of these technical jargons. How frightening are these to hear and understand initially; but gradually with time one can &lt;em&gt;ACE&lt;/em&gt; it and code with &lt;strong&gt;EASE!&lt;/strong&gt; These are building blocks of a code and structure the program efficiently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fear-of-locolines-of-coding"&gt;
  &lt;/a&gt;
  FEAR of LOCO(Lines of Coding)!!!
&lt;/h3&gt;

&lt;p&gt;As a beginner a new IDE( &lt;em&gt;text editors for coding&lt;/em&gt;) with some fancy language and amazing colors fascinating at first as complexity of code increases it increase the fear!&lt;br&gt;
 &lt;em&gt;Now this fear, is it &lt;strong&gt;Fear of length of code? Confused with concepts? thinking its out of ones capability! afraid to mess up the hard work? tendency to error up as having knowledge of too many languages(java, c, python, html, etc)&lt;/strong&gt; whatever the option the bottom line thereafter lies happiness when the code successfully runs at the wink of your eye!&lt;/em&gt; This lost happiness can be easily found if this minor fear is over-come. Coding is not an easy task like having a &lt;em&gt;piece of cake&lt;/em&gt; and one should be in the attitude of &lt;em&gt;"Oh ! This is not my cup of tea !"&lt;/em&gt; , this is where the fear begins in us.&lt;/p&gt;




&lt;p&gt;The Question now arises : &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-overcome-"&gt;
  &lt;/a&gt;
  How do we overcome ????
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.Keep a positive attitude and  well planned structural idea in mind&lt;/strong&gt;&lt;br&gt;
Before one starts to code keep a rough structure jotted down. This will help to keep a track of your work pending/done , also  it will help in building up your self confidence and esteem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Learn coding from Good Resources&lt;/strong&gt;&lt;br&gt;
With Online being  better preferred option rather than the tradition books learning ,there are various open source learning platform's that help you get better in this field&lt;br&gt;
As a beginner / even later these are some sights I find very helpful to learn new ways/styles to clear a concept and to tackle a statement.( &lt;em&gt;*The resources are attached at the end&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Master one Language at a time.&lt;/strong&gt;&lt;br&gt;
Don't be the jack of all and master on none, learn one language either &lt;a href="https://www.w3schools.com/cpp/default.asp"&gt;C++&lt;/a&gt; , &lt;a href="https://www.w3schools.com/java/default.asp"&gt;Java&lt;/a&gt; , &lt;a href="https://www.w3schools.com/python/default.asp"&gt;Python&lt;/a&gt; ;or whichever you feel easy the best. &lt;br&gt;
No one is 100% perfect to learn everything in a short span of time and remember it at the wink of an eye . However there is no harm in re-watching videos or reading articles again to understand a concept. The outcome should be whatever the problem may be one has an ideal technical logic in-order to come up with a solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Don't Worry about the near future&lt;/strong&gt;&lt;br&gt;
Coders usually tend to worry and question themselves with &lt;em&gt;What If?!&lt;/em&gt; This attitude is not very heathy always .Thinking about the future whether a code runs or no will affect one currently typing and having a clear idea set also one can tend to end up with multiple silly typo-errors. It might lead to a break in the flow of the process which eventually can create a mess in your code so &lt;em&gt;Just stay calm and keep typing!!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Begin with Small Steps&lt;/strong&gt;&lt;br&gt;
However experienced one may be , in whichever aspect a small start has always lead to a wonderful turnover. Similarly with coding; Don't just get super-fascinated after learning some concepts and jump to a conclusion you know it all! and try doing something out of hand out of thought and get caught up with fear of LOCO. &lt;br&gt;
Start small by this I mean break the complex problem in simple easy solvable steps &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qj8TXwPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx78zs5fue5jm8eys0uo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qj8TXwPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx78zs5fue5jm8eys0uo.png" alt="Steps "&gt;&lt;/a&gt;&lt;br&gt;
click&lt;a href="https://nickjanetakis.com/blog/breaking-down-problems-is-the-number-1-software-developer-skill"&gt;here to read more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.Google the best companion&lt;/strong&gt;&lt;br&gt;
You know the best answers to the solution is Ok Google!!&lt;br&gt;
Searching and learning via google is no harm but yes one should know the subject and research more and not just 'Ctrl + C' &amp;amp; 'Ctrl + V'. but understand and add you own twist in it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.Reach Out&lt;/strong&gt;&lt;br&gt;
Reach out to the professional/ your peers.&lt;br&gt;
*Teachers/ Professors (School /college/University)&lt;br&gt;
*Peers&lt;br&gt;
*community learning &lt;br&gt;
You lend a hand for help and then reach out to those who seek. A best two way learning process and most helpful way to overcome fear of coding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Coding everyday helps the LOCO fear go Away!&lt;/strong&gt;&lt;br&gt;
Yes indeed, a small amount of coding daily helps you get a better in logical thinking as well as increases your typing speed. Some may find it funny with a bustling busy schedule &lt;em&gt;how can I code everyday?&lt;/em&gt; But if one gets to this practice, there is no fear that can overpower your will power. &lt;/p&gt;




&lt;p&gt;Lastly, LOCO fear isn't a harm ; well unless you overstress, and overthink about the outcome in future . Lines of coding gradually increases with experience and professional status  or work load  so.. break you work , and code with Ease. Remember to overcome LOCO you need to defeat he fear in your mind your hand will automatically work smoothly. As beginners just be a master of one and not a jack of all; it eventually helps you with clear idea of usage of tags parameters etc in your code. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Links to the online resources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bGVkgdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eptqoii4sgva4b9n99op.jpeg" alt="link1"&gt;&lt;/a&gt;  &lt;a href="https://www.codecademy.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxKkT2IO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4pj3f8m8jrw8f8xppdb.png" alt="link2"&gt;&lt;/a&gt;   &lt;a href="https://github.com/"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqs3r6Ce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqgungcyadgruuxaedix.jpg" alt="link3"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codereview</category>
      <category>coding</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Building a Virtual Conference Ticket with Begin, AWS &amp; Puppeteer</title>
      <author>🅲🅰🆁🆃🅴🆁</author>
      <pubDate>Tue, 14 Sep 2021 03:44:47 +0000</pubDate>
      <link>https://dev.to/crtr0/building-a-virtual-conference-ticket-with-begin-aws-puppeteer-hgk</link>
      <guid>https://dev.to/crtr0/building-a-virtual-conference-ticket-with-begin-aws-puppeteer-hgk</guid>
      <description>&lt;p&gt;This year, inspired by the folks at Next.js Conf, I decided to build &lt;a href="https://2021.cascadiajs.com/tickets/140"&gt;virtual tickets&lt;/a&gt; for my conference &lt;a href="https://2021.cascadiajs.com"&gt;CascadiaJS&lt;/a&gt;. It's a fun feature for attendees because they get to help spread the word about an event they're excited about.&lt;/p&gt;

&lt;p&gt;Here is the user flow for attendees choosing to create a virtual ticket:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They click a link to create the virtual ticket.&lt;/li&gt;
&lt;li&gt;This sends them to Github for an OAuth flow.&lt;/li&gt;
&lt;li&gt;On success, Github returns with OAuth code.&lt;/li&gt;
&lt;li&gt;Web app stores success marker in DB for this attendee.&lt;/li&gt;
&lt;li&gt;Web app fires event to generate the virtual ticket image.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's walk through each of these steps!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#0-using-begin-to-build-on-aws"&gt;
  &lt;/a&gt;
  0. Using Begin to build on AWS
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/cascadiajs/cascadiajs-2021"&gt;CascadiaJS 2021 web app&lt;/a&gt; is built on a framework called &lt;a href="http://arc.codes"&gt;Arc&lt;/a&gt; and hosted on AWS via a new platform called &lt;a href="http://begin.com"&gt;Begin&lt;/a&gt;. The combination of Arc and Begin make it easy to build a full-stack web application that takes full advantage of AWS services like Lambda, DynamoDB and SNS without 99% of the boilerplate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-creating-the-github-oauth-link"&gt;
  &lt;/a&gt;
  1. Creating the Github OAuth link.
&lt;/h2&gt;

&lt;p&gt;First, you'll need to go to Github and &lt;a href="https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app"&gt;create an OAuth application&lt;/a&gt;. Once you do this, you'll be provided with a &lt;code&gt;Client ID&lt;/code&gt; and you can create a &lt;code&gt;Client Secret&lt;/code&gt;. Store both of these values in your &lt;a href="https://learn.begin.com/basic/state/env"&gt;environment variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Building the link to kick-off a Github OAuth flow is as simple as constructing the URL below with your &lt;code&gt;Client ID&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="https://github.com/login/oauth/authorize?client_id=${ clientID }"&amp;gt;Get Added to Directory&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-this-sends-them-to-github-for-an-oauth-flow"&gt;
  &lt;/a&gt;
  2. This sends them to Github for an OAuth flow.
&lt;/h2&gt;

&lt;p&gt;When the user lands on this page, they'll see the name of your Github OAuth app and the logo you've uploaded. Make sure these are things that folks will trust. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-on-success-github-returns-with-oauth-code"&gt;
  &lt;/a&gt;
  3. On success, Github returns with OAuth code.
&lt;/h2&gt;

&lt;p&gt;Once the user authorizes this connection, Github will redirect to the &lt;code&gt;Authorization callback URL&lt;/code&gt; that you will have configured and will pass along a &lt;code&gt;code&lt;/code&gt; as a query parameter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-web-app-stores-success-marker-in-db-for-this-attendee"&gt;
  &lt;/a&gt;
  4. Web app stores success marker in DB for this attendee.
&lt;/h2&gt;

&lt;p&gt;In the HTTP function that handles the OAuth callback, we use the code passed in the request to &lt;a href="https://github.com/cascadiajs/cascadiajs-2021/blob/main/src/http/get-home-000view/github.js"&gt;retrieve the public information&lt;/a&gt; for this Github user. We then update the attendees ticket record to store their Github username and avatar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let info = await github(req)
await data.set({ table: 'tickets', ...ticket, github: info.login, avatar: info.avatar })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-web-app-fires-event-to-generate-the-virtual-ticket-image"&gt;
  &lt;/a&gt;
  5. Web app fires event to generate the virtual ticket image.
&lt;/h3&gt;

&lt;p&gt;Finally, the stuff you've &lt;em&gt;really&lt;/em&gt; been waiting for: generating dynamic images!&lt;/p&gt;

&lt;p&gt;First, since this image generation process can take time, I chose to kick-off an asynchronous job using &lt;a href="https://docs.begin.com/en/event-functions/provisioning"&gt;Arc events&lt;/a&gt; which are sugar for more easily using AWS SNS. This way the HTTP functions returns to the user immediately, while imagine generation happens in the background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'ticket-shared'
const payload = { number: ticket.number }
await arc.events.publish({ name, payload })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The event function, when invoked, is provided with the unique ticket number for this attendee. It uses this number to generate the image of virtual ticket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let file = await screenshot({ number })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dig into the &lt;code&gt;screenshot&lt;/code&gt; module, since that's where the magic happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const chromium = require('chrome-aws-lambda')
require('puppeteer-core')

function getBaseUrl() {
  let url
  if (process.env.NODE_ENV === 'testing') {
      url = 'http://localhost:3333'
  }
  else  {
      url = `https://${ process.env.NODE_ENV === 'staging' ? 'staging.' : '' }2021.cascadiajs.com`
  }
  return url
}

module.exports = async function screencap({ number }) {
    let browser
    let baseUrl = getBaseUrl()
    // set-up headless browser
    let height = 628
    let width = 1200
    let deviceScaleFactor = 1
    try {
      browser = await chromium.puppeteer.launch({
        args: chromium.args,
        defaultViewport: {
          height, width, deviceScaleFactor
        },
        executablePath: await chromium.executablePath,
        headless: chromium.headless,
        ignoreHTTPSErrors: true,
      })
      let page = await browser.newPage()
      await page.goto(`${ baseUrl }/tickets/${ number }?social`)
      const file = await page.screenshot()
      await browser.close()
      return file
    } finally {
      if (browser) {
        await browser.close()
      }
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This module uses &lt;code&gt;chrome-aws-lambda&lt;/code&gt; and &lt;code&gt;puppeteer-core&lt;/code&gt; to fire up a headless Chrome browser and navigate to a webpage that dynamically builds a page for the &lt;a href="https://2021.cascadiajs.com/tickets/140?social"&gt;attendee's virtual ticket&lt;/a&gt;. It then takes a screenshot of this webpage and returns the buffer of bytes.&lt;/p&gt;

&lt;p&gt;This is a good time to note that you want to configure the Lambda associated with this event handler to be pretty beefy and not to timeout too quickly. You can accomplish by setting properties in &lt;code&gt;arc.config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@aws
runtime nodejs14.x
timeout 90
memory 3008
@arc
shared false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;shared false&lt;/code&gt; command tells Arc not to build and include code and dependencies from the applications shared folder. This is really important because Lambda has a hard 250MB limit on code/deps and &lt;code&gt;chrome-aws-lambda&lt;/code&gt; and &lt;code&gt;puppeteer-core&lt;/code&gt; gobble up a ton of that space.&lt;/p&gt;

&lt;p&gt;We then save this generated screen to s3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const s3 = new AWS.S3()
    let fileName = `ticket-${ number }.png`
    await s3
      .putObject({
        Bucket: process.env.ARC_STATIC_BUCKET,
        Key : process.env.ARC_STATIC_PREFIX + '/' + fileName,
        ContentType: 'image/png',
        Body: file,
        ACL: 'public-read',
      })
      .promise()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ARC_STATIC_BUCKET&lt;/code&gt; and &lt;code&gt;ARC_STATIC_PREFIX&lt;/code&gt; are automatically available in your app's environment variables thanks to Begin.&lt;/p&gt;

&lt;p&gt;The last step is to attach this beautiful image to the attendee's custom ticketing page. If you go to &lt;a href="https://2021.cascadiajs.com/tickets/140"&gt;my ticketing page&lt;/a&gt; and view the source you'll see &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags for Open Graph and Twitter image URLs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;meta property="og:image" content="${ socialUrl }" /&amp;gt;
    &amp;lt;meta name="twitter:image" content="${ socialUrl }"&amp;gt;
    &amp;lt;meta name="twitter:card" content="summary_large_image"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew! I'm sure I skipped a few steps, but you get the gist of how this works and find this helpful! The source code for the CascadiaJS web app can be found on Github at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cascadiajs/cascadiajs-2021"&gt;https://github.com/cascadiajs/cascadiajs-2021&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>webdev</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Frameworks War</title>
      <author>Farmin F</author>
      <pubDate>Tue, 14 Sep 2021 02:47:25 +0000</pubDate>
      <link>https://dev.to/farminfarzin/frameworks-war-3mak</link>
      <guid>https://dev.to/farminfarzin/frameworks-war-3mak</guid>
      <description>&lt;p&gt;Last year we started building our portal from the scratch and we had the luxury of using any technologies, framework or library that we wanted to.&lt;/p&gt;

&lt;p&gt;We didn't have a lot of time so we just wanted to speed up and write the business logic rather than wasting time on the configuration of tools together. &lt;br&gt;
Our only restriction was the fact that we were all JS devs and we wanted to write JavaScript or TypeScript and also from the DevOps side, we knew we'll use K8s (As much as I love Serverless, unfortunately, it was out from the picture  - Maybe another blog for another time to talk about this).&lt;/p&gt;

&lt;p&gt;We had a list of suggestions and in there we had frameworks or multiple libs working together. We decided to pull out the libraries since we wanted an opinionated framework to give us the power to focus on writing the code for logic from the first day. Of course, there's a trade-off between those approaches as you would have the freedom to choose the best libraries (or the ones that you're comfortable with) or you can just limit yourself to a framework and its conventions/patterns.&lt;/p&gt;

&lt;p&gt;This was very controversial as some people believe in the convention over configurations and some people believe in freedom of using whatever they want and configuring them as they want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfIl_TGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x9s4ea8890b9daoh8ss.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfIl_TGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x9s4ea8890b9daoh8ss.gif" alt='alt=""'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-how-we-could-decide"&gt;
  &lt;/a&gt;
  But How We Could Decide?
&lt;/h2&gt;

&lt;p&gt;We prepared a list of features and considerations that we liked to have from the framework or library and gave them points.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Only Backend/Frontend or Full-Stack&lt;/strong&gt; Some frameworks offer the Frontend in their architecture too, so there's no need to have a separated project but again, you'd be limited to their patterns.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stable Version&lt;/strong&gt; There are a lot of amazing frameworks out there, but not that all of them are production-ready!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Community Support&lt;/strong&gt; You'd be surprised how much this matters. When you face a weird bug and want to scream and leave your job, you can just search it on the internet or open an issue on Github and people will help you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Documentation&lt;/strong&gt; No need to mention how much important it is.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DB Migration&lt;/strong&gt; So this is one of the underrated features that will save your skin. The ability to manage your migrations, revert them, or apply them to new environments.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Debugging&lt;/strong&gt; Easy debugging would save a lot of time from devs and make your delivery pipeline faster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning Curve&lt;/strong&gt; As always, the time constraint is the biggest issue in any product development and this will help for ramping up quickly as you code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing&lt;/strong&gt; There's always a way to test your code with the technology that you want. It depends on what type of testing. I would love to see the framework offering unit testing out of the box but for integration or end-to-end I might go with my solution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Logging&lt;/strong&gt; Any production application needs good logging. Get you out of trouble when your users are reporting bugs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt; How much time we'll spend on the configuration of a project to have it set up? is it high or it's just a matter of running a command?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CLI tooling&lt;/strong&gt; A lot of frameworks offer CLI commands which makes it easy to generate and scaffold a lot of code and saves a lot of time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Backend API protocol&lt;/strong&gt; We were looking for having Restful but some offer Graphql too!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Typescript support&lt;/strong&gt; This was optional when we were making the decision but if I go back, I'd make it required.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Career&lt;/strong&gt; One of my considerations when I want to learn technology X is "what is the future of X?". This time not for me but also the team, would devs be happy when they become experts of that framework? When we want to hire new devs, are they going to be excited working on it?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-which-frameworks"&gt;
  &lt;/a&gt;
  So Which Frameworks?
&lt;/h2&gt;

&lt;p&gt;Our final list of frameworks were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; + &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://koajs.com/"&gt;KoaJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blitzjs.com/"&gt;BlitzJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redwoodjs.com/"&gt;RedwoodJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nestjs.com/"&gt;NestJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sailsjs.com/"&gt;SailsJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adonisjs.com/"&gt;Adonis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#decisions"&gt;
  &lt;/a&gt;
  Decisions
&lt;/h2&gt;

&lt;p&gt;The first decision that we made was around the first item on the list: &lt;code&gt;Only Backend or Full-Stack&lt;/code&gt;.&lt;br&gt;
We wanted to scale and we knew we're going to have multiple web apps consuming our API so we decided to have our Frontend separated. &lt;br&gt;
It was easy, &lt;strong&gt;Next.js&lt;/strong&gt; was the winner since it offers a ton on the frontend and satisfies most of our items on the list.&lt;/p&gt;

&lt;p&gt;Then we took out the ones that didn't have production-ready version. Unfortunately &lt;code&gt;Blitz&lt;/code&gt; and &lt;code&gt;Redwood&lt;/code&gt; got eliminated and it was a pity honestly. I loved RedwoodJS so much that I started doing my side project just because I didn't want to miss learning it.&lt;/p&gt;

&lt;p&gt;Later we got rid of &lt;code&gt;Express + Prisma&lt;/code&gt; because for making it ready we needed to have a lot of configuration and adding a lot of other libraries for future requirements.&lt;/p&gt;

&lt;p&gt;So we had the final list of Frameworks which had 'Stable Version', 'Community Support' and good 'Documentation'. &lt;br&gt;
I'm not going to review those frameworks but as we researched and looked into them, not all of them had good tooling or CLI commands or DB migration management capability.&lt;/p&gt;

&lt;p&gt;Between those we chose &lt;strong&gt;NestJS&lt;/strong&gt;: it had almost all of the points that we wanted, the only issue at that time was Prisma which wasn't production-ready and its migration was experimental but right now after more than a year, we are super happy for the call that we made!&lt;br&gt;
We have scaled 10x on the product side and 4x on the dev side and NestJs scaled very well, plus Prisma released a lot of features and made it easier for us to scale on the DB side.&lt;br&gt;
Talking to devs on the team, they are super happy too. They have learned frameworks (both NextJs and NestJs) that are great for their career!&lt;/p&gt;

</description>
      <category>framework</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Design patterns in Javascript: Publish-Subscribe or PubSub</title>
      <author>Anish Kumar</author>
      <pubDate>Tue, 14 Sep 2021 02:40:42 +0000</pubDate>
      <link>https://dev.to/anishkumar/design-patterns-in-javascript-publish-subscribe-or-pubsub-20gf</link>
      <guid>https://dev.to/anishkumar/design-patterns-in-javascript-publish-subscribe-or-pubsub-20gf</guid>
      <description>&lt;p&gt;What's a design pattern in software engineering? It's a &lt;strong&gt;general repeatable solution&lt;/strong&gt; to a commonly occurring problem in software design. In this article, we'll be looking at one of such common design patterns and see how it can be put to use in real world applications.&lt;/p&gt;

&lt;p&gt;This pattern is referred to as Publish-Subscribe or PubSub. Let's start with the overall notion behind this pattern before writing some code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vyXhT7Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631540738187/qmkcqTo2D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vyXhT7Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631540738187/qmkcqTo2D.png" alt="pubsub.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image above describes the general idea behind this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have a PubSub 'container' that maintains a list of &lt;code&gt;subscribers&lt;/code&gt; (a subscriber is just a function)&lt;/li&gt;
&lt;li&gt;A new subscription can be created by using the &lt;code&gt;subscribe(subscriber)&lt;/code&gt; method, which essentially adds the &lt;code&gt;subscriber&lt;/code&gt; into our PubSub container&lt;/li&gt;
&lt;li&gt;We can use &lt;code&gt;publish(payload)&lt;/code&gt; to call all the existing &lt;code&gt;subscribers&lt;/code&gt; in the PubSub container with &lt;code&gt;payload&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Any specific &lt;code&gt;subscriber&lt;/code&gt; can be removed from the container, at any point in time, using the &lt;code&gt;unsubscribe(subscriber)&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Looking at the points above it's pretty straightforward to come up with a simple implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pubsub.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// this is where we maintain list of subscribers for our PubSub&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// add the subscriber to existing list&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// remove the subscriber from existing list&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// publish payload to existing subscribers by invoking them&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a bit of error handling to this implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pubsub.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not a valid argument for subscribe method, expected a function instead`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not a valid argument for unsubscribe method, expected a function instead`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;We can use this implementation as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PubSub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, elsewhere in the application, we can publish and subscribe using this instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something here&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// home.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hola!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#is-it-useful-in-real-applications"&gt;
  &lt;/a&gt;
  Is it useful in real applications?
&lt;/h2&gt;

&lt;p&gt;Yes. In fact, there are many libraries that use it under the hood and you may not have realized it so far.  Let's take the example of the popular state management library for ReactJS - &lt;strong&gt;Redux&lt;/strong&gt;. Of course, its implementation is not as simple as ours, since it's been implemented to handle many other nuances and use-cases. Nevertheless, the underlying concept remains the same.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href="http://redux.js.org/docs/api/Store.html#store-methods"&gt;methods offered by Redux&lt;/a&gt;, You would see &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;subscribe()&lt;/code&gt; methods which are equivalent to &lt;code&gt;publish()&lt;/code&gt; and &lt;code&gt;subscribe()&lt;/code&gt; methods we implemented above. You usually won't see &lt;code&gt;subscribe()&lt;/code&gt; method getting used directly, this part is abstracted away behind &lt;code&gt;connect()&lt;/code&gt; method offered by react-redux library. You can follow the implementation details &lt;a href="https://github.com/reduxjs/react-redux/blob/4.x/src/components/connect.js#L199"&gt;here&lt;/a&gt; if that interests you. &lt;/p&gt;

&lt;p&gt;In summary, all react components using &lt;code&gt;connect()&lt;/code&gt; method act as subscribers. Any component using &lt;code&gt;dispatch()&lt;/code&gt; acts as the publisher. And that explains why dispatching an action from any component causes all &lt;code&gt;connected&lt;/code&gt; components to rerender. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We'll see how the idea behind PubSub can be extended further to build a state management library like redux from scratch.&lt;/li&gt;
&lt;li&gt;We'll also see how an Event Emitter can be built from scratch, using similar notion as PubSub&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This article has been originally published at &lt;a href="https://stackfull.dev/design-patterns-in-javascript-publish-subscribe-or-pubsub-1"&gt;StackFull.dev&lt;/a&gt;. If you enjoyed reading this, you may want to opt for my &lt;a href="https://stackfull.dev"&gt;newsletter&lt;/a&gt;. It would let me reach out to you whenever I publish a new thought!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>redux</category>
      <category>pubsub</category>
      <category>designpatterns</category>
    </item>
    <item>
      <title>Don't make these DevOps MISTAKES! We made them for you so you don't have to</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Tue, 14 Sep 2021 02:00:30 +0000</pubDate>
      <link>https://dev.to/n3wt0n/don-t-make-this-devops-mistakes-we-made-them-for-you-2ih7</link>
      <guid>https://dev.to/n3wt0n/don-t-make-this-devops-mistakes-we-made-them-for-you-2ih7</guid>
      <description>&lt;p&gt;&lt;strong&gt;DevOps is Hard&lt;/strong&gt;! And there are many common DevOps mistakes new engineers make. &lt;/p&gt;

&lt;p&gt;What if we have a way for you to &lt;strong&gt;avoid those most common mistakes&lt;/strong&gt;?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;One question that I get over and over again is: &lt;strong&gt;&lt;em&gt;How can I get better at DevOps&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;And so I've teamed up with a group of &lt;strong&gt;awesome DevOps experts&lt;/strong&gt; and content creators, and in this video we are gonna be going through some things you need to think about when starting your DevOps career, or even if you're already into DevOps.&lt;/p&gt;

&lt;p&gt;And we are also going through &lt;strong&gt;our mistakes we made&lt;/strong&gt; starting out &lt;strong&gt;so you don't make the same mistakes&lt;/strong&gt; on your DevOps journey.&lt;/p&gt;

&lt;p&gt;🦉We made these devops mistakes in our early career stages, and if you follow our advice you won't make them too.&lt;/p&gt;

&lt;p&gt;🤩This video is the biggest collaboration on CoderDave's channel yet! You will find below all the links to these experts profiles and channels, make sure you check them out after you have finished here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-video"&gt;
  &lt;/a&gt;
  The Video
&lt;/h3&gt;

&lt;p&gt;Alright, let's get into some of the biggest mistakes we made.&lt;/p&gt;

&lt;p&gt;Enjoy the watch!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VaEFosTY7FU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/VaEFosTY7FU"&gt;Link to the video: https://youtu.be/VaEFosTY7FU&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;I hope us talking about our mistakes was valuable for you. We've tried to &lt;strong&gt;share those mistakes&lt;/strong&gt; we made and how to avoid them &lt;strong&gt;so you don't have to make them as well&lt;/strong&gt;, and you can jump start your DevOps career.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below if you have any questions about the points we have covered and go check out the awesome people that contributed to this video, you can find all of their info below.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/LrQRpiPjIwc"&gt;this video here&lt;/a&gt;, in which I've teamed up with another group of DevOps experts and shared their mistakes and how to avoid them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#experts-profiles"&gt;
  &lt;/a&gt;
  Experts profiles
&lt;/h3&gt;

&lt;p&gt;👲🏻 DevOps Experts in this video (appearance order):&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sid-palas-devops-directive"&gt;
  &lt;/a&gt;
  Sid Palas - DevOps Directive
&lt;/h4&gt;

&lt;p&gt;► YouTube: &lt;a href="https://www.youtube.com/c/DevOpsDirective/"&gt;https://www.youtube.com/c/DevOpsDirective/&lt;/a&gt;&lt;br&gt;
► Twitter: &lt;a href="https://twitter.com/sidpalas"&gt;https://twitter.com/sidpalas&lt;/a&gt;&lt;br&gt;
► Website: &lt;a href="https://devopsdirective.com/"&gt;https://devopsdirective.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#viktor-farcic-devops-toolkit"&gt;
  &lt;/a&gt;
  Viktor Farcic - DevOps Toolkit
&lt;/h4&gt;

&lt;p&gt;► YouTube: &lt;a href="https://youtube.com/c/devopstoolkit"&gt;https://youtube.com/c/devopstoolkit&lt;/a&gt;&lt;br&gt;
► Twitter: &lt;a href="https://twitter.com/vfarcic"&gt;https://twitter.com/vfarcic&lt;/a&gt;&lt;br&gt;
► LinkedIn: &lt;a href="https://www.linkedin.com/in/viktorfarcic/"&gt;https://www.linkedin.com/in/viktorfarcic/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#anais-urlichs"&gt;
  &lt;/a&gt;
  Anais Urlichs
&lt;/h4&gt;

&lt;p&gt;► YouTube: &lt;a href="https://www.youtube.com/c/AnaisUrlichs"&gt;https://www.youtube.com/c/AnaisUrlichs&lt;/a&gt;&lt;br&gt;
► Twitter: &lt;a href="https://twitter.com/urlichsanais"&gt;https://twitter.com/urlichsanais&lt;/a&gt;&lt;br&gt;
► Newsletter: &lt;a href="https://anaisurl.com/"&gt;https://anaisurl.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#christian-lempa-the-digital-life"&gt;
  &lt;/a&gt;
  Christian Lempa - The Digital Life
&lt;/h4&gt;

&lt;p&gt;► YouTube: &lt;a href="https://www.youtube.com/thedigitallifetech"&gt;https://www.youtube.com/thedigitallifetech&lt;/a&gt;&lt;br&gt;
► Twitter: &lt;a href="https://twitter.com/christian_tdl"&gt;https://twitter.com/christian_tdl&lt;/a&gt;&lt;br&gt;
► Instagram: &lt;a href="https://www.instagram.com/christian_tdl/"&gt;https://www.instagram.com/christian_tdl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VaEFosTY7FU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>codenewbie</category>
      <category>tips</category>
      <category>experts</category>
    </item>
  </channel>
</rss>
