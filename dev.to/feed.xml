<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Iniciando Machine Learning en Amazon SageMaker</title>
      <author>elizabethfuentes12</author>
      <pubDate>Sat, 02 Oct 2021 21:39:29 +0000</pubDate>
      <link>https://dev.to/elizabethfuentes12/iniciando-machine-learning-en-amazon-sagemaker-3gmh</link>
      <guid>https://dev.to/elizabethfuentes12/iniciando-machine-learning-en-amazon-sagemaker-3gmh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#iniciando-sagemaker-ml"&gt;
  &lt;/a&gt;
  Iniciando Sagemaker ML
&lt;/h2&gt;

&lt;p&gt;En este tutorial te enseñare un poco de Sagemaker usando un ejemplo sencillo de Machine Learning. &lt;/p&gt;

&lt;p&gt;GitHub del tutorial: &lt;a href="https://github.com/elizabethfuentes12/Iniciando_SagemakerML"&gt;https://github.com/elizabethfuentes12/Iniciando_SagemakerML&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#que-es-sagemaker"&gt;
  &lt;/a&gt;
  ¿Que es Sagemaker?
&lt;/h2&gt;

&lt;p&gt;Aprendizaje automático al alcance de cualquier científico de datos y desarrollador. &lt;/p&gt;

&lt;p&gt;Amazon &lt;a href="https://aws.amazon.com/es/sagemaker/"&gt;SageMaker&lt;/a&gt; ayuda a los científicos de datos y a los desarrolladores a preparar, crear, entrenar e implementar con rapidez modelos de aprendizaje automático de alta calidad al poner a disposición un amplio conjunto de capacidades especialmente creadas para el aprendizaje automático.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qv_Tr_BCFCQ"&gt;Video: Introduction to Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auMXnhdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqcb5xw5f4ori9z5yrlz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auMXnhdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqcb5xw5f4ori9z5yrlz.png" alt="sagemaker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#casos-de-uso"&gt;
  &lt;/a&gt;
  Casos de Uso
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pages.awscloud.com/Implementing-Machine-Learning-Solutions-with-Amazon-SageMaker_2019_0722-MCL_OD.html?&amp;amp;trk=sl_card&amp;amp;trkCampaign=NA-FY19-AWS-DIGMKT-WEBINAR-SERIES-July_2019_0722-MCL&amp;amp;sc_channel=el&amp;amp;sc_campaign=pac_2018-2019_exlinks_ondemand_OTT_evergreen&amp;amp;sc_outcome=Product_Adoption_Campaigns&amp;amp;sc_geo=NAMER&amp;amp;sc_country=mult&amp;amp;trkcampaign=wbnrondemand"&gt;Mantenimiento predictivo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/iot/sagemaker-object-detection-greengrass-part-1-of-3/"&gt;Visión artificial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/labeling-data-for-3d-object-tracking-and-sensor-fusion-in-amazon-sagemaker-ground-truth/"&gt;Conducción autónoma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=elRQPCHDBPE&amp;amp;t=4s"&gt;Detección de fraudes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Nlwz4cU68T8"&gt;Predicción de riesgos crediticios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/maximizing-nlp-model-performance-with-automatic-model-tuning-in-amazon-sagemaker/"&gt;Extracción y análisis de datos a partir de documentos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/making-machine-learning-predictions-in-amazon-quicksight-and-amazon-sagemaker/"&gt;Predicción de pérdida de clientes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=A04TT68Bd8A"&gt;Previsión de demanda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/startups/how-dely-uses-amazon-sagemaker-to-deliver-personalized-recipes/"&gt;Recomendaciones personalizadas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fuente y github con modelos: &lt;a href="https://aws.amazon.com/es/sagemaker/getting-started/"&gt;Casos de uso&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#algoritmos-integrados-de-aws-sagemaker"&gt;
  &lt;/a&gt;
  Algoritmos integrados de AWS Sagemaker
&lt;/h2&gt;

&lt;p&gt;Fuente: &lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html"&gt;https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Sagemaker proporciona una serie de algoritmos integrados que ayuda a mejorar la preforma del aprendizaje automático. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tipo&lt;/th&gt;
&lt;th&gt;Tipos de problemas&lt;/th&gt;
&lt;th&gt;Algoritmos&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html#algorithms-built-in-supervised-learning"&gt;Aprendizaje supervisado&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Clasificación binaria/ de varias clases - Regresión - Previción de series temporales&lt;/td&gt;
&lt;td&gt;Linear Learner  - Factorization Machines  - XGBoost  - K-Nearest Neighbors (k-NN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html#algorithms-built-in-unsupervised-learning"&gt;Aprendizaje no supervisado&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ingeniería de características: reducción de la dimensionalidad - Detección de anomalías - Integraciones: convierten objetos de grandes dimensiones en espacio de baja dimensionalidad - Agrupación o agrupación en clústeres - Modelado de temas&lt;/td&gt;
&lt;td&gt;PCA - K-Means - IP Insights - Random Cut Forest (RCF)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html#algorithms-built-in-text-analysis"&gt;Análisis de texto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Clasificación de textos - Traducción automática de Algoritmo - Resumir texto - Texto a voz&lt;/td&gt;
&lt;td&gt;Blazing Tex - Sequence-to-Sequence - LDA - NTM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html#algorithms-built-in-image-processing"&gt;Gema Image Processing&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Clasificación de imágenes y etiquetas múltiple - Detección y clasificación de objetos - Visión artificial&lt;/td&gt;
&lt;td&gt;Image Classification - Semantic Segmentation - Object Detection&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#tutorial-crear-entrenar-e-implementar-un-modelo-de-machine-learning-con-aws-sagemaker"&gt;
  &lt;/a&gt;
  Tutorial Crear, entrenar e implementar un modelo de Machine Learning con AWS Sagemaker
&lt;/h2&gt;

&lt;p&gt;Fuente: &lt;a href="https://aws.amazon.com/es/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/"&gt;https://aws.amazon.com/es/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Siguiendo los siguientes pasos aprenderá a utilizar  Amazon SageMaker para crear, entrenar e implementar un modelo de aprendizaje automático (ML). Para este ejercicio, utilizaremos el conocido algoritmo de aprendizaje automático &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost.html"&gt;XGBoost&lt;/a&gt; el cual esta integrado en Sagemaker. &lt;/p&gt;

&lt;p&gt;En este tutorial, asumirás el rol de un desarrollador de machine learning que trabaja en un banco. Se le solicita desarrollar un modelo de machine learning para predecir si los clientes se inscribirán para un certificado de depósito. El modelo se entrenará con el conjunto de datos de marketing que contiene la información demográfica de los clientes, sus respuestas a los eventos de marketing y los factores externos.&lt;/p&gt;

&lt;p&gt;Los datos se etiquetaron para su conveniencia. Una columna en el conjunto de datos identifica si el cliente está inscrito para algún producto que ofrece el banco. Una versión de este conjunto de datos está disponible para el público en el repositorio de aprendizaje automático a cargo de la Universidad de California, Irvine. Este tutorial implementa un modelo de aprendizaje automático supervisado debido a que los datos están etiquetados. (El aprendizaje no supervisado tiene lugar cuando los conjuntos de datos no están etiquetados).&lt;/p&gt;

&lt;p&gt;En este tutorial, hará lo siguiente:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creará una instancia de bloc de notas&lt;/li&gt;
&lt;li&gt;Preparará los datos&lt;/li&gt;
&lt;li&gt;Entrenará el modelo para aprender de los datos&lt;/li&gt;
&lt;li&gt;Implementará el modelo&lt;/li&gt;
&lt;li&gt;Evaluará el rendimiento de su modelo de aprendizaje automático&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Los recursos creados y utilizados en este tutorial se pueden utilizar en la capa gratuita de AWS. Recuerde completar el Paso 7 y terminar sus recursos. Si su cuenta ha estado activa con estos recursos por más de dos meses, se cobrará menos de 0,50 USD por ella.&lt;/p&gt;

&lt;p&gt;A continuación un diagrama de lo que haremos. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRGaIoPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t87k8m8bylw8qm6gr9hh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRGaIoPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t87k8m8bylw8qm6gr9hh.jpeg" alt="diagrama"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paso-0-que-es-xgboost"&gt;
  &lt;/a&gt;
  Paso 0: ¿Que es XGBoost?
&lt;/h2&gt;

&lt;p&gt;Es una implementación de código abierto popular y eficiente del algoritmo de árboles aumentados de gradientes. La potenciación de gradientes es un algoritmo de aprendizaje supervisado que intenta predecir de forma apropiada una variable de destino mediante la combinación de un conjunto de estimaciones a partir de un conjunto de modelos más simples y más débiles. Funciona bien en competiciones de aprendizaje automático debido a su manejo robusto de una variedad de tipos de datos, relaciones, distribuciones y la variedad de hiperparámetros que puede ajustar. &lt;/p&gt;

&lt;p&gt;Puede usar &lt;strong&gt;XGBoost&lt;/strong&gt; para problemas de &lt;strong&gt;regresión&lt;/strong&gt;, de &lt;strong&gt;clasificación (binaria y multiclase)&lt;/strong&gt; y de &lt;strong&gt;ranking&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Fuente: &lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/xgboost.html"&gt;AWS XGBoost&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Más sobre XGBoost --&amp;gt; &lt;a href="https://www.youtube.com/watch?v=MIPkK5ZAsms"&gt;Boosting - EXPLAINED!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paso-1-abra-la-consola-de-amazon-sagemaker"&gt;
  &lt;/a&gt;
  Paso 1: Abra la consola de Amazon SageMaker
&lt;/h2&gt;

&lt;p&gt;Diríjase a la consola de Amazon SageMaker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eboq0Ami--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbcus8zemmc5w1c02h2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eboq0Ami--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbcus8zemmc5w1c02h2j.png" alt="sage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abra &lt;strong&gt;SageMaker&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paso-2-cree-una-instancia-de-bloc-de-notas-de-amazon-sagemaker"&gt;
  &lt;/a&gt;
  Paso 2: Cree una instancia de bloc de notas de Amazon SageMaker
&lt;/h2&gt;

&lt;p&gt;En este paso, creará una instancia de bloc de notas de Amazon SageMaker. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2a"&gt;
  &lt;/a&gt;
  2.a
&lt;/h3&gt;

&lt;p&gt;Abra &lt;strong&gt;notebook instances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2W-Sd2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yclz3t9cwe8qhsebtwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2W-Sd2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yclz3t9cwe8qhsebtwh.png" alt="dos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;y seleccione Create notebook Instance en la parte superior derecha&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_MCqqDvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9t4k7s14mzqagv9ryjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MCqqDvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9t4k7s14mzqagv9ryjw.png" alt="dosa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2b"&gt;
  &lt;/a&gt;
  2b.
&lt;/h3&gt;

&lt;p&gt;En la página &lt;strong&gt;Crear instancia de bloc de notas&lt;/strong&gt;, escriba un nombre en el campo &lt;strong&gt;Nombre de la instancia de bloc de notas&lt;/strong&gt;. Este tutorial utiliza &lt;strong&gt;MySageMakerInstance&lt;/strong&gt; como nombre de la instancia, pero puede elegir un nombre diferente si lo desea.&lt;/p&gt;

&lt;p&gt;Para este tutorial, puede mantener el &lt;strong&gt;Tipo de instancia de bloc de notas&lt;/strong&gt; predeterminado &lt;strong&gt;ml.t2.medium&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXoZusq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fltcglgo8s3wz1cd38d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXoZusq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fltcglgo8s3wz1cd38d.png" alt="2b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para permitir que la instancia de bloc de notas acceda a Amazon S3 y pueda cargar datos de manera segura en este servicio, se debe especificar un rol de IAM. En el campo &lt;strong&gt;Rol de IAM&lt;/strong&gt;, elija &lt;strong&gt;Crear un nuevo rol&lt;/strong&gt; para que Amazon SageMaker cree un rol con los permisos necesarios y lo asigne a su instancia. De forma alternativa, puede elegir un rol de IAM existente en su cuenta para este fin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8N78BGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abzzu1dgsbtaw36w4w6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8N78BGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abzzu1dgsbtaw36w4w6b.png" alt="2b2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2c"&gt;
  &lt;/a&gt;
  2c.
&lt;/h3&gt;

&lt;p&gt;En el cuadro &lt;strong&gt;Crear un rol de IAM&lt;/strong&gt;, seleccione &lt;strong&gt;Cualquier bucket de S3&lt;/strong&gt;. Esto permite que su instancia de Amazon SageMaker acceda a todos los buckets de S3 de su cuenta. Más adelante en este tutorial, creará un nuevo bucket de S3. Sin embargo, si ya cuenta con un bucket que desea utilizar, seleccione &lt;strong&gt;Buckets de S3 específicos&lt;/strong&gt; e indique el nombre del bucket.&lt;/p&gt;

&lt;p&gt;Elija &lt;strong&gt;Crear rol&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yY9oS9c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvd2uq7rlzrf4zhvea46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yY9oS9c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvd2uq7rlzrf4zhvea46.png" alt="2b3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2d"&gt;
  &lt;/a&gt;
  2d.
&lt;/h3&gt;

&lt;p&gt;Tenga en cuenta que Amazon SageMaker creó para usted un rol denominado &lt;strong&gt;AmazonSageMaker-ExecutionRole-&lt;/strong&gt;***.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OC8BZpBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cekwgfiqf8297bbqbgox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OC8BZpBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cekwgfiqf8297bbqbgox.png" alt="2d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para este tutorial, utilizaremos los valores predeterminados en los demás campos. Elija &lt;strong&gt;Crear instancia de bloc de &lt;br&gt;
notas&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2e"&gt;
  &lt;/a&gt;
  2e.
&lt;/h3&gt;

&lt;p&gt;En la página &lt;strong&gt;Instancias de bloc de notas&lt;/strong&gt;, debería ver su nueva instancia de bloc de notas &lt;strong&gt;MySageMakerInstance&lt;/strong&gt; con el estado &lt;strong&gt;Pendiente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4r9VUIAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pve85fqp5zzk7chpi15r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4r9VUIAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pve85fqp5zzk7chpi15r.png" alt="2e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Su instancia de bloc de notas debería pasar del estado &lt;strong&gt;Pendiente&lt;/strong&gt; al estado &lt;strong&gt;En servicio&lt;/strong&gt; en menos de dos minutos.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2f"&gt;
  &lt;/a&gt;
  2f
&lt;/h3&gt;

&lt;p&gt;Para este paso debes detener la instancia en &lt;strong&gt;Acciones&lt;/strong&gt; --&amp;gt; &lt;strong&gt;Detener&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suikvvRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86qp0vn9qx50hyntr9v0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suikvvRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86qp0vn9qx50hyntr9v0.png" alt="detener"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evita que la instancia de SageMaker se quede activa cuando no la estés usando y así no incurrir en gastos innecesarios, para eso debes agregar la &lt;strong&gt;Configuración del ciclo de vida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esto lo puedes realizar al momento de crear la maquina o luego de crearla editando la configuración. &lt;/p&gt;

&lt;p&gt;Entra a la configuración de la instancia dando click sobre su nombre: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--voAzkmBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nnuaxgt6f6edx62fnr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--voAzkmBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nnuaxgt6f6edx62fnr0.png" alt="2f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Presiona editar, arriba a la derecha, en &lt;strong&gt;Configuración adicional&lt;/strong&gt; selecciona &lt;strong&gt;Crear una nueva configuración de ciclo de vida&lt;/strong&gt;, en la ventana emergente nombralo como prefieras y abre la lista de scripts para iniciar: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NiZO_zLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f52ims5xu68bnqex3kn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NiZO_zLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f52ims5xu68bnqex3kn.png" alt="2f2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El link te llevara al GitHub &lt;a href="https://github.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-sample"&gt;amazon-sagemaker-notebook-instance-lifecycle-config-samples&lt;/a&gt; , entra a la carpeta scripts --&amp;gt; auto-stop-idle y copia el codigo en &lt;a href="https://github.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-samples/blob/master/scripts/auto-stop-idle/on-start.sh"&gt;on-start.sh&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Pega el codigo en la ventana emergente y avanza con &lt;strong&gt;Crear una configuración&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xtJe98gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3i6l96ov9wdcvgrci6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xtJe98gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3i6l96ov9wdcvgrci6d.png" alt="2f3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2e"&gt;
  &lt;/a&gt;
  2e
&lt;/h3&gt;

&lt;p&gt;Agrega un repositorio Git a tu instancia. &lt;/p&gt;

&lt;p&gt;En la misma edición del paso anterior, ve al fondo donde dice &lt;strong&gt;Repositorios Git - opcional&lt;/strong&gt;, selecciona &lt;strong&gt;Clone un repositorio Git público en esta instancia de bloc de notas solamente&lt;/strong&gt; y copia el repositorio creado para este ejemplo &lt;a href="https://github.com/elizabethfuentes12/Iniciando_SagemakerML"&gt;Iniciando_SagemakerML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--934VcsJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ino5s875zb2kym8sdcvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--934VcsJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ino5s875zb2kym8sdcvg.png" alt="2e2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finaliza con &lt;strong&gt;Actualizar instancia del bloc de notas&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#paso-3-prepare-los-datos"&gt;
  &lt;/a&gt;
  Paso 3: Prepare los datos
&lt;/h2&gt;

&lt;p&gt;En este paso, utilizará su bloc de notas de Amazon SageMaker a fin de procesar previamente los datos que necesita para entrenar su modelo de aprendizaje automático.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3a"&gt;
  &lt;/a&gt;
  3a.
&lt;/h3&gt;

&lt;p&gt;En la página &lt;strong&gt;Instancias de bloc de notas&lt;/strong&gt;, aguarde hasta que la instancia &lt;strong&gt;MySageMakerInstance&lt;/strong&gt; haya pasado del estado &lt;strong&gt;Pendiente&lt;/strong&gt; al estado &lt;strong&gt;En servicio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Después de que el estado cambie a &lt;strong&gt;En servicio&lt;/strong&gt;, seleccione la instancia &lt;strong&gt;MySageMakerInstance&lt;/strong&gt; y ábrala a través del menú desplegable &lt;strong&gt;Acciones&lt;/strong&gt; o elija la opción &lt;strong&gt;Abrir JupyterLab&lt;/strong&gt;, que aparece junto al estado &lt;strong&gt;En servicio&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3b"&gt;
  &lt;/a&gt;
  3b.
&lt;/h3&gt;

&lt;p&gt;Después de que Jupyter se abra, en la pestaña &lt;strong&gt;Archivos&lt;/strong&gt;, elija &lt;strong&gt;Nuevo&lt;/strong&gt;, &lt;strong&gt;Notebook&lt;/strong&gt; y, luego, &lt;strong&gt;conda_python3&lt;/strong&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3c"&gt;
  &lt;/a&gt;
  3c.
&lt;/h3&gt;

&lt;p&gt;Para preparar los datos, entrenar el modelo de aprendizaje automático e implementarlo, deberá importar algunas bibliotecas y definir algunas variables del entorno en su entorno de bloc de notas de Jupyter. Copie el siguiente código o ejecutelo directamente de la carpeta &lt;strong&gt;codigo&lt;/strong&gt; en el &lt;a href="https://github.com/elizabethfuentes12/Iniciando_SagemakerML"&gt;GitHub&lt;/a&gt; creado para este tutorial en la celda de código de su instancia y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt; o las teclas &lt;strong&gt;Shift+Enter&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import libraries
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_execution_role&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;                                
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;                               
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;                   
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;                 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;               
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gmtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;                 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker.predictor&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csv_serializer&lt;/span&gt;   
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sagemaker&lt;/span&gt;


&lt;span class="c1"&gt;# Define IAM role
&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_execution_role&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'sagemaker/DEMO-xgboost-dm'&lt;/span&gt;
&lt;span class="n"&gt;containers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'us-west-2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'433757028032.dkr.ecr.us-west-2.amazonaws.com/xgboost:latest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s"&gt;'us-east-1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'811284229777.dkr.ecr.us-east-1.amazonaws.com/xgboost:latest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s"&gt;'us-east-2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'825641698319.dkr.ecr.us-east-2.amazonaws.com/xgboost:latest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s"&gt;'eu-west-1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'685385470294.dkr.ecr.eu-west-1.amazonaws.com/xgboost:latest'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# each region has its XGBoost container
&lt;/span&gt;&lt;span class="n"&gt;my_region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;region_name&lt;/span&gt; &lt;span class="c1"&gt;# set the region of the instance
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Success - the MySageMakerInstance is in the "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;my_region&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" region. You will use the "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;my_region&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" container for your SageMaker endpoint."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al finalizar debe verse como la imagen a continuación:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qug7jKbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifrztazita5vp8vmlgy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qug7jKbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifrztazita5vp8vmlgy8.png" alt="3c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3d"&gt;
  &lt;/a&gt;
  3d.
&lt;/h3&gt;

&lt;p&gt;En este paso, creará un bucket de S3 que almacenará sus datos para este tutorial.&lt;/p&gt;

&lt;p&gt;Copie el siguiente código en la próxima celda de código de su bloc de notas y cambie el nombre del bucket de S3 para que sea único. Los nombres de los buckets de S3 deben ser únicos a nivel mundial y, además, deben contar con algunas restricciones y limitaciones.&lt;/p&gt;

&lt;p&gt;Seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;. Si no recibe un mensaje de finalización exitosa, cambie el nombre del bucket y vuelva a intentarlo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'your-s3-bucket-name'&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;--- CHANGE THIS VARIABLE TO A UNIQUE NAME FOR YOUR BUCKET
&lt;/span&gt;&lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="n"&gt;my_region&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'us-east-1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateBucketConfiguration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'LocationConstraint'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my_region&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'S3 bucket created successfully'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'S3 error: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3e"&gt;
  &lt;/a&gt;
  3e.
&lt;/h3&gt;

&lt;p&gt;A continuación, debe descargar los datos en su instancia de Amazon SageMaker y cargarlos en un marco de datos. Copie y &lt;strong&gt;Ejecute&lt;/strong&gt; el siguiente código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://d1.awsstatic.com/tmt/build-train-deploy-machine-learning-model-sagemaker/bank_clean.27f01fbbdf43271788427f3682996ae29ceca05d.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bank_clean.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Success: downloaded bank_clean.csv.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Data load error: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;model_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./bank_clean.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Success: Data loaded into dataframe.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Data load error: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si la descarga es exitosa debe ver el siguiente mensaje: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xFzycL6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/665vf0llnsmicr1sbmwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFzycL6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/665vf0llnsmicr1sbmwj.png" alt="3e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y el siguiente archivo aparecera en su instancia:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fMYK9JGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9e1fg90z6nkvqaxdqyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fMYK9JGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9e1fg90z6nkvqaxdqyt.png" alt="3e2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Con las siguientes columnas y datos binarios en ellas:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiEOWaCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hupo71zayliyac46q119.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiEOWaCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hupo71zayliyac46q119.png" alt="bank_clean"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3f"&gt;
  &lt;/a&gt;
  3f.
&lt;/h3&gt;

&lt;p&gt;Ahora, mezclaremos los datos y los dividiremos en datos de entrenamiento y de prueba.&lt;/p&gt;

&lt;p&gt;Los &lt;strong&gt;datos de entrenamiento&lt;/strong&gt; (el 70 % de los clientes) se utilizarán durante el ciclo de entrenamiento del modelo. Utilizaremos la optimización basada en gradientes para refinar de forma iterativa los parámetros del modelo. La optimización basada en gradientes es una forma de encontrar valores de parámetros del modelo que minimicen sus errores, mediante el uso de gradientes de la función de pérdida del modelo.&lt;/p&gt;

&lt;p&gt;Los &lt;strong&gt;datos de prueba&lt;/strong&gt; (el 30 % restante de los clientes) se utilizarán para evaluar el rendimiento del modelo y para medir el nivel de generalización de los datos nuevos del modelo entrenado.&lt;/p&gt;

&lt;p&gt;Copie el siguiente código en una nueva celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt; para mezclar y dividir los datos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1729&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-4-entrene-el-modelo-con-los-datos"&gt;
  &lt;/a&gt;
  Paso 4: Entrene el modelo con los datos
&lt;/h2&gt;

&lt;p&gt;En este paso, entrenará su modelo de aprendizaje automático con el conjunto de datos de entrenamiento. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4a"&gt;
  &lt;/a&gt;
  4a.
&lt;/h3&gt;

&lt;p&gt;Para utilizar un modelo XGBoost prediseñado de Amazon SageMaker, deberá cambiar el formato del encabezado y la primera columna de los datos de entrenamiento y cargar los datos desde el bucket de S3.&lt;/p&gt;

&lt;p&gt;Copie el siguiente código en una nueva celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt; para cambiar el formato y cargar los datos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'y_yes'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'y_no'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y_yes'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'train.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'train/train.csv'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'train.csv'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker.inputs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TrainingInput&lt;/span&gt;

&lt;span class="n"&gt;s3_input_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TrainingInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s3_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'s3://{}/{}/train'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Crea el siguiente archivo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHlojyPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uju03falj3iktxqvcu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHlojyPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uju03falj3iktxqvcu7.png" alt="4a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4b"&gt;
  &lt;/a&gt;
  4b.
&lt;/h3&gt;

&lt;p&gt;A continuación, deberá configurar la sesión de Amazon SageMaker, crear una instancia del modelo XGBoost (un estimador) y definir los &lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/xgboost_hyperparameters.html"&gt;hiperparámetros&lt;/a&gt; del modelo. Copie el siguiente código en una nueva celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;xgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;estimator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Estimator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;my_region&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                    &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                    &lt;span class="n"&gt;instance_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'s3://{}/{}/output'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;sagemaker_session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_hyperparameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;eta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;min_child_weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;subsample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;objective&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'binary:logistic'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num_round&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4c"&gt;
  &lt;/a&gt;
  4c.
&lt;/h3&gt;

&lt;p&gt;Con los datos cargados y el estimador XGBoost configurado, entrene el modelo a través de la optimización basada en gradientes en una instancia &lt;strong&gt;ml.m4.xlarge&lt;/strong&gt;; copie el siguiente código en la próxima celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s3_input_train&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luego de algunos minutos, debería comenzar a ver los registros de entrenamiento que se generen.&lt;/p&gt;

&lt;p&gt;Inicia: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBnVjFol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82gs27vqlbziemd0k2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBnVjFol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82gs27vqlbziemd0k2t.png" alt="4c1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finaliza: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8JHvnKT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ek4hmgyap7p8vofbkfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JHvnKT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ek4hmgyap7p8vofbkfu.png" alt="4c2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En la imagen anterior podemos ver que el entrenamiento duro 47 segundos, que es lo que se cobrara por la maquina usada en el contenedor. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paso-5-implemente-el-modelo"&gt;
  &lt;/a&gt;
  Paso 5: Implemente el modelo
&lt;/h2&gt;

&lt;p&gt;En este paso, implementará el modelo entrenado en un punto de enlace, cambiará el formato y cargará los datos CSV. Luego, ejecutará el modelo para crear predicciones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5a"&gt;
  &lt;/a&gt;
  5a.
&lt;/h3&gt;

&lt;p&gt;Para implementar el modelo en un servidor y crear un punto de enlace al que pueda acceder, copie el siguiente código en la próxima celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;xgb_predictor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial_instance_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;instance_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al finalizar debe verse asi:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWHhFoxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pidyc5dwp8e3apf5u73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWHhFoxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pidyc5dwp8e3apf5u73.png" alt="5a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tambien lo puedes visualizar en &lt;strong&gt;Interferencia&lt;/strong&gt; --&amp;gt; &lt;strong&gt;Puntos de enlace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Mu02g7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01es8ra9u6vkat4dpc4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Mu02g7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01es8ra9u6vkat4dpc4q.png" alt="5a2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5b"&gt;
  &lt;/a&gt;
  5b.
&lt;/h3&gt;

&lt;p&gt;Para predecir si los clientes de los datos de prueba se inscribieron o no en el producto del banco, copie el siguiente código en la próxima celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CSVSerializer&lt;/span&gt;

&lt;span class="n"&gt;test_data_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'y_no'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y_yes'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="c1"&gt;#load the data into an array
&lt;/span&gt;
&lt;span class="c1"&gt;#xgb_predictor.content_type = 'text/csv' # set the data type for an inference
&lt;/span&gt;&lt;span class="n"&gt;xgb_predictor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'text/csv'&lt;/span&gt; &lt;span class="c1"&gt;# set the data type for an inference
&lt;/span&gt;&lt;span class="n"&gt;xgb_predictor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CSVSerializer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# set the serializer type
&lt;/span&gt;&lt;span class="n"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xgb_predictor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_data_array&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# predict!
&lt;/span&gt;&lt;span class="n"&gt;predictions_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# and turn the prediction into an array
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions_array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-6-eval%C3%BAe-el-rendimiento-del-modelo"&gt;
  &lt;/a&gt;
  Paso 6. Evalúe el rendimiento del modelo
&lt;/h2&gt;

&lt;p&gt;En este paso, evaluará el rendimiento y la precisión del modelo de aprendizaje automático.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6a"&gt;
  &lt;/a&gt;
  6a.
&lt;/h3&gt;

&lt;p&gt;Copie y pegue el siguiente código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt; para comparar los valores reales con los valores predichos en una tabla denominada &lt;strong&gt;matriz de confusión&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crosstab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'y_yes'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions_array&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rownames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Observed'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;colnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Predicted'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;tn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{0:&amp;lt;20}{1:&amp;lt;4.1f}%&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Tasa de clasificación general: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0:&amp;lt;15}{1:&amp;lt;15}{2:&amp;gt;8}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Predictor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"No Inscritos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Inscritos"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Observed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0:&amp;lt;15}{1:&amp;lt;2.0f}% ({2:&amp;lt;}){3:&amp;gt;6.0f}% ({4:&amp;lt;})"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No Inscritos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0:&amp;lt;16}{1:&amp;lt;1.0f}% ({2:&amp;lt;}){3:&amp;gt;7.0f}% ({4:&amp;lt;}) &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inscritos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado del comando anterior es algo parecido a esto: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CO6oLYKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfwdb74fmgzj1o83oi1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CO6oLYKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfwdb74fmgzj1o83oi1x.png" alt="6a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En función de las predicciones, podemos concluir que se predijo que el 89.5% de los clientes se  inscribiría para un certificado de depósito, con una precisión del 65 % (278/429) para los inscritos y del 90 % (10 785/11 928) para los no inscritos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6b"&gt;
  &lt;/a&gt;
  6b.
&lt;/h3&gt;

&lt;p&gt;Este modelo es bueno para predecir los clientes no inscritos, pero no  para los inscritos.&lt;/p&gt;

&lt;p&gt;El desempeño del modelo depende de la métrica y del objetivo que tenga, por ejemplo el modelo que predice SPAM lo que interesa es que no pasen los correos validos a spam, no importa recibir uno que otro spam en el inbox. Eso significa que puedo sacrificar un poco de falsos negativos (spam en el inbox) para minimizar los falsos positivos (correos validos a spam). &lt;/p&gt;

&lt;p&gt;Para optimizar y llegar el desempeño óptimo debemos iterar el modelo, en una primera instancia cambiando los hiperparámetros para ver si otras combinaciones permiten entrenar un modelo que entregue mejores predicciones.&lt;/p&gt;

&lt;p&gt;Los hiperparámetros ajustables del modelo XGBoost son los siguientes: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca6LTjyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkv511gwrf7z38skc3ak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca6LTjyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkv511gwrf7z38skc3ak.png" alt="6b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Los hiperparámetros que tienen el mayor efecto en la optimización de las métricas de evaluación de XGBoost son: alpha, min_child_weight, subsample eta, y num_round.&lt;/p&gt;

&lt;p&gt;Sagemaker cuenta con una herramienta que permite automatizar todas estas entrenamientos de distintas combinaciones de HP el Trabajo de Ajuste de HP (HP Tunning JOB). Lo que hace es realizar un entrenamiento por cada combinación de HP que le digamos y nos entrega la mejor combinación de HP (que tiene la mejor métrica que le hayamos indicado)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adicional"&gt;
  &lt;/a&gt;
  Adicional
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#para-desplegar-un-endpoint-a-partir-de-un-modelo-entrenado-por-un-trabajo-en-entrenamiento-de-sagemaker"&gt;
  &lt;/a&gt;
  Para desplegar un endpoint a partir de un modelo entrenado por un trabajo en entrenamiento de SageMaker:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Para instanciar el modelo
&lt;/span&gt;&lt;span class="n"&gt;model_from_job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;estimator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Estimator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"xgboost-2021-04-21-02-30-09-428"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;sagemaker_session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#para-lanzar-el-modelo-en-el-contenedor-al-igual-que-el-paso-5a-y-puedes-continuar-con-el-resto-de-los-pasos"&gt;
  &lt;/a&gt;
  Para lanzar el modelo en el contenedor. Al igual que el paso 5a y puedes continuar con el resto de los pasos.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;model_from_job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial_instance_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;instance_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#para-importar-tu-propio-modelo-entrenado-a-sagemaker"&gt;
  &lt;/a&gt;
  Para importar tu propio modelo entrenado a SageMaker
&lt;/h3&gt;

&lt;p&gt;Primero lo debes subir a S3&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker.mxnet.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MXNetModel&lt;/span&gt;

&lt;span class="n"&gt;sagemaker_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MXNetModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'s3://path/to/model.tar.gz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'arn:aws:iam::accid:sagemaker-role'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;entry_point&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'entry_point.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-7-termine-los-recursos"&gt;
  &lt;/a&gt;
  Paso 7: Termine los recursos
&lt;/h2&gt;

&lt;p&gt;En este paso, terminará los recursos relacionados con Amazon SageMaker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; Terminar los recursos que no se utilizan de forma activa reduce los costos, y es una práctica recomendada. No terminar sus recursos generará cargos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7a"&gt;
  &lt;/a&gt;
  7a.
&lt;/h3&gt;

&lt;p&gt;Para eliminar el punto de enlace de Amazon SageMaker y los objetos de su bucket de S3, copie, pegue y &lt;strong&gt;Ejecute&lt;/strong&gt; el siguiente código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;delete_endpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xgb_predictor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bucket_to_delete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bucket_to_delete&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para finalizar debes detener la instancia para evitar cargos adicionales, y si no la vas a utilizar más la puedes eliminar. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#felicitaciones"&gt;
  &lt;/a&gt;
  ¡Felicitaciones!
&lt;/h2&gt;

&lt;p&gt;Ha aprendido a utilizar Amazon SageMaker para preparar, entrenar, implementar y evaluar un modelo aprendizaje automático. Amazon SageMaker facilita la creación de modelos de aprendizaje automático y le proporciona todo lo necesario para conectarse rápidamente con los datos de entrenamiento y para seleccionar el mejor algoritmo y marco de trabajo para su aplicación, mientras administra la infraestructura subyacente completa, de manera que pueda entrenar modelos a escala de petabytes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ejemplos-aws-sagemaker"&gt;
  &lt;/a&gt;
  Ejemplos AWS Sagemaker
&lt;/h2&gt;

&lt;p&gt;Para que continues aprendiendo te dejo un link con varios ejemplos para practicar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aws/amazon-sagemaker-examples"&gt;https://github.com/aws/amazon-sagemaker-examples&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip"&gt;
  &lt;/a&gt;
  Tip
&lt;/h2&gt;

&lt;p&gt;La fuente original de este tutorial esta en una verion 1.X de XGBoost por lo que saltan algunos errores como el de la imagen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6stM74ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txl889fhlk75h6imka0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6stM74ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txl889fhlk75h6imka0w.png" alt="error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para corregirlos debes revisar la documentación de la &lt;a href="https://sagemaker.readthedocs.io/en/stable/v2.html"&gt;version 2 de XGBoost&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Esto lo puedes aplicar en errores similares en ejemplos de otros algoritmos.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
      <category>python</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Laravel scaffold command</title>
      <author>Tefoh</author>
      <pubDate>Sat, 02 Oct 2021 20:30:38 +0000</pubDate>
      <link>https://dev.to/tefoh/laravel-scaffold-command-2lg</link>
      <guid>https://dev.to/tefoh/laravel-scaffold-command-2lg</guid>
      <description>&lt;p&gt;Hi artisans, i created a package called &lt;a href="https://github.com/Tefoh/laravel-scaffold-command"&gt;Laravel scaffold command&lt;/a&gt;, adds an artisan command that you can generate necessary files for crud applications, either you use laravel as fullstack or a rest-api this can help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require tefoh/laravel-scaffold-command
// &lt;span class="k"&gt;then
&lt;/span&gt;php artisan vendor:publish &lt;span class="nt"&gt;--tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;scaffold-stubs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats it and just enter the model or entity you want crud operation with the fields needed. The fields is two parts, first is field name and second is field type this two separated with a colon. The field type must be from laravel migrations available column types, heres the link &lt;a href="https://laravel.com/docs/8.x/migrations#available-column-types"&gt;https://laravel.com/docs/8.x/migrations#available-column-types&lt;/a&gt;. For example to create a crud operation for Category enter this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan scaffold Category &lt;span class="nt"&gt;--fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;name:string,slug:string,parent_id:foreignId
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for rest-api just add api parameter to create necessary resources instead of views. And controller will be a bit different:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan scaffold Tag &lt;span class="nt"&gt;--api&lt;/span&gt; &lt;span class="nt"&gt;--fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;name:string,slug:string,parent_id:foreignId
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The original idea comes from ruby on rails, they have a similar command. The beauty of this package is you can use laravel stubs and fully customize how controllers and views created when you enter this command. I hope this will be helpful for you :)&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Appwrite and How to use it Efficiently</title>
      <author>Anamika</author>
      <pubDate>Sat, 02 Oct 2021 20:17:28 +0000</pubDate>
      <link>https://dev.to/noviicee/what-is-appwrite-and-how-to-use-it-efficiently-3o1m</link>
      <guid>https://dev.to/noviicee/what-is-appwrite-and-how-to-use-it-efficiently-3o1m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-appwrite"&gt;
  &lt;/a&gt;
  What is Appwrite
&lt;/h2&gt;

&lt;p&gt;Going by it's &lt;a href="https://appwrite.io/"&gt;official web-page&lt;/a&gt;, Appwrite is a self-hosted solution that provides developers with a set of easy-to-use and integrate REST APIs to manage their core backend needs.&lt;br&gt;
Basically, it is a new open-source, end-to-end, back end server for front-end and mobile developers that allows to build apps much faster. Its main goal is to abstract and simplify common development tasks behind REST APIs and tools, helping developers build advanced apps faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FEAFdQX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2v0oc5bs1zzreew7s24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FEAFdQX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2v0oc5bs1zzreew7s24.png" alt="appwrite"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#where-can-it-be-used"&gt;
  &lt;/a&gt;
  Where can it be used
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vj7aW829--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r55z3cibva0st3yydinz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vj7aW829--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r55z3cibva0st3yydinz.png" alt="how-t-use-it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we already saw, Appwrite is a self-hosted backend as a service. It is packaged as a set of Docker micro-services. It makes it easier to build applications without writing any backend code. But this isn’t the only way to use it. Bsically if we go by &lt;a href="https://appwrite.io/docs"&gt;Appwrite's official documentation&lt;/a&gt;, Appwrite wasn’t designed to replace the backend team, but to provide a better starting point for your project and a better developer experience.&lt;/p&gt;

&lt;p&gt;There a many ways to use Appwrite- Appwrite for Web, Appwrite for Flutter, Appwrite for Android, Appwrite for Server etc. You can find many tutorials, videos, demonstrations, source codes, etc to get started with these applications over &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;here&lt;/a&gt;. So go ahead and make great use of them!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-it-efficiently"&gt;
  &lt;/a&gt;
  How to use it efficiently
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxCRNuHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h7etgu644ni0hcbc8nu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxCRNuHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h7etgu644ni0hcbc8nu.png" alt="who-can-benefit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to take Advantage of the Appwrite API Without Using Any SDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As developers, sometimes, we might not want to use the Appwrite SDK, but to directly use Appwrite’s plain HTTP API to integrate our application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step- 1: Client Authentication&lt;/em&gt; &lt;br&gt;
If you are integrating from a new client platform, you just need to pass the project ID. This can be done by attaching your request the (PROJECT) header like this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -XGET -H '(PROJECT): [MY-PROJECT-ID]' -H "Content-type: application/json" 'https://appwrite.io/v1/locale'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step-2: Server Authentication&lt;/em&gt;&lt;br&gt;
The server authentication provides more scope permissions than by default. For this step, we need to pass our API key. API keys can be generated from the Appwrite dashboard and, permissions for the applications can also be chosen from here.&lt;/p&gt;

&lt;p&gt;We need to pass the API Key with Appwrite’s ‘KEY’ headeras follows:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -XGET -H 'PROJECT: [MY-PROJECT-ID]' -H 'KEY: [MY-API-KEY]' -H "Content-type: application/json" 'https://appwrite.io/v1/users'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;One can also set an Appwrite header to change the API locale. The Appwrite API has support for 46 different locales, and this number is constantly growing.&lt;br&gt;
You can use the locale service to get different responses from the Appwrite’s Locale API, or even in case if you want any sort of emails sent to your users in a different language from the default English.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Final Step: Start Sending API Calls&lt;/em&gt;&lt;br&gt;
After authenticating and changing your Appwrite server locale, you can start sending requests to any of the Appwrite API’s.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-and-features"&gt;
  &lt;/a&gt;
  Advantages and Features
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alyHodFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wr94infv64in4gwyteg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alyHodFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wr94infv64in4gwyteg.png" alt="perks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Anonymous Login and JWT&lt;/strong&gt; 🔐&lt;br&gt;
Not every app needs users to create an account right away.&lt;br&gt;
With Anonymous Login, save sessions without asking for email addresses, and convert those users to registered accounts later with ease. The implementation is just like creating a normal user session via the createSession method.&lt;br&gt;
&lt;a href="https://hackernoon.com/why-appwrite-08-is-a-great-open-source-firebase-alternative-ed2n34ns"&gt;Know more here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ARM Support&lt;/strong&gt;&lt;br&gt;
A dynamic arm support is an assistive technology product which helps people with limited arm and shoulder function, to move their arms and hands freely (again), and therefore make it possible to conduct all kinds of daily activities.&lt;br&gt;
Starting with 0.8, install Appwrite on your favorite 64-bit ARM device, from Amazon Graviton2 down to the Raspberry Pi 4! ARM support also contributes in making Appwrite technology agnostic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Slimmer and Faster&lt;/strong&gt;&lt;br&gt;
The recent versions of Appwrite have includes SMTP server rather than the ClamAV server for development. These changes, have helped reduce the minimum requirements to just 1GB of RAM.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apart from these, there are many more advantages of using Appwrite. Some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast and Secure&lt;/li&gt;
&lt;li&gt;Manage Access control&lt;/li&gt;
&lt;li&gt;File Previews&lt;/li&gt;
&lt;li&gt;Image Manipulations&lt;/li&gt;
&lt;li&gt;Authenticate, Confirm and Manage your Users&lt;/li&gt;
&lt;li&gt;Multiple Signin Methods&lt;/li&gt;
&lt;li&gt;Auto-Generated SSL&lt;/li&gt;
&lt;li&gt;Built-in Files and Secrets Encryption&lt;/li&gt;
&lt;li&gt;Built-in Anti-Virus scanner&lt;/li&gt;
&lt;li&gt;Webhooks&lt;/li&gt;
&lt;li&gt;Background Tasks&lt;/li&gt;
&lt;li&gt;Open-Source&lt;/li&gt;
&lt;li&gt;Self-Hosted&lt;/li&gt;
&lt;li&gt;Privacy&lt;/li&gt;
&lt;li&gt;Cross-Platform&lt;/li&gt;
&lt;li&gt;Flutter Support&lt;/li&gt;
&lt;li&gt;Audit Logging&lt;/li&gt;
&lt;li&gt;Input Validation&lt;/li&gt;
&lt;li&gt;Abuse Protection&lt;/li&gt;
&lt;li&gt;HTTP\2 Support&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;You can join the &lt;a href="https://appwrite.io/discord"&gt;Appwrite Community on Discord&lt;/a&gt;. It can help newcomers clear more doubts and provide them with constant support regarding Appwrite.&lt;br&gt;
You can also check the &lt;a href="https://github.com/appwrite"&gt;Github Repositories here&lt;/a&gt;. These can help you find lots of resources about Appwrite, including text, video tutorials and many demo applications.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy Appwriting&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Af-3MsZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1pity0hbp9hvu93iohp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Af-3MsZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1pity0hbp9hvu93iohp.png" alt="party"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>appwrite</category>
      <category>hacktoberfest</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>10 HTML tips &amp; tricks you need to know</title>
      <author>Varun Sharma</author>
      <pubDate>Sat, 02 Oct 2021 20:02:00 +0000</pubDate>
      <link>https://dev.to/varun508/10-html-tips-tricks-you-need-to-know-5hc7</link>
      <guid>https://dev.to/varun508/10-html-tips-tricks-you-need-to-know-5hc7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-create-an-accordion-with-html"&gt;
  &lt;/a&gt;
  1. Create an accordion with HTML
&lt;/h3&gt;

&lt;p&gt;Yes, you can actually create an accordion purely using HTML. Here's how&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;details&amp;gt;
  &amp;lt;summary&amp;gt;View Features&amp;lt;/summary&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Unlimited bookmarks&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Nested collections&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Import and export&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Link to web archive&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Mobile support&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-show-the-result-with-the-raw-ltoutputgt-endraw-element"&gt;
  &lt;/a&gt;
  2. Show the result with the &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; element
&lt;/h3&gt;

&lt;p&gt;The output element can show the result performed by the script. It auto-updates when the input values change&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form oninput="r.value=parseInt(a.value)+parseInt(b.value)+parseInt(c.value)"&amp;gt;
  &amp;lt;input type="number" id="a" value="100"&amp;gt;
  +&amp;lt;input type="number" id="b" value="50"&amp;gt;
  +&amp;lt;input type="number" id="c" value="50"&amp;gt;
  =&amp;lt;output name="r" for="a b c"&amp;gt;&amp;lt;/output&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cj1SOPRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633192427584/_JQm7njNA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cj1SOPRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633192427584/_JQm7njNA.png" alt="Screenshot 2021-10-02 at 10.03.31 PM.png"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-create-gauges-with-the-raw-ltmetergt-endraw-element"&gt;
  &lt;/a&gt;
  3. Create gauges with the &lt;code&gt;&amp;lt;meter&amp;gt;&lt;/code&gt; element
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="ruby"&amp;gt;Ruby:&amp;lt;/label&amp;gt;
&amp;lt;meter id="ruby" min="0" max="100" low="35" high="65" optimum="95" value="25"&amp;gt;&amp;lt;/meter&amp;gt;&amp;lt;br /&amp;gt;

&amp;lt;label for="java"&amp;gt;Java:&amp;lt;/label&amp;gt;
&amp;lt;meter id="java" min="0" max="100" low="35" high="65" optimum="95" value="50"&amp;gt;&amp;lt;/meter&amp;gt;&amp;lt;br /&amp;gt;

&amp;lt;label for="js"&amp;gt;JavaScript:&amp;lt;/label&amp;gt;
&amp;lt;meter id="js" min="0" max="100" low="35" high="65" optimum="85" value="90"&amp;gt;&amp;lt;/meter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qJax4FQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633193774397/aypBkGYR0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qJax4FQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633193774397/aypBkGYR0.png" alt="Screenshot 2021-10-02 at 10.25.57 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-accept-multiple-input-values"&gt;
  &lt;/a&gt;
  4. Accept multiple input values
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;multiple&lt;/code&gt; attribute to accept multiple values for files and email addresses. The user experience is not that good with &lt;code&gt;type="email"&lt;/code&gt; but it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="email" placeholder="Email comma separated" multiple&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QVYCkMDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633194261184/zHJVKpw8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QVYCkMDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633194261184/zHJVKpw8k.png" alt="Screenshot 2021-10-02 at 10.34.06 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-create-a-slider-with-html"&gt;
  &lt;/a&gt;
  5. Create a slider with HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;input type="range" min="1" max="100" value="80"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ou7n3-Pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633199042284/iYxbjoZg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ou7n3-Pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633199042284/iYxbjoZg5.png" alt="Screenshot 2021-10-02 at 11.53.49 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-meta-tag-httpequiv"&gt;
  &lt;/a&gt;
  6. Meta tag http-equiv
&lt;/h3&gt;

&lt;p&gt;Use http-equiv to refresh or redirect to a page after a certain duration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;!-- Refreshes the document every 15 seconds --&amp;gt;
  &amp;lt;meta http-equiv="refresh" content="30"&amp;gt;

  &amp;lt;!-- Redirects to thee specified page after 5 seconds --&amp;gt;
  &amp;lt;meta http-equiv="refresh" content="5;https://google.com"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-disable-rightclick"&gt;
  &lt;/a&gt;
  7. Disable right-click
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;!-- Disables right click on this element --&amp;gt;
  &amp;lt;p oncontextmenu="return false"&amp;gt;Hello&amp;lt;/p&amp;gt;

  &amp;lt;!-- Disables right click on the document --&amp;gt;
  &amp;lt;body oncontextmenu="return false"&amp;gt;....&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-facetime-with-anchor-tag"&gt;
  &lt;/a&gt;
  8. Facetime with anchor tag
&lt;/h3&gt;

&lt;p&gt;Not only facetime, but you can also add skype or fax links&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="facetime:98769876987"&amp;gt;Connect using FaceTime&amp;lt;/a&amp;gt;
&amp;lt;a href="skype:user333?chat"&amp;gt;Connect on skype&amp;lt;/a&amp;gt;
&amp;lt;a href="fax:+123.456.1234567"&amp;gt;+358.555.1234567&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-use-capture-attribute-in-input"&gt;
  &lt;/a&gt;
  9. Use capture attribute in input
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;input type="file" capture="user" accept="audio/*"&amp;gt;

    &amp;lt;!-- Capture 'environment' opens up the back camera --&amp;gt;
    &amp;lt;input type="file" capture="environment" accept="video/*"&amp;gt;

    &amp;lt;!-- Capture 'user' opens up the front camera --&amp;gt;
    &amp;lt;input type="file" capture="user" accept="image/*"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-use-focuswithin"&gt;
  &lt;/a&gt;
  10. Use focus-within
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;html:focus-within&lt;/code&gt; improves the scroll speed of find-in-page in the browser&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    html:focus-within {
         scroll-behavior: smooth;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Thank you for reading 💫. &lt;br&gt;
I hope you enjoyed the article. Feedbacks are greatly appreciated 🙏&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-me-here"&gt;
  &lt;/a&gt;
  Find me here
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/imva508"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/varun508"&gt;Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://instagram.com/varunn508"&gt;Instagram&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Git hooks and Docker for Continuous integration</title>
      <author>Simone</author>
      <pubDate>Sat, 02 Oct 2021 19:59:48 +0000</pubDate>
      <link>https://dev.to/simone_a/git-hooks-and-docker-for-continuous-integration-1c36</link>
      <guid>https://dev.to/simone_a/git-hooks-and-docker-for-continuous-integration-1c36</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3W0GVWgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vihzk09exdwfgu710kk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3W0GVWgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vihzk09exdwfgu710kk.png" alt="Alt continuous integration"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Continuous Integration is a great software development practice, we can reduce integration problems and we can allow teams to develop cohesive software more rapidly.&lt;/p&gt;

&lt;p&gt;There are many interesting CI tools in the market but I think the dev CI experience can still be improved. I see companies and dev teams struggling and disappointed when they have to run and setup CI pipelines.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Most of the IT companies care about code privacy and they don’t like the idea to run their code on external public CI platforms. It's possible to have CI solutions on-premise but most of the time this kind of solutions are expensive for the company. For example, Atlassian has stopped selling new on-prem server licenses. &lt;a href="https://www.atlassian.com/migration/assess/journey-to-cloud"&gt;ref.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#build-queue-and-ci-debug"&gt;
  &lt;/a&gt;
  Build queue and CI debug:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;As a developer and member of a tech team I’d like to see our CI builds running immediately after a code change and I’d like to see an easy way for debugging the code when it’s running on CI. Most of the time I see teams and developers complaining about long builds queues and usually it’s even quite difficult debugging the code if an error happens during the CI process.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#cloud-costs"&gt;
  &lt;/a&gt;
  Cloud costs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;How many times we see commits failing on CI because the code has not been tested enough locally or the code has not been rebased with the main branch yet. Every time we run a build on Cloud it’s a cost for the team and the company. The good news is we can now easily avoid this scenario. Few years ago, Git has introduced "Git hooks", this new technology allows developers to execute pre-tests before a commit will trigger a new CI process in Cloud.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;After a long brainstorming with some friends, we created a small CI tool &lt;a href="//localci.io"&gt;localci.io&lt;/a&gt; to address all these issues. This tool doesn’t fit with any IT infrastructure, but this could be useful at least for some team. Probably, in the future it will be completely free but currently we still need to cover some cloud costs.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>cloud</category>
      <category>codequality</category>
    </item>
    <item>
      <title>HacktoberFest '21 Devlog #1: Starting the adventure</title>
      <author>Danix</author>
      <pubDate>Sat, 02 Oct 2021 19:31:44 +0000</pubDate>
      <link>https://dev.to/danix421/hacktoberfest-21-devlog-1-starting-the-adventure-4pf0</link>
      <guid>https://dev.to/danix421/hacktoberfest-21-devlog-1-starting-the-adventure-4pf0</guid>
      <description>&lt;p&gt;HacktoberFest 2021 started yesterday, on October 1st (for me September 30th), and I registered myself to help open source "one contribution at a time".&lt;br&gt;
I'm very happy to make part of this developer effort to empower the future of software and coding. I hope this year goes better than the earlier ones!&lt;/p&gt;

&lt;p&gt;This is the first part of a devlogs series I'm going to do thought all October, sharing my experience on this HacktoberFest. It's the first time I do something like, so I'll try my best.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#day-1"&gt;
  &lt;/a&gt;
  Day 1
&lt;/h1&gt;

&lt;p&gt;I began preparing myself for the event, making some (small) Pull Requests, searching good repositories to contribute to, getting a good community to talk about the event, and other stuff.&lt;br&gt;
I contributed to a few repositories with random code.&lt;br&gt;
I was very newbie and didn't know what to do, so there where not much effort.&lt;/p&gt;

&lt;p&gt;I just hope these Pull Requests doesn't make me be banned from HacktoberFest 😐.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#day-2-today"&gt;
  &lt;/a&gt;
  Day 2 (today)
&lt;/h1&gt;

&lt;p&gt;I'm beginning to make more quality Pull Requests, so I can really begin this HacktoberFest. I firstly contributed to a collection of website components on GitHub, and now I'm working on other contributions. It's my first year, so I'm very nervious of making something wrong.&lt;br&gt;
I'm doing my best. I want to show my real coding skills, by making valuable code for people 🖥️. To be honest, I'm really proud for having joined to HacktoberFest 😄.&lt;br&gt;
I hope everything goes good.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last words
&lt;/h1&gt;

&lt;p&gt;At this point, I want to thank all people that are helping me. You all are great people 😎.&lt;br&gt;
I also want to recommend any developer searching for a coding community to join to the Devcord Discord community; they are a great community, where you can code along other people, get help, chat about (almost) any topic and other stuff. You can join with this link: &lt;a href="https://discord.gg/devcord"&gt;https://discord.gg/devcord&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy hacking, and good luck! ☕&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>How I Created an Interview CLI with Node.js for self-interview preparation</title>
      <author>karthikdevarticles</author>
      <pubDate>Sat, 02 Oct 2021 19:04:34 +0000</pubDate>
      <link>https://dev.to/karthikdevarticles/how-i-created-an-interview-cli-with-node-js-for-self-interview-preparation-39g</link>
      <guid>https://dev.to/karthikdevarticles/how-i-created-an-interview-cli-with-node-js-for-self-interview-preparation-39g</guid>
      <description>&lt;p&gt;Hi Guys, In this article, we will focus on topics of Node.js, CLI, and Interview Preparation.&lt;/p&gt;

&lt;p&gt;I have created a self-interview preparation CLI toolkit, which will show me random questions whenever I run a CLI command called "interview".&lt;/p&gt;

&lt;p&gt;Sounds cool right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h2&gt;

&lt;p&gt;I felt I would require a real-time experience of attending an interview, but I wanted to have control over what I could be expecting, and still having the random unexpectedness of attending an interview.&lt;/p&gt;

&lt;p&gt;This simple project I felt was in the right direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisitestools-required"&gt;
  &lt;/a&gt;
  Prerequisites/Tools required.
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Latest version of  &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; installed(I used v14.18.0)&lt;/li&gt;
&lt;li&gt;Text editor - &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next, open your project folder and enter the below commands to create and initiate the node.js project setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir interview-cli
cd interview-cli
npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, open the interview-cli folder and create a bin folder and an index.js file within it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hyErkzZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633186344733/tne5Iyehm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hyErkzZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633186344733/tne5Iyehm.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//bin/index.js&lt;/span&gt;&lt;span class="cp"&gt;
#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to the Mock Interview!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A string that begins with &lt;code&gt;#!&lt;/code&gt; is called a “shebang”. With this string, we are explicitly stating the command line/terminal to run our script with &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now open the &lt;code&gt;package.json&lt;/code&gt; file and update the &lt;code&gt;main&lt;/code&gt; key value to the path &lt;code&gt;"bin/index.js"&lt;/code&gt; and append a new key &lt;code&gt;bin&lt;/code&gt; with the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"interview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./bin/index.js"&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure you add a comma(",") to the end of the previous line for the above step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your &lt;code&gt;package.json&lt;/code&gt; must look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"interview-cli"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bin/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"interview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./bin/index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we can run the application like any other node application with the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But since our goal is to run the application from anywhere, I want to simply open my computer/laptop and hit the command line to prepare for the interview. For achieving that, we install our application globally with the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installs our script globally. This means the "interview" command mentioned in the &lt;code&gt;bin&lt;/code&gt; key section in the &lt;code&gt;package.json&lt;/code&gt; file is made available to the command line.&lt;/p&gt;

&lt;p&gt;Let's run our script globally with the below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvCbU_l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633187935207/gI-b6Y2Af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvCbU_l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633187935207/gI-b6Y2Af.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now create few questions for the interview in a file called &lt;code&gt;mock-interview-questions.txt&lt;/code&gt; at the root of the project&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8EiVpD3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633191536251/YJhAV-vRl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8EiVpD3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633191536251/YJhAV-vRl.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add the script to show a random interview question when we enter "interview" in the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//bin/index.js&lt;/span&gt;&lt;span class="cp"&gt;
#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crypto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mock-interview-questions.txt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;questions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For the tutorial I have kept the number of questions to 10, but in reality, I would suggest you add at least 50 questions for keeping the interview interesting and helpful for you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#final-output"&gt;
  &lt;/a&gt;
  Final Output
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t_owsDOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633198127126/wYsvK3N4D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_owsDOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633198127126/wYsvK3N4D.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kh_gdmHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633198067346/azbklHLAh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kh_gdmHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633198067346/azbklHLAh.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#if-you-would-like-to-support-my-work"&gt;
  &lt;/a&gt;
  If you would like to support my work:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/karthikdevblog"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;br&gt;
and Follow my Blog at(&lt;a href="https://karthikdevarticles.com/"&gt;https://karthikdevarticles.com/&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python: Reimaging Constants</title>
      <author>Parth Agarwal</author>
      <pubDate>Sat, 02 Oct 2021 18:58:26 +0000</pubDate>
      <link>https://dev.to/ra101/python-reimaging-constants-1ghh</link>
      <guid>https://dev.to/ra101/python-reimaging-constants-1ghh</guid>
      <description>&lt;p&gt;A different implementation of constant for python&lt;/p&gt;

&lt;p&gt;I couldn't find a good implementation of constants, so created my own! Let's get started!&lt;/p&gt;

&lt;p&gt;Do checkout the complete code at &lt;a href="https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882"&gt;https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it Should work&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;GITHUB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/ra101"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ra101.github.io/"&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"dev.ra.101@protonmail.com"&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"〈 RA 〉"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;Links.GITHUB&lt;/code&gt; should return &lt;code&gt;https://github.com/ra101&lt;/code&gt; and &lt;br&gt;
&lt;code&gt;Link.GITHUB = 'new_value'&lt;/code&gt; or &lt;code&gt;Links.NEW_CONTANTS = NEW_VALUE&lt;/code&gt; both should return None, without assigning or creating new field&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#here-is-how-i-made-it"&gt;
  &lt;/a&gt;
  Here is How I made it!
&lt;/h1&gt;

&lt;p&gt;1) We need to mock all setter in a meta class, which will be used by main class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstantMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Meta Class for Constant, How Constant class would behave
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.5) Lets add a external setter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# A external set method to make sure we can update value in __new__
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Override &lt;code&gt;__new__&lt;/code&gt; to make the actual class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsdict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        adding __keys__, __values__ fields
        and keys(), values() methods
        """&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsdict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__values__"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__keys__"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"values"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.5) Add below methods for polishing the class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# adding __getitem__ to make objects "subscriptable"
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# In case of for loops
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Finally Lets create the class!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ConstantMeta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Now this class can be inherited whenever required to make constants
    """&lt;/span&gt;

    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally! We are Done! We Created a almost immutable class that could be used as constants&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;GITHUB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/ra101"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ra101.github.io/"&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"dev.ra.101@protonmail.com"&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"〈 RA 〉"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;

    &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'any_new_value'&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Links.WEB: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Author.values(): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;dict(Author): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;for key in Author.LINKS.keys()"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'getattr(Author.LINKS, "&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Links.WEB: https://ra101.github.io/

Author.values(): ['〈 RA 〉', 'https://ra101.github.io/', &amp;lt;__main__.ConstantClass object at 0x00000293A94768E0&amp;gt;]

dict(Author): {'NAME': '〈 RA 〉', 'WEB': 'https://ra101.github.io/', 'LINKS': &amp;lt;__main__.ConstantClass object at 0x00000293A94768E0&amp;gt;}

for key in Author.LINKS.keys()
getattr(Author.LINKS, "GITHUB"): https://github.com/ra101
getattr(Author.LINKS, "WEB"): https://ra101.github.io/
getattr(Author.LINKS, "EMAIL"): dev.ra.101@protonmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do checkout the complete code at &lt;a href="https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882"&gt;https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>One more PR for Hactoberfest </title>
      <author>Hulya</author>
      <pubDate>Sat, 02 Oct 2021 18:56:24 +0000</pubDate>
      <link>https://dev.to/hulyakarakaya/one-more-pr-for-hactoberfest-5gkp</link>
      <guid>https://dev.to/hulyakarakaya/one-more-pr-for-hactoberfest-5gkp</guid>
      <description>&lt;p&gt;Hactoberfest is upon us and it may be hard to find a project to contribute to especially for beginners. I have created a project with React and Docusaurus and looking for new contributors. You can create a PR and get one step closer to finishing your Hactoberfest.  &lt;/p&gt;

&lt;p&gt;If you are new to Open Source, you can follow along with this guide and create your PR for the project.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href="https://github.com/hulyak/a-to-z-coding-resources"&gt;Github link&lt;/a&gt; for the project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-pull-request-for-az-coding-resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to create a Pull Request for A-Z Coding Resources&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this guide, we will learn how to make a pull request for A-Z Coding Resources. We will make the changes from the command line. But first, let’s make clear the difference between Git and Github.&lt;/p&gt;

&lt;p&gt;Git is a version control software and Github is a collaboration platform that uses Git.&lt;/p&gt;

&lt;p&gt;Now, we can start contributing to our project by installing Git on our computer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-install-git"&gt;
  &lt;/a&gt;
  1. Install Git
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, let's see if you have Git already installed on your computer. Type the command below in Terminal, PowerShell, or any terminal application. If you already have git installed, you can skip the next few steps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you don’t have git installed, go to &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select your operating system and the installer will download.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the installer and follow the instructions. It should be fine to select all of the default options.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restart your terminal, PowerShell, or Git Bash.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the &lt;code&gt;git --version&lt;/code&gt; command again.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-configure-git"&gt;
  &lt;/a&gt;
  2. Configure Git
&lt;/h2&gt;

&lt;p&gt;We want to configure our local environments so that the correct GitHub account is associated with our commits.&lt;/p&gt;

&lt;p&gt;1.On GitHub, find your user name. You can find it by clicking your avatar in the upper right-hand corner. It will say "Signed in as"&lt;/p&gt;

&lt;p&gt;2.Return to your command line or terminal. Replace &lt;code&gt;hulyak&lt;/code&gt; with your username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"hulyak"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Use the command below to configure your email address as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s2"&gt;"your-email-address"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4.You can use the two commands below to double-check that you've set this up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config user.name

git config user.email
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-fork-the-repository"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Fork the Repository&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Navigate to the GitHub repo and click Fork in the upper right-hand corner, this will open up a dialog where you can click on your username to fork the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41yuKlhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7fksg34wzrdsjhbkdex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41yuKlhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7fksg34wzrdsjhbkdex.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will create a local copy under your GitHub username. You need to fork the repo into your account because Github doesn't allow pushing code to repositories that you don't own, then you can make all your changes to the copied repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-clone-the-repo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Clone the Repo&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To &lt;strong&gt;clone&lt;/strong&gt; the repository, go to your forked copy of the GitHub repo, and select the green &lt;strong&gt;'Clone or download'&lt;/strong&gt; menu button, then click on the icon shown in the screenshot to copy the repository URL that you will need to use:&lt;/p&gt;

&lt;p&gt;Go to your terminal and navigate to the directory where you want to clone the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, to clone the remote repository to your computer, execute the &lt;strong&gt;git clone&lt;/strong&gt; command with the link that you just copied:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &amp;lt;github-repo-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new folder with the remote GitHub repository name and download all the project files and repository data into it.&lt;/p&gt;

&lt;p&gt;Cd into the folder that was just created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;a-to-z-coding-resources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should this something similar to the screenshot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-check-out-the-contributing-guideline"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Check out the Contributing guideline&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before we make any changes in the code, we need to check out the Contributing Guidelines.&lt;/p&gt;

&lt;p&gt;If you check out the Readme page, it will redirect you to the CONTRIBUTING.md file. File name is &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Or, you can check out the &lt;code&gt;Issues&lt;/code&gt; tab, and decide how to contribute to the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-new-resource"&gt;
  &lt;/a&gt;
  Adding a New Resource
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Go to the &lt;code&gt;docs&lt;/code&gt; folder and look at the resources. &lt;/li&gt;
&lt;li&gt;All you need is to add a unique new resource to any of the markdown files. You only need to add one resource for the Pull Request. &lt;/li&gt;
&lt;li&gt;Go to the end of the page and add a new resource. &lt;/li&gt;
&lt;li&gt;Image of the resource is not necessary, if you want to add the image of the website, you can first load the image on Dev.to and paste the link from there.&lt;/li&gt;
&lt;li&gt;You can add a short description after the heading. For the heading use &lt;code&gt;###&lt;/code&gt; for Heading level 3 and make sure it looks good. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need help writing markdown files, you can check out &lt;a href="https://www.markdownguide.org/basic-syntax"&gt;this website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can checkout this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;### 1.[Reacti Flux](https://discord.com/invite/reactiflux)&lt;/span&gt;

Reacti Flux is the largest community of React developers (110,000+)!

&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;Alt Text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at0opxihu02u0o2xvcq2.png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-new-resource-page-and-adding-new-resource"&gt;
  &lt;/a&gt;
  Creating A New Resource Page and Adding New Resource
&lt;/h3&gt;

&lt;p&gt;If you cannot find a new resource to add, you can just create a new page and a different category. It can be related to frontend, backend, cloud, blockchain, or mobile development. It can be whatever you want.&lt;/p&gt;

&lt;p&gt;For that, create a new markdown file for a new category and add the resource there.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create the file name as &lt;code&gt;&amp;lt;category&amp;gt;-&amp;lt;number&amp;gt;.md&lt;/code&gt; and add the resource to the file. For example, you can the file as &lt;code&gt;free-websites-1.md&lt;/code&gt;. Then, go to the &lt;code&gt;sidebars.js&lt;/code&gt; file in the root of the project and add the file name to the list.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;someSidebar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;free-websites-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;free-media-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// 'markdown-features',&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript-4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nextjs-6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;job-hunt-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;career-9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;computer-science-7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// add the new file name&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;MDX file starts with &lt;a href="https://jekyllrb.com/docs/step-by-step/03-front-matter/"&gt;YAML front matter&lt;/a&gt; block declared as triple-dashed lines. Declare the &lt;code&gt;title&lt;/code&gt; property.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Free&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Images/Videos"&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After the title, add your resource similar to this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;### 1.[Reacti Flux](https://discord.com/invite/reactiflux)&lt;/span&gt;

Reacti Flux is the largest community of React developers (110,000+)!

&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;Alt Text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at0opxihu02u0o2xvcq2.png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-pull-the-recent-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Pull the recent changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before you make any changes, it's good to check if there have been any changes from GitHub down to your local copy  by using the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-make-your-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Make Your Changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Make changes in any of the markdown files under the &lt;code&gt;docs&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-review-your-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Review Your Changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;git diff&lt;/code&gt; command to see the changes you’ve made. This will show your changes with the + sign. To quit the terminal, use the q key.&lt;/p&gt;

&lt;p&gt;Run the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure the page loads without any errors and you have added a new resource.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-stage-commit-and-push-your-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Stage, Commit and Push Your Changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Next, you want to stage, commit, and push your changes to your fork. Staging means saving your changes so they are ready to be added to your branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "type your commit message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;m is a flag for the message. That means that whatever comes after -m is a message explaining your commit. Your commit message doesn't have any effect on your code; it's like a comment.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; adds the changes on your computer to your GitHub repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-create-a-pull-request"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. Create a Pull Request&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Navigate back to the original repo from which you forked, and you will see a prompt to open a new Pull Request from the branch you just pushed to.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Compare &amp;amp; pull request&lt;/strong&gt;, add a description describing the changes you made. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-screenshot-of-the-page-with-the-added-resource"&gt;
  &lt;/a&gt;
  Add a screenshot of the page with the added resource.
&lt;/h2&gt;

&lt;p&gt;To submit your pull request, click the green &lt;strong&gt;'Create pull request'&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Well done, you have made your pull request! 🎉🎉🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-wait-for-merge-and-code-review"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11. Wait For Merge and Code Review&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The owner of the repo can now review your changes and decide whether to approve and merge, request changes, or decline your pull request.&lt;/p&gt;

&lt;p&gt;TIP: If you need to add more changes to this pull request, you don't need to create different pull requests. Just push your new changes to the same fork and it will automatically update the PR.&lt;/p&gt;

&lt;p&gt;I hope you liked this guide on how to make a pull request for the project. If you would like to learn more about Open Source, you can check out these resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.guide/how-to-contribute/"&gt;How to Contribute to Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=c6b6B9oN4Vg&amp;amp;ab_channel=FacebookOpenSource"&gt;Contributing to Open Source for the first time&lt;/a&gt; video&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;What is Free Software?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;May the FOSS be with you!&lt;/p&gt;

&lt;p&gt;Let's connect. You can follow me on &lt;a href="https://github.com/hulyak"&gt;Github&lt;/a&gt; and &lt;a href="https://twitter.com/hulyakarkya"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>contributorswanted</category>
      <category>news</category>
      <category>beginners</category>
    </item>
    <item>
      <title>PART 0: Fundamentals of NEST.js </title>
      <author>xamhans</author>
      <pubDate>Sat, 02 Oct 2021 18:46:21 +0000</pubDate>
      <link>https://dev.to/xamhans/part-0-fundamentals-of-nest-js-365n</link>
      <guid>https://dev.to/xamhans/part-0-fundamentals-of-nest-js-365n</guid>
      <description>&lt;p&gt;Hi there, this is PART 0 of my NEST.js series. In this chapter I will explain the fundamentals of NEST.js, what it is and explain a bit of how it is structured. &lt;br&gt;
Therefore we use the provided CLI to create a brand new project. Afterwards we are going through each generated file and what purpose it has.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-nestjs"&gt;
  &lt;/a&gt;
  What is NEST.js?
&lt;/h1&gt;

&lt;p&gt;Here is what the official &lt;a href="https://docs.nestjs.com/"&gt;documentation &lt;/a&gt; says.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nest (NestJS) is a framework for &lt;strong&gt;building efficient, scalable&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;server-side applications*&lt;br&gt;
 Under the hood, Nest makes use of robust HTTP Server frameworks like &lt;a href="https://expressjs.com/"&gt;&lt;strong&gt;Express&lt;/strong&gt;&lt;/a&gt; (the default) and optionally can be configured to use [&lt;/strong&gt;Fastify*(&lt;a href="https://github.com/fastify/fastify"&gt;https://github.com/fastify/fastify&lt;/a&gt;) as well!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So this means, that a lot of smart people put much effort in building on top of express (or fastify) a set of pre-built &lt;strong&gt;capabilities&lt;/strong&gt; like logging or validation. This is great, because you dont have to built this by yourself, which means that you can focus on what matters, the business logic. Futhermore you can still use node libaries that you are used to, which is awesome, the best of both.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nest provides a level of abstraction above these common Node.js frameworks (Express/Fastify), but also exposes their APIs directly to the developer. This gives developers the freedom to use the myriad ofthird-party modules which are available for the underlying platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#your-first-nestjs-project"&gt;
  &lt;/a&gt;
  Your first NEST.js project
&lt;/h2&gt;

&lt;p&gt;We start by installing the CLI provided by NEST&lt;br&gt;
&lt;code&gt;npm i -g @nestjs/cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We use the CLI to create a new project&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nest new demo_project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This creates a couple of files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;app.controller.ts&lt;/code&gt;  A basic controller with a single route.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app.controller.spec.ts&lt;/code&gt; The unit tests for the controller.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app.module.ts&lt;/code&gt; The root module of the application.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app.service.ts&lt;/code&gt; A basic service with a single method.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;main.ts&lt;/code&gt; The entry file of the application&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#maints-the-starting-point"&gt;
  &lt;/a&gt;
  main.ts - the starting point
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NestFactory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;NestFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppModule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To create a Nest application instance, we use the core &lt;code&gt;NestFactory&lt;/code&gt; class. &lt;code&gt;NestFactory&lt;/code&gt; exposes a few static methods that allow creating an application instance. The &lt;code&gt;create()&lt;/code&gt; method returns an application object, which will be assigned to the app variable. Afterwards we call the &lt;code&gt;listen&lt;/code&gt; function to start the application and pass the port number (3000) as an parameter.  Run the command to start the application.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Once the application is running, open your browser and navigate to &lt;code&gt;http://localhost:3000/&lt;/code&gt;. You should see the &lt;code&gt;Hello World!&lt;/code&gt; message. Congratz, you just launched your first NEST.js backend &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#appmodulets-the-root-module-of-the-application"&gt;
  &lt;/a&gt;
  app.module.ts - The root module of the application
&lt;/h3&gt;

&lt;p&gt;In NEST.js you structure your code as modules. You know this from React/Vue/Angular, where you create components. It is the same idea, but a module in NEST.js is a bit more abstract, because it can contains multiple controllers or services. Just remember, &lt;strong&gt;functionalitiy&lt;/strong&gt; that belongs to the &lt;strong&gt;same application domain&lt;/strong&gt;  it's wrapped with a &lt;strong&gt;module&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each application has at least one module, a &lt;strong&gt;root module&lt;/strong&gt;. The root module is the starting point Nest uses to build the &lt;strong&gt;application graph&lt;/strong&gt; - the internal data structure Nest uses to resolve module and provider relationships and dependencies.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2NF_8gL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.nestjs.com/assets/Modules_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2NF_8gL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.nestjs.com/assets/Modules_1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the app.module.ts we register all modules that are used in the application. So if we create a new module called users (using the CLI) &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nest generate module users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Make sure it is defined in the &lt;strong&gt;imports&lt;/strong&gt; section of the app.module.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UsersModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./users/users.module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppImports&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.imports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;

&lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="nx"&gt;UsersModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HealthController&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TypegooseHealthIndicator&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#appcontrollerts-a-basic-controller-with-a-single-route"&gt;
  &lt;/a&gt;
  app.controller.ts -  A basic controller with a single route
&lt;/h3&gt;

&lt;p&gt;In general, a &lt;a href="https://docs.nestjs.com/controllers#controllers"&gt;controller&lt;/a&gt; is responsible for handling incoming requests. In addition the controller also does input validation. If you have business logic or resuable functionality, we outsource this in a service class (which we will discuss later).  The service class is provided by a dependency injection. &lt;br&gt;
NEST is using &lt;a href="https://refactoring.guru/design-patterns/decorator"&gt;decorators&lt;/a&gt; a lot. In order to tell NEST that we want to make a file to an controller, we use the &lt;code&gt;@Controller()&lt;/code&gt; decorator above the class definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;  &lt;span class="kd"&gt;class&lt;/span&gt;  &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;  &lt;span class="k"&gt;readonly&lt;/span&gt;  &lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;AppService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// reachable at localhost:3000/&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;getHello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// reachable at localhost:3000/profile&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;getHello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnProfile&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;-----------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;// make the controller accessible at localhost:3000/cats&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;  &lt;span class="kd"&gt;class&lt;/span&gt;  &lt;span class="nx"&gt;AppCatController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;  &lt;span class="k"&gt;readonly&lt;/span&gt;  &lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;AppService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// reachable at localhost:3000/cats/profile&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;getHello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnProfile&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember the &lt;em&gt;Hello World&lt;/em&gt; when you navigated to localhost:3000? The &lt;code&gt;getHello()&lt;/code&gt; Function was responsible for that. Above the &lt;code&gt;getHello()&lt;/code&gt;function you see another Decorator, &lt;code&gt;@Get()&lt;/code&gt; , which is responsible for handling the GET Requests. What about the other HTTP request methods? Well clearly NEST provides them as well&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@Get()&lt;/code&gt;,  &lt;code&gt;@Post()&lt;/code&gt;,  &lt;code&gt;@Put()&lt;/code&gt;,  &lt;code&gt;@Delete()&lt;/code&gt;,  &lt;code&gt;@Patch()&lt;/code&gt;,  &lt;code&gt;@Options()&lt;/code&gt;, and  &lt;code&gt;@Head()&lt;/code&gt;. In addition,  &lt;code&gt;@All()&lt;/code&gt;  defines an endpoint that handles all of them.&lt;/p&gt;

&lt;p&gt;Check out the code example above to learn more about the &lt;a href="https://docs.nestjs.com/controllers#request-object"&gt;routes&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#appservicets-a-basic-service-with-a-single-method"&gt;
  &lt;/a&gt;
  app.service.ts - A basic service with a single method.
&lt;/h3&gt;

&lt;p&gt;A service (declared with the &lt;code&gt;@Injectable()&lt;/code&gt; decorator) will be responsible for data storage and retrieval or business logic, and is designed to be used by the Controller, so it's a good candidate to be defined as a provider. Providers are a fundamental concept in Nest. Many of the basic Nest classes may be treated as a provider – services, repositories, factories, helpers, and so on. The main idea of a provider is that it can be  &lt;strong&gt;injected&lt;/strong&gt;  as dependency; this means objects can create various relationships with each other, and the function of "wiring up" instances of objects can largely be delegated to the Nest runtime system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;  &lt;span class="kd"&gt;class&lt;/span&gt;  &lt;span class="nx"&gt;AppService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nx"&gt;getHello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#appcontrollerspects-the-unit-tests-for-the-controller"&gt;
  &lt;/a&gt;
  app.controller.spec.ts - The unit tests for the controller.
&lt;/h3&gt;

&lt;p&gt;How do you assume that your controller is working the way it should? Well NEST also handles this for us. If we create a new module with the CLI, NEST automatically adds a .spec file, a file, where we can define tests. NEST is using &lt;a href="https://jestjs.io/"&gt;JEST&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/supertest"&gt;Supertest&lt;/a&gt; frameworks for this purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TestingModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AppController&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="na"&gt;appController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;TestingModule&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;await&lt;/span&gt;  &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;

&lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppService&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;appController&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return "Hello World!"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHello&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whats happening here? In JEST there are HOOKS like in React. &lt;code&gt;beforeEach&lt;/code&gt; is on of these Hooks. It is called before each test. There an app object is being created like in the main.ts file. From there we can access the Controller we want to test, in this case, the AppController.  In JEST we group multiple tests with &lt;code&gt;describe()&lt;/code&gt;. As an first parameter we pass a string, defining the group, as an second, we pass an anonymous function. Inside we make use of the &lt;code&gt;it()&lt;/code&gt; function. With the &lt;code&gt;it()&lt;/code&gt; function we define a specific test. Like the &lt;code&gt;describe()&lt;/code&gt; function, the first parameter is used to describe the test, the second an anonymous function to write the test logic. There we make use the &lt;code&gt;expect()&lt;/code&gt; func, where we basically check if the &lt;code&gt;getHello()&lt;/code&gt; function from the controller is returning 'Hello World'.&lt;br&gt;
Go to console and type:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pr6qGFq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/vqvwkC6/Unbenannt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pr6qGFq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/vqvwkC6/Unbenannt.jpg" alt="jest successful tests"&gt;&lt;/a&gt;&lt;br&gt;
JEST will run our test (.spec) files. Yep, everything working as expected, nice. If you want to learn more about JEST and how to write tests, check out the &lt;a href="https://docs.nestjs.com/fundamentals/testing#testing"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Lets finish this section with a picture. It illustrates a Module, which is responsible for the user handling in our backend. It shows the tasks and the relationships between the different parts we discussed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y7mFQF0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/jwdGy1c/NESTJS-drawio-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y7mFQF0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/jwdGy1c/NESTJS-drawio-2.png" alt="Relationship between Module, Controller, Service in NEST:js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NEST.js is built on top of  (express/fastify) with batteries included, but offers you the freedom to use node related libaries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A module wraps functionality that belongs to each other. With this approach, you automatically organize your code in an effective way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Controllers for input validation and request handling, use Services for business logic or ORM related stuff and write tests to make sure that everything works as expected&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Register your modules in the import section of the root module (&lt;code&gt;app.module.ts&lt;/code&gt;) in order to use them &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everything in NEST that is uses the &lt;code&gt;@Injectable()&lt;/code&gt; decorator, is a &lt;a href="https://docs.nestjs.com/providers"&gt;provider&lt;/a&gt; in the NEST universum&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>nest</category>
      <category>nestjs</category>
    </item>
    <item>
      <title>Some useful Libraries for .NET projects</title>
      <author>Jéssica Nathany</author>
      <pubDate>Sat, 02 Oct 2021 18:29:17 +0000</pubDate>
      <link>https://dev.to/jessicanathany/some-useful-libraries-for-net-projects-5dbo</link>
      <guid>https://dev.to/jessicanathany/some-useful-libraries-for-net-projects-5dbo</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsOcamuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tlg6wl3z27c8k6jmkq2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsOcamuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tlg6wl3z27c8k6jmkq2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will share same libraries and packages to make your .NET project easier, and explain a little about their functionality.Note: You can copy copy the library links from github and paste them into your Notions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NBuilder&lt;/strong&gt;&lt;br&gt;
Is a library that allows you to rapidly create test data, automatically. Some examples below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nbuilder/nbuilder"&gt;NBuilder Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package NBuilder -Version 6.1.0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lAP3NW-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhboepxzlaes8pc7ebn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lAP3NW-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhboepxzlaes8pc7ebn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvDSnKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf3np76x7sph7b1jp3jh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvDSnKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf3np76x7sph7b1jp3jh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote about this library in my last article&lt;a href="https://dev.to/jessicanathany/tools-o-improve-your-unit-test-with-net-1ekb"&gt;Tools o improve your unit test with .NET&lt;/a&gt;. I have a Github repository about Unit Test and I used this library for test ([Unit Test]&lt;a href="https://github.com/JessicaNathany/unit-test"&gt;https://github.com/JessicaNathany/unit-test&lt;/a&gt;) the code ist portuguese but I will write in english.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faker.NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This library is a little diferent the NBuilder, because if you want something whic looks like actual names, address, email, thelephone numbers, etc you can use Faker.NET.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/slashdotdash/faker-cs"&gt;Faker.Net Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Faker.Net -Version 1.5.148&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bi3nQSQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwf01pxv7kf2jspa2wff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bi3nQSQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwf01pxv7kf2jspa2wff.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bogus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bogus is a simple and sane fake data generator for .NET languages like C#, F# and VB.NET. Bogus is fundamentally a C# port of faker.js and inspired by FluentValidation's syntax sugar. Created by Brian Chavez.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bchavez/Bogus"&gt;Bogus Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Bogus -Version 33.1.1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example bellow is from repository Brian Chavez&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJvvG_PF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyjxrqhn9d1s99wpgtyz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJvvG_PF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyjxrqhn9d1s99wpgtyz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ocelot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ocelot is a .NET API Gateway. This project is aimed at people using .NET running a micro services / service oriented architecture that need a unified point of entry into their system. However it will work with anything that speaks HTTP and run on any platform that ASP.NET Core supports.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ThreeMammals/Ocelot"&gt;Ocelot Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Ocelot -Version 17.0.0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example below is taken from the website &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/implement-api-gateways-with-ocelot"&gt;Microsoft Documentation API Gateway with Ocelot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDBol4By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdjfs95zrpeixq5r19t1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDBol4By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdjfs95zrpeixq5r19t1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Polly&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Polly is a .NET resilience and transient-fault-handling library that allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ThreeMammals/Ocelot"&gt;Polly Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Polly -Version 7.2.2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example below is taken from repository Polly Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmX0sdqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05xy2764e1q8ekhs5xz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmX0sdqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05xy2764e1q8ekhs5xz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CacheManager&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;CacheManager is an open source caching abstraction layer for .NET written in C#. It supports various cache providers and implements many advanced features.&lt;/p&gt;

&lt;p&gt;The main goal of the CacheManager package is to make developer's life easier to handle even very complex caching scenarios..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MichaCo/CacheManager"&gt;CacheManager Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package CacheManager.Core -Version 2.0.0-beta-1629&lt;/em&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>developers</category>
      <category>packages</category>
    </item>
    <item>
      <title>🪟 Windows 11 inspired portfolio 🪟</title>
      <author>vova ushenko</author>
      <pubDate>Sat, 02 Oct 2021 18:19:47 +0000</pubDate>
      <link>https://dev.to/vovacodesca/windows-11-inspired-portfolio-nni</link>
      <guid>https://dev.to/vovacodesca/windows-11-inspired-portfolio-nni</guid>
      <description>&lt;p&gt;👋Hi there and Happy Hacktoberfest 2021 fellow developers! 🎊 &lt;br&gt;
I hope you're doing fantastic!&lt;/p&gt;

&lt;p&gt;In the past, I was powerfully impressed by a portfolio that was built like a simple OS. So, this basically has always been my small dream to build a portfolio-app that visually mimics an operating system.&lt;/p&gt;

&lt;p&gt;Recently, I had some free time and I finally decided to turn this plan into reality. So, I started working on 🪟 Windows-11 inspired portfolio ✨.&lt;/p&gt;

&lt;p&gt;You can try it out here: &lt;a href="https://www.vovacodes.ca/"&gt;https://www.vovacodes.ca/&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/vovaushenko/vovacodes"&gt;https://github.com/vovaushenko/vovacodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a Next.js app built from scratch, that has a small backend powered by MongoDB. It is fully written in TypeScript, so if you're learning it, you could explore the GitHub repo 💥&lt;/p&gt;

&lt;p&gt;In a nutshell the stack is - &lt;br&gt;
⭐ Next.js, &lt;br&gt;
⭐ React, &lt;br&gt;
⭐ Styled-Components, &lt;br&gt;
⭐ Redux &lt;br&gt;
⭐ Mongo DB.&lt;/p&gt;

&lt;p&gt;The app has a design and component system powered by &lt;br&gt;
💜 Storybook 💜 &lt;/p&gt;

&lt;p&gt;This is not only an &lt;em&gt;OS-looking app&lt;/em&gt; but also &lt;em&gt;beautiful slides&lt;/em&gt; about me, which can be found by navigating and using the OS.&lt;/p&gt;

&lt;p&gt;The App has a ton of cool features (for instance you can leave me a comment and later it will be displayed with a nice random avatar in a flying carousel). &lt;strong&gt;So, leave a comment!😉&lt;/strong&gt; I would be happy to hear from You! 🙌&lt;/p&gt;

&lt;p&gt;Essentially, it has a lot of nifty features, so consider exploring it and let me know what is your favorite one!✨ &lt;/p&gt;

&lt;p&gt;❗ &lt;em&gt;Notice, on mobile only portfolio part will be shown&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS. I Use Arch BTW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Hacktoberfest 2021 Again! Wish you all the best! &lt;/p&gt;

&lt;p&gt;Cheers! 🤙&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At a glance&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6m2RztYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca6669yuw5lynzihrxrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6m2RztYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca6669yuw5lynzihrxrw.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05cU9UFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y6o28hryik4xictggy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05cU9UFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y6o28hryik4xictggy5.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzCkruBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vihiirh1kfetidr87ubd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzCkruBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vihiirh1kfetidr87ubd.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iyUtgsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v8an8xlvnve68h16ass.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iyUtgsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v8an8xlvnve68h16ass.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ssOiV1DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oydl5h6zt1fi9l7fq4ap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssOiV1DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oydl5h6zt1fi9l7fq4ap.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind, this is a work in progress! More features to come (and bugs tackled 😄)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
